//__ES4__

(function() { var $window = this; var window = $window.parent || $window; var global = window; var document = window.document; var $es4 = window.$es4 || (window.$es4 = {}); var _ = window._; var $ = window.$; 

/**
 * @author		John Brandle
 * @license		see "NOTICE" file
 * @date		04.15.2013
 */

if ($es4.$$window === undefined)
{	 
	$es4.$$window = $window;
	$es4.$$startTime = new Date().getTime();
	 
	$es4.$$EMPTY_ARRAY = [];
	$es4.$$EMPTY_OBJECT = {};
	$es4.$$VALUE_OBJECT = {};
	$es4.$$DEFAULT_PROPERTY_VALUE = {};
	$es4.$$MANUAL_CONSTRUCT = {};
	 
	Object.defineProperty(Object.prototype, '$$hasOwnProperty', {value:Object.prototype.hasOwnProperty});
	Object.defineProperty(Object.prototype, '$$propertyIsEnumerable', {value:Object.prototype.propertyIsEnumerable});

	Object.defineProperty(Object.prototype, 'hasOwnProperty', {value:function(property)
	{
		var proto = this;
		while (proto !== null)
		{
			if (proto.$$hasOwnProperty(property)) return true;
			
			proto = proto.__proto__;
		}
		
		return false;
	}});
	Object.defineProperty(Object.prototype, '$$hasOwnProperty_private', {value:Object.prototype.hasOwnProperty});

	Object.defineProperty(Object.prototype, 'propertyIsEnumerable', {value:function(property)
	{
		var proto = this;
		while (proto !== null)
		{
			if (proto.$$hasOwnProperty(property)) return proto.$$propertyIsEnumerable(property);
			
			proto = proto.__proto__;
		}
		
		return false;
	}});

	Object.defineProperty(Object.prototype, 'toString', {value:function() 
	{ 
		var val = (this.constructor !== undefined) ? this.constructor.name : this; //nodejs depd blows up without this
		return '[object ' + val + ']'; 
	}});

	Object.defineProperty(Object.prototype, '$$nextNameIndex', {value:function(index)
	{
		if (this.$$names === undefined || index === 0)
		{
			if (this.$$names === undefined) Object.defineProperty(this, '$$names', void ($es4.$$VALUE_OBJECT.value = []) || $es4.$$VALUE_OBJECT);
			else this.$$names.splice(0, this.$$names.length);
		
			var i = 0;
			for (var name in this) this.$$names[i++] = name;
		}
		
		return (index < this.$$names.length) ? index + 1 : 0;
	}});

	Object.defineProperty(Object.prototype, '$$nextName', {value:function(index)
	{	
		if (this.$$names === undefined) 
		{
			Object.defineProperty(this, '$$names', void ($es4.$$VALUE_OBJECT.value = []) || $es4.$$VALUE_OBJECT);
			
			var i = 0;
			for (var name in this) this.$$names[i++] = name;
		}

		var name = this.$$names[index - 1];
		if (!(name in this))
		{
			this.$$nextNameIndex(0);
			return this.$$nextName(index);
		}
		
		return name;
	}});

	Object.defineProperty(Object.prototype, '$$nextValue', {value:function(index)
	{
		if (this.$$names === undefined) 
		{
			Object.defineProperty(this, '$$names', void ($es4.$$VALUE_OBJECT.value = []) || $es4.$$VALUE_OBJECT);
			
			var i = 0;
			for (var name in this) this.$$names[i++] = name;
		}
		
		var name = this.$$names[index - 1];
		if (!(name in this))
		{
			this.$$nextNameIndex(0);
			return this.$$nextValue(index);
		}
		
		return this[name]; //TODO $$get(this, $$this, $$thisp, name);
	}});

	$es4.requestAnimationFrame = $es4.$$window.requestAnimationFrame || $es4.$$window.webkitRequestAnimationFrame || $es4.$$window.mozRequestAnimationFrame || $es4.$$window.oRequestAnimationFrame || $es4.$$window.msRequestAnimationFrame;

	$es4.$$class = function(Type, info, fullyQualifiedName)
	{
		if (Type.name === undefined) Object.defineProperty(Type, 'name', {value:fullyQualifiedName.split('::').pop()});
		Type.$$isclass = true;
		Type.$$fullyQualifiedName = fullyQualifiedName;
		Type.$$info = info;
		Type.toString = function() { return '[class ' + Type.name + ']'; };
		
		if (info === undefined) return Type;  //basic type
		
		Type.$$pcinit = function()
		{	
			info = Type.$$info;
		
			Type.$$info = undefined;
			Type.$$pcinit = undefined;
			
			if (info === null) 
			{
				$es4.$$extends(Type, Object);
				return;
			}
			
			if (info.INTERFACES !== undefined)
			{
				for (var i = info.INTERFACES.length; i--;) 
				{
					info.INTERFACES[i].$$pcinit();
					if (info.INTERFACES[i].$$sinit !== undefined) info.INTERFACES[i].$$sinit();
				}
			}

			if (info.EXTENDS !== undefined) 
			{
				var extendsInfo = info.EXTENDS;
				if (typeof extendsInfo === 'string')
				{ 
					var index = extendsInfo.lastIndexOf('.');
					if (index === -1) $es4.$$extends(Type, $es4.$$[''][extendsInfo]);
					else $es4.$$extends(Type, $es4.$$[extendsInfo.substring(0, index)][extendsInfo.substring(index + 1)]);
				}
				else $es4.$$extends(Type, extendsInfo);
			}
			else $es4.$$extends(Type, Object);
			
			if (info.IMPLEMENTS !== undefined)
			{
				var implementsInfo = info.IMPLEMENTS;
				for (var i = implementsInfo.length; i--;)
				{
					var implementInfo = implementsInfo[i];
					
					if (typeof implementInfo !== 'string') continue;
					
					var index = implementInfo.lastIndexOf('.');
					if (index === -1) implementsInfo[i] = $es4.$$[''][implementInfo];
					else implementsInfo[i] = $es4.$$[implementInfo.substring(0, index)][implementInfo.substring(index + 1)];
				}
				
				implementsInfo.unshift(Type);
				
				Type.$$implementsInterfaces = implementsInfo;
				Type.$$_implements = [];
				switch (implementsInfo.length)
				{
					case 1:
						break;
					case 2:
						$es4.$$implements(implementsInfo[0], implementsInfo[1]);
						break;
					case 3:
						$es4.$$implements(implementsInfo[0], implementsInfo[1], implementsInfo[2]);
						break;
					case 4:
						$es4.$$implements(implementsInfo[0], implementsInfo[1], implementsInfo[2], implementsInfo[3]);
						break;
					default:
						$es4.$$implements.apply(null, implementsInfo);
						break;
				}
			}
			else Type.$$implementsInterfaces = $es4.$$EMPTY_ARRAY;
			
			if (info.CLASSES !== undefined)
			{
				for (var i = info.CLASSES.length; i--;) 
				{
					info.CLASSES[i].$$pcinit();
					if (info.CLASSES[i].$$sinit !== undefined) info.CLASSES[i].$$sinit();
				}
			}
		};
		
		return Type;
	}

	$es4.$$function = function(Type)
	{
		Type.$$ismethod = true;
		
		return Type;
	}

	$es4.$$interface = function(Type, info, fullyQualifiedName)
	{
		if (Type.name === undefined) Object.defineProperty(Type, 'name', {value:fullyQualifiedName.split('::').pop()});
		Type.$$isclass = true;
		Type.$$fullyQualifiedName = fullyQualifiedName;
		Type.$$info = info;
		Type.toString = function() { return '[class ' + Type.name + ']'; };
		
		Type.$$pcinit = function()
		{
			info = Type.$$info;
			
			Type.$$info = undefined;
			Type.$$pcinit = undefined;
			
			if (info === null) 
			{
				Type.$$implementsInterfaces = $es4.$$EMPTY_ARRAY;
				return;
			}

			if (info.IMPLEMENTS !== undefined) 
			{
				var implementsInfo = info.IMPLEMENTS;
				for (var i = implementsInfo.length; i--;)
				{
					var implementInfo = implementsInfo[i];
					
					if (typeof implementInfo !== 'string') continue;
					
					var index = implementInfo.lastIndexOf('.');
					if (index === -1) implementsInfo[i] = $es4.$$[''][implementInfo];
					else implementsInfo[i] = $es4.$$[implementInfo.substring(0, index)][implementInfo.substring(index + 1)];
				}
				
				Type.$$implementsInterfaces = info.IMPLEMENTS;
			}
			else Type.$$implementsInterfaces = $es4.$$EMPTY_ARRAY;
		};

		return Type;
	}

	$es4.$$super = function(object)
	{
		var s = {};
		Object.defineProperty(s, '$$z', {value:function()
		{
			if (object.__proto__.$$constructor === undefined) throw new Error('trouble calling super for: ' + object.constructor.name + ', ' + object.__proto__.constructor.name);
			switch (arguments.length)
			{
				case 0:
					object.__proto__.$$constructor();
					break;
				case 1:
					object.__proto__.$$constructor(arguments[0]);
					break;
				case 2:
					object.__proto__.$$constructor(arguments[0], arguments[1]);
					break;
				case 3:
					object.__proto__.$$constructor(arguments[0], arguments[1], arguments[2]);
					break;
				default:
					object.__proto__.$$constructor.apply(null, arguments);
					break;
			}
			
		}});
		s.__proto__ = object.__proto__;
		return s;
	}

	$es4.$$super2 = function($$this, Type, $$typeString, propertyName, type, arg)
	{
		while (!Type.prototype.$$hasOwnProperty(propertyName)) Type = Type.__proto__;	
		
		if (type == 'func') 
		{
			//if ($$this[$$typeString].$$hasOwnProperty(propertyName)) return $$this[$$typeString][propertyName];
			return Object.getOwnPropertyDescriptor(Type.prototype, propertyName).get.call($$this);
		}
		
		if (type == 'get') return Object.getOwnPropertyDescriptor(Type.prototype, propertyName).get.call($$this);
		if (type == 'set') return Object.getOwnPropertyDescriptor(Type.prototype, propertyName).set.call($$this, arg);
		
		throw new Error('unknown type');
	}

	$es4.$$getOwnScope = function(scope, Type)
	{
		if (Type.prototype.$$v !== undefined) return Type.prototype;
		
		//proto method
		while (scope.constructor != Type) scope = scope.__proto__;	
		return scope;
	}

	$es4.$$getDescriptor = function(scope, propertyName)
	{
		return Object.getOwnPropertyDescriptor(scope, propertyName);
	}

	$es4.$$primitive = function(object)
	{
		if (object !== undefined && object !== null) 
		{
			switch (object.constructor.name)
			{
				case 'Boolean':
				case 'String':
				case 'Number':
				case 'uint':
				case 'int':
					return object.valueOf();
			}
		}
		
		return object;
	}

	$es4.$$construct = function(object, args)
	{	
		if (object.constructor.$$construct !== undefined) return object.constructor.$$construct(object, args);
		
		var objectTypeObject = object.__proto__;
		var Type = object.constructor.__proto__;
		var innerObject = object;
		var innerTypeObject = objectTypeObject;
		var innerObjectSave;
		var innerObjectSaveConstructor;
		var VALUE_OBJECT = $es4.$$VALUE_OBJECT;
		var MANUAL_CONSTRUCT = $es4.$$MANUAL_CONSTRUCT;
		while (Type.$$isclass !== undefined && Type !== Class)
		{
			innerObjectSave = innerObject;
			innerObjectSaveConstructor = innerObject.constructor;
			innerObject = innerObject.__proto__ = (Type !== Object) ? new Type(MANUAL_CONSTRUCT, object) : {};
			Object.defineProperty(innerObjectSave, 'constructor', void (VALUE_OBJECT.value = innerObjectSaveConstructor) || VALUE_OBJECT);
			
			innerTypeObject = innerTypeObject.__proto__ = innerObject.__proto__;
			
			Type = Type.__proto__;
		}
		innerObject.__proto__ = objectTypeObject;
		
		innerObject = object;
		while (innerObject !== objectTypeObject)
		{
			if (innerObject.$$iinit !== undefined) innerObject.$$iinit();
			innerObject = innerObject.__proto__;
		}
		
		switch (args.length)
		{
			case 0:
				object.$$constructor();
				break;
			case 1:
				object.$$constructor(args[0]);
				break;
			case 2:
				object.$$constructor(args[0], args[1]);
				break;
			case 3:
				object.$$constructor(args[0], args[1], args[2]);
				break;
			case 4:
				object.$$constructor(args[0], args[1], args[2], args[3]);
				break;
			default:
				object.$$constructor.apply(object, args);
				break;
		}
	}

	$es4.$$extends = function(object, Type)
	{
		object.__proto__ = Type;
	}

	$es4.$$implements = function(object)
	{
		var argumentsLength = arguments.length;
		for (var i = 1; i < argumentsLength; i++)
		{
			var Type = arguments[i];
			
			var implementsInterfaces = Type.$$implementsInterfaces;
			for (var j = implementsInterfaces.length; j--;) $es4.$$implements(object, implementsInterfaces[j]);
			
			object.$$_implements.push(Type);
		}
	}

	$es4.$$is = function(object, Type)
	{
		if ($es4.$$instanceof(object, Type)) return true;
		
		var proto = object;
		while (proto != null)
		{
			if (proto.constructor.$$_implements !== undefined && proto.constructor.$$_implements.indexOf(Type) !== -1) return true;
			proto = proto.__proto__;
		}
		
		return false
	}

	$es4.$$instanceof = function(object, Type)
	{
		if (object === null || object === undefined) return false;
		if (Type === Class && object.$$isclass !== undefined) return true;
		if (Type === Object && object.$$isclass === undefined) return true;
		if (object instanceof Type) return true;
		
		var typeOfObject = typeof object;
		
		switch (typeOfObject)
		{
			case 'string':
				return Type === String;
			case 'number':
				if (Type === Number) return true;
				if (Type === uint || Type === int) return Type(object) == object;
				break;
			case 'boolean':
				return Type === Boolean;
			case 'function':
				if (object.$$isclass === undefined) return Type === Function;
				if (Type === Function) return false;

				var proto = object.__proto__;
				while (proto !== null)
				{
					if (proto === Type) return true;
					proto = proto.__proto__;
				}
				
				return false;
		}
		
		return false;
	}

	$es4.$$typeof = function(object)
	{
		return (object !== null && object !== undefined && object.$$isclass !== undefined) ? 'object' : typeof object;
	}

	$es4.$$as = function(object, Type)
	{
		return (object === null || object === undefined) ? null : ($es4.$$is(object, Type)) ? object : null;
	}

	$es4.$$coerce = function(value, coerceType)
	{
		switch (coerceType)
		{
			case Object:
			case Function:
			case Array:
			case Date:
				return (!$es4.$$is(value, coerceType)) ? null : value;
			case String:
				return (value === null || value === undefined) ? null : String(value);
			case Boolean:
				if (value === true || value === false) return value;
				return Boolean(value);
			case Number:
			case uint:
			case int:
				return coerceType(value);
			default:			
				return coerceType(value);
		}
	}

	$es4.$$isPrivateProperty = function(scope, object)
	{
		if (typeof object !== 'string') return false;
		
		var proto = scope;
		while (proto !== null)
		{
			if (proto.$$hasOwnProperty(object)) return (scope.$$private !== undefined && scope.$$private.$$hasOwnProperty(object));
			
			proto = proto.__proto__;
		}
		
		throw new Error('$$isPrivateProperty:: property not found: ' + object);
	}

	$es4.$$delete = function(scope, $$this, $$thisp)
	{
		var argumentsLength = arguments.length;

		if (argumentsLength > 4) 
		{
			var i, args = new Array(argumentsLength - 1);
			for (i = 0; i < argumentsLength - 1; i += 1) args[i] = arguments[i];		
			
			scope = $es4.$$get.apply(this, args);
		}
		
		var object = arguments[argumentsLength - 1];
		
		if (scope.$$hasOwnProperty_private('$$isProxy') && (typeof object !== 'string' || !scope.$$hasOwnProperty_private(object) || ($es4.$$isPrivateProperty(scope, object) && scope !== $$thisp))) return scope.$$delete(object);
		else return delete scope[object];
	}

	$es4.$$get = function(scope, $$this, $$thisp)
	{
		var argumentsLength = arguments.length;
		if (argumentsLength === 3) return scope;
		
		var originalScope = scope;
		var index = 3;
		while (index < argumentsLength)
		{
			var object = arguments[index];
			if (scope.$$hasOwnProperty_private('$$isProxy') && (typeof object !== 'string' || !scope.$$hasOwnProperty_private(object) || ($es4.$$isPrivateProperty(scope, object) && scope !== $$thisp))) scope = scope.$$get(object);
			else if (scope.constructor.$$isclass !== undefined && scope === $$this && $$thisp.$$private !== undefined && $$thisp.$$private.$$hasOwnProperty(object)) scope = $$thisp[object];
			else scope = scope[object];
			
			index++;
		}
		
		return (scope != null && scope.call !== undefined && scope.apply !== undefined && scope.bind !== undefined && scope.$$isclass === undefined && scope.$$ismethod === undefined && Function.prototype.$$hasOwnProperty(object)) ? scope.bind(originalScope) : scope;  //this is supposed to bind things like myarray.split //instead of doing this it this way, check if the scope is an array, then see if the name of the prop is a native function, like split, then bind as necessary
	}

	$es4.$$call = function(scope, $$this, $$thisp)
	{
		var argumentsLength = arguments.length;
		
		if (argumentsLength > 5) 
		{
			var i, args = new Array(argumentsLength - 2);
			for (i = 0; i < argumentsLength - 2; i += 1) args[i] = arguments[i];	
			
			scope = $es4.$$get.apply(this, args);
		}
		
		var args = arguments[argumentsLength - 1];
		var object = arguments[argumentsLength - 2];
		
		scope = (scope.constructor.$$isclass !== undefined && scope === $$this && $$thisp.$$private !== undefined && $$thisp.$$private.$$hasOwnProperty(object)) ? $$thisp : scope;
		if (scope.$$hasOwnProperty_private('$$isProxy') && (typeof object !== 'string' || !scope.$$hasOwnProperty_private(object) || ($es4.$$isPrivateProperty(scope, object) && scope !== $$thisp))) return scope.$$call(object, args);
		else 
		{
			try { return scope[object].apply(scope, args); }
			catch (error)
			{
				if ($es4.$$window.navigator.userAgent.indexOf("Firefox") > 0 && scope && $es4.$$is(scope[object], Function)) try { trace(scope[object].toSource()); } catch (error2) {}
				
				throw error;
			}
		}
	}

	$es4.$$set = function(scope, $$this, $$thisp)
	{
		var argumentsLength = arguments.length;
		
		if (argumentsLength > 5) 
		{
			var i, args = new Array(argumentsLength - 3);
			for (i = 0; i < argumentsLength - 3; i += 1) args[i] = arguments[i];	
			
			scope = $es4.$$get.apply(this, args);
		}
		
		var operator = arguments[argumentsLength - 1];
		var value = arguments[argumentsLength - 2];
		var object = arguments[argumentsLength - 3];
		
		scope = (scope.constructor.$$isclass !== undefined && scope === $$this && $$thisp.$$private !== undefined && $$thisp.$$private.$$hasOwnProperty(object)) ? $$thisp : scope;
		
		var useSet = (scope.$$hasOwnProperty_private('$$isProxy') && (typeof object !== 'string' || !scope.$$hasOwnProperty_private(object) || ($es4.$$isPrivateProperty(scope, object) && scope !== $$thisp)));
		switch (operator)
		{
			case '=':
				return (useSet) ? scope.$$set(object, value) : scope[object] = value;
			case '+=':
				if (useSet) { return (scope instanceof XMLList && !isNaN(object)) ? scope.$$append(object, value) : scope.$$set(object, scope.$$get(object) + value); }
				return scope[object] += value;
			case '-=':
				return (useSet) ? scope.$$set(object, scope.$$get(object) - value) : (scope[object] -= value);
			case '/=':
				return (useSet) ? scope.$$set(object, scope.$$get(object) / value) : (scope[object] /= value);
			case '*=':
				return (useSet) ? scope.$$set(object, scope.$$get(object) * value) : (scope[object] *= value);
			case '%=':
				return (useSet) ? scope.$$set(object, scope.$$get(object) % value) : (scope[object] %= value);
			case '|=':
				return (useSet) ? scope.$$set(object, scope.$$get(object) | value) : (scope[object] |= value);
			case '&=':
				return (useSet) ? scope.$$set(object, scope.$$get(object) & value) : (scope[object] &= value);
			case '^=':
				return (useSet) ? scope.$$set(object, scope.$$get(object) ^ value) : (scope[object] ^= value);
			case '<<':
				return (useSet) ? scope.$$set(object, scope.$$get(object) << value) : (scope[object]= scope[object] << value);
			case '>>':
				return (useSet) ? scope.$$set(object, scope.$$get(object) >> value) : (scope[object] = scope[object] >> value);
			case '>>>':
				return (useSet) ? scope.$$set(object, scope.$$get(object) >>> value) : (scope[object] = scope[object] >>> value);
			case '||=':
				return (useSet) ? scope.$$set(object, scope.$$get(object) || value) : (scope[object] = scope[object] || value);
			case '&&=':
				return (useSet) ? scope.$$set(object, scope.$$get(object) && value) : (scope[object] = scope[object] && value);
			case '++':
			case '--':
				if (value === 'prefix')
				{
					if (useSet) return scope.$$prefix(object, operator);  //TODO
					if (operator === '++') return ++scope[object];
					else return --scope[object];
				}
				else if (value === 'postfix')
				{
					if (useSet) return scope.$$postfix(object, operator);  //TODO
					if (operator === '++') return scope[object]++;
					else return scope[object]--;
				}
			default:
				throw new Error('unknown operator used in $$set: ' + operator);
		}
	}

	$es4.$$ = {};
	$es4.$$package = function($package)
	{
		return ($es4.$$[$package] !== undefined) ? $es4.$$[$package] : $es4.$$[$package] = ($package != '') ? {} : $es4.$$window;
	}

	Object.defineProperty(Object.prototype, '$$namespace', {value:function(namespace, object, pscope)
	{
		if (object === undefined) object = this;
		if (namespace.constructor === String) return ($es4.$$namespaces[namespace] === undefined) ? $es4.$$namespaces[namespace] = {name:namespace, toString:function() { return namespace; }} : $es4.$$namespaces[namespace];
		if (object.$$namespaces === undefined) Object.defineProperty(object, '$$namespaces', void ($es4.$$VALUE_OBJECT.value = {}) || $es4.$$VALUE_OBJECT);
		namespace = (object.$$namespaces && object.$$namespaces[namespace.name]) ? object.$$namespaces[namespace.name] : object.$$namespaces[namespace.name] = {};
		if (pscope === object || pscope === undefined) return namespace;
		
		var Class;
		var SuperClass;
		var Type;
		var objectProto;
		
		//for whatever reason, mobile safari inconsistently fails when testing if Type and SuperClass are equal 
		//an empty try catch try {} catch(e) {) appears to fix this issue... MAGIC!
		//to reproduce, create about 15 - 20 new TextField() objects in a row, and remove the try catch below
		//UPDATE: THIS MAY BE UNNECESSARY NOW
		try { Class = null; } catch(e) {}; //Note: Class = null is only there to prevent closure compiler warning
		
		Class = object.constructor;
		SuperClass = pscope.constructor;
		Type = Class;
		objectProto = $es4.$$EMPTY_OBJECT.__proto__;
		
		while (Type !== SuperClass)
		{
			if (!namespace.__proto__ || namespace.__proto__ === objectProto) namespace.__proto__ = {};
			namespace = namespace.__proto__;
			Type = Type.__proto__;
		}
		return namespace;
	}});
	$es4.$$namespaces = {};

	$es4.$$expose = function(functionName, closure)
	{
		$es4.$$exposed.functionName = closure;
	}
	$es4.$$exposed = {};

	$es4.$$constructor = function(scope, func)
	{	
		Object.defineProperty(scope, '$$constructor', void ($es4.$$VALUE_OBJECT.value = func) || $es4.$$VALUE_OBJECT);
	}

	$es4.$$iinit = function(scope, func)
	{
		Object.defineProperty(scope, '$$iinit', void ($es4.$$VALUE_OBJECT.value = func) || $es4.$$VALUE_OBJECT);
	}

	$es4.$$public_namespace = function(name, scope, propName)
	{
		if ($es4.$$namespaces[name] === undefined) $es4.$$namespaces[name] = {name:name, toString:function() { return name; }};
		
		Object.defineProperty(scope, propName, {value:$es4.$$namespaces[name]});
	}
	$es4.$$private_namespace = function(name, scope, propName)
	{
		if ($es4.$$namespaces[name] === undefined) $es4.$$namespaces[name] = {name:name, toString:function() { return name; }};
		
		if (scope.$$private === undefined) Object.defineProperty(scope, '$$private', {value:{}});
		scope.$$private[name] = name;
		
		Object.defineProperty(scope, propName, {value:$es4.$$namespaces[name]});
	}
	$es4.$$protected_namespace = $es4.$$public_namespace;
	$es4.$$internal_namespace = $es4.$$public_namespace;
	$es4.$$cnamespace_namespace = function(name, scope, namespace, propName)
	{
		$es4.$$public_namespace(name, $es4.$$namespace(namespace, scope), propName);
	}

	$es4.$$getDefaultPropertyValue = function(type)
	{
		if (type == null) return undefined;
		
		switch (type)
		{
			case int:
			case uint:
				return 0;
			case Number:
				return NaN;
			case Boolean:
				return false;
		}
		
		return null;
	}

	$es4.$$public_property = function(name, scope, coerceType)
	{
		if (coerceType === undefined)
		{
			Object.defineProperty(scope, name, {value:undefined, writable:true});
			return;
		}
		
		var obj;
		var getFunc;
		var setFunc;
		if (typeof scope === 'function')
		{
			var normalized = false;
			
			getFunc = function() 
			{ 
				if (scope.$$cinit !== undefined) scope.$$cinit(); 
				
				if (normalized === true) return obj;
				
				if (typeof coerceType === 'string')
				{
					var index = coerceType.lastIndexOf('.');
					if (index === -1) coerceType = $es4.$$[''][coerceType];
					else coerceType = $es4.$$[coerceType.substring(0, index)][coerceType.substring(index + 1)];
				}
				normalized = true;
				
				return obj = $es4.$$getDefaultPropertyValue(coerceType);
			}
			setFunc = function(value) 
			{ 
				if (scope.$$cinit !== undefined) scope.$$cinit(); 
				
				if (normalized === true)
				{
					obj = $es4.$$coerce(value, coerceType);
					return;
				}
				
				if (typeof coerceType === 'string')
				{
					var index = coerceType.lastIndexOf('.');
					if (index === -1) coerceType = $es4.$$[''][coerceType];
					else coerceType = $es4.$$[coerceType.substring(0, index)][coerceType.substring(index + 1)];
				}
				normalized = true;
				
				obj = $es4.$$coerce(value, coerceType);
			}
		}
		else 
		{
			obj = $es4.$$getDefaultPropertyValue(coerceType);
			getFunc = function() { return obj; };
			setFunc = function(value) { obj = $es4.$$coerce(value, coerceType); };
		}
		
		Object.defineProperty(scope, name, {get:getFunc, set:setFunc});
	}
	 
	$es4.$$private_property = function(name, scope, coerceType)
	{
		if (scope.$$private === undefined) Object.defineProperty(scope, '$$private', void ($es4.$$VALUE_OBJECT.value = {}) || $es4.$$VALUE_OBJECT);
		scope.$$private[name] = name;
		
		if (coerceType === undefined)
		{
			Object.defineProperty(scope, name, {value:undefined, writable:true});
			return;
		}
		
		var obj;
		var getFunc;
		var setFunc;
		if (typeof scope === 'function')
		{
			var normalized = false;
			
			getFunc = function() 
			{ 
				if (scope.$$cinit !== undefined) scope.$$cinit(); 
				
				if (normalized === true) return obj;
				
				if (typeof coerceType === 'string')
				{
					var index = coerceType.lastIndexOf('.');
					if (index === -1) coerceType = $es4.$$[''][coerceType];
					else coerceType = $es4.$$[coerceType.substring(0, index)][coerceType.substring(index + 1)];
				}
				normalized = true;
				
				return obj = $es4.$$getDefaultPropertyValue(coerceType);
			}
			setFunc = function(value) 
			{ 
				if (scope.$$cinit !== undefined) scope.$$cinit(); 
				
				if (normalized === true)
				{
					obj = $es4.$$coerce(value, coerceType);
					return;
				}
				
				if (typeof coerceType === 'string')
				{
					var index = coerceType.lastIndexOf('.');
					if (index === -1) coerceType = $es4.$$[''][coerceType];
					else coerceType = $es4.$$[coerceType.substring(0, index)][coerceType.substring(index + 1)];
				}
				normalized = true;
				
				obj = $es4.$$coerce(value, coerceType);
			}
		}
		else 
		{
			obj = $es4.$$getDefaultPropertyValue(coerceType);
			getFunc = function() { return obj; };
			setFunc = function(value) { obj = $es4.$$coerce(value, coerceType); };
		}
		
		Object.defineProperty(scope, name, {get:getFunc, set:setFunc});
	}
	$es4.$$protected_property = $es4.$$public_property;
	$es4.$$internal_property = $es4.$$public_property;
	$es4.$$cnamespace_property = function(name, scope, pscope, namespace, castType)
	{
		var obj = $es4.$$DEFAULT_PROPERTY_VALUE;
		var getFunc;
		var setFunc;
		if (typeof scope === 'function')
		{
			var resolved = castType === undefined;
			
			castType = namespace;
			namespace = pscope;
			pscope = undefined;
			
			getFunc = function() 
			{ 
				if (scope.$$cinit !== undefined) scope.$$cinit(); 
				
				if (obj !== $es4.$$DEFAULT_PROPERTY_VALUE) return obj;
				
				return obj = (resolved) ? $es4.$$getDefaultPropertyValue(castType) : $es4.$$getDefaultPropertyValue(resolved = castType = castType());
			}
			setFunc = function(value) 
			{ 
				if (scope.$$cinit !== undefined) scope.$$cinit(); 
				
				obj = (resolved) ? $es4.$$coerce(value, castType) : $es4.$$coerce(value, resolved = castType = castType());
			}
		}
		else 
		{
			obj = $es4.$$getDefaultPropertyValue(castType);
			getFunc = function() { return obj; };
			setFunc = function(value) { obj = $es4.$$coerce(value, castType); };
		}
		Object.defineProperty($es4.$$namespace(namespace, scope, pscope), name, {get:getFunc, set:setFunc});
	}

	$es4.$$public_function = function(name, scope, func, returnCastType)
	{
		if (returnCastType === undefined)
		{
			Object.defineProperty(scope, name, void ($es4.$$VALUE_OBJECT.value = func) || $es4.$$VALUE_OBJECT);
			func.$$ismethod = true;
			return;
		}
		
		var wrapFunc;
		
		if (typeof scope === 'function')
		{
			var normalized = false;
			wrapFunc = function() 
			{ 
				if (normalized === false)
				{
					if (typeof returnCastType === 'string')
					{
						var index = returnCastType.lastIndexOf('.');
						if (index === -1) returnCastType = $es4.$$[''][returnCastType];
						else returnCastType = $es4.$$[returnCastType.substring(0, index)][returnCastType.substring(index + 1)];
					}
					
					normalized = true;
				}
				
				var result;
				switch (arguments.length)
				{
					case 0:
						result = func();
						break;
					case 1:
						result = func(arguments[0]);
						break;
					case 2:
						result = func(arguments[0], arguments[1]);
						break;
					case 3:
						result = func(arguments[0], arguments[1], arguments[2]);
						break;
					default:
						var i, length = arguments.length, args = new Array(length);
						for (i = 0; i < length; i += 1) args[i] = arguments[i];
						result = func.apply(null, args);
						break;
				}
				
				return $es4.$$coerce(result, returnCastType); 
			};
		}
		else 
		{
			wrapFunc = function() 
			{ 
				var result;
				switch (arguments.length)
				{
					case 0:
						result = func();
						break;
					case 1:
						result = func(arguments[0]);
						break;
					case 2:
						result = func(arguments[0], arguments[1]);
						break;
					case 3:
						result = func(arguments[0], arguments[1], arguments[2]);
						break;
					default:
						var i, length = arguments.length, args = new Array(length);
						for (i = 0; i < length; i += 1) args[i] = arguments[i];
						result = func.apply(null, args);
						break;
				}
			
				return $es4.$$coerce(result, returnCastType); 
			};
		}
		
		Object.defineProperty(scope, name, void ($es4.$$VALUE_OBJECT.value = wrapFunc) || $es4.$$VALUE_OBJECT);
		wrapFunc.$$ismethod = true;
	}
	$es4.$$private_function = function(name, scope, func, returnCastType)
	{
		if (scope.$$private === undefined) Object.defineProperty(scope, '$$private', void ($es4.$$VALUE_OBJECT.value = {}) || $es4.$$VALUE_OBJECT);
		scope.$$private[name] = name;
		
		if (returnCastType === undefined)
		{
			Object.defineProperty(scope, name, void ($es4.$$VALUE_OBJECT.value = func) || $es4.$$VALUE_OBJECT);
			func.$$ismethod = true;
			return;
		}
		
		var wrapFunc;
		
		if (typeof scope === 'function')
		{
			var normalized = false;
			wrapFunc = function() 
			{ 
				if (normalized === false)
				{
					if (typeof returnCastType === 'string')
					{
						var index = returnCastType.lastIndexOf('.');
						if (index === -1) returnCastType = $es4.$$[''][returnCastType];
						else returnCastType = $es4.$$[returnCastType.substring(0, index)][returnCastType.substring(index + 1)];
					}
					
					normalized = true;
				}
				
				var result;
				switch (arguments.length)
				{
					case 0:
						result = func();
						break;
					case 1:
						result = func(arguments[0]);
						break;
					case 2:
						result = func(arguments[0], arguments[1]);
						break;
					case 3:
						result = func(arguments[0], arguments[1], arguments[2]);
						break;
					default:
						var i, length = arguments.length, args = new Array(length);
						for (i = 0; i < length; i += 1) args[i] = arguments[i];
						result = func.apply(null, args);
						break;
				}
				
				return $es4.$$coerce(result, returnCastType); 
			};
		}
		else 
		{
			wrapFunc = function() 
			{ 
				var result;
				switch (arguments.length)
				{
					case 0:
						result = func();
						break;
					case 1:
						result = func(arguments[0]);
						break;
					case 2:
						result = func(arguments[0], arguments[1]);
						break;
					case 3:
						result = func(arguments[0], arguments[1], arguments[2]);
						break;
					default:
						var i, length = arguments.length, args = new Array(length);
						for (i = 0; i < length; i += 1) args[i] = arguments[i];
						result = func.apply(null, args);
						break;
				}
			
				return $es4.$$coerce(result, returnCastType); 
			};
		}
		
		Object.defineProperty(scope, name, void ($es4.$$VALUE_OBJECT.value = wrapFunc) || $es4.$$VALUE_OBJECT);
		wrapFunc.$$ismethod = true;
	}
	$es4.$$protected_function = $es4.$$public_function;
	$es4.$$internal_function = $es4.$$public_function;
	$es4.$$cnamespace_function = function(name, scope, pscope, namespace, func, returnCastType)
	{
		if (returnCastType === undefined)
		{
			if (typeof scope === 'function')
			{
				returnCastType = func;
				func = namespace;
				namespace = pscope;
				pscope = undefined;
			}
			
			Object.defineProperty($es4.$$namespace(namespace, scope, pscope), name, void ($es4.$$VALUE_OBJECT.value = func) || $es4.$$VALUE_OBJECT);
			func.$$ismethod = true;
			return;
		}
		
		var wrapFunc;

		if (typeof scope === 'function')
		{
			returnCastType = func;
			func = namespace;
			namespace = pscope;
			pscope = undefined;
			
			var normalized = false;
			wrapFunc = function() 
			{ 
				if (normalized === false)
				{
					if (typeof returnCastType === 'string')
					{
						var index = returnCastType.lastIndexOf('.');
						if (index === -1) returnCastType = $es4.$$[''][returnCastType];
						else returnCastType = $es4.$$[returnCastType.substring(0, index)][returnCastType.substring(index + 1)];
					}
					
					normalized = true;
				}
				
				var result;
				switch (arguments.length)
				{
					case 0:
						result = func();
						break;
					case 1:
						result = func(arguments[0]);
						break;
					case 2:
						result = func(arguments[0], arguments[1]);
						break;
					case 3:
						result = func(arguments[0], arguments[1], arguments[2]);
						break;
					default:
						var i, length = arguments.length, args = new Array(length);
						for (i = 0; i < length; i += 1) args[i] = arguments[i];
						result = func.apply(null, args);
						break;
				}
				
				return $es4.$$coerce(result, returnCastType); 
			};
		}
		else
		{
			wrapFunc = function() 
			{ 
				var result;
				switch (arguments.length)
				{
					case 0:
						result = func();
						break;
					case 1:
						result = func(arguments[0]);
						break;
					case 2:
						result = func(arguments[0], arguments[1]);
						break;
					case 3:
						result = func(arguments[0], arguments[1], arguments[2]);
						break;
					default:
						var i, length = arguments.length, args = new Array(length);
						for (i = 0; i < length; i += 1) args[i] = arguments[i];
						result = func.apply(null, args);
						break;
				}
			
				return $es4.$$coerce(result, returnCastType); 
			};
		}
		
		Object.defineProperty($es4.$$namespace(namespace, scope, pscope), name, void ($es4.$$VALUE_OBJECT.value = wrapFunc) || $es4.$$VALUE_OBJECT);
		wrapFunc.$$ismethod = true;
	}

	$es4.$$getter = function(name, scope, get_func, castType)
	{
		Object.defineProperty(scope, name, {get:get_func});
	}
	$es4.$$setter = function(name, scope, set_func, castType)
	{
		Object.defineProperty(scope, name, {set:set_func});
	}

	$es4.$$public_accessor = function(name, scope, get_func, set_func)
	{
		if (get_func !== null && set_func !== null) Object.defineProperty(scope, name, {get:get_func, set:set_func});
		else if (get_func !== null) Object.defineProperty(scope, name, {get:get_func});
		else Object.defineProperty(scope, name, {set:set_func});
	}
	$es4.$$private_accessor = function(name, scope, get_func, set_func)
	{
		if (scope.$$private === undefined) Object.defineProperty(scope, '$$private', void ($es4.$$VALUE_OBJECT.value = {}) || $es4.$$VALUE_OBJECT);
		scope.$$private[name] = name;
		
		if (get_func !== null && set_func !== null) Object.defineProperty(scope, name, {get:get_func, set:set_func});
		else if (get_func !== null) Object.defineProperty(scope, name, {get:get_func});
		else Object.defineProperty(scope, name, {set:set_func});
	}
	$es4.$$protected_accessor = $es4.$$public_accessor;
	$es4.$$internal_accessor = $es4.$$public_accessor;
	$es4.$$cnamespace_accessor = function(name, scope, pscope, namespace, get_func, set_func)
	{
		if (typeof scope === 'function')
		{
			set_func = get_func;
			get_func = namespace;
			namespace = pscope;
			pscope = undefined;
		}
		
		if (get_func !== null && set_func !== null) Object.defineProperty($es4.$$namespace(namespace, scope, pscope), name, {get:get_func, set:set_func});
		else if (get_func !== null) Object.defineProperty($es4.$$namespace(namespace, scope, pscope), name, {get:get_func});
		else Object.defineProperty($es4.$$namespace(namespace, scope, pscope), name, {set:set_func});
	}

	$es4.$$window.trace = function() //returns false if trace returns before outputting to console
	{
		//if (!$es4.$$window.loaderInfoParams || ($es4.$$window.loaderInfoParams['debug'] !== 'true' && $es4.$$window.loaderInfoParams['trace'] !== 'true')) return false;
		
		if (arguments[0] === ':::benchmark:::') arguments[0] = 'benchmark time: ' + (new Date().getTime() - $es4.$$['player'].Player.getStartTime());
		
		var trace = document.getElementById('traceOutJS');
		var argumentsLength = arguments.length;
		var output = '';
		for (var i = 0; i < argumentsLength; i++) output += arguments[i] + ' ';
		
		console.log(output);
		
		if (!trace) return true;
		
		var div = document.createElement('div');
		div.setAttribute('tabindex', -1);
		div.innerHTML = output;
		
		if (trace.firstChild) trace.insertBefore(div, trace.firstChild);
		else trace.appendChild(div);
		
		return true;
	}

	$es4.$$window.toString = function() { return '[object global]'; }
	Function.__proto__.toString = function() { return 'function Function() {}'; }

	$es4.$$throwArgumentError = function()
	{
		throw new ArgumentError('Argument count mismatch on class coercion.  Expected 1, got 0.');
	}

	$es4.$$window.isXMLName = function()
	{
		throw new Error('isXMLName is not supported at this time.');
	}

	/*
	$es4.$$window.onerror = function(errorMsg, url, lineNumber, colno, error) 
	{
		var event = document.createEvent('CustomEvent');
		event.initCustomEvent('ERROR', false, false, {'msg':errorMsg, 'url':url, 'line':lineNumber, 'error':error});
		$es4.$$window.dispatchEvent(event);
		
		var message = errorMsg + ', ' + url + ', ' + lineNumber;
		if (!trace(message)) console.log(message);
	};
	*/

	$es4.$$class(Number, undefined, 'Number');
	$es4.$$class(String, undefined, 'String');
	$es4.$$class(Array, undefined, 'Array');
	$es4.$$class(Object, undefined, 'Object');
	$es4.$$class(Boolean, undefined, 'Boolean');

	$es4.$$package('').Class = (function()
	{
		function Class()
		{
			if (arguments.length !== 0) return (arguments[0] !== null && arguments[0].$$isclass !== undefined) ? arguments[0] : null;
			else throw new TypeError('Class$$ is not a constructor.');
		}
		
		return $es4.$$class(Class, null, 'Class');
	})();

	$es4.$$Function = Function;
	$es4.$$package('').Function = (function()
	{
		function Function()
		{
			return (arguments.length !== 0) ? ((typeof arguments[0] === 'function') ? arguments[0] : null) : this;
		}
		Function.prototype = $es4.$$Function;

		return $es4.$$class(Function, null, 'Function');
	})();

	$es4.$$package('').int = (function()
	{
		int.MAX_VALUE = 2147483647;
		int.MIN_VALUE = -2147483648;
		
		function int(value)
		{
			var value = new Number(value >> 0);
		
			return (this instanceof int) ? value : value.valueOf();
		}
		int.prototype = Number;
		
		return $es4.$$class(int, null, 'int');
	})();

	$es4.$$package('').uint = (function()
	{
		uint.MAX_VALUE = 4294967295;
		uint.MIN_VALUE = 0;
		
		function uint(value)
		{
			var value = new Number(value >>> 0);
		
			return (this instanceof uint) ? value : value.valueOf();
		}
		
		return $es4.$$class(uint, null, 'uint');
	})();

	$es4.$$package('').Namespace = (function()
	{	
		function Namespace()
		{
			//save scope
			var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
			var $$thisp = this;
			
			//handle possible cast
			if ($$this === $$thisp && (!($$this instanceof Namespace) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Namespace) : $es4.$$throwArgumentError();
			Object.defineProperty($$this, '$$t', {value:1});
			
			//constructor
			$es4.$$constructor($$thisp, (function()
			{
			}));
			
			//call construct if no arguments, or argument zero does not equal manual construct
			if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT) 
			{
				var $$i, $$length = arguments.length, $$args = new Array($$length);
				for ($$i = 0; $$i < $$length; $$i += 1) $$args[$$i]  = arguments[$$i];
			
				$es4.$$construct($$this, $$args);
			}
			
			throw new Error('Namespace is not supported at this time.');
		}
		
		return $es4.$$class(Namespace, null, 'Namespace');
	})();

	$es4.$$package('').QName = (function()
	{	
		function QName()
		{
			//save scope
			var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
			var $$thisp = this;
			
			//handle possible cast
			if ($$this === $$thisp && (!($$this instanceof QName) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], QName) : $es4.$$throwArgumentError();
			Object.defineProperty($$this, '$$t', {value:1});
			
			//constructor
			$es4.$$constructor($$thisp, (function()
			{
			}));
			
			//call construct if no arguments, or argument zero does not equal manual construct
			if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT) 
			{
				var $$i, $$length = arguments.length, $$args = new Array($$length);
				for ($$i = 0; $$i < $$length; $$i += 1) $$args[$$i]  = arguments[$$i];
			
				$es4.$$construct($$this, $$args);
			}
			
			throw new Error('QName is not supported at this time.');
		}
		
		return $es4.$$class(QName, null, 'QName');
	})();

	$es4.$$Error = Error;
	$es4.$$package('').Error = (function()
	{	
		function Error()
		{
			//save scope
			var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
			var $$thisp = this;
			
			//handle possible cast
			if ($$this === $$thisp && (!($$this instanceof Error) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Error) : $es4.$$throwArgumentError();
			Object.defineProperty($$this, '$$t', {value:1});
			
			//properties
			$es4.$$protected_property('name', $$thisp, String);
			$es4.$$public_property('message', $$thisp, String);
			
			//constructor
			$es4.$$constructor($$thisp, (function($$$$message)
			{
				//set default parameter values
				var message = (0 > arguments.length - 1) ? '' : $es4.$$coerce($$$$message, String);

				$$this.name = $$this.constructor.name;
				$$this.message = message;
				
				//$$Error.call($$this);
				//if (Error.captureStackTrace !== undefined) Error.captureStackTrace($$this, $$this.constructor);
			}));
			
			//method
			$es4.$$public_function('toString', $$thisp, (function()
			{
				return $$this.name + ': ' + $$this.message;
			}));
			
			//method
			$es4.$$public_function('getStackTrace', $$thisp, (function()
			{
				return $$this.name + ': ' + $$this.message;
			}));
			
			//call construct if no arguments, or argument zero does not equal manual construct
			if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT) 
			{
				var $$i, $$length = arguments.length, $$args = new Array($$length);
				for ($$i = 0; $$i < $$length; $$i += 1) $$args[$$i]  = arguments[$$i];
			
				$es4.$$construct($$this, $$args);
			}
		}
		Error.prototype = new $es4.$$Error;
		
		return $es4.$$class(Error, null, 'Error');
	})();


	$es4.$$package('').ArgumentError = (function()
	{
		function ArgumentError()
		{
			//save scope
			var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
			var $$thisp = this;
			
			//handle possible cast
			if ($$this === $$thisp && (!($$this instanceof ArgumentError) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], ArgumentError) : $es4.$$throwArgumentError();
			Object.defineProperty($$this, '$$t', {value:1});

			//constructor
			$es4.$$constructor($$thisp, (function($$$$message)
			{
				//set default parameter values
				var message = (0 > arguments.length - 1) ? '' : $es4.$$coerce($$$$message, String);
				
				$es4.$$super($$thisp)(message);

				$$this.name = $$this.constructor.name;
			}));		

			//call construct if no arguments, or argument zero does not equal manual construct
			if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT) 
			{
				var $$i, $$length = arguments.length, $$args = new Array($$length);
				for ($$i = 0; $$i < $$length; $$i += 1) $$args[$$i]  = arguments[$$i];
			
				$es4.$$construct($$this, $$args);
			}
		}
		
		return $es4.$$class(ArgumentError, {EXTENDS:'Error'}, 'ArgumentError');
	})();

	$es4.$$package('').DefinitionError = (function()
	{
		function DefinitionError()
		{
			//save scope
			var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
			var $$thisp = this;
			
			//handle possible cast
			if ($$this === $$thisp && (!($$this instanceof DefinitionError) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], DefinitionError) : $es4.$$throwArgumentError();
			Object.defineProperty($$this, '$$t', {value:1});

			//constructor
			$es4.$$constructor($$thisp, (function($$$$message)
			{
				//set default parameter values
				var message = (0 > arguments.length - 1) ? '' : $es4.$$coerce($$$$message, String);
				
				$es4.$$super($$thisp)(message);
				
				$$this.name = $$this.constructor.name;
			}));		

			//call construct if no arguments, or argument zero does not equal manual construct
			if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT) 
			{
				var $$i, $$length = arguments.length, $$args = new Array($$length);
				for ($$i = 0; $$i < $$length; $$i += 1) $$args[$$i]  = arguments[$$i];
			
				$es4.$$construct($$this, $$args);
			}
		}
		
		return $es4.$$class(DefinitionError, {EXTENDS:'Error'}, 'DefinitionError');
	})();

	$es4.$$package('').SecurityError = (function()
	{
		function SecurityError()
		{
			//save scope
			var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
			var $$thisp = this;
			
			//handle possible cast
			if ($$this === $$thisp && (!($$this instanceof SecurityError) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], SecurityError) : $es4.$$throwArgumentError();
			Object.defineProperty($$this, '$$t', {value:1});

			//constructor
			$es4.$$constructor($$thisp, (function($$$$message)
			{
				//set default parameter values
				var message = (0 > arguments.length - 1) ? '' : $es4.$$coerce($$$$message, String);
				
				$es4.$$super($$thisp)(message);
				
				$$this.name = $$this.constructor.name;
			}));		

			//call construct if no arguments, or argument zero does not equal manual construct
			if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT) 
			{
				var $$i, $$length = arguments.length, $$args = new Array($$length);
				for ($$i = 0; $$i < $$length; $$i += 1) $$args[$$i]  = arguments[$$i];
			
				$es4.$$construct($$this, $$args);
			}
		}
		
		return $es4.$$class(SecurityError, {EXTENDS:'Error'}, 'SecurityError');
	})();

	$es4.$$package('').VerifyError = (function()
	{
		function VerifyError()
		{
			//save scope
			var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
			var $$thisp = this;
			
			//handle possible cast
			if ($$this === $$thisp && (!($$this instanceof VerifyError) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], VerifyError) : $es4.$$throwArgumentError();
			Object.defineProperty($$this, '$$t', {value:1});

			//constructor
			$es4.$$constructor($$thisp, (function($$$$message)
			{
				//set default parameter values
				var message = (0 > arguments.length - 1) ? '' : $es4.$$coerce($$$$message, String);
				
				$es4.$$super($$thisp)(message);
				
				$$this.name = $$this.constructor.name;
			}));
			
			//call construct if no arguments, or argument zero does not equal manual construct
			if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT) 
			{
				var $$i, $$length = arguments.length, $$args = new Array($$length);
				for ($$i = 0; $$i < $$length; $$i += 1) $$args[$$i]  = arguments[$$i];
			
				$es4.$$construct($$this, $$args);
			}
		}
		
		return $es4.$$class(VerifyError, {EXTENDS:'Error'}, 'Error');
	})();

	$es4.$$package('').TypeError = (function()
	{
		function TypeError()
		{
			//save scope
			var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
			var $$thisp = this;
			
			//handle possible cast
			if ($$this === $$thisp && (!($$this instanceof TypeError) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], TypeError) : $es4.$$throwArgumentError();
			Object.defineProperty($$this, '$$t', {value:1});

			//constructor
			$es4.$$constructor($$thisp, (function($$$$message)
			{
				//set default parameter values
				var message = (0 > arguments.length - 1) ? '' : $es4.$$coerce($$$$message, String);
				
				$es4.$$super($$thisp)(message);
				
				$$this.name = $$this.constructor.name;
			}));
			
			//call construct if no arguments, or argument zero does not equal manual construct
			if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT) 
			{
				var $$i, $$length = arguments.length, $$args = new Array($$length);
				for ($$i = 0; $$i < $$length; $$i += 1) $$args[$$i]  = arguments[$$i];
			
				$es4.$$construct($$this, $$args);
			}
		}
		
		return $es4.$$class(TypeError, {EXTENDS:'Error'}, 'TypeError');
	})();

	$es4.$$[''].Function.$$pcinit();
	$es4.$$[''].Class.$$pcinit();
	$es4.$$[''].int.$$pcinit();
	$es4.$$[''].uint.$$pcinit();
	$es4.$$[''].Namespace.$$pcinit();
	$es4.$$[''].QName.$$pcinit();
	$es4.$$[''].Error.$$pcinit();
	$es4.$$[''].ArgumentError.$$pcinit();
	$es4.$$[''].DefinitionError.$$pcinit();
	$es4.$$[''].SecurityError.$$pcinit();
	$es4.$$[''].VerifyError.$$pcinit();
	$es4.$$[''].TypeError.$$pcinit();
}

/*
 * HTML Parser By John Resig (ejohn.org)
 * Modified by Juriy "kangax" Zaytsev
 * Original code by Erik Arvidsson, Mozilla Public License
 * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js
 *
 * // Use like so:
 * HTMLParser(htmlString, {
 *     start: function(tag, attrs, unary) {},
 *     end: function(tag) {},
 *     chars: function(text) {},
 *     comment: function(text) {}
 * });
 *
 * // or to get an XML string:
 * HTMLtoXML(htmlString);
 *
 * // or to get an XML DOM Document
 * HTMLtoDOM(htmlString);
 *
 * // or to inject into an existing document/DOM node
 * HTMLtoDOM(htmlString, document);
 * HTMLtoDOM(htmlString, document.body);
 *
 */

if (window.HTMLParser === undefined)
{	 
	(function(){

		// Regular Expressions for parsing tags and attributes
		var startTag = /^<([-A-Za-z0-9_]+)((?:\s+[\w\-]+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)>/,
			endTag = /^<\/([-A-Za-z0-9_]+)[^>]*>/,
			attr = /([-A-Za-z0-9_]+)(?:\s*=\s*(?:(?:"((?:\\.|[^"])*)")|(?:'((?:\\.|[^'])*)')|([^>\s]+)))?/g;
			
		// Empty Elements - HTML 4.01
		var empty = makeMap("area,base,basefont,br,col,frame,hr,img,input,isindex,link,meta,param,embed");

		// Block Elements - HTML 4.01
		var block = makeMap("address,applet,blockquote,button,center,dd,del,dir,div,dl,dt,fieldset,form,frameset,hr,iframe,ins,isindex,li,map,menu,noframes,noscript,object,ol,p,pre,script,table,tbody,td,tfoot,th,thead,tr,ul");

		// Inline Elements - HTML 4.01
		var inline = makeMap("a,abbr,acronym,applet,b,basefont,bdo,big,br,button,cite,code,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,object,q,s,samp,script,select,small,span,strike,strong,sub,sup,textarea,tt,u,var");

		// Elements that you can, intentionally, leave open
		// (and which close themselves)
		var closeSelf = makeMap("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr");

		// Attributes that have their values filled in disabled="disabled"
		var fillAttrs = makeMap("checked,compact,declare,defer,disabled,ismap,multiple,nohref,noresize,noshade,nowrap,readonly,selected");

		// Special Elements (can contain anything)
		var special = makeMap("script,style");

		var HTMLParser = this.HTMLParser = function( html, handler ) {
			var original = html;
			var index, chars, match, stack = [], last = html;
			stack.last = function(){
				return this[ this.length - 1 ];
			};

			while ( html ) {
				chars = true;

				// Make sure we're not in a script or style element
				if ( !stack.last() || !special[ stack.last() ] ) {

					// Comment
					if ( html.indexOf("<!--") == 0 ) {
						index = html.indexOf("-->");
		
						if ( index >= 0 ) {
							if ( handler.comment )
								handler.comment( html.substring( 4, index ) );
							html = html.substring( index + 3 );
							chars = false;
						}
		
					// end tag
					} else if ( html.indexOf("</") == 0 ) {
						match = html.match( endTag );
		
						if ( match ) {
							html = html.substring( match[0].length );
							match[0].replace( endTag, parseEndTag );
							chars = false;
						}
		
					// start tag
					} else if ( html.indexOf("<") == 0 ) {
						match = html.match( startTag );
		
						if ( match ) {
							html = html.substring( match[0].length );
							match[0].replace( startTag, parseStartTag );
							chars = false;
						}
					}

					if ( chars ) {
						index = html.indexOf("<");
						
						var text = index < 0 ? html : html.substring( 0, index );
						html = index < 0 ? "" : html.substring( index );
						
						if ( handler.chars )
							handler.chars( text );
					}

				} else {
					html = html.replace(new RegExp("(.*)<\/" + stack.last() + "[^>]*>"), function(all, text){
						text = text.replace(/<!--(.*?)-->/g, "$1")
							.replace(/<!\[CDATA\[(.*?)]]>/g, "$1");

						if ( handler.chars )
							handler.chars( text );

						return "";
					});

					parseEndTag( "", stack.last() );
				}

				if ( html == last )
				{
					return original; //ignore parse error. return original html
					//throw "Parse Error: " + html;
				}
				last = html;
			}
			
			// Clean up any remaining tags
			parseEndTag();

			function parseStartTag( tag, tagName, rest, unary ) {
				tagName = tagName.toLowerCase();

				if ( block[ tagName ] ) {
					while ( stack.last() && inline[ stack.last() ] ) {
						parseEndTag( "", stack.last() );
					}
				}

				if ( closeSelf[ tagName ] && stack.last() == tagName ) {
					parseEndTag( "", tagName );
				}

				unary = empty[ tagName ] || !!unary;

				if ( !unary )
					stack.push( tagName );
				
				if ( handler.start ) {
					var attrs = [];
		
					rest.replace(attr, function(match, name) {
						var value = arguments[2] ? arguments[2] :
							arguments[3] ? arguments[3] :
							arguments[4] ? arguments[4] :
							fillAttrs[name] ? name : "";
						
						attrs.push({
							name: name,
							value: value,
							escaped: value.replace(/(^|[^\\])"/g, '$1\\\"') //"
						});
					});
		
					if ( handler.start )
						handler.start( tagName, attrs, unary );
				}
			}

			function parseEndTag( tag, tagName ) {
				// If no tag name is provided, clean shop
				if ( !tagName )
					var pos = 0;
					
				// Find the closest opened tag of the same type
				else
					for ( var pos = stack.length - 1; pos >= 0; pos-- )
						if ( stack[ pos ] == tagName )
							break;
				
				if ( pos >= 0 ) {
					// Close all the open elements, up the stack
					for ( var i = stack.length - 1; i >= pos; i-- )
						if ( handler.end )
							handler.end( stack[ i ] );
					
					// Remove the open elements from the stack
					stack.length = pos;
				}
			}
		};
		
		this.HTMLtoXML = function( html ) {
			var results = "";
			
			HTMLParser(html, {
				start: function( tag, attrs, unary ) {
					results += "<" + tag;
			
					for ( var i = 0; i < attrs.length; i++ )
						results += " " + attrs[i].name + '="' + attrs[i].escaped + '"';
			
					results += (unary ? "/" : "") + ">";
				},
				end: function( tag ) {
					results += "</" + tag + ">";
				},
				chars: function( text ) {
					results += text;
				},
				comment: function( text ) {
					results += "<!--" + text + "-->";
				}
			});
			
			return results;
		};
		
		this.HTMLtoText = function( html ) {
			var results = "";
			
			HTMLParser(html, {
				start: function( tag, attrs, unary ) {
					if (tag != 'br') return;
					
					results += "<" + tag;
			
					for ( var i = 0; i < attrs.length; i++ )
						results += " " + attrs[i].name + '="' + attrs[i].escaped + '"';
			
					results += (unary ? "/" : "") + ">";
				},
				end: function( tag ) {
				},
				chars: function( text ) {
					results += text;
				},
				comment: function( text ) {
					results += "<!--" + text + "-->";
				}
			});
			
			return results;
		};
		
		this.HTMLtoDOM = function( html, doc ) {
			// There can be only one of these elements
			var one = makeMap("html,head,body,title");
			
			// Enforce a structure for the document
			var structure = {
				link: "head",
				base: "head"
			};
		
			if ( !doc ) {
				if ( typeof DOMDocument != "undefined" )
					doc = new DOMDocument();
				else if ( typeof document != "undefined" && document.implementation && document.implementation.createDocument )
					doc = document.implementation.createDocument("", "", null);
				else if ( typeof ActiveX != "undefined" )
					doc = new ActiveXObject("Msxml.DOMDocument");
				
			} else
				doc = doc.ownerDocument ||
					doc.getOwnerDocument && doc.getOwnerDocument() ||
					doc;
			
			var elems = [],
				documentElement = doc.documentElement ||
					doc.getDocumentElement && doc.getDocumentElement();
					
			// If we're dealing with an empty document then we
			// need to pre-populate it with the HTML document structure
			if ( !documentElement && doc.createElement ) (function(){
				var html = doc.createElement("html");
				var head = doc.createElement("head");
				head.appendChild( doc.createElement("title") );
				html.appendChild( head );
				html.appendChild( doc.createElement("body") );
				doc.appendChild( html );
			})();
			
			// Find all the unique elements
			if ( doc.getElementsByTagName )
				for ( var i in one )
					one[ i ] = doc.getElementsByTagName( i )[0];
			
			// If we're working with a document, inject contents into
			// the body element
			var curParentNode = one.body;
			
			HTMLParser( html, {
				start: function( tagName, attrs, unary ) {
					// If it's a pre-built element, then we can ignore
					// its construction
					if ( one[ tagName ] ) {
						curParentNode = one[ tagName ];
						if ( !unary ) {
							elems.push( curParentNode );
						}
						return;
					}
				
					var elem = doc.createElement( tagName );
					
					for ( var attr in attrs )
						elem.setAttribute( attrs[ attr ].name, attrs[ attr ].value );
					
					if ( structure[ tagName ] && typeof one[ structure[ tagName ] ] != "boolean" )
						one[ structure[ tagName ] ].appendChild( elem );
					
					else if ( curParentNode && curParentNode.appendChild )
						curParentNode.appendChild( elem );
						
					if ( !unary ) {
						elems.push( elem );
						curParentNode = elem;
					}
				},
				end: function( tag ) {
					elems.length -= 1;
					
					// Init the new parentNode
					curParentNode = elems[ elems.length - 1 ];
				},
				chars: function( text ) {
					curParentNode.appendChild( doc.createTextNode( text ) );
				},
				comment: function( text ) {
					// create comment node
				}
			});
			
			return doc;
		};

		function makeMap(str){
			var obj = {}, items = str.split(",");
			for ( var i = 0; i < items.length; i++ )
				obj[ items[i] ] = true;
			return obj;
		}
	})();
}

/*
---

script: Array.sortOn.js

description: Adds Array.sortOn function and related constants that works like in ActionScript for sorting arrays of objects (applying all same strict rules)

license: MIT-style license.

authors:
- gonchuki

docs: http://www.adobe.com/livedocs/flash/9.0/ActionScriptLangRefV3/Array.html#sortOn()

requires:
- core/1.2.4: [Array]

provides: 
- [Array.sortOn, Array.CASEINSENSITIVE, Array.DESCENDING, Array.UNIQUESORT, Array.RETURNINDEXEDARRAY, Array.NUMERIC]

...
*/

if (Array.prototype.$sort === undefined)
{
	Array.CASEINSENSITIVE = 1;
	Array.DESCENDING = 2;
	Array.UNIQUESORT = 4;
	Array.RETURNINDEXEDARRAY = 8;
	Array.NUMERIC = 16;

	var dup_fn = function(field, field_options) 
	{
		var filtered = (field_options & Array.NUMERIC) 
					   ? this.map(function(item) {return parseFloat(item[field]); })
					   : (field_options & Array.CASEINSENSITIVE)
					   ? this.map(function(item) {return item[field].toLowerCase(); })
					   : this.map(function(item) {return item[field]; });
		return filtered.length !== [].combine(filtered).length;
	};
	  
	  var sort_fn = function(item_a, item_b, fields, options) 
	  {
		return (function sort_by(fields, options) 
		{
			var ret, a, b, 
			opts = options[0],
			sub_fields = fields[0].match(/[^.]+/g);
		  
			(function get_values(s_fields, s_a, s_b) 
			{
				var field = s_fields[0];
				if (s_fields.length > 1) 
				{
					get_values(s_fields.slice(1), s_a[field], s_b[field]);
				} 
				else 
				{
					a = s_a[field].toString();
					b = s_b[field].toString();
				}
			})(sub_fields, item_a, item_b);
		  
			if (opts & Array.NUMERIC) 
			{
				ret = parseFloat(a) - parseFloat(b);
			} 
			else 
			{
				if (opts & Array.CASEINSENSITIVE) { a = a.toLowerCase(); b = b.toLowerCase(); }
			
				ret = (a > b) ? 1 : (a < b) ? -1 : 0;
			}
		  
			if ((ret === 0) && (fields.length > 1)) 
			{
				ret = sort_by(fields.slice(1), options.slice(1));
			} 
			else if (opts & Array.DESCENDING) 
			{
				ret *= -1;
			}
		  
			return ret;
		})(fields, options);
	  };
	  
	  var sort_fn2 = function(item_a, item_b, options) 
	  {
		return (function sort_by(options) 
		{
			var ret, a, b;
			var opts = options[0];
			a = item_a;
			b = item_b;
			
			if (opts & Array.NUMERIC) 
			{
				ret = parseFloat(a) - parseFloat(b);
			} 
			else 
			{
				if (opts & Array.CASEINSENSITIVE) { a = a.toLowerCase(); b = b.toLowerCase(); }
			
				ret = (a > b) ? 1 : (a < b) ? -1 : 0;
			}
		  
			if ((ret === 0) && (fields.length > 1)) 
			{
				ret = sort_by(options.slice(1));
			} 
			else if (opts & Array.DESCENDING) 
			{
				ret *= -1;
			}
		  
			return ret;
		})(options);
	  };
	  
	  Object.defineProperty(Array.prototype, 'combine', {enumerable:false, value:function(array) 
	  {
		for (var i = 0, l = array.length; i < l; i++) 
		{
			if (this.indexOf(array[i]) == -1) this.push(array[i]); 
		}
		
		return this;
	  }});
	  
	  Object.defineProperty(Array.prototype, 'sortOn', {enumerable:false, value:function(fields, options) 
	  {
		  fields = (fields instanceof Array) ? fields : [fields];
		  options = (options instanceof Array) ? options : [options];
		  
		  if (options.length !== fields.length) options = [];
		  
		  if ((options[0] & Array.UNIQUESORT) && (fields.some(function(field, i){return dup_fn(field, options[i]);}))) return 0;
		  
		  var curry_sort = function(item_a, item_b) {
			return sort_fn(item_a, item_b, fields, options);
		  };
		  
		  if (options[0] & Array.RETURNINDEXEDARRAY)
			return this.slice().sort(curry_sort);
		  else
			this.sort(curry_sort);
		}
	  });
	  
	Object.defineProperty(Array.prototype, '$sort', {value:Array.prototype.sort});
	  
	Object.defineProperty(Array.prototype, 'sort', {enumerable:false, value:function() 
	{
		if (arguments.length == 0) return this.$sort();
		if (typeof arguments[0] === "function") return this.$sort(arguments[0]);
	  
		options = [arguments[0]];
	  
		if (options[0] & Array.UNIQUESORT) throw new Error('sort option not supported at this time');
	  
		var curry_sort = function(item_a, item_b) 
		{
			return sort_fn2(item_a, item_b, options);
		};
		  
		if (options[0] & Array.RETURNINDEXEDARRAY) return this.slice().$sort(curry_sort);
		else return this.$sort(curry_sort);
	}
	});
}

/*! URI.js v1.17.1 http://medialize.github.io/URI.js/ */
/* build contains: URI.js */
/* URI.js is published under the MIT license. */
(function(p, w) {
    "object" === typeof exports ? module.exports = w(require("./punycode"), require("./IPv6"), require("./SecondLevelDomains")) : "function" === typeof define && define.amd ? define(["./punycode", "./IPv6", "./SecondLevelDomains"], w) : p.URI = w(p.punycode, p.IPv6, p.SecondLevelDomains, p)
})(this, function(p, w, u, m) {
    function d(a, b) {
        var c = 1 <= arguments.length,
            f = 2 <= arguments.length;
        if (!(this instanceof d)) return c ? f ? new d(a, b) : new d(a) : new d;
        if (void 0 === a) {
            if (c) throw new TypeError("undefined is not a valid argument for URI");
            a = "undefined" !== typeof location ? location.href + "" : ""
        }
        this.href(a);
        return void 0 !== b ? this.absoluteTo(b) : this
    }

    function r(a) {
        return a.replace(/([.*+?^=!:${}()|[\]\/\\])/g, "\\$1")
    }

    function v(a) {
        return void 0 === a ? "Undefined" : String(Object.prototype.toString.call(a)).slice(8, -1)
    }

    function h(a) {
        return "Array" === v(a)
    }

    function D(a, b) {
        var c = {},
            d, g;
        if ("RegExp" === v(b)) c = null;
        else if (h(b))
            for (d = 0, g = b.length; d < g; d++) c[b[d]] = !0;
        else c[b] = !0;
        d = 0;
        for (g = a.length; d < g; d++)
            if (c && void 0 !== c[a[d]] || !c && b.test(a[d])) a.splice(d,
                1), g--, d--;
        return a
    }

    function z(a, b) {
        var c, d;
        if (h(b)) {
            c = 0;
            for (d = b.length; c < d; c++)
                if (!z(a, b[c])) return !1;
            return !0
        }
        var g = v(b);
        c = 0;
        for (d = a.length; c < d; c++)
            if ("RegExp" === g) {
                if ("string" === typeof a[c] && a[c].match(b)) return !0
            } else if (a[c] === b) return !0;
        return !1
    }

    function E(a, b) {
        if (!h(a) || !h(b) || a.length !== b.length) return !1;
        a.sort();
        b.sort();
        for (var c = 0, d = a.length; c < d; c++)
            if (a[c] !== b[c]) return !1;
        return !0
    }

    function A(a) {
        return a.replace(/^\/+|\/+$/g, "")
    }

    function G(a) {
        return escape(a)
    }

    function B(a) {
        return encodeURIComponent(a).replace(/[!'()*]/g,
            G).replace(/\*/g, "%2A")
    }

    function x(a) {
        return function(b, c) {
            if (void 0 === b) return this._parts[a] || "";
            this._parts[a] = b || null;
            this.build(!c);
            return this
        }
    }

    function F(a, b) {
        return function(c, d) {
            if (void 0 === c) return this._parts[a] || "";
            null !== c && (c += "", c.charAt(0) === b && (c = c.substring(1)));
            this._parts[a] = c;
            this.build(!d);
            return this
        }
    }
    var H = m && m.URI;
    d.version = "1.17.1";
    var e = d.prototype,
        q = Object.prototype.hasOwnProperty;
    d._parts = function() {
        return {
            protocol: null,
            username: null,
            password: null,
            hostname: null,
            urn: null,
            port: null,
            path: null,
            query: null,
            fragment: null,
            duplicateQueryParameters: d.duplicateQueryParameters,
            escapeQuerySpace: d.escapeQuerySpace
        }
    };
    d.duplicateQueryParameters = !1;
    d.escapeQuerySpace = !0;
    d.protocol_expression = /^[a-z][a-z0-9.+-]*$/i;
    d.idn_expression = /[^a-z0-9\.-]/i;
    d.punycode_expression = /(xn--)/i;
    d.ip4_expression = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;
    d.ip6_expression = /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/;
    d.find_uri_expression = /\b((?:[a-z][\w-]+:(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))/ig;
    d.findUri = {
        start: /\b(?:([a-z][a-z0-9.+-]*:\/\/)|www\.)/gi,
        end: /[\s\r\n]|$/,
        trim: /[`!()\[\]{};:'".,<>?\u00ab\u00bb\u201c\u201d\u201e\u2018\u2019]+$/
    };
    d.defaultPorts = {
        http: "80",
        https: "443",
        ftp: "21",
        gopher: "70",
        ws: "80",
        wss: "443"
    };
    d.invalid_hostname_characters =
        /[^a-zA-Z0-9\.-]/;
    d.domAttributes = {
        a: "href",
        blockquote: "cite",
        link: "href",
        base: "href",
        script: "src",
        form: "action",
        img: "src",
        area: "href",
        iframe: "src",
        embed: "src",
        source: "src",
        track: "src",
        input: "src",
        audio: "src",
        video: "src"
    };
    d.getDomAttribute = function(a) {
        if (a && a.nodeName) {
            var b = a.nodeName.toLowerCase();
            return "input" === b && "image" !== a.type ? void 0 : d.domAttributes[b]
        }
    };
    d.encode = B;
    d.decode = decodeURIComponent;
    d.iso8859 = function() {
        d.encode = escape;
        d.decode = unescape
    };
    d.unicode = function() {
        d.encode = B;
        d.decode =
            decodeURIComponent
    };
    d.characters = {
        pathname: {
            encode: {
                expression: /%(24|26|2B|2C|3B|3D|3A|40)/ig,
                map: {
                    "%24": "$",
                    "%26": "&",
                    "%2B": "+",
                    "%2C": ",",
                    "%3B": ";",
                    "%3D": "=",
                    "%3A": ":",
                    "%40": "@"
                }
            },
            decode: {
                expression: /[\/\?#]/g,
                map: {
                    "/": "%2F",
                    "?": "%3F",
                    "#": "%23"
                }
            }
        },
        reserved: {
            encode: {
                expression: /%(21|23|24|26|27|28|29|2A|2B|2C|2F|3A|3B|3D|3F|40|5B|5D)/ig,
                map: {
                    "%3A": ":",
                    "%2F": "/",
                    "%3F": "?",
                    "%23": "#",
                    "%5B": "[",
                    "%5D": "]",
                    "%40": "@",
                    "%21": "!",
                    "%24": "$",
                    "%26": "&",
                    "%27": "'",
                    "%28": "(",
                    "%29": ")",
                    "%2A": "*",
                    "%2B": "+",
                    "%2C": ",",
                    "%3B": ";",
                    "%3D": "="
                }
            }
        },
        urnpath: {
            encode: {
                expression: /%(21|24|27|28|29|2A|2B|2C|3B|3D|40)/ig,
                map: {
                    "%21": "!",
                    "%24": "$",
                    "%27": "'",
                    "%28": "(",
                    "%29": ")",
                    "%2A": "*",
                    "%2B": "+",
                    "%2C": ",",
                    "%3B": ";",
                    "%3D": "=",
                    "%40": "@"
                }
            },
            decode: {
                expression: /[\/\?#:]/g,
                map: {
                    "/": "%2F",
                    "?": "%3F",
                    "#": "%23",
                    ":": "%3A"
                }
            }
        }
    };
    d.encodeQuery = function(a, b) {
        var c = d.encode(a + "");
        void 0 === b && (b = d.escapeQuerySpace);
        return b ? c.replace(/%20/g, "+") : c
    };
    d.decodeQuery = function(a, b) {
        a += "";
        void 0 === b && (b = d.escapeQuerySpace);
        try {
            return d.decode(b ? a.replace(/\+/g,
                "%20") : a)
        } catch (c) {
            return a
        }
    };
    var t = {
            encode: "encode",
            decode: "decode"
        },
        y, C = function(a, b) {
            return function(c) {
                try {
                    return d[b](c + "").replace(d.characters[a][b].expression, function(c) {
                        return d.characters[a][b].map[c]
                    })
                } catch (f) {
                    return c
                }
            }
        };
    for (y in t) d[y + "PathSegment"] = C("pathname", t[y]), d[y + "UrnPathSegment"] = C("urnpath", t[y]);
    t = function(a, b, c) {
        return function(f) {
            var g;
            g = c ? function(a) {
                return d[b](d[c](a))
            } : d[b];
            f = (f + "").split(a);
            for (var e = 0, l = f.length; e < l; e++) f[e] = g(f[e]);
            return f.join(a)
        }
    };
    d.decodePath =
        t("/", "decodePathSegment");
    d.decodeUrnPath = t(":", "decodeUrnPathSegment");
    d.recodePath = t("/", "encodePathSegment", "decode");
    d.recodeUrnPath = t(":", "encodeUrnPathSegment", "decode");
    d.encodeReserved = C("reserved", "encode");
    d.parse = function(a, b) {
        var c;
        b || (b = {});
        c = a.indexOf("#"); - 1 < c && (b.fragment = a.substring(c + 1) || null, a = a.substring(0, c));
        c = a.indexOf("?"); - 1 < c && (b.query = a.substring(c + 1) || null, a = a.substring(0, c));
        "//" === a.substring(0, 2) ? (b.protocol = null, a = a.substring(2), a = d.parseAuthority(a, b)) : (c = a.indexOf(":"), -1 < c && (b.protocol = a.substring(0, c) || null, b.protocol && !b.protocol.match(d.protocol_expression) ? b.protocol = void 0 : "//" === a.substring(c + 1, c + 3) ? (a = a.substring(c + 3), a = d.parseAuthority(a, b)) : (a = a.substring(c + 1), b.urn = !0)));
        b.path = a;
        return b
    };
    d.parseHost = function(a, b) {
        a = a.replace(/\\/g, "/");
        var c = a.indexOf("/"),
            d; - 1 === c && (c = a.length);
        if ("[" === a.charAt(0)) d = a.indexOf("]"), b.hostname = a.substring(1, d) || null, b.port = a.substring(d + 2, c) || null, "/" === b.port && (b.port = null);
        else {
            var g = a.indexOf(":");
            d = a.indexOf("/");
            g = a.indexOf(":", g + 1); - 1 !== g && (-1 === d || g < d) ? (b.hostname = a.substring(0, c) || null, b.port = null) : (d = a.substring(0, c).split(":"), b.hostname = d[0] || null, b.port = d[1] || null)
        }
        b.hostname && "/" !== a.substring(c).charAt(0) && (c++, a = "/" + a);
        return a.substring(c) || "/"
    };
    d.parseAuthority = function(a, b) {
        a = d.parseUserinfo(a, b);
        return d.parseHost(a, b)
    };
    d.parseUserinfo = function(a, b) {
        var c = a.indexOf("/"),
            f = a.lastIndexOf("@", -1 < c ? c : a.length - 1); - 1 < f && (-1 === c || f < c) ? (c = a.substring(0, f).split(":"), b.username = c[0] ? d.decode(c[0]) : null,
            c.shift(), b.password = c[0] ? d.decode(c.join(":")) : null, a = a.substring(f + 1)) : (b.username = null, b.password = null);
        return a
    };
    d.parseQuery = function(a, b) {
        if (!a) return {};
        a = a.replace(/&+/g, "&").replace(/^\?*&*|&+$/g, "");
        if (!a) return {};
        for (var c = {}, f = a.split("&"), g = f.length, e, l, n = 0; n < g; n++)
            if (e = f[n].split("="), l = d.decodeQuery(e.shift(), b), e = e.length ? d.decodeQuery(e.join("="), b) : null, q.call(c, l)) {
                if ("string" === typeof c[l] || null === c[l]) c[l] = [c[l]];
                c[l].push(e)
            } else c[l] = e;
        return c
    };
    d.build = function(a) {
        var b = "";
        a.protocol && (b += a.protocol + ":");
        a.urn || !b && !a.hostname || (b += "//");
        b += d.buildAuthority(a) || "";
        
		
		
		
		
		//HACK SECTION ADDED BY JOHN to fix issue with ports not being included in localhost uris 
		if (!a.hostname && a.port)
		{
			if (a.path.indexOf('/') !== -1)
			{
				var parts = a.path.split('/');
				b += parts.shift();
				b += ":" + a.port;
				var j = parts.join('/');
				"string" === typeof j && ("/" !== j.charAt(0) && "string" === typeof a.hostname && (b += "/"), b += '/' + j);
			}
			else 
			{
				"string" === typeof a.path && ("/" !== a.path.charAt(0) && "string" === typeof a.hostname && (b += "/"), b += a.path);
				b += ":" + a.port;
			}
		}
        else "string" === typeof a.path && ("/" !== a.path.charAt(0) && "string" === typeof a.hostname && (b += "/"), b += a.path);
		
		
		
		
		
		//REMOVED BY JOHN
		//"string" === typeof a.path && ("/" !== a.path.charAt(0) && "string" === typeof a.hostname && (b += "/"), b += a.path);
        
		
		
		
		
		"string" === typeof a.query && a.query && (b += "?" + a.query);
        "string" === typeof a.fragment && a.fragment && (b += "#" + a.fragment);
        return b
    };
    d.buildHost = function(a) {
        var b = "";
        if (a.hostname) b = d.ip6_expression.test(a.hostname) ? b + ("[" + a.hostname + "]") : b + a.hostname;
        else return "";
        a.port && (b += ":" + a.port);
        return b
    };
    d.buildAuthority =
        function(a) {
            return d.buildUserinfo(a) + d.buildHost(a)
        };
    d.buildUserinfo = function(a) {
        var b = "";
        a.username && (b += d.encode(a.username), a.password && (b += ":" + d.encode(a.password)), b += "@");
        return b
    };
    d.buildQuery = function(a, b, c) {
        var f = "",
            g, e, l, n;
        for (e in a)
            if (q.call(a, e) && e)
                if (h(a[e]))
                    for (g = {}, l = 0, n = a[e].length; l < n; l++) void 0 !== a[e][l] && void 0 === g[a[e][l] + ""] && (f += "&" + d.buildQueryParameter(e, a[e][l], c), !0 !== b && (g[a[e][l] + ""] = !0));
                else void 0 !== a[e] && (f += "&" + d.buildQueryParameter(e, a[e], c));
        return f.substring(1)
    };
    d.buildQueryParameter = function(a, b, c) {
        return d.encodeQuery(a, c) + (null !== b ? "=" + d.encodeQuery(b, c) : "")
    };
    d.addQuery = function(a, b, c) {
        if ("object" === typeof b)
            for (var f in b) q.call(b, f) && d.addQuery(a, f, b[f]);
        else if ("string" === typeof b) void 0 === a[b] ? a[b] = c : ("string" === typeof a[b] && (a[b] = [a[b]]), h(c) || (c = [c]), a[b] = (a[b] || []).concat(c));
        else throw new TypeError("URI.addQuery() accepts an object, string as the name parameter");
    };
    d.removeQuery = function(a, b, c) {
        var f;
        if (h(b))
            for (c = 0, f = b.length; c < f; c++) a[b[c]] =
                void 0;
        else if ("RegExp" === v(b))
            for (f in a) b.test(f) && (a[f] = void 0);
        else if ("object" === typeof b)
            for (f in b) q.call(b, f) && d.removeQuery(a, f, b[f]);
        else if ("string" === typeof b) void 0 !== c ? "RegExp" === v(c) ? !h(a[b]) && c.test(a[b]) ? a[b] = void 0 : a[b] = D(a[b], c) : a[b] !== String(c) || h(c) && 1 !== c.length ? h(a[b]) && (a[b] = D(a[b], c)) : a[b] = void 0 : a[b] = void 0;
        else throw new TypeError("URI.removeQuery() accepts an object, string, RegExp as the first parameter");
    };
    d.hasQuery = function(a, b, c, f) {
        switch (v(b)) {
            case "String":
                break;
            case "RegExp":
                for (var e in a)
                    if (q.call(a, e) && b.test(e) && (void 0 === c || d.hasQuery(a, e, c))) return !0;
                return !1;
            case "Object":
                for (var k in b)
                    if (q.call(b, k) && !d.hasQuery(a, k, b[k])) return !1;
                return !0;
            default:
                throw new TypeError("URI.hasQuery() accepts a string, regular expression or object as the name parameter");
        }
        switch (v(c)) {
            case "Undefined":
                return b in a;
            case "Boolean":
                return a = !(h(a[b]) ? !a[b].length : !a[b]), c === a;
            case "Function":
                return !!c(a[b], b, a);
            case "Array":
                return h(a[b]) ? (f ? z : E)(a[b], c) : !1;
            case "RegExp":
                return h(a[b]) ?
                    f ? z(a[b], c) : !1 : !(!a[b] || !a[b].match(c));
            case "Number":
                c = String(c);
            case "String":
                return h(a[b]) ? f ? z(a[b], c) : !1 : a[b] === c;
            default:
                throw new TypeError("URI.hasQuery() accepts undefined, boolean, string, number, RegExp, Function as the value parameter");
        }
    };
    d.commonPath = function(a, b) {
        var c = Math.min(a.length, b.length),
            d;
        for (d = 0; d < c; d++)
            if (a.charAt(d) !== b.charAt(d)) {
                d--;
                break
            }
        if (1 > d) return a.charAt(0) === b.charAt(0) && "/" === a.charAt(0) ? "/" : "";
        if ("/" !== a.charAt(d) || "/" !== b.charAt(d)) d = a.substring(0, d).lastIndexOf("/");
        return a.substring(0, d + 1)
    };
    d.withinString = function(a, b, c) {
        c || (c = {});
        var f = c.start || d.findUri.start,
            e = c.end || d.findUri.end,
            k = c.trim || d.findUri.trim,
            l = /[a-z0-9-]=["']?$/i;
        for (f.lastIndex = 0;;) {
            var n = f.exec(a);
            if (!n) break;
            n = n.index;
            if (c.ignoreHtml) {
                var h = a.slice(Math.max(n - 3, 0), n);
                if (h && l.test(h)) continue
            }
            var h = n + a.slice(n).search(e),
                m = a.slice(n, h).replace(k, "");
            c.ignore && c.ignore.test(m) || (h = n + m.length, m = b(m, n, h, a), a = a.slice(0, n) + m + a.slice(h), f.lastIndex = n + m.length)
        }
        f.lastIndex = 0;
        return a
    };
    d.ensureValidHostname =
        function(a) {
            if (a.match(d.invalid_hostname_characters)) {
                if (!p) throw new TypeError('Hostname "' + a + '" contains characters other than [A-Z0-9.-] and Punycode.js is not available');
                if (p.toASCII(a).match(d.invalid_hostname_characters)) throw new TypeError('Hostname "' + a + '" contains characters other than [A-Z0-9.-]');
            }
        };
    d.noConflict = function(a) {
        if (a) return a = {
                URI: this.noConflict()
            }, m.URITemplate && "function" === typeof m.URITemplate.noConflict && (a.URITemplate = m.URITemplate.noConflict()), m.IPv6 && "function" ===
            typeof m.IPv6.noConflict && (a.IPv6 = m.IPv6.noConflict()), m.SecondLevelDomains && "function" === typeof m.SecondLevelDomains.noConflict && (a.SecondLevelDomains = m.SecondLevelDomains.noConflict()), a;
        m.URI === this && (m.URI = H);
        return this
    };
    e.build = function(a) {
        if (!0 === a) this._deferred_build = !0;
        else if (void 0 === a || this._deferred_build) this._string = d.build(this._parts), this._deferred_build = !1;
        return this
    };
    e.clone = function() {
        return new d(this)
    };
    e.valueOf = e.toString = function() {
        return this.build(!1)._string
    };
    e.protocol =
        x("protocol");
    e.username = x("username");
    e.password = x("password");
    e.hostname = x("hostname");
    e.port = x("port");
    e.query = F("query", "?");
    e.fragment = F("fragment", "#");
    e.search = function(a, b) {
        var c = this.query(a, b);
        return "string" === typeof c && c.length ? "?" + c : c
    };
    e.hash = function(a, b) {
        var c = this.fragment(a, b);
        return "string" === typeof c && c.length ? "#" + c : c
    };
    e.pathname = function(a, b) {
        if (void 0 === a || !0 === a) {
            var c = this._parts.path || (this._parts.hostname ? "/" : "");
            return a ? (this._parts.urn ? d.decodeUrnPath : d.decodePath)(c) : c
        }
        this._parts.path =
            this._parts.urn ? a ? d.recodeUrnPath(a) : "" : a ? d.recodePath(a) : "/";
        this.build(!b);
        return this
    };
    e.path = e.pathname;
    e.href = function(a, b) {
        var c;
        if (void 0 === a) return this.toString();
        this._string = "";
        this._parts = d._parts();
        var f = a instanceof d,
            e = "object" === typeof a && (a.hostname || a.path || a.pathname);
        a.nodeName && (e = d.getDomAttribute(a), a = a[e] || "", e = !1);
        !f && e && void 0 !== a.pathname && (a = a.toString());
        if ("string" === typeof a || a instanceof String) this._parts = d.parse(String(a), this._parts);
        else if (f || e)
            for (c in f = f ? a._parts :
                a, f) q.call(this._parts, c) && (this._parts[c] = f[c]);
        else throw new TypeError("invalid input");
        this.build(!b);
        return this
    };
    e.is = function(a) {
        var b = !1,
            c = !1,
            f = !1,
            e = !1,
            k = !1,
            l = !1,
            h = !1,
            m = !this._parts.urn;
        this._parts.hostname && (m = !1, c = d.ip4_expression.test(this._parts.hostname), f = d.ip6_expression.test(this._parts.hostname), b = c || f, k = (e = !b) && u && u.has(this._parts.hostname), l = e && d.idn_expression.test(this._parts.hostname), h = e && d.punycode_expression.test(this._parts.hostname));
        switch (a.toLowerCase()) {
            case "relative":
                return m;
            case "absolute":
                return !m;
            case "domain":
            case "name":
                return e;
            case "sld":
                return k;
            case "ip":
                return b;
            case "ip4":
            case "ipv4":
            case "inet4":
                return c;
            case "ip6":
            case "ipv6":
            case "inet6":
                return f;
            case "idn":
                return l;
            case "url":
                return !this._parts.urn;
            case "urn":
                return !!this._parts.urn;
            case "punycode":
                return h
        }
        return null
    };
    var I = e.protocol,
        J = e.port,
        K = e.hostname;
    e.protocol = function(a, b) {
        if (void 0 !== a && a && (a = a.replace(/:(\/\/)?$/, ""), !a.match(d.protocol_expression))) throw new TypeError('Protocol "' + a + "\" contains characters other than [A-Z0-9.+-] or doesn't start with [A-Z]");
        return I.call(this, a, b)
    };
    e.scheme = e.protocol;
    e.port = function(a, b) {
        if (this._parts.urn) return void 0 === a ? "" : this;
        if (void 0 !== a && (0 === a && (a = null), a && (a += "", ":" === a.charAt(0) && (a = a.substring(1)), a.match(/[^0-9]/)))) throw new TypeError('Port "' + a + '" contains characters other than [0-9]');
        return J.call(this, a, b)
    };
    e.hostname = function(a, b) {
        if (this._parts.urn) return void 0 === a ? "" : this;
        if (void 0 !== a) {
            var c = {};
            if ("/" !== d.parseHost(a, c)) throw new TypeError('Hostname "' + a + '" contains characters other than [A-Z0-9.-]');
            a = c.hostname
        }
        return K.call(this, a, b)
    };
    e.origin = function(a, b) {
        if (this._parts.urn) return void 0 === a ? "" : this;
        if (void 0 === a) {
            var c = this.protocol();
            return this.authority() ? (c ? c + "://" : "") + this.authority() : ""
        }
        c = d(a);
        this.protocol(c.protocol()).authority(c.authority()).build(!b);
        return this
    };
    e.host = function(a, b) {
        if (this._parts.urn) return void 0 === a ? "" : this;
        if (void 0 === a) return this._parts.hostname ? d.buildHost(this._parts) : "";
        if ("/" !== d.parseHost(a, this._parts)) throw new TypeError('Hostname "' + a + '" contains characters other than [A-Z0-9.-]');
        this.build(!b);
        return this
    };
    e.authority = function(a, b) {
        if (this._parts.urn) return void 0 === a ? "" : this;
        if (void 0 === a) return this._parts.hostname ? d.buildAuthority(this._parts) : "";
        if ("/" !== d.parseAuthority(a, this._parts)) throw new TypeError('Hostname "' + a + '" contains characters other than [A-Z0-9.-]');
        this.build(!b);
        return this
    };
    e.userinfo = function(a, b) {
        if (this._parts.urn) return void 0 === a ? "" : this;
        if (void 0 === a) {
            if (!this._parts.username) return "";
            var c = d.buildUserinfo(this._parts);
            return c.substring(0, c.length -
                1)
        }
        "@" !== a[a.length - 1] && (a += "@");
        d.parseUserinfo(a, this._parts);
        this.build(!b);
        return this
    };
    e.resource = function(a, b) {
        var c;
        if (void 0 === a) return this.path() + this.search() + this.hash();
        c = d.parse(a);
        this._parts.path = c.path;
        this._parts.query = c.query;
        this._parts.fragment = c.fragment;
        this.build(!b);
        return this
    };
    e.subdomain = function(a, b) {
        if (this._parts.urn) return void 0 === a ? "" : this;
        if (void 0 === a) {
            if (!this._parts.hostname || this.is("IP")) return "";
            var c = this._parts.hostname.length - this.domain().length - 1;
            return this._parts.hostname.substring(0,
                c) || ""
        }
        c = this._parts.hostname.length - this.domain().length;
        c = this._parts.hostname.substring(0, c);
        c = new RegExp("^" + r(c));
        a && "." !== a.charAt(a.length - 1) && (a += ".");
        a && d.ensureValidHostname(a);
        this._parts.hostname = this._parts.hostname.replace(c, a);
        this.build(!b);
        return this
    };
    e.domain = function(a, b) {
        if (this._parts.urn) return void 0 === a ? "" : this;
        "boolean" === typeof a && (b = a, a = void 0);
        if (void 0 === a) {
            if (!this._parts.hostname || this.is("IP")) return "";
            var c = this._parts.hostname.match(/\./g);
            if (c && 2 > c.length) return this._parts.hostname;
            c = this._parts.hostname.length - this.tld(b).length - 1;
            c = this._parts.hostname.lastIndexOf(".", c - 1) + 1;
            return this._parts.hostname.substring(c) || ""
        }
        if (!a) throw new TypeError("cannot set domain empty");
        d.ensureValidHostname(a);
        !this._parts.hostname || this.is("IP") ? this._parts.hostname = a : (c = new RegExp(r(this.domain()) + "$"), this._parts.hostname = this._parts.hostname.replace(c, a));
        this.build(!b);
        return this
    };
    e.tld = function(a, b) {
        if (this._parts.urn) return void 0 === a ? "" : this;
        "boolean" === typeof a && (b = a, a = void 0);
        if (void 0 === a) {
            if (!this._parts.hostname || this.is("IP")) return "";
            var c = this._parts.hostname.lastIndexOf("."),
                c = this._parts.hostname.substring(c + 1);
            return !0 !== b && u && u.list[c.toLowerCase()] ? u.get(this._parts.hostname) || c : c
        }
        if (a)
            if (a.match(/[^a-zA-Z0-9-]/))
                if (u && u.is(a)) c = new RegExp(r(this.tld()) + "$"), this._parts.hostname = this._parts.hostname.replace(c, a);
                else throw new TypeError('TLD "' + a + '" contains characters other than [A-Z0-9]');
        else {
            if (!this._parts.hostname || this.is("IP")) throw new ReferenceError("cannot set TLD on non-domain host");
            c = new RegExp(r(this.tld()) + "$");
            this._parts.hostname = this._parts.hostname.replace(c, a)
        } else throw new TypeError("cannot set TLD empty");
        this.build(!b);
        return this
    };
    e.directory = function(a, b) {
        if (this._parts.urn) return void 0 === a ? "" : this;
        if (void 0 === a || !0 === a) {
            if (!this._parts.path && !this._parts.hostname) return "";
            if ("/" === this._parts.path) return "/";
            var c = this._parts.path.length - this.filename().length - 1,
                c = this._parts.path.substring(0, c) || (this._parts.hostname ? "/" : "");
            return a ? d.decodePath(c) : c
        }
        c = this._parts.path.length -
            this.filename().length;
        c = this._parts.path.substring(0, c);
        c = new RegExp("^" + r(c));
        this.is("relative") || (a || (a = "/"), "/" !== a.charAt(0) && (a = "/" + a));
        a && "/" !== a.charAt(a.length - 1) && (a += "/");
        a = d.recodePath(a);
        this._parts.path = this._parts.path.replace(c, a);
        this.build(!b);
        return this
    };
    e.filename = function(a, b) {
        if (this._parts.urn) return void 0 === a ? "" : this;
        if (void 0 === a || !0 === a) {
            if (!this._parts.path || "/" === this._parts.path) return "";
            var c = this._parts.path.lastIndexOf("/"),
                c = this._parts.path.substring(c + 1);
            return a ?
                d.decodePathSegment(c) : c
        }
        c = !1;
        "/" === a.charAt(0) && (a = a.substring(1));
        a.match(/\.?\//) && (c = !0);
        var f = new RegExp(r(this.filename()) + "$");
        a = d.recodePath(a);
        this._parts.path = this._parts.path.replace(f, a);
        c ? this.normalizePath(b) : this.build(!b);
        return this
    };
    e.suffix = function(a, b) {
        if (this._parts.urn) return void 0 === a ? "" : this;
        if (void 0 === a || !0 === a) {
            if (!this._parts.path || "/" === this._parts.path) return "";
            var c = this.filename(),
                f = c.lastIndexOf(".");
            if (-1 === f) return "";
            c = c.substring(f + 1);
            c = /^[a-z0-9%]+$/i.test(c) ?
                c : "";
            return a ? d.decodePathSegment(c) : c
        }
        "." === a.charAt(0) && (a = a.substring(1));
        if (c = this.suffix()) f = a ? new RegExp(r(c) + "$") : new RegExp(r("." + c) + "$");
        else {
            if (!a) return this;
            this._parts.path += "." + d.recodePath(a)
        }
        f && (a = d.recodePath(a), this._parts.path = this._parts.path.replace(f, a));
        this.build(!b);
        return this
    };
    e.segment = function(a, b, c) {
        var d = this._parts.urn ? ":" : "/",
            e = this.path(),
            k = "/" === e.substring(0, 1),
            e = e.split(d);
        void 0 !== a && "number" !== typeof a && (c = b, b = a, a = void 0);
        if (void 0 !== a && "number" !== typeof a) throw Error('Bad segment "' +
            a + '", must be 0-based integer');
        k && e.shift();
        0 > a && (a = Math.max(e.length + a, 0));
        if (void 0 === b) return void 0 === a ? e : e[a];
        if (null === a || void 0 === e[a])
            if (h(b)) {
                e = [];
                a = 0;
                for (var l = b.length; a < l; a++)
                    if (b[a].length || e.length && e[e.length - 1].length) e.length && !e[e.length - 1].length && e.pop(), e.push(A(b[a]))
            } else {
                if (b || "string" === typeof b) b = A(b), "" === e[e.length - 1] ? e[e.length - 1] = b : e.push(b)
            }
        else b ? e[a] = A(b) : e.splice(a, 1);
        k && e.unshift("");
        return this.path(e.join(d), c)
    };
    e.segmentCoded = function(a, b, c) {
        var e, g;
        "number" !==
        typeof a && (c = b, b = a, a = void 0);
        if (void 0 === b) {
            a = this.segment(a, b, c);
            if (h(a))
                for (e = 0, g = a.length; e < g; e++) a[e] = d.decode(a[e]);
            else a = void 0 !== a ? d.decode(a) : void 0;
            return a
        }
        if (h(b))
            for (e = 0, g = b.length; e < g; e++) b[e] = d.encode(b[e]);
        else b = "string" === typeof b || b instanceof String ? d.encode(b) : b;
        return this.segment(a, b, c)
    };
    var L = e.query;
    e.query = function(a, b) {
        if (!0 === a) return d.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
        if ("function" === typeof a) {
            var c = d.parseQuery(this._parts.query, this._parts.escapeQuerySpace),
                e = a.call(this, c);
            this._parts.query = d.buildQuery(e || c, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
            this.build(!b);
            return this
        }
        return void 0 !== a && "string" !== typeof a ? (this._parts.query = d.buildQuery(a, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace), this.build(!b), this) : L.call(this, a, b)
    };
    e.setQuery = function(a, b, c) {
        var e = d.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
        if ("string" === typeof a || a instanceof String) e[a] = void 0 !== b ? b : null;
        else if ("object" ===
            typeof a)
            for (var g in a) q.call(a, g) && (e[g] = a[g]);
        else throw new TypeError("URI.addQuery() accepts an object, string as the name parameter");
        this._parts.query = d.buildQuery(e, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
        "string" !== typeof a && (c = b);
        this.build(!c);
        return this
    };
    e.addQuery = function(a, b, c) {
        var e = d.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
        d.addQuery(e, a, void 0 === b ? null : b);
        this._parts.query = d.buildQuery(e, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
        "string" !== typeof a && (c = b);
        this.build(!c);
        return this
    };
    e.removeQuery = function(a, b, c) {
        var e = d.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
        d.removeQuery(e, a, b);
        this._parts.query = d.buildQuery(e, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
        "string" !== typeof a && (c = b);
        this.build(!c);
        return this
    };
    e.hasQuery = function(a, b, c) {
        var e = d.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
        return d.hasQuery(e, a, b, c)
    };
    e.setSearch = e.setQuery;
    e.addSearch = e.addQuery;
    e.removeSearch =
        e.removeQuery;
    e.hasSearch = e.hasQuery;
    e.normalize = function() {
        return this._parts.urn ? this.normalizeProtocol(!1).normalizePath(!1).normalizeQuery(!1).normalizeFragment(!1).build() : this.normalizeProtocol(!1).normalizeHostname(!1).normalizePort(!1).normalizePath(!1).normalizeQuery(!1).normalizeFragment(!1).build()
    };
    e.normalizeProtocol = function(a) {
        "string" === typeof this._parts.protocol && (this._parts.protocol = this._parts.protocol.toLowerCase(), this.build(!a));
        return this
    };
    e.normalizeHostname = function(a) {
        this._parts.hostname &&
            (this.is("IDN") && p ? this._parts.hostname = p.toASCII(this._parts.hostname) : this.is("IPv6") && w && (this._parts.hostname = w.best(this._parts.hostname)), this._parts.hostname = this._parts.hostname.toLowerCase(), this.build(!a));
        return this
    };
    e.normalizePort = function(a) {
        "string" === typeof this._parts.protocol && this._parts.port === d.defaultPorts[this._parts.protocol] && (this._parts.port = null, this.build(!a));
        return this
    };
    e.normalizePath = function(a) {
        var b = this._parts.path;
        if (!b) return this;
        if (this._parts.urn) return this._parts.path =
            d.recodeUrnPath(this._parts.path), this.build(!a), this;
        if ("/" === this._parts.path) return this;
        var b = d.recodePath(b),
            c, e = "",
            g, k;
        "/" !== b.charAt(0) && (c = !0, b = "/" + b);
        if ("/.." === b.slice(-3) || "/." === b.slice(-2)) b += "/";
        b = b.replace(/(\/(\.\/)+)|(\/\.$)/g, "/").replace(/\/{2,}/g, "/");
        c && (e = b.substring(1).match(/^(\.\.\/)+/) || "") && (e = e[0]);
        for (;;) {
            g = b.search(/\/\.\.(\/|$)/);
            if (-1 === g) break;
            else if (0 === g) {
                b = b.substring(3);
                continue
            }
            k = b.substring(0, g).lastIndexOf("/"); - 1 === k && (k = g);
            b = b.substring(0, k) + b.substring(g +
                3)
        }
        c && this.is("relative") && (b = e + b.substring(1));
        this._parts.path = b;
        this.build(!a);
        return this
    };
    e.normalizePathname = e.normalizePath;
    e.normalizeQuery = function(a) {
        "string" === typeof this._parts.query && (this._parts.query.length ? this.query(d.parseQuery(this._parts.query, this._parts.escapeQuerySpace)) : this._parts.query = null, this.build(!a));
        return this
    };
    e.normalizeFragment = function(a) {
        this._parts.fragment || (this._parts.fragment = null, this.build(!a));
        return this
    };
    e.normalizeSearch = e.normalizeQuery;
    e.normalizeHash =
        e.normalizeFragment;
    e.iso8859 = function() {
        var a = d.encode,
            b = d.decode;
        d.encode = escape;
        d.decode = decodeURIComponent;
        try {
            this.normalize()
        } finally {
            d.encode = a, d.decode = b
        }
        return this
    };
    e.unicode = function() {
        var a = d.encode,
            b = d.decode;
        d.encode = B;
        d.decode = unescape;
        try {
            this.normalize()
        } finally {
            d.encode = a, d.decode = b
        }
        return this
    };
    e.readable = function() {
        var a = this.clone();
        a.username("").password("").normalize();
        var b = "";
        a._parts.protocol && (b += a._parts.protocol + "://");
        a._parts.hostname && (a.is("punycode") && p ? (b += p.toUnicode(a._parts.hostname),
            a._parts.port && (b += ":" + a._parts.port)) : b += a.host());
        a._parts.hostname && a._parts.path && "/" !== a._parts.path.charAt(0) && (b += "/");
        b += a.path(!0);
        if (a._parts.query) {
            for (var c = "", e = 0, g = a._parts.query.split("&"), k = g.length; e < k; e++) {
                var h = (g[e] || "").split("="),
                    c = c + ("&" + d.decodeQuery(h[0], this._parts.escapeQuerySpace).replace(/&/g, "%26"));
                void 0 !== h[1] && (c += "=" + d.decodeQuery(h[1], this._parts.escapeQuerySpace).replace(/&/g, "%26"))
            }
            b += "?" + c.substring(1)
        }
        return b += d.decodeQuery(a.hash(), !0)
    };
    e.absoluteTo = function(a) {
        var b =
            this.clone(),
            c = ["protocol", "username", "password", "hostname", "port"],
            e, g;
        if (this._parts.urn) throw Error("URNs do not have any generally defined hierarchical components");
        a instanceof d || (a = new d(a));
        b._parts.protocol || (b._parts.protocol = a._parts.protocol);
        if (this._parts.hostname) return b;
        for (e = 0; g = c[e]; e++) b._parts[g] = a._parts[g];
        b._parts.path ? ".." === b._parts.path.substring(-2) && (b._parts.path += "/") : (b._parts.path = a._parts.path, b._parts.query || (b._parts.query = a._parts.query));
        "/" !== b.path().charAt(0) &&
            (c = (c = a.directory()) ? c : 0 === a.path().indexOf("/") ? "/" : "", b._parts.path = (c ? c + "/" : "") + b._parts.path, b.normalizePath());
        b.build();
        return b
    };
    e.relativeTo = function(a) {
        var b = this.clone().normalize(),
            c, e, g;
        if (b._parts.urn) throw Error("URNs do not have any generally defined hierarchical components");
        a = (new d(a)).normalize();
        c = b._parts;
        e = a._parts;
        g = b.path();
        a = a.path();
        if ("/" !== g.charAt(0)) throw Error("URI is already relative");
        if ("/" !== a.charAt(0)) throw Error("Cannot calculate a URI relative to another relative URI");
        c.protocol === e.protocol && (c.protocol = null);
        if (c.username === e.username && c.password === e.password && null === c.protocol && null === c.username && null === c.password && c.hostname === e.hostname && c.port === e.port) c.hostname = null, c.port = null;
        else return b.build();
        if (g === a) return c.path = "", b.build();
        g = d.commonPath(g, a);
        if (!g) return b.build();
        e = e.path.substring(g.length).replace(/[^\/]*$/, "").replace(/.*?\//g, "../");
        c.path = e + c.path.substring(g.length) || "./";
        return b.build()
    };
    e.equals = function(a) {
        var b = this.clone();
        a = new d(a);
        var c = {},
            e = {},
            g = {},
            k;
        b.normalize();
        a.normalize();
        if (b.toString() === a.toString()) return !0;
        c = b.query();
        e = a.query();
        b.query("");
        a.query("");
        if (b.toString() !== a.toString() || c.length !== e.length) return !1;
        c = d.parseQuery(c, this._parts.escapeQuerySpace);
        e = d.parseQuery(e, this._parts.escapeQuerySpace);
        for (k in c)
            if (q.call(c, k)) {
                if (!h(c[k])) {
                    if (c[k] !== e[k]) return !1
                } else if (!E(c[k], e[k])) return !1;
                g[k] = !0
            }
        for (k in e)
            if (q.call(e, k) && !g[k]) return !1;
        return !0
    };
    e.duplicateQueryParameters = function(a) {
        this._parts.duplicateQueryParameters = !!a;
        return this
    };
    e.escapeQuerySpace = function(a) {
        this._parts.escapeQuerySpace = !!a;
        return this
    };
    return d
});

//__ES4__

(function() { var $window = this; var window = $window.parent || $window; var global = window; var document = window.document; var $es4 = window.$es4 || (window.$es4 = {}); var _ = window._; var $ = window.$; 

//flash.utils.flash_proxy
$es4.$$package('flash.utils').flash_proxy = $es4.$$namespace('http://www.sweetrush.com/flash/proxy', true);
//flash.utils.flash_proxy


//flash.display.StageScaleMode
$es4.$$package('flash.display').StageScaleMode = (function ()
{
	//properties
	var $$j = {};
	StageScaleMode.EXACT_FIT = "exactFit";
	StageScaleMode.NO_BORDER = "noBorder";
	StageScaleMode.NO_SCALE = "noScale";
	StageScaleMode.SHOW_ALL = "showAll";

	//class pre initializer
	StageScaleMode.$$sinit = (function ()
	{
		StageScaleMode.$$sinit = undefined;

		//set prototype and constructor
		StageScaleMode.prototype = Object.create(Object.prototype);
		Object.defineProperty(StageScaleMode.prototype, "constructor", { value: StageScaleMode, enumerable: false });

		//hold private values
		Object.defineProperty(StageScaleMode.prototype, '$$v', {value:{}});
	});

	//class initializer
	StageScaleMode.$$cinit = (function ()
	{
		StageScaleMode.$$cinit = undefined;
	});

	function StageScaleMode()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof StageScaleMode) || $$this.$$StageScaleMode !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], StageScaleMode) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			StageScaleMode.$$construct($$this, $$args);
		}
	}

	//construct
	StageScaleMode.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (StageScaleMode.$$cinit !== undefined) StageScaleMode.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$StageScaleMode', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		StageScaleMode.$$iinit($$this);

		//call constructor
		if (args !== undefined) StageScaleMode.$$constructor.apply($$this, args);
	});

	//initializer
	StageScaleMode.$$iinit = (function ($$this)
	{
	});

	//constructor
	StageScaleMode.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(StageScaleMode, null, 'flash.display::StageScaleMode');
})();
//flash.display.StageScaleMode


//flash.text.engine.LineJustification
$es4.$$package('flash.text.engine').LineJustification = function () { throw new Error('Use of unimplemented class: LineJustification'); }
//flash.text.engine.LineJustification


//flash.accessibility.AccessibilityImplementation
$es4.$$package('flash.accessibility').AccessibilityImplementation = function () { throw new Error('Use of unimplemented class: AccessibilityImplementation'); }
//flash.accessibility.AccessibilityImplementation


//flash.net.NetGroup
$es4.$$package('flash.net').NetGroup = function () { throw new Error('Use of unimplemented class: NetGroup'); }
//flash.net.NetGroup


//flash.events.DRMAuthenticationErrorEvent
$es4.$$package('flash.events').DRMAuthenticationErrorEvent = function () { throw new Error('Use of unimplemented class: DRMAuthenticationErrorEvent'); }
//flash.events.DRMAuthenticationErrorEvent


//flash.events.AccelerometerEvent
$es4.$$package('flash.events').AccelerometerEvent = function () { throw new Error('Use of unimplemented class: AccelerometerEvent'); }
//flash.events.AccelerometerEvent


//flash.text.StyleSheet
$es4.$$package('flash.text').StyleSheet = (function ()
{
	//imports
	var EventDispatcher;
	var TextFormat;

	//properties
	var $$j = {};
	Object.defineProperty(StyleSheet, '_ID', {
	get:function () { if (StyleSheet.$$cinit !== undefined) StyleSheet.$$cinit(); return $$j._ID; },
	set:function (value) { if (StyleSheet.$$cinit !== undefined) StyleSheet.$$cinit(); $$j._ID = $es4.$$coerce(value, int); }
	});


	//class pre initializer
	StyleSheet.$$sinit = (function ()
	{
		StyleSheet.$$sinit = undefined;

		//initialize imports
		EventDispatcher = $es4.$$['flash.events'].EventDispatcher;
		TextFormat = $es4.$$['flash.text'].TextFormat;

		//ensure $$sinit is called on super class
		if (EventDispatcher.$$sinit !== undefined) EventDispatcher.$$sinit();

		//set prototype and constructor
		StyleSheet.prototype = Object.create(EventDispatcher.prototype);
		Object.defineProperty(StyleSheet.prototype, "constructor", { value: StyleSheet, enumerable: false });

		//hold private values
		Object.defineProperty(StyleSheet.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(StyleSheet.prototype, 'setStyle', {
		get:function ()
		{
			var $$this = this;

			function setStyle($$$$styleName, $$$$styleObject)
			{
				//set default parameter values
				var styleName = $es4.$$coerce($$$$styleName, String);
				var styleObject = $es4.$$coerce($$$$styleObject, Object);

				throw $es4.$$primitive(new Error('StyleSheet: attempted call to an unimplemented function "setStyle"'));
			}

			return $$this.$$StyleSheet.$$setStyle || ($$this.$$StyleSheet.$$setStyle = setStyle);
		}});


		//public instance method
		Object.defineProperty(StyleSheet.prototype, 'clear', {
		get:function ()
		{
			var $$this = this;

			function clear()
			{
				$$this.$$StyleSheet._styleNode.innerHTML = '';
			}

			return $$this.$$StyleSheet.$$clear || ($$this.$$StyleSheet.$$clear = clear);
		}});


		//public instance method
		Object.defineProperty(StyleSheet.prototype, 'getStyle', {
		get:function ()
		{
			var $$this = this;

			function getStyle($$$$styleName)
			{
				//set default parameter values
				var styleName = $es4.$$coerce($$$$styleName, String);

				return JSON.parse(JSON.stringify($$this.$$StyleSheet._styles[styleName]));
			}

			return $$this.$$StyleSheet.$$getStyle || ($$this.$$StyleSheet.$$getStyle = getStyle);
		}});


		//public instance method
		Object.defineProperty(StyleSheet.prototype, 'parseCSS', {
		get:function ()
		{
			var $$this = this;

			function parseCSS($$$$text)
			{
				//set default parameter values
				var text = $$$$text;

				text = (text || '').trim();
				if (!text.length)
				{
					return;
				}
				var parts = text.split('}');
				var id = $$this.$__id;
				for (var i = parts.length; i--;)
				{
					if (!parts[i].length)
					{
						continue;
					}
					parts[i] = ' .' + id + ' ' + parts[i];
				}
				$$this.$$StyleSheet._styleNode.innerHTML = parts.join('}');
			}

			return $$this.$$StyleSheet.$$parseCSS || ($$this.$$StyleSheet.$$parseCSS = parseCSS);
		}});


		//public instance method
		Object.defineProperty(StyleSheet.prototype, 'transform', {
		get:function ()
		{
			var $$this = this;

			function transform($$$$formatObject)
			{
				//set default parameter values
				var formatObject = $es4.$$coerce($$$$formatObject, Object);

				throw $es4.$$primitive(new Error('StyleSheet: attempted call to an unimplemented function "transform"'));
			}

			return $$this.$$StyleSheet.$$transform || ($$this.$$StyleSheet.$$transform = transform);
		}});

		Object.defineProperty(StyleSheet.prototype, 'styleNames', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('StyleSheet: attempted call to an unimplemented function "styleNames"'));
		}});

		//properties
		Object.defineProperty(StyleSheet.prototype, '$__id', {
		get:function () { var $$this = this; return $$this.$$StyleSheet.$__id; },
		set:function (value) { var $$this = this; $$this.$$StyleSheet.$__id = value }
		});

		StyleSheet.prototype.$$v._styleNode = {
		get:function () { var $$this = this.$$this; return $$this.$$StyleSheet.$$p._styleNode; },
		set:function (value) { var $$this = this.$$this; $$this.$$StyleSheet.$$p._styleNode = value }
		};

		StyleSheet.prototype.$$v._styles = {
		get:function () { var $$this = this.$$this; return $$this.$$StyleSheet.$$p._styles; },
		set:function (value) { var $$this = this.$$this; $$this.$$StyleSheet.$$p._styles = $es4.$$coerce(value, Object); }
		};

	});

	//class initializer
	StyleSheet.$$cinit = (function ()
	{
		StyleSheet.$$cinit = undefined;

		//initialize properties
		$$j._ID = $es4.$$coerce(0, int);
	
	});

	function StyleSheet()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof StyleSheet) || $$this.$$StyleSheet !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], StyleSheet) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			StyleSheet.$$construct($$this, $$args);
		}
	}

	//construct
	StyleSheet.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (StyleSheet.$$cinit !== undefined) StyleSheet.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$StyleSheet', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$StyleSheet, '_styleNode', StyleSheet.prototype.$$v._styleNode);
		Object.defineProperty($$this.$$StyleSheet, '_styles', StyleSheet.prototype.$$v._styles);

		//call construct on super
		EventDispatcher.$$construct($$this);

		//initialize properties
		StyleSheet.$$iinit($$this);

		//call constructor
		if (args !== undefined) StyleSheet.$$constructor.apply($$this, args);
	});

	//initializer
	StyleSheet.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$StyleSheet.$__id = "__style__" + StyleSheet._ID++;
		$$this.$$StyleSheet.$$p._styleNode = undefined;
		$$this.$$StyleSheet.$$p._styles = $es4.$$coerce({}, Object);
	
		//call iinit on super
		EventDispatcher.$$iinit($$this);
	});

	//constructor
	StyleSheet.$$constructor = (function ()
	{
		var $$this = this;

		EventDispatcher.$$constructor.call($$this);

		var doc = document;
		var styleNode = doc.createElement('style');
		styleNode.type = 'text/css';
		doc.getElementsByTagName('head')[0].appendChild(styleNode);
		$$this.$$StyleSheet._styleNode = styleNode;
	});

	return $es4.$$class(StyleSheet, {EXTENDS:'flash.events.EventDispatcher'}, 'flash.text::StyleSheet');
})();
//flash.text.StyleSheet


//flash.text.engine.RenderingMode
$es4.$$package('flash.text.engine').RenderingMode = function () { throw new Error('Use of unimplemented class: RenderingMode'); }
//flash.text.engine.RenderingMode


//flash.media.SoundChannel
$es4.$$package('flash.media').SoundChannel = (function ()
{
	//imports
	var Event;
	var EventDispatcher;
	var Sound;
	var SoundTransform;
	var Browser;
	var clearTimeout;
	var setTimeout;
	var SoundChannel;

	//class pre initializer
	SoundChannel.$$sinit = (function ()
	{
		SoundChannel.$$sinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;
		EventDispatcher = $es4.$$['flash.events'].EventDispatcher;
		Sound = $es4.$$['flash.media'].Sound;
		SoundTransform = $es4.$$['flash.media'].SoundTransform;
		Browser = $es4.$$['browser'].Browser;
		clearTimeout = $es4.$$['flash.utils'].clearTimeout;
		setTimeout = $es4.$$['flash.utils'].setTimeout;

		//ensure $$sinit is called on super class
		if (EventDispatcher.$$sinit !== undefined) EventDispatcher.$$sinit();

		//set prototype and constructor
		SoundChannel.prototype = Object.create(EventDispatcher.prototype);
		Object.defineProperty(SoundChannel.prototype, "constructor", { value: SoundChannel, enumerable: false });

		//hold private values
		Object.defineProperty(SoundChannel.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(SoundChannel.prototype, '$_onEndedTimeout', {
		get:function ()
		{
			var $$this = this;

			function $_onEndedTimeout($$$$event)
			{
				//set default parameter values
				var event = $$$$event;

				if (!$$this.$__source)
				{
					return;
				}
				if ($$this.position < $$this.$__sound.length)
				{
					$$this.$_timeoutID = setTimeout($$this.$_onEndedTimeout, 500);
					return;
				}
				trace('soundChannel setTimeout ended');
				$$this.$_onEnded(null);
			}

			return $$this.$$SoundChannel.$$$_onEndedTimeout || ($$this.$$SoundChannel.$$$_onEndedTimeout = $_onEndedTimeout);
		}});


		//public instance method
		Object.defineProperty(SoundChannel.prototype, '$_onEnded', {
		get:function ()
		{
			var $$this = this;

			function $_onEnded($$$$event)
			{
				//set default parameter values
				var event = $$$$event;

				trace('on ended called');
				if (!isNaN($$this.$_timeoutID))
				{
					clearTimeout($$this.$_timeoutID);
				}
				if ($$this.$__source)
				{
					$$this.$__source.removeEventListener('ended', $$this.$_onEnded);
				}
				$$this.dispatchEvent($es4.$$primitive(new Event(Event.SOUND_COMPLETE)));
			}

			return $$this.$$SoundChannel.$$$_onEnded || ($$this.$$SoundChannel.$$$_onEnded = $_onEnded);
		}});


		//public instance method
		Object.defineProperty(SoundChannel.prototype, 'stop', {
		get:function ()
		{
			var $$this = this;

			function stop()
			{
				if ($$this.$__sound && $$this.$__sound.$__audioContext)
				{
					if ($$this.$__source)
					{
						clearTimeout($$this.$_timeoutID);
						$$this.$__source.removeEventListener('ended', $$this.$_onEnded);
						$$this.$__sourcePauseTime = $$this.position;
						$$this.$__source.stop(0);
						$$this.$__gainNode.disconnect();
						$$this.$__source.disconnect();
						$$this.$__source = null;
					}
					return;
				}
				if ($$this.$__audio)
				{
					$$this.$__audio.pause();
				}
			}

			return $$this.$$SoundChannel.$$stop || ($$this.$$SoundChannel.$$stop = stop);
		}});

		Object.defineProperty(SoundChannel.prototype, 'leftPeak', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('SoundChannel: attempted call to an unimplemented function "leftPeak"'));
		}});
		Object.defineProperty(SoundChannel.prototype, 'position', {get:function ()
		{
			var $$this = this;
			if ($$this.$__sound && $$this.$__sound.$__audioContext)
			{
				var position = $es4.$$coerce((($$this.$__source) ? ($$this.$__sound.$__audioContext.currentTime + $$this.$__sourceOffsetTime) - $$this.$__sourceStartTime : $$this.$__sourcePauseTime) * 1000, Number);
				return (position > $$this.$__sound.length) ? $$this.$__sound.length : position;
			}
			return $es4.$$coerce(($$this.$__audio) ? $$this.$__audio.currentTime * 1000 : 0, Number);
		}});
		Object.defineProperty(SoundChannel.prototype, 'rightPeak', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('SoundChannel: attempted call to an unimplemented function "rightPeak"'));
		}});
		Object.defineProperty(SoundChannel.prototype, 'soundTransform', {get:function ()
		{
			var $$this = this;
			return $$this.$__soundTransform;
		}, set:function ($$$$soundTransform)
		{
			//set default parameter values
			var soundTransform = $es4.$$coerce($$$$soundTransform, SoundTransform);

			var $$this = this;
			$$this.$__soundTransform = soundTransform;
			if ($$this.$__sound && $$this.$__sound.$__audioContext)
			{
				$$this.$__gainNode.gain.value = soundTransform.volume;
				return;
			}
			if ($$this.$__audio)
			{
				$$this.$__audio.volume = soundTransform.volume;
			}
		}});

		//properties
		Object.defineProperty(SoundChannel.prototype, '$__gainNode', {
		get:function () { var $$this = this; return $$this.$$SoundChannel.$__gainNode; },
		set:function (value) { var $$this = this; $$this.$$SoundChannel.$__gainNode = $es4.$$coerce(value, Object); }
		});

		Object.defineProperty(SoundChannel.prototype, '$__audio', {
		get:function () { var $$this = this; return $$this.$$SoundChannel.$__audio; },
		set:function (value) { var $$this = this; $$this.$$SoundChannel.$__audio = $es4.$$coerce(value, Object); }
		});

		Object.defineProperty(SoundChannel.prototype, '$__sound', {
		get:function () { var $$this = this; return $$this.$$SoundChannel.$__sound; },
		set:function (value) { var $$this = this; $$this.$$SoundChannel.$__sound = $es4.$$coerce(value, Sound); }
		});

		Object.defineProperty(SoundChannel.prototype, '$__source', {
		get:function () { var $$this = this; return $$this.$$SoundChannel.$__source; },
		set:function (value) { var $$this = this; $$this.$$SoundChannel.$__source = $es4.$$coerce(value, Object); }
		});

		Object.defineProperty(SoundChannel.prototype, '$__sourceStartTime', {
		get:function () { var $$this = this; return $$this.$$SoundChannel.$__sourceStartTime; },
		set:function (value) { var $$this = this; $$this.$$SoundChannel.$__sourceStartTime = $es4.$$coerce(value, Number); }
		});

		Object.defineProperty(SoundChannel.prototype, '$__sourcePauseTime', {
		get:function () { var $$this = this; return $$this.$$SoundChannel.$__sourcePauseTime; },
		set:function (value) { var $$this = this; $$this.$$SoundChannel.$__sourcePauseTime = $es4.$$coerce(value, Number); }
		});

		Object.defineProperty(SoundChannel.prototype, '$__sourceOffsetTime', {
		get:function () { var $$this = this; return $$this.$$SoundChannel.$__sourceOffsetTime; },
		set:function (value) { var $$this = this; $$this.$$SoundChannel.$__sourceOffsetTime = $es4.$$coerce(value, Number); }
		});

		Object.defineProperty(SoundChannel.prototype, '$__loops', {
		get:function () { var $$this = this; return $$this.$$SoundChannel.$__loops; },
		set:function (value) { var $$this = this; $$this.$$SoundChannel.$__loops = $es4.$$coerce(value, int); }
		});

		Object.defineProperty(SoundChannel.prototype, '$__soundTransform', {
		get:function () { var $$this = this; return $$this.$$SoundChannel.$__soundTransform; },
		set:function (value) { var $$this = this; $$this.$$SoundChannel.$__soundTransform = $es4.$$coerce(value, SoundTransform); }
		});

		Object.defineProperty(SoundChannel.prototype, '$_timeoutID', {
		get:function () { var $$this = this; return $$this.$$SoundChannel.$_timeoutID; },
		set:function (value) { var $$this = this; $$this.$$SoundChannel.$_timeoutID = $es4.$$coerce(value, Number); }
		});

	});

	//class initializer
	SoundChannel.$$cinit = (function ()
	{
		SoundChannel.$$cinit = undefined;
	});

	//internal static method
	SoundChannel.$__getNewSoundChannel = (function ($$$$sound, $$$$startTime, $$$$loops, $$$$sndTransform)
	{
		if (SoundChannel.$$cinit !== undefined) SoundChannel.$$cinit();

		//set default parameter values
		var sound = $es4.$$coerce($$$$sound, Sound);
		var startTime = $es4.$$coerce($$$$startTime, Number);
		var loops = $es4.$$coerce($$$$loops, int);
		var sndTransform = $es4.$$coerce($$$$sndTransform, SoundTransform);

		trace('getting new sound channel');
		var soundChannel = null;
		var source = null;
		if (sound.$__audioContext && !sound.$__base64String)
		{
			trace('new sound channel via audio context');
			soundChannel = $es4.$$coerce((sound.$__soundChannel) ? sound.$__soundChannel : $es4.$$primitive(new SoundChannel()), $es4.$$['flash.media'].SoundChannel);
			if (sndTransform)
			{
				soundChannel.$__soundTransform = sndTransform;
			}
			soundChannel.$__sound = sound;
			soundChannel.$__loops = loops;
			sound.$__soundChannel = soundChannel;
			if (soundChannel.$__source)
			{
				trace('soundChannel.$__source exists');
				clearTimeout(soundChannel.$_timeoutID);
				soundChannel.$__source.removeEventListener('ended', soundChannel.$_onEnded);
				soundChannel.$__source.stop(0);
				soundChannel.$__gainNode.disconnect();
				soundChannel.$__source.disconnect();
			}
			var callback = $es4.$$coerce(function () 
			{
				source = sound.$__audioContext.createBufferSource();
				source.buffer = sound.$__audioSourceBuffer;
				var gainNode = soundChannel.$__gainNode = sound.$__audioContext.createGain();
				source.connect(gainNode);
				gainNode.connect(sound.$__audioContext.destination);
				gainNode.gain.value = soundChannel.$__soundTransform.volume;
				trace('sample rates: ' + sound.$__audioContext.sampleRate + ', ' + source.buffer.sampleRate);
				trace('duration: ' + source.buffer.duration);
				var time = Math.max(0, Math.min(source.buffer.duration - .001, (startTime - 1) / 1000));
				trace('time: ' + time);
				trace('audio context current time: ' + sound.$__audioContext.currentTime);
				soundChannel.$__sourceStartTime = sound.$__audioContext.currentTime;
				soundChannel.$__sourceOffsetTime = time;
				soundChannel.$__sourcePauseTime = 0;
				soundChannel.$__source = source;
				soundChannel.$_timeoutID = setTimeout(soundChannel.$_onEndedTimeout, sound.length - startTime);
				source.addEventListener('ended', soundChannel.$_onEnded);
				source.start(0, time);
			}
, Function);
			if (sound.$__waitForAudioSourceBuffer)
			{
				sound.$__waitForAudioSourceBuffer = callback;
				return soundChannel;
			}
			callback();
			return soundChannel;
		}
		trace('no AudioContext support. Using standard Audio');
		if (sound.$__soundChannel)
		{
			soundChannel = sound.$__soundChannel;
			if (sndTransform)
			{
				soundChannel.$__soundTransform = sndTransform;
			}
			soundChannel.$__audio.currentTime = startTime / 1000;
			soundChannel.$__audio.play();
			soundChannel.$__audio.volume = soundChannel.$__soundTransform.volume;
			return soundChannel;
		}
		if (startTime)
		{
			trace('SoundChannel: startTime in sound.play is not supported on first call');
		}
		soundChannel = $es4.$$coerce($es4.$$primitive(new SoundChannel()), $es4.$$['flash.media'].SoundChannel);
		if (sndTransform)
		{
			soundChannel.$__soundTransform = sndTransform;
		}
		sound.$__soundChannel = soundChannel;
		soundChannel.$__sound = sound;
		soundChannel.$__audio = Browser.getNewAudio();
		soundChannel.$__audio.src = (sound.$__base64String) ? sound.$__base64String : sound.url;
		soundChannel.$__audio.load();
		soundChannel.$__audio.addEventListener('ended', soundChannel.$_onEnded);
		soundChannel.$__audio.play();
		soundChannel.$__audio.volume = soundChannel.$__soundTransform.volume;
		return soundChannel;
	});
	function SoundChannel()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof SoundChannel) || $$this.$$SoundChannel !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], SoundChannel) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			SoundChannel.$$construct($$this, $$args);
		}
	}

	//construct
	SoundChannel.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (SoundChannel.$$cinit !== undefined) SoundChannel.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$SoundChannel', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//call construct on super
		EventDispatcher.$$construct($$this);

		//initialize properties
		SoundChannel.$$iinit($$this);

		//call constructor
		if (args !== undefined) SoundChannel.$$constructor.apply($$this, args);
	});

	//initializer
	SoundChannel.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$SoundChannel.$__gainNode = $es4.$$coerce(undefined, Object);
		$$this.$$SoundChannel.$__audio = $es4.$$coerce(undefined, Object);
		$$this.$$SoundChannel.$__sound = $es4.$$coerce(undefined, Sound);
		$$this.$$SoundChannel.$__source = $es4.$$coerce(undefined, Object);
		$$this.$$SoundChannel.$__sourceStartTime = $es4.$$coerce(0, Number);
		$$this.$$SoundChannel.$__sourcePauseTime = $es4.$$coerce(0, Number);
		$$this.$$SoundChannel.$__sourceOffsetTime = $es4.$$coerce(0, Number);
		$$this.$$SoundChannel.$__loops = $es4.$$coerce(0, int);
		$$this.$$SoundChannel.$__soundTransform = $es4.$$coerce($es4.$$primitive(new SoundTransform()), SoundTransform);
		$$this.$$SoundChannel.$_timeoutID = $es4.$$coerce(undefined, Number);
	
		//call iinit on super
		EventDispatcher.$$iinit($$this);
	});

	//constructor
	SoundChannel.$$constructor = (function ()
	{
		var $$this = this;
		EventDispatcher.$$constructor.call($$this);
	});

	return $es4.$$class(SoundChannel, {EXTENDS:'flash.events.EventDispatcher'}, 'flash.media::SoundChannel');
})();
//flash.media.SoundChannel


//flash.text.ime.CompositionAttributeRange
$es4.$$package('flash.text.ime').CompositionAttributeRange = function () { throw new Error('Use of unimplemented class: CompositionAttributeRange'); }
//flash.text.ime.CompositionAttributeRange


//flash.ui.ContextMenu
$es4.$$package('flash.ui').ContextMenu = function () { throw new Error('Use of unimplemented class: ContextMenu'); }
//flash.ui.ContextMenu


//flash.media.ID3Info
$es4.$$package('flash.media').ID3Info = function () { throw new Error('Use of unimplemented class: ID3Info'); }
//flash.media.ID3Info


//flash.text.engine.JustificationStyle
$es4.$$package('flash.text.engine').JustificationStyle = function () { throw new Error('Use of unimplemented class: JustificationStyle'); }
//flash.text.engine.JustificationStyle


//flash.geom.Point
$es4.$$package('flash.geom').Point = (function ()
{
	//imports
	var Point;

	//class pre initializer
	Point.$$sinit = (function ()
	{
		Point.$$sinit = undefined;

		//initialize imports
		//set prototype and constructor
		Point.prototype = Object.create(Object.prototype);
		Object.defineProperty(Point.prototype, "constructor", { value: Point, enumerable: false });

		//hold private values
		Object.defineProperty(Point.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(Point.prototype, 'add', {
		get:function ()
		{
			var $$this = this;

			function add($$$$v)
			{
				//set default parameter values
				var v = $es4.$$coerce($$$$v, $es4.$$['flash.geom'].Point);

				return $es4.$$coerce($es4.$$primitive(new Point($$this.$$Point._x + v.x, $$this.$$Point._y + v.y)), $es4.$$['flash.geom'].Point);
			}

			return $$this.$$Point.$$add || ($$this.$$Point.$$add = add);
		}});


		//public instance method
		Object.defineProperty(Point.prototype, 'clone', {
		get:function ()
		{
			var $$this = this;

			function clone()
			{
				return $es4.$$coerce($es4.$$primitive(new Point($$this.$$Point._x, $$this.$$Point._y)), $es4.$$['flash.geom'].Point);
			}

			return $$this.$$Point.$$clone || ($$this.$$Point.$$clone = clone);
		}});


		//public instance method
		Object.defineProperty(Point.prototype, 'copyFrom', {
		get:function ()
		{
			var $$this = this;

			function copyFrom($$$$sourcePoint)
			{
				//set default parameter values
				var sourcePoint = $es4.$$coerce($$$$sourcePoint, $es4.$$['flash.geom'].Point);

				throw $es4.$$primitive(new Error('Point: attempted call to an unimplemented function "copyFrom"'));
			}

			return $$this.$$Point.$$copyFrom || ($$this.$$Point.$$copyFrom = copyFrom);
		}});


		//public instance method
		Object.defineProperty(Point.prototype, 'equals', {
		get:function ()
		{
			var $$this = this;

			function equals($$$$toCompare)
			{
				//set default parameter values
				var toCompare = $es4.$$coerce($$$$toCompare, $es4.$$['flash.geom'].Point);

				return $es4.$$coerce($$this.$$Point._x == toCompare.x && $$this.$$Point._y == toCompare.y, Boolean);
			}

			return $$this.$$Point.$$equals || ($$this.$$Point.$$equals = equals);
		}});


		//public instance method
		Object.defineProperty(Point.prototype, 'normalize', {
		get:function ()
		{
			var $$this = this;

			function normalize($$$$thickness)
			{
				//set default parameter values
				var thickness = $es4.$$coerce($$$$thickness, Number);

				if ($$this.$$Point._x !== 0 || $$this.$$Point._y !== 0)
				{
					var relativeThickness = thickness / $$this.length;
					$$this.$$Point._x *= relativeThickness;
					$$this.$$Point._y *= relativeThickness;
				}
			}

			return $$this.$$Point.$$normalize || ($$this.$$Point.$$normalize = normalize);
		}});


		//public instance method
		Object.defineProperty(Point.prototype, 'offset', {
		get:function ()
		{
			var $$this = this;

			function offset($$$$dx, $$$$dy)
			{
				//set default parameter values
				var dx = $es4.$$coerce($$$$dx, Number);
				var dy = $es4.$$coerce($$$$dy, Number);

				$$this.$$Point._x += dx;
				$$this.$$Point._y += dy;
			}

			return $$this.$$Point.$$offset || ($$this.$$Point.$$offset = offset);
		}});


		//public instance method
		Object.defineProperty(Point.prototype, 'setTo', {
		get:function ()
		{
			var $$this = this;

			function setTo($$$$xa, $$$$ya)
			{
				//set default parameter values
				var xa = $es4.$$coerce($$$$xa, Number);
				var ya = $es4.$$coerce($$$$ya, Number);

				$$this.$$Point._x = xa;
				$$this.$$Point._y = ya;
			}

			return $$this.$$Point.$$setTo || ($$this.$$Point.$$setTo = setTo);
		}});


		//public instance method
		Object.defineProperty(Point.prototype, 'subtract', {
		get:function ()
		{
			var $$this = this;

			function subtract($$$$v)
			{
				//set default parameter values
				var v = $es4.$$coerce($$$$v, $es4.$$['flash.geom'].Point);

				return $es4.$$coerce($es4.$$primitive(new Point($$this.$$Point._x - v.x, $$this.$$Point._y - v.y)), $es4.$$['flash.geom'].Point);
			}

			return $$this.$$Point.$$subtract || ($$this.$$Point.$$subtract = subtract);
		}});


		//public instance method
		Object.defineProperty(Point.prototype, 'toString', {
		get:function ()
		{
			var $$this = this;

			function toString()
			{
				return ["(x=", $$this.$$Point._x, ", y=", $$this.$$Point._y, ")"].join("");
			}

			return $$this.$$Point.$$toString || ($$this.$$Point.$$toString = toString);
		}});

		Object.defineProperty(Point.prototype, 'y', {get:function ()
		{
			var $$this = this;
			return $$this.$$Point._y;
		}, set:function ($$$$y)
		{
			//set default parameter values
			var y = $es4.$$coerce($$$$y, Number);

			var $$this = this;
			$$this.$$Point._y = y;
		}});
		Object.defineProperty(Point.prototype, 'x', {get:function ()
		{
			var $$this = this;
			return $$this.$$Point._x;
		}, set:function ($$$$x)
		{
			//set default parameter values
			var x = $es4.$$coerce($$$$x, Number);

			var $$this = this;
			$$this.$$Point._x = x;
		}});
		Object.defineProperty(Point.prototype, 'length', {get:function ()
		{
			var $$this = this;
			return Point.diagonalLength($$this.$$Point._x, $$this.$$Point._y);
		}});

		//properties
		Point.prototype.$$v._x = {
		get:function () { var $$this = this.$$this; return $$this.$$Point.$$p._x; },
		set:function (value) { var $$this = this.$$this; $$this.$$Point.$$p._x = $es4.$$coerce(value, Number); }
		};

		Point.prototype.$$v._y = {
		get:function () { var $$this = this.$$this; return $$this.$$Point.$$p._y; },
		set:function (value) { var $$this = this.$$this; $$this.$$Point.$$p._y = $es4.$$coerce(value, Number); }
		};

	});

	//class initializer
	Point.$$cinit = (function ()
	{
		Point.$$cinit = undefined;
	});

	//private static method
	Point.diagonalLength = (function ($$$$x, $$$$y)
	{
		if (Point.$$cinit !== undefined) Point.$$cinit();

		//set default parameter values
		var x = $es4.$$coerce($$$$x, Number);
		var y = $es4.$$coerce($$$$y, Number);

		return x === 0 ? Math.abs(y) : y === 0 ? Math.abs(x) : Math.sqrt(x * x + y * y);
	});

	//public static method
	Point.distance = (function ($$$$pt1, $$$$pt2)
	{
		if (Point.$$cinit !== undefined) Point.$$cinit();

		//set default parameter values
		var pt1 = $es4.$$coerce($$$$pt1, $es4.$$['flash.geom'].Point);
		var pt2 = $es4.$$coerce($$$$pt2, $es4.$$['flash.geom'].Point);

		return Point.diagonalLength(pt2.x - pt1.x, pt2.y - pt1.y);
	});

	//public static method
	Point.interpolate = (function ($$$$pt1, $$$$pt2, $$$$f)
	{
		if (Point.$$cinit !== undefined) Point.$$cinit();

		//set default parameter values
		var pt1 = $es4.$$coerce($$$$pt1, $es4.$$['flash.geom'].Point);
		var pt2 = $es4.$$coerce($$$$pt2, $es4.$$['flash.geom'].Point);
		var f = $es4.$$coerce($$$$f, Number);

		return $es4.$$coerce($es4.$$primitive(new Point(pt1.x * f + pt2.x * (1 - f), pt1.y * f + pt2.y * (1 - f))), $es4.$$['flash.geom'].Point);
	});

	//public static method
	Point.polar = (function ($$$$len, $$$$angle)
	{
		if (Point.$$cinit !== undefined) Point.$$cinit();

		//set default parameter values
		var len = $es4.$$coerce($$$$len, Number);
		var angle = $es4.$$coerce($$$$angle, Number);

		return $es4.$$coerce($es4.$$primitive(new Point(len * Math.cos(angle), len * Math.sin(angle))), $es4.$$['flash.geom'].Point);
	});
	function Point()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof Point) || $$this.$$Point !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Point) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			Point.$$construct($$this, $$args);
		}
	}

	//construct
	Point.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (Point.$$cinit !== undefined) Point.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$Point', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$Point, '_x', Point.prototype.$$v._x);
		Object.defineProperty($$this.$$Point, '_y', Point.prototype.$$v._y);

		//initialize properties
		Point.$$iinit($$this);

		//call constructor
		if (args !== undefined) Point.$$constructor.apply($$this, args);
	});

	//initializer
	Point.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$Point.$$p._x = $es4.$$coerce(undefined, Number);
		$$this.$$Point.$$p._y = $es4.$$coerce(undefined, Number);
	
	});

	//constructor
	Point.$$constructor = (function ($$$$x, $$$$y)
	{
		var $$this = this;
		//set default parameter values
		var x = (0 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$x, Number);
		var y = (1 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$y, Number);

		$$this.$$Point._x = x;
		$$this.$$Point._y = y;
	});

	return $es4.$$class(Point, null, 'flash.geom::Point');
})();
//flash.geom.Point


//flash.display3D.Context3DTextureFormat
$es4.$$package('flash.display3D').Context3DTextureFormat = function () { throw new Error('Use of unimplemented class: Context3DTextureFormat'); }
//flash.display3D.Context3DTextureFormat


//flash.events.UncaughtErrorEvent
$es4.$$package('flash.events').UncaughtErrorEvent = function () { throw new Error('Use of unimplemented class: UncaughtErrorEvent'); }
//flash.events.UncaughtErrorEvent


//flash.events.PressAndTapGestureEvent
$es4.$$package('flash.events').PressAndTapGestureEvent = function () { throw new Error('Use of unimplemented class: PressAndTapGestureEvent'); }
//flash.events.PressAndTapGestureEvent


//flash.text.TextColorType
$es4.$$package('flash.text').TextColorType = function () { throw new Error('Use of unimplemented class: TextColorType'); }
//flash.text.TextColorType


//flash.events.ContextMenuEvent
$es4.$$package('flash.events').ContextMenuEvent = function () { throw new Error('Use of unimplemented class: ContextMenuEvent'); }
//flash.events.ContextMenuEvent


//flash.desktop.ClipboardFormats
$es4.$$package('flash.desktop').ClipboardFormats = function () { throw new Error('Use of unimplemented class: ClipboardFormats'); }
//flash.desktop.ClipboardFormats


//flash.geom.Orientation3D
$es4.$$package('flash.geom').Orientation3D = function () { throw new Error('Use of unimplemented class: Orientation3D'); }
//flash.geom.Orientation3D


//flash.display.LineScaleMode
$es4.$$package('flash.display').LineScaleMode = function () { throw new Error('Use of unimplemented class: LineScaleMode'); }
//flash.display.LineScaleMode


//flash.net.FileReferenceList
$es4.$$package('flash.net').FileReferenceList = function () { throw new Error('Use of unimplemented class: FileReferenceList'); }
//flash.net.FileReferenceList


//flash.text.CSMSettings
$es4.$$package('flash.text').CSMSettings = function () { throw new Error('Use of unimplemented class: CSMSettings'); }
//flash.text.CSMSettings


//flash.system.TouchscreenType
$es4.$$package('flash.system').TouchscreenType = function () { throw new Error('Use of unimplemented class: TouchscreenType'); }
//flash.system.TouchscreenType


//flash.utils.Dictionary
$es4.$$package('flash.utils').Dictionary = (function ()
{
	//class pre initializer
	Dictionary.$$sinit = (function ()
	{
		Dictionary.$$sinit = undefined;

		//set prototype and constructor
		Dictionary.prototype = Object.create(Object.prototype);
		Object.defineProperty(Dictionary.prototype, "constructor", { value: Dictionary, enumerable: false });

		//hold private values
		Object.defineProperty(Dictionary.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(Dictionary.prototype, 'toJSON', {
		get:function ()
		{
			var $$this = this;

			function toJSON($$$$k)
			{
				//set default parameter values
				var k = $es4.$$coerce($$$$k, String);

				throw $es4.$$primitive(new Error('Dictionary: does not support toJSON at this time'));
			}

			return $$this.$$Dictionary.$$toJSON || ($$this.$$Dictionary.$$toJSON = toJSON);
		}});


		//private instance method
		Dictionary.prototype.$$v.$$get = {
		get:function ()
		{
			var $$this = this.$$this;

			function $$get($$$$key)
			{
				//set default parameter values
				var key = $$$$key;

				if (!$$this.$$Dictionary.$map.has(key))
				{
					return undefined;
				}
				return $$this.$$Dictionary.$map.get(key).value;
			}

			return $$this.$$Dictionary.$$p.$$$$get || ($$this.$$Dictionary.$$p.$$$$get = $$get);
		}};


		//private instance method
		Dictionary.prototype.$$v.$$set = {
		get:function ()
		{
			var $$this = this.$$this;

			function $$set($$$$key, $$$$value)
			{
				//set default parameter values
				var key = $$$$key;
				var value = $$$$value;

				$$this.$$Dictionary.$map.set(key, {index:$$this.$$Dictionary.$values.length, value:value});
				$$this.$$Dictionary.$keys.push(key);
				$$this.$$Dictionary.$values.push(value);
			}

			return $$this.$$Dictionary.$$p.$$$$set || ($$this.$$Dictionary.$$p.$$$$set = $$set);
		}};


		//private instance method
		Dictionary.prototype.$$v.$$call = {
		get:function ()
		{
			var $$this = this.$$this;

			function $$call($$$$name, $$$$args)
			{
				//set default parameter values
				var name = $$$$name;
				var args = $es4.$$coerce($$$$args, Array);

				return $$this.$$Dictionary.$map.get(name).value.apply($$this, args);
			}

			return $$this.$$Dictionary.$$p.$$$$call || ($$this.$$Dictionary.$$p.$$$$call = $$call);
		}};


		//private instance method
		Dictionary.prototype.$$v.$$delete = {
		get:function ()
		{
			var $$this = this.$$this;

			function $$delete($$$$key)
			{
				//set default parameter values
				var key = $$$$key;

				if ($$this.$$Dictionary.$map.has(key))
				{
					var value = $$this.$$Dictionary.$map.get(key);
					$$this.$$Dictionary.$values.splice(value.index, 1);
					$$this.$$Dictionary.$keys.splice(value.index, 1);
				}
				return $es4.$$coerce($$this.$$Dictionary.$map.delete(key), Boolean);
			}

			return $$this.$$Dictionary.$$p.$$$$delete || ($$this.$$Dictionary.$$p.$$$$delete = $$delete);
		}};


		//private instance method
		Dictionary.prototype.$$v.$$nextName = {
		get:function ()
		{
			var $$this = this.$$this;

			function $$nextName($$$$index)
			{
				//set default parameter values
				var index = $es4.$$coerce($$$$index, int);

				return $$this.$$Dictionary.$keys[index - 1];
			}

			return $$this.$$Dictionary.$$p.$$$$nextName || ($$this.$$Dictionary.$$p.$$$$nextName = $$nextName);
		}};


		//private instance method
		Dictionary.prototype.$$v.$$nextNameIndex = {
		get:function ()
		{
			var $$this = this.$$this;

			function $$nextNameIndex($$$$index)
			{
				//set default parameter values
				var index = $es4.$$coerce($$$$index, int);

				return (index < $$this.$$Dictionary.$values.length) ? index + 1 : 0;
			}

			return $$this.$$Dictionary.$$p.$$$$nextNameIndex || ($$this.$$Dictionary.$$p.$$$$nextNameIndex = $$nextNameIndex);
		}};


		//private instance method
		Dictionary.prototype.$$v.$$nextValue = {
		get:function ()
		{
			var $$this = this.$$this;

			function $$nextValue($$$$index)
			{
				//set default parameter values
				var index = $es4.$$coerce($$$$index, int);

				return $$this.$$Dictionary.$values[index - 1];
			}

			return $$this.$$Dictionary.$$p.$$$$nextValue || ($$this.$$Dictionary.$$p.$$$$nextValue = $$nextValue);
		}};

		//properties
		Dictionary.prototype.$$v.$$isProxy = {
		get:function () { var $$this = this.$$this; return $$this.$$Dictionary.$$p.$$isProxy; },
		set:function (value) { var $$this = this.$$this; $$this.$$Dictionary.$$p.$$isProxy = $es4.$$coerce(value, Boolean); }
		};

		Dictionary.prototype.$$v.$map = {
		get:function () { var $$this = this.$$this; return $$this.$$Dictionary.$$p.$map; },
		set:function (value) { var $$this = this.$$this; $$this.$$Dictionary.$$p.$map = value }
		};

		Dictionary.prototype.$$v.$keys = {
		get:function () { var $$this = this.$$this; return $$this.$$Dictionary.$$p.$keys; },
		set:function (value) { var $$this = this.$$this; $$this.$$Dictionary.$$p.$keys = $es4.$$coerce(value, Array); }
		};

		Dictionary.prototype.$$v.$values = {
		get:function () { var $$this = this.$$this; return $$this.$$Dictionary.$$p.$values; },
		set:function (value) { var $$this = this.$$this; $$this.$$Dictionary.$$p.$values = $es4.$$coerce(value, Array); }
		};

	});

	//class initializer
	Dictionary.$$cinit = (function ()
	{
		Dictionary.$$cinit = undefined;
	});

	function Dictionary()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof Dictionary) || $$this.$$Dictionary !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Dictionary) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			Dictionary.$$construct($$this, $$args);
		}
	}

	//construct
	Dictionary.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (Dictionary.$$cinit !== undefined) Dictionary.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$Dictionary', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$Dictionary, '$$isProxy', Dictionary.prototype.$$v.$$isProxy);
		Object.defineProperty($$this.$$Dictionary, '$map', Dictionary.prototype.$$v.$map);
		Object.defineProperty($$this.$$Dictionary, '$keys', Dictionary.prototype.$$v.$keys);
		Object.defineProperty($$this.$$Dictionary, '$values', Dictionary.prototype.$$v.$values);

		//private instance method
		Object.defineProperty($$this.$$Dictionary, '$$get', Dictionary.prototype.$$v.$$get);

		//private instance method
		Object.defineProperty($$this.$$Dictionary, '$$set', Dictionary.prototype.$$v.$$set);

		//private instance method
		Object.defineProperty($$this.$$Dictionary, '$$call', Dictionary.prototype.$$v.$$call);

		//private instance method
		Object.defineProperty($$this.$$Dictionary, '$$delete', Dictionary.prototype.$$v.$$delete);

		//private instance method
		Object.defineProperty($$this.$$Dictionary, '$$nextName', Dictionary.prototype.$$v.$$nextName);

		//private instance method
		Object.defineProperty($$this.$$Dictionary, '$$nextNameIndex', Dictionary.prototype.$$v.$$nextNameIndex);

		//private instance method
		Object.defineProperty($$this.$$Dictionary, '$$nextValue', Dictionary.prototype.$$v.$$nextValue);

		//initialize properties
		Dictionary.$$iinit($$this);

		//call constructor
		if (args !== undefined) Dictionary.$$constructor.apply($$this, args);
	});

	//initializer
	Dictionary.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$Dictionary.$$p.$$isProxy = $es4.$$coerce(true, Boolean);
		$$this.$$Dictionary.$$p.$map = $es4.$$primitive(new global.Map());
		$$this.$$Dictionary.$$p.$keys = $es4.$$coerce([], Array);
		$$this.$$Dictionary.$$p.$values = $es4.$$coerce([], Array);
	
	});

	//constructor
	Dictionary.$$constructor = (function ($$$$weakKeys)
	{
		var $$this = this;
		//set default parameter values
		var weakKeys = (0 > arguments.length - 1) ? false : $es4.$$coerce($$$$weakKeys, Boolean);

		if (weakKeys)
		{
			trace('Warning: Dictionary: does not support weakKeys at this time');
		}
	});

	return $es4.$$class(Dictionary, null, 'flash.utils::Dictionary');
})();
//flash.utils.Dictionary


//flash.media.Camera
$es4.$$package('flash.media').Camera = function () { throw new Error('Use of unimplemented class: Camera'); }
//flash.media.Camera


//flash.net.drm.DRMManager
$es4.$$package('flash.net.drm').DRMManager = function () { throw new Error('Use of unimplemented class: DRMManager'); }
//flash.net.drm.DRMManager


//flash.display3D.Context3DClearMask
$es4.$$package('flash.display3D').Context3DClearMask = function () { throw new Error('Use of unimplemented class: Context3DClearMask'); }
//flash.display3D.Context3DClearMask


//flash.text.TextFieldType
$es4.$$package('flash.text').TextFieldType = (function ()
{
	//properties
	var $$j = {};
	TextFieldType.DYNAMIC = "dynamic";
	TextFieldType.INPUT = "input";

	//class pre initializer
	TextFieldType.$$sinit = (function ()
	{
		TextFieldType.$$sinit = undefined;

		//set prototype and constructor
		TextFieldType.prototype = Object.create(Object.prototype);
		Object.defineProperty(TextFieldType.prototype, "constructor", { value: TextFieldType, enumerable: false });

		//hold private values
		Object.defineProperty(TextFieldType.prototype, '$$v', {value:{}});
	});

	//class initializer
	TextFieldType.$$cinit = (function ()
	{
		TextFieldType.$$cinit = undefined;
	});

	function TextFieldType()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof TextFieldType) || $$this.$$TextFieldType !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], TextFieldType) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			TextFieldType.$$construct($$this, $$args);
		}
	}

	//construct
	TextFieldType.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (TextFieldType.$$cinit !== undefined) TextFieldType.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$TextFieldType', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		TextFieldType.$$iinit($$this);

		//call constructor
		if (args !== undefined) TextFieldType.$$constructor.apply($$this, args);
	});

	//initializer
	TextFieldType.$$iinit = (function ($$this)
	{
	});

	//constructor
	TextFieldType.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(TextFieldType, null, 'flash.text::TextFieldType');
})();
//flash.text.TextFieldType


//flash.display.GraphicsStroke
$es4.$$package('flash.display').GraphicsStroke = function () { throw new Error('Use of unimplemented class: GraphicsStroke'); }
//flash.display.GraphicsStroke


//flash.text.GridFitType
$es4.$$package('flash.text').GridFitType = function () { throw new Error('Use of unimplemented class: GridFitType'); }
//flash.text.GridFitType


//XMLList
$es4.$$package('').XMLList = (function ()
{
	//imports
	var XMLDocument;

	//class pre initializer
	XMLList.$$sinit = (function ()
	{
		XMLList.$$sinit = undefined;

		//initialize imports
		XMLDocument = $es4.$$['flash.xml'].XMLDocument;

		//set prototype and constructor
		XMLList.prototype = Object.create(Object.prototype);
		Object.defineProperty(XMLList.prototype, "constructor", { value: XMLList, enumerable: false });

		//hold private values
		Object.defineProperty(XMLList.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(XMLList.prototype, 'attribute', {
		get:function ()
		{
			var $$this = this;

			function attribute($$$$attributeName)
			{
				//set default parameter values
				var attributeName = $$$$attributeName;

				var xmlList = $es4.$$coerce($es4.$$primitive(new XMLList()), XMLList);
				xmlList.$__parent = $$this.$$XMLList.$_parent;
				for (var $$i0 in $$this.$$XMLList.$_nodes)
				{
					var xml = $es4.$$coerce($$this.$$XMLList.$_nodes[$$i0], XML);

					if (xml.nodeKind() != 'element')
					{
						continue;
					}
					xmlList.$__merge(xml.attribute(attributeName));
				}
				return xmlList;
			}

			return $$this.$$XMLList.$$attribute || ($$this.$$XMLList.$$attribute = attribute);
		}});


		//public instance method
		Object.defineProperty(XMLList.prototype, 'attributes', {
		get:function ()
		{
			var $$this = this;

			function attributes()
			{
				var xmlList = $es4.$$coerce($es4.$$primitive(new XMLList()), XMLList);
				xmlList.$__parent = $$this.$$XMLList.$_parent;
				for (var $$i1 in $$this.$$XMLList.$_nodes)
				{
					var xml = $es4.$$coerce($$this.$$XMLList.$_nodes[$$i1], XML);

					if (xml.nodeKind() != 'element')
					{
						continue;
					}
					xmlList.$__merge(xml.attributes());
				}
				return xmlList;
			}

			return $$this.$$XMLList.$$attributes || ($$this.$$XMLList.$$attributes = attributes);
		}});


		//public instance method
		Object.defineProperty(XMLList.prototype, 'child', {
		get:function ()
		{
			var $$this = this;

			function child($$$$propertyName)
			{
				//set default parameter values
				var propertyName = $es4.$$coerce($$$$propertyName, Object);

				var xmlList = $es4.$$coerce($es4.$$primitive(new XMLList()), XMLList);
				xmlList.$__parent = $$this.$$XMLList.$_parent;
				for (var $$i2 in $$this.$$XMLList.$_nodes)
				{
					var xml = $es4.$$coerce($$this.$$XMLList.$_nodes[$$i2], XML);

					if (xml.nodeKind() != 'element')
					{
						continue;
					}
					xmlList.$__merge(xml.child(propertyName));
				}
				return xmlList;
			}

			return $$this.$$XMLList.$$child || ($$this.$$XMLList.$$child = child);
		}});


		//public instance method
		Object.defineProperty(XMLList.prototype, 'children', {
		get:function ()
		{
			var $$this = this;

			function children()
			{
				var xmlList = $es4.$$coerce($es4.$$primitive(new XMLList()), XMLList);
				xmlList.$__parent = $$this.$$XMLList.$_parent;
				for (var $$i3 in $$this.$$XMLList.$_nodes)
				{
					var xml = $es4.$$coerce($$this.$$XMLList.$_nodes[$$i3], XML);

					if (xml.nodeKind() != 'element')
					{
						continue;
					}
					xmlList.$__merge(xml.children());
				}
				return xmlList;
			}

			return $$this.$$XMLList.$$children || ($$this.$$XMLList.$$children = children);
		}});


		//public instance method
		Object.defineProperty(XMLList.prototype, 'contains', {
		get:function ()
		{
			var $$this = this;

			function contains($$$$value)
			{
				//set default parameter values
				var value = $es4.$$coerce($$$$value, XML);

				var valueString = value.toXMLString();
				for (var $$i4 in $$this.$$XMLList.$_nodes)
				{
					var xml = $es4.$$coerce($$this.$$XMLList.$_nodes[$$i4], XML);

					if (xml.toXMLString() == valueString)
					{
						return true;
					}
				}
				return false;
			}

			return $$this.$$XMLList.$$contains || ($$this.$$XMLList.$$contains = contains);
		}});


		//public instance method
		Object.defineProperty(XMLList.prototype, 'copy', {
		get:function ()
		{
			var $$this = this;

			function copy()
			{
				return $es4.$$coerce($es4.$$primitive(new XMLList($$this)), XMLList);
			}

			return $$this.$$XMLList.$$copy || ($$this.$$XMLList.$$copy = copy);
		}});


		//public instance method
		Object.defineProperty(XMLList.prototype, 'descendants', {
		get:function ()
		{
			var $$this = this;

			function descendants($$$$name)
			{
				//set default parameter values
				var name = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$name, Object);

				var xmlList = $es4.$$coerce($es4.$$primitive(new XMLList()), XMLList);
				for (var $$i5 in $$this.$$XMLList.$_nodes)
				{
					var xml = $es4.$$coerce($$this.$$XMLList.$_nodes[$$i5], XML);

					if (xml.nodeKind() != 'element')
					{
						if (name == null)
						{
							xmlList[xmlList.length()] = xml;
						}
						continue;
					}
					if (name == null || name.toString() == xml.name())
					{
						xmlList[xmlList.length()] = xml;
					}
					xmlList.$__merge(xml.descendants(name));
				}
				return xmlList;
			}

			return $$this.$$XMLList.$$descendants || ($$this.$$XMLList.$$descendants = descendants);
		}});


		//public instance method
		Object.defineProperty(XMLList.prototype, 'elements', {
		get:function ()
		{
			var $$this = this;

			function elements($$$$name)
			{
				//set default parameter values
				var name = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$name, Object);

				var xmlList = $es4.$$coerce($es4.$$primitive(new XMLList()), XMLList);
				xmlList.$__parent = $$this.$$XMLList.$_parent;
				for (var $$i6 in $$this.$$XMLList.$_nodes)
				{
					var xml = $es4.$$coerce($$this.$$XMLList.$_nodes[$$i6], XML);

					if (xml.nodeKind() == 'element')
					{
						xmlList[xmlList.length()] = xml;
					}
				}
				return xmlList;
			}

			return $$this.$$XMLList.$$elements || ($$this.$$XMLList.$$elements = elements);
		}});


		//public instance method
		Object.defineProperty(XMLList.prototype, 'length', {
		get:function ()
		{
			var $$this = this;

			function length()
			{
				return $es4.$$coerce($$this.$$XMLList.$_nodes.length, int);
			}

			return $$this.$$XMLList.$$length || ($$this.$$XMLList.$$length = length);
		}});


		//public instance method
		Object.defineProperty(XMLList.prototype, 'parent', {
		get:function ()
		{
			var $$this = this;

			function parent()
			{
				return $$this.$$XMLList.$_parent;
			}

			return $$this.$$XMLList.$$parent || ($$this.$$XMLList.$$parent = parent);
		}});


		//public instance method
		Object.defineProperty(XMLList.prototype, 'text', {
		get:function ()
		{
			var $$this = this;

			function text()
			{
				var xmlList = $es4.$$coerce($es4.$$primitive(new XMLList()), XMLList);
				xmlList.$__parent = $$this.$$XMLList.$_parent;
				for (var $$i7 in $$this.$$XMLList.$_nodes)
				{
					var xml = $es4.$$coerce($$this.$$XMLList.$_nodes[$$i7], XML);

					if (xml.nodeKind() == 'text')
					{
						xmlList[xmlList.length()] = xml;
					}
				}
				return xmlList;
			}

			return $$this.$$XMLList.$$text || ($$this.$$XMLList.$$text = text);
		}});


		//public instance method
		Object.defineProperty(XMLList.prototype, 'hasOwnProperty', {
		get:function ()
		{
			var $$this = this;

			function hasOwnProperty($$$$name)
			{
				//set default parameter values
				var name = $es4.$$coerce($$$$name, String);

				var index = parseInt(name);
				if (isNaN(index))
				{
					return false;
				}
				return $es4.$$coerce(index >= 0 && index < $$this.$$XMLList.$_nodes.length, Boolean);
			}

			return $$this.$$XMLList.$$hasOwnProperty || ($$this.$$XMLList.$$hasOwnProperty = hasOwnProperty);
		}});


		//public instance method
		Object.defineProperty(XMLList.prototype, 'propertyIsEnumerable', {
		get:function ()
		{
			var $$this = this;

			function propertyIsEnumerable($$$$name)
			{
				//set default parameter values
				var name = $es4.$$coerce($$$$name, String);

				var index = parseInt(name);
				if (isNaN(index))
				{
					return false;
				}
				return $es4.$$coerce(index >= 0 && index < $$this.$$XMLList.$_nodes.length, Boolean);
			}

			return $$this.$$XMLList.$$propertyIsEnumerable || ($$this.$$XMLList.$$propertyIsEnumerable = propertyIsEnumerable);
		}});


		//public instance method
		Object.defineProperty(XMLList.prototype, 'toString', {
		get:function ()
		{
			var $$this = this;

			function toString()
			{
				var string = '';
				for (var $$i8 in $$this.$$XMLList.$_nodes)
				{
					var childXML = $es4.$$coerce($$this.$$XMLList.$_nodes[$$i8], XML);

					string += childXML.toString();
				}
				return string;
			}

			return $$this.$$XMLList.$$toString || ($$this.$$XMLList.$$toString = toString);
		}});


		//public instance method
		Object.defineProperty(XMLList.prototype, 'toXMLString', {
		get:function ()
		{
			var $$this = this;

			function toXMLString()
			{
				var xmlString = '';
				for (var $$i9 in $$this.$$XMLList.$_nodes)
				{
					var childXML = $es4.$$coerce($$this.$$XMLList.$_nodes[$$i9], XML);

					xmlString += childXML.toXMLString();
				}
				return xmlString;
			}

			return $$this.$$XMLList.$$toXMLString || ($$this.$$XMLList.$$toXMLString = toXMLString);
		}});


		//internal instance method
		Object.defineProperty(XMLList.prototype, '$__insertChildAfter', {
		get:function ()
		{
			var $$this = this;

			function $__insertChildAfter($$$$child1, $$$$child2)
			{
				//set default parameter values
				var child1 = $es4.$$coerce($$$$child1, Object);
				var child2 = $es4.$$coerce($$$$child2, Object);

				if (!$$this.$$XMLList.$_parent)
				{
					throw $es4.$$primitive(new Error('XMLList parent must be defined'));
				}
				var index = 0;
				if ($es4.$$is(child2, XMLList))
				{
					if (!child1)
					{
						index = 0;
					}
					else
					{
						if (child1.parent() != $$this.$$XMLList.$_parent)
						{
							return $$this.$$XMLList.$_parent;
						}
						index = $es4.$$coerce(child1.childIndex(), int);
						if (index == -1)
						{
							return $$this.$$XMLList.$_parent;
						}
						index++;
					}
					var length = $es4.$$coerce(child2.length(), int);
					for (var i = 0; i < length; i++)
					{
						$$this.$$XMLList.$_nodes.splice(i + index, 0, child2[i]);
					}
					$$this.$$XMLList.$_parent.$__invalidateString();
					return $$this.$$XMLList.$_parent;
				}
				if (!($es4.$$is(child2, XML)) || child2.parent() != $$this.$$XMLList.$_parent)
				{
					child2 = $es4.$$primitive(new XML(child2));
					child2.$__parent = $$this.$$XMLList.$_parent;
				}
				if (!child1)
				{
					index = 0;
				}
				else
				{
					if (child1.parent() != $$this.$$XMLList.$_parent)
					{
						return $$this.$$XMLList.$_parent;
					}
					index = $es4.$$coerce(child1.childIndex(), int);
					if (index == -1)
					{
						return $$this.$$XMLList.$_parent;
					}
					index++;
				}
				$$this.$$XMLList.$_nodes.splice(index, 0, child2);
				$$this.$$XMLList.$_parent.$__invalidateString();
				return $$this.$$XMLList.$_parent;
			}

			return $$this.$$XMLList.$$$__insertChildAfter || ($$this.$$XMLList.$$$__insertChildAfter = $__insertChildAfter);
		}});


		//internal instance method
		Object.defineProperty(XMLList.prototype, '$__insertChildBefore', {
		get:function ()
		{
			var $$this = this;

			function $__insertChildBefore($$$$child1, $$$$child2)
			{
				//set default parameter values
				var child1 = $es4.$$coerce($$$$child1, Object);
				var child2 = $es4.$$coerce($$$$child2, Object);

				if (!$$this.$$XMLList.$_parent)
				{
					throw $es4.$$primitive(new Error('XMLList parent must be defined'));
				}
				var index = 0;
				if ($es4.$$is(child2, XMLList))
				{
					if (!child1)
					{
						index = 0;
					}
					else
					{
						if (child1.parent() != $$this.$$XMLList.$_parent)
						{
							return $$this.$$XMLList.$_parent;
						}
						index = $es4.$$coerce(child1.childIndex(), int);
						if (index == -1)
						{
							return $$this.$$XMLList.$_parent;
						}
						if (index != 0)
						{
							index--;
						}
					}
					var length = $es4.$$coerce(child2.length(), int);
					for (var i = 0; i < length; i++)
					{
						$$this.$$XMLList.$_nodes.splice(i + index, 0, child2[i]);
					}
					$$this.$$XMLList.$_parent.$__invalidateString();
					return $$this.$$XMLList.$_parent;
				}
				if (!($es4.$$is(child2, XML)) || child2.parent() != $$this.$$XMLList.$_parent)
				{
					child2 = $es4.$$primitive(new XML(child2));
					child2.$__parent = $$this.$$XMLList.$_parent;
				}
				if (!child1)
				{
					index = 0;
				}
				else
				{
					if (child1.parent() != $$this.$$XMLList.$_parent)
					{
						return $$this.$$XMLList.$_parent;
					}
					index = $es4.$$coerce(child1.childIndex(), int);
					if (index == -1)
					{
						return $$this.$$XMLList.$_parent;
					}
					if (index != 0)
					{
						index--;
					}
				}
				$$this.$$XMLList.$_nodes.splice(index, 0, child2);
				$$this.$$XMLList.$_parent.$__invalidateString();
				return $$this.$$XMLList.$_parent;
			}

			return $$this.$$XMLList.$$$__insertChildBefore || ($$this.$$XMLList.$$$__insertChildBefore = $__insertChildBefore);
		}});


		//internal instance method
		Object.defineProperty(XMLList.prototype, '$__prependChild', {
		get:function ()
		{
			var $$this = this;

			function $__prependChild($$$$value)
			{
				//set default parameter values
				var value = $es4.$$coerce($$$$value, Object);

				return $es4.$$coerce($$this.$__insertChildAfter(null, value), XML);
			}

			return $$this.$$XMLList.$$$__prependChild || ($$this.$$XMLList.$$$__prependChild = $__prependChild);
		}});


		//internal instance method
		Object.defineProperty(XMLList.prototype, '$__replace', {
		get:function ()
		{
			var $$this = this;

			function $__replace($$$$childList, $$$$value)
			{
				//set default parameter values
				var childList = $es4.$$coerce($$$$childList, XMLList);
				var value = $es4.$$coerce($$$$value, XML);

				for (var $$i10 in childList)
				{
					var xml = $es4.$$coerce(childList[$$i10], XML);

					$$this.$$XMLList.$$set(xml.childIndex(), value);
				}
				return $es4.$$as($$this.$$XMLList.$_parent, XML);
			}

			return $$this.$$XMLList.$$$__replace || ($$this.$$XMLList.$$$__replace = $__replace);
		}});


		//internal instance method
		Object.defineProperty(XMLList.prototype, '$__merge', {
		get:function ()
		{
			var $$this = this;

			function $__merge($$$$xmlList)
			{
				//set default parameter values
				var xmlList = $es4.$$coerce($$$$xmlList, XMLList);

				for (var $$i11 in xmlList)
				{
					var xml = $es4.$$coerce(xmlList[$$i11], XML);

					$$this.$$XMLList.$_nodes.push(xml);
				}
			}

			return $$this.$$XMLList.$$$__merge || ($$this.$$XMLList.$$$__merge = $__merge);
		}});


		//public instance method
		Object.defineProperty(XMLList.prototype, 'comments', {
		get:function ()
		{
			var $$this = this;

			function comments()
			{
				throw $es4.$$primitive(new Error('XMLList: attempted call to an unimplemented function "comments"'));
			}

			return $$this.$$XMLList.$$comments || ($$this.$$XMLList.$$comments = comments);
		}});


		//public instance method
		Object.defineProperty(XMLList.prototype, 'hasComplexContent', {
		get:function ()
		{
			var $$this = this;

			function hasComplexContent()
			{
				throw $es4.$$primitive(new Error('XMLList: attempted call to an unimplemented function "hasComplexContent"'));
			}

			return $$this.$$XMLList.$$hasComplexContent || ($$this.$$XMLList.$$hasComplexContent = hasComplexContent);
		}});


		//public instance method
		Object.defineProperty(XMLList.prototype, 'hasSimpleContent', {
		get:function ()
		{
			var $$this = this;

			function hasSimpleContent()
			{
				throw $es4.$$primitive(new Error('XMLList: attempted call to an unimplemented function "hasSimpleContent"'));
			}

			return $$this.$$XMLList.$$hasSimpleContent || ($$this.$$XMLList.$$hasSimpleContent = hasSimpleContent);
		}});


		//public instance method
		Object.defineProperty(XMLList.prototype, 'normalize', {
		get:function ()
		{
			var $$this = this;

			function normalize()
			{
				throw $es4.$$primitive(new Error('XMLList: attempted call to an unimplemented function "normalize"'));
			}

			return $$this.$$XMLList.$$normalize || ($$this.$$XMLList.$$normalize = normalize);
		}});


		//public instance method
		Object.defineProperty(XMLList.prototype, 'processingInstructions', {
		get:function ()
		{
			var $$this = this;

			function processingInstructions($$$$name)
			{
				//set default parameter values
				var name = (0 > arguments.length - 1) ? "*" : $es4.$$coerce($$$$name, String);

				throw $es4.$$primitive(new Error('XMLList: attempted call to an unimplemented function "processingInstructions"'));
			}

			return $$this.$$XMLList.$$processingInstructions || ($$this.$$XMLList.$$processingInstructions = processingInstructions);
		}});


		//private instance method
		XMLList.prototype.$$v.$$get = {
		get:function ()
		{
			var $$this = this.$$this;

			function $$get($$$$key)
			{
				//set default parameter values
				var key = $$$$key;

				if (key == '$attributes')
				{
					return $$this.attributes();
				}
				var index = parseInt(key);
				if (isNaN(index))
				{
					if ($$this.$$XMLList.$_parent && $$this.$$XMLList.$_parent.attributes() == $$this)
					{
						var attributes = $es4.$$coerce($$this.$$XMLList.$_parent.attribute(key), XMLList);
						return (attributes.length()) ? attributes[0] : $es4.$$primitive(new XMLList());
					}
					else
					{
						return $$this.child(key);
					}
				}
				return $$this.$$XMLList.$_nodes[index];
			}

			return $$this.$$XMLList.$$p.$$$$get || ($$this.$$XMLList.$$p.$$$$get = $$get);
		}};


		//private instance method
		XMLList.prototype.$$v.$$set = {
		get:function ()
		{
			var $$this = this.$$this;

			function $$set($$$$key, $$$$value)
			{
				//set default parameter values
				var key = $$$$key;
				var value = $$$$value;

				var index = parseInt(key);
				var xml = null;
				if (isNaN(index))
				{
					if ($$this.$$XMLList.$_parent && $$this.$$XMLList.$_parent.attributes() == $$this)
					{
						var attributes = $es4.$$coerce($$this.$$XMLList.$_parent.attribute(key), XMLList);
						if (attributes.length())
						{
							attributes[0] = value;
						}
						else
						{
							attributes = $es4.$$coerce($$this.$$XMLList.$_parent.attributes(), XMLList);
							xml = $es4.$$coerce($es4.$$primitive(new XML('<' + key + '>' + value + '</' + key + '>')), XML);
							xml.$__nodeKind = 'attribute';
							xml.$__parent = $$this.$$XMLList.$_parent;
							attributes[attributes.length()] = xml;
						}
					}
					else if ($$this.$$XMLList.$_parent)
					{
						var children = $es4.$$coerce($$this.$$XMLList.$_parent.child(key), XMLList);
						if (children.length())
						{
							children[0] = value;
						}
						else
						{
							children = $es4.$$coerce($$this.$$XMLList.$_parent.children(), XMLList);
							children[children.length()] = value;
						}
					}
					return value;
				}
				if (index < 0)
				{
					throw $es4.$$primitive(new Error('XMLList: index out of range: ' + index));
				}
				if (index > $$this.$$XMLList.$_nodes.length)
				{
					index = $$this.$$XMLList.$_nodes.length;
				}
				if ($$this.$$XMLList.$_nodes[index])
				{
					if ($$this.$$XMLList.$_nodes[index].nodeKind() == 'attribute')
					{
						$$this.$$XMLList.$_nodes[index].children()[0].$__text = (value) ? value.toString() : '';
						return value;
					}
					else if ($$this.$$XMLList.$_nodes[index].nodeKind() == 'text')
					{
						return value;
					}
					else if ($$this.$$XMLList.$_parent && $$this.$$XMLList.$_parent.children() == $$this)
					{
						if ($$this.$$XMLList.$_nodes[index].children().length())
						{
							$$this.$$XMLList.$_nodes[index].$__nodes.splice(0);
						}
						$$this.$$XMLList.$_nodes[index].appendChild(value);
						return;
					}
				}
				if ($es4.$$is(value, XMLList))
				{
					for (var $$i12 in value)
					{
						xml = $es4.$$coerce(value[$$i12], XML);

						$$this.$$XMLList.$$set(index++, xml);
					}
					return;
				}
				else if (!($es4.$$is(value, XML)))
				{
					value = $es4.$$primitive(new XML(value));
					value.$__parent = $$this.$$XMLList.$_parent;
				}
				else if (!value.parent())
				{
					value.$__parent = $$this.$$XMLList.$_parent;
				}
				else if (value.parent() != $$this.$$XMLList.$_parent && $$this.$$XMLList.$_parent)
				{
					value = $es4.$$primitive(new XML(value));
					value.$__parent = $$this.$$XMLList.$_parent;
				}
				else if ($$this.$$XMLList.$_parent)
				{
					$$this.$$XMLList.$_parent.$__invalidateString();
				}
				return $$this.$$XMLList.$_nodes[index] = value;
			}

			return $$this.$$XMLList.$$p.$$$$set || ($$this.$$XMLList.$$p.$$$$set = $$set);
		}};


		//private instance method
		XMLList.prototype.$$v.$$append = {
		get:function ()
		{
			var $$this = this.$$this;

			function $$append($$$$index, $$$$child2)
			{
				//set default parameter values
				var index = $es4.$$coerce($$$$index, int);
				var child2 = $es4.$$coerce($$$$child2, Object);

				index++;
				if ($es4.$$is(child2, XMLList))
				{
					var length = $es4.$$coerce(child2.length(), int);
					for (var i = 0; i < length; i++)
					{
						$$this.$$XMLList.$_nodes.splice(i + index, 0, child2[i]);
					}
					if ($$this.$$XMLList.$_parent)
					{
						$$this.$$XMLList.$_parent.$__invalidateString();
					}
					return child2;
				}
				if (!($es4.$$is(child2, XML)) || child2.parent() != $$this.$$XMLList.$_parent)
				{
					child2 = $es4.$$primitive(new XML(child2));
					child2.$__parent = $$this.$$XMLList.$_parent;
				}
				$$this.$$XMLList.$_nodes.splice(index, 0, child2);
				if ($$this.$$XMLList.$_parent)
				{
					$$this.$$XMLList.$_parent.$__invalidateString();
				}
				return child2;
			}

			return $$this.$$XMLList.$$p.$$$$append || ($$this.$$XMLList.$$p.$$$$append = $$append);
		}};


		//private instance method
		XMLList.prototype.$$v.$call = {
		get:function ()
		{
			var $$this = this.$$this;

			function $call($$$$name, $$$$args)
			{
				//set default parameter values
				var name = $$$$name;
				var args = $es4.$$coerce($$$$args, Array);

				throw $es4.$$primitive(new Error('XMLList: call not supported'));
			}

			return $$this.$$XMLList.$$p.$$$call || ($$this.$$XMLList.$$p.$$$call = $call);
		}};


		//private instance method
		XMLList.prototype.$$v.$$delete = {
		get:function ()
		{
			var $$this = this.$$this;

			function $$delete($$$$key)
			{
				//set default parameter values
				var key = $$$$key;

				var index = parseInt(key);
				if (isNaN(index))
				{
					if ($$this.$$XMLList.$_parent && $$this.$$XMLList.$_parent.attributes() == $$this)
					{
						var attributes = $es4.$$coerce($$this.$$XMLList.$_parent.attribute(key), XMLList);
						if (attributes.length())
						{
							return $es4.$$coerce(delete attributes[0], Boolean);
						}
					}
					return true;
				}
				if (index < 0 || index >= $$this.$$XMLList.$_nodes.length)
				{
					throw $es4.$$primitive(new Error('XMLList: index out of range: ' + index));
				}
				var xml = $es4.$$coerce($$this.$$XMLList.$_nodes[index], XML);
				if (xml.parent())
				{
					if (xml.nodeKind() == 'element' && $$this != xml.parent().children())
					{
						delete xml.parent().children()[xml.childIndex()];
					}
					else if (xml.nodeKind() == 'attribute' && $$this != xml.parent().attributes())
					{
						delete xml.parent().attributes()[xml.childIndex()];
					}
				}
				xml.$__parent = null;
				$$this.$$XMLList.$_nodes.splice(index, 1);
				if ($$this.$$XMLList.$_parent)
				{
					$$this.$$XMLList.$_parent.$__invalidateString();
				}
				return true;
			}

			return $$this.$$XMLList.$$p.$$$$delete || ($$this.$$XMLList.$$p.$$$$delete = $$delete);
		}};


		//private instance method
		XMLList.prototype.$$v.$$nextName = {
		get:function ()
		{
			var $$this = this.$$this;

			function $$nextName($$$$index)
			{
				//set default parameter values
				var index = $es4.$$coerce($$$$index, int);

				return index.toString();
			}

			return $$this.$$XMLList.$$p.$$$$nextName || ($$this.$$XMLList.$$p.$$$$nextName = $$nextName);
		}};


		//private instance method
		XMLList.prototype.$$v.$$nextNameIndex = {
		get:function ()
		{
			var $$this = this.$$this;

			function $$nextNameIndex($$$$index)
			{
				//set default parameter values
				var index = $es4.$$coerce($$$$index, int);

				return (index < $$this.$$XMLList.$_nodes.length) ? index + 1 : 0;
			}

			return $$this.$$XMLList.$$p.$$$$nextNameIndex || ($$this.$$XMLList.$$p.$$$$nextNameIndex = $$nextNameIndex);
		}};


		//private instance method
		XMLList.prototype.$$v.$$nextValue = {
		get:function ()
		{
			var $$this = this.$$this;

			function $$nextValue($$$$index)
			{
				//set default parameter values
				var index = $es4.$$coerce($$$$index, int);

				return $$this.$$XMLList.$_nodes[index - 1];
			}

			return $$this.$$XMLList.$$p.$$$$nextValue || ($$this.$$XMLList.$$p.$$$$nextValue = $$nextValue);
		}};

		Object.defineProperty(XMLList.prototype, '$__nodes', {get:function ()
		{
			var $$this = this;
			return $$this.$$XMLList.$_nodes;
		}});
		Object.defineProperty(XMLList.prototype, '$__parent', {set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			var $$this = this;
			$$this.$$XMLList.$_parent = value;
			for (var $$i13 in $$this.$$XMLList.$_nodes)
			{
				var xml = $es4.$$coerce($$this.$$XMLList.$_nodes[$$i13], XML);

				xml.$__parent = value;
			}
		}});

		//properties
		XMLList.prototype.$$v.$$isProxy = {
		get:function () { var $$this = this.$$this; return $$this.$$XMLList.$$p.$$isProxy; },
		set:function (value) { var $$this = this.$$this; $$this.$$XMLList.$$p.$$isProxy = $es4.$$coerce(value, Boolean); }
		};

		XMLList.prototype.$$v.$_parent = {
		get:function () { var $$this = this.$$this; return $$this.$$XMLList.$$p.$_parent; },
		set:function (value) { var $$this = this.$$this; $$this.$$XMLList.$$p.$_parent = $es4.$$coerce(value, Object); }
		};

		XMLList.prototype.$$v.$_nodes = {
		get:function () { var $$this = this.$$this; return $$this.$$XMLList.$$p.$_nodes; },
		set:function (value) { var $$this = this.$$this; $$this.$$XMLList.$$p.$_nodes = $es4.$$coerce(value, Array); }
		};

	});

	//class initializer
	XMLList.$$cinit = (function ()
	{
		XMLList.$$cinit = undefined;
	});

	function XMLList()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof XMLList) || $$this.$$XMLList !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], XMLList) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			XMLList.$$construct($$this, $$args);
		}
	}

	//construct
	XMLList.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (XMLList.$$cinit !== undefined) XMLList.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$XMLList', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$XMLList, '$$isProxy', XMLList.prototype.$$v.$$isProxy);
		Object.defineProperty($$this.$$XMLList, '$_parent', XMLList.prototype.$$v.$_parent);
		Object.defineProperty($$this.$$XMLList, '$_nodes', XMLList.prototype.$$v.$_nodes);

		//private instance method
		Object.defineProperty($$this.$$XMLList, '$$get', XMLList.prototype.$$v.$$get);

		//private instance method
		Object.defineProperty($$this.$$XMLList, '$$set', XMLList.prototype.$$v.$$set);

		//private instance method
		Object.defineProperty($$this.$$XMLList, '$$append', XMLList.prototype.$$v.$$append);

		//private instance method
		Object.defineProperty($$this.$$XMLList, '$call', XMLList.prototype.$$v.$call);

		//private instance method
		Object.defineProperty($$this.$$XMLList, '$$delete', XMLList.prototype.$$v.$$delete);

		//private instance method
		Object.defineProperty($$this.$$XMLList, '$$nextName', XMLList.prototype.$$v.$$nextName);

		//private instance method
		Object.defineProperty($$this.$$XMLList, '$$nextNameIndex', XMLList.prototype.$$v.$$nextNameIndex);

		//private instance method
		Object.defineProperty($$this.$$XMLList, '$$nextValue', XMLList.prototype.$$v.$$nextValue);

		//initialize properties
		XMLList.$$iinit($$this);

		//call constructor
		if (args !== undefined) XMLList.$$constructor.apply($$this, args);
	});

	//initializer
	XMLList.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$XMLList.$$p.$$isProxy = $es4.$$coerce(true, Boolean);
		$$this.$$XMLList.$$p.$_parent = $es4.$$coerce(undefined, Object);
		$$this.$$XMLList.$$p.$_nodes = $es4.$$coerce([], Array);
	
	});

	//constructor
	XMLList.$$constructor = (function ($$$$object)
	{
		var $$this = this;
		//set default parameter values
		var object = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$object, Object);

		var xml;
		var i;
		var length;
		if (!object)
		{
		}
		else if ($es4.$$is(object, XMLList))
		{
			for (xml in object)
			{
				$$this.$$XMLList.$_nodes[$$this.$$XMLList.$_nodes.length] = xml;
			}
		}
		else if ($es4.$$is(object, XML))
		{
			$$this.$$XMLList.$_nodes[0] = object;
		}
		else if ($es4.$$is(object, Array))
		{
			length = object.length;
			for (i = 0; i < length; i++)
			{
				$$this.$$XMLList.$_nodes[i] = $es4.$$primitive(new XML(object[i]));
			}
		}
		else if ($es4.$$is(object, String))
		{
			var xmlDocument = $es4.$$primitive(new XMLDocument());
			xmlDocument.ignoreWhite = XML.ignoreWhitespace;
			xmlDocument.parseXML('<root>' + ($es4.$$as(object, String)) + '</root>');
			var childNodes = xmlDocument.firstChild.childNodes;
			length = childNodes.length;
			for (i = 0; i < length; i++)
			{
				$$this.$$XMLList.$_nodes[i] = $es4.$$primitive(new XML(childNodes[i]));
			}
		}
		else
		{
			throw $es4.$$primitive(new Error('unknown XMLList value given in XMLList constructor'));
		}
	});

	return $es4.$$class(XMLList, null, 'XMLList');
})();
//XMLList


//flash.net.NetStreamMulticastInfo
$es4.$$package('flash.net').NetStreamMulticastInfo = function () { throw new Error('Use of unimplemented class: NetStreamMulticastInfo'); }
//flash.net.NetStreamMulticastInfo


//flash.errors.IOError
$es4.$$package('flash.errors').IOError = (function ()
{
	//class pre initializer
	IOError.$$sinit = (function ()
	{
		IOError.$$sinit = undefined;

		//ensure $$sinit is called on super class
		if (Error.$$sinit !== undefined) Error.$$sinit();
		//set prototype and constructor
		IOError.prototype = Object.create(Error.prototype);
		Object.defineProperty(IOError.prototype, "constructor", { value: IOError, enumerable: false });

		//hold private values
		Object.defineProperty(IOError.prototype, '$$v', {value:{}});
	});

	//class initializer
	IOError.$$cinit = (function ()
	{
		IOError.$$cinit = undefined;
	});

	function IOError()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof IOError) || $$this.$$IOError !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], IOError) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			IOError.$$construct($$this, $$args);
		}
	}

	//construct
	IOError.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (IOError.$$cinit !== undefined) IOError.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$IOError', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//call construct on super
		Error.$$construct($$this);

		//initialize properties
		IOError.$$iinit($$this);

		//call constructor
		if (args !== undefined) IOError.$$constructor.apply($$this, args);
	});

	//initializer
	IOError.$$iinit = (function ($$this)
	{
		//call iinit on super
		Error.$$iinit($$this);
	});

	//constructor
	IOError.$$constructor = (function ($$$$message, $$$$id)
	{
		var $$this = this;
		//set default parameter values
		var message = (0 > arguments.length - 1) ? "" : $es4.$$coerce($$$$message, String);
		var id = (1 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$id, int);


		Error.$$constructor.call($$this);
	});

	return $es4.$$class(IOError, {EXTENDS:'Error'}, 'flash.errors::IOError');
})();
//flash.errors.IOError


//flash.filters.BitmapFilterQuality
$es4.$$package('flash.filters').BitmapFilterQuality = function () { throw new Error('Use of unimplemented class: BitmapFilterQuality'); }
//flash.filters.BitmapFilterQuality


//flash.events.DRMAuthenticationCompleteEvent
$es4.$$package('flash.events').DRMAuthenticationCompleteEvent = function () { throw new Error('Use of unimplemented class: DRMAuthenticationCompleteEvent'); }
//flash.events.DRMAuthenticationCompleteEvent


//flash.geom.Matrix3D
$es4.$$package('flash.geom').Matrix3D = function () { throw new Error('Use of unimplemented class: Matrix3D'); }
//flash.geom.Matrix3D


//flash.display3D.IndexBuffer3D
$es4.$$package('flash.display3D').IndexBuffer3D = function () { throw new Error('Use of unimplemented class: IndexBuffer3D'); }
//flash.display3D.IndexBuffer3D


//flash.system.IMEConversionMode
$es4.$$package('flash.system').IMEConversionMode = function () { throw new Error('Use of unimplemented class: IMEConversionMode'); }
//flash.system.IMEConversionMode


//flash.utils.Endian
$es4.$$package('flash.utils').Endian = (function ()
{
	//properties
	var $$j = {};
	Endian.BIG_ENDIAN = "bigEndian";
	Endian.LITTLE_ENDIAN = "littleEndian";

	//class pre initializer
	Endian.$$sinit = (function ()
	{
		Endian.$$sinit = undefined;

		//set prototype and constructor
		Endian.prototype = Object.create(Object.prototype);
		Object.defineProperty(Endian.prototype, "constructor", { value: Endian, enumerable: false });

		//hold private values
		Object.defineProperty(Endian.prototype, '$$v', {value:{}});
	});

	//class initializer
	Endian.$$cinit = (function ()
	{
		Endian.$$cinit = undefined;
	});

	function Endian()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof Endian) || $$this.$$Endian !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Endian) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			Endian.$$construct($$this, $$args);
		}
	}

	//construct
	Endian.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (Endian.$$cinit !== undefined) Endian.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$Endian', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		Endian.$$iinit($$this);

		//call constructor
		if (args !== undefined) Endian.$$constructor.apply($$this, args);
	});

	//initializer
	Endian.$$iinit = (function ($$this)
	{
	});

	//constructor
	Endian.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(Endian, null, 'flash.utils::Endian');
})();
//flash.utils.Endian


//flash.sampler.Accelerometer
$es4.$$package('flash.sampler').Accelerometer = function () { throw new Error('Use of unimplemented class: Accelerometer'); }
//flash.sampler.Accelerometer


//flash.system.JPEGLoaderContext
$es4.$$package('flash.system').JPEGLoaderContext = function () { throw new Error('Use of unimplemented class: JPEGLoaderContext'); }
//flash.system.JPEGLoaderContext


//flash.display.Scene
$es4.$$package('flash.display').Scene = function () { throw new Error('Use of unimplemented class: Scene'); }
//flash.display.Scene


//flash.events.StageVideoEvent
$es4.$$package('flash.events').StageVideoEvent = function () { throw new Error('Use of unimplemented class: StageVideoEvent'); }
//flash.events.StageVideoEvent


//flash.text.engine.TextLineMirrorRegion
$es4.$$package('flash.text.engine').TextLineMirrorRegion = function () { throw new Error('Use of unimplemented class: TextLineMirrorRegion'); }
//flash.text.engine.TextLineMirrorRegion


//flash.text.engine.TextJustifier
$es4.$$package('flash.text.engine').TextJustifier = function () { throw new Error('Use of unimplemented class: TextJustifier'); }
//flash.text.engine.TextJustifier


//flash.net.NetConnection
$es4.$$package('flash.net').NetConnection = (function ()
{
	//imports
	var EventDispatcher;
	var Responder;

	//class pre initializer
	NetConnection.$$sinit = (function ()
	{
		NetConnection.$$sinit = undefined;

		//initialize imports
		EventDispatcher = $es4.$$['flash.events'].EventDispatcher;
		Responder = $es4.$$['flash.net'].Responder;

		//ensure $$sinit is called on super class
		if (EventDispatcher.$$sinit !== undefined) EventDispatcher.$$sinit();

		//set prototype and constructor
		NetConnection.prototype = Object.create(EventDispatcher.prototype);
		Object.defineProperty(NetConnection.prototype, "constructor", { value: NetConnection, enumerable: false });

		//hold private values
		Object.defineProperty(NetConnection.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(NetConnection.prototype, 'connect', {
		get:function ()
		{
			var $$this = this;

			function connect($$$$command, $$$$rest)
			{
				//set default parameter values
				var command = $es4.$$coerce($$$$command, String);
				for (var $$i = 1, $$length = arguments.length, rest = new Array($$length - 1); $$i < $$length; $$i += 1) rest[$$i - 1] = arguments[$$i];

			}

			return $$this.$$NetConnection.$$connect || ($$this.$$NetConnection.$$connect = connect);
		}});


		//public instance method
		Object.defineProperty(NetConnection.prototype, 'addHeader', {
		get:function ()
		{
			var $$this = this;

			function addHeader($$$$operation, $$$$mustUnderstand, $$$$param)
			{
				//set default parameter values
				var operation = $es4.$$coerce($$$$operation, String);
				var mustUnderstand = (1 > arguments.length - 1) ? false : $es4.$$coerce($$$$mustUnderstand, Boolean);
				var param = (2 > arguments.length - 1) ? null : $es4.$$coerce($$$$param, Object);

				throw $es4.$$primitive(new Error('NetConnection: attempted call to an unimplemented function "addHeader"'));
			}

			return $$this.$$NetConnection.$$addHeader || ($$this.$$NetConnection.$$addHeader = addHeader);
		}});


		//public instance method
		Object.defineProperty(NetConnection.prototype, 'call', {
		get:function ()
		{
			var $$this = this;

			function call($$$$command, $$$$responder, $$$$rest)
			{
				//set default parameter values
				var command = $es4.$$coerce($$$$command, String);
				var responder = $es4.$$coerce($$$$responder, Responder);
				for (var $$i = 2, $$length = arguments.length, rest = new Array($$length - 2); $$i < $$length; $$i += 1) rest[$$i - 2] = arguments[$$i];

				throw $es4.$$primitive(new Error('NetConnection: attempted call to an unimplemented function "call"'));
			}

			return $$this.$$NetConnection.$$call || ($$this.$$NetConnection.$$call = call);
		}});


		//public instance method
		Object.defineProperty(NetConnection.prototype, 'close', {
		get:function ()
		{
			var $$this = this;

			function close()
			{
				throw $es4.$$primitive(new Error('NetConnection: attempted call to an unimplemented function "close"'));
			}

			return $$this.$$NetConnection.$$close || ($$this.$$NetConnection.$$close = close);
		}});

		Object.defineProperty(NetConnection.prototype, 'client', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetConnection: attempted call to an unimplemented function "client"'));
		}, set:function ($$$$object)
		{
			//set default parameter values
			var object = $es4.$$coerce($$$$object, Object);

			var $$this = this;
			throw $es4.$$primitive(new Error('NetConnection: attempted call to an unimplemented function "client"'));
		}});
		Object.defineProperty(NetConnection.prototype, 'connected', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetConnection: attempted call to an unimplemented function "connected"'));
		}});
		Object.defineProperty(NetConnection.prototype, 'connectedProxyType', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetConnection: attempted call to an unimplemented function "connectedProxyType"'));
		}});
		Object.defineProperty(NetConnection.prototype, 'farID', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetConnection: attempted call to an unimplemented function "farID"'));
		}});
		Object.defineProperty(NetConnection.prototype, 'farNonce', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetConnection: attempted call to an unimplemented function "farNonce"'));
		}});
		Object.defineProperty(NetConnection.prototype, 'maxPeerConnections', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetConnection: attempted call to an unimplemented function "maxPeerConnections"'));
		}, set:function ($$$$maxPeers)
		{
			//set default parameter values
			var maxPeers = $es4.$$coerce($$$$maxPeers, uint);

			var $$this = this;
			throw $es4.$$primitive(new Error('NetConnection: attempted call to an unimplemented function "maxPeerConnections"'));
		}});
		Object.defineProperty(NetConnection.prototype, 'nearID', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetConnection: attempted call to an unimplemented function "nearID"'));
		}});
		Object.defineProperty(NetConnection.prototype, 'nearNonce', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetConnection: attempted call to an unimplemented function "nearNonce"'));
		}});
		Object.defineProperty(NetConnection.prototype, 'objectEncoding', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetConnection: attempted call to an unimplemented function "objectEncoding"'));
		}, set:function ($$$$version)
		{
			//set default parameter values
			var version = $es4.$$coerce($$$$version, uint);

			var $$this = this;
			throw $es4.$$primitive(new Error('NetConnection: attempted call to an unimplemented function "objectEncoding"'));
		}});
		Object.defineProperty(NetConnection.prototype, 'protocol', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetConnection: attempted call to an unimplemented function "protocol"'));
		}});
		Object.defineProperty(NetConnection.prototype, 'proxyType', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetConnection: attempted call to an unimplemented function "proxyType"'));
		}, set:function ($$$$ptype)
		{
			//set default parameter values
			var ptype = $es4.$$coerce($$$$ptype, String);

			var $$this = this;
			throw $es4.$$primitive(new Error('NetConnection: attempted call to an unimplemented function "proxyType"'));
		}});
		Object.defineProperty(NetConnection.prototype, 'unconnectedPeerStreams', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetConnection: attempted call to an unimplemented function "unconnectedPeerStreams"'));
		}});
		Object.defineProperty(NetConnection.prototype, 'uri', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetConnection: attempted call to an unimplemented function "uri"'));
		}});
		Object.defineProperty(NetConnection.prototype, 'usingTLS', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetConnection: attempted call to an unimplemented function "usingTLS"'));
		}});
	});

	//class initializer
	NetConnection.$$cinit = (function ()
	{
		NetConnection.$$cinit = undefined;
	});

	Object.defineProperty(NetConnection, 'defaultObjectEncoding', {get:function ()
	{
		if (NetConnection.$$cinit !== undefined) NetConnection.$$cinit();

		throw $es4.$$primitive(new Error('NetConnection: attempted call to an unimplemented function "defaultObjectEncoding"'));
	}, set:function ($$$$version)
	{
		if (NetConnection.$$cinit !== undefined) NetConnection.$$cinit();

		//set default parameter values
		var version = $es4.$$coerce($$$$version, uint);

		throw $es4.$$primitive(new Error('NetConnection: attempted call to an unimplemented function "defaultObjectEncoding"'));
	}});

	function NetConnection()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof NetConnection) || $$this.$$NetConnection !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], NetConnection) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			NetConnection.$$construct($$this, $$args);
		}
	}

	//construct
	NetConnection.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (NetConnection.$$cinit !== undefined) NetConnection.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$NetConnection', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//call construct on super
		EventDispatcher.$$construct($$this);

		//initialize properties
		NetConnection.$$iinit($$this);

		//call constructor
		if (args !== undefined) NetConnection.$$constructor.apply($$this, args);
	});

	//initializer
	NetConnection.$$iinit = (function ($$this)
	{
		//call iinit on super
		EventDispatcher.$$iinit($$this);
	});

	//constructor
	NetConnection.$$constructor = (function ()
	{
		var $$this = this;
		EventDispatcher.$$constructor.call($$this);
	});

	return $es4.$$class(NetConnection, {EXTENDS:'flash.events.EventDispatcher'}, 'flash.net::NetConnection');
})();
//flash.net.NetConnection


//flash.filters.ColorMatrixFilter
$es4.$$package('flash.filters').ColorMatrixFilter = function () { throw new Error('Use of unimplemented class: ColorMatrixFilter'); }
//flash.filters.ColorMatrixFilter


//flash.system.SystemUpdaterType
$es4.$$package('flash.system').SystemUpdaterType = function () { throw new Error('Use of unimplemented class: SystemUpdaterType'); }
//flash.system.SystemUpdaterType


//flash.globalization.DateTimeNameContext
$es4.$$package('flash.globalization').DateTimeNameContext = function () { throw new Error('Use of unimplemented class: DateTimeNameContext'); }
//flash.globalization.DateTimeNameContext


//flash.filters.BevelFilter
$es4.$$package('flash.filters').BevelFilter = function () { throw new Error('Use of unimplemented class: BevelFilter'); }
//flash.filters.BevelFilter


//flash.display.GraphicsTrianglePath
$es4.$$package('flash.display').GraphicsTrianglePath = function () { throw new Error('Use of unimplemented class: GraphicsTrianglePath'); }
//flash.display.GraphicsTrianglePath


//flash.desktop.ClipboardTransferMode
$es4.$$package('flash.desktop').ClipboardTransferMode = function () { throw new Error('Use of unimplemented class: ClipboardTransferMode'); }
//flash.desktop.ClipboardTransferMode


//flash.text.TextFormatAlign
$es4.$$package('flash.text').TextFormatAlign = (function ()
{
	//properties
	var $$j = {};
	TextFormatAlign.CENTER = "center";
	TextFormatAlign.END = "end";
	TextFormatAlign.JUSTIFY = "justify";
	TextFormatAlign.LEFT = "left";
	TextFormatAlign.RIGHT = "right";
	TextFormatAlign.START = "start";

	//class pre initializer
	TextFormatAlign.$$sinit = (function ()
	{
		TextFormatAlign.$$sinit = undefined;

		//set prototype and constructor
		TextFormatAlign.prototype = Object.create(Object.prototype);
		Object.defineProperty(TextFormatAlign.prototype, "constructor", { value: TextFormatAlign, enumerable: false });

		//hold private values
		Object.defineProperty(TextFormatAlign.prototype, '$$v', {value:{}});
	});

	//class initializer
	TextFormatAlign.$$cinit = (function ()
	{
		TextFormatAlign.$$cinit = undefined;
	});

	function TextFormatAlign()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof TextFormatAlign) || $$this.$$TextFormatAlign !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], TextFormatAlign) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			TextFormatAlign.$$construct($$this, $$args);
		}
	}

	//construct
	TextFormatAlign.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (TextFormatAlign.$$cinit !== undefined) TextFormatAlign.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$TextFormatAlign', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		TextFormatAlign.$$iinit($$this);

		//call constructor
		if (args !== undefined) TextFormatAlign.$$constructor.apply($$this, args);
	});

	//initializer
	TextFormatAlign.$$iinit = (function ($$this)
	{
	});

	//constructor
	TextFormatAlign.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(TextFormatAlign, null, 'flash.text::TextFormatAlign');
})();
//flash.text.TextFormatAlign


//flash.net.NetGroupReplicationStrategy
$es4.$$package('flash.net').NetGroupReplicationStrategy = function () { throw new Error('Use of unimplemented class: NetGroupReplicationStrategy'); }
//flash.net.NetGroupReplicationStrategy


//flash.geom.ColorTransform
$es4.$$package('flash.geom').ColorTransform = (function ()
{
	//imports
	var ColorTransform;

	//class pre initializer
	ColorTransform.$$sinit = (function ()
	{
		ColorTransform.$$sinit = undefined;

		//initialize imports
		//set prototype and constructor
		ColorTransform.prototype = Object.create(Object.prototype);
		Object.defineProperty(ColorTransform.prototype, "constructor", { value: ColorTransform, enumerable: false });

		//hold private values
		Object.defineProperty(ColorTransform.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(ColorTransform.prototype, 'concat', {
		get:function ()
		{
			var $$this = this;

			function concat($$$$second)
			{
				//set default parameter values
				var second = $es4.$$coerce($$$$second, $es4.$$['flash.geom'].ColorTransform);

				$$this.redMultiplier *= second.redMultiplier;
				$$this.greenMultiplier *= second.greenMultiplier;
				$$this.blueMultiplier *= second.blueMultiplier;
				$$this.alphaMultiplier *= second.alphaMultiplier;
				$$this.redOffset += second.redOffset;
				$$this.greenOffset += second.greenOffset;
				$$this.blueOffset += second.blueOffset;
				$$this.alphaOffset += second.alphaOffset;
			}

			return $$this.$$ColorTransform.$$concat || ($$this.$$ColorTransform.$$concat = concat);
		}});


		//public instance method
		Object.defineProperty(ColorTransform.prototype, 'toString', {
		get:function ()
		{
			var $$this = this;

			function toString()
			{
				return "[ColorTransform(" + [$$this.redMultiplier, $$this.greenMultiplier, $$this.blueMultiplier, $$this.alphaMultiplier, $$this.redOffset, $$this.greenOffset, $$this.blueOffset, $$this.alphaOffset].join(", ") + ")]";
			}

			return $$this.$$ColorTransform.$$toString || ($$this.$$ColorTransform.$$toString = toString);
		}});

		Object.defineProperty(ColorTransform.prototype, 'color', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.redOffset << 16 | $$this.greenOffset << 8 | $$this.blueOffset, uint);
		}, set:function ($$$$newColor)
		{
			//set default parameter values
			var newColor = $es4.$$coerce($$$$newColor, uint);

			var $$this = this;
			$$this.redOffset = newColor >> 16 & 0xFF;
			$$this.greenOffset = newColor >> 8 & 0xFF;
			$$this.blueOffset = newColor & 0xFF;
			$$this.redMultiplier = $$this.greenMultiplier = $$this.blueMultiplier = 1;
		}});

		//properties
		Object.defineProperty(ColorTransform.prototype, 'alphaMultiplier', {
		get:function () { var $$this = this; return $$this.$$ColorTransform.alphaMultiplier; },
		set:function (value) { var $$this = this; $$this.$$ColorTransform.alphaMultiplier = $es4.$$coerce(value, Number); }
		});

		Object.defineProperty(ColorTransform.prototype, 'alphaOffset', {
		get:function () { var $$this = this; return $$this.$$ColorTransform.alphaOffset; },
		set:function (value) { var $$this = this; $$this.$$ColorTransform.alphaOffset = $es4.$$coerce(value, Number); }
		});

		Object.defineProperty(ColorTransform.prototype, 'blueMultiplier', {
		get:function () { var $$this = this; return $$this.$$ColorTransform.blueMultiplier; },
		set:function (value) { var $$this = this; $$this.$$ColorTransform.blueMultiplier = $es4.$$coerce(value, Number); }
		});

		Object.defineProperty(ColorTransform.prototype, 'blueOffset', {
		get:function () { var $$this = this; return $$this.$$ColorTransform.blueOffset; },
		set:function (value) { var $$this = this; $$this.$$ColorTransform.blueOffset = $es4.$$coerce(value, Number); }
		});

		Object.defineProperty(ColorTransform.prototype, 'greenMultiplier', {
		get:function () { var $$this = this; return $$this.$$ColorTransform.greenMultiplier; },
		set:function (value) { var $$this = this; $$this.$$ColorTransform.greenMultiplier = $es4.$$coerce(value, Number); }
		});

		Object.defineProperty(ColorTransform.prototype, 'greenOffset', {
		get:function () { var $$this = this; return $$this.$$ColorTransform.greenOffset; },
		set:function (value) { var $$this = this; $$this.$$ColorTransform.greenOffset = $es4.$$coerce(value, Number); }
		});

		Object.defineProperty(ColorTransform.prototype, 'redMultiplier', {
		get:function () { var $$this = this; return $$this.$$ColorTransform.redMultiplier; },
		set:function (value) { var $$this = this; $$this.$$ColorTransform.redMultiplier = $es4.$$coerce(value, Number); }
		});

		Object.defineProperty(ColorTransform.prototype, 'redOffset', {
		get:function () { var $$this = this; return $$this.$$ColorTransform.redOffset; },
		set:function (value) { var $$this = this; $$this.$$ColorTransform.redOffset = $es4.$$coerce(value, Number); }
		});

	});

	//class initializer
	ColorTransform.$$cinit = (function ()
	{
		ColorTransform.$$cinit = undefined;
	});

	function ColorTransform()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof ColorTransform) || $$this.$$ColorTransform !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], ColorTransform) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			ColorTransform.$$construct($$this, $$args);
		}
	}

	//construct
	ColorTransform.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (ColorTransform.$$cinit !== undefined) ColorTransform.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$ColorTransform', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		ColorTransform.$$iinit($$this);

		//call constructor
		if (args !== undefined) ColorTransform.$$constructor.apply($$this, args);
	});

	//initializer
	ColorTransform.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$ColorTransform.alphaMultiplier = $es4.$$coerce(undefined, Number);
		$$this.$$ColorTransform.alphaOffset = $es4.$$coerce(undefined, Number);
		$$this.$$ColorTransform.blueMultiplier = $es4.$$coerce(undefined, Number);
		$$this.$$ColorTransform.blueOffset = $es4.$$coerce(undefined, Number);
		$$this.$$ColorTransform.greenMultiplier = $es4.$$coerce(undefined, Number);
		$$this.$$ColorTransform.greenOffset = $es4.$$coerce(undefined, Number);
		$$this.$$ColorTransform.redMultiplier = $es4.$$coerce(undefined, Number);
		$$this.$$ColorTransform.redOffset = $es4.$$coerce(undefined, Number);
	
	});

	//constructor
	ColorTransform.$$constructor = (function ($$$$redMultiplier, $$$$greenMultiplier, $$$$blueMultiplier, $$$$alphaMultiplier, $$$$redOffset, $$$$greenOffset, $$$$blueOffset, $$$$alphaOffset)
	{
		var $$this = this;
		//set default parameter values
		var redMultiplier = (0 > arguments.length - 1) ? 1 : $es4.$$coerce($$$$redMultiplier, Number);
		var greenMultiplier = (1 > arguments.length - 1) ? 1 : $es4.$$coerce($$$$greenMultiplier, Number);
		var blueMultiplier = (2 > arguments.length - 1) ? 1 : $es4.$$coerce($$$$blueMultiplier, Number);
		var alphaMultiplier = (3 > arguments.length - 1) ? 1 : $es4.$$coerce($$$$alphaMultiplier, Number);
		var redOffset = (4 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$redOffset, Number);
		var greenOffset = (5 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$greenOffset, Number);
		var blueOffset = (6 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$blueOffset, Number);
		var alphaOffset = (7 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$alphaOffset, Number);

		$$this.redMultiplier = redMultiplier;
		$$this.greenMultiplier = greenMultiplier;
		$$this.blueMultiplier = blueMultiplier;
		$$this.alphaMultiplier = alphaMultiplier;
		$$this.redOffset = redOffset;
		$$this.greenOffset = greenOffset;
		$$this.blueOffset = blueOffset;
		$$this.alphaOffset = alphaOffset;
	});

	return $es4.$$class(ColorTransform, null, 'flash.geom::ColorTransform');
})();
//flash.geom.ColorTransform


//flash.errors.InvalidSWFError
$es4.$$package('flash.errors').InvalidSWFError = function () { throw new Error('Use of unimplemented class: InvalidSWFError'); }
//flash.errors.InvalidSWFError


//flash.globalization.Collator
$es4.$$package('flash.globalization').Collator = function () { throw new Error('Use of unimplemented class: Collator'); }
//flash.globalization.Collator


//flash.net.NetGroupSendResult
$es4.$$package('flash.net').NetGroupSendResult = function () { throw new Error('Use of unimplemented class: NetGroupSendResult'); }
//flash.net.NetGroupSendResult


//flash.security.X509Certificate
$es4.$$package('flash.security').X509Certificate = function () { throw new Error('Use of unimplemented class: X509Certificate'); }
//flash.security.X509Certificate


//flash.sampler.Sample
$es4.$$package('flash.sampler').Sample = function () { throw new Error('Use of unimplemented class: Sample'); }
//flash.sampler.Sample


//flash.accessibility.Accessibility
$es4.$$package('flash.accessibility').Accessibility = (function ()
{
	//imports
	var DisplayObject;

	//class pre initializer
	Accessibility.$$sinit = (function ()
	{
		Accessibility.$$sinit = undefined;

		//initialize imports
		DisplayObject = $es4.$$['flash.display'].DisplayObject;

		//set prototype and constructor
		Accessibility.prototype = Object.create(Object.prototype);
		Object.defineProperty(Accessibility.prototype, "constructor", { value: Accessibility, enumerable: false });

		//hold private values
		Object.defineProperty(Accessibility.prototype, '$$v', {value:{}});
	});

	//class initializer
	Accessibility.$$cinit = (function ()
	{
		Accessibility.$$cinit = undefined;
	});

	//public static method
	Accessibility.sendEvent = (function ($$$$source, $$$$childID, $$$$eventType, $$$$nonHTML)
	{
		if (Accessibility.$$cinit !== undefined) Accessibility.$$cinit();

		//set default parameter values
		var source = $es4.$$coerce($$$$source, DisplayObject);
		var childID = $es4.$$coerce($$$$childID, uint);
		var eventType = $es4.$$coerce($$$$eventType, uint);
		var nonHTML = (3 > arguments.length - 1) ? false : $es4.$$coerce($$$$nonHTML, Boolean);

		throw $es4.$$primitive(new Error('Accessibility: attempted call to an unimplemented function "sendEvent"'));
	});

	//public static method
	Accessibility.updateProperties = (function ()
	{
		if (Accessibility.$$cinit !== undefined) Accessibility.$$cinit();

	});
	Object.defineProperty(Accessibility, 'active', {get:function ()
	{
		if (Accessibility.$$cinit !== undefined) Accessibility.$$cinit();

		return false;
	}});

	function Accessibility()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof Accessibility) || $$this.$$Accessibility !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Accessibility) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			Accessibility.$$construct($$this, $$args);
		}
	}

	//construct
	Accessibility.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (Accessibility.$$cinit !== undefined) Accessibility.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$Accessibility', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		Accessibility.$$iinit($$this);

		//call constructor
		if (args !== undefined) Accessibility.$$constructor.apply($$this, args);
	});

	//initializer
	Accessibility.$$iinit = (function ($$this)
	{
	});

	//constructor
	Accessibility.$$constructor = (function ()
	{
		var $$this = this;
		throw $es4.$$primitive(new Error('Accessibility: attempted call to an unimplemented constructor'));
	});

	return $es4.$$class(Accessibility, null, 'flash.accessibility::Accessibility');
})();
//flash.accessibility.Accessibility


//flash.filters.GradientGlowFilter
$es4.$$package('flash.filters').GradientGlowFilter = function () { throw new Error('Use of unimplemented class: GradientGlowFilter'); }
//flash.filters.GradientGlowFilter


//flash.display.StageDisplayState
$es4.$$package('flash.display').StageDisplayState = (function ()
{
	//properties
	var $$j = {};
	StageDisplayState.FULL_SCREEN = "fullScreen";
	StageDisplayState.FULL_SCREEN_INTERACTIVE = "fullScreenInteractive";
	StageDisplayState.NORMAL = "normal";

	//class pre initializer
	StageDisplayState.$$sinit = (function ()
	{
		StageDisplayState.$$sinit = undefined;

		//set prototype and constructor
		StageDisplayState.prototype = Object.create(Object.prototype);
		Object.defineProperty(StageDisplayState.prototype, "constructor", { value: StageDisplayState, enumerable: false });

		//hold private values
		Object.defineProperty(StageDisplayState.prototype, '$$v', {value:{}});
	});

	//class initializer
	StageDisplayState.$$cinit = (function ()
	{
		StageDisplayState.$$cinit = undefined;
	});

	function StageDisplayState()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof StageDisplayState) || $$this.$$StageDisplayState !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], StageDisplayState) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			StageDisplayState.$$construct($$this, $$args);
		}
	}

	//construct
	StageDisplayState.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (StageDisplayState.$$cinit !== undefined) StageDisplayState.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$StageDisplayState', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		StageDisplayState.$$iinit($$this);

		//call constructor
		if (args !== undefined) StageDisplayState.$$constructor.apply($$this, args);
	});

	//initializer
	StageDisplayState.$$iinit = (function ($$this)
	{
	});

	//constructor
	StageDisplayState.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(StageDisplayState, null, 'flash.display::StageDisplayState');
})();
//flash.display.StageDisplayState


//flash.sensors.Accelerometer
$es4.$$package('flash.sensors').Accelerometer = function () { throw new Error('Use of unimplemented class: Accelerometer'); }
//flash.sensors.Accelerometer


//flash.display.Sprite
$es4.$$package('flash.display').Sprite = (function ()
{
	//imports
	var DisplayObject;
	var Graphics;
	var MouseEvent;
	var Point;
	var Rectangle;
	var SoundTransform;
	var Sprite;
	var DisplayObjectContainer;

	//properties
	var $$j = {};
	Object.defineProperty(Sprite, '$_dragging', {
	get:function () { if (Sprite.$$cinit !== undefined) Sprite.$$cinit(); return $$j.$_dragging; },
	set:function (value) { if (Sprite.$$cinit !== undefined) Sprite.$$cinit(); $$j.$_dragging = $es4.$$coerce(value, Sprite); }
	});

	Object.defineProperty(Sprite, '$_lockCenter', {
	get:function () { if (Sprite.$$cinit !== undefined) Sprite.$$cinit(); return $$j.$_lockCenter; },
	set:function (value) { if (Sprite.$$cinit !== undefined) Sprite.$$cinit(); $$j.$_lockCenter = $es4.$$coerce(value, Boolean); }
	});

	Object.defineProperty(Sprite, '$_bounds', {
	get:function () { if (Sprite.$$cinit !== undefined) Sprite.$$cinit(); return $$j.$_bounds; },
	set:function (value) { if (Sprite.$$cinit !== undefined) Sprite.$$cinit(); $$j.$_bounds = $es4.$$coerce(value, Rectangle); }
	});

	Object.defineProperty(Sprite, '$_dragPoint', {
	get:function () { if (Sprite.$$cinit !== undefined) Sprite.$$cinit(); return $$j.$_dragPoint; },
	set:function (value) { if (Sprite.$$cinit !== undefined) Sprite.$$cinit(); $$j.$_dragPoint = $es4.$$coerce(value, Point); }
	});


	//class pre initializer
	Sprite.$$sinit = (function ()
	{
		Sprite.$$sinit = undefined;

		//initialize imports
		DisplayObject = $es4.$$['flash.display'].DisplayObject;
		Graphics = $es4.$$['flash.display'].Graphics;
		MouseEvent = $es4.$$['flash.events'].MouseEvent;
		Point = $es4.$$['flash.geom'].Point;
		Rectangle = $es4.$$['flash.geom'].Rectangle;
		SoundTransform = $es4.$$['flash.media'].SoundTransform;
		DisplayObjectContainer = $es4.$$['flash.display'].DisplayObjectContainer;

		//ensure $$sinit is called on super class
		if (DisplayObjectContainer.$$sinit !== undefined) DisplayObjectContainer.$$sinit();

		//set prototype and constructor
		Sprite.prototype = Object.create(DisplayObjectContainer.prototype);
		Object.defineProperty(Sprite.prototype, "constructor", { value: Sprite, enumerable: false });

		//hold private values
		Object.defineProperty(Sprite.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(Sprite.prototype, '$__properties', {
		get:function ()
		{
			var $$this = this;

			function $__properties($$$$object)
			{
				//set default parameter values
				var object = (0 > arguments.length - 1) ? null : $$$$object;

				if ($$this.$$Sprite.$_properties === undefined)
				{
					object = $es4.$$super2($$this, DisplayObjectContainer, '$$DisplayObjectContainer', '$__properties', 'func', undefined)(object);
					object.SpriteScope = {$_useHandCursor:true, $_buttonMode:false};
					object.TLScope = $$this;
					return $$this.$$Sprite.$_properties = object;
				}
				return $$this.$$Sprite.$_properties;
			}

			return $$this.$$Sprite.$$$__properties || ($$this.$$Sprite.$$$__properties = $__properties);
		}});


		//public instance method
		Object.defineProperty(Sprite.prototype, 'startDrag', {
		get:function ()
		{
			var $$this = this;

			function startDrag($$$$lockCenter, $$$$bounds)
			{
				//set default parameter values
				var lockCenter = (0 > arguments.length - 1) ? false : $es4.$$coerce($$$$lockCenter, Boolean);
				var bounds = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$bounds, Rectangle);

				if (Sprite.$_dragging)
				{
					$$this.stopDrag();
				}
				Sprite.$_dragging = $$this;
				Sprite.$_lockCenter = lockCenter;
				Sprite.$_bounds = bounds;
				Sprite.$_dragPoint = $es4.$$primitive(new Point($$this.mouseX, $$this.mouseY));
				$$this.stage.addEventListener(MouseEvent.MOUSE_MOVE, Sprite.$_onMouseMove);
			}

			return $$this.$$Sprite.$$startDrag || ($$this.$$Sprite.$$startDrag = startDrag);
		}});


		//public instance method
		Object.defineProperty(Sprite.prototype, 'startTouchDrag', {
		get:function ()
		{
			var $$this = this;

			function startTouchDrag($$$$touchPointID, $$$$lockCenter, $$$$bounds)
			{
				//set default parameter values
				var touchPointID = $es4.$$coerce($$$$touchPointID, int);
				var lockCenter = (1 > arguments.length - 1) ? false : $es4.$$coerce($$$$lockCenter, Boolean);
				var bounds = (2 > arguments.length - 1) ? null : $es4.$$coerce($$$$bounds, Rectangle);

				throw $es4.$$primitive(new Error('Sprite: attempted call to an unimplemented function "startTouchDrag"'));
			}

			return $$this.$$Sprite.$$startTouchDrag || ($$this.$$Sprite.$$startTouchDrag = startTouchDrag);
		}});


		//public instance method
		Object.defineProperty(Sprite.prototype, 'stopDrag', {
		get:function ()
		{
			var $$this = this;

			function stopDrag()
			{
				if (!Sprite.$_dragging)
				{
					return;
				}
				$$this.stage.removeEventListener(MouseEvent.MOUSE_MOVE, Sprite.$_onMouseMove);
				Sprite.$_dragging = null;
				Sprite.$_bounds = null;
				Sprite.$_dragPoint = null;
			}

			return $$this.$$Sprite.$$stopDrag || ($$this.$$Sprite.$$stopDrag = stopDrag);
		}});


		//public instance method
		Object.defineProperty(Sprite.prototype, 'stopTouchDrag', {
		get:function ()
		{
			var $$this = this;

			function stopTouchDrag($$$$touchPointID)
			{
				//set default parameter values
				var touchPointID = $es4.$$coerce($$$$touchPointID, int);

				throw $es4.$$primitive(new Error('Sprite: attempted call to an unimplemented function "stopTouchDrag"'));
			}

			return $$this.$$Sprite.$$stopTouchDrag || ($$this.$$Sprite.$$stopTouchDrag = stopTouchDrag);
		}});

		Object.defineProperty(Sprite.prototype, 'graphics', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce(($$this.$$Sprite.$_properties.SpriteScope.$_graphics) ? $$this.$$Sprite.$_properties.SpriteScope.$_graphics : $$this.$$Sprite.$_properties.SpriteScope.$_graphics = $es4.$$primitive(new Graphics($$this)), Graphics);
		}});
		Object.defineProperty(Sprite.prototype, 'buttonMode', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$Sprite.$_properties.SpriteScope.$_buttonMode, Boolean);
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var $$this = this;
			$$this.$$Sprite.$_properties.SpriteScope.$_buttonMode = value;
			if ($$this.$$Sprite.$_properties.SpriteScope.$_buttonMode && $$this.$$Sprite.$_properties.SpriteScope.$_useHandCursor)
			{
				$$this.$$Sprite.$_properties.DisplayObjectScope.$_domView.style.cursor = 'pointer';
			}
			else
			{
				$$this.$$Sprite.$_properties.DisplayObjectScope.$_domView.style.cursor = 'auto';
			}
			var enabled = $es4.$$coerce($$this.$$Sprite.$_properties.InteractiveObjectScope.$_tabEnabled, Boolean);
			if (enabled || $$this.$$Sprite.$_properties.SpriteScope.$_buttonMode)
			{
				$$this.$$Sprite.$_properties.DisplayObjectScope.$_domView.setAttribute('tabindex', $$this.$$Sprite.$_properties.InteractiveObjectScope.$_tabIndex);
			}
			else
			{
				$$this.$$Sprite.$_properties.DisplayObjectScope.$_domView.setAttribute('tabindex', -1);
			}
			if ($$this.$$Sprite.$_properties.DisplayObjectScope.$_domView.getAttribute('role') != 'presentation')
			{
				$$this.$$Sprite.$_properties.InteractiveObjectScope.$_role = $$this.$$Sprite.$_properties.DisplayObjectScope.$_domView.getAttribute('role');
			}
			if ((!enabled && !$$this.$$Sprite.$_properties.SpriteScope.$_buttonMode) || $$this.$$Sprite.$_properties.InteractiveObjectScope.$_tabIndex == -1)
			{
				$$this.$$Sprite.$_properties.DisplayObjectScope.$_domView.setAttribute('role', 'presentation');
			}
			else
			{
				$$this.$$Sprite.$_properties.DisplayObjectScope.$_domView.setAttribute('role', $$this.$$Sprite.$_properties.InteractiveObjectScope.$_role);
			}
		}});
		Object.defineProperty(Sprite.prototype, 'tabEnabled', {get:function ()
		{
			var $$this = this; return $es4.$$super2($$this, DisplayObjectContainer, '$$Sprite', 'tabEnabled', 'get');
		}, set:function ($$$$enabled)
		{
			//set default parameter values
			var enabled = $es4.$$coerce($$$$enabled, Boolean);

			var $$this = this;
			$$this.$$Sprite.$_properties.InteractiveObjectScope.$_tabEnabled = enabled;
			if (enabled || $$this.$$Sprite.$_properties.SpriteScope.$_buttonMode)
			{
				$$this.$$Sprite.$_properties.DisplayObjectScope.$_domView.setAttribute('tabindex', $$this.$$Sprite.$_properties.InteractiveObjectScope.$_tabIndex);
			}
			else
			{
				$$this.$$Sprite.$_properties.DisplayObjectScope.$_domView.setAttribute('tabindex', -1);
			}
			if ($$this.$$Sprite.$_properties.DisplayObjectScope.$_domView.getAttribute('role') != 'presentation')
			{
				$$this.$$Sprite.$_properties.InteractiveObjectScope.$_role = $$this.$$Sprite.$_properties.DisplayObjectScope.$_domView.getAttribute('role');
			}
			if ((!enabled && !$$this.$$Sprite.$_properties.SpriteScope.$_buttonMode) || $$this.$$Sprite.$_properties.InteractiveObjectScope.$_tabIndex == -1)
			{
				$$this.$$Sprite.$_properties.DisplayObjectScope.$_domView.setAttribute('role', 'presentation');
			}
			else
			{
				$$this.$$Sprite.$_properties.DisplayObjectScope.$_domView.setAttribute('role', $$this.$$Sprite.$_properties.InteractiveObjectScope.$_role);
			}
		}});
		Object.defineProperty(Sprite.prototype, 'mouseEnabled', {get:function ()
		{
			var $$this = this; return $es4.$$super2($$this, DisplayObjectContainer, '$$Sprite', 'mouseEnabled', 'get');
		}, set:function ($$$$enabled)
		{
			//set default parameter values
			var enabled = $es4.$$coerce($$$$enabled, Boolean);

			var $$this = this;
			if ($$this.$$Sprite.$_properties.DisplayObjectScope.$_domGraphicsView)
			{
				var childNodes = $$this.$$Sprite.$_properties.DisplayObjectScope.$_domGraphicsView.childNodes;
				for (var i = $es4.$$coerce(childNodes.length, int); i--;)
				{
					childNodes[i].style.pointerEvents = (enabled) ? 'visible' : 'none';
				}
			}
			$es4.$$super2($$this, DisplayObjectContainer, '$$DisplayObjectContainer', 'mouseEnabled', 'set', enabled);
		}});
		Object.defineProperty(Sprite.prototype, 'dropTarget', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('Sprite: attempted call to an unimplemented function "dropTarget"'));
		}});
		Object.defineProperty(Sprite.prototype, 'hitArea', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('Sprite: attempted call to an unimplemented function "hitArea"'));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, $es4.$$['flash.display'].Sprite);

			var $$this = this;
			throw $es4.$$primitive(new Error('Sprite: attempted call to an unimplemented function "hitArea"'));
		}});
		Object.defineProperty(Sprite.prototype, 'soundTransform', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('Sprite: attempted call to an unimplemented function "soundTransform"'));
		}, set:function ($$$$sndTransform)
		{
			//set default parameter values
			var sndTransform = $es4.$$coerce($$$$sndTransform, SoundTransform);

			var $$this = this;
			throw $es4.$$primitive(new Error('Sprite: attempted call to an unimplemented function "soundTransform"'));
		}});
		Object.defineProperty(Sprite.prototype, 'useHandCursor', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$Sprite.$_properties.SpriteScope.$_useHandCursor, Boolean);
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var $$this = this;
			$$this.$$Sprite.$_properties.SpriteScope.$_useHandCursor = value;
			if ($$this.$$Sprite.$_properties.SpriteScope.$_buttonMode && $$this.$$Sprite.$_properties.SpriteScope.$_useHandCursor)
			{
				$$this.$$Sprite.$_properties.DisplayObjectScope.$_domView.style.cursor = 'pointer';
			}
			else
			{
				$$this.$$Sprite.$_properties.DisplayObjectScope.$_domView.style.cursor = 'auto';
			}
		}});

		//properties
		Sprite.prototype.$$v.$_properties = {
		get:function () { var $$this = this.$$this; return $$this.$$Sprite.$$p.$_properties; },
		set:function (value) { var $$this = this.$$this; $$this.$$Sprite.$$p.$_properties = value }
		};

	});

	//class initializer
	Sprite.$$cinit = (function ()
	{
		Sprite.$$cinit = undefined;

		//initialize properties
		$$j.$_dragging = $es4.$$coerce(undefined, $es4.$$['flash.display'].Sprite);
		$$j.$_lockCenter = $es4.$$coerce(undefined, Boolean);
		$$j.$_bounds = $es4.$$coerce(undefined, Rectangle);
		$$j.$_dragPoint = $es4.$$coerce(undefined, Point);
	
	});

	//private static method
	Sprite.$_onMouseMove = (function ($$$$mouseEvent)
	{
		if (Sprite.$$cinit !== undefined) Sprite.$$cinit();

		//set default parameter values
		var mouseEvent = $$$$mouseEvent;

		var sprite = Sprite.$_dragging;
		var x = NaN;
		var y = NaN;
		if (Sprite.$_lockCenter)
		{
			x = $es4.$$coerce(sprite.$__properties().TLScope.parent.$__properties().TLScope.mouseX, Number);
			y = $es4.$$coerce(sprite.$__properties().TLScope.parent.$__properties().TLScope.mouseY, Number);
		}
		else
		{
			x = $es4.$$coerce(sprite.$__properties().TLScope.parent.$__properties().TLScope.mouseX - Sprite.$_dragPoint.x, Number);
			y = $es4.$$coerce(sprite.$__properties().TLScope.parent.$__properties().TLScope.mouseY - Sprite.$_dragPoint.y, Number);
		}
		if (Sprite.$_bounds)
		{
			var bounds = Sprite.$_bounds;
			x = Math.max(Math.min(x, bounds.width + bounds.x), bounds.x);
			y = Math.max(Math.min(y, bounds.height + bounds.y), bounds.y);
		}
		sprite.$__properties().TLScope.x = x;
		sprite.$__properties().TLScope.y = y;
	});
	function Sprite()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof Sprite) || $$this.$$Sprite !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Sprite) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			Sprite.$$construct($$this, $$args);
		}
	}

	//construct
	Sprite.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (Sprite.$$cinit !== undefined) Sprite.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$Sprite', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$Sprite, '$_properties', Sprite.prototype.$$v.$_properties);

		//call construct on super
		DisplayObjectContainer.$$construct($$this);

		//initialize properties
		Sprite.$$iinit($$this);

		//call constructor
		if (args !== undefined) Sprite.$$constructor.apply($$this, args);
	});

	//initializer
	Sprite.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$Sprite.$$p.$_properties = undefined;
	
		//call iinit on super
		DisplayObjectContainer.$$iinit($$this);
	});

	//constructor
	Sprite.$$constructor = (function ()
	{
		var $$this = this;
		if ($$this.$$Sprite.$_properties === undefined)
		{
			$$this.$__properties({});
		}
		DisplayObjectContainer.$$constructor.call($$this);
	});

	return $es4.$$class(Sprite, {EXTENDS:'flash.display.DisplayObjectContainer'}, 'flash.display::Sprite');
})();
//flash.display.Sprite


//flash.events.SampleDataEvent
$es4.$$package('flash.events').SampleDataEvent = (function ()
{
	//imports
	var Event;
	var ByteArray;

	//properties
	var $$j = {};
	SampleDataEvent.SAMPLE_DATA = "sampleData";

	//class pre initializer
	SampleDataEvent.$$sinit = (function ()
	{
		SampleDataEvent.$$sinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;
		ByteArray = $es4.$$['flash.utils'].ByteArray;

		//ensure $$sinit is called on super class
		if (Event.$$sinit !== undefined) Event.$$sinit();

		//set prototype and constructor
		SampleDataEvent.prototype = Object.create(Event.prototype);
		Object.defineProperty(SampleDataEvent.prototype, "constructor", { value: SampleDataEvent, enumerable: false });

		//hold private values
		Object.defineProperty(SampleDataEvent.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(SampleDataEvent.prototype, 'clone', {
		get:function ()
		{
			var $$this = this;

			function clone()
			{
				throw $es4.$$primitive(new Error('SampleDataEvent: attempted call to an unimplemented function "clone"'));
			}

			return $$this.$$SampleDataEvent.$$clone || ($$this.$$SampleDataEvent.$$clone = clone);
		}});


		//public instance method
		Object.defineProperty(SampleDataEvent.prototype, 'toString', {
		get:function ()
		{
			var $$this = this;

			function toString()
			{
				throw $es4.$$primitive(new Error('SampleDataEvent: attempted call to an unimplemented function "toString"'));
			}

			return $$this.$$SampleDataEvent.$$toString || ($$this.$$SampleDataEvent.$$toString = toString);
		}});

		Object.defineProperty(SampleDataEvent.prototype, 'data', {get:function ()
		{
			var $$this = this;
			return $$this.$$SampleDataEvent._data;
		}, set:function ($$$$thedata)
		{
			//set default parameter values
			var thedata = $es4.$$coerce($$$$thedata, ByteArray);

			var $$this = this;
			throw $es4.$$primitive(new Error('SampleDataEvent: attempted call to an unimplemented function "data"'));
		}});
		Object.defineProperty(SampleDataEvent.prototype, 'position', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('SampleDataEvent: attempted call to an unimplemented function "position"'));
		}, set:function ($$$$theposition)
		{
			//set default parameter values
			var theposition = $es4.$$coerce($$$$theposition, Number);

			var $$this = this;
			throw $es4.$$primitive(new Error('SampleDataEvent: attempted call to an unimplemented function "position"'));
		}});

		//properties
		SampleDataEvent.prototype.$$v._data = {
		get:function () { var $$this = this.$$this; return $$this.$$SampleDataEvent.$$p._data; },
		set:function (value) { var $$this = this.$$this; $$this.$$SampleDataEvent.$$p._data = $es4.$$coerce(value, ByteArray); }
		};

	});

	//class initializer
	SampleDataEvent.$$cinit = (function ()
	{
		SampleDataEvent.$$cinit = undefined;
	});

	function SampleDataEvent()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof SampleDataEvent) || $$this.$$SampleDataEvent !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], SampleDataEvent) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			SampleDataEvent.$$construct($$this, $$args);
		}
	}

	//construct
	SampleDataEvent.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (SampleDataEvent.$$cinit !== undefined) SampleDataEvent.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$SampleDataEvent', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$SampleDataEvent, '_data', SampleDataEvent.prototype.$$v._data);

		//call construct on super
		Event.$$construct($$this);

		//initialize properties
		SampleDataEvent.$$iinit($$this);

		//call constructor
		if (args !== undefined) SampleDataEvent.$$constructor.apply($$this, args);
	});

	//initializer
	SampleDataEvent.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$SampleDataEvent.$$p._data = $es4.$$coerce(undefined, ByteArray);
	
		//call iinit on super
		Event.$$iinit($$this);
	});

	//constructor
	SampleDataEvent.$$constructor = (function ($$$$type, $$$$bubbles, $$$$cancelable, $$$$theposition, $$$$thedata)
	{
		var $$this = this;
		//set default parameter values
		var type = $es4.$$coerce($$$$type, String);
		var bubbles = (1 > arguments.length - 1) ? false : $es4.$$coerce($$$$bubbles, Boolean);
		var cancelable = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$cancelable, Boolean);
		var theposition = (3 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$theposition, Number);
		var thedata = (4 > arguments.length - 1) ? null : $es4.$$coerce($$$$thedata, ByteArray);

		Event.$$constructor.call($$this, type, bubbles, cancelable);
		$$this.$$SampleDataEvent._data = thedata;
	});

	return $es4.$$class(SampleDataEvent, {EXTENDS:'flash.events.Event'}, 'flash.events::SampleDataEvent');
})();
//flash.events.SampleDataEvent


//flash.text.engine.DigitCase
$es4.$$package('flash.text.engine').DigitCase = function () { throw new Error('Use of unimplemented class: DigitCase'); }
//flash.text.engine.DigitCase


//flash.display.TriangleCulling
$es4.$$package('flash.display').TriangleCulling = function () { throw new Error('Use of unimplemented class: TriangleCulling'); }
//flash.display.TriangleCulling


//flash.globalization.CollatorMode
$es4.$$package('flash.globalization').CollatorMode = function () { throw new Error('Use of unimplemented class: CollatorMode'); }
//flash.globalization.CollatorMode


//flash.display.BlendMode
$es4.$$package('flash.display').BlendMode = function () { throw new Error('Use of unimplemented class: BlendMode'); }
//flash.display.BlendMode


//flash.globalization.CurrencyFormatter
$es4.$$package('flash.globalization').CurrencyFormatter = function () { throw new Error('Use of unimplemented class: CurrencyFormatter'); }
//flash.globalization.CurrencyFormatter


//flash.net.SharedObjectFlushStatus
$es4.$$package('flash.net').SharedObjectFlushStatus = (function ()
{
	//properties
	var $$j = {};
	SharedObjectFlushStatus.FLUSHED = "flushed";
	SharedObjectFlushStatus.PENDING = "pending";

	//class pre initializer
	SharedObjectFlushStatus.$$sinit = (function ()
	{
		SharedObjectFlushStatus.$$sinit = undefined;

		//set prototype and constructor
		SharedObjectFlushStatus.prototype = Object.create(Object.prototype);
		Object.defineProperty(SharedObjectFlushStatus.prototype, "constructor", { value: SharedObjectFlushStatus, enumerable: false });

		//hold private values
		Object.defineProperty(SharedObjectFlushStatus.prototype, '$$v', {value:{}});
	});

	//class initializer
	SharedObjectFlushStatus.$$cinit = (function ()
	{
		SharedObjectFlushStatus.$$cinit = undefined;
	});

	function SharedObjectFlushStatus()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof SharedObjectFlushStatus) || $$this.$$SharedObjectFlushStatus !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], SharedObjectFlushStatus) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			SharedObjectFlushStatus.$$construct($$this, $$args);
		}
	}

	//construct
	SharedObjectFlushStatus.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (SharedObjectFlushStatus.$$cinit !== undefined) SharedObjectFlushStatus.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$SharedObjectFlushStatus', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		SharedObjectFlushStatus.$$iinit($$this);

		//call constructor
		if (args !== undefined) SharedObjectFlushStatus.$$constructor.apply($$this, args);
	});

	//initializer
	SharedObjectFlushStatus.$$iinit = (function ($$this)
	{
	});

	//constructor
	SharedObjectFlushStatus.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(SharedObjectFlushStatus, null, 'flash.net::SharedObjectFlushStatus');
})();
//flash.net.SharedObjectFlushStatus


//flash.events.DRMErrorEvent
$es4.$$package('flash.events').DRMErrorEvent = function () { throw new Error('Use of unimplemented class: DRMErrorEvent'); }
//flash.events.DRMErrorEvent


//flash.net.XMLSocket
$es4.$$package('flash.net').XMLSocket = (function ()
{
	//imports
	var DataEvent;
	var Event;
	var EventDispatcher;
	var IOErrorEvent;
	var ProgressEvent;
	var SecurityErrorEvent;
	var Socket;

	//class pre initializer
	XMLSocket.$$sinit = (function ()
	{
		XMLSocket.$$sinit = undefined;

		//initialize imports
		DataEvent = $es4.$$['flash.events'].DataEvent;
		Event = $es4.$$['flash.events'].Event;
		EventDispatcher = $es4.$$['flash.events'].EventDispatcher;
		IOErrorEvent = $es4.$$['flash.events'].IOErrorEvent;
		ProgressEvent = $es4.$$['flash.events'].ProgressEvent;
		SecurityErrorEvent = $es4.$$['flash.events'].SecurityErrorEvent;
		Socket = $es4.$$['flash.net'].Socket;

		//ensure $$sinit is called on super class
		if (EventDispatcher.$$sinit !== undefined) EventDispatcher.$$sinit();

		//set prototype and constructor
		XMLSocket.prototype = Object.create(EventDispatcher.prototype);
		Object.defineProperty(XMLSocket.prototype, "constructor", { value: XMLSocket, enumerable: false });

		//hold private values
		Object.defineProperty(XMLSocket.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(XMLSocket.prototype, 'close', {
		get:function ()
		{
			var $$this = this;

			function close()
			{
				var timeout = $es4.$$coerce($$this.$$XMLSocket._socket.timeout, int);
				$$this.$$XMLSocket._socket.removeEventListener(ProgressEvent.SOCKET_DATA, $$this.$$XMLSocket.onSocketDataEvent);
				$$this.$$XMLSocket._socket.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, $$this.$$XMLSocket.onSecurityErrorEvent);
				$$this.$$XMLSocket._socket.removeEventListener(IOErrorEvent.IO_ERROR, $$this.$$XMLSocket.onIOErrorEvent);
				$$this.$$XMLSocket._socket.removeEventListener(Event.CONNECT, $$this.$$XMLSocket.onConnectEvent);
				$$this.$$XMLSocket._socket.removeEventListener(Event.CLOSE, $$this.$$XMLSocket.onCloseEvent);
				$$this.$$XMLSocket._socket.close();
				$$this.$$XMLSocket._socket = $es4.$$primitive(new Socket());
				$$this.$$XMLSocket._socket.timeout = timeout;
			}

			return $$this.$$XMLSocket.$$close || ($$this.$$XMLSocket.$$close = close);
		}});


		//public instance method
		Object.defineProperty(XMLSocket.prototype, 'connect', {
		get:function ()
		{
			var $$this = this;

			function connect($$$$host, $$$$port)
			{
				//set default parameter values
				var host = $es4.$$coerce($$$$host, String);
				var port = $es4.$$coerce($$$$port, int);

				if ($$this.$$XMLSocket._socket.hasEventListener(Event.CONNECT))
				{
					throw $es4.$$primitive(new Error('socket connect already called'));
				}
				$$this.$$XMLSocket._socket.connect(host, port);
				$$this.$$XMLSocket._socket.addEventListener(ProgressEvent.SOCKET_DATA, $$this.$$XMLSocket.onSocketDataEvent);
				$$this.$$XMLSocket._socket.addEventListener(SecurityErrorEvent.SECURITY_ERROR, $$this.$$XMLSocket.onSecurityErrorEvent);
				$$this.$$XMLSocket._socket.addEventListener(IOErrorEvent.IO_ERROR, $$this.$$XMLSocket.onIOErrorEvent);
				$$this.$$XMLSocket._socket.addEventListener(Event.CONNECT, $$this.$$XMLSocket.onConnectEvent);
				$$this.$$XMLSocket._socket.addEventListener(Event.CLOSE, $$this.$$XMLSocket.onCloseEvent);
			}

			return $$this.$$XMLSocket.$$connect || ($$this.$$XMLSocket.$$connect = connect);
		}});


		//private instance method
		XMLSocket.prototype.$$v.onSocketDataEvent = {
		get:function ()
		{
			var $$this = this.$$this;

			function onSocketDataEvent($$$$event)
			{
				//set default parameter values
				var event = $es4.$$coerce($$$$event, ProgressEvent);

				var data = $$this.$$XMLSocket._socket.readUTFBytes($$this.$$XMLSocket._socket.bytesAvailable);
				$$this.$$XMLSocket._socket.readByte();
				$$this.dispatchEvent($es4.$$primitive(new DataEvent(DataEvent.DATA, false, false, data)));
			}

			return $$this.$$XMLSocket.$$p.$$onSocketDataEvent || ($$this.$$XMLSocket.$$p.$$onSocketDataEvent = onSocketDataEvent);
		}};


		//private instance method
		XMLSocket.prototype.$$v.onSecurityErrorEvent = {
		get:function ()
		{
			var $$this = this.$$this;

			function onSecurityErrorEvent($$$$event)
			{
				//set default parameter values
				var event = $es4.$$coerce($$$$event, SecurityErrorEvent);

				$$this.dispatchEvent($es4.$$primitive(new SecurityErrorEvent(SecurityErrorEvent.SECURITY_ERROR, false, false, "XMLSOCKET could not connect to server.")));
			}

			return $$this.$$XMLSocket.$$p.$$onSecurityErrorEvent || ($$this.$$XMLSocket.$$p.$$onSecurityErrorEvent = onSecurityErrorEvent);
		}};


		//private instance method
		XMLSocket.prototype.$$v.onIOErrorEvent = {
		get:function ()
		{
			var $$this = this.$$this;

			function onIOErrorEvent($$$$event)
			{
				//set default parameter values
				var event = $es4.$$coerce($$$$event, IOErrorEvent);

				$$this.dispatchEvent($es4.$$primitive(new IOErrorEvent(IOErrorEvent.IO_ERROR, false, false, "XMLSOCKET trouble sending and or receiving data.")));
			}

			return $$this.$$XMLSocket.$$p.$$onIOErrorEvent || ($$this.$$XMLSocket.$$p.$$onIOErrorEvent = onIOErrorEvent);
		}};


		//private instance method
		XMLSocket.prototype.$$v.onConnectEvent = {
		get:function ()
		{
			var $$this = this.$$this;

			function onConnectEvent($$$$event)
			{
				//set default parameter values
				var event = $es4.$$coerce($$$$event, Event);

				$$this.dispatchEvent($es4.$$primitive(new Event(Event.CONNECT)));
			}

			return $$this.$$XMLSocket.$$p.$$onConnectEvent || ($$this.$$XMLSocket.$$p.$$onConnectEvent = onConnectEvent);
		}};


		//private instance method
		XMLSocket.prototype.$$v.onCloseEvent = {
		get:function ()
		{
			var $$this = this.$$this;

			function onCloseEvent($$$$event)
			{
				//set default parameter values
				var event = $es4.$$coerce($$$$event, Event);

				$$this.close();
				$$this.dispatchEvent($es4.$$primitive(new Event(Event.CLOSE)));
			}

			return $$this.$$XMLSocket.$$p.$$onCloseEvent || ($$this.$$XMLSocket.$$p.$$onCloseEvent = onCloseEvent);
		}};


		//public instance method
		Object.defineProperty(XMLSocket.prototype, 'send', {
		get:function ()
		{
			var $$this = this;

			function send($$$$object)
			{
				//set default parameter values
				var object = $$$$object;

				$$this.$$XMLSocket._socket.writeUTFBytes(object.toString());
				$$this.$$XMLSocket._socket.writeByte(0);
			}

			return $$this.$$XMLSocket.$$send || ($$this.$$XMLSocket.$$send = send);
		}});

		Object.defineProperty(XMLSocket.prototype, 'connected', {get:function ()
		{
			var $$this = this;
			return $$this.$$XMLSocket._socket.connected;
		}});
		Object.defineProperty(XMLSocket.prototype, 'timeout', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$XMLSocket._socket.timeout, int);
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, int);

			var $$this = this;
			$$this.$$XMLSocket._socket.timeout = value;
		}});

		//properties
		XMLSocket.prototype.$$v._socket = {
		get:function () { var $$this = this.$$this; return $$this.$$XMLSocket.$$p._socket; },
		set:function (value) { var $$this = this.$$this; $$this.$$XMLSocket.$$p._socket = $es4.$$coerce(value, Socket); }
		};

	});

	//class initializer
	XMLSocket.$$cinit = (function ()
	{
		XMLSocket.$$cinit = undefined;
	});

	function XMLSocket()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof XMLSocket) || $$this.$$XMLSocket !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], XMLSocket) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			XMLSocket.$$construct($$this, $$args);
		}
	}

	//construct
	XMLSocket.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (XMLSocket.$$cinit !== undefined) XMLSocket.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$XMLSocket', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$XMLSocket, '_socket', XMLSocket.prototype.$$v._socket);

		//private instance method
		Object.defineProperty($$this.$$XMLSocket, 'onSocketDataEvent', XMLSocket.prototype.$$v.onSocketDataEvent);

		//private instance method
		Object.defineProperty($$this.$$XMLSocket, 'onSecurityErrorEvent', XMLSocket.prototype.$$v.onSecurityErrorEvent);

		//private instance method
		Object.defineProperty($$this.$$XMLSocket, 'onIOErrorEvent', XMLSocket.prototype.$$v.onIOErrorEvent);

		//private instance method
		Object.defineProperty($$this.$$XMLSocket, 'onConnectEvent', XMLSocket.prototype.$$v.onConnectEvent);

		//private instance method
		Object.defineProperty($$this.$$XMLSocket, 'onCloseEvent', XMLSocket.prototype.$$v.onCloseEvent);

		//call construct on super
		EventDispatcher.$$construct($$this);

		//initialize properties
		XMLSocket.$$iinit($$this);

		//call constructor
		if (args !== undefined) XMLSocket.$$constructor.apply($$this, args);
	});

	//initializer
	XMLSocket.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$XMLSocket.$$p._socket = $es4.$$coerce(undefined, Socket);
	
		//call iinit on super
		EventDispatcher.$$iinit($$this);
	});

	//constructor
	XMLSocket.$$constructor = (function ($$$$host, $$$$port)
	{
		var $$this = this;
		//set default parameter values
		var host = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$host, String);
		var port = (1 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$port, int);


		EventDispatcher.$$constructor.call($$this);

		$$this.$$XMLSocket._socket = $es4.$$primitive(new Socket());
		if (host)
		{
			$$this.connect(host, port);
		}
	});

	return $es4.$$class(XMLSocket, {EXTENDS:'flash.events.EventDispatcher'}, 'flash.net::XMLSocket');
})();
//flash.net.XMLSocket


//flash.display.DisplayObjectContainer
$es4.$$package('flash.display').DisplayObjectContainer = (function ()
{
	//imports
	var Event;
	var Point;
	var TextSnapshot;
	var DisplayObjectContainer;
	var InteractiveObject;
	var DisplayObject;

	//class pre initializer
	DisplayObjectContainer.$$sinit = (function ()
	{
		DisplayObjectContainer.$$sinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;
		Point = $es4.$$['flash.geom'].Point;
		TextSnapshot = $es4.$$['flash.text'].TextSnapshot;
		InteractiveObject = $es4.$$['flash.display'].InteractiveObject;
		DisplayObject = $es4.$$['flash.display'].DisplayObject;

		//ensure $$sinit is called on super class
		if (InteractiveObject.$$sinit !== undefined) InteractiveObject.$$sinit();

		//set prototype and constructor
		DisplayObjectContainer.prototype = Object.create(InteractiveObject.prototype);
		Object.defineProperty(DisplayObjectContainer.prototype, "constructor", { value: DisplayObjectContainer, enumerable: false });

		//hold private values
		Object.defineProperty(DisplayObjectContainer.prototype, '$$v', {value:{}});

		//internal instance method
		Object.defineProperty(DisplayObjectContainer.prototype, '$__addDomGraphicsView', {
		get:function ()
		{
			var $$this = this;

			function $__addDomGraphicsView($$$$domGraphicsView)
			{
				//set default parameter values
				var domGraphicsView = $es4.$$coerce($$$$domGraphicsView, Object);

				var properties = $$this.$$DisplayObjectContainer.$_properties.DisplayObjectScope;
				var domView = properties.$_domView;
				if (domView.childElementCount)
				{
					domView.insertBefore(domGraphicsView, domView.childNodes[0]);
				}
				else
				{
					domView.appendChild(domGraphicsView);
				}
				return properties.$_domGraphicsView = domGraphicsView;
			}

			return $$this.$$DisplayObjectContainer.$$$__addDomGraphicsView || ($$this.$$DisplayObjectContainer.$$$__addDomGraphicsView = $__addDomGraphicsView);
		}});


		//public instance method
		Object.defineProperty(DisplayObjectContainer.prototype, '$__properties', {
		get:function ()
		{
			var $$this = this;

			function $__properties($$$$object)
			{
				//set default parameter values
				var object = (0 > arguments.length - 1) ? null : $$$$object;

				if ($$this.$$DisplayObjectContainer.$_properties === undefined)
				{
					object = $es4.$$super2($$this, InteractiveObject, '$$InteractiveObject', '$__properties', 'func', undefined)(object);
					object.DisplayObjectContainerScope = {$_children:[], $_mouseChildren:true, $_internalAddChildAt:DisplayObjectContainer.$_internalAddChildAt, $_internalRemoveChild:DisplayObjectContainer.$_internalRemoveChild};
					object.TLScope = $$this;
					return $$this.$$DisplayObjectContainer.$_properties = object;
				}
				return $$this.$$DisplayObjectContainer.$_properties;
			}

			return $$this.$$DisplayObjectContainer.$$$__properties || ($$this.$$DisplayObjectContainer.$$$__properties = $__properties);
		}});


		//public instance method
		Object.defineProperty(DisplayObjectContainer.prototype, '$__notify', {
		get:function ()
		{
			var $$this = this;

			function $__notify($$$$name, $$$$args)
			{
				//set default parameter values
				var name = $es4.$$coerce($$$$name, String);
				var args = $$$$args;

				var children = $es4.$$coerce($$this.$$DisplayObjectContainer.$_properties.DisplayObjectContainerScope.$_children, Array);
				for (var i = $es4.$$coerce(children.length, int); i--;)
				{
					children[i].$__notify(name, args);
				}
				$es4.$$super2($$this, InteractiveObject, '$$InteractiveObject', '$__notify', 'func', undefined)(name, args);
			}

			return $$this.$$DisplayObjectContainer.$$$__notify || ($$this.$$DisplayObjectContainer.$$$__notify = $__notify);
		}});


		//public instance method
		Object.defineProperty(DisplayObjectContainer.prototype, 'addChild', {
		get:function ()
		{
			var $$this = this;

			function addChild($$$$child)
			{
				//set default parameter values
				var child = $es4.$$coerce($$$$child, DisplayObject);

				return DisplayObjectContainer.$_internalAddChildAt($$this, child, $$this.$$DisplayObjectContainer.$_properties.DisplayObjectContainerScope.$_children.length);
			}

			return $$this.$$DisplayObjectContainer.$$addChild || ($$this.$$DisplayObjectContainer.$$addChild = addChild);
		}});


		//public instance method
		Object.defineProperty(DisplayObjectContainer.prototype, 'addChildAt', {
		get:function ()
		{
			var $$this = this;

			function addChildAt($$$$child, $$$$index)
			{
				//set default parameter values
				var child = $es4.$$coerce($$$$child, DisplayObject);
				var index = $es4.$$coerce($$$$index, int);

				return DisplayObjectContainer.$_internalAddChildAt($$this, child, index);
			}

			return $$this.$$DisplayObjectContainer.$$addChildAt || ($$this.$$DisplayObjectContainer.$$addChildAt = addChildAt);
		}});


		//public instance method
		Object.defineProperty(DisplayObjectContainer.prototype, 'getChildAt', {
		get:function ()
		{
			var $$this = this;

			function getChildAt($$$$index)
			{
				//set default parameter values
				var index = $es4.$$coerce($$$$index, int);

				return $es4.$$coerce($$this.$$DisplayObjectContainer.$_properties.DisplayObjectContainerScope.$_children[index], DisplayObject);
			}

			return $$this.$$DisplayObjectContainer.$$getChildAt || ($$this.$$DisplayObjectContainer.$$getChildAt = getChildAt);
		}});


		//public instance method
		Object.defineProperty(DisplayObjectContainer.prototype, 'getChildByName', {
		get:function ()
		{
			var $$this = this;

			function getChildByName($$$$name)
			{
				//set default parameter values
				var name = $es4.$$coerce($$$$name, String);

				var children = $es4.$$coerce($$this.$$DisplayObjectContainer.$_properties.DisplayObjectContainerScope.$_children, Array);
				var childrenLength = children.length;
				for (var i = 0; i < childrenLength; i++)
				{
					if (name == children[i].name)
					{
						return $es4.$$coerce(children[i], DisplayObject);
					}
				}
				throw $es4.$$primitive(new ArgumentError('getChildByName, Child is not a child of this DisplayObjectContainer'));
			}

			return $$this.$$DisplayObjectContainer.$$getChildByName || ($$this.$$DisplayObjectContainer.$$getChildByName = getChildByName);
		}});


		//public instance method
		Object.defineProperty(DisplayObjectContainer.prototype, 'getChildIndex', {
		get:function ()
		{
			var $$this = this;

			function getChildIndex($$$$child)
			{
				//set default parameter values
				var child = $es4.$$coerce($$$$child, DisplayObject);

				var index = $es4.$$coerce($$this.$$DisplayObjectContainer.$_properties.DisplayObjectContainerScope.$_children.indexOf(child), int);
				if (index == -1)
				{
					throw $es4.$$primitive(new ArgumentError('getChildIndex, Child is not a child of this DisplayObjectContainer'));
				}
				return index;
			}

			return $$this.$$DisplayObjectContainer.$$getChildIndex || ($$this.$$DisplayObjectContainer.$$getChildIndex = getChildIndex);
		}});


		//public instance method
		Object.defineProperty(DisplayObjectContainer.prototype, 'contains', {
		get:function ()
		{
			var $$this = this;

			function contains($$$$child)
			{
				//set default parameter values
				var child = $es4.$$coerce($$$$child, DisplayObject);

				if (child === $$this)
				{
					return true;
				}
				return containsInner($$this);

				function containsInner($$$$parent) 
				{
					//set default parameter values
					var parent = $es4.$$coerce($$$$parent, $es4.$$['flash.display'].DisplayObjectContainer);

					var displayObjectScope = parent.$__properties().DisplayObjectContainerScope;
					var numChildren = $es4.$$coerce(displayObjectScope.$_children.length, uint);
					for (var i = $es4.$$coerce(numChildren, int); i--;)
					{
						var innerChild = $es4.$$coerce(displayObjectScope.$_children[i], DisplayObject);
						if (child === innerChild)
						{
							return true;
						}
						var innerParent = $es4.$$as(innerChild, DisplayObjectContainer);
						if (innerParent)
						{
							var value = containsInner(innerParent);
							if (value)
							{
								return true;
							}
						}
					}
					return false;
				}
;
			}

			return $$this.$$DisplayObjectContainer.$$contains || ($$this.$$DisplayObjectContainer.$$contains = contains);
		}});


		//public instance method
		Object.defineProperty(DisplayObjectContainer.prototype, 'removeChild', {
		get:function ()
		{
			var $$this = this;

			function removeChild($$$$child)
			{
				//set default parameter values
				var child = $es4.$$coerce($$$$child, DisplayObject);

				return DisplayObjectContainer.$_internalRemoveChild($$this, child);
			}

			return $$this.$$DisplayObjectContainer.$$removeChild || ($$this.$$DisplayObjectContainer.$$removeChild = removeChild);
		}});


		//public instance method
		Object.defineProperty(DisplayObjectContainer.prototype, 'removeChildAt', {
		get:function ()
		{
			var $$this = this;

			function removeChildAt($$$$index)
			{
				//set default parameter values
				var index = $es4.$$coerce($$$$index, int);

				return DisplayObjectContainer.$_internalRemoveChild($$this, $$this.$$DisplayObjectContainer.$_properties.DisplayObjectContainerScope.$_children[index]);
			}

			return $$this.$$DisplayObjectContainer.$$removeChildAt || ($$this.$$DisplayObjectContainer.$$removeChildAt = removeChildAt);
		}});


		//public instance method
		Object.defineProperty(DisplayObjectContainer.prototype, 'removeChildren', {
		get:function ()
		{
			var $$this = this;

			function removeChildren($$$$beginIndex, $$$$endIndex)
			{
				//set default parameter values
				var beginIndex = (0 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$beginIndex, int);
				var endIndex = (1 > arguments.length - 1) ? 0x7fffffff : $es4.$$coerce($$$$endIndex, int);

				var children = $es4.$$coerce($$this.$$DisplayObjectContainer.$_properties.DisplayObjectContainerScope.$_children.slice(beginIndex, endIndex), Array);
				var length = children.length;
				for (var i = 0; i < length; i++)
				{
					DisplayObjectContainer.$_internalRemoveChild($$this, children[i]);
				}
			}

			return $$this.$$DisplayObjectContainer.$$removeChildren || ($$this.$$DisplayObjectContainer.$$removeChildren = removeChildren);
		}});


		//public instance method
		Object.defineProperty(DisplayObjectContainer.prototype, 'setChildIndex', {
		get:function ()
		{
			var $$this = this;

			function setChildIndex($$$$child, $$$$index)
			{
				//set default parameter values
				var child = $es4.$$coerce($$$$child, DisplayObject);
				var index = $es4.$$coerce($$$$index, int);

				var children = $es4.$$coerce($$this.$$DisplayObjectContainer.$_properties.DisplayObjectContainerScope.$_children, Array);
				var currentIndex = children.indexOf(child);
				if (currentIndex == -1)
				{
					throw $es4.$$primitive(new ArgumentError('not a child of parent'));
				}
				if (index >= children.length)
				{
					throw $es4.$$primitive(new RangeError('out of range index provided'));
				}
				if (currentIndex == index)
				{
					return;
				}
				if (index == (children.length - 1))
				{
					$$this.$$DisplayObjectContainer.$_properties.DisplayObjectScope.$_domView.appendChild(child.$__properties().DisplayObjectScope.$_domView);
				}
				else
				{
					var displayObject = children[index];
					$$this.$$DisplayObjectContainer.$_properties.DisplayObjectScope.$_domView.insertBefore(child.$__properties().DisplayObjectScope.$_domView, displayObject.$__properties().DisplayObjectScope.$_domView);
				}
				children.splice(currentIndex, 1);
				children.splice(index, 0, child);
			}

			return $$this.$$DisplayObjectContainer.$$setChildIndex || ($$this.$$DisplayObjectContainer.$$setChildIndex = setChildIndex);
		}});


		//public instance method
		Object.defineProperty(DisplayObjectContainer.prototype, 'swapChildren', {
		get:function ()
		{
			var $$this = this;

			function swapChildren($$$$child1, $$$$child2)
			{
				//set default parameter values
				var child1 = $es4.$$coerce($$$$child1, DisplayObject);
				var child2 = $es4.$$coerce($$$$child2, DisplayObject);

				throw $es4.$$primitive(new Error('DisplayObjectContainer: attempted call to an unimplemented function "swapChildren"'));
			}

			return $$this.$$DisplayObjectContainer.$$swapChildren || ($$this.$$DisplayObjectContainer.$$swapChildren = swapChildren);
		}});


		//public instance method
		Object.defineProperty(DisplayObjectContainer.prototype, 'swapChildrenAt', {
		get:function ()
		{
			var $$this = this;

			function swapChildrenAt($$$$index1, $$$$index2)
			{
				//set default parameter values
				var index1 = $es4.$$coerce($$$$index1, int);
				var index2 = $es4.$$coerce($$$$index2, int);

				throw $es4.$$primitive(new Error('DisplayObjectContainer: attempted call to an unimplemented function "swapChildrenAt"'));
			}

			return $$this.$$DisplayObjectContainer.$$swapChildrenAt || ($$this.$$DisplayObjectContainer.$$swapChildrenAt = swapChildrenAt);
		}});


		//public instance method
		Object.defineProperty(DisplayObjectContainer.prototype, 'areInaccessibleObjectsUnderPoint', {
		get:function ()
		{
			var $$this = this;

			function areInaccessibleObjectsUnderPoint($$$$point)
			{
				//set default parameter values
				var point = $es4.$$coerce($$$$point, Point);

				throw $es4.$$primitive(new Error('DisplayObjectContainer: attempted call to an unimplemented function "areInaccessibleObjectsUnderPoint"'));
			}

			return $$this.$$DisplayObjectContainer.$$areInaccessibleObjectsUnderPoint || ($$this.$$DisplayObjectContainer.$$areInaccessibleObjectsUnderPoint = areInaccessibleObjectsUnderPoint);
		}});


		//public instance method
		Object.defineProperty(DisplayObjectContainer.prototype, 'getObjectsUnderPoint', {
		get:function ()
		{
			var $$this = this;

			function getObjectsUnderPoint($$$$point)
			{
				//set default parameter values
				var point = $es4.$$coerce($$$$point, Point);

				var win = window;
				var displayObjectScope;
				var pscope = null;
				var x = NaN;
				var y = NaN;
				var width = NaN;
				var height = NaN;
				var visible = false;
				var graphicsDomView;
				var add = true;
				displayObjectScope = $$this.$$DisplayObjectContainer.$_properties.DisplayObjectScope;
				pscope = displayObjectScope.pscope;
				visible = $es4.$$coerce(win.$$getDescriptor(pscope, 'visible').get.call($$this), Boolean);
				if (!visible)
				{
					return [];
				}
				x = $es4.$$coerce(win.$$getDescriptor(pscope, 'x').get.call($$this), Number);
				if (point.x < x)
				{
					add = false;
				}
				else
				{
					width = $es4.$$coerce(win.$$getDescriptor(pscope, 'width').get.call($$this), Number);
					if (point.x > x + width)
					{
						return [];
					}
				}
				y = $es4.$$coerce(win.$$getDescriptor(pscope, 'y').get.call($$this), Number);
				if (point.y < y)
				{
					add = false;
				}
				else
				{
					height = $es4.$$coerce(win.$$getDescriptor(pscope, 'height').get.call($$this), Number);
					if (point.y > y + height)
					{
						return [];
					}
				}
				graphicsDomView = displayObjectScope.$_domGraphicsView;
				var children = (add && graphicsDomView && (graphicsDomView.width || graphicsDomView.height)) ? [$$this] : [];
				getChildrenAtPoint($$this);

				function getChildrenAtPoint($$$$parent) 
				{
					//set default parameter values
					var parent = $es4.$$coerce($$$$parent, $es4.$$['flash.display'].DisplayObjectContainer);

					var innerPoint = parent.globalToLocal(point);
					var displayObjectScope;
					var pscope = null;
					var x = NaN;
					var y = NaN;
					var width = NaN;
					var height = NaN;
					var visible = false;
					var graphicsDomView;
					var add = false;
					var numChildren = $es4.$$coerce(parent.numChildren, uint);
					for (var i = 0; i < numChildren; i++)
					{
						var child = parent.getChildAt(i);
						displayObjectScope = child.$__properties().DisplayObjectScope;
						pscope = displayObjectScope.pscope;
						add = true;
						visible = $es4.$$coerce(win.$$getDescriptor(pscope, 'visible').get.call(child), Boolean);
						if (!visible)
						{
							continue;
						}
						x = $es4.$$coerce(win.$$getDescriptor(pscope, 'x').get.call(child), Number);
						if (innerPoint.x < x)
						{
							add = false;
						}
						else
						{
							width = $es4.$$coerce(win.$$getDescriptor(pscope, 'width').get.call(child), Number);
							if (innerPoint.x > x + width)
							{
								continue;
							}
						}
						y = $es4.$$coerce(win.$$getDescriptor(pscope, 'y').get.call(child), Number);
						if (innerPoint.y < y)
						{
							add = false;
						}
						else
						{
							height = $es4.$$coerce(win.$$getDescriptor(pscope, 'height').get.call(child), Number);
							if (innerPoint.y > y + height)
							{
								continue;
							}
						}
						var innerParent = $es4.$$as(child, DisplayObjectContainer);
						if (innerParent)
						{
							graphicsDomView = displayObjectScope.$_domGraphicsView;
							if (add && graphicsDomView && (graphicsDomView.width || graphicsDomView.height))
							{
								children.push(child);
							}
							getChildrenAtPoint(innerParent);
						}
						else if (add)
						{
							children.push(child);
						}
					}
				}
;

				return children;
			}

			return $$this.$$DisplayObjectContainer.$$getObjectsUnderPoint || ($$this.$$DisplayObjectContainer.$$getObjectsUnderPoint = getObjectsUnderPoint);
		}});

		Object.defineProperty(DisplayObjectContainer.prototype, 'numChildren', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$DisplayObjectContainer.$_properties.DisplayObjectContainerScope.$_children.length, int);
		}});
		Object.defineProperty(DisplayObjectContainer.prototype, 'mouseChildren', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$DisplayObjectContainer.$_properties.DisplayObjectContainerScope.$_mouseChildren, Boolean);
		}, set:function ($$$$enable)
		{
			//set default parameter values
			var enable = $es4.$$coerce($$$$enable, Boolean);

			var $$this = this;
			$$this.$$DisplayObjectContainer.$_properties.DisplayObjectContainerScope.$_mouseChildren = enable;
		}});
		Object.defineProperty(DisplayObjectContainer.prototype, 'tabChildren', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('DisplayObjectContainer: attempted call to an unimplemented function "tabChildren"'));
		}, set:function ($$$$enable)
		{
			//set default parameter values
			var enable = $es4.$$coerce($$$$enable, Boolean);

			var $$this = this;
			throw $es4.$$primitive(new Error('DisplayObjectContainer: attempted call to an unimplemented function "tabChildren"'));
		}});
		Object.defineProperty(DisplayObjectContainer.prototype, 'textSnapshot', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('DisplayObjectContainer: attempted call to an unimplemented function "textSnapshot"'));
		}});

		//properties
		DisplayObjectContainer.prototype.$$v.$_properties = {
		get:function () { var $$this = this.$$this; return $$this.$$DisplayObjectContainer.$$p.$_properties; },
		set:function (value) { var $$this = this.$$this; $$this.$$DisplayObjectContainer.$$p.$_properties = value }
		};

	});

	//class initializer
	DisplayObjectContainer.$$cinit = (function ()
	{
		DisplayObjectContainer.$$cinit = undefined;
	});

	//private static method
	DisplayObjectContainer.$_internalAddChildAt = (function ($$$$displayObjectContainer, $$$$child, $$$$index, $$$$dispatchEvents)
	{
		if (DisplayObjectContainer.$$cinit !== undefined) DisplayObjectContainer.$$cinit();

		//set default parameter values
		var displayObjectContainer = $es4.$$coerce($$$$displayObjectContainer, $es4.$$['flash.display'].DisplayObjectContainer);
		var child = $es4.$$coerce($$$$child, DisplayObject);
		var index = $es4.$$coerce($$$$index, int);
		var dispatchEvents = (3 > arguments.length - 1) ? true : $es4.$$coerce($$$$dispatchEvents, Boolean);

		if (child === null)
		{
			throw $es4.$$primitive(new Error('attempting to add null child to display list'));
		}
		var childProperties = child.$__properties();
		var properties = displayObjectContainer.$__properties();
		var children = $es4.$$coerce(properties.DisplayObjectContainerScope.$_children, Array);
		var originalIndex = children.indexOf(child);
		var childWasOnStage = $es4.$$coerce(childProperties.TLScope.stage != null, Boolean);
		var hasChild = $es4.$$coerce(originalIndex != -1, Boolean);
		var parent;
		if (hasChild)
		{
			if (index > originalIndex)
			{
				index--;
			}
			DisplayObjectContainer.$_internalRemoveChild(displayObjectContainer, child, false, true);
		}
		else
		{
			parent = childProperties.TLScope.parent;
			if (parent)
			{
				parent.$__properties().DisplayObjectContainerScope.$_internalRemoveChild(parent, child, true, true);
			}
		}
		var childrenLength = children.length;
		if (index > childrenLength)
		{
			throw $es4.$$primitive(new RangeError('out of range index provided'));
		}
		if (index == childrenLength)
		{
			properties.DisplayObjectScope.$_domView.appendChild(childProperties.DisplayObjectScope.$_domView);
		}
		else
		{
			var displayObject = children[index];
			properties.DisplayObjectScope.$_domView.insertBefore(childProperties.DisplayObjectScope.$_domView, displayObject.$__properties().DisplayObjectScope.$_domView);
		}
		children.splice(index, 0, child);
		if (childProperties.DisplayObjectScope.$_height !== 0 || childProperties.DisplayObjectScope.$_width !== 0 || childProperties.DisplayObjectScope.$_scrollRect !== null)
		{
			childProperties.DisplayObjectScope.$_notifyParentOfBoundsChange();
		}
		if (!hasChild && dispatchEvents)
		{
			childProperties.TLScope.dispatchEvent($es4.$$primitive(new Event(Event.ADDED, true)));
		}
		if (!childWasOnStage && properties.TLScope.stage)
		{
			if (!childProperties.DisplayObjectScope.$_root)
			{
				parent = child;
				var found = false;
				while (parent)
				{
					var parentProperties = parent.$__properties();
					if (parentProperties.DisplayObjectScope.$_isRoot)
					{
						found = true;
						parentProperties.DisplayObjectScope.$_root = parent;
						break;
					}
					parent = parentProperties.TLScope.parent;
				}
				if (!found)
				{
					throw $es4.$$primitive(new Error('no root found'));
				}
			}
			if (dispatchEvents)
			{
				notifyAddedToStage(child);
			}
		}

		function notifyAddedToStage($$$$child) 
		{
			//set default parameter values
			var child = $$$$child;

			var childProperties = child.$__properties();
			if (childProperties.EventDispatcherScope.$_listeners[Event.ADDED_TO_STAGE])
			{
				childProperties.TLScope.dispatchEvent($es4.$$primitive(new Event(Event.ADDED_TO_STAGE)));
			}
			var displayObjectContainer = $es4.$$as(child, DisplayObjectContainer);
			if (displayObjectContainer == null)
			{
				return;
			}
			var children = $es4.$$coerce(childProperties.DisplayObjectContainerScope.$_children, Array);
			var childrenLength = children.length;
			for (var i = 0; i < childrenLength; i++)
			{
				notifyAddedToStage(children[i]);
			}
		}
;

		return child;
	});

	//private static method
	DisplayObjectContainer.$_internalRemoveChild = (function ($$$$displayObjectContainer, $$$$child, $$$$dispatchRemovedEvent, $$$$beingAdded)
	{
		if (DisplayObjectContainer.$$cinit !== undefined) DisplayObjectContainer.$$cinit();

		//set default parameter values
		var displayObjectContainer = $es4.$$coerce($$$$displayObjectContainer, $es4.$$['flash.display'].DisplayObjectContainer);
		var child = $es4.$$coerce($$$$child, DisplayObject);
		var dispatchRemovedEvent = (2 > arguments.length - 1) ? true : $es4.$$coerce($$$$dispatchRemovedEvent, Boolean);
		var beingAdded = (3 > arguments.length - 1) ? false : $es4.$$coerce($$$$beingAdded, Boolean);

		if (child === null)
		{
			throw $es4.$$primitive(new Error('attempting to remove null child from display list'));
		}
		var properties = displayObjectContainer.$__properties();
		var childProperties = child.$__properties();
		if (childProperties.DisplayObjectScope.$_domView.parentNode != properties.DisplayObjectScope.$_domView)
		{
			throw $es4.$$primitive(new ArgumentError('Error removing child from parent that is not a child of parent'));
		}
		var children = $es4.$$coerce(properties.DisplayObjectContainerScope.$_children, Array);
		if (dispatchRemovedEvent)
		{
			childProperties.TLScope.dispatchEvent($es4.$$primitive(new Event(Event.REMOVED, true)));
		}
		if (properties.TLScope.stage && !beingAdded)
		{
			notifyRemovedFromStage(child);
		}
		properties.DisplayObjectScope.$_domView.removeChild(childProperties.DisplayObjectScope.$_domView);
		children.splice(children.indexOf(child), 1);
		properties.DisplayObjectScope.$_onChildBoundsChange(childProperties.DisplayObjectScope.$_id, null);

		function notifyRemovedFromStage($$$$child) 
		{
			//set default parameter values
			var child = $$$$child;

			var childProperties = child.$__properties();
			if (childProperties.EventDispatcherScope.$_listeners[Event.REMOVED_FROM_STAGE])
			{
				childProperties.TLScope.dispatchEvent($es4.$$primitive(new Event(Event.REMOVED_FROM_STAGE)));
			}
			var displayObjectContainer = $es4.$$as(child, DisplayObjectContainer);
			if (displayObjectContainer == null)
			{
				return;
			}
			var children = $es4.$$coerce(childProperties.DisplayObjectContainerScope.$_children, Array);
			var childrenLength = children.length;
			for (var i = 0; i < childrenLength; i++)
			{
				notifyRemovedFromStage(children[i]);
			}
		}
;

		return child;
	});
	function DisplayObjectContainer()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof DisplayObjectContainer) || $$this.$$DisplayObjectContainer !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], DisplayObjectContainer) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			DisplayObjectContainer.$$construct($$this, $$args);
		}
	}

	//construct
	DisplayObjectContainer.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (DisplayObjectContainer.$$cinit !== undefined) DisplayObjectContainer.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$DisplayObjectContainer', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$DisplayObjectContainer, '$_properties', DisplayObjectContainer.prototype.$$v.$_properties);

		//call construct on super
		InteractiveObject.$$construct($$this);

		//initialize properties
		DisplayObjectContainer.$$iinit($$this);

		//call constructor
		if (args !== undefined) DisplayObjectContainer.$$constructor.apply($$this, args);
	});

	//initializer
	DisplayObjectContainer.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$DisplayObjectContainer.$$p.$_properties = undefined;
	
		//call iinit on super
		InteractiveObject.$$iinit($$this);
	});

	//constructor
	DisplayObjectContainer.$$constructor = (function ()
	{
		var $$this = this;
		if ($$this.$$DisplayObjectContainer.$_properties === undefined)
		{
			$$this.$__properties({});
		}
		InteractiveObject.$$constructor.call($$this);
	});

	return $es4.$$class(DisplayObjectContainer, {EXTENDS:'flash.display.InteractiveObject'}, 'flash.display::DisplayObjectContainer');
})();
//flash.display.DisplayObjectContainer


//flash.events.KeyboardEvent
$es4.$$package('flash.events').KeyboardEvent = (function ()
{
	//imports
	var Event;
	var KeyboardEvent;

	//properties
	var $$j = {};
	KeyboardEvent.KEY_DOWN = "keyDown";
	KeyboardEvent.KEY_UP = "keyUp";

	//class pre initializer
	KeyboardEvent.$$sinit = (function ()
	{
		KeyboardEvent.$$sinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;

		//ensure $$sinit is called on super class
		if (Event.$$sinit !== undefined) Event.$$sinit();

		//set prototype and constructor
		KeyboardEvent.prototype = Object.create(Event.prototype);
		Object.defineProperty(KeyboardEvent.prototype, "constructor", { value: KeyboardEvent, enumerable: false });

		//hold private values
		Object.defineProperty(KeyboardEvent.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(KeyboardEvent.prototype, 'clone', {
		get:function ()
		{
			var $$this = this;

			function clone()
			{
				return $es4.$$coerce($es4.$$primitive(new KeyboardEvent($$this.type, $$this.bubbles, $$this.cancelable, $$this.$$KeyboardEvent._charCode, $$this.$$KeyboardEvent._keyCode, $$this.$$KeyboardEvent._keyLocation, $$this.$$KeyboardEvent._ctrlKey, $$this.$$KeyboardEvent._altKey, $$this.$$KeyboardEvent._shiftKey)), Event);
			}

			return $$this.$$KeyboardEvent.$$clone || ($$this.$$KeyboardEvent.$$clone = clone);
		}});


		//public instance method
		Object.defineProperty(KeyboardEvent.prototype, 'toString', {
		get:function ()
		{
			var $$this = this;

			function toString()
			{
				throw $es4.$$primitive(new Error('KeyboardEvent: attempted call to an unimplemented function "toString"'));
			}

			return $$this.$$KeyboardEvent.$$toString || ($$this.$$KeyboardEvent.$$toString = toString);
		}});


		//public instance method
		Object.defineProperty(KeyboardEvent.prototype, 'updateAfterEvent', {
		get:function ()
		{
			var $$this = this;

			function updateAfterEvent()
			{
				throw $es4.$$primitive(new Error('KeyboardEvent: attempted call to an unimplemented function "updateAfterEvent"'));
			}

			return $$this.$$KeyboardEvent.$$updateAfterEvent || ($$this.$$KeyboardEvent.$$updateAfterEvent = updateAfterEvent);
		}});

		Object.defineProperty(KeyboardEvent.prototype, 'altKey', {get:function ()
		{
			var $$this = this;
			return $$this.$$KeyboardEvent._altKey;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var $$this = this;
			$$this.$$KeyboardEvent._altKey = value;
		}});
		Object.defineProperty(KeyboardEvent.prototype, 'charCode', {get:function ()
		{
			var $$this = this;
			return $$this.$$KeyboardEvent._charCode;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, uint);

			var $$this = this;
			$$this.$$KeyboardEvent._charCode = value;
		}});
		Object.defineProperty(KeyboardEvent.prototype, 'ctrlKey', {get:function ()
		{
			var $$this = this;
			return $$this.$$KeyboardEvent._ctrlKey;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var $$this = this;
			$$this.$$KeyboardEvent._ctrlKey = value;
		}});
		Object.defineProperty(KeyboardEvent.prototype, 'keyCode', {get:function ()
		{
			var $$this = this;
			return $$this.$$KeyboardEvent._keyCode;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, uint);

			var $$this = this;
			$$this.$$KeyboardEvent._keyCode = value;
		}});
		Object.defineProperty(KeyboardEvent.prototype, 'keyLocation', {get:function ()
		{
			var $$this = this;
			return $$this.$$KeyboardEvent._keyLocation;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, uint);

			var $$this = this;
			$$this.$$KeyboardEvent._keyLocation = value;
		}});
		Object.defineProperty(KeyboardEvent.prototype, 'shiftKey', {get:function ()
		{
			var $$this = this;
			return $$this.$$KeyboardEvent._shiftKey;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var $$this = this;
			$$this.$$KeyboardEvent._shiftKey = $$this.shiftKey;
		}});

		//properties
		KeyboardEvent.prototype.$$v._charCode = {
		get:function () { var $$this = this.$$this; return $$this.$$KeyboardEvent.$$p._charCode; },
		set:function (value) { var $$this = this.$$this; $$this.$$KeyboardEvent.$$p._charCode = $es4.$$coerce(value, uint); }
		};

		KeyboardEvent.prototype.$$v._keyCode = {
		get:function () { var $$this = this.$$this; return $$this.$$KeyboardEvent.$$p._keyCode; },
		set:function (value) { var $$this = this.$$this; $$this.$$KeyboardEvent.$$p._keyCode = $es4.$$coerce(value, uint); }
		};

		KeyboardEvent.prototype.$$v._keyLocation = {
		get:function () { var $$this = this.$$this; return $$this.$$KeyboardEvent.$$p._keyLocation; },
		set:function (value) { var $$this = this.$$this; $$this.$$KeyboardEvent.$$p._keyLocation = $es4.$$coerce(value, uint); }
		};

		KeyboardEvent.prototype.$$v._ctrlKey = {
		get:function () { var $$this = this.$$this; return $$this.$$KeyboardEvent.$$p._ctrlKey; },
		set:function (value) { var $$this = this.$$this; $$this.$$KeyboardEvent.$$p._ctrlKey = $es4.$$coerce(value, Boolean); }
		};

		KeyboardEvent.prototype.$$v._altKey = {
		get:function () { var $$this = this.$$this; return $$this.$$KeyboardEvent.$$p._altKey; },
		set:function (value) { var $$this = this.$$this; $$this.$$KeyboardEvent.$$p._altKey = $es4.$$coerce(value, Boolean); }
		};

		KeyboardEvent.prototype.$$v._shiftKey = {
		get:function () { var $$this = this.$$this; return $$this.$$KeyboardEvent.$$p._shiftKey; },
		set:function (value) { var $$this = this.$$this; $$this.$$KeyboardEvent.$$p._shiftKey = $es4.$$coerce(value, Boolean); }
		};

	});

	//class initializer
	KeyboardEvent.$$cinit = (function ()
	{
		KeyboardEvent.$$cinit = undefined;
	});

	function KeyboardEvent()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof KeyboardEvent) || $$this.$$KeyboardEvent !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], KeyboardEvent) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			KeyboardEvent.$$construct($$this, $$args);
		}
	}

	//construct
	KeyboardEvent.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (KeyboardEvent.$$cinit !== undefined) KeyboardEvent.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$KeyboardEvent', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$KeyboardEvent, '_charCode', KeyboardEvent.prototype.$$v._charCode);
		Object.defineProperty($$this.$$KeyboardEvent, '_keyCode', KeyboardEvent.prototype.$$v._keyCode);
		Object.defineProperty($$this.$$KeyboardEvent, '_keyLocation', KeyboardEvent.prototype.$$v._keyLocation);
		Object.defineProperty($$this.$$KeyboardEvent, '_ctrlKey', KeyboardEvent.prototype.$$v._ctrlKey);
		Object.defineProperty($$this.$$KeyboardEvent, '_altKey', KeyboardEvent.prototype.$$v._altKey);
		Object.defineProperty($$this.$$KeyboardEvent, '_shiftKey', KeyboardEvent.prototype.$$v._shiftKey);

		//call construct on super
		Event.$$construct($$this);

		//initialize properties
		KeyboardEvent.$$iinit($$this);

		//call constructor
		if (args !== undefined) KeyboardEvent.$$constructor.apply($$this, args);
	});

	//initializer
	KeyboardEvent.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$KeyboardEvent.$$p._charCode = $es4.$$coerce(undefined, uint);
		$$this.$$KeyboardEvent.$$p._keyCode = $es4.$$coerce(undefined, uint);
		$$this.$$KeyboardEvent.$$p._keyLocation = $es4.$$coerce(undefined, uint);
		$$this.$$KeyboardEvent.$$p._ctrlKey = $es4.$$coerce(undefined, Boolean);
		$$this.$$KeyboardEvent.$$p._altKey = $es4.$$coerce(undefined, Boolean);
		$$this.$$KeyboardEvent.$$p._shiftKey = $es4.$$coerce(undefined, Boolean);
	
		//call iinit on super
		Event.$$iinit($$this);
	});

	//constructor
	KeyboardEvent.$$constructor = (function ($$$$type, $$$$bubbles, $$$$cancelable, $$$$charCodeValue, $$$$keyCodeValue, $$$$keyLocationValue, $$$$ctrlKeyValue, $$$$altKeyValue, $$$$shiftKeyValue)
	{
		var $$this = this;
		//set default parameter values
		var type = $es4.$$coerce($$$$type, String);
		var bubbles = (1 > arguments.length - 1) ? true : $es4.$$coerce($$$$bubbles, Boolean);
		var cancelable = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$cancelable, Boolean);
		var charCodeValue = (3 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$charCodeValue, uint);
		var keyCodeValue = (4 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$keyCodeValue, uint);
		var keyLocationValue = (5 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$keyLocationValue, uint);
		var ctrlKeyValue = (6 > arguments.length - 1) ? false : $es4.$$coerce($$$$ctrlKeyValue, Boolean);
		var altKeyValue = (7 > arguments.length - 1) ? false : $es4.$$coerce($$$$altKeyValue, Boolean);
		var shiftKeyValue = (8 > arguments.length - 1) ? false : $es4.$$coerce($$$$shiftKeyValue, Boolean);

		Event.$$constructor.call($$this, type, bubbles, cancelable);
		$$this.$$KeyboardEvent._charCode = charCodeValue;
		$$this.$$KeyboardEvent._keyCode = keyCodeValue;
		$$this.$$KeyboardEvent._keyLocation = keyLocationValue;
		$$this.$$KeyboardEvent._ctrlKey = ctrlKeyValue;
		$$this.$$KeyboardEvent._altKey = altKeyValue;
		$$this.$$KeyboardEvent._shiftKey = shiftKeyValue;
	});

	return $es4.$$class(KeyboardEvent, {EXTENDS:'flash.events.Event'}, 'flash.events::KeyboardEvent');
})();
//flash.events.KeyboardEvent


//flash.system.IME
$es4.$$package('flash.system').IME = function () { throw new Error('Use of unimplemented class: IME'); }
//flash.system.IME


//flash.events.DRMStatusEvent
$es4.$$package('flash.events').DRMStatusEvent = function () { throw new Error('Use of unimplemented class: DRMStatusEvent'); }
//flash.events.DRMStatusEvent


//flash.net.NetStream
$es4.$$package('flash.net').NetStream = (function ()
{
	//imports
	var Event;
	var EventDispatcher;
	var NetStatusEvent;
	var Camera;
	var Microphone;
	var SoundTransform;
	var VideoStreamSettings;
	var ByteArray;
	var Browser;
	var NetStream;
	var NetStreamPlayOptions;
	var NetConnection;

	//properties
	var $$j = {};
	Object.defineProperty(NetStream, '$__PLAYING', {
	get:function () { if (NetStream.$$cinit !== undefined) NetStream.$$cinit(); return $$j.$__PLAYING; },
	set:function (value) { if (NetStream.$$cinit !== undefined) NetStream.$$cinit(); $$j.$__PLAYING = $es4.$$coerce(value, String); }
	});

	Object.defineProperty(NetStream, '$__VIDEO_CREATED', {
	get:function () { if (NetStream.$$cinit !== undefined) NetStream.$$cinit(); return $$j.$__VIDEO_CREATED; },
	set:function (value) { if (NetStream.$$cinit !== undefined) NetStream.$$cinit(); $$j.$__VIDEO_CREATED = $es4.$$coerce(value, String); }
	});

	NetStream.CONNECT_TO_FMS = "connectToFMS";
	NetStream.DIRECT_CONNECTIONS = "directConnections";

	//class pre initializer
	NetStream.$$sinit = (function ()
	{
		NetStream.$$sinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;
		EventDispatcher = $es4.$$['flash.events'].EventDispatcher;
		NetStatusEvent = $es4.$$['flash.events'].NetStatusEvent;
		Camera = $es4.$$['flash.media'].Camera;
		Microphone = $es4.$$['flash.media'].Microphone;
		SoundTransform = $es4.$$['flash.media'].SoundTransform;
		VideoStreamSettings = $es4.$$['flash.media'].VideoStreamSettings;
		ByteArray = $es4.$$['flash.utils'].ByteArray;
		Browser = $es4.$$['browser'].Browser;
		NetStreamPlayOptions = $es4.$$['flash.net'].NetStreamPlayOptions;
		NetConnection = $es4.$$['flash.net'].NetConnection;

		//ensure $$sinit is called on super class
		if (EventDispatcher.$$sinit !== undefined) EventDispatcher.$$sinit();

		//set prototype and constructor
		NetStream.prototype = Object.create(EventDispatcher.prototype);
		Object.defineProperty(NetStream.prototype, "constructor", { value: NetStream, enumerable: false });

		//hold private values
		Object.defineProperty(NetStream.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(NetStream.prototype, 'play', {
		get:function ()
		{
			var $$this = this;

			function play($$$$rest)
			{
				//set default parameter values
				for (var $$i = 0, $$length = arguments.length, rest = new Array($$length - 0); $$i < $$length; $$i += 1) rest[$$i - 0] = arguments[$$i];

				$$this.$__domVideoView = Browser.getNewVideo();
				$$this.dispatchEvent($es4.$$primitive(new Event(NetStream.$__VIDEO_CREATED)));
				var window = Browser.getWindow();
				var isPlaying = false;
				var isIE = $es4.$$coerce(window.ie, Boolean);
				var setTimeout = $es4.$$coerce(window.setTimeout, Function);
				var firefoxMobile = $es4.$$coerce((window.mobile && window.firefox), Boolean);
				var safariMobile = $es4.$$coerce((window.mobile && window.safari), Boolean);
				var canPlayThrough = false;
				$$this.$__domVideoView.addEventListener('loadedmetadata', onLoadedMetaData);
				$$this.$__domVideoView.addEventListener('play', onPlay);
				$$this.$__domVideoView.addEventListener('canplaythrough', onCanPlay);
				$$this.$__domVideoView.src = rest[0];
				if (safariMobile)
				{
					$$this.$__domVideoView.load();
					$$this.$__domVideoView.play();
					$$this.$__domVideoView.pause();
				}
				else if (firefoxMobile)
				{
					$$this.$__domVideoView.play();
				}

				function onLoadedMetaData($$$$event) 
				{
					//set default parameter values
					var event = $es4.$$coerce($$$$event, Event);

					$$this.$__domVideoView.removeEventListener('loadedmetadata', onLoadedMetaData);
					if (!$$this.$_client.onMetaData)
					{
						return;
					}
					$$this.$$NetStream.$_duration = $$this.$__domVideoView.duration;
					trace('reported video duration: ' + $$this.$$NetStream.$_duration);
					if ($$this.$$NetStream.$_duration == 1)
					{
						trace('incorrect video duration metadata detected. loading metadata file');
						var parts = $es4.$$coerce(rest[0].split('.'), Array);
						parts.pop();
						var uri = parts.join('.') + '.metadata';
						var xmlHttpRequest = $es4.$$primitive(new window.XMLHttpRequest());
						xmlHttpRequest.open('GET', uri, false);
						xmlHttpRequest.overrideMimeType('text/javascript');
						xmlHttpRequest.send(null);
						trace('metadata file reported duration: ' + xmlHttpRequest.responseText);
						$$this.$$NetStream.$_duration = xmlHttpRequest.responseText;
					}
					$$this.$_client.onMetaData({width:$$this.$__domVideoView.videoWidth, height:$$this.$__domVideoView.videoHeight, duration:$$this.$$NetStream.$_duration, framerate:30});
				}
;

				function onCanPlay($$$$event) 
				{
					//set default parameter values
					var event = $es4.$$coerce($$$$event, Event);

					$$this.$__domVideoView.removeEventListener('canplaythrough', onCanPlay);
					trace('can play through');
					canPlayThrough = true;
					if (!firefoxMobile)
					{
						$$this.$__domVideoView.play();
					}
				}
;

				function onPlay($$$$event) 
				{
					//set default parameter values
					var event = $es4.$$coerce($$$$event, Event);

					if (!canPlayThrough)
					{
						return;
					}
					if ($$this.$$NetStream.$_wasEnded)
					{
						$$this.dispatchEvent($es4.$$primitive(new NetStatusEvent(NetStatusEvent.NET_STATUS, false, false, {code:'NetStream.Play.Start'})));
						$$this.$$NetStream.$_wasEnded = false;
					}
					if (!isPlaying)
					{
						onPlaying();
					}
				}
;

				function onPlaying() 
				{
					isPlaying = true;
					if (!$$this.$__domVideoView)
					{
						isPlaying = false;
						return;
					}
					if ($$this.$__domVideoView.paused || $$this.$__domVideoView.ended)
					{
						isPlaying = false;
						if ($$this.$__suspended)
						{
							return;
						}
						else if ($$this.$__domVideoView.ended)
						{
							onEnded();
						}
						else if ($$this.$$NetStream.$_realPause)
						{
							$$this.dispatchEvent($es4.$$primitive(new NetStatusEvent(NetStatusEvent.NET_STATUS, false, false, {code:'NetStream.Pause.Notify'})));
							$$this.$$NetStream.$_wasPaused = true;
						}
						else
						{
							trace('unbuffered edge case');
							$$this.$__domVideoView.play();
						}
						return;
					}
					else if ($$this.$$NetStream.$_wasPaused)
					{
						$$this.dispatchEvent($es4.$$primitive(new NetStatusEvent(NetStatusEvent.NET_STATUS, false, false, {code:'NetStream.Unpause.Notify'})));
						$$this.$$NetStream.$_wasPaused = false;
					}
					else if ($$this.$__domVideoView.currentTime > $$this.$$NetStream.$_duration)
					{
						trace('ie reporting currentTime greater than duration');
						onEnded();
						$$this.$__domVideoView.pause();
						return;
					}
					$$this.dispatchEvent($es4.$$primitive(new Event(NetStream.$__PLAYING)));
					setTimeout(onPlaying, (isIE) ? 50 : 250);
				}
;

				function onEnded() 
				{
					$$this.$$NetStream.$_wasEnded = true;
					$$this.$$NetStream.$_endTime = $$this.time;
					trace('onEnded called, end time: ' + $$this.$$NetStream.$_endTime);
					$$this.dispatchEvent($es4.$$primitive(new NetStatusEvent(NetStatusEvent.NET_STATUS, false, false, {code:'NetStream.Play.Stop'})));
					if ($$this.$_client.onPlayStatus)
					{
						$$this.$_client.onPlayStatus({code:'NetStream.Play.Complete'});
					}
				}
;
			}

			return $$this.$$NetStream.$$play || ($$this.$$NetStream.$$play = play);
		}});


		//public instance method
		Object.defineProperty(NetStream.prototype, 'appendBytes', {
		get:function ()
		{
			var $$this = this;

			function appendBytes($$$$bytes)
			{
				//set default parameter values
				var bytes = $es4.$$coerce($$$$bytes, ByteArray);

				throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "appendBytes"'));
			}

			return $$this.$$NetStream.$$appendBytes || ($$this.$$NetStream.$$appendBytes = appendBytes);
		}});


		//public instance method
		Object.defineProperty(NetStream.prototype, 'appendBytesAction', {
		get:function ()
		{
			var $$this = this;

			function appendBytesAction($$$$netStreamAppendBytesAction)
			{
				//set default parameter values
				var netStreamAppendBytesAction = $es4.$$coerce($$$$netStreamAppendBytesAction, String);

				throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "appendBytesAction"'));
			}

			return $$this.$$NetStream.$$appendBytesAction || ($$this.$$NetStream.$$appendBytesAction = appendBytesAction);
		}});


		//public instance method
		Object.defineProperty(NetStream.prototype, 'attach', {
		get:function ()
		{
			var $$this = this;

			function attach($$$$connection)
			{
				//set default parameter values
				var connection = $es4.$$coerce($$$$connection, NetConnection);

				throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "attach"'));
			}

			return $$this.$$NetStream.$$attach || ($$this.$$NetStream.$$attach = attach);
		}});


		//public instance method
		Object.defineProperty(NetStream.prototype, 'attachAudio', {
		get:function ()
		{
			var $$this = this;

			function attachAudio($$$$microphone)
			{
				//set default parameter values
				var microphone = $es4.$$coerce($$$$microphone, Microphone);

				throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "attachAudio"'));
			}

			return $$this.$$NetStream.$$attachAudio || ($$this.$$NetStream.$$attachAudio = attachAudio);
		}});


		//public instance method
		Object.defineProperty(NetStream.prototype, 'attachCamera', {
		get:function ()
		{
			var $$this = this;

			function attachCamera($$$$theCamera, $$$$snapshotMilliseconds)
			{
				//set default parameter values
				var theCamera = $es4.$$coerce($$$$theCamera, Camera);
				var snapshotMilliseconds = (1 > arguments.length - 1) ? -1 : $es4.$$coerce($$$$snapshotMilliseconds, int);

				throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "attachCamera"'));
			}

			return $$this.$$NetStream.$$attachCamera || ($$this.$$NetStream.$$attachCamera = attachCamera);
		}});


		//public instance method
		Object.defineProperty(NetStream.prototype, 'close', {
		get:function ()
		{
			var $$this = this;

			function close()
			{
				if (!$$this.$__domVideoView)
				{
					return;
				}
				$$this.$__domVideoView.pause();
				$$this.$__domVideoView.src = '';
				$$this.$__domVideoView.removeAttribute('src');
			}

			return $$this.$$NetStream.$$close || ($$this.$$NetStream.$$close = close);
		}});


		//public instance method
		Object.defineProperty(NetStream.prototype, 'dispose', {
		get:function ()
		{
			var $$this = this;

			function dispose()
			{
				if (!$$this.$__domVideoView)
				{
					return;
				}
				$$this.close();
				if ($$this.$__domVideoView.parentNode)
				{
					$$this.$__domVideoView.parentNode.displayObject.attachNetStream(null);
				}
				$$this.$__domVideoView = null;
			}

			return $$this.$$NetStream.$$dispose || ($$this.$$NetStream.$$dispose = dispose);
		}});


		//public instance method
		Object.defineProperty(NetStream.prototype, 'onPeerConnect', {
		get:function ()
		{
			var $$this = this;

			function onPeerConnect($$$$subscriber)
			{
				//set default parameter values
				var subscriber = $es4.$$coerce($$$$subscriber, $es4.$$['flash.net'].NetStream);

				throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "onPeerConnect"'));
			}

			return $$this.$$NetStream.$$onPeerConnect || ($$this.$$NetStream.$$onPeerConnect = onPeerConnect);
		}});


		//public instance method
		Object.defineProperty(NetStream.prototype, 'pause', {
		get:function ()
		{
			var $$this = this;

			function pause()
			{
				if ($$this.$$NetStream.$_wasEnded && $$this.$$NetStream.$_endTime)
				{
					return;
				}
				$$this.$$NetStream.$_realPause = true;
				$$this.$__domVideoView.pause();
			}

			return $$this.$$NetStream.$$pause || ($$this.$$NetStream.$$pause = pause);
		}});


		//public instance method
		Object.defineProperty(NetStream.prototype, 'play2', {
		get:function ()
		{
			var $$this = this;

			function play2($$$$param)
			{
				//set default parameter values
				var param = $es4.$$coerce($$$$param, NetStreamPlayOptions);

				throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "play2"'));
			}

			return $$this.$$NetStream.$$play2 || ($$this.$$NetStream.$$play2 = play2);
		}});


		//public instance method
		Object.defineProperty(NetStream.prototype, 'publish', {
		get:function ()
		{
			var $$this = this;

			function publish($$$$name, $$$$type)
			{
				//set default parameter values
				var name = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$name, String);
				var type = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$type, String);

				throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "publish"'));
			}

			return $$this.$$NetStream.$$publish || ($$this.$$NetStream.$$publish = publish);
		}});


		//public instance method
		Object.defineProperty(NetStream.prototype, 'receiveAudio', {
		get:function ()
		{
			var $$this = this;

			function receiveAudio($$$$flag)
			{
				//set default parameter values
				var flag = $es4.$$coerce($$$$flag, Boolean);

				throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "receiveAudio"'));
			}

			return $$this.$$NetStream.$$receiveAudio || ($$this.$$NetStream.$$receiveAudio = receiveAudio);
		}});


		//public instance method
		Object.defineProperty(NetStream.prototype, 'receiveVideo', {
		get:function ()
		{
			var $$this = this;

			function receiveVideo($$$$flag)
			{
				//set default parameter values
				var flag = $es4.$$coerce($$$$flag, Boolean);

				throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "receiveVideo"'));
			}

			return $$this.$$NetStream.$$receiveVideo || ($$this.$$NetStream.$$receiveVideo = receiveVideo);
		}});


		//public instance method
		Object.defineProperty(NetStream.prototype, 'receiveVideoFPS', {
		get:function ()
		{
			var $$this = this;

			function receiveVideoFPS($$$$FPS)
			{
				//set default parameter values
				var FPS = $es4.$$coerce($$$$FPS, Number);

				throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "receiveVideoFPS"'));
			}

			return $$this.$$NetStream.$$receiveVideoFPS || ($$this.$$NetStream.$$receiveVideoFPS = receiveVideoFPS);
		}});


		//public instance method
		Object.defineProperty(NetStream.prototype, 'resume', {
		get:function ()
		{
			var $$this = this;

			function resume()
			{
				if ($$this.$$NetStream.$_wasEnded && $$this.$$NetStream.$_endTime)
				{
					return;
				}
				$$this.$$NetStream.$_realPause = false;
				$$this.$__domVideoView.play();
			}

			return $$this.$$NetStream.$$resume || ($$this.$$NetStream.$$resume = resume);
		}});


		//public instance method
		Object.defineProperty(NetStream.prototype, 'seek', {
		get:function ()
		{
			var $$this = this;

			function seek($$$$offset)
			{
				//set default parameter values
				var offset = $es4.$$coerce($$$$offset, Number);

				if (offset == $$this.$__domVideoView.currentTime)
				{
					return;
				}
				if ($$this.$$NetStream.$_wasEnded)
				{
					if (offset >= $$this.$$NetStream.$_endTime)
					{
						return;
					}
					$$this.$$NetStream.$_wasEnded = false;
					$$this.$$NetStream.$_endTime = 0;
					$$this.$$NetStream.$_realPause = false;
					$$this.$__domVideoView.play();
				}
				$$this.dispatchEvent($es4.$$primitive(new NetStatusEvent(NetStatusEvent.NET_STATUS, false, false, {code:'NetStream.SeekStart.Notify'})));
				if ($$this.$$NetStream.$_duration == -1 && offset > $$this.$__domVideoView.buffered.end(0))
				{
					offset = $es4.$$coerce($$this.$__domVideoView.buffered.end(0) - 1, Number);
				}
				else if ($$this.$$NetStream.$_duration != -1 && offset >= $$this.$$NetStream.$_duration)
				{
					offset = $$this.$$NetStream.$_duration - 1;
				}
				$$this.$__domVideoView.currentTime = offset;
				$$this.dispatchEvent($es4.$$primitive(new NetStatusEvent(NetStatusEvent.NET_STATUS, false, false, {code:'NetStream.Seek.Notify'})));
			}

			return $$this.$$NetStream.$$seek || ($$this.$$NetStream.$$seek = seek);
		}});


		//public instance method
		Object.defineProperty(NetStream.prototype, 'send', {
		get:function ()
		{
			var $$this = this;

			function send($$$$handlerName, $$$$rest)
			{
				//set default parameter values
				var handlerName = $es4.$$coerce($$$$handlerName, String);
				for (var $$i = 1, $$length = arguments.length, rest = new Array($$length - 1); $$i < $$length; $$i += 1) rest[$$i - 1] = arguments[$$i];

				throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "send"'));
			}

			return $$this.$$NetStream.$$send || ($$this.$$NetStream.$$send = send);
		}});


		//public instance method
		Object.defineProperty(NetStream.prototype, 'step', {
		get:function ()
		{
			var $$this = this;

			function step($$$$frames)
			{
				//set default parameter values
				var frames = $es4.$$coerce($$$$frames, int);

				throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "step"'));
			}

			return $$this.$$NetStream.$$step || ($$this.$$NetStream.$$step = step);
		}});


		//public instance method
		Object.defineProperty(NetStream.prototype, 'togglePause', {
		get:function ()
		{
			var $$this = this;

			function togglePause()
			{
				throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "togglePause"'));
			}

			return $$this.$$NetStream.$$togglePause || ($$this.$$NetStream.$$togglePause = togglePause);
		}});

		Object.defineProperty(NetStream.prototype, 'client', {get:function ()
		{
			var $$this = this;
			return $$this.$_client;
		}, set:function ($$$$object)
		{
			//set default parameter values
			var object = $es4.$$coerce($$$$object, Object);

			var $$this = this;
			if (!object)
			{
				object = $$this;
			}
			$$this.$_client = object;
		}});
		Object.defineProperty(NetStream.prototype, 'audioCodec', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "audioCodec"'));
		}});
		Object.defineProperty(NetStream.prototype, 'audioReliable', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "audioReliable"'));
		}, set:function ($$$$reliable)
		{
			//set default parameter values
			var reliable = $es4.$$coerce($$$$reliable, Boolean);

			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "audioReliable"'));
		}});
		Object.defineProperty(NetStream.prototype, 'audioSampleAccess', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "audioSampleAccess"'));
		}, set:function ($$$$reliable)
		{
			//set default parameter values
			var reliable = $es4.$$coerce($$$$reliable, Boolean);

			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "audioSampleAccess"'));
		}});
		Object.defineProperty(NetStream.prototype, 'backBufferLength', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "backBufferLength"'));
		}});
		Object.defineProperty(NetStream.prototype, 'backBufferTime', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "backBufferTime"'));
		}, set:function ($$$$backBufferTime)
		{
			//set default parameter values
			var backBufferTime = $es4.$$coerce($$$$backBufferTime, Number);

			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "backBufferTime"'));
		}});
		Object.defineProperty(NetStream.prototype, 'bufferLength', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "bufferLength"'));
		}});
		Object.defineProperty(NetStream.prototype, 'bufferTime', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "bufferTime"'));
		}, set:function ($$$$bufferTime)
		{
			//set default parameter values
			var bufferTime = $es4.$$coerce($$$$bufferTime, Number);

			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "bufferTime"'));
		}});
		Object.defineProperty(NetStream.prototype, 'bufferTimeMax', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "bufferTimeMax"'));
		}, set:function ($$$$bufferTimeMax)
		{
			//set default parameter values
			var bufferTimeMax = $es4.$$coerce($$$$bufferTimeMax, Number);

			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "bufferTimeMax"'));
		}});
		Object.defineProperty(NetStream.prototype, 'bytesLoaded', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "bytesLoaded"'));
		}});
		Object.defineProperty(NetStream.prototype, 'bytesTotal', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "bytesTotal"'));
		}});
		Object.defineProperty(NetStream.prototype, 'checkPolicyFile', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "checkPolicyFile"'));
		}, set:function ($$$$state)
		{
			//set default parameter values
			var state = $es4.$$coerce($$$$state, Boolean);

			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "checkPolicyFile"'));
		}});
		Object.defineProperty(NetStream.prototype, 'currentFPS', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "currentFPS"'));
		}});
		Object.defineProperty(NetStream.prototype, 'dataReliable', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "dataReliable"'));
		}, set:function ($$$$reliable)
		{
			//set default parameter values
			var reliable = $es4.$$coerce($$$$reliable, Boolean);

			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "dataReliable"'));
		}});
		Object.defineProperty(NetStream.prototype, 'decodedFrames', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "decodedFrames"'));
		}});
		Object.defineProperty(NetStream.prototype, 'farID', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "farID"'));
		}});
		Object.defineProperty(NetStream.prototype, 'farNonce', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "farNonce"'));
		}});
		Object.defineProperty(NetStream.prototype, 'inBufferSeek', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "inBufferSeek"'));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "inBufferSeek"'));
		}});
		Object.defineProperty(NetStream.prototype, 'info', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "info"'));
		}});
		Object.defineProperty(NetStream.prototype, 'liveDelay', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "liveDelay"'));
		}});
		Object.defineProperty(NetStream.prototype, 'maxPauseBufferTime', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "maxPauseBufferTime"'));
		}, set:function ($$$$pauseBufferTime)
		{
			//set default parameter values
			var pauseBufferTime = $es4.$$coerce($$$$pauseBufferTime, Number);

			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "maxPauseBufferTime"'));
		}});
		Object.defineProperty(NetStream.prototype, 'multicastAvailabilitySendToAll', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "multicastAvailabilitySendToAll"'));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "multicastAvailabilitySendToAll"'));
		}});
		Object.defineProperty(NetStream.prototype, 'multicastAvailabilityUpdatePeriod', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "multicastAvailabilityUpdatePeriod"'));
		}, set:function ($$$$seconds)
		{
			//set default parameter values
			var seconds = $es4.$$coerce($$$$seconds, Number);

			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "multicastAvailabilityUpdatePeriod"'));
		}});
		Object.defineProperty(NetStream.prototype, 'multicastFetchPeriod', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "multicastFetchPeriod"'));
		}, set:function ($$$$seconds)
		{
			//set default parameter values
			var seconds = $es4.$$coerce($$$$seconds, Number);

			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "multicastFetchPeriod"'));
		}});
		Object.defineProperty(NetStream.prototype, 'multicastInfo', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "multicastInfo"'));
		}});
		Object.defineProperty(NetStream.prototype, 'multicastPushNeighborLimit', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "multicastPushNeighborLimit"'));
		}, set:function ($$$$neighbors)
		{
			//set default parameter values
			var neighbors = $es4.$$coerce($$$$neighbors, Number);

			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "multicastPushNeighborLimit"'));
		}});
		Object.defineProperty(NetStream.prototype, 'multicastRelayMarginDuration', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "multicastRelayMarginDuration"'));
		}, set:function ($$$$seconds)
		{
			//set default parameter values
			var seconds = $es4.$$coerce($$$$seconds, Number);

			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "multicastRelayMarginDuration"'));
		}});
		Object.defineProperty(NetStream.prototype, 'multicastWindowDuration', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "multicastWindowDuration"'));
		}, set:function ($$$$seconds)
		{
			//set default parameter values
			var seconds = $es4.$$coerce($$$$seconds, Number);

			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "multicastWindowDuration"'));
		}});
		Object.defineProperty(NetStream.prototype, 'nearNonce', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "nearNonce"'));
		}});
		Object.defineProperty(NetStream.prototype, 'objectEncoding', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "objectEncoding"'));
		}});
		Object.defineProperty(NetStream.prototype, 'peerStreams', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "peerStreams"'));
		}});
		Object.defineProperty(NetStream.prototype, 'soundTransform', {get:function ()
		{
			var $$this = this;
			return $$this.$$NetStream.$_soundTransform;
		}, set:function ($$$$soundTransform)
		{
			//set default parameter values
			var soundTransform = $es4.$$coerce($$$$soundTransform, SoundTransform);

			var $$this = this;
			$$this.$$NetStream.$_soundTransform = soundTransform;
			$$this.$__domVideoView.volume = soundTransform.volume;
		}});
		Object.defineProperty(NetStream.prototype, 'time', {get:function ()
		{
			var $$this = this;
			return Math.min($$this.$__domVideoView.currentTime, $$this.$$NetStream.$_duration);
		}});
		Object.defineProperty(NetStream.prototype, 'useHardwareDecoder', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "useHardwareDecoder"'));
		}, set:function ($$$$v)
		{
			//set default parameter values
			var v = $es4.$$coerce($$$$v, Boolean);

			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "useHardwareDecoder"'));
		}});
		Object.defineProperty(NetStream.prototype, 'videoCodec', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "videoCodec"'));
		}});
		Object.defineProperty(NetStream.prototype, 'videoReliable', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "videoReliable"'));
		}, set:function ($$$$reliable)
		{
			//set default parameter values
			var reliable = $es4.$$coerce($$$$reliable, Boolean);

			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "videoReliable"'));
		}});
		Object.defineProperty(NetStream.prototype, 'videoSampleAccess', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "videoSampleAccess"'));
		}, set:function ($$$$reliable)
		{
			//set default parameter values
			var reliable = $es4.$$coerce($$$$reliable, Boolean);

			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "videoSampleAccess"'));
		}});
		Object.defineProperty(NetStream.prototype, 'videoStreamSettings', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "videoStreamSettings"'));
		}, set:function ($$$$settings)
		{
			//set default parameter values
			var settings = $es4.$$coerce($$$$settings, VideoStreamSettings);

			var $$this = this;
			throw $es4.$$primitive(new Error('NetStream: attempted call to an unimplemented function "videoStreamSettings"'));
		}});

		//properties
		NetStream.prototype.$$v.$_soundTransform = {
		get:function () { var $$this = this.$$this; return $$this.$$NetStream.$$p.$_soundTransform; },
		set:function (value) { var $$this = this.$$this; $$this.$$NetStream.$$p.$_soundTransform = $es4.$$coerce(value, SoundTransform); }
		};

		NetStream.prototype.$$v.$_wasPaused = {
		get:function () { var $$this = this.$$this; return $$this.$$NetStream.$$p.$_wasPaused; },
		set:function (value) { var $$this = this.$$this; $$this.$$NetStream.$$p.$_wasPaused = $es4.$$coerce(value, Boolean); }
		};

		NetStream.prototype.$$v.$_wasEnded = {
		get:function () { var $$this = this.$$this; return $$this.$$NetStream.$$p.$_wasEnded; },
		set:function (value) { var $$this = this.$$this; $$this.$$NetStream.$$p.$_wasEnded = $es4.$$coerce(value, Boolean); }
		};

		NetStream.prototype.$$v.$_endTime = {
		get:function () { var $$this = this.$$this; return $$this.$$NetStream.$$p.$_endTime; },
		set:function (value) { var $$this = this.$$this; $$this.$$NetStream.$$p.$_endTime = $es4.$$coerce(value, Number); }
		};

		NetStream.prototype.$$v.$_realPause = {
		get:function () { var $$this = this.$$this; return $$this.$$NetStream.$$p.$_realPause; },
		set:function (value) { var $$this = this.$$this; $$this.$$NetStream.$$p.$_realPause = $es4.$$coerce(value, Boolean); }
		};

		Object.defineProperty(NetStream.prototype, '$__suspended', {
		get:function () { var $$this = this; return $$this.$$NetStream.$__suspended; },
		set:function (value) { var $$this = this; $$this.$$NetStream.$__suspended = $es4.$$coerce(value, Boolean); }
		});

		NetStream.prototype.$$v.$_duration = {
		get:function () { var $$this = this.$$this; return $$this.$$NetStream.$$p.$_duration; },
		set:function (value) { var $$this = this.$$this; $$this.$$NetStream.$$p.$_duration = $es4.$$coerce(value, Number); }
		};

		Object.defineProperty(NetStream.prototype, '$__domVideoView', {
		get:function () { var $$this = this; return $$this.$$NetStream.$__domVideoView; },
		set:function (value) { var $$this = this; $$this.$$NetStream.$__domVideoView = $es4.$$coerce(value, Object); }
		});

		Object.defineProperty(NetStream.prototype, '$_client', {
		get:function () { var $$this = this; return $$this.$$NetStream.$_client; },
		set:function (value) { var $$this = this; $$this.$$NetStream.$_client = $es4.$$coerce(value, Object); }
		});

	});

	//class initializer
	NetStream.$$cinit = (function ()
	{
		NetStream.$$cinit = undefined;

		//initialize properties
		$$j.$__PLAYING = $es4.$$coerce('playing', String);
		$$j.$__VIDEO_CREATED = $es4.$$coerce('videoCreated', String);
	
	});

	function NetStream()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof NetStream) || $$this.$$NetStream !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], NetStream) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			NetStream.$$construct($$this, $$args);
		}
	}

	//construct
	NetStream.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (NetStream.$$cinit !== undefined) NetStream.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$NetStream', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$NetStream, '$_soundTransform', NetStream.prototype.$$v.$_soundTransform);
		Object.defineProperty($$this.$$NetStream, '$_wasPaused', NetStream.prototype.$$v.$_wasPaused);
		Object.defineProperty($$this.$$NetStream, '$_wasEnded', NetStream.prototype.$$v.$_wasEnded);
		Object.defineProperty($$this.$$NetStream, '$_endTime', NetStream.prototype.$$v.$_endTime);
		Object.defineProperty($$this.$$NetStream, '$_realPause', NetStream.prototype.$$v.$_realPause);
		Object.defineProperty($$this.$$NetStream, '$_duration', NetStream.prototype.$$v.$_duration);

		//call construct on super
		EventDispatcher.$$construct($$this);

		//initialize properties
		NetStream.$$iinit($$this);

		//call constructor
		if (args !== undefined) NetStream.$$constructor.apply($$this, args);
	});

	//initializer
	NetStream.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$NetStream.$$p.$_soundTransform = $es4.$$coerce($es4.$$primitive(new SoundTransform()), SoundTransform);
		$$this.$$NetStream.$$p.$_wasPaused = $es4.$$coerce(undefined, Boolean);
		$$this.$$NetStream.$$p.$_wasEnded = $es4.$$coerce(true, Boolean);
		$$this.$$NetStream.$$p.$_endTime = $es4.$$coerce(0, Number);
		$$this.$$NetStream.$$p.$_realPause = $es4.$$coerce(undefined, Boolean);
		$$this.$$NetStream.$__suspended = $es4.$$coerce(undefined, Boolean);
		$$this.$$NetStream.$$p.$_duration = $es4.$$coerce(-1, Number);
		$$this.$$NetStream.$__domVideoView = $es4.$$coerce(undefined, Object);
		$$this.$$NetStream.$_client = $es4.$$coerce(undefined, Object);
	
		//call iinit on super
		EventDispatcher.$$iinit($$this);
	});

	//constructor
	NetStream.$$constructor = (function ($$$$connection, $$$$peerID)
	{
		var $$this = this;
		//set default parameter values
		var connection = $es4.$$coerce($$$$connection, NetConnection);
		var peerID = (1 > arguments.length - 1) ? "connectToFMS" : $es4.$$coerce($$$$peerID, String);

		EventDispatcher.$$constructor.call($$this);
		$$this.$_client = $$this;
	});

	return $es4.$$class(NetStream, {EXTENDS:'flash.events.EventDispatcher'}, 'flash.net::NetStream');
})();
//flash.net.NetStream


//flash.text.engine.CFFHinting
$es4.$$package('flash.text.engine').CFFHinting = function () { throw new Error('Use of unimplemented class: CFFHinting'); }
//flash.text.engine.CFFHinting


//flash.text.engine.SpaceJustifier
$es4.$$package('flash.text.engine').SpaceJustifier = function () { throw new Error('Use of unimplemented class: SpaceJustifier'); }
//flash.text.engine.SpaceJustifier


//flash.net.NetGroupInfo
$es4.$$package('flash.net').NetGroupInfo = function () { throw new Error('Use of unimplemented class: NetGroupInfo'); }
//flash.net.NetGroupInfo


//flash.display.ShaderParameter
$es4.$$package('flash.display').ShaderParameter = function () { throw new Error('Use of unimplemented class: ShaderParameter'); }
//flash.display.ShaderParameter


//flash.text.engine.LigatureLevel
$es4.$$package('flash.text.engine').LigatureLevel = function () { throw new Error('Use of unimplemented class: LigatureLevel'); }
//flash.text.engine.LigatureLevel


//flash.geom.Matrix
$es4.$$package('flash.geom').Matrix = (function ()
{
	//imports
	var Point;
	var Vector3D;
	var Matrix;

	//properties
	var $$j = {};
	Object.defineProperty(Matrix, 'MAGIC_GRADIENT_FACTOR', {
	get:function () { if (Matrix.$$cinit !== undefined) Matrix.$$cinit(); return $$j.MAGIC_GRADIENT_FACTOR; },
	set:function (value) { if (Matrix.$$cinit !== undefined) Matrix.$$cinit(); $$j.MAGIC_GRADIENT_FACTOR = $es4.$$coerce(value, Number); }
	});


	//class pre initializer
	Matrix.$$sinit = (function ()
	{
		Matrix.$$sinit = undefined;

		//initialize imports
		Point = $es4.$$['flash.geom'].Point;
		Vector3D = $es4.$$['flash.geom'].Vector3D;

		//set prototype and constructor
		Matrix.prototype = Object.create(Object.prototype);
		Object.defineProperty(Matrix.prototype, "constructor", { value: Matrix, enumerable: false });

		//hold private values
		Object.defineProperty(Matrix.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(Matrix.prototype, 'clone', {
		get:function ()
		{
			var $$this = this;

			function clone()
			{
				return $es4.$$coerce($es4.$$primitive(new Matrix($$this.a, $$this.b, $$this.c, $$this.d, $$this.tx, $$this.ty)), $es4.$$['flash.geom'].Matrix);
			}

			return $$this.$$Matrix.$$clone || ($$this.$$Matrix.$$clone = clone);
		}});


		//public instance method
		Object.defineProperty(Matrix.prototype, 'concat', {
		get:function ()
		{
			var $$this = this;

			function concat($$$$m)
			{
				//set default parameter values
				var m = $es4.$$coerce($$$$m, $es4.$$['flash.geom'].Matrix);

				var a = $es4.$$coerce($$this.a, Number);
				var b = $es4.$$coerce($$this.b, Number);
				var c = $es4.$$coerce($$this.c, Number);
				var d = $es4.$$coerce($$this.d, Number);
				var tx = $es4.$$coerce($$this.tx, Number);
				var ty = $es4.$$coerce($$this.ty, Number);
				$$this.a = m.a * a + m.c * b;
				$$this.b = m.b * a + m.d * b;
				$$this.c = m.a * c + m.c * d;
				$$this.d = m.b * c + m.d * d;
				$$this.tx = m.a * tx + m.c * ty + m.tx;
				$$this.ty = m.b * tx + m.d * ty + m.ty;
			}

			return $$this.$$Matrix.$$concat || ($$this.$$Matrix.$$concat = concat);
		}});


		//public instance method
		Object.defineProperty(Matrix.prototype, 'copyColumnFrom', {
		get:function ()
		{
			var $$this = this;

			function copyColumnFrom($$$$column, $$$$vector3D)
			{
				//set default parameter values
				var column = $es4.$$coerce($$$$column, uint);
				var vector3D = $es4.$$coerce($$$$vector3D, Vector3D);

				throw $es4.$$primitive(new Error('Matrix: attempted call to an unimplemented function "copyColumnFrom"'));
			}

			return $$this.$$Matrix.$$copyColumnFrom || ($$this.$$Matrix.$$copyColumnFrom = copyColumnFrom);
		}});


		//public instance method
		Object.defineProperty(Matrix.prototype, 'copyColumnTo', {
		get:function ()
		{
			var $$this = this;

			function copyColumnTo($$$$column, $$$$vector3D)
			{
				//set default parameter values
				var column = $es4.$$coerce($$$$column, uint);
				var vector3D = $es4.$$coerce($$$$vector3D, Vector3D);

				throw $es4.$$primitive(new Error('Matrix: attempted call to an unimplemented function "copyColumnTo"'));
			}

			return $$this.$$Matrix.$$copyColumnTo || ($$this.$$Matrix.$$copyColumnTo = copyColumnTo);
		}});


		//public instance method
		Object.defineProperty(Matrix.prototype, 'copyFrom', {
		get:function ()
		{
			var $$this = this;

			function copyFrom($$$$sourceMatrix)
			{
				//set default parameter values
				var sourceMatrix = $es4.$$coerce($$$$sourceMatrix, $es4.$$['flash.geom'].Matrix);

				throw $es4.$$primitive(new Error('Matrix: attempted call to an unimplemented function "copyFrom"'));
			}

			return $$this.$$Matrix.$$copyFrom || ($$this.$$Matrix.$$copyFrom = copyFrom);
		}});


		//public instance method
		Object.defineProperty(Matrix.prototype, 'copyRowFrom', {
		get:function ()
		{
			var $$this = this;

			function copyRowFrom($$$$row, $$$$vector3D)
			{
				//set default parameter values
				var row = $es4.$$coerce($$$$row, uint);
				var vector3D = $es4.$$coerce($$$$vector3D, Vector3D);

				throw $es4.$$primitive(new Error('Matrix: attempted call to an unimplemented function "copyRowFrom"'));
			}

			return $$this.$$Matrix.$$copyRowFrom || ($$this.$$Matrix.$$copyRowFrom = copyRowFrom);
		}});


		//public instance method
		Object.defineProperty(Matrix.prototype, 'copyRowTo', {
		get:function ()
		{
			var $$this = this;

			function copyRowTo($$$$row, $$$$vector3D)
			{
				//set default parameter values
				var row = $es4.$$coerce($$$$row, uint);
				var vector3D = $es4.$$coerce($$$$vector3D, Vector3D);

				throw $es4.$$primitive(new Error('Matrix: attempted call to an unimplemented function "copyRowTo"'));
			}

			return $$this.$$Matrix.$$copyRowTo || ($$this.$$Matrix.$$copyRowTo = copyRowTo);
		}});


		//public instance method
		Object.defineProperty(Matrix.prototype, 'createBox', {
		get:function ()
		{
			var $$this = this;

			function createBox($$$$scaleX, $$$$scaleY, $$$$rotation, $$$$tx, $$$$ty)
			{
				//set default parameter values
				var scaleX = $es4.$$coerce($$$$scaleX, Number);
				var scaleY = $es4.$$coerce($$$$scaleY, Number);
				var rotation = (2 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$rotation, Number);
				var tx = (3 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$tx, Number);
				var ty = (4 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$ty, Number);

				if (rotation === 0)
				{
					$$this.a = $$this.d = 1;
					$$this.b = $$this.c = 0;
				}
				else
				{
					$$this.a = Math.cos(rotation);
					$$this.b = Math.sin(rotation);
					$$this.c = -$$this.b;
					$$this.d = $$this.a;
				}
				if (scaleX !== 1)
				{
					$$this.a *= scaleX;
					$$this.c *= scaleX;
				}
				if (scaleY !== 1)
				{
					$$this.b *= scaleY;
					$$this.d *= scaleY;
				}
				$$this.tx = tx;
				$$this.ty = ty;
			}

			return $$this.$$Matrix.$$createBox || ($$this.$$Matrix.$$createBox = createBox);
		}});


		//public instance method
		Object.defineProperty(Matrix.prototype, 'createGradientBox', {
		get:function ()
		{
			var $$this = this;

			function createGradientBox($$$$width, $$$$height, $$$$rotation, $$$$tx, $$$$ty)
			{
				//set default parameter values
				var width = $es4.$$coerce($$$$width, Number);
				var height = $es4.$$coerce($$$$height, Number);
				var rotation = (2 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$rotation, Number);
				var tx = (3 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$tx, Number);
				var ty = (4 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$ty, Number);

				$$this.createBox(width / Matrix.MAGIC_GRADIENT_FACTOR, height / Matrix.MAGIC_GRADIENT_FACTOR, rotation, tx + width / 2, ty + height / 2);
			}

			return $$this.$$Matrix.$$createGradientBox || ($$this.$$Matrix.$$createGradientBox = createGradientBox);
		}});


		//public instance method
		Object.defineProperty(Matrix.prototype, 'deltaTransformPoint', {
		get:function ()
		{
			var $$this = this;

			function deltaTransformPoint($$$$point)
			{
				//set default parameter values
				var point = $es4.$$coerce($$$$point, Point);

				return $es4.$$primitive(new Point($$this.a * point.x + $$this.c * point.y, $$this.b * point.x + $$this.d * point.y));
			}

			return $$this.$$Matrix.$$deltaTransformPoint || ($$this.$$Matrix.$$deltaTransformPoint = deltaTransformPoint);
		}});


		//public instance method
		Object.defineProperty(Matrix.prototype, '$__deltaTransformPoint', {
		get:function ()
		{
			var $$this = this;

			function $__deltaTransformPoint($$$$x, $$$$y)
			{
				//set default parameter values
				var x = $es4.$$coerce($$$$x, Number);
				var y = $es4.$$coerce($$$$y, Number);

				return [$$this.a * x + $$this.c * y, $$this.b * x + $$this.d * y];
			}

			return $$this.$$Matrix.$$$__deltaTransformPoint || ($$this.$$Matrix.$$$__deltaTransformPoint = $__deltaTransformPoint);
		}});


		//public instance method
		Object.defineProperty(Matrix.prototype, 'identity', {
		get:function ()
		{
			var $$this = this;

			function identity()
			{
				$$this.a = $$this.d = 1;
				$$this.b = $$this.c = $$this.tx = $$this.ty = 0;
			}

			return $$this.$$Matrix.$$identity || ($$this.$$Matrix.$$identity = identity);
		}});


		//public instance method
		Object.defineProperty(Matrix.prototype, 'invert', {
		get:function ()
		{
			var $$this = this;

			function invert()
			{
				var a = $es4.$$coerce($$this.a, Number);
				var b = $es4.$$coerce($$this.b, Number);
				var c = $es4.$$coerce($$this.c, Number);
				var d = $es4.$$coerce($$this.d, Number);
				var tx = $es4.$$coerce($$this.tx, Number);
				var ty = $es4.$$coerce($$this.ty, Number);
				var det = a * d - c * b;
				$$this.a = d / det;
				$$this.b = -b / det;
				$$this.c = -c / det;
				$$this.d = a / det;
				$$this.tx = -($$this.a * tx + $$this.c * ty);
				$$this.ty = -($$this.b * tx + $$this.d * ty);
			}

			return $$this.$$Matrix.$$invert || ($$this.$$Matrix.$$invert = invert);
		}});


		//public instance method
		Object.defineProperty(Matrix.prototype, 'rotate', {
		get:function ()
		{
			var $$this = this;

			function rotate($$$$angle)
			{
				//set default parameter values
				var angle = $es4.$$coerce($$$$angle, Number);

				if (angle != 0)
				{
					var cos = Math.cos(angle);
					var sin = Math.sin(angle);
					var a = $es4.$$coerce($$this.a, Number);
					var b = $es4.$$coerce($$this.b, Number);
					var c = $es4.$$coerce($$this.c, Number);
					var d = $es4.$$coerce($$this.d, Number);
					var tx = $es4.$$coerce($$this.tx, Number);
					var ty = $es4.$$coerce($$this.ty, Number);
					$$this.a = a * cos - b * sin;
					$$this.b = a * sin + b * cos;
					$$this.c = c * cos - d * sin;
					$$this.d = c * sin + d * cos;
					$$this.tx = tx * cos - ty * sin;
					$$this.ty = tx * sin + ty * cos;
				}
			}

			return $$this.$$Matrix.$$rotate || ($$this.$$Matrix.$$rotate = rotate);
		}});


		//public instance method
		Object.defineProperty(Matrix.prototype, '$__rotate', {
		get:function ()
		{
			var $$this = this;

			function $__rotate($$$$angle)
			{
				//set default parameter values
				var angle = $es4.$$coerce($$$$angle, Number);

				if (angle != 0)
				{
					var cos = Math.cos(angle);
					var sin = Math.sin(angle);
					var a = $es4.$$coerce($$this.a, Number);
					var b = $es4.$$coerce($$this.b, Number);
					var c = $es4.$$coerce($$this.c, Number);
					var d = $es4.$$coerce($$this.d, Number);
					$$this.a = a * cos - b * sin;
					$$this.b = a * sin + b * cos;
					$$this.c = c * cos - d * sin;
					$$this.d = c * sin + d * cos;
				}
			}

			return $$this.$$Matrix.$$$__rotate || ($$this.$$Matrix.$$$__rotate = $__rotate);
		}});


		//public instance method
		Object.defineProperty(Matrix.prototype, 'scale', {
		get:function ()
		{
			var $$this = this;

			function scale($$$$sx, $$$$sy)
			{
				//set default parameter values
				var sx = $es4.$$coerce($$$$sx, Number);
				var sy = $es4.$$coerce($$$$sy, Number);

				if (sx !== 1)
				{
					$$this.a *= sx;
					$$this.c *= sx;
					$$this.tx *= sx;
				}
				if (sy !== 1)
				{
					$$this.b *= sy;
					$$this.d *= sy;
					$$this.ty *= sy;
				}
			}

			return $$this.$$Matrix.$$scale || ($$this.$$Matrix.$$scale = scale);
		}});


		//public instance method
		Object.defineProperty(Matrix.prototype, '$__scale', {
		get:function ()
		{
			var $$this = this;

			function $__scale($$$$sx, $$$$sy)
			{
				//set default parameter values
				var sx = $es4.$$coerce($$$$sx, Number);
				var sy = $es4.$$coerce($$$$sy, Number);

				if (sx !== 1)
				{
					$$this.a *= sx;
					$$this.c *= sx;
				}
				if (sy !== 1)
				{
					$$this.b *= sy;
					$$this.d *= sy;
				}
			}

			return $$this.$$Matrix.$$$__scale || ($$this.$$Matrix.$$$__scale = $__scale);
		}});


		//public instance method
		Object.defineProperty(Matrix.prototype, 'setTo', {
		get:function ()
		{
			var $$this = this;

			function setTo($$$$aa, $$$$ba, $$$$ca, $$$$da, $$$$txa, $$$$tya)
			{
				//set default parameter values
				var aa = $es4.$$coerce($$$$aa, Number);
				var ba = $es4.$$coerce($$$$ba, Number);
				var ca = $es4.$$coerce($$$$ca, Number);
				var da = $es4.$$coerce($$$$da, Number);
				var txa = $es4.$$coerce($$$$txa, Number);
				var tya = $es4.$$coerce($$$$tya, Number);

				$$this.a = $$this.a;
				$$this.b = $$this.b;
				$$this.c = $$this.c;
				$$this.d = $$this.d;
				$$this.tx = $$this.tx;
				$$this.ty = $$this.ty;
			}

			return $$this.$$Matrix.$$setTo || ($$this.$$Matrix.$$setTo = setTo);
		}});


		//public instance method
		Object.defineProperty(Matrix.prototype, 'toString', {
		get:function ()
		{
			var $$this = this;

			function toString()
			{
				return "(" + ["a=" + $$this.a, "b=" + $$this.b, "c=" + $$this.c, "d=" + $$this.d, "tx=" + $$this.tx, "ty=" + $$this.ty].join(", ") + ")";
			}

			return $$this.$$Matrix.$$toString || ($$this.$$Matrix.$$toString = toString);
		}});


		//public instance method
		Object.defineProperty(Matrix.prototype, 'transformPoint', {
		get:function ()
		{
			var $$this = this;

			function transformPoint($$$$point)
			{
				//set default parameter values
				var point = $es4.$$coerce($$$$point, Point);

				return $es4.$$primitive(new Point($$this.a * point.x + $$this.c * point.y + $$this.tx, $$this.b * point.x + $$this.d * point.y + $$this.ty));
			}

			return $$this.$$Matrix.$$transformPoint || ($$this.$$Matrix.$$transformPoint = transformPoint);
		}});


		//public instance method
		Object.defineProperty(Matrix.prototype, '$__transformPoint', {
		get:function ()
		{
			var $$this = this;

			function $__transformPoint($$$$x, $$$$y)
			{
				//set default parameter values
				var x = $es4.$$coerce($$$$x, Number);
				var y = $es4.$$coerce($$$$y, Number);

				return [$$this.a * x + $$this.c * y + $$this.tx, $$this.b * x + $$this.d * y + $$this.ty];
			}

			return $$this.$$Matrix.$$$__transformPoint || ($$this.$$Matrix.$$$__transformPoint = $__transformPoint);
		}});


		//public instance method
		Object.defineProperty(Matrix.prototype, 'translate', {
		get:function ()
		{
			var $$this = this;

			function translate($$$$dx, $$$$dy)
			{
				//set default parameter values
				var dx = $es4.$$coerce($$$$dx, Number);
				var dy = $es4.$$coerce($$$$dy, Number);

				$$this.tx += dx;
				$$this.ty += dy;
			}

			return $$this.$$Matrix.$$translate || ($$this.$$Matrix.$$translate = translate);
		}});

		//properties
		Object.defineProperty(Matrix.prototype, 'a', {
		get:function () { var $$this = this; return $$this.$$Matrix.a; },
		set:function (value) { var $$this = this; $$this.$$Matrix.a = $es4.$$coerce(value, Number); }
		});

		Object.defineProperty(Matrix.prototype, 'b', {
		get:function () { var $$this = this; return $$this.$$Matrix.b; },
		set:function (value) { var $$this = this; $$this.$$Matrix.b = $es4.$$coerce(value, Number); }
		});

		Object.defineProperty(Matrix.prototype, 'c', {
		get:function () { var $$this = this; return $$this.$$Matrix.c; },
		set:function (value) { var $$this = this; $$this.$$Matrix.c = $es4.$$coerce(value, Number); }
		});

		Object.defineProperty(Matrix.prototype, 'd', {
		get:function () { var $$this = this; return $$this.$$Matrix.d; },
		set:function (value) { var $$this = this; $$this.$$Matrix.d = $es4.$$coerce(value, Number); }
		});

		Object.defineProperty(Matrix.prototype, 'tx', {
		get:function () { var $$this = this; return $$this.$$Matrix.tx; },
		set:function (value) { var $$this = this; $$this.$$Matrix.tx = $es4.$$coerce(value, Number); }
		});

		Object.defineProperty(Matrix.prototype, 'ty', {
		get:function () { var $$this = this; return $$this.$$Matrix.ty; },
		set:function (value) { var $$this = this; $$this.$$Matrix.ty = $es4.$$coerce(value, Number); }
		});

	});

	//class initializer
	Matrix.$$cinit = (function ()
	{
		Matrix.$$cinit = undefined;

		//initialize properties
		$$j.MAGIC_GRADIENT_FACTOR = $es4.$$coerce(16384 / 10, Number);
	
	});

	function Matrix()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof Matrix) || $$this.$$Matrix !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Matrix) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			Matrix.$$construct($$this, $$args);
		}
	}

	//construct
	Matrix.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (Matrix.$$cinit !== undefined) Matrix.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$Matrix', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		Matrix.$$iinit($$this);

		//call constructor
		if (args !== undefined) Matrix.$$constructor.apply($$this, args);
	});

	//initializer
	Matrix.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$Matrix.a = $es4.$$coerce(undefined, Number);
		$$this.$$Matrix.b = $es4.$$coerce(undefined, Number);
		$$this.$$Matrix.c = $es4.$$coerce(undefined, Number);
		$$this.$$Matrix.d = $es4.$$coerce(undefined, Number);
		$$this.$$Matrix.tx = $es4.$$coerce(undefined, Number);
		$$this.$$Matrix.ty = $es4.$$coerce(undefined, Number);
	
	});

	//constructor
	Matrix.$$constructor = (function ($$$$a, $$$$b, $$$$c, $$$$d, $$$$tx, $$$$ty)
	{
		var $$this = this;
		//set default parameter values
		var a = (0 > arguments.length - 1) ? 1 : $es4.$$coerce($$$$a, Number);
		var b = (1 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$b, Number);
		var c = (2 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$c, Number);
		var d = (3 > arguments.length - 1) ? 1 : $es4.$$coerce($$$$d, Number);
		var tx = (4 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$tx, Number);
		var ty = (5 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$ty, Number);

		$$this.a = a;
		$$this.b = b;
		$$this.c = c;
		$$this.d = d;
		$$this.tx = tx;
		$$this.ty = ty;
	});

	return $es4.$$class(Matrix, null, 'flash.geom::Matrix');
})();
//flash.geom.Matrix


//flash.filters.GradientBevelFilter
$es4.$$package('flash.filters').GradientBevelFilter = function () { throw new Error('Use of unimplemented class: GradientBevelFilter'); }
//flash.filters.GradientBevelFilter


//flash.errors.IllegalOperationError
$es4.$$package('flash.errors').IllegalOperationError = function () { throw new Error('Use of unimplemented class: IllegalOperationError'); }
//flash.errors.IllegalOperationError


//flash.events.GestureEvent
$es4.$$package('flash.events').GestureEvent = function () { throw new Error('Use of unimplemented class: GestureEvent'); }
//flash.events.GestureEvent


//flash.net.SharedObject
$es4.$$package('flash.net').SharedObject = (function ()
{
	//imports
	var EventDispatcher;
	var NetConnection;
	var SharedObject;

	//properties
	var $$j = {};
	Object.defineProperty(SharedObject, '$_dataAssociations', {
	get:function () { if (SharedObject.$$cinit !== undefined) SharedObject.$$cinit(); return $$j.$_dataAssociations; },
	set:function (value) { if (SharedObject.$$cinit !== undefined) SharedObject.$$cinit(); $$j.$_dataAssociations = $es4.$$coerce(value, Object); }
	});


	//class pre initializer
	SharedObject.$$sinit = (function ()
	{
		SharedObject.$$sinit = undefined;

		//initialize imports
		EventDispatcher = $es4.$$['flash.events'].EventDispatcher;
		NetConnection = $es4.$$['flash.net'].NetConnection;

		//ensure $$sinit is called on super class
		if (EventDispatcher.$$sinit !== undefined) EventDispatcher.$$sinit();

		//set prototype and constructor
		SharedObject.prototype = Object.create(EventDispatcher.prototype);
		Object.defineProperty(SharedObject.prototype, "constructor", { value: SharedObject, enumerable: false });

		//hold private values
		Object.defineProperty(SharedObject.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(SharedObject.prototype, 'clear', {
		get:function ()
		{
			var $$this = this;

			function clear()
			{
				for (var prop in $$this.$_data)
				{
					delete $$this.$_data[prop];
				}
				SharedObject.$_deleteCookie($$this.$_name + "___" + $$this.$_localPath);
			}

			return $$this.$$SharedObject.$$clear || ($$this.$$SharedObject.$$clear = clear);
		}});


		//public instance method
		Object.defineProperty(SharedObject.prototype, 'close', {
		get:function ()
		{
			var $$this = this;

			function close()
			{
				throw $es4.$$primitive(new Error('SharedObject: attempted call to an unimplemented function "close"'));
			}

			return $$this.$$SharedObject.$$close || ($$this.$$SharedObject.$$close = close);
		}});


		//public instance method
		Object.defineProperty(SharedObject.prototype, 'connect', {
		get:function ()
		{
			var $$this = this;

			function connect($$$$myConnection, $$$$params)
			{
				//set default parameter values
				var myConnection = $es4.$$coerce($$$$myConnection, NetConnection);
				var params = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$params, String);

				throw $es4.$$primitive(new Error('SharedObject: attempted call to an unimplemented function "connect"'));
			}

			return $$this.$$SharedObject.$$connect || ($$this.$$SharedObject.$$connect = connect);
		}});


		//public instance method
		Object.defineProperty(SharedObject.prototype, 'flush', {
		get:function ()
		{
			var $$this = this;

			function flush($$$$minDiskSpace)
			{
				//set default parameter values
				var minDiskSpace = (0 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$minDiskSpace, int);

				return SharedObject.$_setCookie($$this.$_name + "___" + $$this.$_localPath, JSON.stringify($$this.$_data), 99999);
			}

			return $$this.$$SharedObject.$$flush || ($$this.$$SharedObject.$$flush = flush);
		}});


		//public instance method
		Object.defineProperty(SharedObject.prototype, 'send', {
		get:function ()
		{
			var $$this = this;

			function send($$$$rest)
			{
				//set default parameter values
				for (var $$i = 0, $$length = arguments.length, rest = new Array($$length - 0); $$i < $$length; $$i += 1) rest[$$i - 0] = arguments[$$i];

				throw $es4.$$primitive(new Error('SharedObject: attempted call to an unimplemented function "send"'));
			}

			return $$this.$$SharedObject.$$send || ($$this.$$SharedObject.$$send = send);
		}});


		//public instance method
		Object.defineProperty(SharedObject.prototype, 'setDirty', {
		get:function ()
		{
			var $$this = this;

			function setDirty($$$$propertyName)
			{
				//set default parameter values
				var propertyName = $es4.$$coerce($$$$propertyName, String);

				throw $es4.$$primitive(new Error('SharedObject: attempted call to an unimplemented function "setDirty"'));
			}

			return $$this.$$SharedObject.$$setDirty || ($$this.$$SharedObject.$$setDirty = setDirty);
		}});


		//public instance method
		Object.defineProperty(SharedObject.prototype, 'setProperty', {
		get:function ()
		{
			var $$this = this;

			function setProperty($$$$propertyName, $$$$value)
			{
				//set default parameter values
				var propertyName = $es4.$$coerce($$$$propertyName, String);
				var value = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$value, Object);

				throw $es4.$$primitive(new Error('SharedObject: attempted call to an unimplemented function "setProperty"'));
			}

			return $$this.$$SharedObject.$$setProperty || ($$this.$$SharedObject.$$setProperty = setProperty);
		}});

		Object.defineProperty(SharedObject.prototype, 'client', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('SharedObject: attempted call to an unimplemented function "client"'));
		}, set:function ($$$$object)
		{
			//set default parameter values
			var object = $es4.$$coerce($$$$object, Object);

			var $$this = this;
			throw $es4.$$primitive(new Error('SharedObject: attempted call to an unimplemented function "client"'));
		}});
		Object.defineProperty(SharedObject.prototype, 'data', {get:function ()
		{
			var $$this = this;
			return $$this.$_data;
		}});
		Object.defineProperty(SharedObject.prototype, 'fps', {set:function ($$$$updatesPerSecond)
		{
			//set default parameter values
			var updatesPerSecond = $es4.$$coerce($$$$updatesPerSecond, Number);

			var $$this = this;
			throw $es4.$$primitive(new Error('SharedObject: attempted call to an unimplemented function "fps"'));
		}});
		Object.defineProperty(SharedObject.prototype, 'objectEncoding', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('SharedObject: attempted call to an unimplemented function "objectEncoding"'));
		}, set:function ($$$$version)
		{
			//set default parameter values
			var version = $es4.$$coerce($$$$version, uint);

			var $$this = this;
			throw $es4.$$primitive(new Error('SharedObject: attempted call to an unimplemented function "objectEncoding"'));
		}});
		Object.defineProperty(SharedObject.prototype, 'size', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('SharedObject: attempted call to an unimplemented function "size"'));
		}});

		//properties
		Object.defineProperty(SharedObject.prototype, '$_name', {
		get:function () { var $$this = this; return $$this.$$SharedObject.$_name; },
		set:function (value) { var $$this = this; $$this.$$SharedObject.$_name = $es4.$$coerce(value, String); }
		});

		Object.defineProperty(SharedObject.prototype, '$_localPath', {
		get:function () { var $$this = this; return $$this.$$SharedObject.$_localPath; },
		set:function (value) { var $$this = this; $$this.$$SharedObject.$_localPath = $es4.$$coerce(value, String); }
		});

		Object.defineProperty(SharedObject.prototype, '$_secure', {
		get:function () { var $$this = this; return $$this.$$SharedObject.$_secure; },
		set:function (value) { var $$this = this; $$this.$$SharedObject.$_secure = $es4.$$coerce(value, Boolean); }
		});

		Object.defineProperty(SharedObject.prototype, '$_data', {
		get:function () { var $$this = this; return $$this.$$SharedObject.$_data; },
		set:function (value) { var $$this = this; $$this.$$SharedObject.$_data = $es4.$$coerce(value, Object); }
		});

	});

	//class initializer
	SharedObject.$$cinit = (function ()
	{
		SharedObject.$$cinit = undefined;

		//initialize properties
		$$j.$_dataAssociations = $es4.$$coerce({}, Object);
	
	});

	//public static method
	SharedObject.deleteAll = (function ($$$$url)
	{
		if (SharedObject.$$cinit !== undefined) SharedObject.$$cinit();

		//set default parameter values
		var url = $es4.$$coerce($$$$url, String);

		throw $es4.$$primitive(new Error('SharedObject: attempted call to an unimplemented function "deleteAll"'));
	});

	//public static method
	SharedObject.getDiskUsage = (function ($$$$url)
	{
		if (SharedObject.$$cinit !== undefined) SharedObject.$$cinit();

		//set default parameter values
		var url = $es4.$$coerce($$$$url, String);

		throw $es4.$$primitive(new Error('SharedObject: attempted call to an unimplemented function "getDiskUsage"'));
	});

	//public static method
	SharedObject.getLocal = (function ($$$$name, $$$$localPath, $$$$secure)
	{
		if (SharedObject.$$cinit !== undefined) SharedObject.$$cinit();

		//set default parameter values
		var name = $es4.$$coerce($$$$name, String);
		var localPath = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$localPath, String);
		var secure = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$secure, Boolean);

		return $es4.$$coerce($es4.$$primitive(new SharedObject(name, localPath, secure)), $es4.$$['flash.net'].SharedObject);
	});

	//public static method
	SharedObject.getRemote = (function ($$$$name, $$$$remotePath, $$$$persistence, $$$$secure)
	{
		if (SharedObject.$$cinit !== undefined) SharedObject.$$cinit();

		//set default parameter values
		var name = $es4.$$coerce($$$$name, String);
		var remotePath = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$remotePath, String);
		var persistence = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$persistence, Object);
		var secure = (3 > arguments.length - 1) ? false : $es4.$$coerce($$$$secure, Boolean);

		throw $es4.$$primitive(new Error('SharedObject: attempted call to an unimplemented function "getRemote"'));
	});

	//protected static method
	SharedObject.$_setCookie = (function ($$$$cookie_name, $$$$cookie_value, $$$$extendDays)
	{
		if (SharedObject.$$cinit !== undefined) SharedObject.$$cinit();

		//set default parameter values
		var cookie_name = $es4.$$coerce($$$$cookie_name, String);
		var cookie_value = $es4.$$coerce($$$$cookie_value, String);
		var extendDays = (2 > arguments.length - 1) ? -1 : $es4.$$coerce($$$$extendDays, int);

		var exdate = $es4.$$coerce($es4.$$primitive(new Date()), Date);
		exdate.setDate(exdate.getDate() + extendDays);
		var c_value = escape(cookie_value) + ((extendDays == -1) ? "" : "; expires=" + exdate.toUTCString());
		return $es4.$$coerce(document.cookie = cookie_name + "=" + c_value, String);
	});

	//protected static method
	SharedObject.$_deleteCookie = (function ($$$$name)
	{
		if (SharedObject.$$cinit !== undefined) SharedObject.$$cinit();

		//set default parameter values
		var name = $es4.$$coerce($$$$name, String);

		document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
	});

	//protected static method
	SharedObject.$_getCookie = (function ($$$$name)
	{
		if (SharedObject.$$cinit !== undefined) SharedObject.$$cinit();

		//set default parameter values
		var name = $es4.$$coerce($$$$name, String);

		var nameEQ = name + "=";
		var ca = $es4.$$coerce(document.cookie.split(';'), Array);
		for (var i = 0; i < ca.length; i++)
		{
			var c = $es4.$$coerce(ca[i], String);
			while (c.charAt(0) == ' ')
			{
				c = c.substring(1, c.length);
			}
			if (c.indexOf(nameEQ) == 0)
			{
				return unescape(c.substring(nameEQ.length, c.length));
			}
		}
		return null;
	});
	Object.defineProperty(SharedObject, 'defaultObjectEncoding', {get:function ()
	{
		if (SharedObject.$$cinit !== undefined) SharedObject.$$cinit();

		throw $es4.$$primitive(new Error('SharedObject: attempted call to an unimplemented function "defaultObjectEncoding"'));
	}, set:function ($$$$version)
	{
		if (SharedObject.$$cinit !== undefined) SharedObject.$$cinit();

		//set default parameter values
		var version = $es4.$$coerce($$$$version, uint);

		throw $es4.$$primitive(new Error('SharedObject: attempted call to an unimplemented function "defaultObjectEncoding"'));
	}});

	function SharedObject()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof SharedObject) || $$this.$$SharedObject !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], SharedObject) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			SharedObject.$$construct($$this, $$args);
		}
	}

	//construct
	SharedObject.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (SharedObject.$$cinit !== undefined) SharedObject.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$SharedObject', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//call construct on super
		EventDispatcher.$$construct($$this);

		//initialize properties
		SharedObject.$$iinit($$this);

		//call constructor
		if (args !== undefined) SharedObject.$$constructor.apply($$this, args);
	});

	//initializer
	SharedObject.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$SharedObject.$_name = $es4.$$coerce(undefined, String);
		$$this.$$SharedObject.$_localPath = $es4.$$coerce(undefined, String);
		$$this.$$SharedObject.$_secure = $es4.$$coerce(undefined, Boolean);
		$$this.$$SharedObject.$_data = $es4.$$coerce({}, Object);
	
		//call iinit on super
		EventDispatcher.$$iinit($$this);
	});

	//constructor
	SharedObject.$$constructor = (function ($$$$name, $$$$localPath, $$$$secure)
	{
		var $$this = this;
		//set default parameter values
		var name = (0 > arguments.length - 1) ? "" : $es4.$$coerce($$$$name, String);
		var localPath = (1 > arguments.length - 1) ? "" : $es4.$$coerce($$$$localPath, String);
		var secure = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$secure, Boolean);


		EventDispatcher.$$constructor.call($$this);

		$$this.$_name = name;
		$$this.$_localPath = localPath != null ? localPath : "";
		$$this.$_secure = secure;
		if (SharedObject.$_dataAssociations[name + "___" + $$this.$_localPath])
		{
			$$this.$_data = SharedObject.$_dataAssociations[name + "___" + $$this.$_localPath];
			return;
		}
		var cookie = SharedObject.$_getCookie(name + "___" + $$this.$_localPath);
		if (cookie != null)
		{
			$$this.$_data = JSON.parse(cookie);
		}
		else
		{
			$$this.$_data = {};
		}
		SharedObject.$_dataAssociations[name + "___" + $$this.$_localPath] = $$this.$_data;
	});

	return $es4.$$class(SharedObject, {EXTENDS:'flash.events.EventDispatcher'}, 'flash.net::SharedObject');
})();
//flash.net.SharedObject


//flash.events.FullScreenEvent
$es4.$$package('flash.events').FullScreenEvent = function () { throw new Error('Use of unimplemented class: FullScreenEvent'); }
//flash.events.FullScreenEvent


//flash.display.Graphics
$es4.$$package('flash.display').Graphics = (function ()
{
	//imports
	var BitmapData;
	var DisplayObject;
	var IGraphicsData;
	var Shader;
	var Matrix;
	var Browser;
	var Graphics;
	var InteractiveObject;
	var Stage;
	var CapsStyle;

	//properties
	var $$j = {};
	Object.defineProperty(Graphics, '$_uniqueIDCounter', {
	get:function () { if (Graphics.$$cinit !== undefined) Graphics.$$cinit(); return $$j.$_uniqueIDCounter; },
	set:function (value) { if (Graphics.$$cinit !== undefined) Graphics.$$cinit(); $$j.$_uniqueIDCounter = $es4.$$coerce(value, Number); }
	});

	Object.defineProperty(Graphics, '$_objects', {
	get:function () { if (Graphics.$$cinit !== undefined) Graphics.$$cinit(); return $$j.$_objects; },
	set:function (value) { if (Graphics.$$cinit !== undefined) Graphics.$$cinit(); $$j.$_objects = $es4.$$coerce(value, Array); }
	});


	//class pre initializer
	Graphics.$$sinit = (function ()
	{
		Graphics.$$sinit = undefined;

		//initialize imports
		BitmapData = $es4.$$['flash.display'].BitmapData;
		DisplayObject = $es4.$$['flash.display'].DisplayObject;
		IGraphicsData = $es4.$$['flash.display'].IGraphicsData;
		Shader = $es4.$$['flash.display'].Shader;
		Matrix = $es4.$$['flash.geom'].Matrix;
		Browser = $es4.$$['browser'].Browser;
		InteractiveObject = $es4.$$['flash.display'].InteractiveObject;
		Stage = $es4.$$['flash.display'].Stage;
		CapsStyle = $es4.$$['flash.display'].CapsStyle;

		//set prototype and constructor
		Graphics.prototype = Object.create(Object.prototype);
		Object.defineProperty(Graphics.prototype, "constructor", { value: Graphics, enumerable: false });

		//hold private values
		Object.defineProperty(Graphics.prototype, '$$v', {value:{}});

		//private instance method
		Graphics.prototype.$$v.$_doFillAndLine = {
		get:function ()
		{
			var $$this = this.$$this;

			function $_doFillAndLine($$$$element)
			{
				//set default parameter values
				var element = $es4.$$coerce($$$$element, Object);

				if ($$this.$$Graphics.$_fillType == 'beginFill')
				{
					element.setAttribute('fill', Graphics.$_convertToColorString($$this.$$Graphics.$_fillColor));
					element.setAttribute('fill-opacity', $$this.$$Graphics.$_fillAlpha);
				}
				else if ($$this.$$Graphics.$_fillType == 'beginBitmapFill')
				{
					element.setAttribute('fill', 'url(#' + $$this.$$Graphics.$_fillBitmapData + ')');
				}
				else
				{
					element.setAttribute('fill-opacity', 0);
				}
				if (!element.getAttribute('shape-rendering'))
				{
					element.setAttribute('shape-rendering', (window.mobile) ? 'optimizeSpeed' : 'auto');
				}
				var interactiveObject = $es4.$$as($$this.$$Graphics.$_displayObject, InteractiveObject);
				element.style.pointerEvents = (interactiveObject && interactiveObject.$__properties().InteractiveObjectScope.$_mouseEnabled) ? 'visible' : 'none';
				if (!$$this.$$Graphics.$_strokeThickness)
				{
					return;
				}
				element.setAttribute('stroke-width', $$this.$$Graphics.$_strokeThickness);
				element.setAttribute('stroke', Graphics.$_convertToColorString($$this.$$Graphics.$_strokeColor));
				element.setAttribute('stroke-opacity', $$this.$$Graphics.$_strokeAlpha);
				element.setAttribute('stroke-miterlimit', $$this.$$Graphics.$_strokeMiterLimit);
				if ($$this.$$Graphics.$_strokeCaps == CapsStyle.SQUARE)
				{
					element.setAttribute('stroke-linecap', 'square');
				}
				else if ($$this.$$Graphics.$_strokeCaps == CapsStyle.NONE)
				{
					element.setAttribute('stroke-linecap', 'butt');
				}
				else
				{
					element.setAttribute('stroke-linecap', 'round');
				}
			}

			return $$this.$$Graphics.$$p.$$$_doFillAndLine || ($$this.$$Graphics.$$p.$$$_doFillAndLine = $_doFillAndLine);
		}};


		//public instance method
		Object.defineProperty(Graphics.prototype, 'beginFill', {
		get:function ()
		{
			var $$this = this;

			function beginFill($$$$color, $$$$alpha)
			{
				//set default parameter values
				var color = $es4.$$coerce($$$$color, uint);
				var alpha = (1 > arguments.length - 1) ? 1 : $es4.$$coerce($$$$alpha, Number);

				$$this.$$Graphics.$_fillType = 'beginFill';
				$$this.$$Graphics.$_fillColor = color;
				$$this.$$Graphics.$_fillAlpha = alpha;
			}

			return $$this.$$Graphics.$$beginFill || ($$this.$$Graphics.$$beginFill = beginFill);
		}});


		//public instance method
		Object.defineProperty(Graphics.prototype, 'drawRect', {
		get:function ()
		{
			var $$this = this;

			function drawRect($$$$x, $$$$y, $$$$width, $$$$height)
			{
				//set default parameter values
				var x = $es4.$$coerce($$$$x, Number);
				var y = $es4.$$coerce($$$$y, Number);
				var width = $es4.$$coerce($$$$width, Number);
				var height = $es4.$$coerce($$$$height, Number);

				var rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
				rect.setAttribute('x', x + 'px');
				rect.setAttribute('y', y + 'px');
				rect.setAttribute('width', width + 'px');
				rect.setAttribute('height', height + 'px');
				$$this.$$Graphics.$_doFillAndLine(rect);
				$$this.$$Graphics.$_domGraphicsView.appendChild(rect);
				var val;
				val = width + x + ($$this.$$Graphics.$_strokeThickness / 2);
				if (val > $$this.$$Graphics.$_maxWidth)
				{
					$$this.$$Graphics.$_maxWidth = val;
				}
				val = height + y + ($$this.$$Graphics.$_strokeThickness / 2);
				if (val > $$this.$$Graphics.$_maxHeight)
				{
					$$this.$$Graphics.$_maxHeight = val;
				}
				$$this.$$Graphics.$_domGraphicsView.style.width = $$this.$$Graphics.$_maxWidth + 'px';
				$$this.$$Graphics.$_domGraphicsView.style.height = $$this.$$Graphics.$_maxHeight + 'px';
				var scope = $$this.$$Graphics.$_displayObject.$__properties().DisplayObjectScope;
				scope.$_onChildBoundsChange('graphics_' + scope.$_id, ($$this.$$Graphics.$_maxWidth !== 0 || $$this.$$Graphics.$_maxHeight !== 0) ? [$$this.$$Graphics.$_maxNegX, $$this.$$Graphics.$_maxNegY, $$this.$$Graphics.$_maxWidth, $$this.$$Graphics.$_maxHeight] : null);
			}

			return $$this.$$Graphics.$$drawRect || ($$this.$$Graphics.$$drawRect = drawRect);
		}});


		//public instance method
		Object.defineProperty(Graphics.prototype, 'drawCircle', {
		get:function ()
		{
			var $$this = this;

			function drawCircle($$$$x, $$$$y, $$$$radius)
			{
				//set default parameter values
				var x = $es4.$$coerce($$$$x, Number);
				var y = $es4.$$coerce($$$$y, Number);
				var radius = $es4.$$coerce($$$$radius, Number);

				var circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
				circle.setAttribute('cx', x);
				circle.setAttribute('cy', y);
				circle.setAttribute('r', radius);
				$$this.$$Graphics.$_doFillAndLine(circle);
				$$this.$$Graphics.$_domGraphicsView.appendChild(circle);
				var minX = x - radius;
				var minY = y - radius;
				var maxX = radius + x;
				var maxY = radius + y;
				var xTransform = NaN;
				var yTransform = NaN;
				if (minX < $$this.$$Graphics.$_maxNegX)
				{
					$$this.$$Graphics.$_maxNegX = xTransform = minX;
				}
				if (minY < $$this.$$Graphics.$_maxNegY)
				{
					$$this.$$Graphics.$_maxNegY = yTransform = minY;
				}
				if (!isNaN(xTransform) || !isNaN(yTransform))
				{
					circle.style[Browser.getTransformString()] = 'translate3d(' + -($$this.$$Graphics.$_maxNegX) + 'px, ' + -($$this.$$Graphics.$_maxNegY) + 'px, 0px)';
					$$this.$$Graphics.$_domGraphicsView.style[Browser.getTransformString()] = 'translate3d(' + $$this.$$Graphics.$_maxNegX + 'px, ' + $$this.$$Graphics.$_maxNegY + 'px, 0px)';
				}
				if (maxX + ($$this.$$Graphics.$_strokeThickness / 2) > $$this.$$Graphics.$_maxWidth)
				{
					$$this.$$Graphics.$_maxWidth = maxX + ($$this.$$Graphics.$_strokeThickness / 2);
				}
				if (maxY + ($$this.$$Graphics.$_strokeThickness / 2) > $$this.$$Graphics.$_maxHeight)
				{
					$$this.$$Graphics.$_maxHeight = maxY + ($$this.$$Graphics.$_strokeThickness / 2);
				}
				$$this.$$Graphics.$_domGraphicsView.style.width = ($$this.$$Graphics.$_maxWidth + -($$this.$$Graphics.$_maxNegX)) + 'px';
				$$this.$$Graphics.$_domGraphicsView.style.height = ($$this.$$Graphics.$_maxHeight + -($$this.$$Graphics.$_maxNegY)) + 'px';
				var scope = $$this.$$Graphics.$_displayObject.$__properties().DisplayObjectScope;
				scope.$_onChildBoundsChange('graphics_' + scope.$_id, ($$this.$$Graphics.$_maxWidth !== 0 || $$this.$$Graphics.$_maxHeight !== 0) ? [$$this.$$Graphics.$_maxNegX, $$this.$$Graphics.$_maxNegY, $$this.$$Graphics.$_maxWidth, $$this.$$Graphics.$_maxHeight] : null);
			}

			return $$this.$$Graphics.$$drawCircle || ($$this.$$Graphics.$$drawCircle = drawCircle);
		}});


		//public instance method
		Object.defineProperty(Graphics.prototype, 'drawEllipse', {
		get:function ()
		{
			var $$this = this;

			function drawEllipse($$$$x, $$$$y, $$$$width, $$$$height)
			{
				//set default parameter values
				var x = $es4.$$coerce($$$$x, Number);
				var y = $es4.$$coerce($$$$y, Number);
				var width = $es4.$$coerce($$$$width, Number);
				var height = $es4.$$coerce($$$$height, Number);

				var ellipse = document.createElementNS('http://www.w3.org/2000/svg', 'ellipse');
				ellipse.setAttribute('cx', x + (width / 2));
				ellipse.setAttribute('cy', y + (height / 2));
				ellipse.setAttribute('rx', width / 2);
				ellipse.setAttribute('ry', height / 2);
				$$this.$$Graphics.$_doFillAndLine(ellipse);
				$$this.$$Graphics.$_domGraphicsView.appendChild(ellipse);
				if (width + x + ($$this.$$Graphics.$_strokeThickness / 2) > $$this.$$Graphics.$_maxWidth)
				{
					$$this.$$Graphics.$_maxWidth = width + x + ($$this.$$Graphics.$_strokeThickness / 2);
				}
				if (height + y + ($$this.$$Graphics.$_strokeThickness / 2) > $$this.$$Graphics.$_maxHeight)
				{
					$$this.$$Graphics.$_maxHeight = height + y + ($$this.$$Graphics.$_strokeThickness / 2);
				}
				$$this.$$Graphics.$_domGraphicsView.style.width = $$this.$$Graphics.$_maxWidth + 'px';
				$$this.$$Graphics.$_domGraphicsView.style.height = $$this.$$Graphics.$_maxHeight + 'px';
				var scope = $$this.$$Graphics.$_displayObject.$__properties().DisplayObjectScope;
				scope.$_onChildBoundsChange('graphics_' + scope.$_id, ($$this.$$Graphics.$_maxWidth !== 0 || $$this.$$Graphics.$_maxHeight !== 0) ? [$$this.$$Graphics.$_maxNegX, $$this.$$Graphics.$_maxNegY, $$this.$$Graphics.$_maxWidth, $$this.$$Graphics.$_maxHeight] : null);
			}

			return $$this.$$Graphics.$$drawEllipse || ($$this.$$Graphics.$$drawEllipse = drawEllipse);
		}});


		//public instance method
		Object.defineProperty(Graphics.prototype, 'drawRoundRect', {
		get:function ()
		{
			var $$this = this;

			function drawRoundRect($$$$x, $$$$y, $$$$width, $$$$height, $$$$ellipseWidth, $$$$ellipseHeight)
			{
				//set default parameter values
				var x = $es4.$$coerce($$$$x, Number);
				var y = $es4.$$coerce($$$$y, Number);
				var width = $es4.$$coerce($$$$width, Number);
				var height = $es4.$$coerce($$$$height, Number);
				var ellipseWidth = $es4.$$coerce($$$$ellipseWidth, Number);
				var ellipseHeight = (5 > arguments.length - 1) ? NaN : $es4.$$coerce($$$$ellipseHeight, Number);

				if (isNaN(ellipseHeight))
				{
					ellipseHeight = ellipseWidth;
				}
				var rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
				rect.setAttribute('x', x);
				rect.setAttribute('y', y);
				rect.setAttribute('width', width);
				rect.setAttribute('height', height);
				rect.setAttribute('rx', ellipseWidth / 2);
				rect.setAttribute('ry', ellipseHeight / 2);
				$$this.$$Graphics.$_doFillAndLine(rect);
				$$this.$$Graphics.$_domGraphicsView.appendChild(rect);
				if (width + x + ($$this.$$Graphics.$_strokeThickness / 2) > $$this.$$Graphics.$_maxWidth)
				{
					$$this.$$Graphics.$_maxWidth = width + x + ($$this.$$Graphics.$_strokeThickness / 2);
				}
				if (height + y + ($$this.$$Graphics.$_strokeThickness / 2) > $$this.$$Graphics.$_maxHeight)
				{
					$$this.$$Graphics.$_maxHeight = height + y + ($$this.$$Graphics.$_strokeThickness / 2);
				}
				$$this.$$Graphics.$_domGraphicsView.style.width = $$this.$$Graphics.$_maxWidth + 'px';
				$$this.$$Graphics.$_domGraphicsView.style.height = $$this.$$Graphics.$_maxHeight + 'px';
				var scope = $$this.$$Graphics.$_displayObject.$__properties().DisplayObjectScope;
				scope.$_onChildBoundsChange('graphics_' + scope.$_id, ($$this.$$Graphics.$_maxWidth !== 0 || $$this.$$Graphics.$_maxHeight !== 0) ? [$$this.$$Graphics.$_maxNegX, $$this.$$Graphics.$_maxNegY, $$this.$$Graphics.$_maxWidth, $$this.$$Graphics.$_maxHeight] : null);
			}

			return $$this.$$Graphics.$$drawRoundRect || ($$this.$$Graphics.$$drawRoundRect = drawRoundRect);
		}});


		//public instance method
		Object.defineProperty(Graphics.prototype, 'drawRoundRectComplex', {
		get:function ()
		{
			var $$this = this;

			function drawRoundRectComplex($$$$x, $$$$y, $$$$width, $$$$height, $$$$topLeftRadius, $$$$topRightRadius, $$$$bottomLeftRadius, $$$$bottomRightRadius)
			{
				//set default parameter values
				var x = $es4.$$coerce($$$$x, Number);
				var y = $es4.$$coerce($$$$y, Number);
				var width = $es4.$$coerce($$$$width, Number);
				var height = $es4.$$coerce($$$$height, Number);
				var topLeftRadius = $es4.$$coerce($$$$topLeftRadius, Number);
				var topRightRadius = $es4.$$coerce($$$$topRightRadius, Number);
				var bottomLeftRadius = $es4.$$coerce($$$$bottomLeftRadius, Number);
				var bottomRightRadius = $es4.$$coerce($$$$bottomRightRadius, Number);

				throw $es4.$$primitive(new Error('Graphics: attempted call to an unimplemented function "drawRoundRectComplex"'));
			}

			return $$this.$$Graphics.$$drawRoundRectComplex || ($$this.$$Graphics.$$drawRoundRectComplex = drawRoundRectComplex);
		}});


		//public instance method
		Object.defineProperty(Graphics.prototype, 'clear', {
		get:function ()
		{
			var $$this = this;

			function clear()
			{
				$$this.$$Graphics.$_fillType = '';
				$$this.$$Graphics.$_fillColor = 0;
				$$this.$$Graphics.$_fillAlpha = 0;
				$$this.$$Graphics.$_fillBitmapData = null;
				$$this.$$Graphics.$_strokeThickness = 0;
				$$this.$$Graphics.$_strokeColor = 0;
				$$this.$$Graphics.$_strokeAlpha = 0;
				$$this.$$Graphics.$_strokePixelHinting = false;
				$$this.$$Graphics.$_strokeScaleMode = '';
				$$this.$$Graphics.$_strokeCaps = '';
				$$this.$$Graphics.$_strokeJoints = '';
				$$this.$$Graphics.$_strokeMiterLimit = 0;
				$$this.$$Graphics.$_maxNegX = $$this.$$Graphics.$_maxNegY = 0;
				$$this.$$Graphics.$_maxWidth = $$this.$$Graphics.$_maxHeight = 0;
				$$this.$$Graphics.$_domGraphicsView.style.width = '0px';
				$$this.$$Graphics.$_domGraphicsView.style.height = '0px';
				$$this.$$Graphics.$_domGraphicsView.style.transform = 'translate3d(0px, 0px, 0px)';
				$$this.$$Graphics.$_domPathView = null;
				var scope = $$this.$$Graphics.$_displayObject.$__properties().DisplayObjectScope;
				scope.$_onChildBoundsChange('graphics_' + scope.$_id, null);
				var interactiveObject = $es4.$$as($$this.$$Graphics.$_displayObject, InteractiveObject);
				var childNode;
				var i;
				if (interactiveObject)
				{
					if (window.mobile)
					{
						if (interactiveObject.$__properties().InteractiveObjectScope.$_onMouseUp && !Graphics.$_objects)
						{
							Graphics.$_objects = [];
						}
						else if (!interactiveObject.$__properties().InteractiveObjectScope.$_onMouseUp && Graphics.$_objects)
						{
							for (i = Graphics.$_objects.length; i--;)
							{
								var object = Graphics.$_objects[i];
								object.removeEventListener('touchend', $$this.$$Graphics.onMouseUp, false);
								object.removeEventListener('touchmove', $$this.$$Graphics.onMouseMove, false);
							}
							Graphics.$_objects = null;
						}
						while ($$this.$$Graphics.$_domGraphicsView.childElementCount)
						{
							childNode = $$this.$$Graphics.$_domGraphicsView.childNodes[0];
							if (Graphics.$_objects)
							{
								Graphics.$_objects.push(childNode);
								childNode.addEventListener('touchend', $$this.$$Graphics.onMouseUp, false);
								childNode.addEventListener('touchmove', $$this.$$Graphics.onMouseMove, false);
							}
							$$this.$$Graphics.$_domGraphicsView.removeChild(childNode);
						}
					}
					else
					{
						if (interactiveObject.$__properties().InteractiveObjectScope.$_onMouseOut && !Graphics.$_objects)
						{
							Graphics.$_objects = [];
						}
						else if (!interactiveObject.$__properties().InteractiveObjectScope.$_onMouseOut && Graphics.$_objects)
						{
							for (i = Graphics.$_objects.length; i--;)
							{
								Graphics.$_objects[i].removeEventListener('mouseout', $$this.$$Graphics.onMouseOut, false);
							}
							for (i = Graphics.$_objects.length; i--;)
							{
								if (Graphics.$_objects[i].parentNode)
								{
									Graphics.$_objects[i].parentNode.removeChild(Graphics.$_objects[i]);
								}
							}
							Graphics.$_objects = null;
						}
						for (i = $$this.$$Graphics.$_domGraphicsView.childElementCount; i--;)
						{
							childNode = $$this.$$Graphics.$_domGraphicsView.childNodes[i];
							if (Graphics.$_objects)
							{
								Graphics.$_objects.push(childNode);
								childNode.addEventListener('mouseout', $$this.$$Graphics.onMouseOut, false);
								childNode.addEventListener('mouseup', $$this.$$Graphics.onMouseOut, false);
							}
							childNode.style.opacity = 0;
						}
					}
				}
				else
				{
					for (i = $$this.$$Graphics.$_domGraphicsView.childElementCount; i--;)
					{
						childNode = $$this.$$Graphics.$_domGraphicsView.childNodes[i];
						$$this.$$Graphics.$_domGraphicsView.removeChild(childNode);
					}
				}
			}

			return $$this.$$Graphics.$$clear || ($$this.$$Graphics.$$clear = clear);
		}});


		//private instance method
		Graphics.prototype.$$v.onMouseUp = {
		get:function ()
		{
			var $$this = this.$$this;

			function onMouseUp($$$$event)
			{
				//set default parameter values
				var event = $es4.$$coerce($$$$event, Object);

				if (!Graphics.$_objects)
				{
					return;
				}
				for (var i = Graphics.$_objects.length; i--;)
				{
					var object = Graphics.$_objects[i];
					object.removeEventListener('touchend', $$this.$$Graphics.onMouseUp, false);
					object.removeEventListener('touchmove', $$this.$$Graphics.onMouseMove, false);
				}
				Graphics.$_objects = null;
				($es4.$$as($$this.$$Graphics.$_displayObject, InteractiveObject)).$__properties().InteractiveObjectScope.$_onMouseUp(event);
			}

			return $$this.$$Graphics.$$p.$$onMouseUp || ($$this.$$Graphics.$$p.$$onMouseUp = onMouseUp);
		}};


		//private instance method
		Graphics.prototype.$$v.onMouseMove = {
		get:function ()
		{
			var $$this = this.$$this;

			function onMouseMove($$$$event)
			{
				//set default parameter values
				var event = $es4.$$coerce($$$$event, Object);

				var interactiveObject = $es4.$$as($$this.$$Graphics.$_displayObject, InteractiveObject);
				var stage = interactiveObject.stage;
				if (stage)
				{
					Stage.$__pageX = event.touches[0].pageX;
					Stage.$__pageY = event.touches[0].pageY;
					stage.$__properties().InteractiveObjectScope.$_onMouseMove(event);
				}
			}

			return $$this.$$Graphics.$$p.$$onMouseMove || ($$this.$$Graphics.$$p.$$onMouseMove = onMouseMove);
		}};


		//private instance method
		Graphics.prototype.$$v.onMouseOut = {
		get:function ()
		{
			var $$this = this.$$this;

			function onMouseOut($$$$event)
			{
				//set default parameter values
				var event = $es4.$$coerce($$$$event, Object);

				if (!Graphics.$_objects)
				{
					return;
				}
				var i;
				for (i = Graphics.$_objects.length; i--;)
				{
					Graphics.$_objects[i].removeEventListener('mouseout', $$this.$$Graphics.onMouseOut, false);
					Graphics.$_objects[i].removeEventListener('mouseup', $$this.$$Graphics.onMouseOut, false);
				}
				for (i = Graphics.$_objects.length; i--;)
				{
					if (Graphics.$_objects[i].parentNode)
					{
						Graphics.$_objects[i].parentNode.removeChild(Graphics.$_objects[i]);
					}
				}
				Graphics.$_objects = null;
				var onMouseOut = $es4.$$coerce(($es4.$$as($$this.$$Graphics.$_displayObject, InteractiveObject)).$__properties().InteractiveObjectScope.$_onMouseOut, Function);
				if (onMouseOut != null)
				{
					onMouseOut(event);
				}
			}

			return $$this.$$Graphics.$$p.$$onMouseOut || ($$this.$$Graphics.$$p.$$onMouseOut = onMouseOut);
		}};


		//public instance method
		Object.defineProperty(Graphics.prototype, 'endFill', {
		get:function ()
		{
			var $$this = this;

			function endFill()
			{
			}

			return $$this.$$Graphics.$$endFill || ($$this.$$Graphics.$$endFill = endFill);
		}});


		//public instance method
		Object.defineProperty(Graphics.prototype, 'lineStyle', {
		get:function ()
		{
			var $$this = this;

			function lineStyle($$$$thickness, $$$$color, $$$$alpha, $$$$pixelHinting, $$$$scaleMode, $$$$caps, $$$$joints, $$$$miterLimit)
			{
				//set default parameter values
				var thickness = (0 > arguments.length - 1) ? NaN : $es4.$$coerce($$$$thickness, Number);
				var color = (1 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$color, uint);
				var alpha = (2 > arguments.length - 1) ? 1 : $es4.$$coerce($$$$alpha, Number);
				var pixelHinting = (3 > arguments.length - 1) ? false : $es4.$$coerce($$$$pixelHinting, Boolean);
				var scaleMode = (4 > arguments.length - 1) ? "normal" : $es4.$$coerce($$$$scaleMode, String);
				var caps = (5 > arguments.length - 1) ? null : $es4.$$coerce($$$$caps, String);
				var joints = (6 > arguments.length - 1) ? null : $es4.$$coerce($$$$joints, String);
				var miterLimit = (7 > arguments.length - 1) ? 3 : $es4.$$coerce($$$$miterLimit, Number);

				$$this.$$Graphics.$_strokeThickness = thickness;
				$$this.$$Graphics.$_strokeColor = color;
				$$this.$$Graphics.$_strokeAlpha = alpha;
				$$this.$$Graphics.$_strokePixelHinting = pixelHinting;
				$$this.$$Graphics.$_strokeScaleMode = scaleMode;
				$$this.$$Graphics.$_strokeCaps = caps;
				$$this.$$Graphics.$_strokeJoints = joints;
				$$this.$$Graphics.$_strokeMiterLimit = miterLimit;
				$$this.$$Graphics.$_domPathView = document.createElementNS('http://www.w3.org/2000/svg', 'path');
				$$this.$$Graphics.$_domGraphicsView.appendChild($$this.$$Graphics.$_domPathView);
			}

			return $$this.$$Graphics.$$lineStyle || ($$this.$$Graphics.$$lineStyle = lineStyle);
		}});


		//public instance method
		Object.defineProperty(Graphics.prototype, 'moveTo', {
		get:function ()
		{
			var $$this = this;

			function moveTo($$$$x, $$$$y)
			{
				//set default parameter values
				var x = $es4.$$coerce($$$$x, Number);
				var y = $es4.$$coerce($$$$y, Number);

				if (!$$this.$$Graphics.$_domPathView)
				{
					$$this.lineStyle(0);
				}
				var d = $es4.$$coerce(($$this.$$Graphics.$_domPathView.getAttribute('d')) ? $$this.$$Graphics.$_domPathView.getAttribute('d') : '', String);
				$$this.$$Graphics.$_domPathView.setAttribute('d', d + ' M ' + x + ',' + y);
				$$this.$$Graphics.$_doFillAndLine($$this.$$Graphics.$_domPathView);
			}

			return $$this.$$Graphics.$$moveTo || ($$this.$$Graphics.$$moveTo = moveTo);
		}});


		//public instance method
		Object.defineProperty(Graphics.prototype, 'lineTo', {
		get:function ()
		{
			var $$this = this;

			function lineTo($$$$x, $$$$y)
			{
				//set default parameter values
				var x = $es4.$$coerce($$$$x, Number);
				var y = $es4.$$coerce($$$$y, Number);

				var d = $es4.$$coerce(($$this.$$Graphics.$_domPathView.getAttribute('d')) ? $$this.$$Graphics.$_domPathView.getAttribute('d') : '', String);
				$$this.$$Graphics.$_domPathView.setAttribute('d', d + ' L ' + x + ',' + y);
				$$this.$$Graphics.$_doFillAndLine($$this.$$Graphics.$_domPathView);
				var xTransform = NaN;
				var yTransform = NaN;
				if (x < $$this.$$Graphics.$_maxNegX)
				{
					$$this.$$Graphics.$_maxNegX = xTransform = x;
				}
				if (y < $$this.$$Graphics.$_maxNegY)
				{
					$$this.$$Graphics.$_maxNegY = yTransform = y;
				}
				if (!isNaN(xTransform) || !isNaN(yTransform))
				{
					$$this.$$Graphics.$_domPathView.style[Browser.getTransformString()] = 'translate3d(' + -($$this.$$Graphics.$_maxNegX) + 'px, ' + -($$this.$$Graphics.$_maxNegY) + 'px, 0px)';
					$$this.$$Graphics.$_domGraphicsView.style[Browser.getTransformString()] = 'translate3d(' + $$this.$$Graphics.$_maxNegX + 'px, ' + $$this.$$Graphics.$_maxNegY + 'px, 0px)';
				}
				if (x < 0)
				{
					x = 0;
				}
				if (y < 0)
				{
					y = 0;
				}
				if (x + ($$this.$$Graphics.$_strokeThickness / 2) > $$this.$$Graphics.$_maxWidth)
				{
					$$this.$$Graphics.$_maxWidth = x + ($$this.$$Graphics.$_strokeThickness / 2);
				}
				if (y + ($$this.$$Graphics.$_strokeThickness / 2) > $$this.$$Graphics.$_maxHeight)
				{
					$$this.$$Graphics.$_maxHeight = y + ($$this.$$Graphics.$_strokeThickness / 2);
				}
				$$this.$$Graphics.$_domGraphicsView.style.width = ($$this.$$Graphics.$_maxWidth + -($$this.$$Graphics.$_maxNegX)) + 'px';
				$$this.$$Graphics.$_domGraphicsView.style.height = ($$this.$$Graphics.$_maxHeight + -($$this.$$Graphics.$_maxNegY)) + 'px';
				var scope = $$this.$$Graphics.$_displayObject.$__properties().DisplayObjectScope;
				scope.$_onChildBoundsChange('graphics_' + scope.$_id, ($$this.$$Graphics.$_maxWidth !== 0 || $$this.$$Graphics.$_maxHeight !== 0) ? [$$this.$$Graphics.$_maxNegX, $$this.$$Graphics.$_maxNegY, $$this.$$Graphics.$_maxWidth, $$this.$$Graphics.$_maxHeight] : null);
			}

			return $$this.$$Graphics.$$lineTo || ($$this.$$Graphics.$$lineTo = lineTo);
		}});


		//public instance method
		Object.defineProperty(Graphics.prototype, 'curveTo', {
		get:function ()
		{
			var $$this = this;

			function curveTo($$$$controlX, $$$$controlY, $$$$anchorX, $$$$anchorY)
			{
				//set default parameter values
				var controlX = $es4.$$coerce($$$$controlX, Number);
				var controlY = $es4.$$coerce($$$$controlY, Number);
				var anchorX = $es4.$$coerce($$$$anchorX, Number);
				var anchorY = $es4.$$coerce($$$$anchorY, Number);

				var d = $es4.$$coerce(($$this.$$Graphics.$_domPathView.getAttribute('d')) ? $$this.$$Graphics.$_domPathView.getAttribute('d') : '', String);
				$$this.$$Graphics.$_domPathView.setAttribute('d', d + ' Q ' + controlX + ',' + controlY + ', ' + anchorX + ',' + anchorY);
				$$this.$$Graphics.$_doFillAndLine($$this.$$Graphics.$_domPathView);
			}

			return $$this.$$Graphics.$$curveTo || ($$this.$$Graphics.$$curveTo = curveTo);
		}});


		//public instance method
		Object.defineProperty(Graphics.prototype, 'beginBitmapFill', {
		get:function ()
		{
			var $$this = this;

			function beginBitmapFill($$$$bitmapData, $$$$matrix, $$$$repeat, $$$$smooth)
			{
				//set default parameter values
				var bitmapData = $es4.$$coerce($$$$bitmapData, BitmapData);
				var matrix = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$matrix, Matrix);
				var repeat = (2 > arguments.length - 1) ? true : $es4.$$coerce($$$$repeat, Boolean);
				var smooth = (3 > arguments.length - 1) ? false : $es4.$$coerce($$$$smooth, Boolean);

				$$this.$$Graphics.$_fillType = 'beginBitmapFill';
				$$this.$$Graphics.$_fillBitmapData = '__' + (Graphics.$_uniqueIDCounter++) + '_GraphicsID__';
				var defs = document.createElementNS('http://www.w3.org/2000/svg', 'defs');
				var pattern = document.createElementNS('http://www.w3.org/2000/svg', 'pattern');
				var image = document.createElementNS('http://www.w3.org/2000/svg', 'image');
				pattern.setAttribute('id', $$this.$$Graphics.$_fillBitmapData);
				pattern.setAttribute('patternUnits', 'userSpaceOnUse');
				pattern.setAttribute('width', bitmapData.width);
				pattern.setAttribute('height', bitmapData.height);
				var canvas = bitmapData.$__properties().BitmapDataScope.$_createOrGetCanvas(bitmapData);
				var dataURL = $es4.$$coerce(canvas.toDataURL(), String);
				image.setAttributeNS('http://www.w3.org/1999/xlink', 'href', dataURL);
				image.setAttribute('x', 0);
				image.setAttribute('y', 0);
				image.setAttribute('width', bitmapData.width);
				image.setAttribute('height', bitmapData.height);
				pattern.appendChild(image);
				defs.appendChild(pattern);
				$$this.$$Graphics.$_domGraphicsView.appendChild(defs);
				var scope = $$this.$$Graphics.$_displayObject.$__properties().DisplayObjectScope;
				scope.$_onChildBoundsChange('graphics_' + scope.$_id, ($$this.$$Graphics.$_maxWidth !== 0 || $$this.$$Graphics.$_maxHeight !== 0) ? [$$this.$$Graphics.$_maxNegX, $$this.$$Graphics.$_maxNegY, $$this.$$Graphics.$_maxWidth, $$this.$$Graphics.$_maxHeight] : null);
			}

			return $$this.$$Graphics.$$beginBitmapFill || ($$this.$$Graphics.$$beginBitmapFill = beginBitmapFill);
		}});


		//public instance method
		Object.defineProperty(Graphics.prototype, 'beginGradientFill', {
		get:function ()
		{
			var $$this = this;

			function beginGradientFill($$$$type, $$$$colors, $$$$alphas, $$$$ratios, $$$$matrix, $$$$spreadMethod, $$$$interpolationMethod, $$$$focalPointRatio)
			{
				//set default parameter values
				var type = $es4.$$coerce($$$$type, String);
				var colors = $es4.$$coerce($$$$colors, Array);
				var alphas = $es4.$$coerce($$$$alphas, Array);
				var ratios = $es4.$$coerce($$$$ratios, Array);
				var matrix = (4 > arguments.length - 1) ? null : $es4.$$coerce($$$$matrix, Matrix);
				var spreadMethod = (5 > arguments.length - 1) ? "pad" : $es4.$$coerce($$$$spreadMethod, String);
				var interpolationMethod = (6 > arguments.length - 1) ? "rgb" : $es4.$$coerce($$$$interpolationMethod, String);
				var focalPointRatio = (7 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$focalPointRatio, Number);

				throw $es4.$$primitive(new Error('Graphics: attempted call to an unimplemented function "beginGradientFill"'));
			}

			return $$this.$$Graphics.$$beginGradientFill || ($$this.$$Graphics.$$beginGradientFill = beginGradientFill);
		}});


		//public instance method
		Object.defineProperty(Graphics.prototype, 'beginShaderFill', {
		get:function ()
		{
			var $$this = this;

			function beginShaderFill($$$$shader, $$$$matrix)
			{
				//set default parameter values
				var shader = $es4.$$coerce($$$$shader, Shader);
				var matrix = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$matrix, Matrix);

				throw $es4.$$primitive(new Error('Graphics: attempted call to an unimplemented function "beginShaderFill"'));
			}

			return $$this.$$Graphics.$$beginShaderFill || ($$this.$$Graphics.$$beginShaderFill = beginShaderFill);
		}});


		//public instance method
		Object.defineProperty(Graphics.prototype, 'copyFrom', {
		get:function ()
		{
			var $$this = this;

			function copyFrom($$$$sourceGraphics)
			{
				//set default parameter values
				var sourceGraphics = $es4.$$coerce($$$$sourceGraphics, $es4.$$['flash.display'].Graphics);

				throw $es4.$$primitive(new Error('Graphics: attempted call to an unimplemented function "copyFrom"'));
			}

			return $$this.$$Graphics.$$copyFrom || ($$this.$$Graphics.$$copyFrom = copyFrom);
		}});


		//public instance method
		Object.defineProperty(Graphics.prototype, 'drawGraphicsData', {
		get:function ()
		{
			var $$this = this;

			function drawGraphicsData($$$$graphicsData)
			{
				//set default parameter values
				var graphicsData = $es4.$$coerce($$$$graphicsData, Array);

				throw $es4.$$primitive(new Error('Graphics: attempted call to an unimplemented function "drawGraphicsData"'));
			}

			return $$this.$$Graphics.$$drawGraphicsData || ($$this.$$Graphics.$$drawGraphicsData = drawGraphicsData);
		}});


		//public instance method
		Object.defineProperty(Graphics.prototype, 'drawPath', {
		get:function ()
		{
			var $$this = this;

			function drawPath($$$$commands, $$$$data, $$$$winding)
			{
				//set default parameter values
				var commands = $es4.$$coerce($$$$commands, Array);
				var data = $es4.$$coerce($$$$data, Array);
				var winding = (2 > arguments.length - 1) ? "evenOdd" : $es4.$$coerce($$$$winding, String);

				throw $es4.$$primitive(new Error('Graphics: attempted call to an unimplemented function "drawPath"'));
			}

			return $$this.$$Graphics.$$drawPath || ($$this.$$Graphics.$$drawPath = drawPath);
		}});


		//public instance method
		Object.defineProperty(Graphics.prototype, 'drawTriangles', {
		get:function ()
		{
			var $$this = this;

			function drawTriangles($$$$vertices, $$$$indices, $$$$uvtData, $$$$culling)
			{
				//set default parameter values
				var vertices = $es4.$$coerce($$$$vertices, Array);
				var indices = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$indices, Array);
				var uvtData = (2 > arguments.length - 1) ? null : $es4.$$coerce($$$$uvtData, Array);
				var culling = (3 > arguments.length - 1) ? "none" : $es4.$$coerce($$$$culling, String);

				throw $es4.$$primitive(new Error('Graphics: attempted call to an unimplemented function "drawTriangles"'));
			}

			return $$this.$$Graphics.$$drawTriangles || ($$this.$$Graphics.$$drawTriangles = drawTriangles);
		}});


		//public instance method
		Object.defineProperty(Graphics.prototype, 'lineBitmapStyle', {
		get:function ()
		{
			var $$this = this;

			function lineBitmapStyle($$$$bitmap, $$$$matrix, $$$$repeat, $$$$smooth)
			{
				//set default parameter values
				var bitmap = $es4.$$coerce($$$$bitmap, BitmapData);
				var matrix = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$matrix, Matrix);
				var repeat = (2 > arguments.length - 1) ? true : $es4.$$coerce($$$$repeat, Boolean);
				var smooth = (3 > arguments.length - 1) ? false : $es4.$$coerce($$$$smooth, Boolean);

				throw $es4.$$primitive(new Error('Graphics: attempted call to an unimplemented function "lineBitmapStyle"'));
			}

			return $$this.$$Graphics.$$lineBitmapStyle || ($$this.$$Graphics.$$lineBitmapStyle = lineBitmapStyle);
		}});


		//public instance method
		Object.defineProperty(Graphics.prototype, 'lineGradientStyle', {
		get:function ()
		{
			var $$this = this;

			function lineGradientStyle($$$$type, $$$$colors, $$$$alphas, $$$$ratios, $$$$matrix, $$$$spreadMethod, $$$$interpolationMethod, $$$$focalPointRatio)
			{
				//set default parameter values
				var type = $es4.$$coerce($$$$type, String);
				var colors = $es4.$$coerce($$$$colors, Array);
				var alphas = $es4.$$coerce($$$$alphas, Array);
				var ratios = $es4.$$coerce($$$$ratios, Array);
				var matrix = (4 > arguments.length - 1) ? null : $es4.$$coerce($$$$matrix, Matrix);
				var spreadMethod = (5 > arguments.length - 1) ? "pad" : $es4.$$coerce($$$$spreadMethod, String);
				var interpolationMethod = (6 > arguments.length - 1) ? "rgb" : $es4.$$coerce($$$$interpolationMethod, String);
				var focalPointRatio = (7 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$focalPointRatio, Number);

				throw $es4.$$primitive(new Error('Graphics: attempted call to an unimplemented function "lineGradientStyle"'));
			}

			return $$this.$$Graphics.$$lineGradientStyle || ($$this.$$Graphics.$$lineGradientStyle = lineGradientStyle);
		}});


		//public instance method
		Object.defineProperty(Graphics.prototype, 'lineShaderStyle', {
		get:function ()
		{
			var $$this = this;

			function lineShaderStyle($$$$shader, $$$$matrix)
			{
				//set default parameter values
				var shader = $es4.$$coerce($$$$shader, Shader);
				var matrix = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$matrix, Matrix);

				throw $es4.$$primitive(new Error('Graphics: attempted call to an unimplemented function "lineShaderStyle"'));
			}

			return $$this.$$Graphics.$$lineShaderStyle || ($$this.$$Graphics.$$lineShaderStyle = lineShaderStyle);
		}});

		//properties
		Graphics.prototype.$$v.$_displayObject = {
		get:function () { var $$this = this.$$this; return $$this.$$Graphics.$$p.$_displayObject; },
		set:function (value) { var $$this = this.$$this; $$this.$$Graphics.$$p.$_displayObject = $es4.$$coerce(value, DisplayObject); }
		};

		Graphics.prototype.$$v.$_domGraphicsView = {
		get:function () { var $$this = this.$$this; return $$this.$$Graphics.$$p.$_domGraphicsView; },
		set:function (value) { var $$this = this.$$this; $$this.$$Graphics.$$p.$_domGraphicsView = $es4.$$coerce(value, Object); }
		};

		Graphics.prototype.$$v.$_fillType = {
		get:function () { var $$this = this.$$this; return $$this.$$Graphics.$$p.$_fillType; },
		set:function (value) { var $$this = this.$$this; $$this.$$Graphics.$$p.$_fillType = $es4.$$coerce(value, String); }
		};

		Graphics.prototype.$$v.$_fillColor = {
		get:function () { var $$this = this.$$this; return $$this.$$Graphics.$$p.$_fillColor; },
		set:function (value) { var $$this = this.$$this; $$this.$$Graphics.$$p.$_fillColor = $es4.$$coerce(value, uint); }
		};

		Graphics.prototype.$$v.$_fillAlpha = {
		get:function () { var $$this = this.$$this; return $$this.$$Graphics.$$p.$_fillAlpha; },
		set:function (value) { var $$this = this.$$this; $$this.$$Graphics.$$p.$_fillAlpha = $es4.$$coerce(value, Number); }
		};

		Graphics.prototype.$$v.$_fillBitmapData = {
		get:function () { var $$this = this.$$this; return $$this.$$Graphics.$$p.$_fillBitmapData; },
		set:function (value) { var $$this = this.$$this; $$this.$$Graphics.$$p.$_fillBitmapData = $es4.$$coerce(value, String); }
		};

		Graphics.prototype.$$v.$_strokeThickness = {
		get:function () { var $$this = this.$$this; return $$this.$$Graphics.$$p.$_strokeThickness; },
		set:function (value) { var $$this = this.$$this; $$this.$$Graphics.$$p.$_strokeThickness = $es4.$$coerce(value, Number); }
		};

		Graphics.prototype.$$v.$_strokeColor = {
		get:function () { var $$this = this.$$this; return $$this.$$Graphics.$$p.$_strokeColor; },
		set:function (value) { var $$this = this.$$this; $$this.$$Graphics.$$p.$_strokeColor = $es4.$$coerce(value, uint); }
		};

		Graphics.prototype.$$v.$_strokeAlpha = {
		get:function () { var $$this = this.$$this; return $$this.$$Graphics.$$p.$_strokeAlpha; },
		set:function (value) { var $$this = this.$$this; $$this.$$Graphics.$$p.$_strokeAlpha = $es4.$$coerce(value, Number); }
		};

		Graphics.prototype.$$v.$_strokePixelHinting = {
		get:function () { var $$this = this.$$this; return $$this.$$Graphics.$$p.$_strokePixelHinting; },
		set:function (value) { var $$this = this.$$this; $$this.$$Graphics.$$p.$_strokePixelHinting = $es4.$$coerce(value, Boolean); }
		};

		Graphics.prototype.$$v.$_strokeScaleMode = {
		get:function () { var $$this = this.$$this; return $$this.$$Graphics.$$p.$_strokeScaleMode; },
		set:function (value) { var $$this = this.$$this; $$this.$$Graphics.$$p.$_strokeScaleMode = $es4.$$coerce(value, String); }
		};

		Graphics.prototype.$$v.$_strokeCaps = {
		get:function () { var $$this = this.$$this; return $$this.$$Graphics.$$p.$_strokeCaps; },
		set:function (value) { var $$this = this.$$this; $$this.$$Graphics.$$p.$_strokeCaps = $es4.$$coerce(value, String); }
		};

		Graphics.prototype.$$v.$_strokeJoints = {
		get:function () { var $$this = this.$$this; return $$this.$$Graphics.$$p.$_strokeJoints; },
		set:function (value) { var $$this = this.$$this; $$this.$$Graphics.$$p.$_strokeJoints = $es4.$$coerce(value, String); }
		};

		Graphics.prototype.$$v.$_strokeMiterLimit = {
		get:function () { var $$this = this.$$this; return $$this.$$Graphics.$$p.$_strokeMiterLimit; },
		set:function (value) { var $$this = this.$$this; $$this.$$Graphics.$$p.$_strokeMiterLimit = $es4.$$coerce(value, Number); }
		};

		Graphics.prototype.$$v.$_domPathView = {
		get:function () { var $$this = this.$$this; return $$this.$$Graphics.$$p.$_domPathView; },
		set:function (value) { var $$this = this.$$this; $$this.$$Graphics.$$p.$_domPathView = $es4.$$coerce(value, Object); }
		};

		Graphics.prototype.$$v.$_maxWidth = {
		get:function () { var $$this = this.$$this; return $$this.$$Graphics.$$p.$_maxWidth; },
		set:function (value) { var $$this = this.$$this; $$this.$$Graphics.$$p.$_maxWidth = $es4.$$coerce(value, Number); }
		};

		Graphics.prototype.$$v.$_maxHeight = {
		get:function () { var $$this = this.$$this; return $$this.$$Graphics.$$p.$_maxHeight; },
		set:function (value) { var $$this = this.$$this; $$this.$$Graphics.$$p.$_maxHeight = $es4.$$coerce(value, Number); }
		};

		Graphics.prototype.$$v.$_maxNegX = {
		get:function () { var $$this = this.$$this; return $$this.$$Graphics.$$p.$_maxNegX; },
		set:function (value) { var $$this = this.$$this; $$this.$$Graphics.$$p.$_maxNegX = $es4.$$coerce(value, Number); }
		};

		Graphics.prototype.$$v.$_maxNegY = {
		get:function () { var $$this = this.$$this; return $$this.$$Graphics.$$p.$_maxNegY; },
		set:function (value) { var $$this = this.$$this; $$this.$$Graphics.$$p.$_maxNegY = $es4.$$coerce(value, Number); }
		};

	});

	//class initializer
	Graphics.$$cinit = (function ()
	{
		Graphics.$$cinit = undefined;

		//initialize properties
		$$j.$_uniqueIDCounter = $es4.$$coerce(0, Number);
		$$j.$_objects = $es4.$$coerce(undefined, Array);
	
	});

	//private static method
	Graphics.$_convertToColorString = (function ($$$$color)
	{
		if (Graphics.$$cinit !== undefined) Graphics.$$cinit();

		//set default parameter values
		var color = $es4.$$coerce($$$$color, uint);

		var colorString = color.toString(16);
		while (colorString.length < 6)
		{
			colorString = '0' + colorString;
		}
		return '#' + colorString;
	});
	function Graphics()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof Graphics) || $$this.$$Graphics !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Graphics) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			Graphics.$$construct($$this, $$args);
		}
	}

	//construct
	Graphics.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (Graphics.$$cinit !== undefined) Graphics.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$Graphics', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$Graphics, '$_displayObject', Graphics.prototype.$$v.$_displayObject);
		Object.defineProperty($$this.$$Graphics, '$_domGraphicsView', Graphics.prototype.$$v.$_domGraphicsView);
		Object.defineProperty($$this.$$Graphics, '$_fillType', Graphics.prototype.$$v.$_fillType);
		Object.defineProperty($$this.$$Graphics, '$_fillColor', Graphics.prototype.$$v.$_fillColor);
		Object.defineProperty($$this.$$Graphics, '$_fillAlpha', Graphics.prototype.$$v.$_fillAlpha);
		Object.defineProperty($$this.$$Graphics, '$_fillBitmapData', Graphics.prototype.$$v.$_fillBitmapData);
		Object.defineProperty($$this.$$Graphics, '$_strokeThickness', Graphics.prototype.$$v.$_strokeThickness);
		Object.defineProperty($$this.$$Graphics, '$_strokeColor', Graphics.prototype.$$v.$_strokeColor);
		Object.defineProperty($$this.$$Graphics, '$_strokeAlpha', Graphics.prototype.$$v.$_strokeAlpha);
		Object.defineProperty($$this.$$Graphics, '$_strokePixelHinting', Graphics.prototype.$$v.$_strokePixelHinting);
		Object.defineProperty($$this.$$Graphics, '$_strokeScaleMode', Graphics.prototype.$$v.$_strokeScaleMode);
		Object.defineProperty($$this.$$Graphics, '$_strokeCaps', Graphics.prototype.$$v.$_strokeCaps);
		Object.defineProperty($$this.$$Graphics, '$_strokeJoints', Graphics.prototype.$$v.$_strokeJoints);
		Object.defineProperty($$this.$$Graphics, '$_strokeMiterLimit', Graphics.prototype.$$v.$_strokeMiterLimit);
		Object.defineProperty($$this.$$Graphics, '$_domPathView', Graphics.prototype.$$v.$_domPathView);
		Object.defineProperty($$this.$$Graphics, '$_maxWidth', Graphics.prototype.$$v.$_maxWidth);
		Object.defineProperty($$this.$$Graphics, '$_maxHeight', Graphics.prototype.$$v.$_maxHeight);
		Object.defineProperty($$this.$$Graphics, '$_maxNegX', Graphics.prototype.$$v.$_maxNegX);
		Object.defineProperty($$this.$$Graphics, '$_maxNegY', Graphics.prototype.$$v.$_maxNegY);

		//private instance method
		Object.defineProperty($$this.$$Graphics, '$_doFillAndLine', Graphics.prototype.$$v.$_doFillAndLine);

		//private instance method
		Object.defineProperty($$this.$$Graphics, 'onMouseUp', Graphics.prototype.$$v.onMouseUp);

		//private instance method
		Object.defineProperty($$this.$$Graphics, 'onMouseMove', Graphics.prototype.$$v.onMouseMove);

		//private instance method
		Object.defineProperty($$this.$$Graphics, 'onMouseOut', Graphics.prototype.$$v.onMouseOut);

		//initialize properties
		Graphics.$$iinit($$this);

		//call constructor
		if (args !== undefined) Graphics.$$constructor.apply($$this, args);
	});

	//initializer
	Graphics.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$Graphics.$$p.$_displayObject = $es4.$$coerce(undefined, DisplayObject);
		$$this.$$Graphics.$$p.$_domGraphicsView = $es4.$$coerce(undefined, Object);
		$$this.$$Graphics.$$p.$_fillType = $es4.$$coerce('', String);
		$$this.$$Graphics.$$p.$_fillColor = $es4.$$coerce(undefined, uint);
		$$this.$$Graphics.$$p.$_fillAlpha = $es4.$$coerce(undefined, Number);
		$$this.$$Graphics.$$p.$_fillBitmapData = $es4.$$coerce(undefined, String);
		$$this.$$Graphics.$$p.$_strokeThickness = $es4.$$coerce(0, Number);
		$$this.$$Graphics.$$p.$_strokeColor = $es4.$$coerce(undefined, uint);
		$$this.$$Graphics.$$p.$_strokeAlpha = $es4.$$coerce(undefined, Number);
		$$this.$$Graphics.$$p.$_strokePixelHinting = $es4.$$coerce(undefined, Boolean);
		$$this.$$Graphics.$$p.$_strokeScaleMode = $es4.$$coerce(undefined, String);
		$$this.$$Graphics.$$p.$_strokeCaps = $es4.$$coerce(undefined, String);
		$$this.$$Graphics.$$p.$_strokeJoints = $es4.$$coerce(undefined, String);
		$$this.$$Graphics.$$p.$_strokeMiterLimit = $es4.$$coerce(undefined, Number);
		$$this.$$Graphics.$$p.$_domPathView = $es4.$$coerce(undefined, Object);
		$$this.$$Graphics.$$p.$_maxWidth = $es4.$$coerce(0, Number);
		$$this.$$Graphics.$$p.$_maxHeight = $es4.$$coerce(0, Number);
		$$this.$$Graphics.$$p.$_maxNegX = $es4.$$coerce(0, Number);
		$$this.$$Graphics.$$p.$_maxNegY = $es4.$$coerce(0, Number);
	
	});

	//constructor
	Graphics.$$constructor = (function ($$$$displayObject)
	{
		var $$this = this;
		//set default parameter values
		var displayObject = $es4.$$coerce($$$$displayObject, DisplayObject);

		$$this.$$Graphics.$_displayObject = displayObject;
		$$this.$$Graphics.$_domGraphicsView = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
		$$this.$$Graphics.$_displayObject.$__addDomGraphicsView($$this.$$Graphics.$_domGraphicsView);
		$$this.$$Graphics.$_domGraphicsView.setAttribute('version', '1.1');
		$$this.$$Graphics.$_domGraphicsView.setAttribute('tabindex', '-1');
		$$this.$$Graphics.$_domGraphicsView.setAttribute('focusable', false);
		$$this.$$Graphics.$_domGraphicsView.style.display = 'block';
		$$this.$$Graphics.$_domGraphicsView.style.position = 'absolute';
		$$this.$$Graphics.$_domGraphicsView.style.pointerEvents = 'none';
		$$this.$$Graphics.$_domGraphicsView.style[Browser.getTransformOriginString()] = '0% 0%';
		$$this.$$Graphics.$_domGraphicsView.style[Browser.getTransformString()] = 'translateZ(0)';
		$$this.$$Graphics.$_domGraphicsView.style[Browser.getBackfaceVisibilityString()] = 'hidden';
	});

	return $es4.$$class(Graphics, null, 'flash.display::Graphics');
})();
//flash.display.Graphics


//flash.display.GraphicsEndFill
$es4.$$package('flash.display').GraphicsEndFill = function () { throw new Error('Use of unimplemented class: GraphicsEndFill'); }
//flash.display.GraphicsEndFill


//flash.events.SyncEvent
$es4.$$package('flash.events').SyncEvent = function () { throw new Error('Use of unimplemented class: SyncEvent'); }
//flash.events.SyncEvent


//flash.display3D.Context3DStencilAction
$es4.$$package('flash.display3D').Context3DStencilAction = function () { throw new Error('Use of unimplemented class: Context3DStencilAction'); }
//flash.display3D.Context3DStencilAction


//flash.globalization.LocaleID
$es4.$$package('flash.globalization').LocaleID = function () { throw new Error('Use of unimplemented class: LocaleID'); }
//flash.globalization.LocaleID


//flash.net.URLLoader
$es4.$$package('flash.net').URLLoader = (function ()
{
	//imports
	var Event;
	var EventDispatcher;
	var HTTPStatusEvent;
	var IOErrorEvent;
	var ProgressEvent;
	var ByteArray;
	var Browser;
	var URLRequest;

	//class pre initializer
	URLLoader.$$sinit = (function ()
	{
		URLLoader.$$sinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;
		EventDispatcher = $es4.$$['flash.events'].EventDispatcher;
		HTTPStatusEvent = $es4.$$['flash.events'].HTTPStatusEvent;
		IOErrorEvent = $es4.$$['flash.events'].IOErrorEvent;
		ProgressEvent = $es4.$$['flash.events'].ProgressEvent;
		ByteArray = $es4.$$['flash.utils'].ByteArray;
		Browser = $es4.$$['browser'].Browser;
		URLRequest = $es4.$$['flash.net'].URLRequest;

		//ensure $$sinit is called on super class
		if (EventDispatcher.$$sinit !== undefined) EventDispatcher.$$sinit();

		//set prototype and constructor
		URLLoader.prototype = Object.create(EventDispatcher.prototype);
		Object.defineProperty(URLLoader.prototype, "constructor", { value: URLLoader, enumerable: false });

		//hold private values
		Object.defineProperty(URLLoader.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(URLLoader.prototype, 'load', {
		get:function ()
		{
			var $$this = this;

			function load($$$$request)
			{
				//set default parameter values
				var request = $es4.$$coerce($$$$request, URLRequest);

				if (!request || !request.url)
				{
					throw $es4.$$primitive(new TypeError('request or request.url is null'));
				}
				var dataFormat = $es4.$$coerce($$this.dataFormat, String);
				var a = document.createElement('a');
				a.href = request.url;
				var parts = $es4.$$coerce(a.pathname.split('.'), Array);
				var suffix = $es4.$$coerce(parts.pop().toLowerCase(), String);
				if (suffix == 'js' && window.loaderInfoParams && (!window.loaderInfoParams['debug'] && !window.loaderInfoParams['trace']))
				{
					parts.push('min');
					parts.push('js');
					a.pathname = parts.join('.');
				}
				var src = null;
				var regex = /^(?:\/|[a-z]+:\/\/)/;
				if (regex.test(request.url))
				{
					src = $es4.$$coerce(a.href, String);
				}
				else
				{
					var location = window.location;
					parts = $es4.$$coerce(location.pathname.split('/'), Array);
					parts.pop();
					var slocation = parts.join('/');
					src = $es4.$$coerce((a.pathname.indexOf(slocation) == -1) ? (location.pathname + '/../' + a.pathname + a.search + a.hash) : a.href, String);
				}
				$$this.$$URLLoader._xmlHttpRequest = Browser.getNewXMLHttpRequest();
				$$this.$$URLLoader._xmlHttpRequest.onload = onLoad;
				$$this.$$URLLoader._xmlHttpRequest.onprogress = onProgress;
				$$this.$$URLLoader._xmlHttpRequest.onerror = onError;
				$$this.$$URLLoader._xmlHttpRequest.open(request.method, src, true);
				if (dataFormat == 'text')
				{
					$$this.$$URLLoader._xmlHttpRequest.overrideMimeType('text/plain');
				}
				else
				{
					$$this.$$URLLoader._xmlHttpRequest.responseType = 'arraybuffer';
				}
				var requestdata = request.data;
				if (requestdata && $es4.$$is(requestdata, ByteArray))
				{
					requestdata = $es4.$$primitive(new window.Uint8Array(($es4.$$as($$this.data, ByteArray)).$__getArrayBuffer()));
				}
				$$this.$$URLLoader._xmlHttpRequest.send(requestdata);

				function onLoad($$$$event) 
				{
					//set default parameter values
					var event = $es4.$$coerce($$$$event, Object);

					if (!$$this.$$URLLoader._xmlHttpRequest)
					{
						return;
					}
					$$this.dispatchEvent($es4.$$primitive(new HTTPStatusEvent(HTTPStatusEvent.HTTP_STATUS, false, false, $$this.$$URLLoader._xmlHttpRequest.status)));
					if (dataFormat == 'text')
					{
						$$this.data = $$this.$$URLLoader._xmlHttpRequest.responseText;
					}
					else
					{
						var byteArray = $es4.$$primitive(new ByteArray());
						byteArray.$__setArrayBuffer($$this.$$URLLoader._xmlHttpRequest.response);
						$$this.data = byteArray;
					}
					$$this.$$URLLoader._xmlHttpRequest.onprogress = null;
					$$this.$$URLLoader._xmlHttpRequest.onload = null;
					$$this.$$URLLoader._xmlHttpRequest.onerror = null;
					$$this.$$URLLoader._xmlHttpRequest = null;
					$$this.dispatchEvent($es4.$$primitive(new Event(Event.COMPLETE)));
				}
;

				function onProgress($$$$event) 
				{
					//set default parameter values
					var event = $es4.$$coerce($$$$event, Object);

					if (!$$this.$$URLLoader._xmlHttpRequest)
					{
						return;
					}
					if (!event.lengthComputable)
					{
						return;
					}
					$$this.bytesLoaded = event.loaded;
					$$this.bytesTotal = event.total;
					$$this.dispatchEvent($es4.$$primitive(new ProgressEvent(ProgressEvent.PROGRESS, false, false, $$this.bytesLoaded, $$this.bytesTotal)));
				}
;

				function onError($$$$event) 
				{
					//set default parameter values
					var event = $es4.$$coerce($$$$event, Object);

					if (!$$this.$$URLLoader._xmlHttpRequest)
					{
						return;
					}
					$$this.close();
					$$this.dispatchEvent($es4.$$primitive(new IOErrorEvent(IOErrorEvent.IO_ERROR, false, false, event.error)));
				}
;
			}

			return $$this.$$URLLoader.$$load || ($$this.$$URLLoader.$$load = load);
		}});


		//public instance method
		Object.defineProperty(URLLoader.prototype, 'close', {
		get:function ()
		{
			var $$this = this;

			function close()
			{
				$$this.bytesLoaded = 0;
				$$this.bytesTotal = 0;
				if (!$$this.$$URLLoader._xmlHttpRequest)
				{
					return;
				}
				$$this.$$URLLoader._xmlHttpRequest.onload = null;
				$$this.$$URLLoader._xmlHttpRequest.onprogress = null;
				$$this.$$URLLoader._xmlHttpRequest.onerror = null;
				$$this.$$URLLoader._xmlHttpRequest.abort();
				$$this.$$URLLoader._xmlHttpRequest = null;
			}

			return $$this.$$URLLoader.$$close || ($$this.$$URLLoader.$$close = close);
		}});

		//properties
		URLLoader.prototype.$$v._xmlHttpRequest = {
		get:function () { var $$this = this.$$this; return $$this.$$URLLoader.$$p._xmlHttpRequest; },
		set:function (value) { var $$this = this.$$this; $$this.$$URLLoader.$$p._xmlHttpRequest = $es4.$$coerce(value, Object); }
		};

		Object.defineProperty(URLLoader.prototype, 'bytesLoaded', {
		get:function () { var $$this = this; return $$this.$$URLLoader.bytesLoaded; },
		set:function (value) { var $$this = this; $$this.$$URLLoader.bytesLoaded = $es4.$$coerce(value, uint); }
		});

		Object.defineProperty(URLLoader.prototype, 'bytesTotal', {
		get:function () { var $$this = this; return $$this.$$URLLoader.bytesTotal; },
		set:function (value) { var $$this = this; $$this.$$URLLoader.bytesTotal = $es4.$$coerce(value, uint); }
		});

		Object.defineProperty(URLLoader.prototype, 'data', {
		get:function () { var $$this = this; return $$this.$$URLLoader.data; },
		set:function (value) { var $$this = this; $$this.$$URLLoader.data = value }
		});

		Object.defineProperty(URLLoader.prototype, 'dataFormat', {
		get:function () { var $$this = this; return $$this.$$URLLoader.dataFormat; },
		set:function (value) { var $$this = this; $$this.$$URLLoader.dataFormat = $es4.$$coerce(value, String); }
		});

	});

	//class initializer
	URLLoader.$$cinit = (function ()
	{
		URLLoader.$$cinit = undefined;
	});

	function URLLoader()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof URLLoader) || $$this.$$URLLoader !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], URLLoader) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			URLLoader.$$construct($$this, $$args);
		}
	}

	//construct
	URLLoader.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (URLLoader.$$cinit !== undefined) URLLoader.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$URLLoader', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$URLLoader, '_xmlHttpRequest', URLLoader.prototype.$$v._xmlHttpRequest);

		//call construct on super
		EventDispatcher.$$construct($$this);

		//initialize properties
		URLLoader.$$iinit($$this);

		//call constructor
		if (args !== undefined) URLLoader.$$constructor.apply($$this, args);
	});

	//initializer
	URLLoader.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$URLLoader.$$p._xmlHttpRequest = $es4.$$coerce(undefined, Object);
		$$this.$$URLLoader.bytesLoaded = $es4.$$coerce(undefined, uint);
		$$this.$$URLLoader.bytesTotal = $es4.$$coerce(undefined, uint);
		$$this.$$URLLoader.data = undefined;
		$$this.$$URLLoader.dataFormat = $es4.$$coerce('text', String);
	
		//call iinit on super
		EventDispatcher.$$iinit($$this);
	});

	//constructor
	URLLoader.$$constructor = (function ($$$$request)
	{
		var $$this = this;
		//set default parameter values
		var request = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$request, URLRequest);

		EventDispatcher.$$constructor.call($$this);
		if (request)
		{
			$$this.load(request);
		}
	});

	return $es4.$$class(URLLoader, {EXTENDS:'flash.events.EventDispatcher'}, 'flash.net::URLLoader');
})();
//flash.net.URLLoader


//flash.display3D.Context3DWrapMode
$es4.$$package('flash.display3D').Context3DWrapMode = function () { throw new Error('Use of unimplemented class: Context3DWrapMode'); }
//flash.display3D.Context3DWrapMode


//flash.errors.ScriptTimeoutError
$es4.$$package('flash.errors').ScriptTimeoutError = function () { throw new Error('Use of unimplemented class: ScriptTimeoutError'); }
//flash.errors.ScriptTimeoutError


//flash.display3D.Context3DCompareMode
$es4.$$package('flash.display3D').Context3DCompareMode = (function ()
{
	//class pre initializer
	Context3DCompareMode.$$sinit = (function ()
	{
		Context3DCompareMode.$$sinit = undefined;

		//set prototype and constructor
		Context3DCompareMode.prototype = Object.create(Object.prototype);
		Object.defineProperty(Context3DCompareMode.prototype, "constructor", { value: Context3DCompareMode, enumerable: false });

		//hold private values
		Object.defineProperty(Context3DCompareMode.prototype, '$$v', {value:{}});
	});

	//class initializer
	Context3DCompareMode.$$cinit = (function ()
	{
		Context3DCompareMode.$$cinit = undefined;
	});

	function Context3DCompareMode()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof Context3DCompareMode) || $$this.$$Context3DCompareMode !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Context3DCompareMode) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			Context3DCompareMode.$$construct($$this, $$args);
		}
	}

	//construct
	Context3DCompareMode.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (Context3DCompareMode.$$cinit !== undefined) Context3DCompareMode.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$Context3DCompareMode', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		Context3DCompareMode.$$iinit($$this);

		//call constructor
		if (args !== undefined) Context3DCompareMode.$$constructor.apply($$this, args);
	});

	//initializer
	Context3DCompareMode.$$iinit = (function ($$this)
	{
	});

	//constructor
	Context3DCompareMode.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(Context3DCompareMode, null, 'flash.display3D::Context3DCompareMode');
})();
//flash.display3D.Context3DCompareMode


//flash.net.drm.DRMVoucher
$es4.$$package('flash.net.drm').DRMVoucher = function () { throw new Error('Use of unimplemented class: DRMVoucher'); }
//flash.net.drm.DRMVoucher


//flash.system.System
$es4.$$package('flash.system').System = (function ()
{
	//imports
	var IME;

	//class pre initializer
	System.$$sinit = (function ()
	{
		System.$$sinit = undefined;

		//initialize imports
		IME = $es4.$$['flash.system'].IME;

		//set prototype and constructor
		System.prototype = Object.create(Object.prototype);
		Object.defineProperty(System.prototype, "constructor", { value: System, enumerable: false });

		//hold private values
		Object.defineProperty(System.prototype, '$$v', {value:{}});
	});

	//class initializer
	System.$$cinit = (function ()
	{
		System.$$cinit = undefined;
	});

	//public static method
	System.disposeXML = (function ($$$$node)
	{
		if (System.$$cinit !== undefined) System.$$cinit();

		//set default parameter values
		var node = $es4.$$coerce($$$$node, XML);

		throw $es4.$$primitive(new Error('System: attempted call to an unimplemented function "disposeXML"'));
	});

	//public static method
	System.exit = (function ($$$$code)
	{
		if (System.$$cinit !== undefined) System.$$cinit();

		//set default parameter values
		var code = $es4.$$coerce($$$$code, uint);

		throw $es4.$$primitive(new Error('System: attempted call to an unimplemented function "exit"'));
	});

	//public static method
	System.gc = (function ()
	{
		if (System.$$cinit !== undefined) System.$$cinit();

		throw $es4.$$primitive(new Error('System: attempted call to an unimplemented function "gc"'));
	});

	//public static method
	System.pause = (function ()
	{
		if (System.$$cinit !== undefined) System.$$cinit();

		throw $es4.$$primitive(new Error('System: attempted call to an unimplemented function "pause"'));
	});

	//public static method
	System.pauseForGCIfCollectionImminent = (function ($$$$imminence)
	{
		if (System.$$cinit !== undefined) System.$$cinit();

		//set default parameter values
		var imminence = (0 > arguments.length - 1) ? 0.75 : $es4.$$coerce($$$$imminence, Number);

		throw $es4.$$primitive(new Error('System: attempted call to an unimplemented function "pauseForGCIfCollectionImminent"'));
	});

	//public static method
	System.resume = (function ()
	{
		if (System.$$cinit !== undefined) System.$$cinit();

		throw $es4.$$primitive(new Error('System: attempted call to an unimplemented function "resume"'));
	});

	//public static method
	System.setClipboard = (function ($$$$string)
	{
		if (System.$$cinit !== undefined) System.$$cinit();

		//set default parameter values
		var string = $es4.$$coerce($$$$string, String);

		if (window.mobile)
		{
			window.prompt('Press and hold over highlighted text, and then press copy.', string);
		}
		else
		{
			window.prompt('Press Ctrl+C or Cmd+C, and then click OK.', string);
		}
	});
	Object.defineProperty(System, 'freeMemory', {get:function ()
	{
		if (System.$$cinit !== undefined) System.$$cinit();

		throw $es4.$$primitive(new Error('System: attempted call to an unimplemented function "freeMemory"'));
	}});
	Object.defineProperty(System, 'ime', {get:function ()
	{
		if (System.$$cinit !== undefined) System.$$cinit();

		throw $es4.$$primitive(new Error('System: attempted call to an unimplemented function "ime"'));
	}});
	Object.defineProperty(System, 'privateMemory', {get:function ()
	{
		if (System.$$cinit !== undefined) System.$$cinit();

		throw $es4.$$primitive(new Error('System: attempted call to an unimplemented function "privateMemory"'));
	}});
	Object.defineProperty(System, 'processCPUUsage', {get:function ()
	{
		if (System.$$cinit !== undefined) System.$$cinit();

		throw $es4.$$primitive(new Error('System: attempted call to an unimplemented function "processCPUUsage"'));
	}});
	Object.defineProperty(System, 'totalMemory', {get:function ()
	{
		if (System.$$cinit !== undefined) System.$$cinit();

		throw $es4.$$primitive(new Error('System: attempted call to an unimplemented function "totalMemory"'));
	}});
	Object.defineProperty(System, 'totalMemoryNumber', {get:function ()
	{
		if (System.$$cinit !== undefined) System.$$cinit();

		throw $es4.$$primitive(new Error('System: attempted call to an unimplemented function "totalMemoryNumber"'));
	}});
	Object.defineProperty(System, 'useCodePage', {get:function ()
	{
		if (System.$$cinit !== undefined) System.$$cinit();

		throw $es4.$$primitive(new Error('System: attempted call to an unimplemented function "useCodePage"'));
	}, set:function ($$$$value)
	{
		if (System.$$cinit !== undefined) System.$$cinit();

		//set default parameter values
		var value = $es4.$$coerce($$$$value, Boolean);

		throw $es4.$$primitive(new Error('System: attempted call to an unimplemented function "useCodePage"'));
	}});
	Object.defineProperty(System, 'vmVersion', {get:function ()
	{
		if (System.$$cinit !== undefined) System.$$cinit();

		throw $es4.$$primitive(new Error('System: attempted call to an unimplemented function "vmVersion"'));
	}});

	function System()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof System) || $$this.$$System !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], System) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			System.$$construct($$this, $$args);
		}
	}

	//construct
	System.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (System.$$cinit !== undefined) System.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$System', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		System.$$iinit($$this);

		//call constructor
		if (args !== undefined) System.$$constructor.apply($$this, args);
	});

	//initializer
	System.$$iinit = (function ($$this)
	{
	});

	//constructor
	System.$$constructor = (function ()
	{
		var $$this = this;
		throw $es4.$$primitive(new Error('System: attempted call to an unimplemented constructor'));
	});

	return $es4.$$class(System, null, 'flash.system::System');
})();
//flash.system.System


//flash.net.NetStreamPlayOptions
$es4.$$package('flash.net').NetStreamPlayOptions = function () { throw new Error('Use of unimplemented class: NetStreamPlayOptions'); }
//flash.net.NetStreamPlayOptions


//flash.ui.ContextMenuClipboardItems
$es4.$$package('flash.ui').ContextMenuClipboardItems = function () { throw new Error('Use of unimplemented class: ContextMenuClipboardItems'); }
//flash.ui.ContextMenuClipboardItems


//flash.net.SecureSocket
$es4.$$package('flash.net').SecureSocket = function () { throw new Error('Use of unimplemented class: SecureSocket'); }
//flash.net.SecureSocket


//flash.errors.MemoryError
$es4.$$package('flash.errors').MemoryError = function () { throw new Error('Use of unimplemented class: MemoryError'); }
//flash.errors.MemoryError


//flash.text.engine.TypographicCase
$es4.$$package('flash.text.engine').TypographicCase = function () { throw new Error('Use of unimplemented class: TypographicCase'); }
//flash.text.engine.TypographicCase


//flash.net.drm.LoadVoucherSetting
$es4.$$package('flash.net.drm').LoadVoucherSetting = function () { throw new Error('Use of unimplemented class: LoadVoucherSetting'); }
//flash.net.drm.LoadVoucherSetting


//flash.display3D.Context3DBlendFactor
$es4.$$package('flash.display3D').Context3DBlendFactor = function () { throw new Error('Use of unimplemented class: Context3DBlendFactor'); }
//flash.display3D.Context3DBlendFactor


//flash.text.TextLineMetrics
$es4.$$package('flash.text').TextLineMetrics = function () { throw new Error('Use of unimplemented class: TextLineMetrics'); }
//flash.text.TextLineMetrics


//flash.events.SoftKeyboardEvent
$es4.$$package('flash.events').SoftKeyboardEvent = function () { throw new Error('Use of unimplemented class: SoftKeyboardEvent'); }
//flash.events.SoftKeyboardEvent


//flash.net.NetGroupSendMode
$es4.$$package('flash.net').NetGroupSendMode = function () { throw new Error('Use of unimplemented class: NetGroupSendMode'); }
//flash.net.NetGroupSendMode


//flash.filters.BitmapFilterType
$es4.$$package('flash.filters').BitmapFilterType = function () { throw new Error('Use of unimplemented class: BitmapFilterType'); }
//flash.filters.BitmapFilterType


//flash.xml.XMLNodeType
$es4.$$package('flash.xml').XMLNodeType = (function ()
{
	//properties
	var $$j = {};
	XMLNodeType.CDATA_NODE = 4;
	XMLNodeType.ELEMENT_NODE = 1;
	XMLNodeType.TEXT_NODE = 3;

	//class pre initializer
	XMLNodeType.$$sinit = (function ()
	{
		XMLNodeType.$$sinit = undefined;

		//set prototype and constructor
		XMLNodeType.prototype = Object.create(Object.prototype);
		Object.defineProperty(XMLNodeType.prototype, "constructor", { value: XMLNodeType, enumerable: false });

		//hold private values
		Object.defineProperty(XMLNodeType.prototype, '$$v', {value:{}});
	});

	//class initializer
	XMLNodeType.$$cinit = (function ()
	{
		XMLNodeType.$$cinit = undefined;
	});

	function XMLNodeType()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof XMLNodeType) || $$this.$$XMLNodeType !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], XMLNodeType) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			XMLNodeType.$$construct($$this, $$args);
		}
	}

	//construct
	XMLNodeType.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (XMLNodeType.$$cinit !== undefined) XMLNodeType.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$XMLNodeType', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		XMLNodeType.$$iinit($$this);

		//call constructor
		if (args !== undefined) XMLNodeType.$$constructor.apply($$this, args);
	});

	//initializer
	XMLNodeType.$$iinit = (function ($$this)
	{
	});

	//constructor
	XMLNodeType.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(XMLNodeType, null, 'flash.xml::XMLNodeType');
})();
//flash.xml.XMLNodeType


//flash.display.JointStyle
$es4.$$package('flash.display').JointStyle = function () { throw new Error('Use of unimplemented class: JointStyle'); }
//flash.display.JointStyle


//flash.utils.CompressionAlgorithm
$es4.$$package('flash.utils').CompressionAlgorithm = function () { throw new Error('Use of unimplemented class: CompressionAlgorithm'); }
//flash.utils.CompressionAlgorithm


//flash.text.engine.TabAlignment
$es4.$$package('flash.text.engine').TabAlignment = function () { throw new Error('Use of unimplemented class: TabAlignment'); }
//flash.text.engine.TabAlignment


//flash.net.drm.AuthenticationMethod
$es4.$$package('flash.net.drm').AuthenticationMethod = function () { throw new Error('Use of unimplemented class: AuthenticationMethod'); }
//flash.net.drm.AuthenticationMethod


//flash.display.SimpleButton
$es4.$$package('flash.display').SimpleButton = (function ()
{
	//imports
	var DisplayObject;
	var Event;
	var MouseEvent;
	var SoundTransform;
	var InteractiveObject;
	var Stage;

	//properties
	var $$j = {};
	SimpleButton.MOUSE_BOUNDS_STATE_OUT = 1;
	SimpleButton.MOUSE_BOUNDS_STATE_OVER = 2;
	SimpleButton.MOUSE_PRESS_STATE_DOWN = 3;
	SimpleButton.MOUSE_PRESS_STATE_UP = 4;

	//class pre initializer
	SimpleButton.$$sinit = (function ()
	{
		SimpleButton.$$sinit = undefined;

		//initialize imports
		DisplayObject = $es4.$$['flash.display'].DisplayObject;
		Event = $es4.$$['flash.events'].Event;
		MouseEvent = $es4.$$['flash.events'].MouseEvent;
		SoundTransform = $es4.$$['flash.media'].SoundTransform;
		InteractiveObject = $es4.$$['flash.display'].InteractiveObject;
		Stage = $es4.$$['flash.display'].Stage;

		//ensure $$sinit is called on super class
		if (InteractiveObject.$$sinit !== undefined) InteractiveObject.$$sinit();

		//set prototype and constructor
		SimpleButton.prototype = Object.create(InteractiveObject.prototype);
		Object.defineProperty(SimpleButton.prototype, "constructor", { value: SimpleButton, enumerable: false });

		//hold private values
		Object.defineProperty(SimpleButton.prototype, '$$v', {value:{}});

		//private instance method
		SimpleButton.prototype.$$v.$onRemovedFromStage = {
		get:function ()
		{
			var $$this = this.$$this;

			function $onRemovedFromStage($$$$event)
			{
				//set default parameter values
				var event = $es4.$$coerce($$$$event, Event);

				if ($$this.$$SimpleButton._stage)
				{
					$$this.$$SimpleButton._stage.removeEventListener(MouseEvent.MOUSE_UP, $$this.$$SimpleButton.$onUpEvent);
					$$this.$$SimpleButton._stage = null;
				}
				$$this.$$SimpleButton._mouseBoundsState = SimpleButton.MOUSE_BOUNDS_STATE_OUT;
				$$this.$$SimpleButton._mousePressState = SimpleButton.MOUSE_PRESS_STATE_UP;
			}

			return $$this.$$SimpleButton.$$p.$$$onRemovedFromStage || ($$this.$$SimpleButton.$$p.$$$onRemovedFromStage = $onRemovedFromStage);
		}};


		//public instance method
		Object.defineProperty(SimpleButton.prototype, '$__properties', {
		get:function ()
		{
			var $$this = this;

			function $__properties($$$$object)
			{
				//set default parameter values
				var object = (0 > arguments.length - 1) ? null : $$$$object;

				if ($$this.$$SimpleButton.$_properties === undefined)
				{
					object = $es4.$$super2($$this, InteractiveObject, '$$InteractiveObject', '$__properties', 'func', undefined)(object);
					object.SimpleButtonScope = {$_upState:null, $_overState:null, $_downState:null, $_hitTestState:null, $_enabled:true, $_useHandCursor:true, $_currentState:null};
					object.TLScope = $$this;
					return $$this.$$SimpleButton.$_properties = object;
				}
				return $$this.$$SimpleButton.$_properties;
			}

			return $$this.$$SimpleButton.$$$__properties || ($$this.$$SimpleButton.$$$__properties = $__properties);
		}});


		//public instance method
		Object.defineProperty(SimpleButton.prototype, 'dispatchEvent', {
		get:function ()
		{
			var $$this = this;

			function dispatchEvent($$$$event)
			{
				//set default parameter values
				var event = $es4.$$coerce($$$$event, Event);

				if (!($es4.$$is(event, MouseEvent)) || !event.$__properties().EventScope.$_originalTarget)
				{
					return $es4.$$coerce($es4.$$super2($$this, InteractiveObject, '$$InteractiveObject', 'dispatchEvent', 'func', undefined)(event), Boolean);
				}
				if (!$$this.$$SimpleButton.$_properties.SimpleButtonScope.$_hitTestState)
				{
					return false;
				}
				var domView = $$this.$$SimpleButton.$_properties.DisplayObjectScope.$_domView;
				var parent = event.$__properties().EventScope.$_originalTarget;
				var hitTest = $$this.$$SimpleButton.$_properties.SimpleButtonScope.$_hitTestState.$__properties().DisplayObjectScope.$_domView;
				var found = $es4.$$coerce(parent == hitTest, Boolean);
				while (parent != document.body && parent != domView)
				{
					if (parent == hitTest)
					{
						found = true;
						break;
					}
					parent = parent.parentNode;
				}
				if (found)
				{
					var type = event.type;
					if (type == MouseEvent.CLICK)
					{
						return $$this.$$SimpleButton.$onClickEvent($es4.$$as(event, MouseEvent));
					}
					if (type == MouseEvent.MOUSE_OUT)
					{
						return $$this.$$SimpleButton.$onOutEvent($es4.$$as(event, MouseEvent));
					}
					if (type == MouseEvent.MOUSE_OVER)
					{
						return $$this.$$SimpleButton.$onOverEvent($es4.$$as(event, MouseEvent));
					}
					if (type == MouseEvent.MOUSE_DOWN)
					{
						return $$this.$$SimpleButton.$onDownEvent($es4.$$as(event, MouseEvent));
					}
					if (type == MouseEvent.MOUSE_UP)
					{
						return $$this.$$SimpleButton.$onUpEvent($es4.$$as(event, MouseEvent));
					}
					else
					{
						return false;
					}
				}
				if (event.type == MouseEvent.CLICK)
				{
					return false;
				}
				return $es4.$$coerce($es4.$$super2($$this, InteractiveObject, '$$InteractiveObject', 'dispatchEvent', 'func', undefined)(event), Boolean);
			}

			return $$this.$$SimpleButton.$$dispatchEvent || ($$this.$$SimpleButton.$$dispatchEvent = dispatchEvent);
		}});


		//private instance method
		SimpleButton.prototype.$$v.$_refreshVisualState = {
		get:function ()
		{
			var $$this = this.$$this;

			function $_refreshVisualState()
			{
				var currentState = $es4.$$coerce($$this.$$SimpleButton.$_properties.SimpleButtonScope.$_currentState, DisplayObject);
				var upState = $es4.$$coerce($$this.$$SimpleButton.$_properties.SimpleButtonScope.$_upState, DisplayObject);
				var downState = $es4.$$coerce($$this.$$SimpleButton.$_properties.SimpleButtonScope.$_downState, DisplayObject);
				var overState = $es4.$$coerce($$this.$$SimpleButton.$_properties.SimpleButtonScope.$_overState, DisplayObject);
				var hitTestState = $es4.$$coerce($$this.$$SimpleButton.$_properties.SimpleButtonScope.$_hitTestState, DisplayObject);
				var state = null;
				if ($$this.$$SimpleButton._mousePressState == SimpleButton.MOUSE_PRESS_STATE_DOWN)
				{
					state = downState || currentState || overState || upState;
				}
				else if ($$this.$$SimpleButton._mouseBoundsState == SimpleButton.MOUSE_BOUNDS_STATE_OVER)
				{
					state = overState || currentState || upState;
				}
				else
				{
					state = upState || currentState;
				}
				if (state == null || state == currentState)
				{
					return;
				}
				if (currentState && currentState != $$this.$$SimpleButton.$_properties.SimpleButtonScope.$_hitTestState)
				{
					$$this.$$SimpleButton.$_properties.DisplayObjectScope.$_domView.removeChild(currentState.$__properties().DisplayObjectScope.$_domView);
				}
				if ($$this.$$SimpleButton.$_properties.DisplayObjectScope.$_domView.firstChild)
				{
					$$this.$$SimpleButton.$_properties.DisplayObjectScope.$_domView.insertBefore(state.$__properties().DisplayObjectScope.$_domView, $$this.$$SimpleButton.$_properties.DisplayObjectScope.$_domView.firstChild);
				}
				else
				{
					$$this.$$SimpleButton.$_properties.DisplayObjectScope.$_domView.appendChild(state.$__properties().DisplayObjectScope.$_domView);
				}
				if (hitTestState)
				{
					if (state != hitTestState)
					{
						hitTestState.$__properties().DisplayObjectScope.$_domView.style.opacity = 0;
					}
					else
					{
						hitTestState.$__properties().DisplayObjectScope.$_domView.style.opacity = hitTestState.$__properties().DisplayObjectScope.$_opacity;
					}
				}
				$$this.$$SimpleButton.$_properties.SimpleButtonScope.$_currentState = state;
			}

			return $$this.$$SimpleButton.$$p.$$$_refreshVisualState || ($$this.$$SimpleButton.$$p.$$$_refreshVisualState = $_refreshVisualState);
		}};


		//private instance method
		SimpleButton.prototype.$$v.$onClickEvent = {
		get:function ()
		{
			var $$this = this.$$this;

			function $onClickEvent($$$$event)
			{
				//set default parameter values
				var event = $es4.$$coerce($$$$event, MouseEvent);

				event.stopImmediatePropagation();
				if (!$$this.$$SimpleButton.$_properties.SimpleButtonScope.$_enabled || !$$this.$$SimpleButton.$_properties.InteractiveObjectScope.$_mouseEnabled)
				{
					return false;
				}
				event = $es4.$$coerce($es4.$$as(event.clone(), MouseEvent), MouseEvent);
				event.$__properties().EventScope.$_withTarget(event, $$this);
				return $$this.dispatchEvent(event);
			}

			return $$this.$$SimpleButton.$$p.$$$onClickEvent || ($$this.$$SimpleButton.$$p.$$$onClickEvent = $onClickEvent);
		}};


		//private instance method
		SimpleButton.prototype.$$v.$onOverEvent = {
		get:function ()
		{
			var $$this = this.$$this;

			function $onOverEvent($$$$event)
			{
				//set default parameter values
				var event = $es4.$$coerce($$$$event, MouseEvent);

				$$this.$$SimpleButton._mouseBoundsState = SimpleButton.MOUSE_BOUNDS_STATE_OVER;
				event.stopImmediatePropagation();
				if (!$$this.$$SimpleButton.$_properties.SimpleButtonScope.$_enabled || !$$this.$$SimpleButton.$_properties.InteractiveObjectScope.$_mouseEnabled)
				{
					return false;
				}
				$$this.$$SimpleButton.$_refreshVisualState();
				event = $es4.$$coerce($es4.$$as(event.clone(), MouseEvent), MouseEvent);
				event.$__properties().EventScope.$_withTarget(event, $$this);
				return $$this.dispatchEvent(event);
			}

			return $$this.$$SimpleButton.$$p.$$$onOverEvent || ($$this.$$SimpleButton.$$p.$$$onOverEvent = $onOverEvent);
		}};


		//private instance method
		SimpleButton.prototype.$$v.$onOutEvent = {
		get:function ()
		{
			var $$this = this.$$this;

			function $onOutEvent($$$$event)
			{
				//set default parameter values
				var event = $es4.$$coerce($$$$event, MouseEvent);

				$$this.$$SimpleButton._mouseBoundsState = SimpleButton.MOUSE_BOUNDS_STATE_OUT;
				event.stopImmediatePropagation();
				if (!$$this.$$SimpleButton.$_properties.SimpleButtonScope.$_enabled || !$$this.$$SimpleButton.$_properties.InteractiveObjectScope.$_mouseEnabled)
				{
					return false;
				}
				$$this.$$SimpleButton.$_refreshVisualState();
				event = $es4.$$coerce($es4.$$as(event.clone(), MouseEvent), MouseEvent);
				event.$__properties().EventScope.$_withTarget(event, $$this);
				return $$this.dispatchEvent(event);
			}

			return $$this.$$SimpleButton.$$p.$$$onOutEvent || ($$this.$$SimpleButton.$$p.$$$onOutEvent = $onOutEvent);
		}};


		//private instance method
		SimpleButton.prototype.$$v.$onDownEvent = {
		get:function ()
		{
			var $$this = this.$$this;

			function $onDownEvent($$$$event)
			{
				//set default parameter values
				var event = $es4.$$coerce($$$$event, MouseEvent);

				$$this.$$SimpleButton._mousePressState = SimpleButton.MOUSE_PRESS_STATE_DOWN;
				$$this.$$SimpleButton._stage = event.target.stage;
				$$this.$$SimpleButton._stage.addEventListener(MouseEvent.MOUSE_UP, $$this.$$SimpleButton.$onUpEvent);
				event.stopImmediatePropagation();
				if (!$$this.$$SimpleButton.$_properties.SimpleButtonScope.$_enabled || !$$this.$$SimpleButton.$_properties.InteractiveObjectScope.$_mouseEnabled)
				{
					return false;
				}
				$$this.$$SimpleButton.$_refreshVisualState();
				event = $es4.$$coerce($es4.$$as(event.clone(), MouseEvent), MouseEvent);
				event.$__properties().EventScope.$_withTarget(event, $$this);
				return $$this.dispatchEvent(event);
			}

			return $$this.$$SimpleButton.$$p.$$$onDownEvent || ($$this.$$SimpleButton.$$p.$$$onDownEvent = $onDownEvent);
		}};


		//private instance method
		SimpleButton.prototype.$$v.$onUpEvent = {
		get:function ()
		{
			var $$this = this.$$this;

			function $onUpEvent($$$$event)
			{
				//set default parameter values
				var event = $es4.$$coerce($$$$event, MouseEvent);

				$$this.$$SimpleButton._mousePressState = SimpleButton.MOUSE_PRESS_STATE_UP;
				if ($$this.$$SimpleButton._stage)
				{
					$$this.$$SimpleButton._stage.removeEventListener(MouseEvent.MOUSE_UP, $$this.$$SimpleButton.$onUpEvent);
					$$this.$$SimpleButton._stage = null;
				}
				event.stopImmediatePropagation();
				if (!$$this.$$SimpleButton.$_properties.SimpleButtonScope.$_enabled || !$$this.$$SimpleButton.$_properties.InteractiveObjectScope.$_mouseEnabled)
				{
					return false;
				}
				$$this.$$SimpleButton.$_refreshVisualState();
				event = $es4.$$coerce($es4.$$as(event.clone(), MouseEvent), MouseEvent);
				event.$__properties().EventScope.$_withTarget(event, $$this);
				return $$this.dispatchEvent(event);
			}

			return $$this.$$SimpleButton.$$p.$$$onUpEvent || ($$this.$$SimpleButton.$$p.$$$onUpEvent = $onUpEvent);
		}};

		Object.defineProperty(SimpleButton.prototype, 'downState', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$SimpleButton.$_properties.SimpleButtonScope.$_downState, DisplayObject);
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, DisplayObject);

			var $$this = this;
			if ($$this.$$SimpleButton.$_properties.SimpleButtonScope.$_downState)
			{
				var oldState = $es4.$$coerce($$this.$$SimpleButton.$_properties.SimpleButtonScope.$_downState, DisplayObject);
				if (oldState != $$this.$$SimpleButton.$_properties.SimpleButtonScope.$_upState && oldState != $$this.$$SimpleButton.$_properties.SimpleButtonScope.$_overState && $$this.$$SimpleButton.$_properties.SimpleButtonScope.$_currentState == oldState)
				{
					$$this.$$SimpleButton.$_properties.SimpleButtonScope.$_currentState = null;
					if (oldState != $$this.$$SimpleButton.$_properties.SimpleButtonScope.$_hitTestState)
					{
						$$this.$$SimpleButton.$_properties.DisplayObjectScope.$_domView.removeChild(oldState.$__properties().DisplayObjectScope.$_domView);
					}
				}
			}
			$$this.$$SimpleButton.$_properties.SimpleButtonScope.$_downState = value;
			$$this.$$SimpleButton.$_refreshVisualState();
		}});
		Object.defineProperty(SimpleButton.prototype, 'enabled', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$SimpleButton.$_properties.SimpleButtonScope.$_enabled, Boolean);
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var $$this = this;
			$$this.$$SimpleButton.$_properties.SimpleButtonScope.$_enabled = value;
			$$this.$$SimpleButton.$_properties.DisplayObjectScope.$_domView.setAttribute('aria-disabled', !value);
			if (value && $$this.$$SimpleButton.$_properties.SimpleButtonScope.$_useHandCursor)
			{
				$$this.$$SimpleButton.$_properties.DisplayObjectScope.$_domView.style.cursor = 'pointer';
			}
			else
			{
				$$this.$$SimpleButton.$_properties.DisplayObjectScope.$_domView.style.cursor = 'auto';
			}
			$$this.$$SimpleButton.$_properties.DisplayObjectScope.$_domView.style.pointerEvents = (value) ? 'auto' : 'none';
		}});
		Object.defineProperty(SimpleButton.prototype, 'hitTestState', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$SimpleButton.$_properties.SimpleButtonScope.$_hitTestState, DisplayObject);
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, DisplayObject);

			var $$this = this;
			if ($$this.$$SimpleButton.$_properties.SimpleButtonScope.$_hitTestState)
			{
				var oldHitTestState = $es4.$$coerce($$this.$$SimpleButton.$_properties.SimpleButtonScope.$_hitTestState, DisplayObject);
				if (oldHitTestState != $$this.$$SimpleButton.$_properties.SimpleButtonScope.$_upState && oldHitTestState != $$this.$$SimpleButton.$_properties.SimpleButtonScope.$_overState && oldHitTestState != $$this.$$SimpleButton.$_properties.SimpleButtonScope.$_downState)
				{
					$$this.$$SimpleButton.$_properties.DisplayObjectScope.$_domView.removeChild(oldHitTestState.$__properties().DisplayObjectScope.$_domView);
				}
			}
			$$this.$$SimpleButton.$_properties.SimpleButtonScope.$_hitTestState = value;
			if (value && value != $$this.$$SimpleButton.$_properties.SimpleButtonScope.$_upState && value != $$this.$$SimpleButton.$_properties.SimpleButtonScope.$_overState && value != $$this.$$SimpleButton.$_properties.SimpleButtonScope.$_downState)
			{
				$$this.$$SimpleButton.$_properties.DisplayObjectScope.$_domView.appendChild(value.$__properties().DisplayObjectScope.$_domView);
			}
			$$this.$$SimpleButton.$_refreshVisualState();
		}});
		Object.defineProperty(SimpleButton.prototype, 'overState', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$SimpleButton.$_properties.SimpleButtonScope.$_overState, DisplayObject);
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, DisplayObject);

			var $$this = this;
			if ($$this.$$SimpleButton.$_properties.SimpleButtonScope.$_overState)
			{
				var oldState = $es4.$$coerce($$this.$$SimpleButton.$_properties.SimpleButtonScope.$_overState, DisplayObject);
				if (oldState != $$this.$$SimpleButton.$_properties.SimpleButtonScope.$_upState && oldState != $$this.$$SimpleButton.$_properties.SimpleButtonScope.$_downState && $$this.$$SimpleButton.$_properties.SimpleButtonScope.$_currentState == oldState)
				{
					$$this.$$SimpleButton.$_properties.SimpleButtonScope.$_currentState = null;
					if (oldState != $$this.$$SimpleButton.$_properties.SimpleButtonScope.$_hitTestState)
					{
						$$this.$$SimpleButton.$_properties.DisplayObjectScope.$_domView.removeChild(oldState.$__properties().DisplayObjectScope.$_domView);
					}
				}
			}
			$$this.$$SimpleButton.$_properties.SimpleButtonScope.$_overState = value;
			$$this.$$SimpleButton.$_refreshVisualState();
		}});
		Object.defineProperty(SimpleButton.prototype, 'soundTransform', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('SimpleButton: attempted call to an unimplemented function "soundTransform"'));
		}, set:function ($$$$sndTransform)
		{
			//set default parameter values
			var sndTransform = $es4.$$coerce($$$$sndTransform, SoundTransform);

			var $$this = this;
			throw $es4.$$primitive(new Error('SimpleButton: attempted call to an unimplemented function "soundTransform"'));
		}});
		Object.defineProperty(SimpleButton.prototype, 'trackAsMenu', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('SimpleButton: attempted call to an unimplemented function "trackAsMenu"'));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var $$this = this;
			throw $es4.$$primitive(new Error('SimpleButton: attempted call to an unimplemented function "trackAsMenu"'));
		}});
		Object.defineProperty(SimpleButton.prototype, 'upState', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$SimpleButton.$_properties.SimpleButtonScope.$_upState, DisplayObject);
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, DisplayObject);

			var $$this = this;
			if ($$this.$$SimpleButton.$_properties.SimpleButtonScope.$_upState)
			{
				var oldState = $es4.$$coerce($$this.$$SimpleButton.$_properties.SimpleButtonScope.$_upState, DisplayObject);
				if (oldState != $$this.$$SimpleButton.$_properties.SimpleButtonScope.$_downState && oldState != $$this.$$SimpleButton.$_properties.SimpleButtonScope.$_overState && $$this.$$SimpleButton.$_properties.SimpleButtonScope.$_currentState == oldState)
				{
					$$this.$$SimpleButton.$_properties.SimpleButtonScope.$_currentState = null;
					if (oldState != $$this.$$SimpleButton.$_properties.SimpleButtonScope.$_hitTestState)
					{
						$$this.$$SimpleButton.$_properties.DisplayObjectScope.$_domView.removeChild(oldState.$__properties().DisplayObjectScope.$_domView);
					}
				}
			}
			$$this.$$SimpleButton.$_properties.SimpleButtonScope.$_upState = value;
			$$this.$$SimpleButton.$_refreshVisualState();
		}});
		Object.defineProperty(SimpleButton.prototype, 'useHandCursor', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$SimpleButton.$_properties.SimpleButtonScope.$_useHandCursor, Boolean);
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var $$this = this;
			$$this.$$SimpleButton.$_properties.SimpleButtonScope.$_useHandCursor = value;
			if (value)
			{
				$$this.$$SimpleButton.$_properties.DisplayObjectScope.$_domView.style.cursor = 'pointer';
			}
			else
			{
				$$this.$$SimpleButton.$_properties.DisplayObjectScope.$_domView.style.cursor = 'auto';
			}
		}});

		//properties
		SimpleButton.prototype.$$v.$_properties = {
		get:function () { var $$this = this.$$this; return $$this.$$SimpleButton.$$p.$_properties; },
		set:function (value) { var $$this = this.$$this; $$this.$$SimpleButton.$$p.$_properties = value }
		};

		SimpleButton.prototype.$$v._mouseBoundsState = {
		get:function () { var $$this = this.$$this; return $$this.$$SimpleButton.$$p._mouseBoundsState; },
		set:function (value) { var $$this = this.$$this; $$this.$$SimpleButton.$$p._mouseBoundsState = $es4.$$coerce(value, int); }
		};

		SimpleButton.prototype.$$v._mousePressState = {
		get:function () { var $$this = this.$$this; return $$this.$$SimpleButton.$$p._mousePressState; },
		set:function (value) { var $$this = this.$$this; $$this.$$SimpleButton.$$p._mousePressState = $es4.$$coerce(value, int); }
		};

		SimpleButton.prototype.$$v._stage = {
		get:function () { var $$this = this.$$this; return $$this.$$SimpleButton.$$p._stage; },
		set:function (value) { var $$this = this.$$this; $$this.$$SimpleButton.$$p._stage = $es4.$$coerce(value, Stage); }
		};

	});

	//class initializer
	SimpleButton.$$cinit = (function ()
	{
		SimpleButton.$$cinit = undefined;
	});

	function SimpleButton()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof SimpleButton) || $$this.$$SimpleButton !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], SimpleButton) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			SimpleButton.$$construct($$this, $$args);
		}
	}

	//construct
	SimpleButton.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (SimpleButton.$$cinit !== undefined) SimpleButton.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$SimpleButton', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$SimpleButton, '$_properties', SimpleButton.prototype.$$v.$_properties);
		Object.defineProperty($$this.$$SimpleButton, '_mouseBoundsState', SimpleButton.prototype.$$v._mouseBoundsState);
		Object.defineProperty($$this.$$SimpleButton, '_mousePressState', SimpleButton.prototype.$$v._mousePressState);
		Object.defineProperty($$this.$$SimpleButton, '_stage', SimpleButton.prototype.$$v._stage);

		//private instance method
		Object.defineProperty($$this.$$SimpleButton, '$onRemovedFromStage', SimpleButton.prototype.$$v.$onRemovedFromStage);

		//private instance method
		Object.defineProperty($$this.$$SimpleButton, '$_refreshVisualState', SimpleButton.prototype.$$v.$_refreshVisualState);

		//private instance method
		Object.defineProperty($$this.$$SimpleButton, '$onClickEvent', SimpleButton.prototype.$$v.$onClickEvent);

		//private instance method
		Object.defineProperty($$this.$$SimpleButton, '$onOverEvent', SimpleButton.prototype.$$v.$onOverEvent);

		//private instance method
		Object.defineProperty($$this.$$SimpleButton, '$onOutEvent', SimpleButton.prototype.$$v.$onOutEvent);

		//private instance method
		Object.defineProperty($$this.$$SimpleButton, '$onDownEvent', SimpleButton.prototype.$$v.$onDownEvent);

		//private instance method
		Object.defineProperty($$this.$$SimpleButton, '$onUpEvent', SimpleButton.prototype.$$v.$onUpEvent);

		//call construct on super
		InteractiveObject.$$construct($$this);

		//initialize properties
		SimpleButton.$$iinit($$this);

		//call constructor
		if (args !== undefined) SimpleButton.$$constructor.apply($$this, args);
	});

	//initializer
	SimpleButton.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$SimpleButton.$$p.$_properties = undefined;
		$$this.$$SimpleButton.$$p._mouseBoundsState = $es4.$$coerce(SimpleButton.MOUSE_BOUNDS_STATE_OUT, int);
		$$this.$$SimpleButton.$$p._mousePressState = $es4.$$coerce(SimpleButton.MOUSE_PRESS_STATE_UP, int);
		$$this.$$SimpleButton.$$p._stage = $es4.$$coerce(undefined, Stage);
	
		//call iinit on super
		InteractiveObject.$$iinit($$this);
	});

	//constructor
	SimpleButton.$$constructor = (function ($$$$upState, $$$$overState, $$$$downState, $$$$hitTestState)
	{
		var $$this = this;
		//set default parameter values
		var upState = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$upState, DisplayObject);
		var overState = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$overState, DisplayObject);
		var downState = (2 > arguments.length - 1) ? null : $es4.$$coerce($$$$downState, DisplayObject);
		var hitTestState = (3 > arguments.length - 1) ? null : $es4.$$coerce($$$$hitTestState, DisplayObject);

		if ($$this.$$SimpleButton.$_properties === undefined)
		{
			$$this.$__properties({});
		}
		InteractiveObject.$$constructor.call($$this);
		$$this.$$SimpleButton.$_properties.InteractiveObjectScope.$_tabEnabled = true;
		$$this.$$SimpleButton.$_properties.DisplayObjectScope.$_domView.setAttribute('role', $$this.$$SimpleButton.$_properties.InteractiveObjectScope.$_role = 'button');
		$$this.$$SimpleButton.$_properties.DisplayObjectScope.$_domView.style.cursor = 'pointer';
		$$this.addEventListener(Event.REMOVED_FROM_STAGE, $$this.$$SimpleButton.$onRemovedFromStage);
	});

	return $es4.$$class(SimpleButton, {EXTENDS:'flash.display.InteractiveObject'}, 'flash.display::SimpleButton');
})();
//flash.display.SimpleButton


//flash.text.engine.TextBlock
$es4.$$package('flash.text.engine').TextBlock = function () { throw new Error('Use of unimplemented class: TextBlock'); }
//flash.text.engine.TextBlock


//fl.controls.ScrollBarDirection
$es4.$$package('fl.controls').ScrollBarDirection = (function ()
{
	//properties
	var $$j = {};
	ScrollBarDirection.VERTICAL = "vertical";
	ScrollBarDirection.HORIZONTAL = "horizontal";

	//class pre initializer
	ScrollBarDirection.$$sinit = (function ()
	{
		ScrollBarDirection.$$sinit = undefined;

		//set prototype and constructor
		ScrollBarDirection.prototype = Object.create(Object.prototype);
		Object.defineProperty(ScrollBarDirection.prototype, "constructor", { value: ScrollBarDirection, enumerable: false });

		//hold private values
		Object.defineProperty(ScrollBarDirection.prototype, '$$v', {value:{}});
	});

	//class initializer
	ScrollBarDirection.$$cinit = (function ()
	{
		ScrollBarDirection.$$cinit = undefined;
	});

	function ScrollBarDirection()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof ScrollBarDirection) || $$this.$$ScrollBarDirection !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], ScrollBarDirection) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			ScrollBarDirection.$$construct($$this, $$args);
		}
	}

	//construct
	ScrollBarDirection.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (ScrollBarDirection.$$cinit !== undefined) ScrollBarDirection.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$ScrollBarDirection', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		ScrollBarDirection.$$iinit($$this);

		//call constructor
		if (args !== undefined) ScrollBarDirection.$$constructor.apply($$this, args);
	});

	//initializer
	ScrollBarDirection.$$iinit = (function ($$this)
	{
	});

	//constructor
	ScrollBarDirection.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(ScrollBarDirection, null, 'fl.controls::ScrollBarDirection');
})();
//fl.controls.ScrollBarDirection


//flash.text.engine.GraphicElement
$es4.$$package('flash.text.engine').GraphicElement = function () { throw new Error('Use of unimplemented class: GraphicElement'); }
//flash.text.engine.GraphicElement


//flash.system.LoaderContext
$es4.$$package('flash.system').LoaderContext = (function ()
{
	//imports
	var DisplayObjectContainer;
	var ApplicationDomain;
	var SecurityDomain;

	//class pre initializer
	LoaderContext.$$sinit = (function ()
	{
		LoaderContext.$$sinit = undefined;

		//initialize imports
		DisplayObjectContainer = $es4.$$['flash.display'].DisplayObjectContainer;
		ApplicationDomain = $es4.$$['flash.system'].ApplicationDomain;
		SecurityDomain = $es4.$$['flash.system'].SecurityDomain;

		//set prototype and constructor
		LoaderContext.prototype = Object.create(Object.prototype);
		Object.defineProperty(LoaderContext.prototype, "constructor", { value: LoaderContext, enumerable: false });

		//hold private values
		Object.defineProperty(LoaderContext.prototype, '$$v', {value:{}});

		Object.defineProperty(LoaderContext.prototype, 'allowLoadBytesCodeExecution', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('LoaderContext: attempted call to an unimplemented function "allowLoadBytesCodeExecution"'));
		}, set:function ($$$$allow)
		{
			//set default parameter values
			var allow = $es4.$$coerce($$$$allow, Boolean);

			var $$this = this;
			throw $es4.$$primitive(new Error('LoaderContext: attempted call to an unimplemented function "allowLoadBytesCodeExecution"'));
		}});

		//properties
		Object.defineProperty(LoaderContext.prototype, 'allowCodeImport', {
		get:function () { var $$this = this; return $$this.$$LoaderContext.allowCodeImport; },
		set:function (value) { var $$this = this; $$this.$$LoaderContext.allowCodeImport = $es4.$$coerce(value, Boolean); }
		});

		Object.defineProperty(LoaderContext.prototype, 'applicationDomain', {
		get:function () { var $$this = this; return $$this.$$LoaderContext.applicationDomain; },
		set:function (value) { var $$this = this; $$this.$$LoaderContext.applicationDomain = $es4.$$coerce(value, ApplicationDomain); }
		});

		Object.defineProperty(LoaderContext.prototype, 'checkPolicyFile', {
		get:function () { var $$this = this; return $$this.$$LoaderContext.checkPolicyFile; },
		set:function (value) { var $$this = this; $$this.$$LoaderContext.checkPolicyFile = $es4.$$coerce(value, Boolean); }
		});

		Object.defineProperty(LoaderContext.prototype, 'imageDecodingPolicy', {
		get:function () { var $$this = this; return $$this.$$LoaderContext.imageDecodingPolicy; },
		set:function (value) { var $$this = this; $$this.$$LoaderContext.imageDecodingPolicy = $es4.$$coerce(value, String); }
		});

		Object.defineProperty(LoaderContext.prototype, 'parameters', {
		get:function () { var $$this = this; return $$this.$$LoaderContext.parameters; },
		set:function (value) { var $$this = this; $$this.$$LoaderContext.parameters = $es4.$$coerce(value, Object); }
		});

		Object.defineProperty(LoaderContext.prototype, 'requestedContentParent', {
		get:function () { var $$this = this; return $$this.$$LoaderContext.requestedContentParent; },
		set:function (value) { var $$this = this; $$this.$$LoaderContext.requestedContentParent = $es4.$$coerce(value, DisplayObjectContainer); }
		});

		Object.defineProperty(LoaderContext.prototype, 'securityDomain', {
		get:function () { var $$this = this; return $$this.$$LoaderContext.securityDomain; },
		set:function (value) { var $$this = this; $$this.$$LoaderContext.securityDomain = $es4.$$coerce(value, SecurityDomain); }
		});

	});

	//class initializer
	LoaderContext.$$cinit = (function ()
	{
		LoaderContext.$$cinit = undefined;
	});

	function LoaderContext()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof LoaderContext) || $$this.$$LoaderContext !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], LoaderContext) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			LoaderContext.$$construct($$this, $$args);
		}
	}

	//construct
	LoaderContext.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (LoaderContext.$$cinit !== undefined) LoaderContext.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$LoaderContext', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		LoaderContext.$$iinit($$this);

		//call constructor
		if (args !== undefined) LoaderContext.$$constructor.apply($$this, args);
	});

	//initializer
	LoaderContext.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$LoaderContext.allowCodeImport = $es4.$$coerce(undefined, Boolean);
		$$this.$$LoaderContext.applicationDomain = $es4.$$coerce(undefined, ApplicationDomain);
		$$this.$$LoaderContext.checkPolicyFile = $es4.$$coerce(undefined, Boolean);
		$$this.$$LoaderContext.imageDecodingPolicy = $es4.$$coerce(undefined, String);
		$$this.$$LoaderContext.parameters = $es4.$$coerce(undefined, Object);
		$$this.$$LoaderContext.requestedContentParent = $es4.$$coerce(undefined, DisplayObjectContainer);
		$$this.$$LoaderContext.securityDomain = $es4.$$coerce(undefined, SecurityDomain);
	
	});

	//constructor
	LoaderContext.$$constructor = (function ($$$$checkPolicyFile, $$$$applicationDomain, $$$$securityDomain)
	{
		var $$this = this;
		//set default parameter values
		var checkPolicyFile = (0 > arguments.length - 1) ? false : $es4.$$coerce($$$$checkPolicyFile, Boolean);
		var applicationDomain = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$applicationDomain, ApplicationDomain);
		var securityDomain = (2 > arguments.length - 1) ? null : $es4.$$coerce($$$$securityDomain, SecurityDomain);

		$$this.applicationDomain = applicationDomain || $es4.$$primitive(new ApplicationDomain());
	});

	return $es4.$$class(LoaderContext, null, 'flash.system::LoaderContext');
})();
//flash.system.LoaderContext


//browser.Browser
$es4.$$package('browser').Browser = (function ()
{
	//imports
	var Sprite;
	var ByteArray;
	var Browser;

	//properties
	var $$j = {};
	Object.defineProperty(Browser, '$_transformOriginString', {
	get:function () { if (Browser.$$cinit !== undefined) Browser.$$cinit(); return $$j.$_transformOriginString; },
	set:function (value) { if (Browser.$$cinit !== undefined) Browser.$$cinit(); $$j.$_transformOriginString = $es4.$$coerce(value, String); }
	});

	Object.defineProperty(Browser, '$_transformString', {
	get:function () { if (Browser.$$cinit !== undefined) Browser.$$cinit(); return $$j.$_transformString; },
	set:function (value) { if (Browser.$$cinit !== undefined) Browser.$$cinit(); $$j.$_transformString = $es4.$$coerce(value, String); }
	});

	Object.defineProperty(Browser, '$_backfaceVisibilityString', {
	get:function () { if (Browser.$$cinit !== undefined) Browser.$$cinit(); return $$j.$_backfaceVisibilityString; },
	set:function (value) { if (Browser.$$cinit !== undefined) Browser.$$cinit(); $$j.$_backfaceVisibilityString = $es4.$$coerce(value, String); }
	});


	//class pre initializer
	Browser.$$sinit = (function ()
	{
		Browser.$$sinit = undefined;

		//initialize imports
		Sprite = $es4.$$['flash.display'].Sprite;
		ByteArray = $es4.$$['flash.utils'].ByteArray;

		//set prototype and constructor
		Browser.prototype = Object.create(Object.prototype);
		Object.defineProperty(Browser.prototype, "constructor", { value: Browser, enumerable: false });

		//hold private values
		Object.defineProperty(Browser.prototype, '$$v', {value:{}});
	});

	//class initializer
	Browser.$$cinit = (function ()
	{
		Browser.$$cinit = undefined;

		//initialize properties
		$$j.$_transformOriginString = $es4.$$coerce(undefined, String);
		$$j.$_transformString = $es4.$$coerce(undefined, String);
		$$j.$_backfaceVisibilityString = $es4.$$coerce(undefined, String);
	
	});

	//public static method
	Browser.doEval = (function ($$$$js)
	{
		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		//set default parameter values
		var js = $es4.$$coerce($$$$js, String);

		var object = (window.execScript) ? window.execScript(js) : window.eval.call(window, js);
		if (object)
		{
			$es4.$$construct(object, []);
		}
		else
		{
			object = $es4.$$primitive(new Sprite());
		}
		return $es4.$$coerce(object, Sprite);
	});

	//public static method
	Browser.getWindow = (function ()
	{
		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		return window;
	});

	//public static method
	Browser.domParseXML = (function ($$$$textValue)
	{
		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		//set default parameter values
		var textValue = $es4.$$coerce($$$$textValue, String);

		return $es4.$$primitive(new window.DOMParser().parseFromString(textValue, 'text/xml'));
	});

	//public static method
	Browser.getNewAudio = (function ()
	{
		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		if (window.audios && window.audios.length)
		{
			return window.audios.pop();
		}
		return document.createElement('audio');
	});

	//public static method
	Browser.getNewAudioContext = (function ()
	{
		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		var audioContext;
		if (window.audioContexts && window.audioContexts.length)
		{
			audioContext = window.audioContexts[0];
		}
		else if (!window.mobile)
		{
			window.audioContexts = [];
			try
			{
				audioContext = window.audioContexts[0] = $es4.$$primitive(new (window.webkitAudioContext !== undefined ? window.webkitAudioContext : window.AudioContext)());
			}
			catch (error)
			{
				trace('failed to create audio context: ' + error);
			}
		}
		if (audioContext && audioContext.state !== undefined && audioContext.state != 'running' && window.mobile)
		{
			trace('invalid audioContext state: ' + audioContext.state);
			if (audioContext.close !== undefined)
			{
				audioContext.close();
			}
			window.audioContexts = [];
			return null;
		}
		return audioContext;
	});

	//public static method
	Browser.getNewVideo = (function ()
	{
		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		if (window.videos && window.videos.length)
		{
			return window.videos.pop();
		}
		var video = document.createElement('video');
		video.setAttribute('webkit-playsinline', '');
		video.setAttribute('preload', 'auto');
		video.style.objectFit = video.style.imageFit = 'fill';
		return video;
	});

	//public static method
	Browser.getDisplayObjectElement = (function ($$$$displayObject)
	{
		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		//set default parameter values
		var displayObject = $$$$displayObject;

		return displayObject.$__properties().DisplayObjectScope.$_domView;
	});

	//public static method
	Browser.getNewUint8Array = (function ($$$$value)
	{
		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		//set default parameter values
		var value = $$$$value;

		return $es4.$$primitive(new window.Uint8Array(value));
	});

	//public static method
	Browser.getTransformOriginString = (function ()
	{
		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		if (Browser.$_transformOriginString)
		{
			return Browser.$_transformOriginString;
		}
		var transformString = null;
		if (document.body.style.transformOrigin !== undefined)
		{
			transformString = 'transformOrigin';
		}
		else if (document.body.style.webkitTransformOrigin !== undefined)
		{
			transformString = 'webkitTransformOrigin';
		}
		else if (document.body.style.mozTransformOrigin !== undefined)
		{
			transformString = 'mozTransformOrigin';
		}
		else if (document.body.style.msTransformOrigin !== undefined)
		{
			transformString = 'msTransformOrigin';
		}
		else if (document.body.style.oTransformOrigin !== undefined)
		{
			transformString = 'oTransformOrigin';
		}
		return Browser.$_transformOriginString = transformString;
	});

	//public static method
	Browser.getTransformString = (function ()
	{
		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		if (Browser.$_transformString)
		{
			return Browser.$_transformString;
		}
		var transformString = null;
		if (document.body.style.transform !== undefined)
		{
			transformString = 'transform';
		}
		else if (document.body.style.webkitTransform !== undefined)
		{
			transformString = 'webkitTransform';
		}
		else if (document.body.style.mozTransform !== undefined)
		{
			transformString = 'mozTransform';
		}
		else if (document.body.style.msTransform !== undefined)
		{
			transformString = 'msTransform';
		}
		else if (document.body.style.oTransform !== undefined)
		{
			transformString = 'oTransform';
		}
		return Browser.$_transformString = transformString;
	});

	//public static method
	Browser.getBackfaceVisibilityString = (function ()
	{
		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		if (Browser.$_backfaceVisibilityString)
		{
			return Browser.$_backfaceVisibilityString;
		}
		var backfaceVisibilityString = null;
		if (document.body.style.backfaceVisibility !== undefined)
		{
			backfaceVisibilityString = 'backfaceVisibility';
		}
		else if (document.body.style.webkitBackfaceVisibility !== undefined)
		{
			backfaceVisibilityString = 'webkitBackfaceVisibility';
		}
		return Browser.$_backfaceVisibilityString = backfaceVisibilityString;
	});

	//public static method
	Browser.getTapHighlightColorString = (function ()
	{
		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		return 'webkitTapHighlightColor';
	});

	//public static method
	Browser.getNewXMLSerializer = (function ()
	{
		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		return $es4.$$primitive(new window.XMLSerializer());
	});

	//public static method
	Browser.getNewXMLHttpRequest = (function ()
	{
		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		return $es4.$$primitive(new window.XMLHttpRequest());
	});

	//public static method
	Browser.getLWF = (function ()
	{
		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		if (window.LWF)
		{
			return window.LWF;
		}
		var xmlHttpRequest = Browser.getNewXMLHttpRequest();
		xmlHttpRequest.open('GET', 'js/as3-js-player/lwf/lwf.min.js', false);
		xmlHttpRequest.overrideMimeType('text/javascript');
		xmlHttpRequest.send(null);
		var js = $es4.$$coerce(xmlHttpRequest.responseText, String);
		(window.execScript) ? window.execScript(js) : window.eval.call(window, js);
		return window.LWF;
	});

	//public static method
	Browser.getFlashWebGL = (function ()
	{
		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		if (window.flwebgl)
		{
			return window.flwebgl;
		}
		var xmlHttpRequest = Browser.getNewXMLHttpRequest();
		xmlHttpRequest.open('GET', 'js/as3-js-player/flwebgl/flwebgl-0.2.min.js', false);
		xmlHttpRequest.overrideMimeType('text/javascript');
		xmlHttpRequest.send(null);
		var js = $es4.$$coerce(xmlHttpRequest.responseText, String);
		(window.execScript) ? window.execScript(js) : window.eval.call(window, js);
		return window.flwebgl;
	});

	//public static method
	Browser.getByteArray = (function ($$$$url)
	{
		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		//set default parameter values
		var url = $es4.$$coerce($$$$url, String);

		var xmlHttpRequest = Browser.getNewXMLHttpRequest();
		xmlHttpRequest.open('GET', url, false);
		xmlHttpRequest.responseType = 'arraybuffer';
		xmlHttpRequest.send(null);
		var byteArray = $es4.$$primitive(new ByteArray());
		byteArray['$__setArrayBuffer'](xmlHttpRequest.response);
		return byteArray;
	});

	//public static method
	Browser.convertArrayBufferToBase64String = (function () { return $es4.$$coerce((function ($$$$arrayBuffer)
	{
		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		//set default parameter values
		var arrayBuffer = $$$$arrayBuffer;


	var base64    = '';
	var encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	var bytes         = new window.Uint8Array(arrayBuffer);
	var byteLength    = bytes.byteLength;
	var byteRemainder = byteLength % 3;
	var mainLength    = byteLength - byteRemainder;

	var a, b, c, d;
	var chunk;

	
	for (var i = 0; i < mainLength; i = i + 3)
	{
		
		chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];

		
		a = (chunk & 16515072) >> 18 
		b = (chunk & 258048)   >> 12 
		c = (chunk & 4032)     >>  6 
		d = chunk & 63               

		
		base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d];
	}

	
	if (byteRemainder == 1)
	{
		chunk = bytes[mainLength];

		a = (chunk & 252) >> 2 

		
		b = (chunk & 3)   << 4 

		base64 += encodings[a] + encodings[b] + '==';
	}
	else if (byteRemainder == 2)
	{
		chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1];

		a = (chunk & 64512) >> 10 
		b = (chunk & 1008)  >>  4 

		
		c = (chunk & 15)    <<  2 

		base64 += encodings[a] + encodings[b] + encodings[c] + '=';
	}

	return base64;

	}).apply(this, arguments), String);});

	function Browser()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof Browser) || $$this.$$Browser !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Browser) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			Browser.$$construct($$this, $$args);
		}
	}

	//construct
	Browser.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$Browser', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		Browser.$$iinit($$this);

		//call constructor
		if (args !== undefined) Browser.$$constructor.apply($$this, args);
	});

	//initializer
	Browser.$$iinit = (function ($$this)
	{
	});

	//constructor
	Browser.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(Browser, null, 'browser::Browser');
})();
//browser.Browser


//flash.text.AntiAliasType
$es4.$$package('flash.text').AntiAliasType = (function ()
{
	//properties
	var $$j = {};
	AntiAliasType.ADVANCED = "advanced";
	AntiAliasType.NORMAL = "normal";

	//class pre initializer
	AntiAliasType.$$sinit = (function ()
	{
		AntiAliasType.$$sinit = undefined;

		//set prototype and constructor
		AntiAliasType.prototype = Object.create(Object.prototype);
		Object.defineProperty(AntiAliasType.prototype, "constructor", { value: AntiAliasType, enumerable: false });

		//hold private values
		Object.defineProperty(AntiAliasType.prototype, '$$v', {value:{}});
	});

	//class initializer
	AntiAliasType.$$cinit = (function ()
	{
		AntiAliasType.$$cinit = undefined;
	});

	function AntiAliasType()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof AntiAliasType) || $$this.$$AntiAliasType !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], AntiAliasType) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			AntiAliasType.$$construct($$this, $$args);
		}
	}

	//construct
	AntiAliasType.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (AntiAliasType.$$cinit !== undefined) AntiAliasType.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$AntiAliasType', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		AntiAliasType.$$iinit($$this);

		//call constructor
		if (args !== undefined) AntiAliasType.$$constructor.apply($$this, args);
	});

	//initializer
	AntiAliasType.$$iinit = (function ($$this)
	{
	});

	//constructor
	AntiAliasType.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(AntiAliasType, null, 'flash.text::AntiAliasType');
})();
//flash.text.AntiAliasType


//flash.text.engine.EastAsianJustifier
$es4.$$package('flash.text.engine').EastAsianJustifier = function () { throw new Error('Use of unimplemented class: EastAsianJustifier'); }
//flash.text.engine.EastAsianJustifier


//flash.text.FontType
$es4.$$package('flash.text').FontType = (function ()
{
	//properties
	var $$j = {};
	FontType.DEVICE = "device";
	FontType.EMBEDDED = "embedded";
	FontType.EMBEDDED_CFF = "embeddedCFF";

	//class pre initializer
	FontType.$$sinit = (function ()
	{
		FontType.$$sinit = undefined;

		//set prototype and constructor
		FontType.prototype = Object.create(Object.prototype);
		Object.defineProperty(FontType.prototype, "constructor", { value: FontType, enumerable: false });

		//hold private values
		Object.defineProperty(FontType.prototype, '$$v', {value:{}});
	});

	//class initializer
	FontType.$$cinit = (function ()
	{
		FontType.$$cinit = undefined;
	});

	function FontType()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof FontType) || $$this.$$FontType !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], FontType) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			FontType.$$construct($$this, $$args);
		}
	}

	//construct
	FontType.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (FontType.$$cinit !== undefined) FontType.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$FontType', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		FontType.$$iinit($$this);

		//call constructor
		if (args !== undefined) FontType.$$constructor.apply($$this, args);
	});

	//initializer
	FontType.$$iinit = (function ($$this)
	{
	});

	//constructor
	FontType.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(FontType, null, 'flash.text::FontType');
})();
//flash.text.FontType


//flash.text.engine.TextLine
$es4.$$package('flash.text.engine').TextLine = function () { throw new Error('Use of unimplemented class: TextLine'); }
//flash.text.engine.TextLine


//flash.events.SecurityErrorEvent
$es4.$$package('flash.events').SecurityErrorEvent = (function ()
{
	//imports
	var Event;
	var SecurityErrorEvent;
	var ErrorEvent;

	//properties
	var $$j = {};
	SecurityErrorEvent.SECURITY_ERROR = "securityError";

	//class pre initializer
	SecurityErrorEvent.$$sinit = (function ()
	{
		SecurityErrorEvent.$$sinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;
		ErrorEvent = $es4.$$['flash.events'].ErrorEvent;

		//ensure $$sinit is called on super class
		if (ErrorEvent.$$sinit !== undefined) ErrorEvent.$$sinit();

		//set prototype and constructor
		SecurityErrorEvent.prototype = Object.create(ErrorEvent.prototype);
		Object.defineProperty(SecurityErrorEvent.prototype, "constructor", { value: SecurityErrorEvent, enumerable: false });

		//hold private values
		Object.defineProperty(SecurityErrorEvent.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(SecurityErrorEvent.prototype, 'clone', {
		get:function ()
		{
			var $$this = this;

			function clone()
			{
				return $es4.$$coerce($es4.$$primitive(new SecurityErrorEvent($$this.type, $$this.bubbles, $$this.cancelable, $$this.text, $$this.errorID)), Event);
			}

			return $$this.$$SecurityErrorEvent.$$clone || ($$this.$$SecurityErrorEvent.$$clone = clone);
		}});


		//public instance method
		Object.defineProperty(SecurityErrorEvent.prototype, 'toString', {
		get:function ()
		{
			var $$this = this;

			function toString()
			{
				return $$this.formatToString('SecurityErrorEvent', 'bubbles', 'cancelable', 'text', 'errorID');
			}

			return $$this.$$SecurityErrorEvent.$$toString || ($$this.$$SecurityErrorEvent.$$toString = toString);
		}});
	});

	//class initializer
	SecurityErrorEvent.$$cinit = (function ()
	{
		SecurityErrorEvent.$$cinit = undefined;
	});

	function SecurityErrorEvent()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof SecurityErrorEvent) || $$this.$$SecurityErrorEvent !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], SecurityErrorEvent) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			SecurityErrorEvent.$$construct($$this, $$args);
		}
	}

	//construct
	SecurityErrorEvent.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (SecurityErrorEvent.$$cinit !== undefined) SecurityErrorEvent.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$SecurityErrorEvent', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//call construct on super
		ErrorEvent.$$construct($$this);

		//initialize properties
		SecurityErrorEvent.$$iinit($$this);

		//call constructor
		if (args !== undefined) SecurityErrorEvent.$$constructor.apply($$this, args);
	});

	//initializer
	SecurityErrorEvent.$$iinit = (function ($$this)
	{
		//call iinit on super
		ErrorEvent.$$iinit($$this);
	});

	//constructor
	SecurityErrorEvent.$$constructor = (function ($$$$type, $$$$bubbles, $$$$cancelable, $$$$text, $$$$id)
	{
		var $$this = this;
		//set default parameter values
		var type = $es4.$$coerce($$$$type, String);
		var bubbles = (1 > arguments.length - 1) ? false : $es4.$$coerce($$$$bubbles, Boolean);
		var cancelable = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$cancelable, Boolean);
		var text = (3 > arguments.length - 1) ? "" : $es4.$$coerce($$$$text, String);
		var id = (4 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$id, int);

		ErrorEvent.$$constructor.call($$this, type, bubbles, cancelable, text, id);
	});

	return $es4.$$class(SecurityErrorEvent, {EXTENDS:'flash.events.ErrorEvent'}, 'flash.events::SecurityErrorEvent');
})();
//flash.events.SecurityErrorEvent


//flash.display.GradientType
$es4.$$package('flash.display').GradientType = function () { throw new Error('Use of unimplemented class: GradientType'); }
//flash.display.GradientType


//flash.utils.Timer
$es4.$$package('flash.utils').Timer = (function ()
{
	//imports
	var EventDispatcher;
	var TimerEvent;

	//class pre initializer
	Timer.$$sinit = (function ()
	{
		Timer.$$sinit = undefined;

		//initialize imports
		EventDispatcher = $es4.$$['flash.events'].EventDispatcher;
		TimerEvent = $es4.$$['flash.events'].TimerEvent;

		//ensure $$sinit is called on super class
		if (EventDispatcher.$$sinit !== undefined) EventDispatcher.$$sinit();

		//set prototype and constructor
		Timer.prototype = Object.create(EventDispatcher.prototype);
		Object.defineProperty(Timer.prototype, "constructor", { value: Timer, enumerable: false });

		//hold private values
		Object.defineProperty(Timer.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(Timer.prototype, 'reset', {
		get:function ()
		{
			var $$this = this;

			function reset()
			{
				$$this.stop();
				$$this.$$Timer._currentCount = 0;
			}

			return $$this.$$Timer.$$reset || ($$this.$$Timer.$$reset = reset);
		}});


		//public instance method
		Object.defineProperty(Timer.prototype, 'start', {
		get:function ()
		{
			var $$this = this;

			function start()
			{
				if ($$this.$$Timer.timer)
				{
					return;
				}
				$$this.$$Timer.timer = window.setInterval($$this.$$Timer.tick, $$this.$$Timer._delay);
			}

			return $$this.$$Timer.$$start || ($$this.$$Timer.$$start = start);
		}});


		//public instance method
		Object.defineProperty(Timer.prototype, 'stop', {
		get:function ()
		{
			var $$this = this;

			function stop()
			{
				if (!$$this.$$Timer.timer)
				{
					return;
				}
				window.clearInterval($$this.$$Timer.timer);
				$$this.$$Timer.timer = null;
			}

			return $$this.$$Timer.$$stop || ($$this.$$Timer.$$stop = stop);
		}});


		//private instance method
		Timer.prototype.$$v.tick = {
		get:function ()
		{
			var $$this = this.$$this;

			function tick()
			{
				if (!$$this.$$Timer.timer)
				{
					return;
				}
				++$$this.$$Timer._currentCount;
				try
				{
					$$this.dispatchEvent($es4.$$primitive(new TimerEvent(TimerEvent.TIMER)));
				}
				catch (e)
				{
					trace("ERROR", e);
				}
				$$this.$$Timer.checkComplete();
			}

			return $$this.$$Timer.$$p.$$tick || ($$this.$$Timer.$$p.$$tick = tick);
		}};


		//private instance method
		Timer.prototype.$$v.checkComplete = {
		get:function ()
		{
			var $$this = this.$$this;

			function checkComplete()
			{
				if ($$this.$$Timer._repeatCount > 0 && $$this.$$Timer._currentCount >= $$this.$$Timer._repeatCount)
				{
					$$this.stop();
					$$this.dispatchEvent($es4.$$primitive(new TimerEvent(TimerEvent.TIMER_COMPLETE)));
				}
			}

			return $$this.$$Timer.$$p.$$checkComplete || ($$this.$$Timer.$$p.$$checkComplete = checkComplete);
		}};

		Object.defineProperty(Timer.prototype, 'currentCount', {get:function ()
		{
			var $$this = this;
			return $$this.$$Timer._currentCount;
		}});
		Object.defineProperty(Timer.prototype, 'delay', {get:function ()
		{
			var $$this = this;
			return $$this.$$Timer._delay;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var $$this = this;
			$$this.$$Timer._delay = value;
			if ($$this.$$Timer.timer)
			{
				$$this.stop();
				$$this.start();
			}
		}});
		Object.defineProperty(Timer.prototype, 'repeatCount', {get:function ()
		{
			var $$this = this;
			return $$this.$$Timer._repeatCount;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, int);

			var $$this = this;
			$$this.$$Timer._repeatCount = value;
			$$this.$$Timer.checkComplete();
		}});
		Object.defineProperty(Timer.prototype, 'running', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$Timer.timer != null, Boolean);
		}});

		//properties
		Timer.prototype.$$v.timer = {
		get:function () { var $$this = this.$$this; return $$this.$$Timer.$$p.timer; },
		set:function (value) { var $$this = this.$$this; $$this.$$Timer.$$p.timer = $es4.$$coerce(value, Object); }
		};

		Timer.prototype.$$v._delay = {
		get:function () { var $$this = this.$$this; return $$this.$$Timer.$$p._delay; },
		set:function (value) { var $$this = this.$$this; $$this.$$Timer.$$p._delay = $es4.$$coerce(value, Number); }
		};

		Timer.prototype.$$v._repeatCount = {
		get:function () { var $$this = this.$$this; return $$this.$$Timer.$$p._repeatCount; },
		set:function (value) { var $$this = this.$$this; $$this.$$Timer.$$p._repeatCount = $es4.$$coerce(value, int); }
		};

		Timer.prototype.$$v._currentCount = {
		get:function () { var $$this = this.$$this; return $$this.$$Timer.$$p._currentCount; },
		set:function (value) { var $$this = this.$$this; $$this.$$Timer.$$p._currentCount = $es4.$$coerce(value, int); }
		};

	});

	//class initializer
	Timer.$$cinit = (function ()
	{
		Timer.$$cinit = undefined;
	});

	function Timer()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof Timer) || $$this.$$Timer !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Timer) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			Timer.$$construct($$this, $$args);
		}
	}

	//construct
	Timer.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (Timer.$$cinit !== undefined) Timer.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$Timer', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$Timer, 'timer', Timer.prototype.$$v.timer);
		Object.defineProperty($$this.$$Timer, '_delay', Timer.prototype.$$v._delay);
		Object.defineProperty($$this.$$Timer, '_repeatCount', Timer.prototype.$$v._repeatCount);
		Object.defineProperty($$this.$$Timer, '_currentCount', Timer.prototype.$$v._currentCount);

		//private instance method
		Object.defineProperty($$this.$$Timer, 'tick', Timer.prototype.$$v.tick);

		//private instance method
		Object.defineProperty($$this.$$Timer, 'checkComplete', Timer.prototype.$$v.checkComplete);

		//call construct on super
		EventDispatcher.$$construct($$this);

		//initialize properties
		Timer.$$iinit($$this);

		//call constructor
		if (args !== undefined) Timer.$$constructor.apply($$this, args);
	});

	//initializer
	Timer.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$Timer.$$p.timer = $es4.$$coerce(null, Object);
		$$this.$$Timer.$$p._delay = $es4.$$coerce(undefined, Number);
		$$this.$$Timer.$$p._repeatCount = $es4.$$coerce(undefined, int);
		$$this.$$Timer.$$p._currentCount = $es4.$$coerce(0, int);
	
		//call iinit on super
		EventDispatcher.$$iinit($$this);
	});

	//constructor
	Timer.$$constructor = (function ($$$$delay, $$$$repeatCount)
	{
		var $$this = this;
		//set default parameter values
		var delay = $es4.$$coerce($$$$delay, Number);
		var repeatCount = (1 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$repeatCount, int);


		EventDispatcher.$$constructor.call($$this);

		$$this.$$Timer._delay = delay;
		$$this.$$Timer._repeatCount = repeatCount;
	});

	return $es4.$$class(Timer, {EXTENDS:'flash.events.EventDispatcher'}, 'flash.utils::Timer');
})();
//flash.utils.Timer


//flash.sampler.CertificateStatus
$es4.$$package('flash.sampler').CertificateStatus = function () { throw new Error('Use of unimplemented class: CertificateStatus'); }
//flash.sampler.CertificateStatus


//flash.net.Responder
$es4.$$package('flash.net').Responder = function () { throw new Error('Use of unimplemented class: Responder'); }
//flash.net.Responder


//flash.geom.Utils3D
$es4.$$package('flash.geom').Utils3D = function () { throw new Error('Use of unimplemented class: Utils3D'); }
//flash.geom.Utils3D


//flash.globalization.DateTimeNameStyle
$es4.$$package('flash.globalization').DateTimeNameStyle = function () { throw new Error('Use of unimplemented class: DateTimeNameStyle'); }
//flash.globalization.DateTimeNameStyle


//flash.display.StageQuality
$es4.$$package('flash.display').StageQuality = (function ()
{
	//properties
	var $$j = {};
	StageQuality.BEST = "best";
	StageQuality.HIGH = "high";
	StageQuality.LOW = "low";
	StageQuality.MEDIUM = "medium";

	//class pre initializer
	StageQuality.$$sinit = (function ()
	{
		StageQuality.$$sinit = undefined;

		//set prototype and constructor
		StageQuality.prototype = Object.create(Object.prototype);
		Object.defineProperty(StageQuality.prototype, "constructor", { value: StageQuality, enumerable: false });

		//hold private values
		Object.defineProperty(StageQuality.prototype, '$$v', {value:{}});
	});

	//class initializer
	StageQuality.$$cinit = (function ()
	{
		StageQuality.$$cinit = undefined;
	});

	function StageQuality()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof StageQuality) || $$this.$$StageQuality !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], StageQuality) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			StageQuality.$$construct($$this, $$args);
		}
	}

	//construct
	StageQuality.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (StageQuality.$$cinit !== undefined) StageQuality.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$StageQuality', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		StageQuality.$$iinit($$this);

		//call constructor
		if (args !== undefined) StageQuality.$$constructor.apply($$this, args);
	});

	//initializer
	StageQuality.$$iinit = (function ($$this)
	{
	});

	//constructor
	StageQuality.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(StageQuality, null, 'flash.display::StageQuality');
})();
//flash.display.StageQuality


//flash.text.engine.DigitWidth
$es4.$$package('flash.text.engine').DigitWidth = function () { throw new Error('Use of unimplemented class: DigitWidth'); }
//flash.text.engine.DigitWidth


//flash.text.engine.TextLineCreationResult
$es4.$$package('flash.text.engine').TextLineCreationResult = function () { throw new Error('Use of unimplemented class: TextLineCreationResult'); }
//flash.text.engine.TextLineCreationResult


//flash.display.InteractiveObject
$es4.$$package('flash.display').InteractiveObject = (function ()
{
	//imports
	var AccessibilityImplementation;
	var DisplayObjectContainer;
	var Event;
	var FocusEvent;
	var KeyboardEvent;
	var MouseEvent;
	var Point;
	var ContextMenu;
	var Keyboard;
	var getTimer;
	var InteractiveObject;
	var Stage;
	var DisplayObject;

	//class pre initializer
	InteractiveObject.$$sinit = (function ()
	{
		InteractiveObject.$$sinit = undefined;

		//initialize imports
		AccessibilityImplementation = $es4.$$['flash.accessibility'].AccessibilityImplementation;
		DisplayObjectContainer = $es4.$$['flash.display'].DisplayObjectContainer;
		Event = $es4.$$['flash.events'].Event;
		FocusEvent = $es4.$$['flash.events'].FocusEvent;
		KeyboardEvent = $es4.$$['flash.events'].KeyboardEvent;
		MouseEvent = $es4.$$['flash.events'].MouseEvent;
		Point = $es4.$$['flash.geom'].Point;
		ContextMenu = $es4.$$['flash.ui'].ContextMenu;
		Keyboard = $es4.$$['flash.ui'].Keyboard;
		getTimer = $es4.$$['flash.utils'].getTimer;
		Stage = $es4.$$['flash.display'].Stage;
		DisplayObject = $es4.$$['flash.display'].DisplayObject;

		//ensure $$sinit is called on super class
		if (DisplayObject.$$sinit !== undefined) DisplayObject.$$sinit();

		//set prototype and constructor
		InteractiveObject.prototype = Object.create(DisplayObject.prototype);
		Object.defineProperty(InteractiveObject.prototype, "constructor", { value: InteractiveObject, enumerable: false });

		//hold private values
		Object.defineProperty(InteractiveObject.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(InteractiveObject.prototype, '$__notify', {
		get:function ()
		{
			var $$this = this;

			function $__notify($$$$name, $$$$args)
			{
				//set default parameter values
				var name = $es4.$$coerce($$$$name, String);
				var args = $$$$args;

				if (name === 'visibleFalse' && ($$this.$$InteractiveObject._window.firefox || $$this.$$InteractiveObject._window.ie))
				{
					var activeElement = document.activeElement;
					if (activeElement && activeElement.displayObject == $$this)
					{
						$$this.stage.focus = null;
					}
				}
				$es4.$$super2($$this, DisplayObject, '$$DisplayObject', '$__notify', 'func', undefined)(name, args);
			}

			return $$this.$$InteractiveObject.$$$__notify || ($$this.$$InteractiveObject.$$$__notify = $__notify);
		}});


		//public instance method
		Object.defineProperty(InteractiveObject.prototype, '$__properties', {
		get:function ()
		{
			var $$this = this;

			function $__properties($$$$object)
			{
				//set default parameter values
				var object = (0 > arguments.length - 1) ? null : $$$$object;

				if ($$this.$$InteractiveObject.$_properties === undefined)
				{
					object = $es4.$$super2($$this, DisplayObject, '$$DisplayObject', '$__properties', 'func', undefined)(object);
					object.InteractiveObjectScope = {$_mouseEnabled:true, $_tabEnabled:null, $_tabIndex:-1, $_role:'presentation', $_isMouseEventDispatchable:$$this.$$InteractiveObject.$_isMouseEventDispatchable};
					object.TLScope = $$this;
					return $$this.$$InteractiveObject.$_properties = object;
				}
				return $$this.$$InteractiveObject.$_properties;
			}

			return $$this.$$InteractiveObject.$$$__properties || ($$this.$$InteractiveObject.$$$__properties = $__properties);
		}});


		//private instance method
		InteractiveObject.prototype.$$v.$_isMouseEventDispatchable = {
		get:function ()
		{
			var $$this = this.$$this;

			function $_isMouseEventDispatchable()
			{
				if (!$$this.$$InteractiveObject.$_properties.InteractiveObjectScope.$_mouseEnabled)
				{
					return false;
				}
				var parent = $es4.$$coerce($$this.$$InteractiveObject.$_properties.TLScope.parent, DisplayObjectContainer);
				while ($$this.$$InteractiveObject.$_properties.InteractiveObjectScope.$_mouseEnabled && parent)
				{
					var properties = parent.$__properties().TLScope;
					if (!properties.mouseChildren)
					{
						return false;
					}
					parent = $es4.$$coerce(properties.parent, DisplayObjectContainer);
				}
				return true;
			}

			return $$this.$$InteractiveObject.$$p.$$$_isMouseEventDispatchable || ($$this.$$InteractiveObject.$$p.$$$_isMouseEventDispatchable = $_isMouseEventDispatchable);
		}};

		Object.defineProperty(InteractiveObject.prototype, 'mouseEnabled', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$InteractiveObject.$_properties.InteractiveObjectScope.$_mouseEnabled, Boolean);
		}, set:function ($$$$enabled)
		{
			//set default parameter values
			var enabled = $es4.$$coerce($$$$enabled, Boolean);

			var $$this = this;
			$$this.$$InteractiveObject.$_properties.InteractiveObjectScope.$_mouseEnabled = enabled;
			$$this.$$InteractiveObject.$_properties.DisplayObjectScope.$_domView.style.pointerEvents = (enabled) ? 'auto' : 'none';
		}});
		Object.defineProperty(InteractiveObject.prototype, 'doubleClickEnabled', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$InteractiveObject.$_properties.InteractiveObjectScope.$_doubleClickEnabled, Boolean);
		}, set:function ($$$$enabled)
		{
			//set default parameter values
			var enabled = $es4.$$coerce($$$$enabled, Boolean);

			var $$this = this;
			$$this.$$InteractiveObject.$_properties.InteractiveObjectScope.$_doubleClickEnabled = enabled;
		}});
		Object.defineProperty(InteractiveObject.prototype, 'contextMenu', {set:function ($$$$cm)
		{
			//set default parameter values
			var cm = $es4.$$coerce($$$$cm, ContextMenu);

			var $$this = this;
			throw $es4.$$primitive(new Error('InteractiveObject: attempted call to an unimplemented function "contextMenu"'));
		}});
		Object.defineProperty(InteractiveObject.prototype, 'tabEnabled', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$InteractiveObject.$_properties.InteractiveObjectScope.$_tabEnabled, Boolean);
		}, set:function ($$$$enabled)
		{
			//set default parameter values
			var enabled = $es4.$$coerce($$$$enabled, Boolean);

			var $$this = this;
			$$this.$$InteractiveObject.$_properties.InteractiveObjectScope.$_tabEnabled = enabled;
			if (enabled)
			{
				$$this.$$InteractiveObject.$_properties.DisplayObjectScope.$_domView.setAttribute('tabindex', $$this.$$InteractiveObject.$_properties.InteractiveObjectScope.$_tabIndex);
			}
			else
			{
				$$this.$$InteractiveObject.$_properties.DisplayObjectScope.$_domView.setAttribute('tabindex', -1);
			}
			if ($$this.$$InteractiveObject.$_properties.DisplayObjectScope.$_domView.getAttribute('role') != 'presentation')
			{
				$$this.$$InteractiveObject.$_properties.InteractiveObjectScope.$_role = $$this.$$InteractiveObject.$_properties.DisplayObjectScope.$_domView.getAttribute('role');
			}
			if (!enabled || $$this.$$InteractiveObject.$_properties.InteractiveObjectScope.$_tabIndex == -1)
			{
				$$this.$$InteractiveObject.$_properties.DisplayObjectScope.$_domView.setAttribute('role', 'presentation');
			}
			else
			{
				$$this.$$InteractiveObject.$_properties.DisplayObjectScope.$_domView.setAttribute('role', $$this.$$InteractiveObject.$_properties.InteractiveObjectScope.$_role);
			}
		}});
		Object.defineProperty(InteractiveObject.prototype, 'tabIndex', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$InteractiveObject.$_properties.InteractiveObjectScope.$_tabIndex, int);
		}, set:function ($$$$index)
		{
			//set default parameter values
			var index = $es4.$$coerce($$$$index, int);

			var $$this = this;
			$$this.$$InteractiveObject.$_properties.InteractiveObjectScope.$_tabIndex = index;
			if ($$this.$$InteractiveObject.$_properties.InteractiveObjectScope.$_tabEnabled !== false)
			{
				$$this.$$InteractiveObject.$_properties.DisplayObjectScope.$_domView.setAttribute('tabindex', index);
			}
			else
			{
				$$this.$$InteractiveObject.$_properties.DisplayObjectScope.$_domView.setAttribute('tabindex', -1);
			}
			var role = $es4.$$coerce($$this.$$InteractiveObject.$_properties.DisplayObjectScope.$_domView.getAttribute('role'), String);
			if (role !== 'presentation')
			{
				$$this.$$InteractiveObject.$_properties.InteractiveObjectScope.$_role = $$this.$$InteractiveObject.$_properties.DisplayObjectScope.$_domView.getAttribute('role');
			}
			if (($$this.$$InteractiveObject.$_properties.InteractiveObjectScope.$_tabEnabled === false || index === -1) && role !== 'progressbar')
			{
				$$this.$$InteractiveObject.$_properties.DisplayObjectScope.$_domView.setAttribute('role', 'presentation');
			}
			else
			{
				$$this.$$InteractiveObject.$_properties.DisplayObjectScope.$_domView.setAttribute('role', $$this.$$InteractiveObject.$_properties.InteractiveObjectScope.$_role);
			}
		}});
		Object.defineProperty(InteractiveObject.prototype, 'focusRect', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('InteractiveObject: attempted call to an unimplemented function "focusRect"'));
		}, set:function ($$$$focusRect)
		{
			//set default parameter values
			var focusRect = $es4.$$coerce($$$$focusRect, Object);

			var $$this = this;
			throw $es4.$$primitive(new Error('InteractiveObject: attempted call to an unimplemented function "focusRect"'));
		}});
		Object.defineProperty(InteractiveObject.prototype, 'accessibilityImplementation', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('InteractiveObject: attempted call to an unimplemented function "accessibilityImplementation"'));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, AccessibilityImplementation);

			var $$this = this;
			throw $es4.$$primitive(new Error('InteractiveObject: attempted call to an unimplemented function "accessibilityImplementation"'));
		}});

		//properties
		InteractiveObject.prototype.$$v.$_properties = {
		get:function () { var $$this = this.$$this; return $$this.$$InteractiveObject.$$p.$_properties; },
		set:function (value) { var $$this = this.$$this; $$this.$$InteractiveObject.$$p.$_properties = value }
		};

		InteractiveObject.prototype.$$v._window = {
		get:function () { var $$this = this.$$this; return $$this.$$InteractiveObject.$$p._window; },
		set:function (value) { var $$this = this.$$this; $$this.$$InteractiveObject.$$p._window = $es4.$$coerce(value, Object); }
		};

	});

	//class initializer
	InteractiveObject.$$cinit = (function ()
	{
		InteractiveObject.$$cinit = undefined;
	});

	//public static method
	InteractiveObject.$_getOriginalInteractiveObjectTarget = (function ($$$$target)
	{
		if (InteractiveObject.$$cinit !== undefined) InteractiveObject.$$cinit();

		//set default parameter values
		var target = $$$$target;

		while (target)
		{
			if (target.displayObject && $es4.$$is(target.displayObject, InteractiveObject) && target.displayObject.$__properties().InteractiveObjectScope.$_isMouseEventDispatchable())
			{
				return $es4.$$as(target.displayObject, InteractiveObject);
			}
			target = target.parentNode;
		}
		return null;
	});

	//public static method
	InteractiveObject.getTouch = (function ($$$$event)
	{
		if (InteractiveObject.$$cinit !== undefined) InteractiveObject.$$cinit();

		//set default parameter values
		var event = $$$$event;

		if (event.touches.length)
		{
			return event.touches[0];
		}
		return event.changedTouches[0];
	});
	function InteractiveObject()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof InteractiveObject) || $$this.$$InteractiveObject !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], InteractiveObject) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			InteractiveObject.$$construct($$this, $$args);
		}
	}

	//construct
	InteractiveObject.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (InteractiveObject.$$cinit !== undefined) InteractiveObject.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$InteractiveObject', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$InteractiveObject, '$_properties', InteractiveObject.prototype.$$v.$_properties);
		Object.defineProperty($$this.$$InteractiveObject, '_window', InteractiveObject.prototype.$$v._window);

		//private instance method
		Object.defineProperty($$this.$$InteractiveObject, '$_isMouseEventDispatchable', InteractiveObject.prototype.$$v.$_isMouseEventDispatchable);

		//call construct on super
		DisplayObject.$$construct($$this);

		//initialize properties
		InteractiveObject.$$iinit($$this);

		//call constructor
		if (args !== undefined) InteractiveObject.$$constructor.apply($$this, args);
	});

	//initializer
	InteractiveObject.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$InteractiveObject.$$p.$_properties = undefined;
		$$this.$$InteractiveObject.$$p._window = $es4.$$coerce(undefined, Object);
	
		//call iinit on super
		DisplayObject.$$iinit($$this);
	});

	//constructor
	InteractiveObject.$$constructor = (function ()
	{
		var $$this = this;
		if ($$this.$$InteractiveObject.$_properties === undefined)
		{
			$$this.$__properties({});
		}
		DisplayObject.$$constructor.call($$this);
		var domView = $$this.$$InteractiveObject.$_properties.DisplayObjectScope.$_domView;
		domView.style.pointerEvents = 'auto';
		var over = false;
		var ref = $es4.$$coerce($$this, $es4.$$['flash.display'].InteractiveObject);
		var win = $$this.$$InteractiveObject._window = window;
		var mobile = $es4.$$coerce(win.mobile, Boolean);
		var refIsStage = $es4.$$is(ref, Stage);
		var view = (refIsStage) ? Stage.$__domDocument : domView;
		var onDOMBodyOut = null;
		var onMouseUp = null;
		var onMouseOut = $es4.$$coerce(function ($$$$event, $$$$forceDispatch) 
		{
			//set default parameter values
			var event = $$$$event;
			var forceDispatch = (1 > arguments.length - 1) ? false : $$$$forceDispatch;

			if (!forceDispatch && (!$$this.visible || !$$this.$$InteractiveObject.$_isMouseEventDispatchable()))
			{
				event.originalDisplayObjectTarget = InteractiveObject.$_getOriginalInteractiveObjectTarget(event.target);
				event.originalTarget = event.target;
				return;
			}
			over = false;
			if (!mobile)
			{
				$$this.$$InteractiveObject.$_properties.InteractiveObjectScope.$_onMouseOut = null;
			}
			var clientX = $es4.$$coerce((mobile && event.clientX === undefined) ? InteractiveObject.getTouch(event).pageX : event.clientX, Number);
			var clientY = $es4.$$coerce((mobile && event.clientY === undefined) ? InteractiveObject.getTouch(event).pageY : event.clientY, Number);
			var localPoint = $$this.globalToLocal($es4.$$primitive(new Point(clientX, clientY)));
			var mouseOutEvent = $es4.$$primitive(new MouseEvent(MouseEvent.MOUSE_OUT, true, true, localPoint.x, localPoint.y));
			mouseOutEvent.$__properties().EventScope.$_target = event.originalDisplayObjectTarget || ref;
			mouseOutEvent.$__properties().EventScope.$_originalTarget = event.originalTarget || event.target;
			$$this.dispatchEvent(mouseOutEvent);
			var mouseRollOutEvent = $es4.$$primitive(new MouseEvent(MouseEvent.ROLL_OUT, true, true, localPoint.x, localPoint.y));
			mouseRollOutEvent.$__properties().EventScope.$_target = event.originalDisplayObjectTarget || ref;
			mouseRollOutEvent.$__properties().EventScope.$_originalTarget = event.originalTarget || event.target;
			$$this.dispatchEvent(mouseRollOutEvent);
			event.stopPropagation();
		}
, Function);
		var onMouseOver = $es4.$$coerce(function ($$$$event, $$$$forceDispatch) 
		{
			//set default parameter values
			var event = $$$$event;
			var forceDispatch = (1 > arguments.length - 1) ? false : $$$$forceDispatch;

			if (!forceDispatch && (!$$this.visible || !$$this.$$InteractiveObject.$_isMouseEventDispatchable()))
			{
				event.originalDisplayObjectTarget = InteractiveObject.$_getOriginalInteractiveObjectTarget(event.target);
				event.originalTarget = event.target;
				return;
			}
			if (over)
			{
				return;
			}
			over = true;
			if (!mobile)
			{
				$$this.$$InteractiveObject.$_properties.InteractiveObjectScope.$_onMouseOut = onMouseOut;
			}
			var clientX = $es4.$$coerce((mobile && event.clientX === undefined) ? InteractiveObject.getTouch(event).pageX : event.clientX, Number);
			var clientY = $es4.$$coerce((mobile && event.clientY === undefined) ? InteractiveObject.getTouch(event).pageY : event.clientY, Number);
			var localPoint = $$this.globalToLocal($es4.$$primitive(new Point(clientX, clientY)));
			var mouseOverEvent = $es4.$$primitive(new MouseEvent(MouseEvent.MOUSE_OVER, true, true, localPoint.x, localPoint.y));
			mouseOverEvent.$__properties().EventScope.$_target = event.originalDisplayObjectTarget || ref;
			mouseOverEvent.$__properties().EventScope.$_originalTarget = event.originalTarget || event.target;
			$$this.dispatchEvent(mouseOverEvent);
			var mouseRollOverEvent = $es4.$$primitive(new MouseEvent(MouseEvent.ROLL_OVER, true, true, localPoint.x, localPoint.y));
			mouseRollOverEvent.$__properties().EventScope.$_target = event.originalDisplayObjectTarget || ref;
			mouseRollOverEvent.$__properties().EventScope.$_originalTarget = event.originalTarget || event.target;
			$$this.dispatchEvent(mouseRollOverEvent);
			event.stopPropagation();
		}
, Function);
		var doubleClickTime = 0;
		var onMouseDown = $es4.$$coerce(function ($$$$event, $$$$forceDispatch) 
		{
			//set default parameter values
			var event = $$$$event;
			var forceDispatch = (1 > arguments.length - 1) ? false : $$$$forceDispatch;

			if (!forceDispatch && (!$$this.visible || !$$this.$$InteractiveObject.$_isMouseEventDispatchable()))
			{
				event.originalDisplayObjectTarget = InteractiveObject.$_getOriginalInteractiveObjectTarget(event.target);
				event.originalTarget = event.target;
				return;
			}
			if (mobile)
			{
				$$this.$$InteractiveObject.$_properties.InteractiveObjectScope.$_onMouseUp = onMouseUp;
				onMouseOver(event, true);
			}
			else
			{
				win.addEventListener('mouseup', onDOMBodyOut, true);
				ref.addEventListener(Event.REMOVED_FROM_STAGE, onDOMBodyOut);
			}
			var clientX = $es4.$$coerce((mobile && event.clientX === undefined) ? InteractiveObject.getTouch(event).pageX : event.clientX, Number);
			var clientY = $es4.$$coerce((mobile && event.clientY === undefined) ? InteractiveObject.getTouch(event).pageY : event.clientY, Number);
			var localPoint = $$this.globalToLocal($es4.$$primitive(new Point(clientX, clientY)));
			var mouseDownEvent = $es4.$$primitive(new MouseEvent(MouseEvent.MOUSE_DOWN, true, true, localPoint.x, localPoint.y));
			mouseDownEvent.$__properties().EventScope.$_target = event.originalDisplayObjectTarget || ref;
			mouseDownEvent.$__properties().EventScope.$_originalTarget = event.originalTarget || event.target;
			$$this.dispatchEvent(mouseDownEvent);
			event.stopPropagation();
			if (mobile && (event.target.nodeName != 'A' && event.target.nodeName != 'TEXTAREA' && !(event.target.contentEditable === 'true')))
			{
				event.preventDefault();
			}
		}
, Function);
		onMouseUp = $es4.$$coerce(function ($$$$event, $$$$forceDispatch) 
{
			//set default parameter values
			var event = $$$$event;
			var forceDispatch = (1 > arguments.length - 1) ? false : $$$$forceDispatch;

	if (!forceDispatch && (!$$this.visible || !$$this.$$InteractiveObject.$_isMouseEventDispatchable()))
	{
		event.originalDisplayObjectTarget = InteractiveObject.$_getOriginalInteractiveObjectTarget(event.target);
		event.originalTarget = event.target;
		return;
	}
	if (!mobile)
	{
		win.removeEventListener('mouseup', onDOMBodyOut, true);
		ref.removeEventListener(Event.REMOVED_FROM_STAGE, onDOMBodyOut);
		ref.removeEventListener(Event.ADDED_TO_STAGE, onDOMBodyOut);
	}
	else
	{
		$$this.$$InteractiveObject.$_properties.InteractiveObjectScope.$_onMouseUp = null;
	}
	var doDoubleClickEvent = false;
	if ($$this.doubleClickEnabled)
	{
		doubleClickTime = getTimer() - doubleClickTime;
		if (doubleClickTime < 500)
		{
			doDoubleClickEvent = true;
		}
		else
		{
			doubleClickTime = getTimer();
		}
	}
	var clientX = $es4.$$coerce((mobile && event.clientX === undefined) ? InteractiveObject.getTouch(event).pageX : event.clientX, Number);
	var clientY = $es4.$$coerce((mobile && event.clientY === undefined) ? InteractiveObject.getTouch(event).pageY : event.clientY, Number);
	var localPoint = $$this.globalToLocal($es4.$$primitive(new Point(clientX, clientY)));
	var mouseUpEvent = $es4.$$primitive(new MouseEvent(MouseEvent.MOUSE_UP, true, true, localPoint.x, localPoint.y));
	mouseUpEvent.$__properties().EventScope.$_target = event.originalDisplayObjectTarget || ref;
	mouseUpEvent.$__properties().EventScope.$_originalTarget = event.originalTarget || event.target;
	$$this.dispatchEvent(mouseUpEvent);
	var mouseClickEvent = $es4.$$primitive(new MouseEvent(MouseEvent.CLICK, true, true, localPoint.x, localPoint.y, null, event.ctrlKey, event.altKey, event.shiftKey));
	mouseClickEvent.$__properties().EventScope.$_target = event.originalDisplayObjectTarget || ref;
	mouseClickEvent.$__properties().EventScope.$_originalTarget = event.originalTarget || event.target;
	$$this.dispatchEvent(mouseClickEvent);
	if (doDoubleClickEvent)
	{
		var mouseDoubleClickEvent = $es4.$$primitive(new MouseEvent(MouseEvent.DOUBLE_CLICK, true, true, localPoint.x, localPoint.y));
		mouseDoubleClickEvent.$__properties().EventScope.$_target = event.originalDisplayObjectTarget || ref;
		mouseDoubleClickEvent.$__properties().EventScope.$_originalTarget = event.originalTarget || event.target;
		$$this.dispatchEvent(mouseDoubleClickEvent);
	}
	if (mobile)
	{
		onMouseOut(event, true);
	}
	event.stopPropagation();
}
, Function);
		onDOMBodyOut = $es4.$$coerce(function ($$$$event) 
{
			//set default parameter values
			var event = $$$$event;

	if (event.type == 'mouseup' && domView.parent)
	{
		var target = event.target;
		while (target)
		{
			if (target == domView)
			{
				return;
			}
			target = target.parentNode;
		}
	}
	win.removeEventListener('mouseup', onDOMBodyOut, true);
	ref.removeEventListener(Event.REMOVED_FROM_STAGE, onDOMBodyOut);
	ref.removeEventListener(Event.ADDED_TO_STAGE, onDOMBodyOut);
	if (event.type == Event.ADDED_TO_STAGE)
	{
		win.addEventListener('mouseup', onDOMBodyOut, true);
		ref.addEventListener(Event.REMOVED_FROM_STAGE, onDOMBodyOut);
		return;
	}
	if (event.type == Event.REMOVED_FROM_STAGE)
	{
		ref.addEventListener(Event.ADDED_TO_STAGE, onDOMBodyOut);
		return;
	}
	if (over)
	{
		onMouseOut(event);
	}
	onMouseUp(event);
}
, Function);
		if (mobile)
		{
			var onTouchCancel = $es4.$$coerce(function ($$$$event) 
			{
			//set default parameter values
			var event = $$$$event;

				trace('onTouchCancel');
				onMouseUp(event);
			}
, Function);
			view.addEventListener('touchstart', onMouseDown, false);
			view.addEventListener('touchend', onMouseUp, false);
			view.addEventListener('touchcancel', onTouchCancel, false);
		}
		else
		{
			view.addEventListener('mousedown', onMouseDown, false);
			view.addEventListener('mouseup', onMouseUp, false);
			view.addEventListener('mouseover', onMouseOver, false);
			view.addEventListener('mouseout', onMouseOut, false);
		}
		if (win.ie)
		{
			view.addEventListener('focusin', onFocusIn, false);
			view.addEventListener('focusout', onFocusOut, false);
		}
		else
		{
			view.addEventListener('focus', onFocusIn, false);
			view.addEventListener('blur', onFocusOut, false);
		}

		function onFocusIn($$$$event) 
		{
			//set default parameter values
			var event = $$$$event;

			var lastKeyPressedEvent = Stage.$__lastKeyPressedObject;
			var keyEvent = lastKeyPressedEvent || event;
			var focusEvent = null;
			if (lastKeyPressedEvent === null)
			{
				focusEvent = $es4.$$primitive(new FocusEvent(FocusEvent.MOUSE_FOCUS_CHANGE, true, true, ref, keyEvent.shiftKey, keyEvent.which || keyEvent.keyCode));
				focusEvent.$__properties().EventScope.$_target = event.originalDisplayObjectTarget || ref;
				var success = $$this.dispatchEvent(focusEvent);
				if (!success)
				{
					throw $es4.$$primitive(new Error('preventDefault not supported on FocusEvent.MOUSE_FOCUS_CHANGE'));
				}
			}
			focusEvent = $es4.$$primitive(new FocusEvent(FocusEvent.FOCUS_IN, true, false, ref, keyEvent.shiftKey, keyEvent.which || keyEvent.keyCode));
			focusEvent.$__properties().EventScope.$_target = event.originalDisplayObjectTarget || ref;
			$$this.dispatchEvent(focusEvent);
			event.stopPropagation();
		}
;

		function onFocusOut($$$$event) 
		{
			//set default parameter values
			var event = $$$$event;

			var keyEvent = Stage.$__lastKeyPressedObject || event;
			var focusEvent = $es4.$$primitive(new FocusEvent(FocusEvent.FOCUS_OUT, true, false, ref, keyEvent.shiftKey, keyEvent.which || keyEvent.keyCode));
			focusEvent.$__properties().EventScope.$_target = event.originalDisplayObjectTarget || ref;
			$$this.dispatchEvent(focusEvent);
			event.stopPropagation();
		}
;

		view.addEventListener('keyup', onKeyUp, false);
		view.addEventListener('keydown', onKeyDown, false);

		function onKeyUp($$$$event) 
		{
			//set default parameter values
			var event = $$$$event;

			if (!$$this.visible)
			{
				event.originalDisplayObjectTarget = InteractiveObject.$_getOriginalInteractiveObjectTarget(event.target);
				return;
			}
			var keyboardEvent = $es4.$$primitive(new KeyboardEvent(KeyboardEvent.KEY_UP, true, false, event.charCode || event.keyCode, event.which || event.keyCode, event.location, event.ctrlKey, event.altKey, event.shiftKey));
			keyboardEvent.$__properties().EventScope.$_target = event.originalDisplayObjectTarget || ref;
			$$this.dispatchEvent(keyboardEvent);
			event.stopPropagation();
		}
;

		function onKeyDown($$$$event) 
		{
			//set default parameter values
			var event = $$$$event;

			if (!$$this.visible)
			{
				event.originalDisplayObjectTarget = InteractiveObject.$_getOriginalInteractiveObjectTarget(event.target);
				return;
			}
			var keyCode = event.which || event.keyCode;
			var keyboardEvent = $es4.$$primitive(new KeyboardEvent(KeyboardEvent.KEY_DOWN, true, false, event.charCode || keyCode, keyCode, event.location, event.ctrlKey, event.altKey, event.shiftKey));
			keyboardEvent.$__properties().EventScope.$_target = event.originalDisplayObjectTarget || ref;
			$$this.dispatchEvent(keyboardEvent);
			if (keyCode == Keyboard.TAB)
			{
				var focusEvent = $es4.$$primitive(new FocusEvent(FocusEvent.KEY_FOCUS_CHANGE, true, true, ref, event.shiftKey, keyCode));
				focusEvent.$__properties().EventScope.$_target = event.originalDisplayObjectTarget || ref;
				var success = $$this.dispatchEvent(focusEvent);
				if (!success)
				{
					event.preventDefault();
				}
			}
			event.stopPropagation();
		}
;
	});

	return $es4.$$class(InteractiveObject, {EXTENDS:'flash.display.DisplayObject'}, 'flash.display::InteractiveObject');
})();
//flash.display.InteractiveObject


//flash.net.drm.DRMContentData
$es4.$$package('flash.net.drm').DRMContentData = function () { throw new Error('Use of unimplemented class: DRMContentData'); }
//flash.net.drm.DRMContentData


//flash.text.engine.TextLineValidity
$es4.$$package('flash.text.engine').TextLineValidity = function () { throw new Error('Use of unimplemented class: TextLineValidity'); }
//flash.text.engine.TextLineValidity


//flash.events.StatusEvent
$es4.$$package('flash.events').StatusEvent = (function ()
{
	//imports
	var Event;

	//properties
	var $$j = {};
	StatusEvent.STATUS = "status";

	//class pre initializer
	StatusEvent.$$sinit = (function ()
	{
		StatusEvent.$$sinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;

		//ensure $$sinit is called on super class
		if (Event.$$sinit !== undefined) Event.$$sinit();

		//set prototype and constructor
		StatusEvent.prototype = Object.create(Event.prototype);
		Object.defineProperty(StatusEvent.prototype, "constructor", { value: StatusEvent, enumerable: false });

		//hold private values
		Object.defineProperty(StatusEvent.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(StatusEvent.prototype, 'clone', {
		get:function ()
		{
			var $$this = this;

			function clone()
			{
				throw $es4.$$primitive(new Error('StatusEvent: attempted call to an unimplemented function "clone"'));
			}

			return $$this.$$StatusEvent.$$clone || ($$this.$$StatusEvent.$$clone = clone);
		}});


		//public instance method
		Object.defineProperty(StatusEvent.prototype, 'toString', {
		get:function ()
		{
			var $$this = this;

			function toString()
			{
				throw $es4.$$primitive(new Error('StatusEvent: attempted call to an unimplemented function "toString"'));
			}

			return $$this.$$StatusEvent.$$toString || ($$this.$$StatusEvent.$$toString = toString);
		}});

		Object.defineProperty(StatusEvent.prototype, 'code', {get:function ()
		{
			var $$this = this;
			return $$this.$$StatusEvent._code;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			var $$this = this;
			throw $es4.$$primitive(new Error('StatusEvent: attempted call to an unimplemented function "code"'));
		}});
		Object.defineProperty(StatusEvent.prototype, 'level', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('StatusEvent: attempted call to an unimplemented function "level"'));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			var $$this = this;
			throw $es4.$$primitive(new Error('StatusEvent: attempted call to an unimplemented function "level"'));
		}});

		//properties
		StatusEvent.prototype.$$v._code = {
		get:function () { var $$this = this.$$this; return $$this.$$StatusEvent.$$p._code; },
		set:function (value) { var $$this = this.$$this; $$this.$$StatusEvent.$$p._code = $es4.$$coerce(value, String); }
		};

	});

	//class initializer
	StatusEvent.$$cinit = (function ()
	{
		StatusEvent.$$cinit = undefined;
	});

	function StatusEvent()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof StatusEvent) || $$this.$$StatusEvent !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], StatusEvent) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			StatusEvent.$$construct($$this, $$args);
		}
	}

	//construct
	StatusEvent.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (StatusEvent.$$cinit !== undefined) StatusEvent.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$StatusEvent', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$StatusEvent, '_code', StatusEvent.prototype.$$v._code);

		//call construct on super
		Event.$$construct($$this);

		//initialize properties
		StatusEvent.$$iinit($$this);

		//call constructor
		if (args !== undefined) StatusEvent.$$constructor.apply($$this, args);
	});

	//initializer
	StatusEvent.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$StatusEvent.$$p._code = $es4.$$coerce(undefined, String);
	
		//call iinit on super
		Event.$$iinit($$this);
	});

	//constructor
	StatusEvent.$$constructor = (function ($$$$type, $$$$bubbles, $$$$cancelable, $$$$code, $$$$level)
	{
		var $$this = this;
		//set default parameter values
		var type = $es4.$$coerce($$$$type, String);
		var bubbles = (1 > arguments.length - 1) ? false : $es4.$$coerce($$$$bubbles, Boolean);
		var cancelable = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$cancelable, Boolean);
		var code = (3 > arguments.length - 1) ? "" : $es4.$$coerce($$$$code, String);
		var level = (4 > arguments.length - 1) ? "" : $es4.$$coerce($$$$level, String);

		Event.$$constructor.call($$this, type, bubbles, cancelable);
		$$this.$$StatusEvent._code = code;
	});

	return $es4.$$class(StatusEvent, {EXTENDS:'flash.events.Event'}, 'flash.events::StatusEvent');
})();
//flash.events.StatusEvent


//flash.net.URLStream
$es4.$$package('flash.net').URLStream = function () { throw new Error('Use of unimplemented class: URLStream'); }
//flash.net.URLStream


//flash.text.Font
$es4.$$package('flash.text').Font = (function ()
{
	//class pre initializer
	Font.$$sinit = (function ()
	{
		Font.$$sinit = undefined;

		//set prototype and constructor
		Font.prototype = Object.create(Object.prototype);
		Object.defineProperty(Font.prototype, "constructor", { value: Font, enumerable: false });

		//hold private values
		Object.defineProperty(Font.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(Font.prototype, 'hasGlyphs', {
		get:function ()
		{
			var $$this = this;

			function hasGlyphs($$$$str)
			{
				//set default parameter values
				var str = $es4.$$coerce($$$$str, String);

				throw $es4.$$primitive(new Error('Font: attempted call to an unimplemented function "hasGlyphs"'));
			}

			return $$this.$$Font.$$hasGlyphs || ($$this.$$Font.$$hasGlyphs = hasGlyphs);
		}});

		Object.defineProperty(Font.prototype, 'fontName', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('Font: attempted call to an unimplemented function "fontName"'));
		}});
		Object.defineProperty(Font.prototype, 'fontStyle', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('Font: attempted call to an unimplemented function "fontStyle"'));
		}});
		Object.defineProperty(Font.prototype, 'fontType', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('Font: attempted call to an unimplemented function "fontType"'));
		}});
	});

	//class initializer
	Font.$$cinit = (function ()
	{
		Font.$$cinit = undefined;
	});

	//public static method
	Font.enumerateFonts = (function ($$$$enumerateDeviceFonts)
	{
		if (Font.$$cinit !== undefined) Font.$$cinit();

		//set default parameter values
		var enumerateDeviceFonts = (0 > arguments.length - 1) ? false : $es4.$$coerce($$$$enumerateDeviceFonts, Boolean);

		return [];
	});

	//public static method
	Font.registerFont = (function ($$$$font)
	{
		if (Font.$$cinit !== undefined) Font.$$cinit();

		//set default parameter values
		var font = $$$$font;

	});
	function Font()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof Font) || $$this.$$Font !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Font) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			Font.$$construct($$this, $$args);
		}
	}

	//construct
	Font.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (Font.$$cinit !== undefined) Font.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$Font', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		Font.$$iinit($$this);

		//call constructor
		if (args !== undefined) Font.$$constructor.apply($$this, args);
	});

	//initializer
	Font.$$iinit = (function ($$this)
	{
	});

	//constructor
	Font.$$constructor = (function ()
	{
		var $$this = this;
		throw $es4.$$primitive(new Error('Font: attempted call to an unimplemented constructor'));
	});

	return $es4.$$class(Font, null, 'flash.text::Font');
})();
//flash.text.Font


//flash.display3D.Context3DRenderMode
$es4.$$package('flash.display3D').Context3DRenderMode = function () { throw new Error('Use of unimplemented class: Context3DRenderMode'); }
//flash.display3D.Context3DRenderMode


//flash.display.LoaderInfo
$es4.$$package('flash.display').LoaderInfo = (function ()
{
	//imports
	var EventDispatcher;
	var UncaughtErrorEvents;
	var ApplicationDomain;
	var ByteArray;
	var Browser;
	var ActionScriptVersion;
	var SWFVersion;

	//class pre initializer
	LoaderInfo.$$sinit = (function ()
	{
		LoaderInfo.$$sinit = undefined;

		//initialize imports
		EventDispatcher = $es4.$$['flash.events'].EventDispatcher;
		UncaughtErrorEvents = $es4.$$['flash.events'].UncaughtErrorEvents;
		ApplicationDomain = $es4.$$['flash.system'].ApplicationDomain;
		ByteArray = $es4.$$['flash.utils'].ByteArray;
		Browser = $es4.$$['browser'].Browser;
		ActionScriptVersion = $es4.$$['flash.display'].ActionScriptVersion;
		SWFVersion = $es4.$$['flash.display'].SWFVersion;

		//ensure $$sinit is called on super class
		if (EventDispatcher.$$sinit !== undefined) EventDispatcher.$$sinit();

		//set prototype and constructor
		LoaderInfo.prototype = Object.create(EventDispatcher.prototype);
		Object.defineProperty(LoaderInfo.prototype, "constructor", { value: LoaderInfo, enumerable: false });

		//hold private values
		Object.defineProperty(LoaderInfo.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(LoaderInfo.prototype, '$__properties', {
		get:function ()
		{
			var $$this = this;

			function $__properties($$$$object)
			{
				//set default parameter values
				var object = (0 > arguments.length - 1) ? null : $$$$object;

				if ($$this.$$LoaderInfo.$_properties === undefined)
				{
					object = $es4.$$super2($$this, EventDispatcher, '$$EventDispatcher', '$__properties', 'func', undefined)(object);
					object.LoaderInfoScope = {$_parameters:{}, $_contentType:null, $_url:null, $_bytesTotal:null, $_bytesLoaded:null, $_loader:null};
					object.TLScope = $$this;
					return $$this.$$LoaderInfo.$_properties = object;
				}
				return $$this.$$LoaderInfo.$_properties;
			}

			return $$this.$$LoaderInfo.$$$__properties || ($$this.$$LoaderInfo.$$$__properties = $__properties);
		}});

		Object.defineProperty(LoaderInfo.prototype, 'actionScriptVersion', {get:function ()
		{
			var $$this = this;
			if ($$this.contentType == 'application/x-shockwave-flash')
			{
				return ActionScriptVersion.ACTIONSCRIPT3;
			}
			throw $es4.$$primitive(new Error('Incorrect contentType or not enough info available to retrieve actionScriptVersion'));
		}});
		Object.defineProperty(LoaderInfo.prototype, 'bytesLoaded', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$LoaderInfo.$_properties.LoaderInfoScope.$_bytesLoaded, uint);
		}});
		Object.defineProperty(LoaderInfo.prototype, 'bytesTotal', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$LoaderInfo.$_properties.LoaderInfoScope.$_bytesTotal, uint);
		}});
		Object.defineProperty(LoaderInfo.prototype, 'content', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$LoaderInfo.$_properties.LoaderInfoScope.$_loader.content, DisplayObject);
		}});
		Object.defineProperty(LoaderInfo.prototype, 'contentType', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$LoaderInfo.$_properties.LoaderInfoScope.$_contentType, String);
		}});
		Object.defineProperty(LoaderInfo.prototype, 'loader', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$LoaderInfo.$_properties.LoaderInfoScope.$_loader, Loader);
		}});
		Object.defineProperty(LoaderInfo.prototype, 'swfVersion', {get:function ()
		{
			var $$this = this;
			if ($$this.contentType == 'application/x-shockwave-flash')
			{
				return SWFVersion.FLASH9;
			}
			throw $es4.$$primitive(new Error('Incorrect contentType or not enough info available to retrieve swfVersion'));
		}});
		Object.defineProperty(LoaderInfo.prototype, 'url', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$LoaderInfo.$_properties.LoaderInfoScope.$_url, String);
		}});
		Object.defineProperty(LoaderInfo.prototype, 'width', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('LoaderInfo: attempted call to an unimplemented function "width"'));
		}});
		Object.defineProperty(LoaderInfo.prototype, 'uncaughtErrorEvents', {get:function ()
		{
			var $$this = this;
			return $es4.$$primitive(new UncaughtErrorEvents());
		}});
		Object.defineProperty(LoaderInfo.prototype, 'loaderURL', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('LoaderInfo: attempted call to an unimplemented function "loaderURL"'));
		}});
		Object.defineProperty(LoaderInfo.prototype, 'parameters', {get:function ()
		{
			var $$this = this;
			return $$this.$$LoaderInfo.$_properties.LoaderInfoScope.$_parameters;
		}});
		Object.defineProperty(LoaderInfo.prototype, 'parentAllowsChild', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('LoaderInfo: attempted call to an unimplemented function "parentAllowsChild"'));
		}});
		Object.defineProperty(LoaderInfo.prototype, 'sameDomain', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('LoaderInfo: attempted call to an unimplemented function "sameDomain"'));
		}});
		Object.defineProperty(LoaderInfo.prototype, 'sharedEvents', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('LoaderInfo: attempted call to an unimplemented function "sharedEvents"'));
		}});
		Object.defineProperty(LoaderInfo.prototype, 'frameRate', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('LoaderInfo: attempted call to an unimplemented function "frameRate"'));
		}});
		Object.defineProperty(LoaderInfo.prototype, 'height', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('LoaderInfo: attempted call to an unimplemented function "height"'));
		}});
		Object.defineProperty(LoaderInfo.prototype, 'isURLInaccessible', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('LoaderInfo: attempted call to an unimplemented function "isURLInaccessible"'));
		}});
		Object.defineProperty(LoaderInfo.prototype, 'applicationDomain', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$LoaderInfo.$_properties.LoaderInfoScope.$_loader.$__properties().LoaderScope.$_loaderContext.applicationDomain, ApplicationDomain);
		}});
		Object.defineProperty(LoaderInfo.prototype, 'bytes', {get:function ()
		{
			var $$this = this;
			return Browser.getByteArray($$this.$$LoaderInfo.$_properties.LoaderInfoScope.$_url);
		}});
		Object.defineProperty(LoaderInfo.prototype, 'childAllowsParent', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('LoaderInfo: attempted call to an unimplemented function "childAllowsParent"'));
		}});

		//properties
		LoaderInfo.prototype.$$v.$_properties = {
		get:function () { var $$this = this.$$this; return $$this.$$LoaderInfo.$$p.$_properties; },
		set:function (value) { var $$this = this.$$this; $$this.$$LoaderInfo.$$p.$_properties = value }
		};

	});

	//class initializer
	LoaderInfo.$$cinit = (function ()
	{
		LoaderInfo.$$cinit = undefined;
	});

	//public static method
	LoaderInfo.getLoaderInfoByDefinition = (function ($$$$object)
	{
		if (LoaderInfo.$$cinit !== undefined) LoaderInfo.$$cinit();

		//set default parameter values
		var object = $es4.$$coerce($$$$object, Object);

		throw $es4.$$primitive(new Error('LoaderInfo: attempted call to an unimplemented function "getLoaderInfoByDefinition"'));
	});
	function LoaderInfo()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof LoaderInfo) || $$this.$$LoaderInfo !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], LoaderInfo) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			LoaderInfo.$$construct($$this, $$args);
		}
	}

	//construct
	LoaderInfo.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (LoaderInfo.$$cinit !== undefined) LoaderInfo.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$LoaderInfo', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$LoaderInfo, '$_properties', LoaderInfo.prototype.$$v.$_properties);

		//call construct on super
		EventDispatcher.$$construct($$this);

		//initialize properties
		LoaderInfo.$$iinit($$this);

		//call constructor
		if (args !== undefined) LoaderInfo.$$constructor.apply($$this, args);
	});

	//initializer
	LoaderInfo.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$LoaderInfo.$$p.$_properties = undefined;
	
		//call iinit on super
		EventDispatcher.$$iinit($$this);
	});

	//constructor
	LoaderInfo.$$constructor = (function ()
	{
		var $$this = this;
		if ($$this.$$LoaderInfo.$_properties === undefined)
		{
			$$this.$__properties({});
		}
		EventDispatcher.$$constructor.call($$this);
	});

	return $es4.$$class(LoaderInfo, {EXTENDS:'flash.events.EventDispatcher'}, 'flash.display::LoaderInfo');
})();
//flash.display.LoaderInfo


//flash.display.Stage3D
$es4.$$package('flash.display').Stage3D = function () { throw new Error('Use of unimplemented class: Stage3D'); }
//flash.display.Stage3D


//flash.events.MouseEvent
$es4.$$package('flash.events').MouseEvent = (function ()
{
	//imports
	var InteractiveObject;
	var Event;
	var Point;
	var MouseEvent;

	//properties
	var $$j = {};
	MouseEvent.CLICK = "click";
	MouseEvent.CONTEXT_MENU = "contextMenu";
	MouseEvent.DOUBLE_CLICK = "doubleClick";
	MouseEvent.MIDDLE_CLICK = "middleClick";
	MouseEvent.MIDDLE_MOUSE_DOWN = "middleMouseDown";
	MouseEvent.MIDDLE_MOUSE_UP = "middleMouseUp";
	MouseEvent.MOUSE_DOWN = "mouseDown";
	MouseEvent.MOUSE_MOVE = "mouseMove";
	MouseEvent.MOUSE_OUT = "mouseOut";
	MouseEvent.MOUSE_OVER = "mouseOver";
	MouseEvent.MOUSE_UP = "mouseUp";
	MouseEvent.MOUSE_WHEEL = "mouseWheel";
	MouseEvent.RELEASE_OUTSIDE = "releaseOutside";
	MouseEvent.RIGHT_CLICK = "rightClick";
	MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
	MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
	MouseEvent.ROLL_OUT = "rollOut";
	MouseEvent.ROLL_OVER = "rollOver";

	//class pre initializer
	MouseEvent.$$sinit = (function ()
	{
		MouseEvent.$$sinit = undefined;

		//initialize imports
		InteractiveObject = $es4.$$['flash.display'].InteractiveObject;
		Event = $es4.$$['flash.events'].Event;
		Point = $es4.$$['flash.geom'].Point;

		//ensure $$sinit is called on super class
		if (Event.$$sinit !== undefined) Event.$$sinit();

		//set prototype and constructor
		MouseEvent.prototype = Object.create(Event.prototype);
		Object.defineProperty(MouseEvent.prototype, "constructor", { value: MouseEvent, enumerable: false });

		//hold private values
		Object.defineProperty(MouseEvent.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(MouseEvent.prototype, 'clone', {
		get:function ()
		{
			var $$this = this;

			function clone()
			{
				var mouseEvent = $es4.$$coerce($es4.$$primitive(new MouseEvent($$this.type, $$this.bubbles, $$this.cancelable, NaN, NaN, $$this.relatedObject, $$this.ctrlKey, $$this.altKey, $$this.shiftKey, $$this.buttonDown, $$this.delta)), $es4.$$['flash.events'].MouseEvent);
				mouseEvent.$__localPoint = $$this.$__localPoint;
				mouseEvent.$__stagePoint = $$this.$__stagePoint;
				return mouseEvent;
			}

			return $$this.$$MouseEvent.$$clone || ($$this.$$MouseEvent.$$clone = clone);
		}});


		//public instance method
		Object.defineProperty(MouseEvent.prototype, 'toString', {
		get:function ()
		{
			var $$this = this;

			function toString()
			{
				return $$this.formatToString("MouseEvent", "type", "bubbles", "cancelable", "localX", "localY", "stageX", "stageY", "relatedObject", "ctrlKey", "altKey", "shiftKey", "buttonDown", "delta");
			}

			return $$this.$$MouseEvent.$$toString || ($$this.$$MouseEvent.$$toString = toString);
		}});


		//public instance method
		Object.defineProperty(MouseEvent.prototype, 'updateAfterEvent', {
		get:function ()
		{
			var $$this = this;

			function updateAfterEvent()
			{
				throw $es4.$$primitive(new Error('MouseEvent: attempted call to an unimplemented function "updateAfterEvent"'));
			}

			return $$this.$$MouseEvent.$$updateAfterEvent || ($$this.$$MouseEvent.$$updateAfterEvent = updateAfterEvent);
		}});

		Object.defineProperty(MouseEvent.prototype, 'altKey', {get:function ()
		{
			var $$this = this;
			return $$this.$$MouseEvent._altKey;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var $$this = this;
			$$this.$$MouseEvent._altKey = value;
		}});
		Object.defineProperty(MouseEvent.prototype, 'buttonDown', {get:function ()
		{
			var $$this = this;
			return $$this.$$MouseEvent._buttonDown;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var $$this = this;
			$$this.$$MouseEvent._buttonDown = value;
		}});
		Object.defineProperty(MouseEvent.prototype, 'ctrlKey', {get:function ()
		{
			var $$this = this;
			return $$this.$$MouseEvent._ctrlKey;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var $$this = this;
			$$this.$$MouseEvent._ctrlKey = value;
		}});
		Object.defineProperty(MouseEvent.prototype, 'delta', {get:function ()
		{
			var $$this = this;
			return $$this.$$MouseEvent._delta;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, int);

			var $$this = this;
			$$this.$$MouseEvent._delta = value;
		}});
		Object.defineProperty(MouseEvent.prototype, 'isRelatedObjectInaccessible', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('MouseEvent: attempted call to an unimplemented function "isRelatedObjectInaccessible"'));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var $$this = this;
			throw $es4.$$primitive(new Error('MouseEvent: attempted call to an unimplemented function "isRelatedObjectInaccessible"'));
		}});
		Object.defineProperty(MouseEvent.prototype, 'localX', {get:function ()
		{
			var $$this = this;
			if (!$$this.$__localPoint)
			{
				if (!$$this.target)
				{
					return NaN;
				}
				$$this.$__localPoint = $$this.target.globalToLocal($$this.$__stagePoint);
			}
			return $$this.$__localPoint.x;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var $$this = this;
			if (!$$this.$__localPoint)
			{
				$$this.$__localPoint = $es4.$$primitive(new Point(value, 0));
			}
			else
			{
				$$this.$__localPoint.x = value;
			}
			$$this.$__stagePoint = null;
		}});
		Object.defineProperty(MouseEvent.prototype, 'localY', {get:function ()
		{
			var $$this = this;
			if (!$$this.$__localPoint)
			{
				if (!$$this.target)
				{
					return NaN;
				}
				$$this.$__localPoint = $$this.target.globalToLocal($$this.$__stagePoint);
			}
			return $$this.$__localPoint.y;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var $$this = this;
			if (!$$this.$__localPoint)
			{
				$$this.$__localPoint = $es4.$$primitive(new Point(0, value));
			}
			else
			{
				$$this.$__localPoint.y = value;
			}
			$$this.$__stagePoint = null;
		}});
		Object.defineProperty(MouseEvent.prototype, 'movementX', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('MouseEvent: attempted call to an unimplemented function "movementX"'));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var $$this = this;
			throw $es4.$$primitive(new Error('MouseEvent: attempted call to an unimplemented function "movementX"'));
		}});
		Object.defineProperty(MouseEvent.prototype, 'movementY', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('MouseEvent: attempted call to an unimplemented function "movementY"'));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var $$this = this;
			throw $es4.$$primitive(new Error('MouseEvent: attempted call to an unimplemented function "movementY"'));
		}});
		Object.defineProperty(MouseEvent.prototype, 'relatedObject', {get:function ()
		{
			var $$this = this;
			return $$this.$$MouseEvent._relatedObject;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, InteractiveObject);

			var $$this = this;
			$$this.$$MouseEvent._relatedObject = value;
		}});
		Object.defineProperty(MouseEvent.prototype, 'shiftKey', {get:function ()
		{
			var $$this = this;
			return $$this.$$MouseEvent._shiftKey;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var $$this = this;
			$$this.$$MouseEvent._shiftKey = value;
		}});
		Object.defineProperty(MouseEvent.prototype, 'stageX', {get:function ()
		{
			var $$this = this;
			if (!$$this.$__stagePoint)
			{
				if (!$$this.target)
				{
					return NaN;
				}
				$$this.$__stagePoint = $$this.target.localToGlobal($$this.$__localPoint);
			}
			return $$this.$__stagePoint.x;
		}});
		Object.defineProperty(MouseEvent.prototype, 'stageY', {get:function ()
		{
			var $$this = this;
			if (!$$this.$__stagePoint)
			{
				if (!$$this.target)
				{
					return NaN;
				}
				$$this.$__stagePoint = $$this.target.localToGlobal($$this.$__localPoint);
			}
			return $$this.$__stagePoint.y;
		}});

		//properties
		MouseEvent.prototype.$$v._relatedObject = {
		get:function () { var $$this = this.$$this; return $$this.$$MouseEvent.$$p._relatedObject; },
		set:function (value) { var $$this = this.$$this; $$this.$$MouseEvent.$$p._relatedObject = $es4.$$coerce(value, InteractiveObject); }
		};

		MouseEvent.prototype.$$v._ctrlKey = {
		get:function () { var $$this = this.$$this; return $$this.$$MouseEvent.$$p._ctrlKey; },
		set:function (value) { var $$this = this.$$this; $$this.$$MouseEvent.$$p._ctrlKey = $es4.$$coerce(value, Boolean); }
		};

		MouseEvent.prototype.$$v._delta = {
		get:function () { var $$this = this.$$this; return $$this.$$MouseEvent.$$p._delta; },
		set:function (value) { var $$this = this.$$this; $$this.$$MouseEvent.$$p._delta = $es4.$$coerce(value, int); }
		};

		MouseEvent.prototype.$$v._buttonDown = {
		get:function () { var $$this = this.$$this; return $$this.$$MouseEvent.$$p._buttonDown; },
		set:function (value) { var $$this = this.$$this; $$this.$$MouseEvent.$$p._buttonDown = $es4.$$coerce(value, Boolean); }
		};

		MouseEvent.prototype.$$v._shiftKey = {
		get:function () { var $$this = this.$$this; return $$this.$$MouseEvent.$$p._shiftKey; },
		set:function (value) { var $$this = this.$$this; $$this.$$MouseEvent.$$p._shiftKey = $es4.$$coerce(value, Boolean); }
		};

		MouseEvent.prototype.$$v._altKey = {
		get:function () { var $$this = this.$$this; return $$this.$$MouseEvent.$$p._altKey; },
		set:function (value) { var $$this = this.$$this; $$this.$$MouseEvent.$$p._altKey = $es4.$$coerce(value, Boolean); }
		};

		Object.defineProperty(MouseEvent.prototype, '$__localPoint', {
		get:function () { var $$this = this; return $$this.$$MouseEvent.$__localPoint; },
		set:function (value) { var $$this = this; $$this.$$MouseEvent.$__localPoint = $es4.$$coerce(value, Point); }
		});

		Object.defineProperty(MouseEvent.prototype, '$__stagePoint', {
		get:function () { var $$this = this; return $$this.$$MouseEvent.$__stagePoint; },
		set:function (value) { var $$this = this; $$this.$$MouseEvent.$__stagePoint = $es4.$$coerce(value, Point); }
		});

	});

	//class initializer
	MouseEvent.$$cinit = (function ()
	{
		MouseEvent.$$cinit = undefined;
	});

	function MouseEvent()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof MouseEvent) || $$this.$$MouseEvent !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], MouseEvent) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			MouseEvent.$$construct($$this, $$args);
		}
	}

	//construct
	MouseEvent.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (MouseEvent.$$cinit !== undefined) MouseEvent.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$MouseEvent', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$MouseEvent, '_relatedObject', MouseEvent.prototype.$$v._relatedObject);
		Object.defineProperty($$this.$$MouseEvent, '_ctrlKey', MouseEvent.prototype.$$v._ctrlKey);
		Object.defineProperty($$this.$$MouseEvent, '_delta', MouseEvent.prototype.$$v._delta);
		Object.defineProperty($$this.$$MouseEvent, '_buttonDown', MouseEvent.prototype.$$v._buttonDown);
		Object.defineProperty($$this.$$MouseEvent, '_shiftKey', MouseEvent.prototype.$$v._shiftKey);
		Object.defineProperty($$this.$$MouseEvent, '_altKey', MouseEvent.prototype.$$v._altKey);

		//call construct on super
		Event.$$construct($$this);

		//initialize properties
		MouseEvent.$$iinit($$this);

		//call constructor
		if (args !== undefined) MouseEvent.$$constructor.apply($$this, args);
	});

	//initializer
	MouseEvent.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$MouseEvent.$$p._relatedObject = $es4.$$coerce(undefined, InteractiveObject);
		$$this.$$MouseEvent.$$p._ctrlKey = $es4.$$coerce(undefined, Boolean);
		$$this.$$MouseEvent.$$p._delta = $es4.$$coerce(undefined, int);
		$$this.$$MouseEvent.$$p._buttonDown = $es4.$$coerce(undefined, Boolean);
		$$this.$$MouseEvent.$$p._shiftKey = $es4.$$coerce(undefined, Boolean);
		$$this.$$MouseEvent.$$p._altKey = $es4.$$coerce(undefined, Boolean);
		$$this.$$MouseEvent.$__localPoint = $es4.$$coerce(undefined, Point);
		$$this.$$MouseEvent.$__stagePoint = $es4.$$coerce(undefined, Point);
	
		//call iinit on super
		Event.$$iinit($$this);
	});

	//constructor
	MouseEvent.$$constructor = (function ($$$$type, $$$$bubbles, $$$$cancelable, $$$$localX, $$$$localY, $$$$relatedObject, $$$$ctrlKey, $$$$altKey, $$$$shiftKey, $$$$buttonDown, $$$$delta)
	{
		var $$this = this;
		//set default parameter values
		var type = $es4.$$coerce($$$$type, String);
		var bubbles = (1 > arguments.length - 1) ? true : $es4.$$coerce($$$$bubbles, Boolean);
		var cancelable = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$cancelable, Boolean);
		var localX = (3 > arguments.length - 1) ? null : $es4.$$coerce($$$$localX, Number);
		var localY = (4 > arguments.length - 1) ? null : $es4.$$coerce($$$$localY, Number);
		var relatedObject = (5 > arguments.length - 1) ? null : $es4.$$coerce($$$$relatedObject, InteractiveObject);
		var ctrlKey = (6 > arguments.length - 1) ? false : $es4.$$coerce($$$$ctrlKey, Boolean);
		var altKey = (7 > arguments.length - 1) ? false : $es4.$$coerce($$$$altKey, Boolean);
		var shiftKey = (8 > arguments.length - 1) ? false : $es4.$$coerce($$$$shiftKey, Boolean);
		var buttonDown = (9 > arguments.length - 1) ? false : $es4.$$coerce($$$$buttonDown, Boolean);
		var delta = (10 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$delta, int);

		Event.$$constructor.call($$this, type, bubbles, cancelable);
		$$this.$__localPoint = (isNaN(localX) || isNaN(localY)) ? null : $es4.$$primitive(new Point(localX, localY));
		$$this.relatedObject = relatedObject;
		$$this.ctrlKey = ctrlKey;
		$$this.altKey = altKey;
		$$this.shiftKey = shiftKey;
		$$this.buttonDown = buttonDown;
		$$this.delta = delta;
	});

	return $es4.$$class(MouseEvent, {EXTENDS:'flash.events.Event'}, 'flash.events::MouseEvent');
})();
//flash.events.MouseEvent


//flash.display3D.Context3DProfile
$es4.$$package('flash.display3D').Context3DProfile = function () { throw new Error('Use of unimplemented class: Context3DProfile'); }
//flash.display3D.Context3DProfile


//flash.display.GraphicsPathWinding
$es4.$$package('flash.display').GraphicsPathWinding = function () { throw new Error('Use of unimplemented class: GraphicsPathWinding'); }
//flash.display.GraphicsPathWinding


//flash.display.ShaderJob
$es4.$$package('flash.display').ShaderJob = function () { throw new Error('Use of unimplemented class: ShaderJob'); }
//flash.display.ShaderJob


//flash.display3D.VertexBuffer3D
$es4.$$package('flash.display3D').VertexBuffer3D = function () { throw new Error('Use of unimplemented class: VertexBuffer3D'); }
//flash.display3D.VertexBuffer3D


//flash.system.SecurityPanel
$es4.$$package('flash.system').SecurityPanel = function () { throw new Error('Use of unimplemented class: SecurityPanel'); }
//flash.system.SecurityPanel


//flash.filters.DropShadowFilter
$es4.$$package('flash.filters').DropShadowFilter = function () { throw new Error('Use of unimplemented class: DropShadowFilter'); }
//flash.filters.DropShadowFilter


//XML
$es4.$$package('').XML = (function ()
{
	//imports
	var XMLDocument;
	var XMLNode;
	var XMLNodeType;
	var Browser;

	//properties
	var $$j = {};
	Object.defineProperty(XML, '$_ignoreComments', {
	get:function () { if (XML.$$cinit !== undefined) XML.$$cinit(); return $$j.$_ignoreComments; },
	set:function (value) { if (XML.$$cinit !== undefined) XML.$$cinit(); $$j.$_ignoreComments = $es4.$$coerce(value, Boolean); }
	});

	Object.defineProperty(XML, '$_ignoreProcessingInstructions', {
	get:function () { if (XML.$$cinit !== undefined) XML.$$cinit(); return $$j.$_ignoreProcessingInstructions; },
	set:function (value) { if (XML.$$cinit !== undefined) XML.$$cinit(); $$j.$_ignoreProcessingInstructions = $es4.$$coerce(value, Boolean); }
	});

	Object.defineProperty(XML, '$_ignoreWhitespace', {
	get:function () { if (XML.$$cinit !== undefined) XML.$$cinit(); return $$j.$_ignoreWhitespace; },
	set:function (value) { if (XML.$$cinit !== undefined) XML.$$cinit(); $$j.$_ignoreWhitespace = $es4.$$coerce(value, Boolean); }
	});

	Object.defineProperty(XML, '$_prettyIndent', {
	get:function () { if (XML.$$cinit !== undefined) XML.$$cinit(); return $$j.$_prettyIndent; },
	set:function (value) { if (XML.$$cinit !== undefined) XML.$$cinit(); $$j.$_prettyIndent = $es4.$$coerce(value, int); }
	});

	Object.defineProperty(XML, '$_prettyPrinting', {
	get:function () { if (XML.$$cinit !== undefined) XML.$$cinit(); return $$j.$_prettyPrinting; },
	set:function (value) { if (XML.$$cinit !== undefined) XML.$$cinit(); $$j.$_prettyPrinting = $es4.$$coerce(value, Boolean); }
	});


	//class pre initializer
	XML.$$sinit = (function ()
	{
		XML.$$sinit = undefined;

		//initialize imports
		XMLDocument = $es4.$$['flash.xml'].XMLDocument;
		XMLNode = $es4.$$['flash.xml'].XMLNode;
		XMLNodeType = $es4.$$['flash.xml'].XMLNodeType;
		Browser = $es4.$$['browser'].Browser;

		//set prototype and constructor
		XML.prototype = Object.create(Object.prototype);
		Object.defineProperty(XML.prototype, "constructor", { value: XML, enumerable: false });

		//hold private values
		Object.defineProperty(XML.prototype, '$$v', {value:{}});

		//internal instance method
		Object.defineProperty(XML.prototype, 'lazyInitialized', {
		get:function ()
		{
			var $$this = this;

			function lazyInitialized()
			{
				if (!$$this.$$XML.$_xmlNode)
				{
					throw $es4.$$primitive(new Error('XML: already initialized'));
				}
				var xmlNode = $$this.$$XML.$_xmlNode;
				$$this.$$XML.$_xmlNode = null;
				$$this.$$XML.$_attributes = $es4.$$primitive(new XMLList());
				$$this.$$XML.$_attributes.$__parent = $$this;
				var attributes = xmlNode.attributes;
				for (var property in attributes)
				{
					var attribute = '<' + property + '>' + attributes[property] + '</' + property + '>';
					var attributeXML = $es4.$$coerce($es4.$$primitive(new XML(attribute)), XML);
					attributeXML.$__nodeKind = 'attribute';
					$$this.$$XML.$_attributes[$$this.$$XML.$_attributes.length()] = attributeXML;
				}
				if ($$this.$$XML.$_cdata || ($$this.$$XML.$_nodeKind == 'attribute' && !xmlNode.childNodes.length))
				{
					$$this.$$XML.$_children = $es4.$$primitive(new XMLList(['']));
				}
				else
				{
					$$this.$$XML.$_children = $es4.$$primitive(new XMLList(xmlNode.childNodes));
				}
				$$this.$$XML.$_children.$__parent = $$this;
			}

			return $$this.$$XML.$$lazyInitialized || ($$this.$$XML.$$lazyInitialized = lazyInitialized);
		}});


		//internal instance method
		Object.defineProperty(XML.prototype, '$__invalidateString', {
		get:function ()
		{
			var $$this = this;

			function $__invalidateString()
			{
				$$this.$$XML.$_stringInvalidated = true;
				$$this.$$XML.$_xmlStringInvalidated = true;
				if ($$this.$$XML.$_parent)
				{
					$$this.$$XML.$_parent.$__invalidateString();
				}
			}

			return $$this.$$XML.$$$__invalidateString || ($$this.$$XML.$$$__invalidateString = $__invalidateString);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'appendChild', {
		get:function ()
		{
			var $$this = this;

			function appendChild($$$$child)
			{
				//set default parameter values
				var child = $es4.$$coerce($$$$child, Object);

				if ($$this.$$XML.$_nodeKind != 'element')
				{
					return $es4.$$coerce($$this, XML);
				}
				if ($$this.$$XML.$_xmlNode)
				{
					lazyInitialized();
				}
				if ($es4.$$is(child, XMLList))
				{
					child.$__parent = $$this;
					for (var $$i1 in child)
					{
						var xml = $es4.$$coerce(child[$$i1], XML);

						$$this.appendChild(xml);
					}
				}
				else if ($es4.$$is(child, XML))
				{
					$$this.$$XML.$_children[$$this.$$XML.$_children.length()] = child;
				}
				else if ($es4.$$is(child, String))
				{
					return $$this.appendChild($es4.$$primitive(new XML(child.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;'))));
				}
				return $es4.$$coerce($$this, XML);
			}

			return $$this.$$XML.$$appendChild || ($$this.$$XML.$$appendChild = appendChild);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'attribute', {
		get:function ()
		{
			var $$this = this;

			function attribute($$$$attributeName)
			{
				//set default parameter values
				var attributeName = $$$$attributeName;

				if ($$this.$$XML.$_xmlNode)
				{
					lazyInitialized();
				}
				attributeName = attributeName.toString();
				var xmlList = $es4.$$coerce($es4.$$primitive(new XMLList()), XMLList);
				xmlList.$__parent = $$this;
				for (var $$i2 in $$this.$$XML.$_attributes)
				{
					var xml = $es4.$$coerce($$this.$$XML.$_attributes[$$i2], XML);

					if (xml.name() == attributeName)
					{
						xmlList[0] = xml;
						break;
					}
				}
				return xmlList;
			}

			return $$this.$$XML.$$attribute || ($$this.$$XML.$$attribute = attribute);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'attributes', {
		get:function ()
		{
			var $$this = this;

			function attributes()
			{
				if ($$this.$$XML.$_xmlNode)
				{
					lazyInitialized();
				}
				return $$this.$$XML.$_attributes;
			}

			return $$this.$$XML.$$attributes || ($$this.$$XML.$$attributes = attributes);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'child', {
		get:function ()
		{
			var $$this = this;

			function child($$$$propertyName)
			{
				//set default parameter values
				var propertyName = $es4.$$coerce($$$$propertyName, Object);

				if ($$this.$$XML.$_xmlNode)
				{
					lazyInitialized();
				}
				var xmlList = $es4.$$coerce($es4.$$primitive(new XMLList()), XMLList);
				xmlList.$__parent = $$this;
				for (var $$i3 in $$this.$$XML.$_children)
				{
					var xml = $es4.$$coerce($$this.$$XML.$_children[$$i3], XML);

					if (propertyName == null || xml.name() == propertyName)
					{
						xmlList[xmlList.length()] = xml;
					}
				}
				return xmlList;
			}

			return $$this.$$XML.$$child || ($$this.$$XML.$$child = child);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'childIndex', {
		get:function ()
		{
			var $$this = this;

			function childIndex()
			{
				if (!$$this.$$XML.$_parent)
				{
					return -1;
				}
				if ($$this.$$XML.$_xmlNode)
				{
					lazyInitialized();
				}
				var index = 0;
				var xmlList = $es4.$$coerce(($$this.$$XML.$_nodeKind == 'attribute') ? $$this.$$XML.$_parent.attributes() : $$this.$$XML.$_parent.children(), XMLList);
				for (var $$i4 in xmlList)
				{
					var xml = $es4.$$coerce(xmlList[$$i4], XML);

					if (xml == $$this)
					{
						return index;
					}
					index++;
				}
				return -1;
			}

			return $$this.$$XML.$$childIndex || ($$this.$$XML.$$childIndex = childIndex);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'children', {
		get:function ()
		{
			var $$this = this;

			function children()
			{
				if ($$this.$$XML.$_xmlNode)
				{
					lazyInitialized();
				}
				return $$this.$$XML.$_children;
			}

			return $$this.$$XML.$$children || ($$this.$$XML.$$children = children);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'contains', {
		get:function ()
		{
			var $$this = this;

			function contains($$$$value)
			{
				//set default parameter values
				var value = $es4.$$coerce($$$$value, XML);

				if ($$this.$$XML.$_xmlNode)
				{
					lazyInitialized();
				}
				var valueString = value.toXMLString();
				for (var $$i5 in $$this.$$XML.$_children)
				{
					var xml = $es4.$$coerce($$this.$$XML.$_children[$$i5], XML);

					if (xml.toXMLString() == valueString)
					{
						return true;
					}
				}
				return false;
			}

			return $$this.$$XML.$$contains || ($$this.$$XML.$$contains = contains);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'copy', {
		get:function ()
		{
			var $$this = this;

			function copy()
			{
				if ($$this.$$XML.$_xmlNode)
				{
					lazyInitialized();
				}
				return $es4.$$coerce($es4.$$primitive(new XML($$this)), XML);
			}

			return $$this.$$XML.$$copy || ($$this.$$XML.$$copy = copy);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'descendants', {
		get:function ()
		{
			var $$this = this;

			function descendants($$$$name)
			{
				//set default parameter values
				var name = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$name, Object);

				if ($$this.$$XML.$_xmlNode)
				{
					lazyInitialized();
				}
				var xmlList = $es4.$$coerce($es4.$$primitive(new XMLList()), XMLList);
				if ($$this.$$XML.$_nodeKind != 'element')
				{
					return xmlList;
				}
				for (var $$i6 in $$this.$$XML.$_children)
				{
					var xml = $es4.$$coerce($$this.$$XML.$_children[$$i6], XML);

					if (xml.nodeKind() != 'element')
					{
						if (name == null)
						{
							xmlList[xmlList.length()] = xml;
						}
						continue;
					}
					if (name == null || name.toString() == xml.name())
					{
						xmlList[xmlList.length()] = xml;
					}
					xmlList.$__merge(xml.descendants(name));
				}
				return xmlList;
			}

			return $$this.$$XML.$$descendants || ($$this.$$XML.$$descendants = descendants);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'elements', {
		get:function ()
		{
			var $$this = this;

			function elements($$$$name)
			{
				//set default parameter values
				var name = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$name, Object);

				if ($$this.$$XML.$_xmlNode)
				{
					lazyInitialized();
				}
				var xmlList = $es4.$$coerce($es4.$$primitive(new XMLList()), XMLList);
				xmlList.$__parent = $$this;
				for (var $$i7 in $$this.$$XML.$_children)
				{
					var xml = $es4.$$coerce($$this.$$XML.$_children[$$i7], XML);

					if (xml.nodeKind() == 'element')
					{
						xmlList[xmlList.length()] = xml;
					}
				}
				return xmlList;
			}

			return $$this.$$XML.$$elements || ($$this.$$XML.$$elements = elements);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'insertChildAfter', {
		get:function ()
		{
			var $$this = this;

			function insertChildAfter($$$$child1, $$$$child2)
			{
				//set default parameter values
				var child1 = $es4.$$coerce($$$$child1, Object);
				var child2 = $es4.$$coerce($$$$child2, Object);

				if ($$this.$$XML.$_nodeKind != 'element')
				{
					return $$this;
				}
				if ($$this.$$XML.$_xmlNode)
				{
					lazyInitialized();
				}
				return $$this.$$XML.$_children.$__insertChildAfter(child1, child2);
			}

			return $$this.$$XML.$$insertChildAfter || ($$this.$$XML.$$insertChildAfter = insertChildAfter);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'insertChildBefore', {
		get:function ()
		{
			var $$this = this;

			function insertChildBefore($$$$child1, $$$$child2)
			{
				//set default parameter values
				var child1 = $es4.$$coerce($$$$child1, Object);
				var child2 = $es4.$$coerce($$$$child2, Object);

				if ($$this.$$XML.$_nodeKind != 'element')
				{
					return $$this;
				}
				if ($$this.$$XML.$_xmlNode)
				{
					lazyInitialized();
				}
				return $$this.$$XML.$_children.$__insertChildBefore(child1, child2);
			}

			return $$this.$$XML.$$insertChildBefore || ($$this.$$XML.$$insertChildBefore = insertChildBefore);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'prependChild', {
		get:function ()
		{
			var $$this = this;

			function prependChild($$$$value)
			{
				//set default parameter values
				var value = $es4.$$coerce($$$$value, Object);

				if ($$this.$$XML.$_nodeKind != 'element')
				{
					return $es4.$$coerce($$this, XML);
				}
				if ($$this.$$XML.$_xmlNode)
				{
					lazyInitialized();
				}
				return $es4.$$coerce($$this.$$XML.$_children.$__prepend(value), XML);
			}

			return $$this.$$XML.$$prependChild || ($$this.$$XML.$$prependChild = prependChild);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'replace', {
		get:function ()
		{
			var $$this = this;

			function replace($$$$propertyName, $$$$value)
			{
				//set default parameter values
				var propertyName = $es4.$$coerce($$$$propertyName, Object);
				var value = $es4.$$coerce($$$$value, XML);

				if ($$this.$$XML.$_nodeKind != 'element')
				{
					return $es4.$$coerce($$this, XML);
				}
				if ($$this.$$XML.$_xmlNode)
				{
					lazyInitialized();
				}
				return $$this.$$XML.$_children.$__replace($$this.child(propertyName), value);
			}

			return $$this.$$XML.$$replace || ($$this.$$XML.$$replace = replace);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'length', {
		get:function ()
		{
			var $$this = this;

			function length()
			{
				return 1;
			}

			return $$this.$$XML.$$length || ($$this.$$XML.$$length = length);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'localName', {
		get:function ()
		{
			var $$this = this;

			function localName()
			{
				return $$this.$$XML.$_localName;
			}

			return $$this.$$XML.$$localName || ($$this.$$XML.$$localName = localName);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'name', {
		get:function ()
		{
			var $$this = this;

			function name()
			{
				return $$this.$$XML.$_name;
			}

			return $$this.$$XML.$$name || ($$this.$$XML.$$name = name);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'nodeKind', {
		get:function ()
		{
			var $$this = this;

			function nodeKind()
			{
				return $$this.$$XML.$_nodeKind;
			}

			return $$this.$$XML.$$nodeKind || ($$this.$$XML.$$nodeKind = nodeKind);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'parent', {
		get:function ()
		{
			var $$this = this;

			function parent()
			{
				return $$this.$$XML.$_parent;
			}

			return $$this.$$XML.$$parent || ($$this.$$XML.$$parent = parent);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'setChildren', {
		get:function ()
		{
			var $$this = this;

			function setChildren($$$$value)
			{
				//set default parameter values
				var value = $es4.$$coerce($$$$value, Object);

				if ($$this.$$XML.$_xmlNode)
				{
					lazyInitialized();
				}
				$$this.$$XML.$_children.$__parent = null;
				$$this.$$XML.$_children = $es4.$$primitive(new XMLList(value));
				$$this.$$XML.$_children.$__parent = $$this;
				return $es4.$$coerce($$this, XML);
			}

			return $$this.$$XML.$$setChildren || ($$this.$$XML.$$setChildren = setChildren);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'setLocalName', {
		get:function ()
		{
			var $$this = this;

			function setLocalName($$$$name)
			{
				//set default parameter values
				var name = $es4.$$coerce($$$$name, String);

				$$this.$$XML.$_localName = name;
				$$this.$__invalidateString();
			}

			return $$this.$$XML.$$setLocalName || ($$this.$$XML.$$setLocalName = setLocalName);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'setName', {
		get:function ()
		{
			var $$this = this;

			function setName($$$$name)
			{
				//set default parameter values
				var name = $es4.$$coerce($$$$name, String);

				$$this.$$XML.$_name = name;
				$$this.$__invalidateString();
			}

			return $$this.$$XML.$$setName || ($$this.$$XML.$$setName = setName);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'text', {
		get:function ()
		{
			var $$this = this;

			function text()
			{
				if ($$this.$$XML.$_xmlNode)
				{
					lazyInitialized();
				}
				var xmlList = $es4.$$coerce($es4.$$primitive(new XMLList()), XMLList);
				xmlList.$__parent = $$this;
				if ($$this.$$XML.$_nodeKind == 'attribute')
				{
					return xmlList;
				}
				for (var $$i8 in $$this.$$XML.$_children)
				{
					var xml = $es4.$$coerce($$this.$$XML.$_children[$$i8], XML);

					if (xml.nodeKind() == 'text')
					{
						xmlList[xmlList.length()] = xml;
					}
				}
				return xmlList;
			}

			return $$this.$$XML.$$text || ($$this.$$XML.$$text = text);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'hasOwnProperty', {
		get:function ()
		{
			var $$this = this;

			function hasOwnProperty($$$$name)
			{
				//set default parameter values
				var name = $es4.$$coerce($$$$name, String);

				if (name.charAt(0) == '@')
				{
					return $es4.$$coerce($$this.attribute(name.substring(1)).length() > 0, Boolean);
				}
				return $es4.$$coerce($$this.child(name).length() > 0, Boolean);
			}

			return $$this.$$XML.$$hasOwnProperty || ($$this.$$XML.$$hasOwnProperty = hasOwnProperty);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'propertyIsEnumerable', {
		get:function ()
		{
			var $$this = this;

			function propertyIsEnumerable($$$$name)
			{
				//set default parameter values
				var name = $es4.$$coerce($$$$name, String);

				return $es4.$$coerce(name == '0', Boolean);
			}

			return $$this.$$XML.$$propertyIsEnumerable || ($$this.$$XML.$$propertyIsEnumerable = propertyIsEnumerable);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'toString', {
		get:function ()
		{
			var $$this = this;

			function toString()
			{
				if ($$this.$$XML.$_xmlNode)
				{
					lazyInitialized();
				}
				if ($$this.$$XML.$_nodeKind == 'attribute')
				{
					return $es4.$$coerce($$this.$$XML.$_children[0].toString(), String);
				}
				if ($$this.$$XML.$_nodeKind == 'text')
				{
					return $$this.$$XML.$_string;
				}
				if (!$$this.$$XML.$_stringInvalidated)
				{
					return $$this.$$XML.$_string;
				}
				$$this.$$XML.$_stringInvalidated = false;
				if ($$this.$$XML.$_children.length() == 0)
				{
					return $$this.$$XML.$_string = '';
				}
				if ($$this.$$XML.$_children.length() == 1 && $$this.$$XML.$_children[0].nodeKind() == 'text')
				{
					return $es4.$$coerce($$this.$$XML.$_string = $$this.$$XML.$_children[0].toString(), String);
				}
				return $$this.$$XML.$_string = $$this.toXMLString();
			}

			return $$this.$$XML.$$toString || ($$this.$$XML.$$toString = toString);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'toXMLString', {
		get:function ()
		{
			var $$this = this;

			function toXMLString()
			{
				if ($$this.$$XML.$_xmlNode)
				{
					lazyInitialized();
				}
				if ($$this.$$XML.$_nodeKind == 'attribute')
				{
					return $es4.$$coerce($$this.$$XML.$_children[0].toXMLString(), String);
				}
				if ($$this.$$XML.$_nodeKind == 'text')
				{
					if ($$this.$$XML.$_cdata)
					{
						return '<![CDATA[' + $$this.$$XML.$_xmlString + ']]>';
					}
					return $$this.$$XML.$_xmlString;
				}
				if (!$$this.$$XML.$_xmlStringInvalidated)
				{
					return $$this.$$XML.$_xmlString;
				}
				$$this.$$XML.$_xmlStringInvalidated = false;
				var xmlString = null;
				var childXML = null;
				if (!$$this.$$XML.$_attributes.length())
				{
					if (!$$this.$$XML.$_children.length())
					{
						return '<' + $$this.$$XML.$_name + '/>';
					}
					xmlString = '<' + $$this.$$XML.$_name + '>';
					for (var $$i9 in $$this.$$XML.$_children)
					{
						childXML = $es4.$$coerce($$this.$$XML.$_children[$$i9], XML);

						xmlString += childXML.toXMLString();
					}
					xmlString += '</' + $$this.$$XML.$_name + '>';
					return xmlString;
				}
				xmlString = '<a>b</a>';
				var xmlDocument = Browser.domParseXML(xmlString);
				for (var $$i10 in $$this.$$XML.$_attributes)
				{
					var attributeXML = $es4.$$coerce($$this.$$XML.$_attributes[$$i10], XML);

					xmlDocument.documentElement.setAttribute(attributeXML.name(), attributeXML.toXMLString());
				}
				xmlString = $es4.$$coerce(Browser.getNewXMLSerializer().serializeToString(xmlDocument), String);
				xmlString = xmlString.substring(2, xmlString.length - 5);
				if (!$$this.$$XML.$_children.length())
				{
					return '<' + $$this.$$XML.$_name + xmlString.substring(0, xmlString.length - 1) + '/>';
				}
				for (var $$i11 in $$this.$$XML.$_children)
				{
					childXML = $es4.$$coerce($$this.$$XML.$_children[$$i11], XML);

					xmlString += childXML.toXMLString();
				}
				return $$this.$$XML.$_xmlString = '<' + $$this.$$XML.$_name + xmlString + '</' + $$this.$$XML.$_name + '>';
			}

			return $$this.$$XML.$$toXMLString || ($$this.$$XML.$$toXMLString = toXMLString);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'hasComplexContent', {
		get:function ()
		{
			var $$this = this;

			function hasComplexContent()
			{
				throw $es4.$$primitive(new Error('XML: attempted call to an unimplemented function "hasComplexContent"'));
			}

			return $$this.$$XML.$$hasComplexContent || ($$this.$$XML.$$hasComplexContent = hasComplexContent);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'hasSimpleContent', {
		get:function ()
		{
			var $$this = this;

			function hasSimpleContent()
			{
				throw $es4.$$primitive(new Error('XML: attempted call to an unimplemented function "hasSimpleContent"'));
			}

			return $$this.$$XML.$$hasSimpleContent || ($$this.$$XML.$$hasSimpleContent = hasSimpleContent);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'addNamespace', {
		get:function ()
		{
			var $$this = this;

			function addNamespace($$$$ns)
			{
				//set default parameter values
				var ns = $es4.$$coerce($$$$ns, Object);

				throw $es4.$$primitive(new Error('XML: attempted call to an unimplemented function "addNamespace"'));
			}

			return $$this.$$XML.$$addNamespace || ($$this.$$XML.$$addNamespace = addNamespace);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'comments', {
		get:function ()
		{
			var $$this = this;

			function comments()
			{
				throw $es4.$$primitive(new Error('XML: attempted call to an unimplemented function "comments"'));
			}

			return $$this.$$XML.$$comments || ($$this.$$XML.$$comments = comments);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'inScopeNamespaces', {
		get:function ()
		{
			var $$this = this;

			function inScopeNamespaces()
			{
				throw $es4.$$primitive(new Error('XML: attempted call to an unimplemented function "inScopeNamespaces"'));
			}

			return $$this.$$XML.$$inScopeNamespaces || ($$this.$$XML.$$inScopeNamespaces = inScopeNamespaces);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'namespace', {
		get:function ()
		{
			var $$this = this;

			function namespace($$$$prefix)
			{
				//set default parameter values
				var prefix = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$prefix, String);

				throw $es4.$$primitive(new Error('XML: attempted call to an unimplemented function "namespace"'));
			}

			return $$this.$$XML.$$namespace || ($$this.$$XML.$$namespace = namespace);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'namespaceDeclarations', {
		get:function ()
		{
			var $$this = this;

			function namespaceDeclarations()
			{
				throw $es4.$$primitive(new Error('XML: attempted call to an unimplemented function "namespaceDeclarations"'));
			}

			return $$this.$$XML.$$namespaceDeclarations || ($$this.$$XML.$$namespaceDeclarations = namespaceDeclarations);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'normalize', {
		get:function ()
		{
			var $$this = this;

			function normalize()
			{
				throw $es4.$$primitive(new Error('XML: attempted call to an unimplemented function "normalize"'));
			}

			return $$this.$$XML.$$normalize || ($$this.$$XML.$$normalize = normalize);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'processingInstructions', {
		get:function ()
		{
			var $$this = this;

			function processingInstructions($$$$name)
			{
				//set default parameter values
				var name = (0 > arguments.length - 1) ? "*" : $es4.$$coerce($$$$name, String);

				throw $es4.$$primitive(new Error('XML: attempted call to an unimplemented function "processingInstructions"'));
			}

			return $$this.$$XML.$$processingInstructions || ($$this.$$XML.$$processingInstructions = processingInstructions);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'removeNamespace', {
		get:function ()
		{
			var $$this = this;

			function removeNamespace($$$$ns)
			{
				//set default parameter values
				var ns = $es4.$$coerce($$$$ns, Namespace);

				throw $es4.$$primitive(new Error('XML: attempted call to an unimplemented function "removeNamespace"'));
			}

			return $$this.$$XML.$$removeNamespace || ($$this.$$XML.$$removeNamespace = removeNamespace);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'setNamespace', {
		get:function ()
		{
			var $$this = this;

			function setNamespace($$$$ns)
			{
				//set default parameter values
				var ns = $es4.$$coerce($$$$ns, Namespace);

				throw $es4.$$primitive(new Error('XML: attempted call to an unimplemented function "setNamespace"'));
			}

			return $$this.$$XML.$$setNamespace || ($$this.$$XML.$$setNamespace = setNamespace);
		}});


		//public instance method
		Object.defineProperty(XML.prototype, 'toJSON', {
		get:function ()
		{
			var $$this = this;

			function toJSON($$$$k)
			{
				//set default parameter values
				var k = $es4.$$coerce($$$$k, String);

				throw $es4.$$primitive(new Error('XML: attempted call to an unimplemented function "toJSON"'));
			}

			return $$this.$$XML.$$toJSON || ($$this.$$XML.$$toJSON = toJSON);
		}});


		//private instance method
		XML.prototype.$$v.$$get = {
		get:function ()
		{
			var $$this = this.$$this;

			function $$get($$$$key)
			{
				//set default parameter values
				var key = $$$$key;

				if ($$this.$$XML.$_xmlNode)
				{
					lazyInitialized();
				}
				if (key == '$attributes')
				{
					return $$this.$$XML.$_attributes;
				}
				var index = parseInt(key);
				if (index === 0)
				{
					return $$this;
				}
				if (!isNaN(index))
				{
					return undefined;
				}
				return $$this.child(key);
			}

			return $$this.$$XML.$$p.$$$$get || ($$this.$$XML.$$p.$$$$get = $$get);
		}};


		//private instance method
		XML.prototype.$$v.$$set = {
		get:function ()
		{
			var $$this = this.$$this;

			function $$set($$$$key, $$$$value)
			{
				//set default parameter values
				var key = $$$$key;
				var value = $$$$value;

				if ($$this.$$XML.$_xmlNode)
				{
					lazyInitialized();
				}
				var index = parseInt(key);
				var xml = null;
				if (isNaN(index))
				{
					var xmlList = $es4.$$coerce($$this.child(key), XMLList);
					if (xmlList.length())
					{
						for (var $$i12 in xmlList)
						{
							var child = $es4.$$coerce(xmlList[$$i12], XML);

							xml = $es4.$$coerce($es4.$$primitive(new XML(value)), XML);
							xml.$__parent = child;
							child.setChildren(xml);
						}
						return value;
					}
					xml = $es4.$$coerce($es4.$$primitive(new XML('<' + key + '/>')), XML);
					xml.appendChild(value);
					value = xml;
					index = $$this.$$XML.$_children.length();
				}
				else
				{
					throw $es4.$$primitive(new Error('XML: Assignment to indexed XML is not allowed: ' + key));
				}
				return $$this.$$XML.$_children[index] = value;
			}

			return $$this.$$XML.$$p.$$$$set || ($$this.$$XML.$$p.$$$$set = $$set);
		}};


		//private instance method
		XML.prototype.$$v.$$call = {
		get:function ()
		{
			var $$this = this.$$this;

			function $$call($$$$name, $$$$args)
			{
				//set default parameter values
				var name = $$$$name;
				var args = $es4.$$coerce($$$$args, Array);

				var string = $$this.toString();
				return string[name].apply(string, args);
			}

			return $$this.$$XML.$$p.$$$$call || ($$this.$$XML.$$p.$$$$call = $$call);
		}};


		//private instance method
		XML.prototype.$$v.$$delete = {
		get:function ()
		{
			var $$this = this.$$this;

			function $$delete($$$$key)
			{
				//set default parameter values
				var key = $$$$key;

				if ($$this.$$XML.$_xmlNode)
				{
					lazyInitialized();
				}
				var index = parseInt(key);
				if (isNaN(index))
				{
					var xmlList = $$this.child(key);
					while (xmlList.length())
					{
						delete xmlList[0];
					}
					return true;
				}
				else
				{
					throw $es4.$$primitive(new Error('XML: deletion of indexed XML is not allowed: ' + key));
				}
			}

			return $$this.$$XML.$$p.$$$$delete || ($$this.$$XML.$$p.$$$$delete = $$delete);
		}};


		//private instance method
		XML.prototype.$$v.$$nextName = {
		get:function ()
		{
			var $$this = this.$$this;

			function $$nextName($$$$index)
			{
				//set default parameter values
				var index = $es4.$$coerce($$$$index, int);

				return null;
			}

			return $$this.$$XML.$$p.$$$$nextName || ($$this.$$XML.$$p.$$$$nextName = $$nextName);
		}};


		//private instance method
		XML.prototype.$$v.$$nextNameIndex = {
		get:function ()
		{
			var $$this = this.$$this;

			function $$nextNameIndex($$$$index)
			{
				//set default parameter values
				var index = $es4.$$coerce($$$$index, int);

				return 0;
			}

			return $$this.$$XML.$$p.$$$$nextNameIndex || ($$this.$$XML.$$p.$$$$nextNameIndex = $$nextNameIndex);
		}};


		//private instance method
		XML.prototype.$$v.$$nextValue = {
		get:function ()
		{
			var $$this = this.$$this;

			function $$nextValue($$$$index)
			{
				//set default parameter values
				var index = $es4.$$coerce($$$$index, int);

			}

			return $$this.$$XML.$$p.$$$$nextValue || ($$this.$$XML.$$p.$$$$nextValue = $$nextValue);
		}};

		Object.defineProperty(XML.prototype, '$__nodeKind', {set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			var $$this = this;
			$$this.$$XML.$_nodeKind = value;
		}});
		Object.defineProperty(XML.prototype, '$__parent', {set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			var $$this = this;
			if (value)
			{
				value.$__invalidateString();
			}
			if ($$this.$$XML.$_parent && !value)
			{
				$$this.$$XML.$_parent.$__invalidateString();
			}
			$$this.$$XML.$_parent = value;
		}});
		Object.defineProperty(XML.prototype, '$__text', {set:function ($$$$text)
		{
			//set default parameter values
			var text = $es4.$$coerce($$$$text, String);

			var $$this = this;
			$$this.$$XML.$_xmlString = $$this.$$XML.$_string = text;
			$$this.$__invalidateString();
		}});

		//properties
		XML.prototype.$$v.$$isProxy = {
		get:function () { var $$this = this.$$this; return $$this.$$XML.$$p.$$isProxy; },
		set:function (value) { var $$this = this.$$this; $$this.$$XML.$$p.$$isProxy = $es4.$$coerce(value, Boolean); }
		};

		XML.prototype.$$v.$_name = {
		get:function () { var $$this = this.$$this; return $$this.$$XML.$$p.$_name; },
		set:function (value) { var $$this = this.$$this; $$this.$$XML.$$p.$_name = $es4.$$coerce(value, Object); }
		};

		XML.prototype.$$v.$_localName = {
		get:function () { var $$this = this.$$this; return $$this.$$XML.$$p.$_localName; },
		set:function (value) { var $$this = this.$$this; $$this.$$XML.$$p.$_localName = $es4.$$coerce(value, Object); }
		};

		XML.prototype.$$v.$_parent = {
		get:function () { var $$this = this.$$this; return $$this.$$XML.$$p.$_parent; },
		set:function (value) { var $$this = this.$$this; $$this.$$XML.$$p.$_parent = $es4.$$coerce(value, Object); }
		};

		XML.prototype.$$v.$_children = {
		get:function () { var $$this = this.$$this; return $$this.$$XML.$$p.$_children; },
		set:function (value) { var $$this = this.$$this; $$this.$$XML.$$p.$_children = $es4.$$coerce(value, XMLList); }
		};

		XML.prototype.$$v.$_attributes = {
		get:function () { var $$this = this.$$this; return $$this.$$XML.$$p.$_attributes; },
		set:function (value) { var $$this = this.$$this; $$this.$$XML.$$p.$_attributes = $es4.$$coerce(value, XMLList); }
		};

		XML.prototype.$$v.$_nodeKind = {
		get:function () { var $$this = this.$$this; return $$this.$$XML.$$p.$_nodeKind; },
		set:function (value) { var $$this = this.$$this; $$this.$$XML.$$p.$_nodeKind = $es4.$$coerce(value, String); }
		};

		XML.prototype.$$v.$_cdata = {
		get:function () { var $$this = this.$$this; return $$this.$$XML.$$p.$_cdata; },
		set:function (value) { var $$this = this.$$this; $$this.$$XML.$$p.$_cdata = $es4.$$coerce(value, Boolean); }
		};

		XML.prototype.$$v.$_string = {
		get:function () { var $$this = this.$$this; return $$this.$$XML.$$p.$_string; },
		set:function (value) { var $$this = this.$$this; $$this.$$XML.$$p.$_string = $es4.$$coerce(value, String); }
		};

		XML.prototype.$$v.$_stringInvalidated = {
		get:function () { var $$this = this.$$this; return $$this.$$XML.$$p.$_stringInvalidated; },
		set:function (value) { var $$this = this.$$this; $$this.$$XML.$$p.$_stringInvalidated = $es4.$$coerce(value, Boolean); }
		};

		XML.prototype.$$v.$_xmlString = {
		get:function () { var $$this = this.$$this; return $$this.$$XML.$$p.$_xmlString; },
		set:function (value) { var $$this = this.$$this; $$this.$$XML.$$p.$_xmlString = $es4.$$coerce(value, String); }
		};

		XML.prototype.$$v.$_xmlStringInvalidated = {
		get:function () { var $$this = this.$$this; return $$this.$$XML.$$p.$_xmlStringInvalidated; },
		set:function (value) { var $$this = this.$$this; $$this.$$XML.$$p.$_xmlStringInvalidated = $es4.$$coerce(value, Boolean); }
		};

		XML.prototype.$$v.$_xmlNode = {
		get:function () { var $$this = this.$$this; return $$this.$$XML.$$p.$_xmlNode; },
		set:function (value) { var $$this = this.$$this; $$this.$$XML.$$p.$_xmlNode = $es4.$$coerce(value, XMLNode); }
		};

	});

	//class initializer
	XML.$$cinit = (function ()
	{
		XML.$$cinit = undefined;

		//initialize properties
		$$j.$_ignoreComments = $es4.$$coerce(true, Boolean);
		$$j.$_ignoreProcessingInstructions = $es4.$$coerce(true, Boolean);
		$$j.$_ignoreWhitespace = $es4.$$coerce(true, Boolean);
		$$j.$_prettyIndent = $es4.$$coerce(2, int);
		$$j.$_prettyPrinting = $es4.$$coerce(true, Boolean);
	
	});

	//public static method
	XML.defaultSettings = (function ()
	{
		if (XML.$$cinit !== undefined) XML.$$cinit();

		throw $es4.$$primitive(new Error('XML: attempted call to an unimplemented function "defaultSettings"'));
	});

	//public static method
	XML.setSettings = (function ()
	{
		if (XML.$$cinit !== undefined) XML.$$cinit();

		throw $es4.$$primitive(new Error('XML: attempted call to an unimplemented function "setSettings"'));
	});

	//public static method
	XML.settings = (function ()
	{
		if (XML.$$cinit !== undefined) XML.$$cinit();

		throw $es4.$$primitive(new Error('XML: attempted call to an unimplemented function "settings"'));
	});
	Object.defineProperty(XML, 'ignoreComments', {get:function ()
	{
		if (XML.$$cinit !== undefined) XML.$$cinit();

		return XML.$_ignoreComments;
	}, set:function ($$$$value)
	{
		if (XML.$$cinit !== undefined) XML.$$cinit();

		//set default parameter values
		var value = $es4.$$coerce($$$$value, Boolean);

		throw $es4.$$primitive(new Error('XML: attempted call to an unimplemented function "ignoreComments"'));
	}});
	Object.defineProperty(XML, 'ignoreProcessingInstructions', {get:function ()
	{
		if (XML.$$cinit !== undefined) XML.$$cinit();

		return XML.$_ignoreProcessingInstructions;
	}, set:function ($$$$value)
	{
		if (XML.$$cinit !== undefined) XML.$$cinit();

		//set default parameter values
		var value = $es4.$$coerce($$$$value, Boolean);

		throw $es4.$$primitive(new Error('XML: attempted call to an unimplemented function "ignoreProcessingInstructions"'));
	}});
	Object.defineProperty(XML, 'ignoreWhitespace', {get:function ()
	{
		if (XML.$$cinit !== undefined) XML.$$cinit();

		return XML.$_ignoreWhitespace;
	}, set:function ($$$$value)
	{
		if (XML.$$cinit !== undefined) XML.$$cinit();

		//set default parameter values
		var value = $es4.$$coerce($$$$value, Boolean);

		XML.$_ignoreWhitespace = value;
	}});
	Object.defineProperty(XML, 'prettyIndent', {get:function ()
	{
		if (XML.$$cinit !== undefined) XML.$$cinit();

		return XML.$_prettyIndent;
	}, set:function ($$$$value)
	{
		if (XML.$$cinit !== undefined) XML.$$cinit();

		//set default parameter values
		var value = $es4.$$coerce($$$$value, int);

		throw $es4.$$primitive(new Error('XML: attempted call to an unimplemented function "prettyIndent"'));
	}});
	Object.defineProperty(XML, 'prettyPrinting', {get:function ()
	{
		if (XML.$$cinit !== undefined) XML.$$cinit();

		return XML.$_prettyPrinting;
	}, set:function ($$$$value)
	{
		if (XML.$$cinit !== undefined) XML.$$cinit();

		//set default parameter values
		var value = $es4.$$coerce($$$$value, Boolean);

		throw $es4.$$primitive(new Error('XML: attempted call to an unimplemented function "prettyPrinting"'));
	}});

	function XML()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof XML) || $$this.$$XML !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], XML) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			XML.$$construct($$this, $$args);
		}
	}

	//construct
	XML.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (XML.$$cinit !== undefined) XML.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$XML', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$XML, '$$isProxy', XML.prototype.$$v.$$isProxy);
		Object.defineProperty($$this.$$XML, '$_name', XML.prototype.$$v.$_name);
		Object.defineProperty($$this.$$XML, '$_localName', XML.prototype.$$v.$_localName);
		Object.defineProperty($$this.$$XML, '$_parent', XML.prototype.$$v.$_parent);
		Object.defineProperty($$this.$$XML, '$_children', XML.prototype.$$v.$_children);
		Object.defineProperty($$this.$$XML, '$_attributes', XML.prototype.$$v.$_attributes);
		Object.defineProperty($$this.$$XML, '$_nodeKind', XML.prototype.$$v.$_nodeKind);
		Object.defineProperty($$this.$$XML, '$_cdata', XML.prototype.$$v.$_cdata);
		Object.defineProperty($$this.$$XML, '$_string', XML.prototype.$$v.$_string);
		Object.defineProperty($$this.$$XML, '$_stringInvalidated', XML.prototype.$$v.$_stringInvalidated);
		Object.defineProperty($$this.$$XML, '$_xmlString', XML.prototype.$$v.$_xmlString);
		Object.defineProperty($$this.$$XML, '$_xmlStringInvalidated', XML.prototype.$$v.$_xmlStringInvalidated);
		Object.defineProperty($$this.$$XML, '$_xmlNode', XML.prototype.$$v.$_xmlNode);

		//private instance method
		Object.defineProperty($$this.$$XML, '$$get', XML.prototype.$$v.$$get);

		//private instance method
		Object.defineProperty($$this.$$XML, '$$set', XML.prototype.$$v.$$set);

		//private instance method
		Object.defineProperty($$this.$$XML, '$$call', XML.prototype.$$v.$$call);

		//private instance method
		Object.defineProperty($$this.$$XML, '$$delete', XML.prototype.$$v.$$delete);

		//private instance method
		Object.defineProperty($$this.$$XML, '$$nextName', XML.prototype.$$v.$$nextName);

		//private instance method
		Object.defineProperty($$this.$$XML, '$$nextNameIndex', XML.prototype.$$v.$$nextNameIndex);

		//private instance method
		Object.defineProperty($$this.$$XML, '$$nextValue', XML.prototype.$$v.$$nextValue);

		//initialize properties
		XML.$$iinit($$this);

		//call constructor
		if (args !== undefined) XML.$$constructor.apply($$this, args);
	});

	//initializer
	XML.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$XML.$$p.$$isProxy = $es4.$$coerce(true, Boolean);
		$$this.$$XML.$$p.$_name = $es4.$$coerce(undefined, Object);
		$$this.$$XML.$$p.$_localName = $es4.$$coerce(undefined, Object);
		$$this.$$XML.$$p.$_parent = $es4.$$coerce(undefined, Object);
		$$this.$$XML.$$p.$_children = $es4.$$coerce(undefined, XMLList);
		$$this.$$XML.$$p.$_attributes = $es4.$$coerce(undefined, XMLList);
		$$this.$$XML.$$p.$_nodeKind = $es4.$$coerce(undefined, String);
		$$this.$$XML.$$p.$_cdata = $es4.$$coerce(undefined, Boolean);
		$$this.$$XML.$$p.$_string = $es4.$$coerce(undefined, String);
		$$this.$$XML.$$p.$_stringInvalidated = $es4.$$coerce(undefined, Boolean);
		$$this.$$XML.$$p.$_xmlString = $es4.$$coerce(undefined, String);
		$$this.$$XML.$$p.$_xmlStringInvalidated = $es4.$$coerce(undefined, Boolean);
		$$this.$$XML.$$p.$_xmlNode = $es4.$$coerce(undefined, XMLNode);
	
	});

	//constructor
	XML.$$constructor = (function ($$$$object)
	{
		var $$this = this;
		//set default parameter values
		var object = $es4.$$coerce($$$$object, Object);

		var nodeKind;
		if ($es4.$$is(object, XML))
		{
			nodeKind = object.nodeKind();
			if (nodeKind == 'attribute')
			{
				object = '<' + object.name() + '>' + object.toXMLString() + '</' + object.name() + '>';
			}
			else
			{
				object = object.toXMLString();
			}
		}
		else if ($es4.$$is(object, XMLNode))
		{
			$$this.$$XML.$_xmlNode = $es4.$$as(object, XMLNode);
		}
		else if (object == null)
		{
			$$this.$$XML.$_xmlNode = $es4.$$primitive(new XMLNode(XMLNodeType.TEXT_NODE, ''));
		}
		var xmlDocument;
		if ($es4.$$is(object, String))
		{
			xmlDocument = $es4.$$primitive(new XMLDocument());
			xmlDocument.ignoreWhite = XML.ignoreWhitespace;
			xmlDocument.parseXML($es4.$$as(object, String));
			if (xmlDocument.childNodes.length != 1)
			{
				throw $es4.$$primitive(new TypeError('XML: The markup in the document following the root element must be well-formed.'));
			}
			$$this.$$XML.$_xmlNode = xmlDocument.firstChild;
		}
		if (!$$this.$$XML.$_xmlNode)
		{
			throw $es4.$$primitive(new Error('unknown XML value given in XML constructor'));
		}
		if ($$this.$$XML.$_xmlNode.nodeType == XMLNodeType.ELEMENT_NODE)
		{
			$$this.$$XML.$_name = $$this.$$XML.$_xmlNode.nodeName;
			$$this.$$XML.$_localName = $$this.$$XML.$_xmlNode.localName;
		}
		else
		{
			if ($$this.$$XML.$_xmlNode.nodeType == XMLNodeType.CDATA_NODE)
			{
				$$this.$$XML.$_cdata = true;
			}
			if ($es4.$$is(object, XMLNode))
			{
				$$this.$$XML.$_string = $$this.$$XML.$_xmlString = ($es4.$$as(object, XMLNode)).toString(true);
			}
			else
			{
				$$this.$$XML.$_string = $$this.$$XML.$_xmlString = object.toString();
			}
			nodeKind = 'text';
		}
		$$this.$$XML.$_nodeKind = (nodeKind) ? nodeKind : 'element';
		if ($$this.$$XML.$_nodeKind != 'text')
		{
			$$this.$__invalidateString();
		}
	});

	return $es4.$$class(XML, null, 'XML');
})();
//XML


//flash.net.GroupSpecifier
$es4.$$package('flash.net').GroupSpecifier = function () { throw new Error('Use of unimplemented class: GroupSpecifier'); }
//flash.net.GroupSpecifier


//flash.net.FileReference
$es4.$$package('flash.net').FileReference = function () { throw new Error('Use of unimplemented class: FileReference'); }
//flash.net.FileReference


//flash.globalization.NumberParseResult
$es4.$$package('flash.globalization').NumberParseResult = function () { throw new Error('Use of unimplemented class: NumberParseResult'); }
//flash.globalization.NumberParseResult


//flash.media.SoundLoaderContext
$es4.$$package('flash.media').SoundLoaderContext = function () { throw new Error('Use of unimplemented class: SoundLoaderContext'); }
//flash.media.SoundLoaderContext


//flash.display.InterpolationMethod
$es4.$$package('flash.display').InterpolationMethod = function () { throw new Error('Use of unimplemented class: InterpolationMethod'); }
//flash.display.InterpolationMethod


//flash.net.URLVariables
$es4.$$package('flash.net').URLVariables = (function ()
{
	//class pre initializer
	URLVariables.$$sinit = (function ()
	{
		URLVariables.$$sinit = undefined;

		//set prototype and constructor
		URLVariables.prototype = Object.create(Object.prototype);
		Object.defineProperty(URLVariables.prototype, "constructor", { value: URLVariables, enumerable: false });

		//hold private values
		Object.defineProperty(URLVariables.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(URLVariables.prototype, 'decode', {
		get:function ()
		{
			var $$this = this;

			function decode($$$$source)
			{
				//set default parameter values
				var source = $es4.$$coerce($$$$source, String);

				throw $es4.$$primitive(new Error('URLVariables: attempted call to an unimplemented function "decode"'));
			}

			return $$this.$$URLVariables.$$decode || ($$this.$$URLVariables.$$decode = decode);
		}});


		//public instance method
		Object.defineProperty(URLVariables.prototype, 'toString', {
		get:function ()
		{
			var $$this = this;

			function toString()
			{
				throw $es4.$$primitive(new Error('URLVariables: attempted call to an unimplemented function "toString"'));
			}

			return $$this.$$URLVariables.$$toString || ($$this.$$URLVariables.$$toString = toString);
		}});
	});

	//class initializer
	URLVariables.$$cinit = (function ()
	{
		URLVariables.$$cinit = undefined;
	});

	function URLVariables()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof URLVariables) || $$this.$$URLVariables !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], URLVariables) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			URLVariables.$$construct($$this, $$args);
		}
	}

	//construct
	URLVariables.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (URLVariables.$$cinit !== undefined) URLVariables.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$URLVariables', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		URLVariables.$$iinit($$this);

		//call constructor
		if (args !== undefined) URLVariables.$$constructor.apply($$this, args);
	});

	//initializer
	URLVariables.$$iinit = (function ($$this)
	{
	});

	//constructor
	URLVariables.$$constructor = (function ($$$$source)
	{
		var $$this = this;
		//set default parameter values
		var source = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$source, String);

	});

	return $es4.$$class(URLVariables, null, 'flash.net::URLVariables');
})();
//flash.net.URLVariables


//flash.display.Stage
$es4.$$package('flash.display').Stage = (function ()
{
	//imports
	var Event;
	var MouseEvent;
	var Point;
	var Rectangle;
	var ApplicationDomain;
	var LoaderContext;
	var Player;
	var Sprite;
	var DisplayObjectContainer;
	var InteractiveObject;
	var Stage;
	var Loader;

	//properties
	var $$j = {};
	Object.defineProperty(Stage, '$_enterFrameListeners', {
	get:function () { if (Stage.$$cinit !== undefined) Stage.$$cinit(); return $$j.$_enterFrameListeners; },
	set:function (value) { if (Stage.$$cinit !== undefined) Stage.$$cinit(); $$j.$_enterFrameListeners = $es4.$$coerce(value, Array); }
	});

	Object.defineProperty(Stage, '$__domDocument', {
	get:function () { if (Stage.$$cinit !== undefined) Stage.$$cinit(); return $$j.$__domDocument; },
	set:function (value) { if (Stage.$$cinit !== undefined) Stage.$$cinit(); $$j.$__domDocument = $es4.$$coerce(value, Object); }
	});

	Object.defineProperty(Stage, '$__stageReference', {
	get:function () { if (Stage.$$cinit !== undefined) Stage.$$cinit(); return $$j.$__stageReference; },
	set:function (value) { if (Stage.$$cinit !== undefined) Stage.$$cinit(); $$j.$__stageReference = $es4.$$coerce(value, Stage); }
	});

	Object.defineProperty(Stage, '$__stageLeft', {
	get:function () { if (Stage.$$cinit !== undefined) Stage.$$cinit(); return $$j.$__stageLeft; },
	set:function (value) { if (Stage.$$cinit !== undefined) Stage.$$cinit(); $$j.$__stageLeft = $es4.$$coerce(value, Number); }
	});

	Object.defineProperty(Stage, '$__stageTop', {
	get:function () { if (Stage.$$cinit !== undefined) Stage.$$cinit(); return $$j.$__stageTop; },
	set:function (value) { if (Stage.$$cinit !== undefined) Stage.$$cinit(); $$j.$__stageTop = $es4.$$coerce(value, Number); }
	});

	Object.defineProperty(Stage, '$__pageX', {
	get:function () { if (Stage.$$cinit !== undefined) Stage.$$cinit(); return $$j.$__pageX; },
	set:function (value) { if (Stage.$$cinit !== undefined) Stage.$$cinit(); $$j.$__pageX = $es4.$$coerce(value, Number); }
	});

	Object.defineProperty(Stage, '$__pageY', {
	get:function () { if (Stage.$$cinit !== undefined) Stage.$$cinit(); return $$j.$__pageY; },
	set:function (value) { if (Stage.$$cinit !== undefined) Stage.$$cinit(); $$j.$__pageY = $es4.$$coerce(value, Number); }
	});

	Object.defineProperty(Stage, '$__lastKeyPressedObject', {
	get:function () { if (Stage.$$cinit !== undefined) Stage.$$cinit(); return $$j.$__lastKeyPressedObject; },
	set:function (value) { if (Stage.$$cinit !== undefined) Stage.$$cinit(); $$j.$__lastKeyPressedObject = $es4.$$coerce(value, Object); }
	});

	Object.defineProperty(Stage, '$__lastMouseMoveEvent', {
	get:function () { if (Stage.$$cinit !== undefined) Stage.$$cinit(); return $$j.$__lastMouseMoveEvent; },
	set:function (value) { if (Stage.$$cinit !== undefined) Stage.$$cinit(); $$j.$__lastMouseMoveEvent = value }
	});

	Object.defineProperty(Stage, '$_last', {
	get:function () { if (Stage.$$cinit !== undefined) Stage.$$cinit(); return $$j.$_last; },
	set:function (value) { if (Stage.$$cinit !== undefined) Stage.$$cinit(); $$j.$_last = value }
	});


	//class pre initializer
	Stage.$$sinit = (function ()
	{
		Stage.$$sinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;
		MouseEvent = $es4.$$['flash.events'].MouseEvent;
		Point = $es4.$$['flash.geom'].Point;
		Rectangle = $es4.$$['flash.geom'].Rectangle;
		ApplicationDomain = $es4.$$['flash.system'].ApplicationDomain;
		LoaderContext = $es4.$$['flash.system'].LoaderContext;
		Player = $es4.$$['player'].Player;
		Sprite = $es4.$$['flash.display'].Sprite;
		DisplayObjectContainer = $es4.$$['flash.display'].DisplayObjectContainer;
		InteractiveObject = $es4.$$['flash.display'].InteractiveObject;
		Loader = $es4.$$['flash.display'].Loader;

		//ensure $$sinit is called on super class
		if (DisplayObjectContainer.$$sinit !== undefined) DisplayObjectContainer.$$sinit();

		//set prototype and constructor
		Stage.prototype = Object.create(DisplayObjectContainer.prototype);
		Object.defineProperty(Stage.prototype, "constructor", { value: Stage, enumerable: false });

		//hold private values
		Object.defineProperty(Stage.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(Stage.prototype, '$__properties', {
		get:function ()
		{
			var $$this = this;

			function $__properties($$$$object)
			{
				//set default parameter values
				var object = (0 > arguments.length - 1) ? null : $$$$object;

				if ($$this.$$Stage.$_properties === undefined)
				{
					object = $es4.$$super2($$this, DisplayObjectContainer, '$$DisplayObjectContainer', '$__properties', 'func', undefined)(object);
					object.StageScope = {$_color:0xffffff, $_align:'', $_scaleMode:'', $_stageFocusRect:true};
					object.TLScope = $$this;
					return $$this.$$Stage.$_properties = object;
				}
				return $$this.$$Stage.$_properties;
			}

			return $$this.$$Stage.$$$__properties || ($$this.$$Stage.$$$__properties = $__properties);
		}});


		//public instance method
		Object.defineProperty(Stage.prototype, '$__onResize', {
		get:function ()
		{
			var $$this = this;

			function $__onResize()
			{
				var boundingClientRect = $$this.$$Stage.$_properties.DisplayObjectScope.$_domView.getBoundingClientRect();
				Stage.$__stageTop = boundingClientRect.top;
				Stage.$__stageLeft = boundingClientRect.left;
				$$this.$$Stage.$_properties.TLScope.dispatchEvent($es4.$$primitive(new Event(Event.RESIZE)));
			}

			return $$this.$$Stage.$$$__onResize || ($$this.$$Stage.$$$__onResize = $__onResize);
		}});


		//public instance method
		Object.defineProperty(Stage.prototype, '$__internalAddChild', {
		get:function ()
		{
			var $$this = this;

			function $__internalAddChild($$$$child)
			{
				//set default parameter values
				var child = $es4.$$coerce($$$$child, Sprite);

				var loader = $es4.$$coerce($es4.$$primitive(new Loader()), Loader);
				var properties = loader.$__properties().LoaderScope;
				properties.$_loaderContext = $es4.$$primitive(new LoaderContext(false, ApplicationDomain.currentDomain));
				child.$__properties().DisplayObjectScope.$_loaderInfo = properties.$_contentLoaderInfo;
				child.$__properties().DisplayObjectScope.$_isRoot = true;
				$$this.addChild(child);
			}

			return $$this.$$Stage.$$$__internalAddChild || ($$this.$$Stage.$$$__internalAddChild = $__internalAddChild);
		}});


		//public instance method
		Object.defineProperty(Stage.prototype, '$__notify', {
		get:function ()
		{
			var $$this = this;

			function $__notify($$$$name, $$$$args)
			{
				//set default parameter values
				var name = $es4.$$coerce($$$$name, String);
				var args = $$$$args;

				var event;
				if (name === 'enterFrame')
				{
					if (Stage.$__lastMouseMoveEvent)
					{
						if (Stage.$_last < 1)
						{
							Stage.$_last = 1;
							return;
						}
						Stage.$_last = 0;
						var mobile = $es4.$$coerce(window.mobile, Boolean);
						event = Stage.$__lastMouseMoveEvent;
						Stage.$__lastMouseMoveEvent = null;
						if (!$$this.hasEventListener(MouseEvent.MOUSE_MOVE))
						{
							return;
						}
						var clientX = $es4.$$coerce((mobile && event.clientX === undefined) ? InteractiveObject.getTouch(event).pageX : event.clientX, Number);
						var clientY = $es4.$$coerce((mobile && event.clientY === undefined) ? InteractiveObject.getTouch(event).pageY : event.clientY, Number);
						var localPoint = $$this.globalToLocal($es4.$$primitive(new Point(clientX, clientY)));
						var mouseMoveEvent = $es4.$$primitive(new MouseEvent(MouseEvent.MOUSE_MOVE, false, false, localPoint.x, localPoint.y));
						mouseMoveEvent.$__properties().EventScope.$_target = InteractiveObject.$_getOriginalInteractiveObjectTarget(event.target);
						$$this.dispatchEvent(mouseMoveEvent);
					}
					for (var i = Stage.$_enterFrameListeners.length; i--;)
					{
						event = $es4.$$primitive(new Event(Event.ENTER_FRAME));
						Stage.$_enterFrameListeners[i].func(event.$__properties().EventScope.$_withTarget(event, Stage.$_enterFrameListeners[i].listener));
					}
				}
				$es4.$$super2($$this, DisplayObjectContainer, '$$DisplayObjectContainer', '$__notify', 'func', undefined)(name, args);
			}

			return $$this.$$Stage.$$$__notify || ($$this.$$Stage.$$$__notify = $__notify);
		}});


		//public instance method
		Object.defineProperty(Stage.prototype, 'invalidate', {
		get:function ()
		{
			var $$this = this;

			function invalidate()
			{
				document.body.removeChild(document.body.appendChild(document.createElement('style')));
			}

			return $$this.$$Stage.$$invalidate || ($$this.$$Stage.$$invalidate = invalidate);
		}});


		//public instance method
		Object.defineProperty(Stage.prototype, 'isFocusInaccessible', {
		get:function ()
		{
			var $$this = this;

			function isFocusInaccessible()
			{
				throw $es4.$$primitive(new Error('Stage: attempted call to an unimplemented function "isFocusInaccessible"'));
			}

			return $$this.$$Stage.$$isFocusInaccessible || ($$this.$$Stage.$$isFocusInaccessible = isFocusInaccessible);
		}});

		Object.defineProperty(Stage.prototype, 'color', {get:function ()
		{
			var $$this = this;
			return parseInt(Stage.$__domDocument.style.background.split('#').pop(), 16);
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, uint);

			var $$this = this;
			Stage.$__domDocument.style.background = value.toString(16);
		}});
		Object.defineProperty(Stage.prototype, 'frameRate', {get:function ()
		{
			var $$this = this;
			return Player.getFrameRate();
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var $$this = this;
			Player.setFrameRate(value);
		}});
		Object.defineProperty(Stage.prototype, 'align', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$Stage.$_properties.StageScope.$_align, String);
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			var $$this = this;
			$$this.$$Stage.$_properties.StageScope.$_align = value;
		}});
		Object.defineProperty(Stage.prototype, 'colorCorrection', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('Stage: attempted call to an unimplemented function "colorCorrection"'));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			var $$this = this;
			throw $es4.$$primitive(new Error('Stage: attempted call to an unimplemented function "colorCorrection"'));
		}});
		Object.defineProperty(Stage.prototype, 'colorCorrectionSupport', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('Stage: attempted call to an unimplemented function "colorCorrectionSupport"'));
		}});
		Object.defineProperty(Stage.prototype, 'displayState', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('Stage: attempted call to an unimplemented function "displayState"'));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			var $$this = this;
			throw $es4.$$primitive(new Error('Stage: attempted call to an unimplemented function "displayState"'));
		}});
		Object.defineProperty(Stage.prototype, 'focus', {get:function ()
		{
			var $$this = this;
			var element = document.activeElement;
			if (!element || element.displayObject === undefined)
			{
				return null;
			}
			return $es4.$$coerce(element.displayObject, InteractiveObject);
		}, set:function ($$$$newFocus)
		{
			//set default parameter values
			var newFocus = $es4.$$coerce($$$$newFocus, InteractiveObject);

			var $$this = this;
			Stage.$__lastKeyPressedObject = null;
			if (newFocus == null)
			{
				if (document.activeElement)
				{
					if (document.activeElement.blur !== undefined)
					{
						document.activeElement.blur();
					}
				}
				else
				{
					window.focus();
				}
				return;
			}
			newFocus.$__properties().DisplayObjectScope.$_domView.focus();
		}});
		Object.defineProperty(Stage.prototype, 'fullScreenHeight', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce(window.screen.height, uint);
		}});
		Object.defineProperty(Stage.prototype, 'fullScreenSourceRect', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('Stage: attempted call to an unimplemented function "fullScreenSourceRect"'));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Rectangle);

			var $$this = this;
			throw $es4.$$primitive(new Error('Stage: attempted call to an unimplemented function "fullScreenSourceRect"'));
		}});
		Object.defineProperty(Stage.prototype, 'fullScreenWidth', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce(window.screen.width, uint);
		}});
		Object.defineProperty(Stage.prototype, 'quality', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('Stage: attempted call to an unimplemented function "quality"'));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			var $$this = this;
			throw $es4.$$primitive(new Error('Stage: attempted call to an unimplemented function "quality"'));
		}});
		Object.defineProperty(Stage.prototype, 'scaleMode', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$Stage.$_properties.StageScope.$_scaleMode, String);
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			var $$this = this;
			$$this.$$Stage.$_properties.StageScope.$_scaleMode = value;
		}});
		Object.defineProperty(Stage.prototype, 'showDefaultContextMenu', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('Stage: attempted call to an unimplemented function "showDefaultContextMenu"'));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var $$this = this;
			throw $es4.$$primitive(new Error('Stage: attempted call to an unimplemented function "showDefaultContextMenu"'));
		}});
		Object.defineProperty(Stage.prototype, 'stageFocusRect', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$Stage.$_properties.StageScope.$_stageFocusRect, Boolean);
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var $$this = this;
			if (value == $$this.$$Stage.$_properties.StageScope.$_stageFocusRect)
			{
				return;
			}
			$$this.$$Stage.$_properties.StageScope.$_stageFocusRect = value;
			if (!value)
			{
				var css = '*:focus { outline: none; }';
				var style = document.createElement('style');
				style.type = 'text/css';
				if (style.styleSheet)
				{
					style.styleSheet.cssText = css;
				}
				else
				{
					style.appendChild(document.createTextNode(css));
				}
				document.getElementsByTagName('head')[0].appendChild(style);
				$$this.$$Stage.$_stageFocusRectStyle = style;
			}
			else
			{
				$$this.$$Stage.$_stageFocusRectStyle.parentNode.removeChild($$this.$$Stage.$_stageFocusRectStyle);
				$$this.$$Stage.$_stageFocusRectStyle = null;
			}
		}});
		Object.defineProperty(Stage.prototype, 'stageHeight', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce(Stage.$__domDocument.offsetHeight, int);
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, int);

			var $$this = this;
			Stage.$__domDocument.style.height = value + 'px';
		}});
		Object.defineProperty(Stage.prototype, 'stageWidth', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce(Stage.$__domDocument.offsetWidth, int);
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, int);

			var $$this = this;
			Stage.$__domDocument.style.width = value + 'px';
		}});
		Object.defineProperty(Stage.prototype, 'wmodeGPU', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('Stage: attempted call to an unimplemented function "wmodeGPU"'));
		}});

		//properties
		Stage.prototype.$$v.$_stageFocusRectStyle = {
		get:function () { var $$this = this.$$this; return $$this.$$Stage.$$p.$_stageFocusRectStyle; },
		set:function (value) { var $$this = this.$$this; $$this.$$Stage.$$p.$_stageFocusRectStyle = $es4.$$coerce(value, Object); }
		};

		Stage.prototype.$$v.$_properties = {
		get:function () { var $$this = this.$$this; return $$this.$$Stage.$$p.$_properties; },
		set:function (value) { var $$this = this.$$this; $$this.$$Stage.$$p.$_properties = value }
		};

	});

	//class initializer
	Stage.$$cinit = (function ()
	{
		Stage.$$cinit = undefined;

		//initialize properties
		$$j.$_enterFrameListeners = $es4.$$coerce([], Array);
		$$j.$__domDocument = $es4.$$coerce(undefined, Object);
		$$j.$__stageReference = $es4.$$coerce(undefined, $es4.$$['flash.display'].Stage);
		$$j.$__stageLeft = $es4.$$coerce(undefined, Number);
		$$j.$__stageTop = $es4.$$coerce(undefined, Number);
		$$j.$__pageX = $es4.$$coerce(undefined, Number);
		$$j.$__pageY = $es4.$$coerce(undefined, Number);
		$$j.$__lastKeyPressedObject = $es4.$$coerce(undefined, Object);
		$$j.$__lastMouseMoveEvent = undefined;
		$$j.$_last = 0;
	
	});

	//public static method
	Stage.$__init = (function ($$$$domDocument)
	{
		if (Stage.$$cinit !== undefined) Stage.$$cinit();

		//set default parameter values
		var domDocument = $$$$domDocument;

		Stage.$__domDocument = domDocument;
		var stage = $es4.$$coerce($es4.$$primitive(new Stage()), $es4.$$['flash.display'].Stage);
		var loader = $es4.$$coerce($es4.$$primitive(new Loader()), Loader);
		var properties = loader.$__properties().LoaderScope;
		properties.$_loaderContext = $es4.$$primitive(new LoaderContext(false, null));
		stage.$__properties().DisplayObjectScope.$_loaderInfo = properties.$_contentLoaderInfo;
		return stage;
	});

	//public static method
	Stage.$__addEnterFrameListener = (function ($$$$listener, $$$$func)
	{
		if (Stage.$$cinit !== undefined) Stage.$$cinit();

		//set default parameter values
		var listener = $es4.$$coerce($$$$listener, Object);
		var func = $es4.$$coerce($$$$func, Function);

		Stage.$_enterFrameListeners.push({listener:listener, func:func});
	});

	//public static method
	Stage.$__removeEnterFrameListener = (function ($$$$listener, $$$$func)
	{
		if (Stage.$$cinit !== undefined) Stage.$$cinit();

		//set default parameter values
		var listener = $es4.$$coerce($$$$listener, Object);
		var func = $es4.$$coerce($$$$func, Function);

		for (var i = Stage.$_enterFrameListeners.length; i--;)
		{
			if (Stage.$_enterFrameListeners[i].listener != listener || Stage.$_enterFrameListeners[i].func != func)
			{
				continue;
			}
			Stage.$_enterFrameListeners.splice(i, 1);
		}
	});
	function Stage()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof Stage) || $$this.$$Stage !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Stage) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			Stage.$$construct($$this, $$args);
		}
	}

	//construct
	Stage.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (Stage.$$cinit !== undefined) Stage.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$Stage', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$Stage, '$_stageFocusRectStyle', Stage.prototype.$$v.$_stageFocusRectStyle);
		Object.defineProperty($$this.$$Stage, '$_properties', Stage.prototype.$$v.$_properties);

		//call construct on super
		DisplayObjectContainer.$$construct($$this);

		//initialize properties
		Stage.$$iinit($$this);

		//call constructor
		if (args !== undefined) Stage.$$constructor.apply($$this, args);
	});

	//initializer
	Stage.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$Stage.$$p.$_stageFocusRectStyle = $es4.$$coerce(undefined, Object);
		$$this.$$Stage.$$p.$_properties = undefined;
	
		//call iinit on super
		DisplayObjectContainer.$$iinit($$this);
	});

	//constructor
	Stage.$$constructor = (function ()
	{
		var $$this = this;
		if ($$this.$$Stage.$_properties === undefined)
		{
			$$this.$__properties({});
		}
		DisplayObjectContainer.$$constructor.call($$this);
		Stage.$__domDocument.appendChild($$this.$$Stage.$_properties.DisplayObjectScope.$_domView);
		$$this.$__onResize();
		Stage.$__stageReference = $$this;
		var mobile = $es4.$$coerce(window.mobile, Boolean);
		if (mobile)
		{
			document.body.addEventListener('touchstart', function ($$$$event) 
{
			//set default parameter values
			var event = $$$$event;

	var target = event.target;
	if (target.nodeName != 'A' && target.nodeName != 'TEXTAREA' && !(target.contentEditable === 'true'))
	{
		event.preventDefault();
	}
	Stage.$__pageX = event.touches[0].pageX;
	Stage.$__pageY = event.touches[0].pageY;
}
, true);
			document.body.addEventListener('touchmove', function ($$$$event) 
{
			//set default parameter values
			var event = $$$$event;

	var target = event.target;
	if (target.nodeName != 'A' && target.nodeName != 'TEXTAREA' && !(target.contentEditable === 'true'))
	{
		event.preventDefault();
	}
	Stage.$__pageX = event.touches[0].pageX;
	Stage.$__pageY = event.touches[0].pageY;
}
, true);
		}
		else
		{
			document.body.addEventListener('mousemove', function ($$$$event) 
{
			//set default parameter values
			var event = $$$$event;

	Stage.$__pageX = event.pageX;
	Stage.$__pageY = event.pageY;
}
, true);
			document.body.addEventListener('mousedown', function ($$$$event) 
{
			//set default parameter values
			var event = $$$$event;

	Stage.$__lastKeyPressedObject = null;
}
, true);
			document.body.addEventListener('keydown', function ($$$$event) 
{
			//set default parameter values
			var event = $$$$event;

	Stage.$__lastKeyPressedObject = {which:event.which, keyCode:event.keyCode, shiftKey:event.shiftKey};
}
, true);
		}
		var doMouseMove = false;
		var requestAnimationFrame = $es4.$$coerce(window.requestAnimationFrame, Function);
		var view = Stage.$__domDocument;
		var onMouseMove = $es4.$$coerce(function ($$$$event) 
		{
			//set default parameter values
			var event = $$$$event;

			Stage.$__lastMouseMoveEvent = event;
			event.stopPropagation();
		}
, Function);
		var onMouseWheel = $es4.$$coerce(function ($$$$event) 
		{
			//set default parameter values
			var event = $$$$event;

			if (!$$this.hasEventListener(MouseEvent.MOUSE_WHEEL))
			{
				event.stopPropagation();
				return;
			}
			var mouseMoveEvent = $es4.$$primitive(new MouseEvent(MouseEvent.MOUSE_WHEEL, false, false, null, null, null, false, false, false, false, -event.deltaY));
			mouseMoveEvent.$__properties().EventScope.$_target = InteractiveObject.$_getOriginalInteractiveObjectTarget(event.target);
			$$this.dispatchEvent(mouseMoveEvent);
			event.stopPropagation();
		}
, Function);
		if (mobile)
		{
			view.addEventListener('touchmove', onMouseMove, false);
			$$this.$$Stage.$_properties.InteractiveObjectScope.$_onMouseMove = onMouseMove;
		}
		else
		{
			view.addEventListener('mousemove', onMouseMove, true);
		}
		view.addEventListener('wheel', onMouseWheel, false);
		$$this.$$Stage.$_properties.DisplayObjectScope.$_isRoot = true;
	});

	return $es4.$$class(Stage, {EXTENDS:'flash.display.DisplayObjectContainer'}, 'flash.display::Stage');
})();
//flash.display.Stage


//flash.events.GesturePhase
$es4.$$package('flash.events').GesturePhase = function () { throw new Error('Use of unimplemented class: GesturePhase'); }
//flash.events.GesturePhase


//flash.text.engine.FontPosture
$es4.$$package('flash.text.engine').FontPosture = function () { throw new Error('Use of unimplemented class: FontPosture'); }
//flash.text.engine.FontPosture


//flash.events.TextEvent
$es4.$$package('flash.events').TextEvent = (function ()
{
	//imports
	var Event;
	var TextEvent;

	//properties
	var $$j = {};
	TextEvent.LINK = "link";
	TextEvent.TEXT_INPUT = "textInput";

	//class pre initializer
	TextEvent.$$sinit = (function ()
	{
		TextEvent.$$sinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;

		//ensure $$sinit is called on super class
		if (Event.$$sinit !== undefined) Event.$$sinit();

		//set prototype and constructor
		TextEvent.prototype = Object.create(Event.prototype);
		Object.defineProperty(TextEvent.prototype, "constructor", { value: TextEvent, enumerable: false });

		//hold private values
		Object.defineProperty(TextEvent.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(TextEvent.prototype, 'clone', {
		get:function ()
		{
			var $$this = this;

			function clone()
			{
				return $es4.$$coerce($es4.$$primitive(new TextEvent($$this.type, $$this.bubbles, $$this.cancelable, $$this.text)), Event);
			}

			return $$this.$$TextEvent.$$clone || ($$this.$$TextEvent.$$clone = clone);
		}});


		//public instance method
		Object.defineProperty(TextEvent.prototype, 'toString', {
		get:function ()
		{
			var $$this = this;

			function toString()
			{
				return $$this.formatToString('TextEvent', 'bubbles', 'cancelable', 'text');
			}

			return $$this.$$TextEvent.$$toString || ($$this.$$TextEvent.$$toString = toString);
		}});

		Object.defineProperty(TextEvent.prototype, 'text', {get:function ()
		{
			var $$this = this;
			return $$this.$$TextEvent._text;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			var $$this = this;
			$$this.$$TextEvent._text = value;
		}});

		//properties
		TextEvent.prototype.$$v._text = {
		get:function () { var $$this = this.$$this; return $$this.$$TextEvent.$$p._text; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextEvent.$$p._text = $es4.$$coerce(value, String); }
		};

	});

	//class initializer
	TextEvent.$$cinit = (function ()
	{
		TextEvent.$$cinit = undefined;
	});

	function TextEvent()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof TextEvent) || $$this.$$TextEvent !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], TextEvent) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			TextEvent.$$construct($$this, $$args);
		}
	}

	//construct
	TextEvent.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (TextEvent.$$cinit !== undefined) TextEvent.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$TextEvent', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$TextEvent, '_text', TextEvent.prototype.$$v._text);

		//call construct on super
		Event.$$construct($$this);

		//initialize properties
		TextEvent.$$iinit($$this);

		//call constructor
		if (args !== undefined) TextEvent.$$constructor.apply($$this, args);
	});

	//initializer
	TextEvent.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$TextEvent.$$p._text = $es4.$$coerce(undefined, String);
	
		//call iinit on super
		Event.$$iinit($$this);
	});

	//constructor
	TextEvent.$$constructor = (function ($$$$type, $$$$bubbles, $$$$cancelable, $$$$text)
	{
		var $$this = this;
		//set default parameter values
		var type = $es4.$$coerce($$$$type, String);
		var bubbles = (1 > arguments.length - 1) ? false : $es4.$$coerce($$$$bubbles, Boolean);
		var cancelable = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$cancelable, Boolean);
		var text = (3 > arguments.length - 1) ? "" : $es4.$$coerce($$$$text, String);

		Event.$$constructor.call($$this, type, bubbles, cancelable);
		$$this.$$TextEvent._text = text;
	});

	return $es4.$$class(TextEvent, {EXTENDS:'flash.events.Event'}, 'flash.events::TextEvent');
})();
//flash.events.TextEvent


//flash.text.engine.TabStop
$es4.$$package('flash.text.engine').TabStop = function () { throw new Error('Use of unimplemented class: TabStop'); }
//flash.text.engine.TabStop


//flash.text.StaticText
$es4.$$package('flash.text').StaticText = function () { throw new Error('Use of unimplemented class: StaticText'); }
//flash.text.StaticText


//flash.text.engine.ContentElement
$es4.$$package('flash.text.engine').ContentElement = function () { throw new Error('Use of unimplemented class: ContentElement'); }
//flash.text.engine.ContentElement


//flash.display.Bitmap
$es4.$$package('flash.display').Bitmap = (function ()
{
	//imports
	var Bitmap;
	var BitmapData;
	var DisplayObject;

	//class pre initializer
	Bitmap.$$sinit = (function ()
	{
		Bitmap.$$sinit = undefined;

		//initialize imports
		BitmapData = $es4.$$['flash.display'].BitmapData;
		DisplayObject = $es4.$$['flash.display'].DisplayObject;

		//ensure $$sinit is called on super class
		if (DisplayObject.$$sinit !== undefined) DisplayObject.$$sinit();

		//set prototype and constructor
		Bitmap.prototype = Object.create(DisplayObject.prototype);
		Object.defineProperty(Bitmap.prototype, "constructor", { value: Bitmap, enumerable: false });

		//hold private values
		Object.defineProperty(Bitmap.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(Bitmap.prototype, '$__properties', {
		get:function ()
		{
			var $$this = this;

			function $__properties($$$$object)
			{
				//set default parameter values
				var object = (0 > arguments.length - 1) ? null : $$$$object;

				if ($$this.$$Bitmap.$_properties === undefined)
				{
					object = $es4.$$super2($$this, DisplayObject, '$$DisplayObject', '$__properties', 'func', undefined)(object);
					var pscope = $es4.$$getOwnScope($$this, Bitmap);
					object.BitmapScope = {pscope:pscope};
					object.TLScope = $$this;
					return $$this.$$Bitmap.$_properties = object;
				}
				return $$this.$$Bitmap.$_properties;
			}

			return $$this.$$Bitmap.$$$__properties || ($$this.$$Bitmap.$$$__properties = $__properties);
		}});


		//protected instance method
		Object.defineProperty(Bitmap.prototype, '$__createDomView', {
		get:function ()
		{
			var $$this = this;

			function $__createDomView()
			{
				var canvas = document.createElement('canvas');
				canvas.setAttribute('tabindex', -1);
				return canvas;
			}

			return $$this.$$Bitmap.$$$__createDomView || ($$this.$$Bitmap.$$$__createDomView = $__createDomView);
		}});


		//private instance method
		Bitmap.prototype.$$v.setBitmapData = {
		get:function ()
		{
			var $$this = this.$$this;

			function setBitmapData($$$$value)
			{
				//set default parameter values
				var value = $es4.$$coerce($$$$value, BitmapData);

				var properties = $$this.$$Bitmap.$_properties;
				var canvas = properties.DisplayObjectScope.$_domView;
				var bitmapDataProperties;
				if (value === null)
				{
					var bitmapData = $es4.$$coerce(properties.BitmapScope.$_bitmapData, BitmapData);
					if (bitmapData)
					{
						bitmapDataProperties = bitmapData.$__properties();
						bitmapDataProperties.BitmapDataScope.$_canvas = null;
						bitmapDataProperties.BitmapDataScope.$_createOrGetCanvas(bitmapData);
					}
					properties.BitmapScope.$_bitmapData = null;
					canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);
					canvas.width = 0;
					canvas.height = 0;
					properties.DisplayObjectScope.$_setExplicitBounds(0, 0);
					return;
				}
				bitmapDataProperties = value.$__properties();
				canvas.width = bitmapDataProperties.BitmapDataScope.$_width;
				canvas.height = bitmapDataProperties.BitmapDataScope.$_height;
				canvas.getContext('2d').drawImage(bitmapDataProperties.BitmapDataScope.$_createOrGetCanvas(value), 0, 0);
				bitmapDataProperties.BitmapDataScope.$_canvas = canvas;
				properties.BitmapScope.$_bitmapData = value;
				properties.DisplayObjectScope.$_setExplicitBounds(canvas.width, canvas.height);
			}

			return $$this.$$Bitmap.$$p.$$setBitmapData || ($$this.$$Bitmap.$$p.$$setBitmapData = setBitmapData);
		}};

		Object.defineProperty(Bitmap.prototype, 'bitmapData', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$Bitmap.$_properties.BitmapScope.$_bitmapData, BitmapData);
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, BitmapData);

			var $$this = this;
			$$this.$$Bitmap.setBitmapData(value);
		}});
		Object.defineProperty(Bitmap.prototype, 'pixelSnapping', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$Bitmap.$_properties.BitmapScope.$_pixelSnapping, String);
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			var $$this = this;
			$$this.$$Bitmap.$_properties.BitmapScope.$_pixelSnapping = value;
		}});
		Object.defineProperty(Bitmap.prototype, 'smoothing', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$Bitmap.$_properties.BitmapScope.$_smoothing, Boolean);
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var $$this = this;
			$$this.$$Bitmap.$_properties.BitmapScope.$_smoothing = value;
		}});

		//properties
		Bitmap.prototype.$$v.$_properties = {
		get:function () { var $$this = this.$$this; return $$this.$$Bitmap.$$p.$_properties; },
		set:function (value) { var $$this = this.$$this; $$this.$$Bitmap.$$p.$_properties = value }
		};

	});

	//class initializer
	Bitmap.$$cinit = (function ()
	{
		Bitmap.$$cinit = undefined;
	});

	function Bitmap()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof Bitmap) || $$this.$$Bitmap !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Bitmap) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			Bitmap.$$construct($$this, $$args);
		}
	}

	//construct
	Bitmap.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (Bitmap.$$cinit !== undefined) Bitmap.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$Bitmap', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$Bitmap, '$_properties', Bitmap.prototype.$$v.$_properties);

		//private instance method
		Object.defineProperty($$this.$$Bitmap, 'setBitmapData', Bitmap.prototype.$$v.setBitmapData);

		//call construct on super
		DisplayObject.$$construct($$this);

		//initialize properties
		Bitmap.$$iinit($$this);

		//call constructor
		if (args !== undefined) Bitmap.$$constructor.apply($$this, args);
	});

	//initializer
	Bitmap.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$Bitmap.$$p.$_properties = undefined;
	
		//call iinit on super
		DisplayObject.$$iinit($$this);
	});

	//constructor
	Bitmap.$$constructor = (function ($$$$bitmapData, $$$$pixelSnapping, $$$$smoothing)
	{
		var $$this = this;
		//set default parameter values
		var bitmapData = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$bitmapData, BitmapData);
		var pixelSnapping = (1 > arguments.length - 1) ? 'auto' : $es4.$$coerce($$$$pixelSnapping, String);
		var smoothing = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$smoothing, Boolean);

		var properties = $$this.$$Bitmap.$_properties || $$this.$__properties({});
		DisplayObject.$$constructor.call($$this);
		properties.BitmapScope.$_pixelSnapping = pixelSnapping;
		properties.BitmapScope.$_smoothing = smoothing;
		$$this.$$Bitmap.$_properties.DisplayObjectScope.$_domView.style.pointerEvents = 'inherit';
		if (bitmapData !== null)
		{
			$$this.$$Bitmap.setBitmapData(bitmapData);
		}
	});

	return $es4.$$class(Bitmap, {EXTENDS:'flash.display.DisplayObject'}, 'flash.display::Bitmap');
})();
//flash.display.Bitmap


//flash.ui.MouseCursor
$es4.$$package('flash.ui').MouseCursor = (function ()
{
	//properties
	var $$j = {};
	MouseCursor.ARROW = "arrow";
	MouseCursor.AUTO = "auto";
	MouseCursor.BUTTON = "button";
	MouseCursor.HAND = "hand";
	MouseCursor.IBEAM = "ibeam";

	//class pre initializer
	MouseCursor.$$sinit = (function ()
	{
		MouseCursor.$$sinit = undefined;

		//set prototype and constructor
		MouseCursor.prototype = Object.create(Object.prototype);
		Object.defineProperty(MouseCursor.prototype, "constructor", { value: MouseCursor, enumerable: false });

		//hold private values
		Object.defineProperty(MouseCursor.prototype, '$$v', {value:{}});
	});

	//class initializer
	MouseCursor.$$cinit = (function ()
	{
		MouseCursor.$$cinit = undefined;
	});

	function MouseCursor()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof MouseCursor) || $$this.$$MouseCursor !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], MouseCursor) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			MouseCursor.$$construct($$this, $$args);
		}
	}

	//construct
	MouseCursor.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (MouseCursor.$$cinit !== undefined) MouseCursor.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$MouseCursor', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		MouseCursor.$$iinit($$this);

		//call constructor
		if (args !== undefined) MouseCursor.$$constructor.apply($$this, args);
	});

	//initializer
	MouseCursor.$$iinit = (function ($$this)
	{
	});

	//constructor
	MouseCursor.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(MouseCursor, null, 'flash.ui::MouseCursor');
})();
//flash.ui.MouseCursor


//flash.media.Sound
$es4.$$package('flash.media').Sound = (function ()
{
	//imports
	var Event;
	var EventDispatcher;
	var ProgressEvent;
	var ID3Info;
	var SoundChannel;
	var SoundLoaderContext;
	var SoundTransform;
	var URLRequest;
	var ByteArray;
	var Browser;

	//class pre initializer
	Sound.$$sinit = (function ()
	{
		Sound.$$sinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;
		EventDispatcher = $es4.$$['flash.events'].EventDispatcher;
		ProgressEvent = $es4.$$['flash.events'].ProgressEvent;
		ID3Info = $es4.$$['flash.media'].ID3Info;
		SoundChannel = $es4.$$['flash.media'].SoundChannel;
		SoundLoaderContext = $es4.$$['flash.media'].SoundLoaderContext;
		SoundTransform = $es4.$$['flash.media'].SoundTransform;
		URLRequest = $es4.$$['flash.net'].URLRequest;
		ByteArray = $es4.$$['flash.utils'].ByteArray;
		Browser = $es4.$$['browser'].Browser;

		//ensure $$sinit is called on super class
		if (EventDispatcher.$$sinit !== undefined) EventDispatcher.$$sinit();

		//set prototype and constructor
		Sound.prototype = Object.create(EventDispatcher.prototype);
		Object.defineProperty(Sound.prototype, "constructor", { value: Sound, enumerable: false });

		//hold private values
		Object.defineProperty(Sound.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(Sound.prototype, 'load', {
		get:function ()
		{
			var $$this = this;

			function load($$$$stream, $$$$context)
			{
				//set default parameter values
				var stream = $es4.$$coerce($$$$stream, URLRequest);
				var context = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$context, SoundLoaderContext);

				if (!stream || !stream.url)
				{
					throw $es4.$$primitive(new TypeError('stream or stream.url is null'));
				}
				if ($$this.$_xmlHttpRequest)
				{
					throw $es4.$$primitive(new Error('Sound: load in progress'));
				}
				$$this.$_stream = stream;
				var onLoad = $es4.$$coerce(function ($$$$event) 
				{
					//set default parameter values
					var event = $es4.$$coerce($$$$event, Object);

					if (!$$this.$_xmlHttpRequest)
					{
						return;
					}
					trace('sound loaded');
					var arrayBuffer = $$this.$_xmlHttpRequest.response;
					$$this.$_xmlHttpRequest.onprogress = null;
					$$this.$_xmlHttpRequest.onload = null;
					$$this.$_xmlHttpRequest = null;
					if (window.AudioContext !== undefined || window.webkitAudioContext !== undefined)
					{
						var audioContext = Browser.getNewAudioContext();
						if (audioContext)
						{
							trace('audio context found');
							$$this.$__audioContext = audioContext;
							audioContext.decodeAudioData(arrayBuffer, $$this.$$Sound.onDecodeAudioDataSuccess, $$this.$$Sound.onDecodeAudioDataFailure);
							return;
						}
					}
					$$this.$$Sound.calculateDuration(arrayBuffer);
					$$this.dispatchEvent($es4.$$primitive(new Event(Event.COMPLETE)));
				}
, Function);
				var onProgress = $es4.$$coerce(function ($$$$event) 
				{
					//set default parameter values
					var event = $es4.$$coerce($$$$event, Object);

					if (!event.lengthComputable)
					{
						return;
					}
					$$this.$_bytesLoaded = event.loaded;
					$$this.$_bytesTotal = event.total;
					$$this.dispatchEvent($es4.$$primitive(new ProgressEvent(ProgressEvent.PROGRESS, false, false, $$this.$_bytesLoaded, $$this.$_bytesTotal)));
				}
, Function);
				trace('loading sound');
				$$this.$_xmlHttpRequest = Browser.getNewXMLHttpRequest();
				$$this.$_xmlHttpRequest.onload = onLoad;
				$$this.$_xmlHttpRequest.onprogress = onProgress;
				$$this.$_xmlHttpRequest.open('GET', stream.url, true);
				$$this.$_xmlHttpRequest.responseType = 'arraybuffer';
				$$this.$_xmlHttpRequest.overrideMimeType('text/plain; charset=x-user-defined');
				$$this.$_xmlHttpRequest.send(null);
			}

			return $$this.$$Sound.$$load || ($$this.$$Sound.$$load = load);
		}});


		//private instance method
		Sound.prototype.$$v.calculateDuration = {
		get:function ()
		{
			var $$this = this.$$this;

			function calculateDuration($$$$arrayBuffer)
			{
				//set default parameter values
				var arrayBuffer = $es4.$$coerce($$$$arrayBuffer, Object);

				var bytes = Browser.getNewUint8Array(arrayBuffer);
				var bytesOffset = 0;
				if (bytes[0] == 73 && bytes[1] == 68 && bytes[2] == 51)
				{
					if (bytes[3] != 3)
					{
						throw $es4.$$primitive(new Error('invalid mp3 id3 major format, expected 3, got: ' + bytes[3]));
					}
					bytesOffset = $es4.$$coerce((bytes[6] * 2097152 + bytes[7] * 16384 + bytes[8] * 128 + bytes[9]) + 10, int);
				}
				var preFrameSyncBytesOffset = bytesOffset;
				var byte2 = $es4.$$coerce(bytes[bytesOffset + 1], int);
				if (bytes[bytesOffset++] != 255)
				{
					throw $es4.$$primitive(new Error('invalid mp3 format. please use cbr mp3s, only'));
				}
				var version = $es4.$$coerce((bytes[bytesOffset] & 24) >> 3, int);
				var layer = $es4.$$coerce((bytes[bytesOffset] & 6) >> 1, int);
				bytesOffset++;
				var bitrateIndex = $es4.$$coerce(bytes[bytesOffset] >> 4, int);
				var bitrateLookupTable = [0, 0, 0, 0, 0, 32, 32, 32, 32, 8, 64, 48, 40, 48, 16, 96, 56, 48, 56, 24, 128, 64, 56, 64, 32, 160, 80, 64, 80, 40, 192, 96, 80, 96, 48, 224, 112, 96, 112, 56, 256, 128, 112, 128, 64, 288, 160, 128, 144, 80, 320, 192, 160, 160, 96, 352, 224, 192, 176, 112, 384, 256, 224, 192, 128, 416, 320, 256, 224, 144, 448, 384, 320, 256, 160, 0, 0, 0, 0, 0];
				var row = (bitrateIndex * 5);
				var column = 0;
				if (version == 3 && layer == 3)
				{
					column = 0;
				}
				else if (version == 3 && layer == 2)
				{
					column = 1;
				}
				else if (version == 3 && layer == 1)
				{
					column = 2;
				}
				else if ((version == 2 || version == 0) && layer == 3)
				{
					column = 3;
				}
				else if ((version == 2 || version == 0) && (layer == 2 || layer == 1))
				{
					column = 4;
				}
				else
				{
					throw $es4.$$primitive(new Error('invalid mp3 given'));
				}
				if (!bitrateLookupTable[row + column])
				{
					throw $es4.$$primitive(new Error('invalid mp3 given'));
				}
				var bitrate = $es4.$$coerce(bitrateLookupTable[row + column], int);
				var samplerateIndex = $es4.$$coerce((bytes[bytesOffset] & 12) >> 2, int);
				var samplerateLookupTable = [44100, 22050, 11025, 48000, 24000, 12000, 32000, 16000, 8000, 0, 0, 0];
				row = (samplerateIndex * 3);
				if (version == 3)
				{
					column = 0;
				}
				else if (version == 2)
				{
					column = 1;
				}
				else if (version == 0)
				{
					column = 2;
				}
				else
				{
					throw $es4.$$primitive(new Error('invalid mp3 given'));
				}
				if (!samplerateLookupTable[row + column])
				{
					throw $es4.$$primitive(new Error('invalid mp3 given'));
				}
				var samplerate = $es4.$$coerce(samplerateLookupTable[row + column], int);
				var framesamplesLookupTable = [0, 576, 1152, 384, 0, 0, 0, 0, 0, 576, 1152, 384, 0, 1152, 1152, 384];
				var framesamples = $es4.$$coerce(framesamplesLookupTable[(version * 4) + layer], int);
				var slotSizeLookupTable = [0, 1, 1, 4];
				var baseFrameSize = $es4.$$coerce(Math.floor((((framesamples / 8) * (bitrate * 1000)) / samplerate)), int);
				bytesOffset = preFrameSyncBytesOffset;
				var byteOffset = bytesOffset;
				var frames = 0;
				while (bytes[byteOffset] == 255 && bytes[byteOffset + 1] == byte2)
				{
					frames++;
					var pad = $es4.$$coerce((bytes[byteOffset + 2] & 2) >> 1, int);
					var frameSize = $es4.$$coerce(baseFrameSize + ((pad) ? slotSizeLookupTable[layer] : 0), int);
					byteOffset += frameSize;
				}
				$$this.$_duration = ((framesamples / samplerate) * 1000) * (frames - 1);
				trace('reported audio duration: ' + $$this.$_duration);
			}

			return $$this.$$Sound.$$p.$$calculateDuration || ($$this.$$Sound.$$p.$$calculateDuration = calculateDuration);
		}};


		//private instance method
		Sound.prototype.$$v.onDecodeAudioDataSuccess = {
		get:function ()
		{
			var $$this = this.$$this;

			function onDecodeAudioDataSuccess($$$$buffer)
			{
				//set default parameter values
				var buffer = $$$$buffer;

				trace('audio context decode data success');
				$$this.$__audioSourceBuffer = buffer;
				$$this.$_duration = buffer.duration * 1000;
				$$this.dispatchEvent($es4.$$primitive(new Event(Event.COMPLETE)));
			}

			return $$this.$$Sound.$$p.$$onDecodeAudioDataSuccess || ($$this.$$Sound.$$p.$$onDecodeAudioDataSuccess = onDecodeAudioDataSuccess);
		}};


		//private instance method
		Sound.prototype.$$v.onDecodeAudioDataFailure = {
		get:function ()
		{
			var $$this = this.$$this;

			function onDecodeAudioDataFailure($$$$error)
			{
				//set default parameter values
				var error = $$$$error;

				trace("error (decodeAudioData): " + error);
				$$this.$__audioContext = null;
				$$this.dispatchEvent($es4.$$primitive(new Event(Event.COMPLETE)));
			}

			return $$this.$$Sound.$$p.$$onDecodeAudioDataFailure || ($$this.$$Sound.$$p.$$onDecodeAudioDataFailure = onDecodeAudioDataFailure);
		}};


		//public instance method
		Object.defineProperty(Sound.prototype, 'play', {
		get:function ()
		{
			var $$this = this;

			function play($$$$startTime, $$$$loops, $$$$sndTransform)
			{
				//set default parameter values
				var startTime = (0 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$startTime, Number);
				var loops = (1 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$loops, int);
				var sndTransform = (2 > arguments.length - 1) ? null : $es4.$$coerce($$$$sndTransform, SoundTransform);

				if (!$$this.$_duration)
				{
					throw $es4.$$primitive(new Error('Sound not loaded'));
				}
				return SoundChannel.$__getNewSoundChannel($$this, startTime, loops, sndTransform);
			}

			return $$this.$$Sound.$$play || ($$this.$$Sound.$$play = play);
		}});


		//public instance method
		Object.defineProperty(Sound.prototype, 'close', {
		get:function ()
		{
			var $$this = this;

			function close()
			{
				var soundChannel = $$this.$__soundChannel;
				if (soundChannel)
				{
					soundChannel.stop();
				}
				$$this.$__audioContext = null;
			}

			return $$this.$$Sound.$$close || ($$this.$$Sound.$$close = close);
		}});


		//public instance method
		Object.defineProperty(Sound.prototype, 'extract', {
		get:function ()
		{
			var $$this = this;

			function extract($$$$target, $$$$length, $$$$startPosition)
			{
				//set default parameter values
				var target = $es4.$$coerce($$$$target, ByteArray);
				var length = $es4.$$coerce($$$$length, Number);
				var startPosition = (2 > arguments.length - 1) ? -1 : $es4.$$coerce($$$$startPosition, Number);

				throw $es4.$$primitive(new Error('Sound: attempted call to an unimplemented function "extract"'));
			}

			return $$this.$$Sound.$$extract || ($$this.$$Sound.$$extract = extract);
		}});


		//public instance method
		Object.defineProperty(Sound.prototype, 'loadCompressedDataFromByteArray', {
		get:function ()
		{
			var $$this = this;

			function loadCompressedDataFromByteArray($$$$byteArray, $$$$bytesLength)
			{
				//set default parameter values
				var byteArray = $es4.$$coerce($$$$byteArray, ByteArray);
				var bytesLength = $es4.$$coerce($$$$bytesLength, uint);

				var arrayBuffer = byteArray.$__getArrayBuffer();
				if (window.AudioContext !== undefined || window.webkitAudioContext !== undefined)
				{
					var audioContext = Browser.getNewAudioContext();
					if (audioContext)
					{
						$$this.$__waitForAudioSourceBuffer = true;
						$$this.$__audioContext = audioContext;
						audioContext.decodeAudioData(arrayBuffer, function ($$$$buffer) 
{
					//set default parameter values
					var buffer = $$$$buffer;

	$$this.$__audioSourceBuffer = buffer;
	$$this.$_duration = buffer.duration * 1000;
	var callback = null;
	if ($es4.$$is($$this.$__waitForAudioSourceBuffer, Function))
	{
		callback = $es4.$$coerce($$this.$__waitForAudioSourceBuffer, Function);
	}
	$$this.$__waitForAudioSourceBuffer = false;
	if (callback !== null)
	{
		callback();
	}
}
, function ($$$$error) 
{
					//set default parameter values
					var error = $$$$error;

	trace("error decoding Audio Data: " + error);
}
);
						return;
					}
				}
				$$this.$$Sound.calculateDuration(arrayBuffer);
				var bytes = Browser.getNewUint8Array(arrayBuffer);
				var binary = '';
				var length = $es4.$$coerce(bytes.byteLength, Number);
				if (length != bytesLength)
				{
					throw $es4.$$primitive(new Error('Sound: loadCompressedDataFromByteArray does not support a bytesLength value that differs from the ByteArray length at this time'));
				}
				for (var i = 0; i < length; i++)
				{
					binary += String.fromCharCode(bytes[i]);
				}
				$$this.$__base64String = 'data:audio/mp3;base64,' + window.btoa(binary);
			}

			return $$this.$$Sound.$$loadCompressedDataFromByteArray || ($$this.$$Sound.$$loadCompressedDataFromByteArray = loadCompressedDataFromByteArray);
		}});


		//public instance method
		Object.defineProperty(Sound.prototype, 'loadPCMFromByteArray', {
		get:function ()
		{
			var $$this = this;

			function loadPCMFromByteArray($$$$bytes, $$$$samples, $$$$format, $$$$stereo, $$$$sampleRate)
			{
				//set default parameter values
				var bytes = $es4.$$coerce($$$$bytes, ByteArray);
				var samples = $es4.$$coerce($$$$samples, uint);
				var format = (2 > arguments.length - 1) ? "float" : $es4.$$coerce($$$$format, String);
				var stereo = (3 > arguments.length - 1) ? true : $es4.$$coerce($$$$stereo, Boolean);
				var sampleRate = (4 > arguments.length - 1) ? 44100 : $es4.$$coerce($$$$sampleRate, Number);

				throw $es4.$$primitive(new Error('Sound: attempted call to an unimplemented function "loadPCMFromByteArray"'));
			}

			return $$this.$$Sound.$$loadPCMFromByteArray || ($$this.$$Sound.$$loadPCMFromByteArray = loadPCMFromByteArray);
		}});

		Object.defineProperty(Sound.prototype, 'bytesLoaded', {get:function ()
		{
			var $$this = this;
			return $$this.$_bytesLoaded;
		}});
		Object.defineProperty(Sound.prototype, 'bytesTotal', {get:function ()
		{
			var $$this = this;
			return $$this.$_bytesTotal;
		}});
		Object.defineProperty(Sound.prototype, 'url', {get:function ()
		{
			var $$this = this;
			return $$this.$_stream.url;
		}});
		Object.defineProperty(Sound.prototype, 'id3', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('Sound: attempted call to an unimplemented function "id3"'));
		}});
		Object.defineProperty(Sound.prototype, 'isBuffering', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('Sound: attempted call to an unimplemented function "isBuffering"'));
		}});
		Object.defineProperty(Sound.prototype, 'isURLInaccessible', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('Sound: attempted call to an unimplemented function "isURLInaccessible"'));
		}});
		Object.defineProperty(Sound.prototype, 'length', {get:function ()
		{
			var $$this = this;
			return $$this.$_duration;
		}});

		//properties
		Object.defineProperty(Sound.prototype, '$_xmlHttpRequest', {
		get:function () { var $$this = this; return $$this.$$Sound.$_xmlHttpRequest; },
		set:function (value) { var $$this = this; $$this.$$Sound.$_xmlHttpRequest = $es4.$$coerce(value, Object); }
		});

		Object.defineProperty(Sound.prototype, '$_stream', {
		get:function () { var $$this = this; return $$this.$$Sound.$_stream; },
		set:function (value) { var $$this = this; $$this.$$Sound.$_stream = $es4.$$coerce(value, URLRequest); }
		});

		Object.defineProperty(Sound.prototype, '$_bytesLoaded', {
		get:function () { var $$this = this; return $$this.$$Sound.$_bytesLoaded; },
		set:function (value) { var $$this = this; $$this.$$Sound.$_bytesLoaded = $es4.$$coerce(value, uint); }
		});

		Object.defineProperty(Sound.prototype, '$_bytesTotal', {
		get:function () { var $$this = this; return $$this.$$Sound.$_bytesTotal; },
		set:function (value) { var $$this = this; $$this.$$Sound.$_bytesTotal = $es4.$$coerce(value, int); }
		});

		Object.defineProperty(Sound.prototype, '$_duration', {
		get:function () { var $$this = this; return $$this.$$Sound.$_duration; },
		set:function (value) { var $$this = this; $$this.$$Sound.$_duration = $es4.$$coerce(value, Number); }
		});

		Object.defineProperty(Sound.prototype, '$__soundChannel', {
		get:function () { var $$this = this; return $$this.$$Sound.$__soundChannel; },
		set:function (value) { var $$this = this; $$this.$$Sound.$__soundChannel = $es4.$$coerce(value, SoundChannel); }
		});

		Object.defineProperty(Sound.prototype, '$__audioContext', {
		get:function () { var $$this = this; return $$this.$$Sound.$__audioContext; },
		set:function (value) { var $$this = this; $$this.$$Sound.$__audioContext = $es4.$$coerce(value, Object); }
		});

		Object.defineProperty(Sound.prototype, '$__audioSourceBuffer', {
		get:function () { var $$this = this; return $$this.$$Sound.$__audioSourceBuffer; },
		set:function (value) { var $$this = this; $$this.$$Sound.$__audioSourceBuffer = $es4.$$coerce(value, Object); }
		});

		Object.defineProperty(Sound.prototype, '$__base64String', {
		get:function () { var $$this = this; return $$this.$$Sound.$__base64String; },
		set:function (value) { var $$this = this; $$this.$$Sound.$__base64String = $es4.$$coerce(value, String); }
		});

		Object.defineProperty(Sound.prototype, '$__waitForAudioSourceBuffer', {
		get:function () { var $$this = this; return $$this.$$Sound.$__waitForAudioSourceBuffer; },
		set:function (value) { var $$this = this; $$this.$$Sound.$__waitForAudioSourceBuffer = value }
		});

	});

	//class initializer
	Sound.$$cinit = (function ()
	{
		Sound.$$cinit = undefined;
	});

	function Sound()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof Sound) || $$this.$$Sound !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Sound) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			Sound.$$construct($$this, $$args);
		}
	}

	//construct
	Sound.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (Sound.$$cinit !== undefined) Sound.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$Sound', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//private instance method
		Object.defineProperty($$this.$$Sound, 'calculateDuration', Sound.prototype.$$v.calculateDuration);

		//private instance method
		Object.defineProperty($$this.$$Sound, 'onDecodeAudioDataSuccess', Sound.prototype.$$v.onDecodeAudioDataSuccess);

		//private instance method
		Object.defineProperty($$this.$$Sound, 'onDecodeAudioDataFailure', Sound.prototype.$$v.onDecodeAudioDataFailure);

		//call construct on super
		EventDispatcher.$$construct($$this);

		//initialize properties
		Sound.$$iinit($$this);

		//call constructor
		if (args !== undefined) Sound.$$constructor.apply($$this, args);
	});

	//initializer
	Sound.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$Sound.$_xmlHttpRequest = $es4.$$coerce(undefined, Object);
		$$this.$$Sound.$_stream = $es4.$$coerce(undefined, URLRequest);
		$$this.$$Sound.$_bytesLoaded = $es4.$$coerce(0, uint);
		$$this.$$Sound.$_bytesTotal = $es4.$$coerce(0, int);
		$$this.$$Sound.$_duration = $es4.$$coerce(0, Number);
		$$this.$$Sound.$__soundChannel = $es4.$$coerce(undefined, SoundChannel);
		$$this.$$Sound.$__audioContext = $es4.$$coerce(undefined, Object);
		$$this.$$Sound.$__audioSourceBuffer = $es4.$$coerce(undefined, Object);
		$$this.$$Sound.$__base64String = $es4.$$coerce(undefined, String);
		$$this.$$Sound.$__waitForAudioSourceBuffer = false;
	
		//call iinit on super
		EventDispatcher.$$iinit($$this);
	});

	//constructor
	Sound.$$constructor = (function ($$$$stream, $$$$context)
	{
		var $$this = this;
		//set default parameter values
		var stream = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$stream, URLRequest);
		var context = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$context, SoundLoaderContext);

		EventDispatcher.$$constructor.call($$this);
		if (stream)
		{
			$$this.load(stream, context);
		}
	});

	return $es4.$$class(Sound, {EXTENDS:'flash.events.EventDispatcher'}, 'flash.media::Sound');
})();
//flash.media.Sound


//flash.display3D.Context3D
$es4.$$package('flash.display3D').Context3D = function () { throw new Error('Use of unimplemented class: Context3D'); }
//flash.display3D.Context3D


//flash.errors.EOFError
$es4.$$package('flash.errors').EOFError = function () { throw new Error('Use of unimplemented class: EOFError'); }
//flash.errors.EOFError


//flash.net.Socket
$es4.$$package('flash.net').Socket = (function ()
{
	//imports
	var IOError;
	var Event;
	var EventDispatcher;
	var IOErrorEvent;
	var ProgressEvent;
	var SecurityErrorEvent;
	var ByteArray;
	var Endian;
	var IDataInput;
	var IDataOutput;
	var clearInterval;
	var getTimer;
	var setInterval;
	var ObjectEncoding;

	//class pre initializer
	Socket.$$sinit = (function ()
	{
		Socket.$$sinit = undefined;

		//initialize imports
		IOError = $es4.$$['flash.errors'].IOError;
		Event = $es4.$$['flash.events'].Event;
		EventDispatcher = $es4.$$['flash.events'].EventDispatcher;
		IOErrorEvent = $es4.$$['flash.events'].IOErrorEvent;
		ProgressEvent = $es4.$$['flash.events'].ProgressEvent;
		SecurityErrorEvent = $es4.$$['flash.events'].SecurityErrorEvent;
		ByteArray = $es4.$$['flash.utils'].ByteArray;
		Endian = $es4.$$['flash.utils'].Endian;
		IDataInput = $es4.$$['flash.utils'].IDataInput;
		IDataOutput = $es4.$$['flash.utils'].IDataOutput;
		clearInterval = $es4.$$['flash.utils'].clearInterval;
		getTimer = $es4.$$['flash.utils'].getTimer;
		setInterval = $es4.$$['flash.utils'].setInterval;
		ObjectEncoding = $es4.$$['flash.net'].ObjectEncoding;

		//ensure $$sinit is called on super class
		if (EventDispatcher.$$sinit !== undefined) EventDispatcher.$$sinit();

		//set prototype and constructor
		Socket.prototype = Object.create(EventDispatcher.prototype);
		Object.defineProperty(Socket.prototype, "constructor", { value: Socket, enumerable: false });

		//hold private values
		Object.defineProperty(Socket.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(Socket.prototype, 'connect', {
		get:function ()
		{
			var $$this = this;

			function connect($$$$host, $$$$port)
			{
				//set default parameter values
				var host = $es4.$$coerce($$$$host, String);
				var port = $es4.$$coerce($$$$port, int);

				if ($$this.$$Socket._socket)
				{
					throw $es4.$$primitive(new Error('socket connect already called'));
				}
				if ($$this.$$Socket._intervalID)
				{
					throw $es4.$$primitive(new Error('failed to close interval'));
				}
				$$this.$$Socket._writeByteArray = $es4.$$primitive(new ByteArray());
				$$this.$$Socket._writeByteArray.endian = $$this.$$Socket._endian;
				$$this.$$Socket._readByteArray = $es4.$$primitive(new ByteArray());
				$$this.$$Socket._readByteArray.endian = $$this.$$Socket._endian;
				$$this.$$Socket._connectStartTime = getTimer();
				$$this.$$Socket._intervalID = setInterval($$this.$$Socket.updateProgress, 50);
				var uri = window.URI(host);
				uri.port(port);
				if (!uri.protocol() || uri.protocol() === 'http')
				{
					uri.protocol('ws');
				}
				if (uri.protocol() === 'https')
				{
					uri.protocol('wss');
				}
				$$this.$$Socket._socket = $es4.$$primitive(new window.WebSocket(uri.toString()));
				$$this.$$Socket._socket.binaryType = 'arraybuffer';
				$$this.$$Socket._socket.onopen = function ($$$$event) 
{
					//set default parameter values
					var event = $es4.$$coerce($$$$event, Object);

	$$this.$$Socket._socket.onopen = null;
	clearInterval($$this.$$Socket._intervalID);
	$$this.$$Socket._intervalID = 0;
	$$this.$$Socket._connected = true;
	$$this.dispatchEvent($es4.$$primitive(new Event(Event.CONNECT)));
}
;
				$$this.$$Socket._socket.onerror = function ($$$$event) 
{
					//set default parameter values
					var event = $es4.$$coerce($$$$event, Object);

	if ($$this.$$Socket._connected)
	{
		$$this.dispatchEvent($es4.$$primitive(new SecurityErrorEvent(SecurityErrorEvent.SECURITY_ERROR, false, false, "SOCKET could not connect to server.")));
	}
	else
	{
		$$this.dispatchEvent($es4.$$primitive(new IOErrorEvent(IOErrorEvent.IO_ERROR, false, false, "SOCKET trouble sending and or receiving data.")));
	}
}
;
				$$this.$$Socket._socket.onmessage = function ($$$$event) 
{
					//set default parameter values
					var event = $es4.$$coerce($$$$event, Object);

	var byteArray = $es4.$$primitive(new ByteArray());
	byteArray.$__setArrayBuffer(event.data);
	var readByteArray = $es4.$$primitive(new ByteArray());
	readByteArray.writeBytes($$this.$$Socket._readByteArray, $$this.$$Socket._readByteArray.position);
	readByteArray.writeBytes(byteArray);
	readByteArray.position = 0;
	$$this.$$Socket._readByteArray = readByteArray;
	$$this.dispatchEvent($es4.$$primitive(new ProgressEvent(ProgressEvent.SOCKET_DATA, false, false, byteArray.bytesAvailable)));
}
;
				$$this.$$Socket._socket.onclose = function ($$$$event) 
{
					//set default parameter values
					var event = $es4.$$coerce($$$$event, Object);

	$$this.close();
	$$this.dispatchEvent($es4.$$primitive(new Event(Event.CLOSE)));
}
;
			}

			return $$this.$$Socket.$$connect || ($$this.$$Socket.$$connect = connect);
		}});


		//public instance method
		Object.defineProperty(Socket.prototype, 'flush', {
		get:function ()
		{
			var $$this = this;

			function flush()
			{
				if (!$$this.$$Socket._connected)
				{
					throw $es4.$$primitive(new IOError('Socket not open'));
				}
				var arrayBuffer = $$this.$$Socket._writeByteArray.$__getArrayBuffer();
				$$this.$$Socket._writeByteArray = $es4.$$primitive(new ByteArray());
				$$this.$$Socket._writeByteArray.endian = $$this.$$Socket._endian;
				$$this.$$Socket._socket.send(arrayBuffer);
			}

			return $$this.$$Socket.$$flush || ($$this.$$Socket.$$flush = flush);
		}});


		//private instance method
		Socket.prototype.$$v.updateProgress = {
		get:function ()
		{
			var $$this = this.$$this;

			function updateProgress()
			{
				if (!$$this.$$Socket._socket)
				{
					throw $es4.$$primitive(new Error('no socket'));
				}
				if ($$this.$$Socket._connected)
				{
					throw $es4.$$primitive(new Error('connected'));
				}
				var diff = getTimer() - $$this.$$Socket._connectStartTime;
				if ($$this.$$Socket._timeout > diff)
				{
					return;
				}
				$$this.close();
				throw $es4.$$primitive(new IOError('SOCKET connect timeout'));
			}

			return $$this.$$Socket.$$p.$$updateProgress || ($$this.$$Socket.$$p.$$updateProgress = updateProgress);
		}};


		//public instance method
		Object.defineProperty(Socket.prototype, 'close', {
		get:function ()
		{
			var $$this = this;

			function close()
			{
				if (!$$this.$$Socket._socket)
				{
					throw $es4.$$primitive(new IOError('socket was not open'));
				}
				$$this.$$Socket._connected = false;
				$$this.$$Socket._writeByteArray = null;
				$$this.$$Socket._readByteArray = null;
				$$this.$$Socket._connectStartTime = 0;
				if ($$this.$$Socket._intervalID)
				{
					clearInterval($$this.$$Socket._intervalID);
					$$this.$$Socket._intervalID = 0;
				}
				$$this.$$Socket._socket.onopen = null;
				$$this.$$Socket._socket.onerror = null;
				$$this.$$Socket._socket.onmessage = null;
				$$this.$$Socket._socket.onclose = null;
				$$this.$$Socket._socket.close();
				$$this.$$Socket._socket = null;
			}

			return $$this.$$Socket.$$close || ($$this.$$Socket.$$close = close);
		}});


		//public instance method
		Object.defineProperty(Socket.prototype, 'readBoolean', {
		get:function ()
		{
			var $$this = this;

			function readBoolean()
			{
				return $$this.$$Socket._readByteArray.readBoolean();
			}

			return $$this.$$Socket.$$readBoolean || ($$this.$$Socket.$$readBoolean = readBoolean);
		}});


		//public instance method
		Object.defineProperty(Socket.prototype, 'readByte', {
		get:function ()
		{
			var $$this = this;

			function readByte()
			{
				return $$this.$$Socket._readByteArray.readByte();
			}

			return $$this.$$Socket.$$readByte || ($$this.$$Socket.$$readByte = readByte);
		}});


		//public instance method
		Object.defineProperty(Socket.prototype, 'readBytes', {
		get:function ()
		{
			var $$this = this;

			function readBytes($$$$bytes, $$$$offset, $$$$length)
			{
				//set default parameter values
				var bytes = $es4.$$coerce($$$$bytes, ByteArray);
				var offset = (1 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$offset, uint);
				var length = (2 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$length, uint);

				return $$this.$$Socket._readByteArray.readBytes(bytes, offset, length);
			}

			return $$this.$$Socket.$$readBytes || ($$this.$$Socket.$$readBytes = readBytes);
		}});


		//public instance method
		Object.defineProperty(Socket.prototype, 'readDouble', {
		get:function ()
		{
			var $$this = this;

			function readDouble()
			{
				return $$this.$$Socket._readByteArray.readDouble();
			}

			return $$this.$$Socket.$$readDouble || ($$this.$$Socket.$$readDouble = readDouble);
		}});


		//public instance method
		Object.defineProperty(Socket.prototype, 'readFloat', {
		get:function ()
		{
			var $$this = this;

			function readFloat()
			{
				return $$this.$$Socket._readByteArray.readFloat();
			}

			return $$this.$$Socket.$$readFloat || ($$this.$$Socket.$$readFloat = readFloat);
		}});


		//public instance method
		Object.defineProperty(Socket.prototype, 'readInt', {
		get:function ()
		{
			var $$this = this;

			function readInt()
			{
				return $$this.$$Socket._readByteArray.readInt();
			}

			return $$this.$$Socket.$$readInt || ($$this.$$Socket.$$readInt = readInt);
		}});


		//public instance method
		Object.defineProperty(Socket.prototype, 'readMultiByte', {
		get:function ()
		{
			var $$this = this;

			function readMultiByte($$$$length, $$$$charSet)
			{
				//set default parameter values
				var length = $es4.$$coerce($$$$length, uint);
				var charSet = $es4.$$coerce($$$$charSet, String);

				return $$this.$$Socket._readByteArray.readMultiByte(length, charSet);
			}

			return $$this.$$Socket.$$readMultiByte || ($$this.$$Socket.$$readMultiByte = readMultiByte);
		}});


		//public instance method
		Object.defineProperty(Socket.prototype, 'readObject', {
		get:function ()
		{
			var $$this = this;

			function readObject()
			{
				return $$this.$$Socket._readByteArray.readObject();
			}

			return $$this.$$Socket.$$readObject || ($$this.$$Socket.$$readObject = readObject);
		}});


		//public instance method
		Object.defineProperty(Socket.prototype, 'readShort', {
		get:function ()
		{
			var $$this = this;

			function readShort()
			{
				return $$this.$$Socket._readByteArray.readShort();
			}

			return $$this.$$Socket.$$readShort || ($$this.$$Socket.$$readShort = readShort);
		}});


		//public instance method
		Object.defineProperty(Socket.prototype, 'readUnsignedByte', {
		get:function ()
		{
			var $$this = this;

			function readUnsignedByte()
			{
				return $$this.$$Socket._readByteArray.readUnsignedByte();
			}

			return $$this.$$Socket.$$readUnsignedByte || ($$this.$$Socket.$$readUnsignedByte = readUnsignedByte);
		}});


		//public instance method
		Object.defineProperty(Socket.prototype, 'readUnsignedInt', {
		get:function ()
		{
			var $$this = this;

			function readUnsignedInt()
			{
				return $$this.$$Socket._readByteArray.readUnsignedInt();
			}

			return $$this.$$Socket.$$readUnsignedInt || ($$this.$$Socket.$$readUnsignedInt = readUnsignedInt);
		}});


		//public instance method
		Object.defineProperty(Socket.prototype, 'readUnsignedShort', {
		get:function ()
		{
			var $$this = this;

			function readUnsignedShort()
			{
				return $$this.$$Socket._readByteArray.readUnsignedShort();
			}

			return $$this.$$Socket.$$readUnsignedShort || ($$this.$$Socket.$$readUnsignedShort = readUnsignedShort);
		}});


		//public instance method
		Object.defineProperty(Socket.prototype, 'readUTF', {
		get:function ()
		{
			var $$this = this;

			function readUTF()
			{
				return $$this.$$Socket._readByteArray.readUTF();
			}

			return $$this.$$Socket.$$readUTF || ($$this.$$Socket.$$readUTF = readUTF);
		}});


		//public instance method
		Object.defineProperty(Socket.prototype, 'readUTFBytes', {
		get:function ()
		{
			var $$this = this;

			function readUTFBytes($$$$length)
			{
				//set default parameter values
				var length = $es4.$$coerce($$$$length, uint);

				return $$this.$$Socket._readByteArray.readUTFBytes(length);
			}

			return $$this.$$Socket.$$readUTFBytes || ($$this.$$Socket.$$readUTFBytes = readUTFBytes);
		}});


		//public instance method
		Object.defineProperty(Socket.prototype, 'writeBoolean', {
		get:function ()
		{
			var $$this = this;

			function writeBoolean($$$$value)
			{
				//set default parameter values
				var value = $es4.$$coerce($$$$value, Boolean);

				$$this.$$Socket._writeByteArray.writeBoolean(value);
			}

			return $$this.$$Socket.$$writeBoolean || ($$this.$$Socket.$$writeBoolean = writeBoolean);
		}});


		//public instance method
		Object.defineProperty(Socket.prototype, 'writeByte', {
		get:function ()
		{
			var $$this = this;

			function writeByte($$$$value)
			{
				//set default parameter values
				var value = $es4.$$coerce($$$$value, int);

				$$this.$$Socket._writeByteArray.writeByte(value);
			}

			return $$this.$$Socket.$$writeByte || ($$this.$$Socket.$$writeByte = writeByte);
		}});


		//public instance method
		Object.defineProperty(Socket.prototype, 'writeBytes', {
		get:function ()
		{
			var $$this = this;

			function writeBytes($$$$bytes, $$$$offset, $$$$length)
			{
				//set default parameter values
				var bytes = $es4.$$coerce($$$$bytes, ByteArray);
				var offset = (1 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$offset, uint);
				var length = (2 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$length, uint);

				$$this.$$Socket._writeByteArray.writeBytes(bytes, offset, length);
			}

			return $$this.$$Socket.$$writeBytes || ($$this.$$Socket.$$writeBytes = writeBytes);
		}});


		//public instance method
		Object.defineProperty(Socket.prototype, 'writeDouble', {
		get:function ()
		{
			var $$this = this;

			function writeDouble($$$$value)
			{
				//set default parameter values
				var value = $es4.$$coerce($$$$value, Number);

				$$this.$$Socket._writeByteArray.writeDouble(value);
			}

			return $$this.$$Socket.$$writeDouble || ($$this.$$Socket.$$writeDouble = writeDouble);
		}});


		//public instance method
		Object.defineProperty(Socket.prototype, 'writeFloat', {
		get:function ()
		{
			var $$this = this;

			function writeFloat($$$$value)
			{
				//set default parameter values
				var value = $es4.$$coerce($$$$value, Number);

				$$this.$$Socket._writeByteArray.writeFloat(value);
			}

			return $$this.$$Socket.$$writeFloat || ($$this.$$Socket.$$writeFloat = writeFloat);
		}});


		//public instance method
		Object.defineProperty(Socket.prototype, 'writeInt', {
		get:function ()
		{
			var $$this = this;

			function writeInt($$$$value)
			{
				//set default parameter values
				var value = $es4.$$coerce($$$$value, int);

				$$this.$$Socket._writeByteArray.writeInt(value);
			}

			return $$this.$$Socket.$$writeInt || ($$this.$$Socket.$$writeInt = writeInt);
		}});


		//public instance method
		Object.defineProperty(Socket.prototype, 'writeMultiByte', {
		get:function ()
		{
			var $$this = this;

			function writeMultiByte($$$$value, $$$$charSet)
			{
				//set default parameter values
				var value = $es4.$$coerce($$$$value, String);
				var charSet = $es4.$$coerce($$$$charSet, String);

				$$this.$$Socket._writeByteArray.writeMultiByte(value, charSet);
			}

			return $$this.$$Socket.$$writeMultiByte || ($$this.$$Socket.$$writeMultiByte = writeMultiByte);
		}});


		//public instance method
		Object.defineProperty(Socket.prototype, 'writeObject', {
		get:function ()
		{
			var $$this = this;

			function writeObject($$$$object)
			{
				//set default parameter values
				var object = $$$$object;

				$$this.$$Socket._writeByteArray.writeObject(object);
			}

			return $$this.$$Socket.$$writeObject || ($$this.$$Socket.$$writeObject = writeObject);
		}});


		//public instance method
		Object.defineProperty(Socket.prototype, 'writeShort', {
		get:function ()
		{
			var $$this = this;

			function writeShort($$$$value)
			{
				//set default parameter values
				var value = $es4.$$coerce($$$$value, int);

				$$this.$$Socket._writeByteArray.writeShort(value);
			}

			return $$this.$$Socket.$$writeShort || ($$this.$$Socket.$$writeShort = writeShort);
		}});


		//public instance method
		Object.defineProperty(Socket.prototype, 'writeUnsignedInt', {
		get:function ()
		{
			var $$this = this;

			function writeUnsignedInt($$$$value)
			{
				//set default parameter values
				var value = $es4.$$coerce($$$$value, uint);

				$$this.$$Socket._writeByteArray.writeUnsignedInt(value);
			}

			return $$this.$$Socket.$$writeUnsignedInt || ($$this.$$Socket.$$writeUnsignedInt = writeUnsignedInt);
		}});


		//public instance method
		Object.defineProperty(Socket.prototype, 'writeUTF', {
		get:function ()
		{
			var $$this = this;

			function writeUTF($$$$value)
			{
				//set default parameter values
				var value = $es4.$$coerce($$$$value, String);

				$$this.$$Socket._writeByteArray.writeUTF(value);
			}

			return $$this.$$Socket.$$writeUTF || ($$this.$$Socket.$$writeUTF = writeUTF);
		}});


		//public instance method
		Object.defineProperty(Socket.prototype, 'writeUTFBytes', {
		get:function ()
		{
			var $$this = this;

			function writeUTFBytes($$$$value)
			{
				//set default parameter values
				var value = $es4.$$coerce($$$$value, String);

				$$this.$$Socket._writeByteArray.writeUTFBytes(value);
			}

			return $$this.$$Socket.$$writeUTFBytes || ($$this.$$Socket.$$writeUTFBytes = writeUTFBytes);
		}});

		Object.defineProperty(Socket.prototype, 'bytesAvailable', {get:function ()
		{
			var $$this = this;
			return $$this.$$Socket._readByteArray.bytesAvailable;
		}});
		Object.defineProperty(Socket.prototype, 'bytesPending', {get:function ()
		{
			var $$this = this;
			return $$this.$$Socket._writeByteArray.bytesAvailable;
		}});
		Object.defineProperty(Socket.prototype, 'connected', {get:function ()
		{
			var $$this = this;
			return $$this.$$Socket._connected;
		}});
		Object.defineProperty(Socket.prototype, 'endian', {get:function ()
		{
			var $$this = this;
			return $$this.$$Socket._endian;
		}, set:function ($$$$type)
		{
			//set default parameter values
			var type = $es4.$$coerce($$$$type, String);

			var $$this = this;
			if ($$this.$$Socket._socket)
			{
				$$this.$$Socket._writeByteArray.endian = type;
				$$this.$$Socket._readByteArray.endian = type;
			}
			$$this.$$Socket._endian = type;
		}});
		Object.defineProperty(Socket.prototype, 'objectEncoding', {get:function ()
		{
			var $$this = this;
			return ObjectEncoding.AMF3;
		}, set:function ($$$$version)
		{
			//set default parameter values
			var version = $es4.$$coerce($$$$version, uint);

			var $$this = this;
			if (version != ObjectEncoding.AMF3)
			{
				throw $es4.$$primitive(new Error('desired object encoding not supported at this time'));
			}
		}});
		Object.defineProperty(Socket.prototype, 'timeout', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$Socket._timeout, uint);
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, uint);

			var $$this = this;
			$$this.$$Socket._timeout = value;
		}});

		//properties
		Socket.prototype.$$v._socket = {
		get:function () { var $$this = this.$$this; return $$this.$$Socket.$$p._socket; },
		set:function (value) { var $$this = this.$$this; $$this.$$Socket.$$p._socket = $es4.$$coerce(value, Object); }
		};

		Socket.prototype.$$v._writeByteArray = {
		get:function () { var $$this = this.$$this; return $$this.$$Socket.$$p._writeByteArray; },
		set:function (value) { var $$this = this.$$this; $$this.$$Socket.$$p._writeByteArray = $es4.$$coerce(value, ByteArray); }
		};

		Socket.prototype.$$v._readByteArray = {
		get:function () { var $$this = this.$$this; return $$this.$$Socket.$$p._readByteArray; },
		set:function (value) { var $$this = this.$$this; $$this.$$Socket.$$p._readByteArray = $es4.$$coerce(value, ByteArray); }
		};

		Socket.prototype.$$v._endian = {
		get:function () { var $$this = this.$$this; return $$this.$$Socket.$$p._endian; },
		set:function (value) { var $$this = this.$$this; $$this.$$Socket.$$p._endian = $es4.$$coerce(value, String); }
		};

		Socket.prototype.$$v._connected = {
		get:function () { var $$this = this.$$this; return $$this.$$Socket.$$p._connected; },
		set:function (value) { var $$this = this.$$this; $$this.$$Socket.$$p._connected = $es4.$$coerce(value, Boolean); }
		};

		Socket.prototype.$$v._connectStartTime = {
		get:function () { var $$this = this.$$this; return $$this.$$Socket.$$p._connectStartTime; },
		set:function (value) { var $$this = this.$$this; $$this.$$Socket.$$p._connectStartTime = $es4.$$coerce(value, int); }
		};

		Socket.prototype.$$v._timeout = {
		get:function () { var $$this = this.$$this; return $$this.$$Socket.$$p._timeout; },
		set:function (value) { var $$this = this.$$this; $$this.$$Socket.$$p._timeout = $es4.$$coerce(value, Number); }
		};

		Socket.prototype.$$v._intervalID = {
		get:function () { var $$this = this.$$this; return $$this.$$Socket.$$p._intervalID; },
		set:function (value) { var $$this = this.$$this; $$this.$$Socket.$$p._intervalID = $es4.$$coerce(value, uint); }
		};

	});

	//class initializer
	Socket.$$cinit = (function ()
	{
		Socket.$$cinit = undefined;
	});

	function Socket()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof Socket) || $$this.$$Socket !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Socket) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			Socket.$$construct($$this, $$args);
		}
	}

	//construct
	Socket.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (Socket.$$cinit !== undefined) Socket.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$Socket', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$Socket, '_socket', Socket.prototype.$$v._socket);
		Object.defineProperty($$this.$$Socket, '_writeByteArray', Socket.prototype.$$v._writeByteArray);
		Object.defineProperty($$this.$$Socket, '_readByteArray', Socket.prototype.$$v._readByteArray);
		Object.defineProperty($$this.$$Socket, '_endian', Socket.prototype.$$v._endian);
		Object.defineProperty($$this.$$Socket, '_connected', Socket.prototype.$$v._connected);
		Object.defineProperty($$this.$$Socket, '_connectStartTime', Socket.prototype.$$v._connectStartTime);
		Object.defineProperty($$this.$$Socket, '_timeout', Socket.prototype.$$v._timeout);
		Object.defineProperty($$this.$$Socket, '_intervalID', Socket.prototype.$$v._intervalID);

		//private instance method
		Object.defineProperty($$this.$$Socket, 'updateProgress', Socket.prototype.$$v.updateProgress);

		//call construct on super
		EventDispatcher.$$construct($$this);

		//initialize properties
		Socket.$$iinit($$this);

		//call constructor
		if (args !== undefined) Socket.$$constructor.apply($$this, args);
	});

	//initializer
	Socket.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$Socket.$$p._socket = $es4.$$coerce(undefined, Object);
		$$this.$$Socket.$$p._writeByteArray = $es4.$$coerce(undefined, ByteArray);
		$$this.$$Socket.$$p._readByteArray = $es4.$$coerce(undefined, ByteArray);
		$$this.$$Socket.$$p._endian = $es4.$$coerce(Endian.BIG_ENDIAN, String);
		$$this.$$Socket.$$p._connected = $es4.$$coerce(false, Boolean);
		$$this.$$Socket.$$p._connectStartTime = $es4.$$coerce(undefined, int);
		$$this.$$Socket.$$p._timeout = $es4.$$coerce(20000, Number);
		$$this.$$Socket.$$p._intervalID = $es4.$$coerce(undefined, uint);
	
		//call iinit on super
		EventDispatcher.$$iinit($$this);
	});

	//constructor
	Socket.$$constructor = (function ($$$$host, $$$$port)
	{
		var $$this = this;
		//set default parameter values
		var host = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$host, String);
		var port = (1 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$port, int);


		EventDispatcher.$$constructor.call($$this);

		if (host !== null)
		{
			$$this.connect(host, port);
		}
	});

	return $es4.$$class(Socket, {EXTENDS:'flash.events.EventDispatcher', IMPLEMENTS:['flash.utils.IDataInput', 'flash.utils.IDataOutput']}, 'flash.net::Socket');
})();
//flash.net.Socket


//flash.display.StageAlign
$es4.$$package('flash.display').StageAlign = (function ()
{
	//properties
	var $$j = {};
	StageAlign.BOTTOM = "B";
	StageAlign.BOTTOM_LEFT = "BL";
	StageAlign.BOTTOM_RIGHT = "BR";
	StageAlign.LEFT = "L";
	StageAlign.RIGHT = "R";
	StageAlign.TOP = "T";
	StageAlign.TOP_LEFT = "TL";
	StageAlign.TOP_RIGHT = "TR";

	//class pre initializer
	StageAlign.$$sinit = (function ()
	{
		StageAlign.$$sinit = undefined;

		//set prototype and constructor
		StageAlign.prototype = Object.create(Object.prototype);
		Object.defineProperty(StageAlign.prototype, "constructor", { value: StageAlign, enumerable: false });

		//hold private values
		Object.defineProperty(StageAlign.prototype, '$$v', {value:{}});
	});

	//class initializer
	StageAlign.$$cinit = (function ()
	{
		StageAlign.$$cinit = undefined;
	});

	function StageAlign()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof StageAlign) || $$this.$$StageAlign !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], StageAlign) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			StageAlign.$$construct($$this, $$args);
		}
	}

	//construct
	StageAlign.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (StageAlign.$$cinit !== undefined) StageAlign.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$StageAlign', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		StageAlign.$$iinit($$this);

		//call constructor
		if (args !== undefined) StageAlign.$$constructor.apply($$this, args);
	});

	//initializer
	StageAlign.$$iinit = (function ($$this)
	{
	});

	//constructor
	StageAlign.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(StageAlign, null, 'flash.display::StageAlign');
})();
//flash.display.StageAlign


//flash.display.CapsStyle
$es4.$$package('flash.display').CapsStyle = (function ()
{
	//properties
	var $$j = {};
	CapsStyle.NONE = "none";
	CapsStyle.ROUND = "round";
	CapsStyle.SQUARE = "square";

	//class pre initializer
	CapsStyle.$$sinit = (function ()
	{
		CapsStyle.$$sinit = undefined;

		//set prototype and constructor
		CapsStyle.prototype = Object.create(Object.prototype);
		Object.defineProperty(CapsStyle.prototype, "constructor", { value: CapsStyle, enumerable: false });

		//hold private values
		Object.defineProperty(CapsStyle.prototype, '$$v', {value:{}});
	});

	//class initializer
	CapsStyle.$$cinit = (function ()
	{
		CapsStyle.$$cinit = undefined;
	});

	function CapsStyle()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof CapsStyle) || $$this.$$CapsStyle !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], CapsStyle) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			CapsStyle.$$construct($$this, $$args);
		}
	}

	//construct
	CapsStyle.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (CapsStyle.$$cinit !== undefined) CapsStyle.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$CapsStyle', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		CapsStyle.$$iinit($$this);

		//call constructor
		if (args !== undefined) CapsStyle.$$constructor.apply($$this, args);
	});

	//initializer
	CapsStyle.$$iinit = (function ($$this)
	{
	});

	//constructor
	CapsStyle.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(CapsStyle, null, 'flash.display::CapsStyle');
})();
//flash.display.CapsStyle


//flash.events.TimerEvent
$es4.$$package('flash.events').TimerEvent = (function ()
{
	//imports
	var TimerEvent;
	var Event;

	//properties
	var $$j = {};
	TimerEvent.TIMER = "timer";
	TimerEvent.TIMER_COMPLETE = "timerComplete";

	//class pre initializer
	TimerEvent.$$sinit = (function ()
	{
		TimerEvent.$$sinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;

		//ensure $$sinit is called on super class
		if (Event.$$sinit !== undefined) Event.$$sinit();

		//set prototype and constructor
		TimerEvent.prototype = Object.create(Event.prototype);
		Object.defineProperty(TimerEvent.prototype, "constructor", { value: TimerEvent, enumerable: false });

		//hold private values
		Object.defineProperty(TimerEvent.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(TimerEvent.prototype, 'clone', {
		get:function ()
		{
			var $$this = this;

			function clone()
			{
				return $es4.$$coerce($es4.$$primitive(new TimerEvent($$this.type, $$this.bubbles, $$this.cancelable)), Event);
			}

			return $$this.$$TimerEvent.$$clone || ($$this.$$TimerEvent.$$clone = clone);
		}});


		//public instance method
		Object.defineProperty(TimerEvent.prototype, 'toString', {
		get:function ()
		{
			var $$this = this;

			function toString()
			{
				throw $es4.$$primitive(new Error('TimerEvent: attempted call to an unimplemented function "toString"'));
			}

			return $$this.$$TimerEvent.$$toString || ($$this.$$TimerEvent.$$toString = toString);
		}});


		//public instance method
		Object.defineProperty(TimerEvent.prototype, 'updateAfterEvent', {
		get:function ()
		{
			var $$this = this;

			function updateAfterEvent()
			{
				throw $es4.$$primitive(new Error('TimerEvent: attempted call to an unimplemented function "updateAfterEvent"'));
			}

			return $$this.$$TimerEvent.$$updateAfterEvent || ($$this.$$TimerEvent.$$updateAfterEvent = updateAfterEvent);
		}});
	});

	//class initializer
	TimerEvent.$$cinit = (function ()
	{
		TimerEvent.$$cinit = undefined;
	});

	function TimerEvent()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof TimerEvent) || $$this.$$TimerEvent !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], TimerEvent) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			TimerEvent.$$construct($$this, $$args);
		}
	}

	//construct
	TimerEvent.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (TimerEvent.$$cinit !== undefined) TimerEvent.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$TimerEvent', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//call construct on super
		Event.$$construct($$this);

		//initialize properties
		TimerEvent.$$iinit($$this);

		//call constructor
		if (args !== undefined) TimerEvent.$$constructor.apply($$this, args);
	});

	//initializer
	TimerEvent.$$iinit = (function ($$this)
	{
		//call iinit on super
		Event.$$iinit($$this);
	});

	//constructor
	TimerEvent.$$constructor = (function ($$$$type, $$$$bubbles, $$$$cancelable)
	{
		var $$this = this;
		//set default parameter values
		var type = $es4.$$coerce($$$$type, String);
		var bubbles = (1 > arguments.length - 1) ? false : $es4.$$coerce($$$$bubbles, Boolean);
		var cancelable = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$cancelable, Boolean);

		Event.$$constructor.call($$this, type, bubbles, cancelable);
	});

	return $es4.$$class(TimerEvent, {EXTENDS:'flash.events.Event'}, 'flash.events::TimerEvent');
})();
//flash.events.TimerEvent


//flash.globalization.DateTimeStyle
$es4.$$package('flash.globalization').DateTimeStyle = function () { throw new Error('Use of unimplemented class: DateTimeStyle'); }
//flash.globalization.DateTimeStyle


//flash.globalization.StringTools
$es4.$$package('flash.globalization').StringTools = function () { throw new Error('Use of unimplemented class: StringTools'); }
//flash.globalization.StringTools


//flash.events.AsyncErrorEvent
$es4.$$package('flash.events').AsyncErrorEvent = (function ()
{
	//imports
	var Event;
	var AsyncErrorEvent;
	var ErrorEvent;

	//properties
	var $$j = {};
	AsyncErrorEvent.ASYNC_ERROR = "asyncError";

	//class pre initializer
	AsyncErrorEvent.$$sinit = (function ()
	{
		AsyncErrorEvent.$$sinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;
		ErrorEvent = $es4.$$['flash.events'].ErrorEvent;

		//ensure $$sinit is called on super class
		if (ErrorEvent.$$sinit !== undefined) ErrorEvent.$$sinit();

		//set prototype and constructor
		AsyncErrorEvent.prototype = Object.create(ErrorEvent.prototype);
		Object.defineProperty(AsyncErrorEvent.prototype, "constructor", { value: AsyncErrorEvent, enumerable: false });

		//hold private values
		Object.defineProperty(AsyncErrorEvent.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(AsyncErrorEvent.prototype, 'clone', {
		get:function ()
		{
			var $$this = this;

			function clone()
			{
				return $es4.$$coerce($es4.$$primitive(new AsyncErrorEvent($$this.type, $$this.bubbles, $$this.cancelable, $$this.text, $$this.error)), Event);
			}

			return $$this.$$AsyncErrorEvent.$$clone || ($$this.$$AsyncErrorEvent.$$clone = clone);
		}});


		//public instance method
		Object.defineProperty(AsyncErrorEvent.prototype, 'toString', {
		get:function ()
		{
			var $$this = this;

			function toString()
			{
				return $$this.formatToString('AsyncErrorEvent', 'type', 'bubbles', 'cancelable', 'text', 'error');
			}

			return $$this.$$AsyncErrorEvent.$$toString || ($$this.$$AsyncErrorEvent.$$toString = toString);
		}});

		//properties
		Object.defineProperty(AsyncErrorEvent.prototype, 'error', {
		get:function () { var $$this = this; return $$this.$$AsyncErrorEvent.error; },
		set:function (value) { var $$this = this; $$this.$$AsyncErrorEvent.error = $es4.$$coerce(value, Error); }
		});

	});

	//class initializer
	AsyncErrorEvent.$$cinit = (function ()
	{
		AsyncErrorEvent.$$cinit = undefined;
	});

	function AsyncErrorEvent()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof AsyncErrorEvent) || $$this.$$AsyncErrorEvent !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], AsyncErrorEvent) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			AsyncErrorEvent.$$construct($$this, $$args);
		}
	}

	//construct
	AsyncErrorEvent.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (AsyncErrorEvent.$$cinit !== undefined) AsyncErrorEvent.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$AsyncErrorEvent', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//call construct on super
		ErrorEvent.$$construct($$this);

		//initialize properties
		AsyncErrorEvent.$$iinit($$this);

		//call constructor
		if (args !== undefined) AsyncErrorEvent.$$constructor.apply($$this, args);
	});

	//initializer
	AsyncErrorEvent.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$AsyncErrorEvent.error = $es4.$$coerce(undefined, Error);
	
		//call iinit on super
		ErrorEvent.$$iinit($$this);
	});

	//constructor
	AsyncErrorEvent.$$constructor = (function ($$$$type, $$$$bubbles, $$$$cancelable, $$$$text, $$$$error)
	{
		var $$this = this;
		//set default parameter values
		var type = $es4.$$coerce($$$$type, String);
		var bubbles = (1 > arguments.length - 1) ? false : $es4.$$coerce($$$$bubbles, Boolean);
		var cancelable = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$cancelable, Boolean);
		var text = (3 > arguments.length - 1) ? "" : $es4.$$coerce($$$$text, String);
		var error = (4 > arguments.length - 1) ? null : $es4.$$coerce($$$$error, Error);

		ErrorEvent.$$constructor.call($$this, type, bubbles, cancelable, text, (error) ? error.errorID : 0);
		$$this.error = error;
	});

	return $es4.$$class(AsyncErrorEvent, {EXTENDS:'flash.events.ErrorEvent'}, 'flash.events::AsyncErrorEvent');
})();
//flash.events.AsyncErrorEvent


//flash.display.GraphicsPath
$es4.$$package('flash.display').GraphicsPath = function () { throw new Error('Use of unimplemented class: GraphicsPath'); }
//flash.display.GraphicsPath


//flash.text.engine.FontLookup
$es4.$$package('flash.text.engine').FontLookup = function () { throw new Error('Use of unimplemented class: FontLookup'); }
//flash.text.engine.FontLookup


//flash.text.engine.FontDescription
$es4.$$package('flash.text.engine').FontDescription = function () { throw new Error('Use of unimplemented class: FontDescription'); }
//flash.text.engine.FontDescription


//flash.sampler.NewObjectSample
$es4.$$package('flash.sampler').NewObjectSample = function () { throw new Error('Use of unimplemented class: NewObjectSample'); }
//flash.sampler.NewObjectSample


//flash.events.Event
$es4.$$package('flash.events').Event = (function ()
{
	//imports
	var Event;

	//properties
	var $$j = {};
	Event.ACTIVATE = "activate";
	Event.ADDED = "added";
	Event.ADDED_TO_STAGE = "addedToStage";
	Event.CANCEL = "cancel";
	Event.CHANGE = "change";
	Event.CLEAR = "clear";
	Event.CLOSE = "close";
	Event.COMPLETE = "complete";
	Event.CONNECT = "connect";
	Event.COPY = "copy";
	Event.CUT = "cut";
	Event.DEACTIVATE = "deactivate";
	Event.ENTER_FRAME = "enterFrame";
	Event.EXIT_FRAME = "exitFrame";
	Event.FRAME_CONSTRUCTED = "frameConstructed";
	Event.FULLSCREEN = "fullScreen";
	Event.ID3 = "id3";
	Event.INIT = "init";
	Event.MOUSE_LEAVE = "mouseLeave";
	Event.OPEN = "open";
	Event.PASTE = "paste";
	Event.REMOVED = "removed";
	Event.REMOVED_FROM_STAGE = "removedFromStage";
	Event.RENDER = "render";
	Event.RESIZE = "resize";
	Event.SCROLL = "scroll";
	Event.SELECT = "select";
	Event.SELECT_ALL = "selectAll";
	Event.SOUND_COMPLETE = "soundComplete";
	Event.TAB_CHILDREN_CHANGE = "tabChildrenChange";
	Event.TAB_ENABLED_CHANGE = "tabEnabledChange";
	Event.TAB_INDEX_CHANGE = "tabIndexChange";
	Event.TEXT_INTERACTION_MODE_CHANGE = "textInteractionModeChange";
	Event.UNLOAD = "unload";

	//class pre initializer
	Event.$$sinit = (function ()
	{
		Event.$$sinit = undefined;

		//initialize imports
		//set prototype and constructor
		Event.prototype = Object.create(Object.prototype);
		Object.defineProperty(Event.prototype, "constructor", { value: Event, enumerable: false });

		//hold private values
		Object.defineProperty(Event.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(Event.prototype, '$__properties', {
		get:function ()
		{
			var $$this = this;

			function $__properties($$$$object)
			{
				//set default parameter values
				var object = (0 > arguments.length - 1) ? null : $$$$object;

				if ($$this.$$Event.$_properties === undefined)
				{
					object.EventScope = {$_target:null, $_currentTarget:null, $_eventPhase:null, $_withTarget:Event.$_withTarget, $_originalTarget:null};
					object.TLScope = $$this;
					return $$this.$$Event.$_properties = object;
				}
				return $$this.$$Event.$_properties;
			}

			return $$this.$$Event.$$$__properties || ($$this.$$Event.$$$__properties = $__properties);
		}});


		//public instance method
		Object.defineProperty(Event.prototype, 'clone', {
		get:function ()
		{
			var $$this = this;

			function clone()
			{
				return $es4.$$coerce($es4.$$primitive(new Event($$this.$$Event.$_properties.EventScope.$_type, $$this.$$Event.$_properties.EventScope.$_bubbles, $$this.$$Event.$_properties.EventScope.$_cancelable)), $es4.$$['flash.events'].Event);
			}

			return $$this.$$Event.$$clone || ($$this.$$Event.$$clone = clone);
		}});


		//public instance method
		Object.defineProperty(Event.prototype, 'formatToString', {
		get:function ()
		{
			var $$this = this;

			function formatToString($$$$className, $$$$args)
			{
				//set default parameter values
				var className = $es4.$$coerce($$$$className, String);
				for (var $$i = 1, $$length = arguments.length, args = new Array($$length - 1); $$i < $$length; $$i += 1) args[$$i - 1] = arguments[$$i];

				var str = '[' + className;
				for (var i = 0; i < args.length; i++)
				{
					str += ' ' + args[i] + '="' + $$this[args[i]] + '"';
				}
				str += ']';
				return str;
			}

			return $$this.$$Event.$$formatToString || ($$this.$$Event.$$formatToString = formatToString);
		}});


		//public instance method
		Object.defineProperty(Event.prototype, 'isDefaultPrevented', {
		get:function ()
		{
			var $$this = this;

			function isDefaultPrevented()
			{
				return $es4.$$coerce($$this.$$Event.$_properties.EventScope.$_defaultPrevented, Boolean);
			}

			return $$this.$$Event.$$isDefaultPrevented || ($$this.$$Event.$$isDefaultPrevented = isDefaultPrevented);
		}});


		//public instance method
		Object.defineProperty(Event.prototype, 'preventDefault', {
		get:function ()
		{
			var $$this = this;

			function preventDefault()
			{
				if ($$this.$$Event.$_properties.EventScope.$_cancelable)
				{
					$$this.$$Event.$_properties.EventScope.$_defaultPrevented = true;
				}
			}

			return $$this.$$Event.$$preventDefault || ($$this.$$Event.$$preventDefault = preventDefault);
		}});


		//public instance method
		Object.defineProperty(Event.prototype, 'stopImmediatePropagation', {
		get:function ()
		{
			var $$this = this;

			function stopImmediatePropagation()
			{
				$$this.$$Event.$_properties.EventScope.$_immediatePropagationStopped = true;
			}

			return $$this.$$Event.$$stopImmediatePropagation || ($$this.$$Event.$$stopImmediatePropagation = stopImmediatePropagation);
		}});


		//public instance method
		Object.defineProperty(Event.prototype, 'stopPropagation', {
		get:function ()
		{
			var $$this = this;

			function stopPropagation()
			{
				$$this.$$Event.$_properties.EventScope.$_propagationStopped = true;
			}

			return $$this.$$Event.$$stopPropagation || ($$this.$$Event.$$stopPropagation = stopPropagation);
		}});


		//public instance method
		Object.defineProperty(Event.prototype, 'toString', {
		get:function ()
		{
			var $$this = this;

			function toString()
			{
				return $$this.formatToString('Event', 'type', 'bubbles', 'cancelable');
			}

			return $$this.$$Event.$$toString || ($$this.$$Event.$$toString = toString);
		}});

		Object.defineProperty(Event.prototype, 'bubbles', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$Event.$_properties.EventScope.$_bubbles, Boolean);
		}});
		Object.defineProperty(Event.prototype, 'cancelable', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$Event.$_properties.EventScope.$_cancelable, Boolean);
		}});
		Object.defineProperty(Event.prototype, 'currentTarget', {get:function ()
		{
			var $$this = this;
			return $$this.$$Event.$_properties.EventScope.$_currentTarget;
		}});
		Object.defineProperty(Event.prototype, 'eventPhase', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$Event.$_properties.EventScope.$_eventPhase, uint);
		}});
		Object.defineProperty(Event.prototype, 'target', {get:function ()
		{
			var $$this = this;
			return $$this.$$Event.$_properties.EventScope.$_target;
		}});
		Object.defineProperty(Event.prototype, 'type', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$Event.$_properties.EventScope.$_type, String);
		}});

		//properties
		Event.prototype.$$v.$_properties = {
		get:function () { var $$this = this.$$this; return $$this.$$Event.$$p.$_properties; },
		set:function (value) { var $$this = this.$$this; $$this.$$Event.$$p.$_properties = value }
		};

	});

	//class initializer
	Event.$$cinit = (function ()
	{
		Event.$$cinit = undefined;
	});

	//private static method
	Event.$_withTarget = (function ($$$$event, $$$$target)
	{
		if (Event.$$cinit !== undefined) Event.$$cinit();

		//set default parameter values
		var event = $es4.$$coerce($$$$event, $es4.$$['flash.events'].Event);
		var target = $es4.$$coerce($$$$target, Object);

		var properties = event.$__properties();
		event = properties.EventScope.$_target ? event.clone() : event;
		event.$__properties().EventScope.$_target = target;
		return event;
	});
	function Event()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof Event) || $$this.$$Event !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Event) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			Event.$$construct($$this, $$args);
		}
	}

	//construct
	Event.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (Event.$$cinit !== undefined) Event.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$Event', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$Event, '$_properties', Event.prototype.$$v.$_properties);

		//initialize properties
		Event.$$iinit($$this);

		//call constructor
		if (args !== undefined) Event.$$constructor.apply($$this, args);
	});

	//initializer
	Event.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$Event.$$p.$_properties = undefined;
	
	});

	//constructor
	Event.$$constructor = (function ($$$$type, $$$$bubbles, $$$$cancelable)
	{
		var $$this = this;
		//set default parameter values
		var type = $es4.$$coerce($$$$type, String);
		var bubbles = (1 > arguments.length - 1) ? false : $es4.$$coerce($$$$bubbles, Boolean);
		var cancelable = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$cancelable, Boolean);

		if ($$this.$$Event.$_properties === undefined)
		{
			$$this.$__properties({});
		}
		var properties = $$this.$$Event.$_properties.EventScope;
		properties.$_type = type;
		properties.$_bubbles = bubbles;
		properties.$_cancelable = cancelable;
	});

	return $es4.$$class(Event, null, 'flash.events::Event');
})();
//flash.events.Event


//flash.display.NativeMenu
$es4.$$package('flash.display').NativeMenu = function () { throw new Error('Use of unimplemented class: NativeMenu'); }
//flash.display.NativeMenu


//flash.system.SystemUpdater
$es4.$$package('flash.system').SystemUpdater = function () { throw new Error('Use of unimplemented class: SystemUpdater'); }
//flash.system.SystemUpdater


//flash.printing.PrintJobOptions
$es4.$$package('flash.printing').PrintJobOptions = (function ()
{
	//class pre initializer
	PrintJobOptions.$$sinit = (function ()
	{
		PrintJobOptions.$$sinit = undefined;

		//set prototype and constructor
		PrintJobOptions.prototype = Object.create(Object.prototype);
		Object.defineProperty(PrintJobOptions.prototype, "constructor", { value: PrintJobOptions, enumerable: false });

		//hold private values
		Object.defineProperty(PrintJobOptions.prototype, '$$v', {value:{}});

		//properties
		Object.defineProperty(PrintJobOptions.prototype, 'printAsBitmap', {
		get:function () { var $$this = this; return $$this.$$PrintJobOptions.printAsBitmap; },
		set:function (value) { var $$this = this; $$this.$$PrintJobOptions.printAsBitmap = $es4.$$coerce(value, Boolean); }
		});

	});

	//class initializer
	PrintJobOptions.$$cinit = (function ()
	{
		PrintJobOptions.$$cinit = undefined;
	});

	function PrintJobOptions()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof PrintJobOptions) || $$this.$$PrintJobOptions !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], PrintJobOptions) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			PrintJobOptions.$$construct($$this, $$args);
		}
	}

	//construct
	PrintJobOptions.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (PrintJobOptions.$$cinit !== undefined) PrintJobOptions.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$PrintJobOptions', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		PrintJobOptions.$$iinit($$this);

		//call constructor
		if (args !== undefined) PrintJobOptions.$$constructor.apply($$this, args);
	});

	//initializer
	PrintJobOptions.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$PrintJobOptions.printAsBitmap = $es4.$$coerce(undefined, Boolean);
	
	});

	//constructor
	PrintJobOptions.$$constructor = (function ($$$$printAsBitmap)
	{
		var $$this = this;
		//set default parameter values
		var printAsBitmap = (0 > arguments.length - 1) ? false : $es4.$$coerce($$$$printAsBitmap, Boolean);

	});

	return $es4.$$class(PrintJobOptions, null, 'flash.printing::PrintJobOptions');
})();
//flash.printing.PrintJobOptions


//flash.text.TextRenderer
$es4.$$package('flash.text').TextRenderer = function () { throw new Error('Use of unimplemented class: TextRenderer'); }
//flash.text.TextRenderer


//flash.events.FocusEvent
$es4.$$package('flash.events').FocusEvent = (function ()
{
	//imports
	var InteractiveObject;
	var Event;
	var FocusEvent;

	//properties
	var $$j = {};
	FocusEvent.FOCUS_IN = "focusIn";
	FocusEvent.FOCUS_OUT = "focusOut";
	FocusEvent.KEY_FOCUS_CHANGE = "keyFocusChange";
	FocusEvent.MOUSE_FOCUS_CHANGE = "mouseFocusChange";

	//class pre initializer
	FocusEvent.$$sinit = (function ()
	{
		FocusEvent.$$sinit = undefined;

		//initialize imports
		InteractiveObject = $es4.$$['flash.display'].InteractiveObject;
		Event = $es4.$$['flash.events'].Event;

		//ensure $$sinit is called on super class
		if (Event.$$sinit !== undefined) Event.$$sinit();

		//set prototype and constructor
		FocusEvent.prototype = Object.create(Event.prototype);
		Object.defineProperty(FocusEvent.prototype, "constructor", { value: FocusEvent, enumerable: false });

		//hold private values
		Object.defineProperty(FocusEvent.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(FocusEvent.prototype, 'clone', {
		get:function ()
		{
			var $$this = this;

			function clone()
			{
				return $es4.$$coerce($es4.$$primitive(new FocusEvent($$this.type, $$this.bubbles, $$this.cancelable, $$this.relatedObject, $$this.shiftKey, $$this.keyCode)), Event);
			}

			return $$this.$$FocusEvent.$$clone || ($$this.$$FocusEvent.$$clone = clone);
		}});


		//public instance method
		Object.defineProperty(FocusEvent.prototype, 'toString', {
		get:function ()
		{
			var $$this = this;

			function toString()
			{
				return $$this.formatToString('FocusEvent', 'type', 'bubbles', 'cancelable', 'relatedObject', 'shiftKey', 'keyCode');
			}

			return $$this.$$FocusEvent.$$toString || ($$this.$$FocusEvent.$$toString = toString);
		}});

		Object.defineProperty(FocusEvent.prototype, 'isRelatedObjectInaccessible', {get:function ()
		{
			var $$this = this;
			return $$this.$$FocusEvent._isRelatedObjectInaccessible;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var $$this = this;
			$$this.$$FocusEvent._isRelatedObjectInaccessible = value;
		}});
		Object.defineProperty(FocusEvent.prototype, 'keyCode', {get:function ()
		{
			var $$this = this;
			return $$this.$$FocusEvent._keyCode;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, uint);

			var $$this = this;
			$$this.$$FocusEvent._keyCode = value;
		}});
		Object.defineProperty(FocusEvent.prototype, 'relatedObject', {get:function ()
		{
			var $$this = this;
			return $$this.$$FocusEvent._relatedObject;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, InteractiveObject);

			var $$this = this;
			$$this.$$FocusEvent._relatedObject = value;
		}});
		Object.defineProperty(FocusEvent.prototype, 'shiftKey', {get:function ()
		{
			var $$this = this;
			return $$this.$$FocusEvent._shiftKey;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var $$this = this;
			$$this.$$FocusEvent._shiftKey = value;
		}});

		//properties
		FocusEvent.prototype.$$v._isRelatedObjectInaccessible = {
		get:function () { var $$this = this.$$this; return $$this.$$FocusEvent.$$p._isRelatedObjectInaccessible; },
		set:function (value) { var $$this = this.$$this; $$this.$$FocusEvent.$$p._isRelatedObjectInaccessible = $es4.$$coerce(value, Boolean); }
		};

		FocusEvent.prototype.$$v._keyCode = {
		get:function () { var $$this = this.$$this; return $$this.$$FocusEvent.$$p._keyCode; },
		set:function (value) { var $$this = this.$$this; $$this.$$FocusEvent.$$p._keyCode = $es4.$$coerce(value, uint); }
		};

		FocusEvent.prototype.$$v._shiftKey = {
		get:function () { var $$this = this.$$this; return $$this.$$FocusEvent.$$p._shiftKey; },
		set:function (value) { var $$this = this.$$this; $$this.$$FocusEvent.$$p._shiftKey = $es4.$$coerce(value, Boolean); }
		};

		FocusEvent.prototype.$$v._relatedObject = {
		get:function () { var $$this = this.$$this; return $$this.$$FocusEvent.$$p._relatedObject; },
		set:function (value) { var $$this = this.$$this; $$this.$$FocusEvent.$$p._relatedObject = $es4.$$coerce(value, InteractiveObject); }
		};

	});

	//class initializer
	FocusEvent.$$cinit = (function ()
	{
		FocusEvent.$$cinit = undefined;
	});

	function FocusEvent()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof FocusEvent) || $$this.$$FocusEvent !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], FocusEvent) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			FocusEvent.$$construct($$this, $$args);
		}
	}

	//construct
	FocusEvent.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (FocusEvent.$$cinit !== undefined) FocusEvent.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$FocusEvent', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$FocusEvent, '_isRelatedObjectInaccessible', FocusEvent.prototype.$$v._isRelatedObjectInaccessible);
		Object.defineProperty($$this.$$FocusEvent, '_keyCode', FocusEvent.prototype.$$v._keyCode);
		Object.defineProperty($$this.$$FocusEvent, '_shiftKey', FocusEvent.prototype.$$v._shiftKey);
		Object.defineProperty($$this.$$FocusEvent, '_relatedObject', FocusEvent.prototype.$$v._relatedObject);

		//call construct on super
		Event.$$construct($$this);

		//initialize properties
		FocusEvent.$$iinit($$this);

		//call constructor
		if (args !== undefined) FocusEvent.$$constructor.apply($$this, args);
	});

	//initializer
	FocusEvent.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$FocusEvent.$$p._isRelatedObjectInaccessible = $es4.$$coerce(undefined, Boolean);
		$$this.$$FocusEvent.$$p._keyCode = $es4.$$coerce(undefined, uint);
		$$this.$$FocusEvent.$$p._shiftKey = $es4.$$coerce(undefined, Boolean);
		$$this.$$FocusEvent.$$p._relatedObject = $es4.$$coerce(undefined, InteractiveObject);
	
		//call iinit on super
		Event.$$iinit($$this);
	});

	//constructor
	FocusEvent.$$constructor = (function ($$$$type, $$$$bubbles, $$$$cancelable, $$$$relatedObject, $$$$shiftKey, $$$$keyCode)
	{
		var $$this = this;
		//set default parameter values
		var type = $es4.$$coerce($$$$type, String);
		var bubbles = (1 > arguments.length - 1) ? true : $es4.$$coerce($$$$bubbles, Boolean);
		var cancelable = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$cancelable, Boolean);
		var relatedObject = (3 > arguments.length - 1) ? null : $es4.$$coerce($$$$relatedObject, InteractiveObject);
		var shiftKey = (4 > arguments.length - 1) ? false : $es4.$$coerce($$$$shiftKey, Boolean);
		var keyCode = (5 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$keyCode, uint);

		Event.$$constructor.call($$this, type, bubbles, cancelable);
		$$this.$$FocusEvent._relatedObject = relatedObject;
		$$this.$$FocusEvent._shiftKey = shiftKey;
		$$this.$$FocusEvent._keyCode = keyCode;
	});

	return $es4.$$class(FocusEvent, {EXTENDS:'flash.events.Event'}, 'flash.events::FocusEvent');
})();
//flash.events.FocusEvent


//flash.events.ShaderEvent
$es4.$$package('flash.events').ShaderEvent = function () { throw new Error('Use of unimplemented class: ShaderEvent'); }
//flash.events.ShaderEvent


//flash.display.SpreadMethod
$es4.$$package('flash.display').SpreadMethod = function () { throw new Error('Use of unimplemented class: SpreadMethod'); }
//flash.display.SpreadMethod


//flash.text.TextSnapshot
$es4.$$package('flash.text').TextSnapshot = function () { throw new Error('Use of unimplemented class: TextSnapshot'); }
//flash.text.TextSnapshot


//flash.net.drm.DRMPlaybackTimeWindow
$es4.$$package('flash.net.drm').DRMPlaybackTimeWindow = function () { throw new Error('Use of unimplemented class: DRMPlaybackTimeWindow'); }
//flash.net.drm.DRMPlaybackTimeWindow


//flash.display.BitmapData
$es4.$$package('flash.display').BitmapData = (function ()
{
	//imports
	var BitmapFilter;
	var ColorTransform;
	var Matrix;
	var Point;
	var Rectangle;
	var ByteArray;
	var IBitmapDrawable;
	var Bitmap;
	var BitmapData;
	var DisplayObject;

	//class pre initializer
	BitmapData.$$sinit = (function ()
	{
		BitmapData.$$sinit = undefined;

		//initialize imports
		BitmapFilter = $es4.$$['flash.filters'].BitmapFilter;
		ColorTransform = $es4.$$['flash.geom'].ColorTransform;
		Matrix = $es4.$$['flash.geom'].Matrix;
		Point = $es4.$$['flash.geom'].Point;
		Rectangle = $es4.$$['flash.geom'].Rectangle;
		ByteArray = $es4.$$['flash.utils'].ByteArray;
		IBitmapDrawable = $es4.$$['flash.display'].IBitmapDrawable;
		Bitmap = $es4.$$['flash.display'].Bitmap;
		DisplayObject = $es4.$$['flash.display'].DisplayObject;

		//set prototype and constructor
		BitmapData.prototype = Object.create(Object.prototype);
		Object.defineProperty(BitmapData.prototype, "constructor", { value: BitmapData, enumerable: false });

		//hold private values
		Object.defineProperty(BitmapData.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(BitmapData.prototype, '$__properties', {
		get:function ()
		{
			var $$this = this;

			function $__properties($$$$object)
			{
				//set default parameter values
				var object = (0 > arguments.length - 1) ? null : $$$$object;

				if ($$this.$$BitmapData.$_properties === undefined)
				{
					object.BitmapDataScope = {$_createOrGetCanvas:BitmapData.$_createOrGetCanvas};
					object.TLScope = $$this;
					return $$this.$$BitmapData.$_properties = object;
				}
				return $$this.$$BitmapData.$_properties;
			}

			return $$this.$$BitmapData.$$$__properties || ($$this.$$BitmapData.$$$__properties = $__properties);
		}});


		//public instance method
		Object.defineProperty(BitmapData.prototype, 'applyFilter', {
		get:function ()
		{
			var $$this = this;

			function applyFilter($$$$sourceBitmapData, $$$$sourceRect, $$$$destPoint, $$$$filter)
			{
				//set default parameter values
				var sourceBitmapData = $es4.$$coerce($$$$sourceBitmapData, $es4.$$['flash.display'].BitmapData);
				var sourceRect = $es4.$$coerce($$$$sourceRect, Rectangle);
				var destPoint = $es4.$$coerce($$$$destPoint, Point);
				var filter = $es4.$$coerce($$$$filter, BitmapFilter);

				throw $es4.$$primitive(new Error('BitmapData: attempted call to an unimplemented function "applyFilter"'));
			}

			return $$this.$$BitmapData.$$applyFilter || ($$this.$$BitmapData.$$applyFilter = applyFilter);
		}});


		//public instance method
		Object.defineProperty(BitmapData.prototype, 'clone', {
		get:function ()
		{
			var $$this = this;

			function clone()
			{
				var bitmapData = $es4.$$coerce($es4.$$primitive(new BitmapData($$this.$$BitmapData.$_properties.BitmapDataScope.$_width, $$this.$$BitmapData.$_properties.BitmapDataScope.$_height, $$this.$$BitmapData.$_properties.BitmapDataScope.$_transparent, $$this.$$BitmapData.$_properties.BitmapDataScope.$_fillColor)), $es4.$$['flash.display'].BitmapData);
				if ($$this.$$BitmapData.$_properties.BitmapDataScope.$_canvas)
				{
					var canvas = document.createElement('canvas');
					canvas.width = $$this.$$BitmapData.$_properties.BitmapDataScope.$_width;
					canvas.height = $$this.$$BitmapData.$_properties.BitmapDataScope.$_height;
					canvas.getContext('2d').drawImage($$this.$$BitmapData.$_properties.BitmapDataScope.$_canvas, 0, 0);
					bitmapData.$__properties().BitmapDataScope.$_canvas = canvas;
				}
				return bitmapData;
			}

			return $$this.$$BitmapData.$$clone || ($$this.$$BitmapData.$$clone = clone);
		}});


		//public instance method
		Object.defineProperty(BitmapData.prototype, 'colorTransform', {
		get:function ()
		{
			var $$this = this;

			function colorTransform($$$$rect, $$$$colorTransform)
			{
				//set default parameter values
				var rect = $es4.$$coerce($$$$rect, Rectangle);
				var colorTransform = $es4.$$coerce($$$$colorTransform, ColorTransform);

				throw $es4.$$primitive(new Error('BitmapData: attempted call to an unimplemented function "colorTransform"'));
			}

			return $$this.$$BitmapData.$$colorTransform || ($$this.$$BitmapData.$$colorTransform = colorTransform);
		}});


		//public instance method
		Object.defineProperty(BitmapData.prototype, 'compare', {
		get:function ()
		{
			var $$this = this;

			function compare($$$$otherBitmapData)
			{
				//set default parameter values
				var otherBitmapData = $es4.$$coerce($$$$otherBitmapData, $es4.$$['flash.display'].BitmapData);

				throw $es4.$$primitive(new Error('BitmapData: attempted call to an unimplemented function "compare"'));
			}

			return $$this.$$BitmapData.$$compare || ($$this.$$BitmapData.$$compare = compare);
		}});


		//public instance method
		Object.defineProperty(BitmapData.prototype, 'copyChannel', {
		get:function ()
		{
			var $$this = this;

			function copyChannel($$$$sourceBitmapData, $$$$sourceRect, $$$$destPoint, $$$$sourceChannel, $$$$destChannel)
			{
				//set default parameter values
				var sourceBitmapData = $es4.$$coerce($$$$sourceBitmapData, $es4.$$['flash.display'].BitmapData);
				var sourceRect = $es4.$$coerce($$$$sourceRect, Rectangle);
				var destPoint = $es4.$$coerce($$$$destPoint, Point);
				var sourceChannel = $es4.$$coerce($$$$sourceChannel, uint);
				var destChannel = $es4.$$coerce($$$$destChannel, uint);

				throw $es4.$$primitive(new Error('BitmapData: attempted call to an unimplemented function "copyChannel"'));
			}

			return $$this.$$BitmapData.$$copyChannel || ($$this.$$BitmapData.$$copyChannel = copyChannel);
		}});


		//public instance method
		Object.defineProperty(BitmapData.prototype, 'copyPixels', {
		get:function ()
		{
			var $$this = this;

			function copyPixels($$$$sourceBitmapData, $$$$sourceRect, $$$$destPoint, $$$$alphaBitmapData, $$$$alphaPoint, $$$$mergeAlpha)
			{
				//set default parameter values
				var sourceBitmapData = $es4.$$coerce($$$$sourceBitmapData, $es4.$$['flash.display'].BitmapData);
				var sourceRect = $es4.$$coerce($$$$sourceRect, Rectangle);
				var destPoint = $es4.$$coerce($$$$destPoint, Point);
				var alphaBitmapData = (3 > arguments.length - 1) ? null : $es4.$$coerce($$$$alphaBitmapData, $es4.$$['flash.display'].BitmapData);
				var alphaPoint = (4 > arguments.length - 1) ? null : $es4.$$coerce($$$$alphaPoint, Point);
				var mergeAlpha = (5 > arguments.length - 1) ? false : $es4.$$coerce($$$$mergeAlpha, Boolean);

				throw $es4.$$primitive(new Error('BitmapData: attempted call to an unimplemented function "copyPixels"'));
			}

			return $$this.$$BitmapData.$$copyPixels || ($$this.$$BitmapData.$$copyPixels = copyPixels);
		}});


		//public instance method
		Object.defineProperty(BitmapData.prototype, 'dispose', {
		get:function ()
		{
			var $$this = this;

			function dispose()
			{
			}

			return $$this.$$BitmapData.$$dispose || ($$this.$$BitmapData.$$dispose = dispose);
		}});


		//public instance method
		Object.defineProperty(BitmapData.prototype, 'draw', {
		get:function ()
		{
			var $$this = this;

			function draw($$$$source, $$$$matrix, $$$$colorTransform, $$$$blendMode, $$$$clipRect, $$$$smoothing)
			{
				//set default parameter values
				var source = $es4.$$coerce($$$$source, IBitmapDrawable);
				var matrix = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$matrix, Matrix);
				var colorTransform = (2 > arguments.length - 1) ? null : $es4.$$coerce($$$$colorTransform, ColorTransform);
				var blendMode = (3 > arguments.length - 1) ? null : $es4.$$coerce($$$$blendMode, String);
				var clipRect = (4 > arguments.length - 1) ? null : $es4.$$coerce($$$$clipRect, Rectangle);
				var smoothing = (5 > arguments.length - 1) ? false : $es4.$$coerce($$$$smoothing, Boolean);

				var sourceCanvas;
				if ($es4.$$is(source, Bitmap))
				{
					sourceCanvas = ($es4.$$as(source, DisplayObject)).$__properties().DisplayObjectScope.$_domView;
				}
				else if ($es4.$$is(source, DisplayObject))
				{
					sourceCanvas = ($es4.$$as(source, DisplayObject)).$__properties().DisplayObjectScope.$_toCanvas();
				}
				else if (($es4.$$is(source, BitmapData)))
				{
					sourceCanvas = BitmapData.$_createOrGetCanvas($es4.$$as(source, BitmapData));
				}
				else
				{
					throw $es4.$$primitive(new Error('bitmapdata draw implementation only supports a ibitmapdrawable source of type bitmapdata'));
				}
				if (!matrix)
				{
					matrix = $es4.$$primitive(new Matrix());
					matrix.identity();
				}
				if (!clipRect)
				{
					clipRect = $es4.$$primitive(new Rectangle(0, 0, sourceCanvas.width, sourceCanvas.height));
				}
				var canvas = BitmapData.$_createOrGetCanvas($$this);
				var context = canvas.getContext('2d');
				context.save();
				context.imageSmoothingEnabled = smoothing;
				context.mozImageSmoothingEnabled = smoothing;
				context.beginPath();
				context.rect(clipRect.x, clipRect.y, clipRect.width, clipRect.height);
				context.clip();
				context.setTransform(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);
				context.drawImage(sourceCanvas, 0, 0);
				context.closePath();
				context.restore();
			}

			return $$this.$$BitmapData.$$draw || ($$this.$$BitmapData.$$draw = draw);
		}});


		//public instance method
		Object.defineProperty(BitmapData.prototype, 'fillRect', {
		get:function ()
		{
			var $$this = this;

			function fillRect($$$$rect, $$$$argb)
			{
				//set default parameter values
				var rect = $es4.$$coerce($$$$rect, Rectangle);
				var argb = $es4.$$coerce($$$$argb, uint);

				var canvas = BitmapData.$_createOrGetCanvas($$this);
				var context = canvas.getContext('2d');
				var alpha = $es4.$$coerce(argb >> 24, int);
				var red = $es4.$$coerce(argb >> 16 & 0xff, int);
				var green = $es4.$$coerce(argb >> 8 & 0xff, int);
				var blue = $es4.$$coerce(argb & 0xff, int);
				context.fillStyle = 'rgba(' + red + ', ' + green + ', ' + blue + ', ' + alpha + ')';
				context.clearRect(rect.x, rect.y, rect.width, rect.height);
				context.fillRect(rect.x, rect.y, rect.width, rect.height);
			}

			return $$this.$$BitmapData.$$fillRect || ($$this.$$BitmapData.$$fillRect = fillRect);
		}});


		//public instance method
		Object.defineProperty(BitmapData.prototype, 'floodFill', {
		get:function ()
		{
			var $$this = this;

			function floodFill($$$$x, $$$$y, $$$$color)
			{
				//set default parameter values
				var x = $es4.$$coerce($$$$x, int);
				var y = $es4.$$coerce($$$$y, int);
				var color = $es4.$$coerce($$$$color, uint);

				throw $es4.$$primitive(new Error('BitmapData: attempted call to an unimplemented function "floodFill"'));
			}

			return $$this.$$BitmapData.$$floodFill || ($$this.$$BitmapData.$$floodFill = floodFill);
		}});


		//public instance method
		Object.defineProperty(BitmapData.prototype, 'generateFilterRect', {
		get:function ()
		{
			var $$this = this;

			function generateFilterRect($$$$sourceRect, $$$$filter)
			{
				//set default parameter values
				var sourceRect = $es4.$$coerce($$$$sourceRect, Rectangle);
				var filter = $es4.$$coerce($$$$filter, BitmapFilter);

				throw $es4.$$primitive(new Error('BitmapData: attempted call to an unimplemented function "generateFilterRect"'));
			}

			return $$this.$$BitmapData.$$generateFilterRect || ($$this.$$BitmapData.$$generateFilterRect = generateFilterRect);
		}});


		//public instance method
		Object.defineProperty(BitmapData.prototype, 'getColorBoundsRect', {
		get:function ()
		{
			var $$this = this;

			function getColorBoundsRect($$$$mask, $$$$color, $$$$findColor)
			{
				//set default parameter values
				var mask = $es4.$$coerce($$$$mask, uint);
				var color = $es4.$$coerce($$$$color, uint);
				var findColor = (2 > arguments.length - 1) ? true : $es4.$$coerce($$$$findColor, Boolean);

				throw $es4.$$primitive(new Error('BitmapData: attempted call to an unimplemented function "getColorBoundsRect"'));
			}

			return $$this.$$BitmapData.$$getColorBoundsRect || ($$this.$$BitmapData.$$getColorBoundsRect = getColorBoundsRect);
		}});


		//public instance method
		Object.defineProperty(BitmapData.prototype, 'getPixel', {
		get:function ()
		{
			var $$this = this;

			function getPixel($$$$x, $$$$y)
			{
				//set default parameter values
				var x = $es4.$$coerce($$$$x, int);
				var y = $es4.$$coerce($$$$y, int);

				throw $es4.$$primitive(new Error('BitmapData: attempted call to an unimplemented function "getPixel"'));
			}

			return $$this.$$BitmapData.$$getPixel || ($$this.$$BitmapData.$$getPixel = getPixel);
		}});


		//public instance method
		Object.defineProperty(BitmapData.prototype, 'getPixel32', {
		get:function ()
		{
			var $$this = this;

			function getPixel32($$$$x, $$$$y)
			{
				//set default parameter values
				var x = $es4.$$coerce($$$$x, int);
				var y = $es4.$$coerce($$$$y, int);

				throw $es4.$$primitive(new Error('BitmapData: attempted call to an unimplemented function "getPixel32"'));
			}

			return $$this.$$BitmapData.$$getPixel32 || ($$this.$$BitmapData.$$getPixel32 = getPixel32);
		}});


		//public instance method
		Object.defineProperty(BitmapData.prototype, 'getPixels', {
		get:function ()
		{
			var $$this = this;

			function getPixels($$$$rect)
			{
				//set default parameter values
				var rect = $es4.$$coerce($$$$rect, Rectangle);

				throw $es4.$$primitive(new Error('BitmapData: attempted call to an unimplemented function "getPixels"'));
			}

			return $$this.$$BitmapData.$$getPixels || ($$this.$$BitmapData.$$getPixels = getPixels);
		}});


		//public instance method
		Object.defineProperty(BitmapData.prototype, 'getVector', {
		get:function ()
		{
			var $$this = this;

			function getVector($$$$rect)
			{
				//set default parameter values
				var rect = $es4.$$coerce($$$$rect, Rectangle);

				throw $es4.$$primitive(new Error('BitmapData: attempted call to an unimplemented function "getVector"'));
			}

			return $$this.$$BitmapData.$$getVector || ($$this.$$BitmapData.$$getVector = getVector);
		}});


		//public instance method
		Object.defineProperty(BitmapData.prototype, 'histogram', {
		get:function ()
		{
			var $$this = this;

			function histogram($$$$hRect)
			{
				//set default parameter values
				var hRect = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$hRect, Rectangle);

				throw $es4.$$primitive(new Error('BitmapData: attempted call to an unimplemented function "histogram"'));
			}

			return $$this.$$BitmapData.$$histogram || ($$this.$$BitmapData.$$histogram = histogram);
		}});


		//public instance method
		Object.defineProperty(BitmapData.prototype, 'hitTest', {
		get:function ()
		{
			var $$this = this;

			function hitTest($$$$firstPoint, $$$$firstAlphaThreshold, $$$$secondObject, $$$$secondBitmapDataPoint, $$$$secondAlphaThreshold)
			{
				//set default parameter values
				var firstPoint = $es4.$$coerce($$$$firstPoint, Point);
				var firstAlphaThreshold = $es4.$$coerce($$$$firstAlphaThreshold, uint);
				var secondObject = $es4.$$coerce($$$$secondObject, Object);
				var secondBitmapDataPoint = (3 > arguments.length - 1) ? null : $es4.$$coerce($$$$secondBitmapDataPoint, Point);
				var secondAlphaThreshold = (4 > arguments.length - 1) ? 1 : $es4.$$coerce($$$$secondAlphaThreshold, uint);

				throw $es4.$$primitive(new Error('BitmapData: attempted call to an unimplemented function "hitTest"'));
			}

			return $$this.$$BitmapData.$$hitTest || ($$this.$$BitmapData.$$hitTest = hitTest);
		}});


		//public instance method
		Object.defineProperty(BitmapData.prototype, 'lock', {
		get:function ()
		{
			var $$this = this;

			function lock()
			{
				throw $es4.$$primitive(new Error('BitmapData: attempted call to an unimplemented function "lock"'));
			}

			return $$this.$$BitmapData.$$lock || ($$this.$$BitmapData.$$lock = lock);
		}});


		//public instance method
		Object.defineProperty(BitmapData.prototype, 'merge', {
		get:function ()
		{
			var $$this = this;

			function merge($$$$sourceBitmapData, $$$$sourceRect, $$$$destPoint, $$$$redMultiplier, $$$$greenMultiplier, $$$$blueMultiplier, $$$$alphaMultiplier)
			{
				//set default parameter values
				var sourceBitmapData = $es4.$$coerce($$$$sourceBitmapData, $es4.$$['flash.display'].BitmapData);
				var sourceRect = $es4.$$coerce($$$$sourceRect, Rectangle);
				var destPoint = $es4.$$coerce($$$$destPoint, Point);
				var redMultiplier = $es4.$$coerce($$$$redMultiplier, uint);
				var greenMultiplier = $es4.$$coerce($$$$greenMultiplier, uint);
				var blueMultiplier = $es4.$$coerce($$$$blueMultiplier, uint);
				var alphaMultiplier = $es4.$$coerce($$$$alphaMultiplier, uint);

				throw $es4.$$primitive(new Error('BitmapData: attempted call to an unimplemented function "merge"'));
			}

			return $$this.$$BitmapData.$$merge || ($$this.$$BitmapData.$$merge = merge);
		}});


		//public instance method
		Object.defineProperty(BitmapData.prototype, 'noise', {
		get:function ()
		{
			var $$this = this;

			function noise($$$$randomSeed, $$$$low, $$$$high, $$$$channelOptions, $$$$grayScale)
			{
				//set default parameter values
				var randomSeed = $es4.$$coerce($$$$randomSeed, int);
				var low = (1 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$low, uint);
				var high = (2 > arguments.length - 1) ? 255 : $es4.$$coerce($$$$high, uint);
				var channelOptions = (3 > arguments.length - 1) ? 7 : $es4.$$coerce($$$$channelOptions, uint);
				var grayScale = (4 > arguments.length - 1) ? false : $es4.$$coerce($$$$grayScale, Boolean);

				throw $es4.$$primitive(new Error('BitmapData: attempted call to an unimplemented function "noise"'));
			}

			return $$this.$$BitmapData.$$noise || ($$this.$$BitmapData.$$noise = noise);
		}});


		//public instance method
		Object.defineProperty(BitmapData.prototype, 'paletteMap', {
		get:function ()
		{
			var $$this = this;

			function paletteMap($$$$sourceBitmapData, $$$$sourceRect, $$$$destPoint, $$$$redArray, $$$$greenArray, $$$$blueArray, $$$$alphaArray)
			{
				//set default parameter values
				var sourceBitmapData = $es4.$$coerce($$$$sourceBitmapData, $es4.$$['flash.display'].BitmapData);
				var sourceRect = $es4.$$coerce($$$$sourceRect, Rectangle);
				var destPoint = $es4.$$coerce($$$$destPoint, Point);
				var redArray = (3 > arguments.length - 1) ? null : $es4.$$coerce($$$$redArray, Array);
				var greenArray = (4 > arguments.length - 1) ? null : $es4.$$coerce($$$$greenArray, Array);
				var blueArray = (5 > arguments.length - 1) ? null : $es4.$$coerce($$$$blueArray, Array);
				var alphaArray = (6 > arguments.length - 1) ? null : $es4.$$coerce($$$$alphaArray, Array);

				throw $es4.$$primitive(new Error('BitmapData: attempted call to an unimplemented function "paletteMap"'));
			}

			return $$this.$$BitmapData.$$paletteMap || ($$this.$$BitmapData.$$paletteMap = paletteMap);
		}});


		//public instance method
		Object.defineProperty(BitmapData.prototype, 'perlinNoise', {
		get:function ()
		{
			var $$this = this;

			function perlinNoise($$$$baseX, $$$$baseY, $$$$numOctaves, $$$$randomSeed, $$$$stitch, $$$$fractalNoise, $$$$channelOptions, $$$$grayScale, $$$$offsets)
			{
				//set default parameter values
				var baseX = $es4.$$coerce($$$$baseX, Number);
				var baseY = $es4.$$coerce($$$$baseY, Number);
				var numOctaves = $es4.$$coerce($$$$numOctaves, uint);
				var randomSeed = $es4.$$coerce($$$$randomSeed, int);
				var stitch = $es4.$$coerce($$$$stitch, Boolean);
				var fractalNoise = $es4.$$coerce($$$$fractalNoise, Boolean);
				var channelOptions = (6 > arguments.length - 1) ? 7 : $es4.$$coerce($$$$channelOptions, uint);
				var grayScale = (7 > arguments.length - 1) ? false : $es4.$$coerce($$$$grayScale, Boolean);
				var offsets = (8 > arguments.length - 1) ? null : $es4.$$coerce($$$$offsets, Array);

				throw $es4.$$primitive(new Error('BitmapData: attempted call to an unimplemented function "perlinNoise"'));
			}

			return $$this.$$BitmapData.$$perlinNoise || ($$this.$$BitmapData.$$perlinNoise = perlinNoise);
		}});


		//public instance method
		Object.defineProperty(BitmapData.prototype, 'pixelDissolve', {
		get:function ()
		{
			var $$this = this;

			function pixelDissolve($$$$sourceBitmapData, $$$$sourceRect, $$$$destPoint, $$$$randomSeed, $$$$numPixels, $$$$fillColor)
			{
				//set default parameter values
				var sourceBitmapData = $es4.$$coerce($$$$sourceBitmapData, $es4.$$['flash.display'].BitmapData);
				var sourceRect = $es4.$$coerce($$$$sourceRect, Rectangle);
				var destPoint = $es4.$$coerce($$$$destPoint, Point);
				var randomSeed = (3 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$randomSeed, int);
				var numPixels = (4 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$numPixels, int);
				var fillColor = (5 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$fillColor, uint);

				throw $es4.$$primitive(new Error('BitmapData: attempted call to an unimplemented function "pixelDissolve"'));
			}

			return $$this.$$BitmapData.$$pixelDissolve || ($$this.$$BitmapData.$$pixelDissolve = pixelDissolve);
		}});


		//public instance method
		Object.defineProperty(BitmapData.prototype, 'scroll', {
		get:function ()
		{
			var $$this = this;

			function scroll($$$$x, $$$$y)
			{
				//set default parameter values
				var x = $es4.$$coerce($$$$x, int);
				var y = $es4.$$coerce($$$$y, int);

				throw $es4.$$primitive(new Error('BitmapData: attempted call to an unimplemented function "scroll"'));
			}

			return $$this.$$BitmapData.$$scroll || ($$this.$$BitmapData.$$scroll = scroll);
		}});


		//public instance method
		Object.defineProperty(BitmapData.prototype, 'setPixel', {
		get:function ()
		{
			var $$this = this;

			function setPixel($$$$x, $$$$y, $$$$color)
			{
				//set default parameter values
				var x = $es4.$$coerce($$$$x, int);
				var y = $es4.$$coerce($$$$y, int);
				var color = $es4.$$coerce($$$$color, uint);

				throw $es4.$$primitive(new Error('BitmapData: attempted call to an unimplemented function "setPixel"'));
			}

			return $$this.$$BitmapData.$$setPixel || ($$this.$$BitmapData.$$setPixel = setPixel);
		}});


		//public instance method
		Object.defineProperty(BitmapData.prototype, 'setPixel32', {
		get:function ()
		{
			var $$this = this;

			function setPixel32($$$$x, $$$$y, $$$$color)
			{
				//set default parameter values
				var x = $es4.$$coerce($$$$x, int);
				var y = $es4.$$coerce($$$$y, int);
				var color = $es4.$$coerce($$$$color, uint);

				throw $es4.$$primitive(new Error('BitmapData: attempted call to an unimplemented function "setPixel32"'));
			}

			return $$this.$$BitmapData.$$setPixel32 || ($$this.$$BitmapData.$$setPixel32 = setPixel32);
		}});


		//public instance method
		Object.defineProperty(BitmapData.prototype, 'setPixels', {
		get:function ()
		{
			var $$this = this;

			function setPixels($$$$rect, $$$$inputByteArray)
			{
				//set default parameter values
				var rect = $es4.$$coerce($$$$rect, Rectangle);
				var inputByteArray = $es4.$$coerce($$$$inputByteArray, ByteArray);

				throw $es4.$$primitive(new Error('BitmapData: attempted call to an unimplemented function "setPixels"'));
			}

			return $$this.$$BitmapData.$$setPixels || ($$this.$$BitmapData.$$setPixels = setPixels);
		}});


		//public instance method
		Object.defineProperty(BitmapData.prototype, 'setVector', {
		get:function ()
		{
			var $$this = this;

			function setVector($$$$rect, $$$$inputVector)
			{
				//set default parameter values
				var rect = $es4.$$coerce($$$$rect, Rectangle);
				var inputVector = $es4.$$coerce($$$$inputVector, Array);

				throw $es4.$$primitive(new Error('BitmapData: attempted call to an unimplemented function "setVector"'));
			}

			return $$this.$$BitmapData.$$setVector || ($$this.$$BitmapData.$$setVector = setVector);
		}});


		//public instance method
		Object.defineProperty(BitmapData.prototype, 'threshold', {
		get:function ()
		{
			var $$this = this;

			function threshold($$$$sourceBitmapData, $$$$sourceRect, $$$$destPoint, $$$$operation, $$$$threshold, $$$$color, $$$$mask, $$$$copySource)
			{
				//set default parameter values
				var sourceBitmapData = $es4.$$coerce($$$$sourceBitmapData, $es4.$$['flash.display'].BitmapData);
				var sourceRect = $es4.$$coerce($$$$sourceRect, Rectangle);
				var destPoint = $es4.$$coerce($$$$destPoint, Point);
				var operation = $es4.$$coerce($$$$operation, String);
				var threshold = $es4.$$coerce($$$$threshold, uint);
				var color = (5 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$color, uint);
				var mask = (6 > arguments.length - 1) ? 4294967295 : $es4.$$coerce($$$$mask, uint);
				var copySource = (7 > arguments.length - 1) ? false : $es4.$$coerce($$$$copySource, Boolean);

				throw $es4.$$primitive(new Error('BitmapData: attempted call to an unimplemented function "threshold"'));
			}

			return $$this.$$BitmapData.$$threshold || ($$this.$$BitmapData.$$threshold = threshold);
		}});


		//public instance method
		Object.defineProperty(BitmapData.prototype, 'unlock', {
		get:function ()
		{
			var $$this = this;

			function unlock($$$$changeRect)
			{
				//set default parameter values
				var changeRect = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$changeRect, Rectangle);

				throw $es4.$$primitive(new Error('BitmapData: attempted call to an unimplemented function "unlock"'));
			}

			return $$this.$$BitmapData.$$unlock || ($$this.$$BitmapData.$$unlock = unlock);
		}});

		Object.defineProperty(BitmapData.prototype, 'height', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$BitmapData.$_properties.BitmapDataScope.$_height, int);
		}});
		Object.defineProperty(BitmapData.prototype, 'rect', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('BitmapData: attempted call to an unimplemented function "rect"'));
		}});
		Object.defineProperty(BitmapData.prototype, 'transparent', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$BitmapData.$_properties.BitmapDataScope.$_transparent, Boolean);
		}});
		Object.defineProperty(BitmapData.prototype, 'width', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$BitmapData.$_properties.BitmapDataScope.$_width, int);
		}});

		//properties
		BitmapData.prototype.$$v.$_properties = {
		get:function () { var $$this = this.$$this; return $$this.$$BitmapData.$$p.$_properties; },
		set:function (value) { var $$this = this.$$this; $$this.$$BitmapData.$$p.$_properties = value }
		};

	});

	//class initializer
	BitmapData.$$cinit = (function ()
	{
		BitmapData.$$cinit = undefined;
	});

	//private static method
	BitmapData.$_createOrGetCanvas = (function ($$$$bitmapData)
	{
		if (BitmapData.$$cinit !== undefined) BitmapData.$$cinit();

		//set default parameter values
		var bitmapData = $es4.$$coerce($$$$bitmapData, $es4.$$['flash.display'].BitmapData);

		var properties = bitmapData.$__properties().BitmapDataScope;
		if (!properties.$_canvas)
		{
			var canvas = document.createElement('canvas');
			canvas.width = properties.$_width;
			canvas.height = properties.$_height;
			var context = canvas.getContext('2d');
			context.rect(0, 0, properties.$_width, properties.$_height);
			var argb = $es4.$$coerce(properties.$_fillColor, uint);
			var alpha = $es4.$$coerce(argb >> 24, int);
			var red = $es4.$$coerce(argb >> 16 & 0xff, int);
			var green = $es4.$$coerce(argb >> 8 & 0xff, int);
			var blue = $es4.$$coerce(argb & 0xff, int);
			context.fillStyle = 'rgba(' + red + ', ' + green + ', ' + blue + ', ' + alpha + ')';
			context.fill();
			properties.$_canvas = canvas;
		}
		return properties.$_canvas;
	});
	function BitmapData()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof BitmapData) || $$this.$$BitmapData !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], BitmapData) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			BitmapData.$$construct($$this, $$args);
		}
	}

	//construct
	BitmapData.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (BitmapData.$$cinit !== undefined) BitmapData.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$BitmapData', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$BitmapData, '$_properties', BitmapData.prototype.$$v.$_properties);

		//initialize properties
		BitmapData.$$iinit($$this);

		//call constructor
		if (args !== undefined) BitmapData.$$constructor.apply($$this, args);
	});

	//initializer
	BitmapData.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$BitmapData.$$p.$_properties = undefined;
	
	});

	//constructor
	BitmapData.$$constructor = (function ($$$$width, $$$$height, $$$$transparent, $$$$fillColor)
	{
		var $$this = this;
		//set default parameter values
		var width = $es4.$$coerce($$$$width, int);
		var height = $es4.$$coerce($$$$height, int);
		var transparent = (2 > arguments.length - 1) ? true : $es4.$$coerce($$$$transparent, Boolean);
		var fillColor = (3 > arguments.length - 1) ? 0xFFFFFFFF : $es4.$$coerce($$$$fillColor, uint);

		var properties = $$this.$$BitmapData.$_properties || $$this.$__properties({});
		properties.BitmapDataScope.$_width = width;
		properties.BitmapDataScope.$_height = height;
		properties.BitmapDataScope.$_transparent = transparent;
		properties.BitmapDataScope.$_fillColor = fillColor;
	});

	return $es4.$$class(BitmapData, {IMPLEMENTS:['flash.display.IBitmapDrawable']}, 'flash.display::BitmapData');
})();
//flash.display.BitmapData


//flash.display3D.Context3DBufferUsage
$es4.$$package('flash.display3D').Context3DBufferUsage = function () { throw new Error('Use of unimplemented class: Context3DBufferUsage'); }
//flash.display3D.Context3DBufferUsage


//flash.display.AVM1Movie
$es4.$$package('flash.display').AVM1Movie = function () { throw new Error('Use of unimplemented class: AVM1Movie'); }
//flash.display.AVM1Movie


//flash.events.IOErrorEvent
$es4.$$package('flash.events').IOErrorEvent = (function ()
{
	//imports
	var Event;
	var IOErrorEvent;
	var ErrorEvent;

	//properties
	var $$j = {};
	IOErrorEvent.DISK_ERROR = "diskError";
	IOErrorEvent.IO_ERROR = "ioError";
	IOErrorEvent.NETWORK_ERROR = "networkError";
	IOErrorEvent.VERIFY_ERROR = "verifyError";

	//class pre initializer
	IOErrorEvent.$$sinit = (function ()
	{
		IOErrorEvent.$$sinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;
		ErrorEvent = $es4.$$['flash.events'].ErrorEvent;

		//ensure $$sinit is called on super class
		if (ErrorEvent.$$sinit !== undefined) ErrorEvent.$$sinit();

		//set prototype and constructor
		IOErrorEvent.prototype = Object.create(ErrorEvent.prototype);
		Object.defineProperty(IOErrorEvent.prototype, "constructor", { value: IOErrorEvent, enumerable: false });

		//hold private values
		Object.defineProperty(IOErrorEvent.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(IOErrorEvent.prototype, 'clone', {
		get:function ()
		{
			var $$this = this;

			function clone()
			{
				return $es4.$$coerce($es4.$$primitive(new IOErrorEvent($$this.type, $$this.bubbles, $$this.cancelable, $$this.text, $$this.errorID)), Event);
			}

			return $$this.$$IOErrorEvent.$$clone || ($$this.$$IOErrorEvent.$$clone = clone);
		}});


		//public instance method
		Object.defineProperty(IOErrorEvent.prototype, 'toString', {
		get:function ()
		{
			var $$this = this;

			function toString()
			{
				return $$this.formatToString('IOErrorEvent', 'bubbles', 'cancelable', 'text', 'errorID');
			}

			return $$this.$$IOErrorEvent.$$toString || ($$this.$$IOErrorEvent.$$toString = toString);
		}});
	});

	//class initializer
	IOErrorEvent.$$cinit = (function ()
	{
		IOErrorEvent.$$cinit = undefined;
	});

	function IOErrorEvent()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof IOErrorEvent) || $$this.$$IOErrorEvent !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], IOErrorEvent) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			IOErrorEvent.$$construct($$this, $$args);
		}
	}

	//construct
	IOErrorEvent.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (IOErrorEvent.$$cinit !== undefined) IOErrorEvent.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$IOErrorEvent', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//call construct on super
		ErrorEvent.$$construct($$this);

		//initialize properties
		IOErrorEvent.$$iinit($$this);

		//call constructor
		if (args !== undefined) IOErrorEvent.$$constructor.apply($$this, args);
	});

	//initializer
	IOErrorEvent.$$iinit = (function ($$this)
	{
		//call iinit on super
		ErrorEvent.$$iinit($$this);
	});

	//constructor
	IOErrorEvent.$$constructor = (function ($$$$type, $$$$bubbles, $$$$cancelable, $$$$text, $$$$id)
	{
		var $$this = this;
		//set default parameter values
		var type = $es4.$$coerce($$$$type, String);
		var bubbles = (1 > arguments.length - 1) ? false : $es4.$$coerce($$$$bubbles, Boolean);
		var cancelable = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$cancelable, Boolean);
		var text = (3 > arguments.length - 1) ? "" : $es4.$$coerce($$$$text, String);
		var id = (4 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$id, int);

		ErrorEvent.$$constructor.call($$this, type, bubbles, cancelable, text, id);
	});

	return $es4.$$class(IOErrorEvent, {EXTENDS:'flash.events.ErrorEvent'}, 'flash.events::IOErrorEvent');
})();
//flash.events.IOErrorEvent


//flash.display.BitmapDataChannel
$es4.$$package('flash.display').BitmapDataChannel = function () { throw new Error('Use of unimplemented class: BitmapDataChannel'); }
//flash.display.BitmapDataChannel


//flash.text.TextDisplayMode
$es4.$$package('flash.text').TextDisplayMode = function () { throw new Error('Use of unimplemented class: TextDisplayMode'); }
//flash.text.TextDisplayMode


//flash.net.URLLoaderDataFormat
$es4.$$package('flash.net').URLLoaderDataFormat = (function ()
{
	//properties
	var $$j = {};
	URLLoaderDataFormat.BINARY = "binary";
	URLLoaderDataFormat.TEXT = "text";
	URLLoaderDataFormat.VARIABLES = "variables";

	//class pre initializer
	URLLoaderDataFormat.$$sinit = (function ()
	{
		URLLoaderDataFormat.$$sinit = undefined;

		//set prototype and constructor
		URLLoaderDataFormat.prototype = Object.create(Object.prototype);
		Object.defineProperty(URLLoaderDataFormat.prototype, "constructor", { value: URLLoaderDataFormat, enumerable: false });

		//hold private values
		Object.defineProperty(URLLoaderDataFormat.prototype, '$$v', {value:{}});
	});

	//class initializer
	URLLoaderDataFormat.$$cinit = (function ()
	{
		URLLoaderDataFormat.$$cinit = undefined;
	});

	function URLLoaderDataFormat()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof URLLoaderDataFormat) || $$this.$$URLLoaderDataFormat !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], URLLoaderDataFormat) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			URLLoaderDataFormat.$$construct($$this, $$args);
		}
	}

	//construct
	URLLoaderDataFormat.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (URLLoaderDataFormat.$$cinit !== undefined) URLLoaderDataFormat.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$URLLoaderDataFormat', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		URLLoaderDataFormat.$$iinit($$this);

		//call constructor
		if (args !== undefined) URLLoaderDataFormat.$$constructor.apply($$this, args);
	});

	//initializer
	URLLoaderDataFormat.$$iinit = (function ($$this)
	{
	});

	//constructor
	URLLoaderDataFormat.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(URLLoaderDataFormat, null, 'flash.net::URLLoaderDataFormat');
})();
//flash.net.URLLoaderDataFormat


//flash.display.DisplayObject
$es4.$$package('flash.display').DisplayObject = (function ()
{
	//imports
	var AccessibilityProperties;
	var enterDebugger;
	var DisplayObjectContainer;
	var IBitmapDrawable;
	var LoaderInfo;
	var Shader;
	var Stage;
	var EventDispatcher;
	var Matrix;
	var Point;
	var Rectangle;
	var Transform;
	var Vector3D;
	var Browser;
	var DisplayObject;

	//properties
	var $$j = {};
	Object.defineProperty(DisplayObject, '$_instanceCounter', {
	get:function () { if (DisplayObject.$$cinit !== undefined) DisplayObject.$$cinit(); return $$j.$_instanceCounter; },
	set:function (value) { if (DisplayObject.$$cinit !== undefined) DisplayObject.$$cinit(); $$j.$_instanceCounter = $es4.$$coerce(value, int); }
	});


	//class pre initializer
	DisplayObject.$$sinit = (function ()
	{
		DisplayObject.$$sinit = undefined;

		//initialize imports
		AccessibilityProperties = $es4.$$['flash.accessibility'].AccessibilityProperties;
		enterDebugger = $es4.$$['flash.debugger'].enterDebugger;
		DisplayObjectContainer = $es4.$$['flash.display'].DisplayObjectContainer;
		IBitmapDrawable = $es4.$$['flash.display'].IBitmapDrawable;
		LoaderInfo = $es4.$$['flash.display'].LoaderInfo;
		Shader = $es4.$$['flash.display'].Shader;
		Stage = $es4.$$['flash.display'].Stage;
		EventDispatcher = $es4.$$['flash.events'].EventDispatcher;
		Matrix = $es4.$$['flash.geom'].Matrix;
		Point = $es4.$$['flash.geom'].Point;
		Rectangle = $es4.$$['flash.geom'].Rectangle;
		Transform = $es4.$$['flash.geom'].Transform;
		Vector3D = $es4.$$['flash.geom'].Vector3D;
		Browser = $es4.$$['browser'].Browser;

		//ensure $$sinit is called on super class
		if (EventDispatcher.$$sinit !== undefined) EventDispatcher.$$sinit();

		//set prototype and constructor
		DisplayObject.prototype = Object.create(EventDispatcher.prototype);
		Object.defineProperty(DisplayObject.prototype, "constructor", { value: DisplayObject, enumerable: false });

		//hold private values
		Object.defineProperty(DisplayObject.prototype, '$$v', {value:{}});

		//protected instance method
		Object.defineProperty(DisplayObject.prototype, '$__createDomView', {
		get:function ()
		{
			var $$this = this;

			function $__createDomView()
			{
				return document.createElement('div');
			}

			return $$this.$$DisplayObject.$$$__createDomView || ($$this.$$DisplayObject.$$$__createDomView = $__createDomView);
		}});


		//internal instance method
		Object.defineProperty(DisplayObject.prototype, '$__addDomGraphicsView', {
		get:function ()
		{
			var $$this = this;

			function $__addDomGraphicsView($$$$domGraphicsView)
			{
				//set default parameter values
				var domGraphicsView = $es4.$$coerce($$$$domGraphicsView, Object);

				$$this.$$DisplayObject.$_properties.DisplayObjectScope.$_domGraphicsView = domGraphicsView;
				$$this.$$DisplayObject.$_properties.DisplayObjectScope.$_domView.appendChild(domGraphicsView);
				if ($$this.$$DisplayObject.$_properties.DisplayObjectScope.accessibilityProperties)
				{
					$$this.$$DisplayObject.$_properties.DisplayObjectScope.accessibilityProperties.$_applyProperties(domGraphicsView);
				}
			}

			return $$this.$$DisplayObject.$$$__addDomGraphicsView || ($$this.$$DisplayObject.$$$__addDomGraphicsView = $__addDomGraphicsView);
		}});


		//public instance method
		Object.defineProperty(DisplayObject.prototype, '$__properties', {
		get:function ()
		{
			var $$this = this;

			function $__properties($$$$object)
			{
				//set default parameter values
				var object = (0 > arguments.length - 1) ? null : $$$$object;

				if ($$this.$$DisplayObject.$_properties === undefined)
				{
					object = $es4.$$super2($$this, EventDispatcher, '$$EventDispatcher', '$__properties', 'func', undefined)(object);
					var pscope = $es4.$$getOwnScope($$this, DisplayObject);
					var id = 'instance' + (DisplayObject.$_instanceCounter++);
					var matrix = $es4.$$primitive(new Matrix());
					object.DisplayObjectScope = {pscope:pscope, $_id:id, $_sudoScaleX:1, $_sudoScaleY:1, $_sudoRotation:0, $_childBoundsData:{}, $_matrix:matrix, $_scaleX:1, $_scaleY:1, $_rotation:0, $_x:0, $_y:0, $_x1:0, $_y1:0, $_width:0, $_height:0, $_bounds:[0, 0, 0, 0], $_onChildBoundsChange:$$this.$$DisplayObject.$_onChildBoundsChange, $_notifyParentOfBoundsChange:$$this.$$DisplayObject.$_notifyParentOfBoundsChange, $_setExplicitBounds:$$this.$$DisplayObject.$_setExplicitBounds, $_scrollRectXOffset:0, $_scrollRectYOffset:0, $_opacity:1, $_visible:true, $_cacheAsBitmap:false, $_toCanvas:$$this.$$DisplayObject.$_toCanvas, $_scrollRect:null};
					object.TLScope = $$this;
					return $$this.$$DisplayObject.$_properties = object;
				}
				return $$this.$$DisplayObject.$_properties;
			}

			return $$this.$$DisplayObject.$$$__properties || ($$this.$$DisplayObject.$$$__properties = $__properties);
		}});


		//public instance method
		Object.defineProperty(DisplayObject.prototype, '$__notify', {
		get:function ()
		{
			var $$this = this;

			function $__notify($$$$name, $$$$args)
			{
				//set default parameter values
				var name = $es4.$$coerce($$$$name, String);
				var args = $$$$args;

			}

			return $$this.$$DisplayObject.$$$__notify || ($$this.$$DisplayObject.$$$__notify = $__notify);
		}});


		//private instance method
		DisplayObject.prototype.$$v.$_setExplicitBounds = {
		get:function ()
		{
			var $$this = this.$$this;

			function $_setExplicitBounds($$$$width, $$$$height)
			{
				//set default parameter values
				var width = $es4.$$coerce($$$$width, Number);
				var height = $es4.$$coerce($$$$height, Number);

				var scope = $$this.$$DisplayObject.$_properties.DisplayObjectScope;
				scope.$_width = width;
				scope.$_height = height;
				$$this.$$DisplayObject.$_recalculateBounds();
			}

			return $$this.$$DisplayObject.$$p.$$$_setExplicitBounds || ($$this.$$DisplayObject.$$p.$$$_setExplicitBounds = $_setExplicitBounds);
		}};


		//private instance method
		DisplayObject.prototype.$$v.$_notifyParentOfBoundsChange = {
		get:function ()
		{
			var $$this = this.$$this;

			function $_notifyParentOfBoundsChange()
			{
				var scope = $$this.$$DisplayObject.$_properties.DisplayObjectScope;
				var domView = scope.$_domView;
				var parent = domView.parentNode ? domView.parentNode.displayObject : null;
				if (!parent)
				{
					return;
				}
				if (scope.$_visible === true)
				{
					$$this.$$DisplayObject.$_transform();
				}
				var parentScope = parent.$__properties().DisplayObjectScope;
				parentScope.$_onChildBoundsChange(scope.$_id, scope.$_height !== 0 || scope.$_width !== 0 || scope.$_scrollRect !== null ? scope.$_bounds : null);
			}

			return $$this.$$DisplayObject.$$p.$$$_notifyParentOfBoundsChange || ($$this.$$DisplayObject.$$p.$$$_notifyParentOfBoundsChange = $_notifyParentOfBoundsChange);
		}};


		//private instance method
		DisplayObject.prototype.$$v.$_onChildBoundsChange = {
		get:function ()
		{
			var $$this = this.$$this;

			function $_onChildBoundsChange($$$$childID, $$$$bounds)
			{
				//set default parameter values
				var childID = $$$$childID;
				var bounds = $$$$bounds;

				var scope = $$this.$$DisplayObject.$_properties.DisplayObjectScope;
				var childBoundsData = scope.$_childBoundsData;
				if (!bounds)
				{
					delete childBoundsData[childID];
				}
				else
				{
					childBoundsData[childID] = bounds.slice();
				}
				$$this.$$DisplayObject.$_recalculateChildBasedBounds();
			}

			return $$this.$$DisplayObject.$$p.$$$_onChildBoundsChange || ($$this.$$DisplayObject.$$p.$$$_onChildBoundsChange = $_onChildBoundsChange);
		}};


		//private instance method
		DisplayObject.prototype.$$v.$_recalculateChildBasedBounds = {
		get:function ()
		{
			var $$this = this.$$this;

			function $_recalculateChildBasedBounds()
			{
				var scope = $$this.$$DisplayObject.$_properties.DisplayObjectScope;
				var childBoundsData = scope.$_childBoundsData;
				var x1 = Number.POSITIVE_INFINITY;
				var y1 = Number.POSITIVE_INFINITY;
				var x2 = Number.NEGATIVE_INFINITY;
				var y2 = Number.NEGATIVE_INFINITY;
				var x = 0;
				var y = 0;
				var width = 0;
				var height = 0;
				var abs = Math.abs;
				for (var eachChildID in childBoundsData)
				{
					var eachBounds = childBoundsData[eachChildID];
					var innerX = eachBounds[0];
					var innerY = eachBounds[1];
					if (innerX < x1)
					{
						x1 = innerX;
					}
					if (innerY < y1)
					{
						y1 = innerY;
					}
					if (innerX + eachBounds[2] > x2)
					{
						x2 = innerX + eachBounds[2];
					}
					if (innerY + eachBounds[3] > y2)
					{
						y2 = innerY + eachBounds[3];
					}
				}
				if (x1 === Number.POSITIVE_INFINITY)
				{
					scope.$_x1 = scope.$_x;
					scope.$_y1 = scope.$_y;
					$$this.$$DisplayObject.$_recalculateBounds();
					return;
				}
				x = x1 + scope.$_x;
				y = y1 + scope.$_y;
				width = abs(x2 - x1);
				height = abs(y2 - y1);
				if (height === scope.$_height && width === scope.$_width && x === scope.$_x1 && y === scope.$_y1)
				{
					return;
				}
				scope.$_x1 = x;
				scope.$_y1 = y;
				scope.$_height = height;
				scope.$_width = width;
				if (scope.$_scrollRect !== null)
				{
					$$this.$$DisplayObject.$_notifyParentOfBoundsChange();
					return;
				}
				$$this.$$DisplayObject.$_recalculateBounds();
			}

			return $$this.$$DisplayObject.$$p.$$$_recalculateChildBasedBounds || ($$this.$$DisplayObject.$$p.$$$_recalculateChildBasedBounds = $_recalculateChildBasedBounds);
		}};


		//private instance method
		DisplayObject.prototype.$$v.$_recalculateBounds = {
		get:function ()
		{
			var $$this = this.$$this;

			function $_recalculateBounds()
			{
				var scope = $$this.$$DisplayObject.$_properties.DisplayObjectScope;
				var matrix = scope.$_matrix;
				var width = scope.$_scrollRect !== null ? scope.$_scrollRect.width : scope.$_width;
				var height = scope.$_scrollRect !== null ? scope.$_scrollRect.height : scope.$_height;
				var rotation = scope.$_rotation;
				var value;
				var bounds = scope.$_bounds;
				if (rotation)
				{
					var xDiff = $es4.$$coerce(scope.$_x1 - scope.$_x, Number);
					var yDiff = $es4.$$coerce(scope.$_y1 - scope.$_y, Number);
					var point1 = matrix.$__transformPoint(xDiff, yDiff);
					var point2 = matrix.$__transformPoint(xDiff + width, yDiff);
					var point3 = matrix.$__transformPoint(xDiff + width, yDiff + height);
					var point4 = matrix.$__transformPoint(xDiff, yDiff + height);
					var left = Math.min(point1[0], point2[0], point3[0], point4[0]);
					var right = Math.max(point1[0], point2[0], point3[0], point4[0]);
					var top = Math.min(point1[1], point2[1], point3[1], point4[1]);
					var bottom = Math.max(point1[1], point2[1], point3[1], point4[1]);
					var x2 = right - left;
					var y2 = bottom - top;
					bounds[0] = left;
					bounds[1] = top;
					bounds[2] = x2;
					bounds[3] = y2;
				}
				else
				{
					value = matrix.$__transformPoint(scope.$_x1 - scope.$_x, 0)[0];
					bounds[0] = value;
					value = matrix.$__transformPoint(0, scope.$_y1 - scope.$_y)[1];
					bounds[1] = value;
					value = matrix.$__deltaTransformPoint(width, 0)[0];
					bounds[2] = value;
					value = matrix.$__deltaTransformPoint(0, height)[1];
					bounds[3] = value;
				}
				$$this.$$DisplayObject.$_notifyParentOfBoundsChange();
			}

			return $$this.$$DisplayObject.$$p.$$$_recalculateBounds || ($$this.$$DisplayObject.$$p.$$$_recalculateBounds = $_recalculateBounds);
		}};


		//private instance method
		DisplayObject.prototype.$$v.$_transform = {
		get:function ()
		{
			var $$this = this.$$this;

			function $_transform()
			{
				var properties = $$this.$$DisplayObject.$_properties.DisplayObjectScope;
				var previousTransformValues = $$this.$$DisplayObject.$_previousTransformValues;
				var style = properties.$_domView.style;
				var cacheAsBitmap = $es4.$$coerce(properties.$_cacheAsBitmap, Boolean);
				if (cacheAsBitmap)
				{
					if (previousTransformValues.rotation != properties.$_rotation || previousTransformValues.scaleX != properties.$_scaleX || previousTransformValues.scaleY != properties.$_scaleY || previousTransformValues.x != (properties.$_x + properties.$_scrollRectXOffset) || previousTransformValues.y != (properties.$_y + properties.$_scrollRectYOffset))
					{
						style[Browser.getTransformString()] = 'translate3d(' + (properties.$_x + properties.$_scrollRectXOffset) + 'px, ' + (properties.$_y + properties.$_scrollRectYOffset) + 'px, 0px) rotate3d(0, 0, 1,' + properties.$_rotation + 'deg) scale3d(' + properties.$_scaleX + ',' + properties.$_scaleY + ', 1)';
						previousTransformValues.y = properties.$_y + properties.$_scrollRectYOffset;
						previousTransformValues.x = properties.$_x + properties.$_scrollRectXOffset;
						previousTransformValues.rotation = properties.$_rotation;
						previousTransformValues.scaleX = properties.$_scaleX;
						previousTransformValues.scaleY = properties.$_scaleY;
					}
					return;
				}
				if (previousTransformValues.x != (properties.$_x + properties.$_scrollRectXOffset))
				{
					style.left = (properties.$_x + properties.$_scrollRectXOffset) + 'px';
					previousTransformValues.x = properties.$_x + properties.$_scrollRectXOffset;
				}
				if (previousTransformValues.y != (properties.$_y + properties.$_scrollRectYOffset))
				{
					style.top = (properties.$_y + properties.$_scrollRectYOffset) + 'px';
					previousTransformValues.y = properties.$_y + properties.$_scrollRectYOffset;
				}
				if (previousTransformValues.rotation != properties.$_rotation || previousTransformValues.scaleX != properties.$_scaleX || previousTransformValues.scaleY != properties.$_scaleY)
				{
					style[Browser.getTransformString()] = 'rotate(' + properties.$_rotation + 'deg) scale(' + properties.$_scaleX + ',' + properties.$_scaleY + ')';
					previousTransformValues.rotation = properties.$_rotation;
					previousTransformValues.scaleX = properties.$_scaleX;
					previousTransformValues.scaleY = properties.$_scaleY;
				}
			}

			return $$this.$$DisplayObject.$$p.$$$_transform || ($$this.$$DisplayObject.$$p.$$$_transform = $_transform);
		}};


		//public instance method
		Object.defineProperty(DisplayObject.prototype, 'localToGlobal', {
		get:function ()
		{
			var $$this = this;

			function localToGlobal($$$$point)
			{
				//set default parameter values
				var point = $es4.$$coerce($$$$point, Point);

				if ($es4.$$is($$this, Stage))
				{
					return point.clone();
				}
				var thisScope = $$this.$$DisplayObject.$_properties.DisplayObjectScope;
				var thisBoundsRelativeToParent = thisScope.$_bounds;
				var current = null;
				var currentScope;
				var width = thisScope.$_width;
				var height = thisScope.$_height;
				var value;
				var x1;
				var y1;
				var thisMatrix = $es4.$$coerce(thisScope.$_matrix.clone(), Matrix);
				current = $es4.$$coerce(thisScope.$_domView.parentNode ? thisScope.$_domView.parentNode.displayObject : null, DisplayObjectContainer);
				while (current !== null)
				{
					currentScope = current.$__properties().DisplayObjectScope;
					thisMatrix.concat(currentScope.$_matrix);
					current = $es4.$$coerce(currentScope.$_domView.parentNode ? currentScope.$_domView.parentNode.displayObject : null, DisplayObjectContainer);
				}
				var xDiff = 0;
				var yDiff = 0;
				var array = thisMatrix.$__transformPoint(xDiff + point.x, yDiff + point.y);
				value = array[0];
				x1 = (Math.round((Math.floor(Math.abs(value + .00125) * 1000) / 1000) * 20) / 20) * (value > 0 ? 1 : -1);
				value = array[1];
				y1 = (Math.round((Math.floor(Math.abs(value + .00125) * 1000) / 1000) * 20) / 20) * (value > 0 ? 1 : -1);
				return $es4.$$primitive(new Point(x1, y1));
			}

			return $$this.$$DisplayObject.$$localToGlobal || ($$this.$$DisplayObject.$$localToGlobal = localToGlobal);
		}});


		//public instance method
		Object.defineProperty(DisplayObject.prototype, 'globalToLocal', {
		get:function ()
		{
			var $$this = this;

			function globalToLocal($$$$point)
			{
				//set default parameter values
				var point = $es4.$$coerce($$$$point, Point);

				if ($es4.$$is($$this, Stage))
				{
					return point.clone();
				}
				var thisScope = $$this.$$DisplayObject.$_properties.DisplayObjectScope;
				var thisBoundsRelativeToParent = thisScope.$_bounds;
				var current = null;
				var currentScope;
				var width = thisScope.$_width;
				var height = thisScope.$_height;
				var value;
				var x1;
				var y1;
				var thisMatrix = $es4.$$coerce(thisScope.$_matrix.clone(), Matrix);
				current = $es4.$$coerce(thisScope.$_domView.parentNode ? thisScope.$_domView.parentNode.displayObject : null, DisplayObjectContainer);
				while (current !== null)
				{
					currentScope = current.$__properties().DisplayObjectScope;
					thisMatrix.concat(currentScope.$_matrix);
					current = $es4.$$coerce(currentScope.$_domView.parentNode ? currentScope.$_domView.parentNode.displayObject : null, DisplayObjectContainer);
				}
				thisMatrix.invert();
				var xDiff = 0;
				var yDiff = 0;
				var array = thisMatrix.$__transformPoint(xDiff + point.x, yDiff + point.y);
				value = array[0];
				x1 = (Math.round((Math.floor(Math.abs(value + .00125) * 1000) / 1000) * 20) / 20) * (value > 0 ? 1 : -1);
				value = array[1];
				y1 = (Math.round((Math.floor(Math.abs(value + .00125) * 1000) / 1000) * 20) / 20) * (value > 0 ? 1 : -1);
				return $es4.$$primitive(new Point(x1, y1));
			}

			return $$this.$$DisplayObject.$$globalToLocal || ($$this.$$DisplayObject.$$globalToLocal = globalToLocal);
		}});


		//public instance method
		Object.defineProperty(DisplayObject.prototype, 'hitTestObject', {
		get:function ()
		{
			var $$this = this;

			function hitTestObject($$$$obj)
			{
				//set default parameter values
				var obj = $es4.$$coerce($$$$obj, $es4.$$['flash.display'].DisplayObject);

				throw $es4.$$primitive(new Error('DisplayObject: attempted call to an unimplemented function "hitTestObject"'));
			}

			return $$this.$$DisplayObject.$$hitTestObject || ($$this.$$DisplayObject.$$hitTestObject = hitTestObject);
		}});


		//public instance method
		Object.defineProperty(DisplayObject.prototype, 'hitTestPoint', {
		get:function ()
		{
			var $$this = this;

			function hitTestPoint($$$$x, $$$$y, $$$$shapeFlag)
			{
				//set default parameter values
				var x = $es4.$$coerce($$$$x, Number);
				var y = $es4.$$coerce($$$$y, Number);
				var shapeFlag = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$shapeFlag, Boolean);

				throw $es4.$$primitive(new Error('DisplayObject: attempted call to an unimplemented function "hitTestPoint"'));
			}

			return $$this.$$DisplayObject.$$hitTestPoint || ($$this.$$DisplayObject.$$hitTestPoint = hitTestPoint);
		}});


		//public instance method
		Object.defineProperty(DisplayObject.prototype, 'getBounds', {
		get:function ()
		{
			var $$this = this;

			function getBounds($$$$targetCoordinateSpace)
			{
				//set default parameter values
				var targetCoordinateSpace = $es4.$$coerce($$$$targetCoordinateSpace, $es4.$$['flash.display'].DisplayObject);

				targetCoordinateSpace = $es4.$$coerce(targetCoordinateSpace || $$this, $es4.$$['flash.display'].DisplayObject);
				var thisScope = $$this.$$DisplayObject.$_properties.DisplayObjectScope;
				var thisBoundsRelativeToParent = thisScope.$_bounds;
				var targetScope = targetCoordinateSpace.$__properties().DisplayObjectScope;
				var targetBoundsRelativeToParent = targetScope.$_bounds;
				var x1;
				var y1;
				var x2;
				var y2;
				var width = thisScope.$_width;
				var height = thisScope.$_height;
				var value;
				if (targetCoordinateSpace === $$this)
				{
					value = thisScope.$_x1 - thisScope.$_x;
					x1 = (Math.round((Math.floor(Math.abs(value + .00125) * 1000) / 1000) * 20) / 20) * (value > 0 ? 1 : -1);
					value = thisScope.$_y1 - thisScope.$_y;
					y1 = (Math.round((Math.floor(Math.abs(value + .00125) * 1000) / 1000) * 20) / 20) * (value > 0 ? 1 : -1);
					value = width;
					x2 = (Math.round((Math.floor(Math.abs(value + .00125) * 1000) / 1000) * 20) / 20) * (value > 0 ? 1 : -1);
					value = height;
					y2 = (Math.round((Math.floor(Math.abs(value + .00125) * 1000) / 1000) * 20) / 20) * (value > 0 ? 1 : -1);
					return $es4.$$primitive(new Rectangle(x1, y1, x2, y2));
				}
				var current = null;
				var currentScope;
				var matrix = null;
				var thisMatrix = $es4.$$coerce(thisScope.$_matrix.clone(), Matrix);
				current = $es4.$$coerce(thisScope.$_domView.parentNode ? thisScope.$_domView.parentNode.displayObject : null, DisplayObjectContainer);
				while (current !== null && current !== targetCoordinateSpace)
				{
					currentScope = current.$__properties().DisplayObjectScope;
					thisMatrix.concat(currentScope.$_matrix);
					current = $es4.$$coerce(currentScope.$_domView.parentNode ? currentScope.$_domView.parentNode.displayObject : null, DisplayObjectContainer);
				}
				if (current === targetCoordinateSpace)
				{
					matrix = thisMatrix;
				}
				else
				{
					var targetMatrix = $es4.$$coerce(targetScope.$_matrix.clone(), Matrix);
					current = $es4.$$coerce(targetScope.$_domView.parentNode ? targetScope.$_domView.parentNode.displayObject : null, DisplayObjectContainer);
					while (current !== null && current !== $$this)
					{
						currentScope = current.$__properties().DisplayObjectScope;
						targetMatrix.concat(currentScope.$_matrix);
						current = $es4.$$coerce(currentScope.$_domView.parentNode ? currentScope.$_domView.parentNode.displayObject : null, DisplayObjectContainer);
					}
					targetMatrix.invert();
					if (current === $$this)
					{
						matrix = targetMatrix;
					}
				}
				if (matrix === null)
				{
					thisMatrix.concat(targetMatrix);
					matrix = thisMatrix;
				}
				var xDiff = $es4.$$coerce(thisScope.$_x1 - thisScope.$_x, Number);
				var yDiff = $es4.$$coerce(thisScope.$_y1 - thisScope.$_y, Number);
				var point1 = matrix.$__transformPoint(xDiff, yDiff);
				var point2 = matrix.$__transformPoint(xDiff + width, yDiff);
				var point3 = matrix.$__transformPoint(xDiff + width, yDiff + height);
				var point4 = matrix.$__transformPoint(xDiff, yDiff + height);
				var left = Math.min(point1[0], point2[0], point3[0], point4[0]);
				var right = Math.max(point1[0], point2[0], point3[0], point4[0]);
				var top = Math.min(point1[1], point2[1], point3[1], point4[1]);
				var bottom = Math.max(point1[1], point2[1], point3[1], point4[1]);
				value = right - left;
				value = (Math.round((Math.floor(Math.abs(value + .00125) * 1000) / 1000) * 20) / 20) * (value > 0 ? 1 : -1);
				var x2 = value;
				value = bottom - top;
				value = (Math.round((Math.floor(Math.abs(value + .00125) * 1000) / 1000) * 20) / 20) * (value > 0 ? 1 : -1);
				var y2 = value;
				value = left;
				value = (Math.round((Math.floor(Math.abs(value + .00125) * 1000) / 1000) * 20) / 20) * (value > 0 ? 1 : -1);
				var x1 = value;
				value = top;
				value = (Math.round((Math.floor(Math.abs(value + .00125) * 1000) / 1000) * 20) / 20) * (value > 0 ? 1 : -1);
				var y1 = value;
				return $es4.$$primitive(new Rectangle(x1, y1, x2, y2));
			}

			return $$this.$$DisplayObject.$$getBounds || ($$this.$$DisplayObject.$$getBounds = getBounds);
		}});


		//private instance method
		DisplayObject.prototype.$$v.$_toCanvas = {
		get:function ()
		{
			var $$this = this.$$this;

			function $_toCanvas()
			{
				var node = $$this.$$DisplayObject.$_properties.DisplayObjectScope.$_domView;
				var canvas;
				var bitmapData = null;
				if (node.nodeName == 'CANVAS')
				{
					canvas = document.createElement('canvas');
					canvas.width = node.width;
					canvas.height = node.height;
					canvas.getContext('2d').drawImage(node, 0, 0);
					return canvas;
				}
				var clone = node.cloneNode(true);
				var img;
				var wrap;
				var data = null;
				var bin;
				var childNodesArray = [clone.childNodes];
				while (childNodesArray.length)
				{
					var childNodes = childNodesArray.pop();
					for (var i = $es4.$$coerce(childNodes.length, int); i--;)
					{
						var child = childNodes[i];
						if (child.nodeName == 'SVG')
						{
							img = document.createElement('img');
							img.style.cssText = child.style.cssText;
							child.parentNode.replaceChild(img, child);
							wrap = document.createElement('div');
							wrap.appendChild(child);
							data = $es4.$$coerce(wrap.innerHTML, String);
							bin = window.btoa(data);
							img.setAttribute('src', 'data:' + 'image/svg+xml;charset=utf-8' + ';base64,' + bin);
						}
						else if (child.nodeName == 'CANVAS')
						{
							img = document.createElement('img');
							img.style.cssText = child.style.cssText;
							child.parentNode.replaceChild(img, child);
						}
						else if (child.childNodes)
						{
							childNodesArray.push(child.childNodes);
						}
					}
				}
				wrap = document.createElement('div');
				wrap.appendChild(clone);
				var doc = document.implementation.createHTMLDocument('');
				doc.body.innerHTML = wrap.innerHTML;
				var wellFormedHTML = $es4.$$primitive(new window.XMLSerializer().serializeToString(doc.body.firstChild));
				var width = $es4.$$coerce($$this.width, Number);
				var height = $es4.$$coerce($$this.height, Number);
				data = '<svg xmlns="http://www.w3.org/2000/svg" width="' + width + '" height="' + height + '"><foreignObject width="' + width + '" height="' + height + '">' + wellFormedHTML + '</foreignObject></svg>';
				bin = window.btoa(data);
				img = document.createElement('img');
				img.setAttribute('src', 'data:' + 'image/svg+xml;charset=utf-8' + ';base64,' + bin);
				canvas = document.createElement('canvas');
				canvas.width = width;
				canvas.height = height;
				canvas.getContext('2d').drawImage(img, 0, 0);
				return canvas;
			}

			return $$this.$$DisplayObject.$$p.$$$_toCanvas || ($$this.$$DisplayObject.$$p.$$$_toCanvas = $_toCanvas);
		}};


		//public instance method
		Object.defineProperty(DisplayObject.prototype, 'globalToLocal3D', {
		get:function ()
		{
			var $$this = this;

			function globalToLocal3D($$$$point)
			{
				//set default parameter values
				var point = $es4.$$coerce($$$$point, Point);

				throw $es4.$$primitive(new Error('DisplayObject: attempted call to an unimplemented function "globalToLocal3D"'));
			}

			return $$this.$$DisplayObject.$$globalToLocal3D || ($$this.$$DisplayObject.$$globalToLocal3D = globalToLocal3D);
		}});


		//public instance method
		Object.defineProperty(DisplayObject.prototype, 'local3DToGlobal', {
		get:function ()
		{
			var $$this = this;

			function local3DToGlobal($$$$point3d)
			{
				//set default parameter values
				var point3d = $es4.$$coerce($$$$point3d, Vector3D);

				throw $es4.$$primitive(new Error('DisplayObject: attempted call to an unimplemented function "local3DToGlobal"'));
			}

			return $$this.$$DisplayObject.$$local3DToGlobal || ($$this.$$DisplayObject.$$local3DToGlobal = local3DToGlobal);
		}});


		//public instance method
		Object.defineProperty(DisplayObject.prototype, 'getRect', {
		get:function ()
		{
			var $$this = this;

			function getRect($$$$targetCoordinateSpace)
			{
				//set default parameter values
				var targetCoordinateSpace = $es4.$$coerce($$$$targetCoordinateSpace, $es4.$$['flash.display'].DisplayObject);

				throw $es4.$$primitive(new Error('DisplayObject: attempted call to an unimplemented function "getRect"'));
			}

			return $$this.$$DisplayObject.$$getRect || ($$this.$$DisplayObject.$$getRect = getRect);
		}});

		Object.defineProperty(DisplayObject.prototype, 'x', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$DisplayObject.$_properties.DisplayObjectScope.$_x, Number);
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var $$this = this;
			if (isNaN(value))
			{
				value = 0;
			}
			else if (Math.abs(value) >= 107374182.4)
			{
				value = -107374182.4;
			}
			else
			{
				value = (Math.round((Math.floor(Math.abs(value + .00125) * 1000) / 1000) * 20) / 20) * (value > 0 ? 1 : -1);
			}
			var scope = $$this.$$DisplayObject.$_properties.DisplayObjectScope;
			var matrix = scope.$_matrix;
			if (value === matrix.tx)
			{
				return;
			}
			matrix.translate(-matrix.tx, 0);
			matrix.translate(value, 0);
			scope.$_x = value;
			$$this.$$DisplayObject.$_recalculateChildBasedBounds();
		}});
		Object.defineProperty(DisplayObject.prototype, 'y', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$DisplayObject.$_properties.DisplayObjectScope.$_y, Number);
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var $$this = this;
			if (isNaN(value))
			{
				value = 0;
			}
			else if (Math.abs(value) >= 107374182.4)
			{
				value = -107374182.4;
			}
			else
			{
				value = (Math.round((Math.floor(Math.abs(value + .00125) * 1000) / 1000) * 20) / 20) * (value > 0 ? 1 : -1);
			}
			var scope = $$this.$$DisplayObject.$_properties.DisplayObjectScope;
			var matrix = scope.$_matrix;
			if (value === matrix.ty)
			{
				return;
			}
			matrix.translate(0, -matrix.ty);
			matrix.translate(0, value);
			scope.$_y = value;
			$$this.$$DisplayObject.$_recalculateChildBasedBounds();
		}});
		Object.defineProperty(DisplayObject.prototype, 'height', {get:function ()
		{
			var $$this = this;
			var value = $$this.$$DisplayObject.$_properties.DisplayObjectScope.$_bounds[3];
			return (Math.round((Math.floor(Math.abs(value + .00125) * 1000) / 1000) * 20) / 20) * (value > 0 ? 1 : -1);
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var $$this = this;
			if (value < 0)
			{
				return;
			}
			var scope = $$this.$$DisplayObject.$_properties.DisplayObjectScope;
			var scaleY = scope.$_scaleY;
			var matrix = scope.$_matrix;
			var height = scope.$_height;
			if (isNaN(value))
			{
				value = 0;
			}
			if (value === 0 || height === 0)
			{
				var scaleX = scope.$_scaleX;
				if (scaleY !== 0 || scaleX !== 0)
				{
					if (scaleY !== 0)
					{
						matrix.$__scale(1, 1 / scaleY);
					}
					if (scaleX !== 0)
					{
						matrix.$__scale(1 / scaleX, 1);
					}
					scope.$_sudoScaleX = scope.$_sudoScaleY = scope.$_scaleX = scope.$_scaleY = 0;
					scope.$_bounds[2] = 0;
					scope.$_bounds[3] = 0;
					$$this.$$DisplayObject.$_notifyParentOfBoundsChange();
				}
				return;
			}
			var desiredYScale = value / height;
			if (desiredYScale === scaleY)
			{
				return;
			}
			if (desiredYScale > 0x8000)
			{
				desiredYScale = 0x8000;
			}
			if (desiredYScale * height > 0x6666660)
			{
				desiredYScale = 0x6666660 / height;
			}
			if (scaleY !== 0)
			{
				matrix.$__scale(1, 1 / scaleY);
			}
			matrix.$__scale(1, desiredYScale);
			scope.$_sudoScaleY = scope.$_scaleY = desiredYScale;
			if (scope.$_rotation)
			{
				throw $es4.$$primitive(new Error('changing the width/height of a rotated object does not appear to function properly in flash. recommend setting object to rotation 0, then resizing, then rotating back to desired position; or, resize via scaleX and scaleY'));
			}
			$$this.$$DisplayObject.$_recalculateBounds();
		}});
		Object.defineProperty(DisplayObject.prototype, 'width', {get:function ()
		{
			var $$this = this;
			var value = $$this.$$DisplayObject.$_properties.DisplayObjectScope.$_bounds[2];
			return (Math.round((Math.floor(Math.abs(value + .00125) * 1000) / 1000) * 20) / 20) * (value > 0 ? 1 : -1);
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var $$this = this;
			if (value < 0)
			{
				return;
			}
			var scope = $$this.$$DisplayObject.$_properties.DisplayObjectScope;
			var scaleX = scope.$_scaleX;
			var matrix = scope.$_matrix;
			var width = scope.$_width;
			if (isNaN(value))
			{
				value = 0;
			}
			if (value === 0 || width === 0)
			{
				var scaleY = scope.$_scaleY;
				if (scaleY !== 0 || scaleX !== 0)
				{
					if (scaleY !== 0)
					{
						matrix.$__scale(1, 1 / scaleY);
					}
					if (scaleX !== 0)
					{
						matrix.$__scale(1 / scaleX, 1);
					}
					scope.$_sudoScaleX = scope.$_sudoScaleY = scope.$_scaleX = scope.$_scaleY = 0;
					scope.$_bounds[2] = 0;
					scope.$_bounds[3] = 0;
					$$this.$$DisplayObject.$_notifyParentOfBoundsChange();
				}
				return;
			}
			var desiredXScale = value / width;
			if (desiredXScale === scaleX)
			{
				return;
			}
			if (desiredXScale > 0x8000)
			{
				desiredXScale = 0x8000;
			}
			if (desiredXScale * width > 0x6666660)
			{
				desiredXScale = 0x6666660 / width;
			}
			if (scaleX !== 0)
			{
				matrix.$__scale(1 / scaleX, 1);
			}
			matrix.$__scale(desiredXScale, 1);
			scope.$_sudoScaleX = scope.$_scaleX = desiredXScale;
			if (scope.$_rotation)
			{
				throw $es4.$$primitive(new Error('changing the width/height of a rotated object does not appear to function properly in flash. recommend setting object to rotation 0, then resizing, then rotating back to desired position; or, resize via scaleX and scaleY'));
			}
			$$this.$$DisplayObject.$_recalculateBounds();
		}});
		Object.defineProperty(DisplayObject.prototype, 'scaleX', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$DisplayObject.$_properties.DisplayObjectScope.$_sudoScaleX, Number);
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var $$this = this;
			var scope = $$this.$$DisplayObject.$_properties.DisplayObjectScope;
			var sudoScaleX = scope.$_sudoScaleX;
			var scaleX = scope.$_scaleX;
			var matrix = scope.$_matrix;
			var width = scope.$_scrollRect !== null ? scope.$_scrollRect.width : scope.$_width;
			if (value === sudoScaleX)
			{
				return;
			}
			scope.$_sudoScaleX = value;
			if (isNaN(value))
			{
				value = 0;
			}
			else if (Math.abs(value) > 0x8000)
			{
				value = 0x8000;
			}
			else if (value < 0)
			{
				value = Math.abs(value);
			}
			if (value === scaleX)
			{
				return;
			}
			if (value === 0)
			{
				if (scaleX !== 0)
				{
					if (scaleX !== 0)
					{
						matrix.$__scale(1 / scaleX, 1);
					}
					scope.$_scaleX = 0;
					scope.$_bounds[2] = 0;
					$$this.$$DisplayObject.$_notifyParentOfBoundsChange();
				}
				return;
			}
			if (value * width > 0x6666660)
			{
				value = $es4.$$coerce(0x6666660 / width, Number);
			}
			var rotation = scope.$_rotation;
			if (rotation !== 0)
			{
				matrix.$__rotate(-(rotation * (Math.PI / 180)));
			}
			if (scaleX !== 0)
			{
				matrix.$__scale(1 / scaleX, 1);
			}
			value = Math.floor(value * 16384) / 16384;
			matrix.$__scale(value, 1);
			if (rotation !== 0)
			{
				matrix.$__rotate(rotation * (Math.PI / 180));
			}
			scope.$_scaleX = value;
			$$this.$$DisplayObject.$_recalculateBounds();
		}});
		Object.defineProperty(DisplayObject.prototype, 'scaleY', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$DisplayObject.$_properties.DisplayObjectScope.$_sudoScaleY, Number);
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var $$this = this;
			var scope = $$this.$$DisplayObject.$_properties.DisplayObjectScope;
			var sudoScaleY = scope.$_sudoScaleY;
			var scaleY = scope.$_scaleY;
			var matrix = scope.$_matrix;
			var height = scope.$_scrollRect !== null ? scope.$_scrollRect.height : scope.$_height;
			if (value === sudoScaleY)
			{
				return;
			}
			scope.$_sudoScaleY = value;
			if (isNaN(value))
			{
				value = 0;
			}
			else if (Math.abs(value) > 0x8000)
			{
				value = 0x8000;
			}
			else if (value < 0)
			{
				value = Math.abs(value);
			}
			if (value === scaleY)
			{
				return;
			}
			if (value === 0)
			{
				if (scaleY !== 0)
				{
					if (scaleY !== 0)
					{
						matrix.$__scale(1, 1 / scaleY);
					}
					scope.$_scaleY = 0;
					scope.$_bounds[3] = 0;
					$$this.$$DisplayObject.$_notifyParentOfBoundsChange();
				}
				return;
			}
			if (value * height > 0x6666660)
			{
				value = $es4.$$coerce(0x6666660 / height, Number);
			}
			var rotation = scope.$_rotation;
			if (rotation !== 0)
			{
				matrix.$__rotate(-(rotation * (Math.PI / 180)));
			}
			if (scaleY !== 0)
			{
				matrix.$__scale(1, 1 / scaleY);
			}
			value = Math.floor(value * 16384) / 16384;
			matrix.$__scale(1, value);
			if (rotation !== 0)
			{
				matrix.$__rotate(rotation * (Math.PI / 180));
			}
			scope.$_scaleY = value;
			$$this.$$DisplayObject.$_recalculateBounds();
		}});
		Object.defineProperty(DisplayObject.prototype, 'rotation', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$DisplayObject.$_properties.DisplayObjectScope.$_sudoRotation, Number);
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var $$this = this;
			var scope = $$this.$$DisplayObject.$_properties.DisplayObjectScope;
			var sudoRotation = scope.$_sudoRotation;
			var rotation = scope.$_rotation;
			var matrix = scope.$_matrix;
			if (value === sudoRotation || value === rotation)
			{
				return;
			}
			scope.$_sudoRotation = value;
			if (isNaN(value))
			{
				value = 0;
			}
			else if (!isFinite(value))
			{
				scope.$_sudoRotation = NaN;
				value = 0;
			}
			else if (Math.abs(value) > 180)
			{
				if (Math.abs(value) > 32767)
				{
					throw $es4.$$primitive(new Error('cannot set rotation to value greater than 32767 due to flash rotation bug'));
				}
				value = value % 360;
				value = (value + 360) % 360;
				if (value > 180)
				{
					value -= 360;
				}
				scope.$_sudoRotation = value;
			}
			if (scope.$_sudoRotation === sudoRotation || value === rotation)
			{
				return;
			}
			if (rotation !== 0)
			{
				matrix.$__rotate(-(rotation * (Math.PI / 180)));
			}
			matrix.$__rotate((value * (Math.PI / 180)));
			scope.$_rotation = value;
			$$this.$$DisplayObject.$_recalculateBounds();
		}});
		Object.defineProperty(DisplayObject.prototype, 'visible', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$DisplayObject.$_properties.DisplayObjectScope.$_visible, Boolean);
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var $$this = this;
			var scope = $$this.$$DisplayObject.$_properties.DisplayObjectScope;
			if (scope.$_visible === value)
			{
				return;
			}
			if (value === false)
			{
				$$this.$__notify('visibleFalse', null);
			}
			scope.$_visible = value;
			$$this.$$DisplayObject.$_properties.DisplayObjectScope.$_domView.style.visibility = (value === true) ? 'inherit' : 'hidden';
			$$this.$$DisplayObject.$_recalculateBounds();
		}});
		Object.defineProperty(DisplayObject.prototype, 'scrollRect', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$DisplayObject.$_properties.DisplayObjectScope.$_scrollRect, Rectangle);
		}, set:function ($$$$rectangle)
		{
			//set default parameter values
			var rectangle = $es4.$$coerce($$$$rectangle, Rectangle);

			var $$this = this;
			var properties = $$this.$$DisplayObject.$_properties.DisplayObjectScope;
			var style = properties.$_domView.style;
			if (!rectangle)
			{
				style.removeProperty('clip');
				style.removeProperty('width');
				style.removeProperty('height');
				properties.$_scrollRectXOffset = 0;
				properties.$_scrollRectYOffset = 0;
				properties.$_scrollRect = null;
				$$this.$$DisplayObject.$_recalculateBounds();
				return;
			}
			style.clip = 'rect(' + int(rectangle.y) + 'px ' + int(rectangle.x + rectangle.width) + 'px ' + int(rectangle.y + rectangle.height) + 'px ' + int(rectangle.x) + 'px)';
			properties.$_scrollRectXOffset = int(-rectangle.x);
			properties.$_scrollRectYOffset = int(-rectangle.y);
			properties.$_scrollRect = rectangle;
			style.width = rectangle.width + 'px';
			style.height = rectangle.height + 'px';
			$$this.$$DisplayObject.$_recalculateBounds();
		}});
		Object.defineProperty(DisplayObject.prototype, 'transform', {get:function ()
		{
			var $$this = this;
			return $es4.$$primitive(new Transform($$this));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Transform);

			var $$this = this;
			throw $es4.$$primitive(new Error('DisplayObject: attempted call to an unimplemented function "transform"'));
		}});
		Object.defineProperty(DisplayObject.prototype, 'mask', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('DisplayObject: attempted call to an unimplemented accessor "mask"'));
		}, set:function ($$$$displayObject)
		{
			//set default parameter values
			var displayObject = $es4.$$coerce($$$$displayObject, $es4.$$['flash.display'].DisplayObject);

			var $$this = this;
			throw $es4.$$primitive(new Error('DisplayObject: attempted call to an unimplemented accessor "mask"'));
		}});
		Object.defineProperty(DisplayObject.prototype, 'mouseX', {get:function ()
		{
			var $$this = this;
			var mouseXPositionRelativeToStage = Math.max(0, Stage.$__pageX - Stage.$__stageLeft);
			var mouseYPositionRelativeToStage = Math.max(0, Stage.$__pageY - Stage.$__stageTop);
			return $$this.globalToLocal($es4.$$primitive(new Point(mouseXPositionRelativeToStage / window.globalScale, mouseYPositionRelativeToStage / window.globalScale))).x;
		}});
		Object.defineProperty(DisplayObject.prototype, 'mouseY', {get:function ()
		{
			var $$this = this;
			var mouseXPositionRelativeToStage = Math.max(0, Stage.$__pageX - Stage.$__stageLeft);
			var mouseYPositionRelativeToStage = Math.max(0, Stage.$__pageY - Stage.$__stageTop);
			return $$this.globalToLocal($es4.$$primitive(new Point(mouseXPositionRelativeToStage / window.globalScale, mouseYPositionRelativeToStage / window.globalScale))).y;
		}});
		Object.defineProperty(DisplayObject.prototype, 'cacheAsBitmap', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$DisplayObject.$_properties.DisplayObjectScope.$_cacheAsBitmap, Boolean);
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var $$this = this;
			var properties = $$this.$$DisplayObject.$_properties.DisplayObjectScope;
			if (value == properties.$_cacheAsBitmap)
			{
				return;
			}
			var previousTransformValues = $$this.$$DisplayObject.$_previousTransformValues;
			var style = properties.$_domView.style;
			properties.$_cacheAsBitmap = value;
			if (value)
			{
				style.top = style.left = '0px';
			}
			previousTransformValues.y = NaN;
			previousTransformValues.x = NaN;
			previousTransformValues.rotation = NaN;
			previousTransformValues.scaleX = NaN;
			previousTransformValues.scaleY = NaN;
			$$this.$$DisplayObject.$_transform();
		}});
		Object.defineProperty(DisplayObject.prototype, 'name', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$DisplayObject.$_properties.DisplayObjectScope.$_domView.getAttribute('name'), String);
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			var $$this = this;
			$$this.$$DisplayObject.$_properties.DisplayObjectScope.$_domView.setAttribute('name', value);
		}});
		Object.defineProperty(DisplayObject.prototype, 'alpha', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$DisplayObject.$_properties.DisplayObjectScope.$_opacity, Number);
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var $$this = this;
			$$this.$$DisplayObject.$_properties.DisplayObjectScope.$_opacity = value;
			$$this.$$DisplayObject.$_properties.DisplayObjectScope.$_domView.style.opacity = value;
		}});
		Object.defineProperty(DisplayObject.prototype, 'parent', {get:function ()
		{
			var $$this = this;
			var domView = $$this.$$DisplayObject.$_properties.DisplayObjectScope.$_domView;
			return $es4.$$coerce(domView.parentNode ? domView.parentNode.displayObject : null, DisplayObjectContainer);
		}});
		Object.defineProperty(DisplayObject.prototype, 'root', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$DisplayObject.$_properties.DisplayObjectScope.$_root, $es4.$$['flash.display'].DisplayObject);
		}});
		Object.defineProperty(DisplayObject.prototype, 'stage', {get:function ()
		{
			var $$this = this;
			var parent = $es4.$$coerce($$this, $es4.$$['flash.display'].DisplayObject);
			while (parent)
			{
				if ($es4.$$is(parent, Stage))
				{
					return $es4.$$coerce($es4.$$as(parent, Stage), Stage);
				}
				var domView = parent.$__properties().DisplayObjectScope.$_domView;
				parent = $es4.$$coerce(domView.parentNode ? domView.parentNode.displayObject : null, $es4.$$['flash.display'].DisplayObject);
			}
			return null;
		}});
		Object.defineProperty(DisplayObject.prototype, 'loaderInfo', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$DisplayObject.$_properties.DisplayObjectScope.$_loaderInfo, LoaderInfo);
		}});
		Object.defineProperty(DisplayObject.prototype, 'blendMode', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('DisplayObject: attempted call to an unimplemented function "blendMode"'));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			var $$this = this;
			throw $es4.$$primitive(new Error('DisplayObject: attempted call to an unimplemented function "blendMode"'));
		}});
		Object.defineProperty(DisplayObject.prototype, 'blendShader', {set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Shader);

			var $$this = this;
			throw $es4.$$primitive(new Error('DisplayObject: attempted call to an unimplemented function "blendShader"'));
		}});
		Object.defineProperty(DisplayObject.prototype, 'filters', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('DisplayObject: attempted call to an unimplemented function "filters"'));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Array);

			var $$this = this;
			throw $es4.$$primitive(new Error('DisplayObject: attempted call to an unimplemented function "filters"'));
		}});
		Object.defineProperty(DisplayObject.prototype, 'opaqueBackground', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('DisplayObject: attempted call to an unimplemented function "opaqueBackground"'));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			var $$this = this;
			throw $es4.$$primitive(new Error('DisplayObject: attempted call to an unimplemented function "opaqueBackground"'));
		}});
		Object.defineProperty(DisplayObject.prototype, 'rotationX', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('DisplayObject: attempted call to an unimplemented function "rotationX"'));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var $$this = this;
			throw $es4.$$primitive(new Error('DisplayObject: attempted call to an unimplemented function "rotationX"'));
		}});
		Object.defineProperty(DisplayObject.prototype, 'rotationY', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('DisplayObject: attempted call to an unimplemented function "rotationY"'));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var $$this = this;
			throw $es4.$$primitive(new Error('DisplayObject: attempted call to an unimplemented function "rotationY"'));
		}});
		Object.defineProperty(DisplayObject.prototype, 'rotationZ', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('DisplayObject: attempted call to an unimplemented function "rotationZ"'));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var $$this = this;
			throw $es4.$$primitive(new Error('DisplayObject: attempted call to an unimplemented function "rotationZ"'));
		}});
		Object.defineProperty(DisplayObject.prototype, 'scale9Grid', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('DisplayObject: attempted call to an unimplemented function "scale9Grid"'));
		}, set:function ($$$$innerRectangle)
		{
			//set default parameter values
			var innerRectangle = $es4.$$coerce($$$$innerRectangle, Rectangle);

			var $$this = this;
			throw $es4.$$primitive(new Error('DisplayObject: attempted call to an unimplemented function "scale9Grid"'));
		}});
		Object.defineProperty(DisplayObject.prototype, 'scaleZ', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('DisplayObject: attempted call to an unimplemented function "scaleZ"'));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var $$this = this;
			throw $es4.$$primitive(new Error('DisplayObject: attempted call to an unimplemented function "scaleZ"'));
		}});
		Object.defineProperty(DisplayObject.prototype, 'z', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('DisplayObject: attempted call to an unimplemented function "z"'));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var $$this = this;
			throw $es4.$$primitive(new Error('DisplayObject: attempted call to an unimplemented function "z"'));
		}});
		Object.defineProperty(DisplayObject.prototype, 'accessibilityProperties', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$DisplayObject.$_properties.DisplayObjectScope.accessibilityProperties, AccessibilityProperties);
		}, set:function ($$$$accessibilityProperties)
		{
			//set default parameter values
			var accessibilityProperties = $es4.$$coerce($$$$accessibilityProperties, AccessibilityProperties);

			var $$this = this;
			$$this.$$DisplayObject.$_properties.DisplayObjectScope.accessibilityProperties = accessibilityProperties;
			if (accessibilityProperties)
			{
				accessibilityProperties.$_setOwner($$this);
			}
		}});

		//properties
		DisplayObject.prototype.$$v.$_previousTransformValues = {
		get:function () { var $$this = this.$$this; return $$this.$$DisplayObject.$$p.$_previousTransformValues; },
		set:function (value) { var $$this = this.$$this; $$this.$$DisplayObject.$$p.$_previousTransformValues = value }
		};

		DisplayObject.prototype.$$v.$_properties = {
		get:function () { var $$this = this.$$this; return $$this.$$DisplayObject.$$p.$_properties; },
		set:function (value) { var $$this = this.$$this; $$this.$$DisplayObject.$$p.$_properties = value }
		};

	});

	//class initializer
	DisplayObject.$$cinit = (function ()
	{
		DisplayObject.$$cinit = undefined;

		//initialize properties
		$$j.$_instanceCounter = $es4.$$coerce(0, int);
	
	});

	function DisplayObject()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof DisplayObject) || $$this.$$DisplayObject !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], DisplayObject) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			DisplayObject.$$construct($$this, $$args);
		}
	}

	//construct
	DisplayObject.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (DisplayObject.$$cinit !== undefined) DisplayObject.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$DisplayObject', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$DisplayObject, '$_previousTransformValues', DisplayObject.prototype.$$v.$_previousTransformValues);
		Object.defineProperty($$this.$$DisplayObject, '$_properties', DisplayObject.prototype.$$v.$_properties);

		//private instance method
		Object.defineProperty($$this.$$DisplayObject, '$_setExplicitBounds', DisplayObject.prototype.$$v.$_setExplicitBounds);

		//private instance method
		Object.defineProperty($$this.$$DisplayObject, '$_notifyParentOfBoundsChange', DisplayObject.prototype.$$v.$_notifyParentOfBoundsChange);

		//private instance method
		Object.defineProperty($$this.$$DisplayObject, '$_onChildBoundsChange', DisplayObject.prototype.$$v.$_onChildBoundsChange);

		//private instance method
		Object.defineProperty($$this.$$DisplayObject, '$_recalculateChildBasedBounds', DisplayObject.prototype.$$v.$_recalculateChildBasedBounds);

		//private instance method
		Object.defineProperty($$this.$$DisplayObject, '$_recalculateBounds', DisplayObject.prototype.$$v.$_recalculateBounds);

		//private instance method
		Object.defineProperty($$this.$$DisplayObject, '$_transform', DisplayObject.prototype.$$v.$_transform);

		//private instance method
		Object.defineProperty($$this.$$DisplayObject, '$_toCanvas', DisplayObject.prototype.$$v.$_toCanvas);

		//call construct on super
		EventDispatcher.$$construct($$this);

		//initialize properties
		DisplayObject.$$iinit($$this);

		//call constructor
		if (args !== undefined) DisplayObject.$$constructor.apply($$this, args);
	});

	//initializer
	DisplayObject.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$DisplayObject.$$p.$_previousTransformValues = {x:0, y:0, rotation:0, scaleX:1, scaleY:1};
		$$this.$$DisplayObject.$$p.$_properties = undefined;
	
		//call iinit on super
		EventDispatcher.$$iinit($$this);
	});

	//constructor
	DisplayObject.$$constructor = (function ()
	{
		var $$this = this;
		var properties = $$this.$$DisplayObject.$_properties || $$this.$__properties({});
		EventDispatcher.$$constructor.call($$this);
		var domView = properties.DisplayObjectScope.$_domView = $$this.$__createDomView();
		domView.setAttribute('name', properties.DisplayObjectScope.$_id);
		domView.setAttribute('data-type', Object($$this).constructor.name);
		domView.setAttribute('tabindex', -1);
		domView.setAttribute('role', 'presentation');
		domView.displayObject = $$this;
		domView.style.position = 'absolute';
		domView.style.pointerEvents = 'auto';
		domView.style[Browser.getTapHighlightColorString()] = 'rgba(0, 0, 0, 0)';
		domView.style[Browser.getTransformOriginString()] = '0% 0%';
	});

	return $es4.$$class(DisplayObject, {EXTENDS:'flash.events.EventDispatcher', IMPLEMENTS:['flash.display.IBitmapDrawable']}, 'flash.display::DisplayObject');
})();
//flash.display.DisplayObject


//flash.events.NetStatusEvent
$es4.$$package('flash.events').NetStatusEvent = (function ()
{
	//imports
	var Event;
	var NetStatusEvent;

	//properties
	var $$j = {};
	NetStatusEvent.NET_STATUS = "netStatus";

	//class pre initializer
	NetStatusEvent.$$sinit = (function ()
	{
		NetStatusEvent.$$sinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;

		//ensure $$sinit is called on super class
		if (Event.$$sinit !== undefined) Event.$$sinit();

		//set prototype and constructor
		NetStatusEvent.prototype = Object.create(Event.prototype);
		Object.defineProperty(NetStatusEvent.prototype, "constructor", { value: NetStatusEvent, enumerable: false });

		//hold private values
		Object.defineProperty(NetStatusEvent.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(NetStatusEvent.prototype, 'clone', {
		get:function ()
		{
			var $$this = this;

			function clone()
			{
				return $es4.$$coerce($es4.$$primitive(new NetStatusEvent($$this.type, $$this.bubbles, $$this.cancelable, $$this.$$NetStatusEvent.$_info)), Event);
			}

			return $$this.$$NetStatusEvent.$$clone || ($$this.$$NetStatusEvent.$$clone = clone);
		}});


		//public instance method
		Object.defineProperty(NetStatusEvent.prototype, 'toString', {
		get:function ()
		{
			var $$this = this;

			function toString()
			{
				return $$this.formatToString('NetStatusEvent', 'type', 'bubbles', 'cancelable', 'info');
			}

			return $$this.$$NetStatusEvent.$$toString || ($$this.$$NetStatusEvent.$$toString = toString);
		}});

		Object.defineProperty(NetStatusEvent.prototype, 'info', {get:function ()
		{
			var $$this = this;
			return $$this.$$NetStatusEvent.$_info;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			var $$this = this;
			$$this.$$NetStatusEvent.$_info = value;
		}});

		//properties
		NetStatusEvent.prototype.$$v.$_info = {
		get:function () { var $$this = this.$$this; return $$this.$$NetStatusEvent.$$p.$_info; },
		set:function (value) { var $$this = this.$$this; $$this.$$NetStatusEvent.$$p.$_info = $es4.$$coerce(value, Object); }
		};

	});

	//class initializer
	NetStatusEvent.$$cinit = (function ()
	{
		NetStatusEvent.$$cinit = undefined;
	});

	function NetStatusEvent()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof NetStatusEvent) || $$this.$$NetStatusEvent !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], NetStatusEvent) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			NetStatusEvent.$$construct($$this, $$args);
		}
	}

	//construct
	NetStatusEvent.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (NetStatusEvent.$$cinit !== undefined) NetStatusEvent.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$NetStatusEvent', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$NetStatusEvent, '$_info', NetStatusEvent.prototype.$$v.$_info);

		//call construct on super
		Event.$$construct($$this);

		//initialize properties
		NetStatusEvent.$$iinit($$this);

		//call constructor
		if (args !== undefined) NetStatusEvent.$$constructor.apply($$this, args);
	});

	//initializer
	NetStatusEvent.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$NetStatusEvent.$$p.$_info = $es4.$$coerce(undefined, Object);
	
		//call iinit on super
		Event.$$iinit($$this);
	});

	//constructor
	NetStatusEvent.$$constructor = (function ($$$$type, $$$$bubbles, $$$$cancelable, $$$$info)
	{
		var $$this = this;
		//set default parameter values
		var type = $es4.$$coerce($$$$type, String);
		var bubbles = (1 > arguments.length - 1) ? false : $es4.$$coerce($$$$bubbles, Boolean);
		var cancelable = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$cancelable, Boolean);
		var info = (3 > arguments.length - 1) ? null : $es4.$$coerce($$$$info, Object);

		Event.$$constructor.call($$this, type, bubbles, cancelable);
		$$this.$$NetStatusEvent.$_info = info;
	});

	return $es4.$$class(NetStatusEvent, {EXTENDS:'flash.events.Event'}, 'flash.events::NetStatusEvent');
})();
//flash.events.NetStatusEvent


//flash.media.SoundMixer
$es4.$$package('flash.media').SoundMixer = function () { throw new Error('Use of unimplemented class: SoundMixer'); }
//flash.media.SoundMixer


//flash.sampler.StackFrame
$es4.$$package('flash.sampler').StackFrame = function () { throw new Error('Use of unimplemented class: StackFrame'); }
//flash.sampler.StackFrame


//flash.events.StageVideoAvailabilityEvent
$es4.$$package('flash.events').StageVideoAvailabilityEvent = function () { throw new Error('Use of unimplemented class: StageVideoAvailabilityEvent'); }
//flash.events.StageVideoAvailabilityEvent


//flash.display.ColorCorrection
$es4.$$package('flash.display').ColorCorrection = (function ()
{
	//properties
	var $$j = {};
	ColorCorrection.DEFAULT = "default";
	ColorCorrection.OFF = "off";
	ColorCorrection.ON = "on";

	//class pre initializer
	ColorCorrection.$$sinit = (function ()
	{
		ColorCorrection.$$sinit = undefined;

		//set prototype and constructor
		ColorCorrection.prototype = Object.create(Object.prototype);
		Object.defineProperty(ColorCorrection.prototype, "constructor", { value: ColorCorrection, enumerable: false });

		//hold private values
		Object.defineProperty(ColorCorrection.prototype, '$$v', {value:{}});
	});

	//class initializer
	ColorCorrection.$$cinit = (function ()
	{
		ColorCorrection.$$cinit = undefined;
	});

	function ColorCorrection()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof ColorCorrection) || $$this.$$ColorCorrection !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], ColorCorrection) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			ColorCorrection.$$construct($$this, $$args);
		}
	}

	//construct
	ColorCorrection.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (ColorCorrection.$$cinit !== undefined) ColorCorrection.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$ColorCorrection', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		ColorCorrection.$$iinit($$this);

		//call constructor
		if (args !== undefined) ColorCorrection.$$constructor.apply($$this, args);
	});

	//initializer
	ColorCorrection.$$iinit = (function ($$this)
	{
	});

	//constructor
	ColorCorrection.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(ColorCorrection, null, 'flash.display::ColorCorrection');
})();
//flash.display.ColorCorrection


//flash.text.engine.GroupElement
$es4.$$package('flash.text.engine').GroupElement = function () { throw new Error('Use of unimplemented class: GroupElement'); }
//flash.text.engine.GroupElement


//flash.display.SWFVersion
$es4.$$package('flash.display').SWFVersion = function () { throw new Error('Use of unimplemented class: SWFVersion'); }
//flash.display.SWFVersion


//flash.display.ColorCorrectionSupport
$es4.$$package('flash.display').ColorCorrectionSupport = (function ()
{
	//properties
	var $$j = {};
	ColorCorrectionSupport.DEFAULT_OFF = "defaultOff";
	ColorCorrectionSupport.DEFAULT_ON = "defaultOn";
	ColorCorrectionSupport.UNSUPPORTED = "unsupported";

	//class pre initializer
	ColorCorrectionSupport.$$sinit = (function ()
	{
		ColorCorrectionSupport.$$sinit = undefined;

		//set prototype and constructor
		ColorCorrectionSupport.prototype = Object.create(Object.prototype);
		Object.defineProperty(ColorCorrectionSupport.prototype, "constructor", { value: ColorCorrectionSupport, enumerable: false });

		//hold private values
		Object.defineProperty(ColorCorrectionSupport.prototype, '$$v', {value:{}});
	});

	//class initializer
	ColorCorrectionSupport.$$cinit = (function ()
	{
		ColorCorrectionSupport.$$cinit = undefined;
	});

	function ColorCorrectionSupport()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof ColorCorrectionSupport) || $$this.$$ColorCorrectionSupport !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], ColorCorrectionSupport) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			ColorCorrectionSupport.$$construct($$this, $$args);
		}
	}

	//construct
	ColorCorrectionSupport.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (ColorCorrectionSupport.$$cinit !== undefined) ColorCorrectionSupport.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$ColorCorrectionSupport', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		ColorCorrectionSupport.$$iinit($$this);

		//call constructor
		if (args !== undefined) ColorCorrectionSupport.$$constructor.apply($$this, args);
	});

	//initializer
	ColorCorrectionSupport.$$iinit = (function ($$this)
	{
	});

	//constructor
	ColorCorrectionSupport.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(ColorCorrectionSupport, null, 'flash.display::ColorCorrectionSupport');
})();
//flash.display.ColorCorrectionSupport


//flash.display.Loader
$es4.$$package('flash.display').Loader = (function ()
{
	//imports
	var Event;
	var IOErrorEvent;
	var ProgressEvent;
	var UncaughtErrorEvents;
	var URLLoader;
	var URLRequest;
	var LoaderContext;
	var ByteArray;
	var setTimeout;
	var Browser;
	var MovieClip;
	var DisplayObjectContainer;
	var LoaderInfo;
	var Bitmap;
	var BitmapData;
	var DisplayObject;

	//class pre initializer
	Loader.$$sinit = (function ()
	{
		Loader.$$sinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;
		IOErrorEvent = $es4.$$['flash.events'].IOErrorEvent;
		ProgressEvent = $es4.$$['flash.events'].ProgressEvent;
		UncaughtErrorEvents = $es4.$$['flash.events'].UncaughtErrorEvents;
		URLLoader = $es4.$$['flash.net'].URLLoader;
		URLRequest = $es4.$$['flash.net'].URLRequest;
		LoaderContext = $es4.$$['flash.system'].LoaderContext;
		ByteArray = $es4.$$['flash.utils'].ByteArray;
		setTimeout = $es4.$$['flash.utils'].setTimeout;
		Browser = $es4.$$['browser'].Browser;
		MovieClip = $es4.$$['flash.display'].MovieClip;
		DisplayObjectContainer = $es4.$$['flash.display'].DisplayObjectContainer;
		LoaderInfo = $es4.$$['flash.display'].LoaderInfo;
		Bitmap = $es4.$$['flash.display'].Bitmap;
		BitmapData = $es4.$$['flash.display'].BitmapData;
		DisplayObject = $es4.$$['flash.display'].DisplayObject;

		//ensure $$sinit is called on super class
		if (DisplayObjectContainer.$$sinit !== undefined) DisplayObjectContainer.$$sinit();

		//set prototype and constructor
		Loader.prototype = Object.create(DisplayObjectContainer.prototype);
		Object.defineProperty(Loader.prototype, "constructor", { value: Loader, enumerable: false });

		//hold private values
		Object.defineProperty(Loader.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(Loader.prototype, '$__properties', {
		get:function ()
		{
			var $$this = this;

			function $__properties($$$$object)
			{
				//set default parameter values
				var object = (0 > arguments.length - 1) ? null : $$$$object;

				if ($$this.$$Loader.$_properties === undefined)
				{
					object = $es4.$$super2($$this, DisplayObjectContainer, '$$DisplayObjectContainer', '$__properties', 'func', undefined)(object);
					object.LoaderScope = {$_content:null, $_contentLoaderInfo:null, $_font:null, $_lwf:null, $_srcset:null, $_urlLoader:null, $_loaderContext:null};
					object.TLScope = $$this;
					return $$this.$$Loader.$_properties = object;
				}
				return $$this.$$Loader.$_properties;
			}

			return $$this.$$Loader.$$$__properties || ($$this.$$Loader.$$$__properties = $__properties);
		}});


		//public instance method
		Object.defineProperty(Loader.prototype, 'load', {
		get:function ()
		{
			var $$this = this;

			function load($$$$request, $$$$context)
			{
				//set default parameter values
				var request = $es4.$$coerce($$$$request, URLRequest);
				var context = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$context, LoaderContext);

				var a;
				var parts = null;
				var url = request.url;
				var content;
				var urlLoader;
				var contentLoaderInfo = $es4.$$coerce($$this.$$Loader.$_properties.LoaderScope.$_contentLoaderInfo, LoaderInfo);
				contentLoaderInfo.$__properties().LoaderInfoScope.$_url = url;
				$$this.$$Loader.$_properties.LoaderScope.$_loaderContext = context = (context || $es4.$$primitive(new LoaderContext()));
				var suffix = $es4.$$coerce(url.split('.').pop().toLowerCase().split('?')[0], String);
				var onLoad = null;
				var onProgress = null;
				var onComplete = null;
				switch (suffix)
				{
					case 'fgl':
						a = document.createElement('a');
						a.href = url;
						var sinSuffix = $es4.$$coerce(a.href.substr(0, a.href.lastIndexOf('.')), String);
						var json;
						var atlasList = [];
						var flwebgl = Browser.getFlashWebGL();
						var player;
						var canvas;
						var onLoaded = $es4.$$coerce(function () 
						{
							player.play();
							canvas.player = player;
							content.$__properties().MovieClipScope.$_setupFLWebGL();
							content.$__properties().DisplayObjectScope.$_loaderInfo = contentLoaderInfo;
							$$this.addChild(content);
							contentLoaderInfo.dispatchEvent($es4.$$primitive(new Event(Event.INIT)));
							contentLoaderInfo.dispatchEvent($es4.$$primitive(new Event(Event.COMPLETE)));
						}
, Function);
						var create = $es4.$$coerce(function () 
						{
							content = $$this.$$Loader.$_properties.LoaderScope.$_content = $es4.$$primitive(new MovieClip());
							canvas = content.$__properties().DisplayObjectScope.$_domView;
							player = $es4.$$primitive(new flwebgl.Player());
							var textureAtlasList = [];
							for (var i = 0; i < atlasList.length; i++)
							{
								textureAtlasList.push($es4.$$primitive(new flwebgl.TextureAtlas(atlasList[i].json, atlasList[i].image)));
							}
							var result = player.init(canvas, json, textureAtlasList, onLoaded);
							if (result === flwebgl.Player.E_CONTEXT_CREATION_FAILED || result === flwebgl.Player.E_REQUIRED_EXTENSION_NOT_PRESENT)
							{
								throw $es4.$$primitive(new Error(result));
							}
							var width = player.getStageWidth();
							var height = player.getStageHeight();
							canvas.width = width;
							canvas.height = height;
							player.setViewport($es4.$$primitive(new flwebgl.geom.Rect(0, 0, width, height)));
						}
, Function);
						var loadJSONAtlas = $es4.$$coerce(function () 
						{
							var xmlHttpRequest = Browser.getNewXMLHttpRequest();
							xmlHttpRequest.open('GET', sinSuffix + '_atlas.json', true);
							xmlHttpRequest.overrideMimeType('text/plain');
							xmlHttpRequest.onload = function () 
{
	xmlHttpRequest.onload = undefined;
	atlasList.push({json:JSON.parse(xmlHttpRequest.responseText), image:sinSuffix + '_atlas.png'});
	create();
}
;
							xmlHttpRequest.send(null);
						}
, Function);
						var loadJSON = $es4.$$coerce(function () 
						{
							var xmlHttpRequest = Browser.getNewXMLHttpRequest();
							xmlHttpRequest.open('GET', sinSuffix + '.json', true);
							xmlHttpRequest.overrideMimeType('text/plain');
							xmlHttpRequest.onload = function () 
{
	xmlHttpRequest.onload = undefined;
	json = JSON.parse(xmlHttpRequest.responseText);
	loadJSONAtlas();
}
;
							xmlHttpRequest.send(null);
						}
, Function);
						var xmlHttpRequest = Browser.getNewXMLHttpRequest();
						xmlHttpRequest.open('GET', sinSuffix + '_actions.js', true);
						xmlHttpRequest.overrideMimeType('text/javascript');
						xmlHttpRequest.onload = function () 
{
	xmlHttpRequest.onload = undefined;
	Browser.doEval(xmlHttpRequest.responseText);
	loadJSON();
}
;
						xmlHttpRequest.send(null);
						return;
					case 'js':
					case 'swf':
						contentLoaderInfo.$__properties().LoaderInfoScope.$_contentType = 'application/x-shockwave-flash';
						if (contentLoaderInfo.parameters.font)
						{
							a = document.createElement('a');
							a.href = url;
							parts = $es4.$$coerce(a.pathname.split('.'), Array);
							parts[parts.length - 1] = 'ttf';
							a.pathname = parts.join('.');
							var fontName = $es4.$$coerce(a.pathname.split('/').pop().split('.').shift(), String);
							var onFontLoaded = $es4.$$coerce(function () 
							{
								var FontClass = {'$$isclass':true, name:fontName};
								FontClass[fontName] = FontClass;
								context.applicationDomain.$__definitions[fontName] = FontClass;
								contentLoaderInfo.dispatchEvent($es4.$$primitive(new Event(Event.INIT)));
								contentLoaderInfo.dispatchEvent($es4.$$primitive(new Event(Event.COMPLETE)));
							}
, Function);
							var src = null;
							var regex = /^(?:\/|[a-z]+:\/\/)/;
							if (regex.test(url))
							{
								src = $es4.$$coerce(a.href, String);
							}
							else
							{
								var location = window.location;
								parts = $es4.$$coerce(location.pathname.split('/'), Array);
								parts.pop();
								var slocation = parts.join('/');
								src = $es4.$$coerce((a.pathname.indexOf(slocation) == -1) ? (location.pathname + '/../' + a.pathname + a.search + a.hash) : a.href, String);
							}
							var element = document.createElement('style');
							element.setAttribute('type', 'text/css');
							element.innerHTML = "@font-face {font-family: '" + fontName + "'; src: url('" + src + "') format('truetype');}";
							document.head.appendChild(element);
							setTimeout(onFontLoaded, 1);
							return;
						}
						else
						{
							a = document.createElement('a');
							a.href = url;
							parts = $es4.$$coerce(a.pathname.split('.'), Array);
							if (parts.pop().toLowerCase() != 'js')
							{
								content = $$this.$$Loader.$_properties.LoaderScope.$_content = $es4.$$primitive(new MovieClip());
								canvas = content.$__properties().DisplayObjectScope.$_domView;
								canvas.width = 0;
								canvas.height = 0;
								Browser.getLWF().useCanvasRenderer();
								var sinSuffix = $es4.$$coerce(a.href.substr(0, a.href.lastIndexOf('.')), String);
								var fileName = $es4.$$coerce(sinSuffix.split('/').pop(), String);
								var lwfURL = fileName + '.lwf';
								var prefix = sinSuffix + '.lwf/';
								onLoad = $es4.$$coerce(function ($$$$lwf) 
{
					//set default parameter values
					var lwf = $es4.$$coerce($$$$lwf, Object);

	$$this.$$Loader.$_properties.LoaderScope.$_lwf = lwf;
	canvas.lwf = lwf;
	content.$__properties().MovieClipScope.$_setupLWF();
	content.$__properties().DisplayObjectScope.$_loaderInfo = contentLoaderInfo;
	$$this.addChild(content);
	contentLoaderInfo.dispatchEvent($es4.$$primitive(new Event(Event.INIT)));
	contentLoaderInfo.dispatchEvent($es4.$$primitive(new Event(Event.COMPLETE)));
}
, Function);
								onProgress = $es4.$$coerce(function ($$$$loaded, $$$$total) 
{
					//set default parameter values
					var loaded = $es4.$$coerce($$$$loaded, uint);
					var total = $es4.$$coerce($$$$total, uint);

	var properties = contentLoaderInfo.$__properties().LoaderInfoScope;
	properties.$_bytesLoaded = loaded;
	properties.$_bytesTotal = total;
	contentLoaderInfo.dispatchEvent($es4.$$primitive(new ProgressEvent(ProgressEvent.PROGRESS, false, false, loaded, total)));
}
, Function);
								var cache = Browser.getLWF().ResourceCache.get();
								cache.loadLWF({lwf:lwfURL, prefix:prefix, stage:canvas, onload:onLoad, onprogress:onProgress});
							}
							else
							{
								onComplete = $es4.$$coerce(function ($$$$event) 
{
					//set default parameter values
					var event = $es4.$$coerce($$$$event, Event);

	urlLoader.removeEventListener(Event.COMPLETE, onComplete);
	content = $$this.$$Loader.$_properties.LoaderScope.$_content = $es4.$$as(Browser.doEval(urlLoader.data), DisplayObject);
	$$this.addChild(content);
	$$this.$$Loader.$_properties.LoaderScope.$_urlLoader = null;
	contentLoaderInfo.dispatchEvent($es4.$$primitive(new Event(Event.INIT)));
	contentLoaderInfo.dispatchEvent($es4.$$primitive(new Event(Event.COMPLETE)));
}
, Function);
								urlLoader = $$this.$$Loader.$_properties.LoaderScope.$_urlLoader = $es4.$$primitive(new URLLoader());
								urlLoader.addEventListener(Event.COMPLETE, onComplete);
								urlLoader.load(request);
							}
						}
						return;
					case 'jpg':
					case 'jpeg':
					case 'gif':
					case 'png':
					case 'xpng':
						var contentType = null;
						switch (suffix)
						{
							case 'jpg':
							case 'jpeg':
								contentType = 'image/jpeg';
								break;
							case 'gif':
								contentType = 'image/gif';
								break;
							case 'png':
							case 'xpng':
								contentType = 'image/png';
								break;
						}
						contentLoaderInfo.$__properties().LoaderInfoScope.$_contentType = contentType;
						var img = document.createElement('img');
						img.onerror = function ($$$$event) 
{
					//set default parameter values
					var event = $es4.$$coerce($$$$event, Object);

	img.onload = img.onerror = null;
	contentLoaderInfo.dispatchEvent($es4.$$primitive(new IOErrorEvent(IOErrorEvent.IO_ERROR, false, false, event.error)));
}
;
						img.onload = function ($$$$event) 
{
					//set default parameter values
					var event = $es4.$$coerce($$$$event, Object);

	img.onerror = img.onload = null;
	content = $$this.$$Loader.$_properties.LoaderScope.$_content = $es4.$$primitive(new Bitmap());
	var properties = content.$__properties();
	var canvas = properties.DisplayObjectScope.$_domView;
	canvas.width = img.naturalWidth;
	canvas.height = img.naturalHeight;
	canvas.getContext('2d').drawImage(img, 0, 0);
	var bitmapData = $es4.$$coerce($es4.$$primitive(new BitmapData(canvas.width, canvas.height)), BitmapData);
	bitmapData.$__properties().BitmapDataScope.$_canvas = canvas;
	properties.BitmapScope.$_bitmapData = bitmapData;
	properties.DisplayObjectScope.$_setExplicitBounds(canvas.width, canvas.height);
	$$this.addChild(content);
	contentLoaderInfo.dispatchEvent($es4.$$primitive(new Event(Event.COMPLETE)));
}
;
						if ($$this.$$Loader.$_properties.LoaderScope.$_srcset != null)
						{
							img.srcset = $$this.$$Loader.$_properties.LoaderScope.$_srcset;
						}
						img.src = url;
						return;
					default:
						throw $es4.$$primitive(new Error('Loader, attempt to load unknown type: ' + request.url));
				}
			}

			return $$this.$$Loader.$$load || ($$this.$$Loader.$$load = load);
		}});


		//public instance method
		Object.defineProperty(Loader.prototype, 'unload', {
		get:function ()
		{
			var $$this = this;

			function unload()
			{
				if (!$$this.$$Loader.$_properties.LoaderScope.$_lwf)
				{
					return;
				}
				if ($$this.$$Loader.$_properties.LoaderScope.$_content.parent == $$this)
				{
					$$this.$$Loader.$_properties.LoaderScope.$_content.$__properties().TLScope.parent.$__properties().TLScope.removeChild($$this.$$Loader.$_properties.LoaderScope.$_content);
				}
				var cache = Browser.getLWF().ResourceCache.get();
				cache.unloadLWF($$this.$$Loader.$_properties.LoaderScope.$_lwf);
			}

			return $$this.$$Loader.$$unload || ($$this.$$Loader.$$unload = unload);
		}});


		//public instance method
		Object.defineProperty(Loader.prototype, 'unloadAndStop', {
		get:function ()
		{
			var $$this = this;

			function unloadAndStop($$$$gc)
			{
				//set default parameter values
				var gc = (0 > arguments.length - 1) ? true : $es4.$$coerce($$$$gc, Boolean);

				$$this.unload();
			}

			return $$this.$$Loader.$$unloadAndStop || ($$this.$$Loader.$$unloadAndStop = unloadAndStop);
		}});


		//public instance method
		Object.defineProperty(Loader.prototype, 'close', {
		get:function ()
		{
			var $$this = this;

			function close()
			{
			}

			return $$this.$$Loader.$$close || ($$this.$$Loader.$$close = close);
		}});


		//public instance method
		Object.defineProperty(Loader.prototype, 'loadBytes', {
		get:function ()
		{
			var $$this = this;

			function loadBytes($$$$bytes, $$$$context)
			{
				//set default parameter values
				var bytes = $es4.$$coerce($$$$bytes, ByteArray);
				var context = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$context, LoaderContext);

				throw $es4.$$primitive(new Error('Loader: attempted call to an unimplemented function "loadBytes"'));
			}

			return $$this.$$Loader.$$loadBytes || ($$this.$$Loader.$$loadBytes = loadBytes);
		}});

		Object.defineProperty(Loader.prototype, 'width', {get:function ()
		{
			var $$this = this;
			if ($es4.$$is($$this.$$Loader.$_properties.LoaderScope.$_content, Bitmap))
			{
				return $es4.$$coerce($$this.$$Loader.$_properties.LoaderScope.$_content.width * $$this.scaleX, Number);
			}
			return $es4.$$coerce($es4.$$super2($$this, DisplayObjectContainer, '$$DisplayObjectContainer', 'width', 'func', undefined), Number);
		}, set:function ($$value)
		{
			var $$this = this; $es4.$$super2($$this, DisplayObjectContainer, '$$Loader', 'width', 'set', $$value);
		}});
		Object.defineProperty(Loader.prototype, 'height', {get:function ()
		{
			var $$this = this;
			if ($es4.$$is($$this.$$Loader.$_properties.LoaderScope.$_content, Bitmap))
			{
				return $es4.$$coerce($$this.$$Loader.$_properties.LoaderScope.$_content.height * $$this.scaleY, Number);
			}
			return $es4.$$coerce($es4.$$super2($$this, DisplayObjectContainer, '$$DisplayObjectContainer', 'height', 'func', undefined), Number);
		}, set:function ($$value)
		{
			var $$this = this; $es4.$$super2($$this, DisplayObjectContainer, '$$Loader', 'height', 'set', $$value);
		}});
		Object.defineProperty(Loader.prototype, 'srcset', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$Loader.$_properties.LoaderScope.$_srcset, String);
		}, set:function ($$$$srcset)
		{
			//set default parameter values
			var srcset = $es4.$$coerce($$$$srcset, String);

			var $$this = this;
			$$this.$$Loader.$_properties.LoaderScope.$_srcset = srcset;
		}});
		Object.defineProperty(Loader.prototype, 'content', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$Loader.$_properties.LoaderScope.$_content, DisplayObject);
		}});
		Object.defineProperty(Loader.prototype, 'contentLoaderInfo', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$Loader.$_properties.LoaderScope.$_contentLoaderInfo, LoaderInfo);
		}});
		Object.defineProperty(Loader.prototype, 'uncaughtErrorEvents', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('Loader: attempted call to an unimplemented function "uncaughtErrorEvents"'));
		}});

		//properties
		Loader.prototype.$$v.$_properties = {
		get:function () { var $$this = this.$$this; return $$this.$$Loader.$$p.$_properties; },
		set:function (value) { var $$this = this.$$this; $$this.$$Loader.$$p.$_properties = value }
		};

	});

	//class initializer
	Loader.$$cinit = (function ()
	{
		Loader.$$cinit = undefined;
	});

	function Loader()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof Loader) || $$this.$$Loader !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Loader) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			Loader.$$construct($$this, $$args);
		}
	}

	//construct
	Loader.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (Loader.$$cinit !== undefined) Loader.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$Loader', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$Loader, '$_properties', Loader.prototype.$$v.$_properties);

		//call construct on super
		DisplayObjectContainer.$$construct($$this);

		//initialize properties
		Loader.$$iinit($$this);

		//call constructor
		if (args !== undefined) Loader.$$constructor.apply($$this, args);
	});

	//initializer
	Loader.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$Loader.$$p.$_properties = undefined;
	
		//call iinit on super
		DisplayObjectContainer.$$iinit($$this);
	});

	//constructor
	Loader.$$constructor = (function ()
	{
		var $$this = this;
		if ($$this.$$Loader.$_properties === undefined)
		{
			$$this.$__properties({});
		}
		DisplayObjectContainer.$$constructor.call($$this);
		$$this.$$Loader.$_properties.LoaderScope.$_contentLoaderInfo = $es4.$$primitive(new LoaderInfo());
		$$this.$$Loader.$_properties.LoaderScope.$_contentLoaderInfo.$__properties().LoaderInfoScope.$_loader = $$this;
	});

	return $es4.$$class(Loader, {EXTENDS:'flash.display.DisplayObjectContainer'}, 'flash.display::Loader');
})();
//flash.display.Loader


//flash.filters.DisplacementMapFilterMode
$es4.$$package('flash.filters').DisplacementMapFilterMode = function () { throw new Error('Use of unimplemented class: DisplacementMapFilterMode'); }
//flash.filters.DisplacementMapFilterMode


//flash.text.TextField
$es4.$$package('flash.text').TextField = (function ()
{
	//imports
	var DisplayObject;
	var InteractiveObject;
	var Event;
	var Rectangle;
	var StyleSheet;
	var TextFieldType;
	var TextFormat;
	var TextLineMetrics;
	var TextField;
	var TextFieldAutoSize;

	//class pre initializer
	TextField.$$sinit = (function ()
	{
		TextField.$$sinit = undefined;

		//initialize imports
		DisplayObject = $es4.$$['flash.display'].DisplayObject;
		InteractiveObject = $es4.$$['flash.display'].InteractiveObject;
		Event = $es4.$$['flash.events'].Event;
		Rectangle = $es4.$$['flash.geom'].Rectangle;
		StyleSheet = $es4.$$['flash.text'].StyleSheet;
		TextFieldType = $es4.$$['flash.text'].TextFieldType;
		TextFormat = $es4.$$['flash.text'].TextFormat;
		TextLineMetrics = $es4.$$['flash.text'].TextLineMetrics;
		TextFieldAutoSize = $es4.$$['flash.text'].TextFieldAutoSize;

		//ensure $$sinit is called on super class
		if (InteractiveObject.$$sinit !== undefined) InteractiveObject.$$sinit();

		//set prototype and constructor
		TextField.prototype = Object.create(InteractiveObject.prototype);
		Object.defineProperty(TextField.prototype, "constructor", { value: TextField, enumerable: false });

		//hold private values
		Object.defineProperty(TextField.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(TextField.prototype, '$__properties', {
		get:function ()
		{
			var $$this = this;

			function $__properties($$$$object)
			{
				//set default parameter values
				var object = (0 > arguments.length - 1) ? null : $$$$object;

				if ($$this.$$TextField.$_properties === undefined)
				{
					object = $es4.$$super2($$this, InteractiveObject, '$$InteractiveObject', '$__properties', 'func', undefined)(object);
					object.TextFieldScope = {pscope:$es4.$$getOwnScope($$this, TextField)};
					object.TLScope = $$this;
					return $$this.$$TextField.$_properties = object;
				}
				return $$this.$$TextField.$_properties;
			}

			return $$this.$$TextField.$$$__properties || ($$this.$$TextField.$$$__properties = $__properties);
		}});


		//private instance method
		TextField.prototype.$$v.onKeyDown = {
		get:function ()
		{
			var $$this = this.$$this;

			function onKeyDown($$$$event)
			{
				//set default parameter values
				var event = $es4.$$coerce($$$$event, Object);

				if ($$this.$$TextField.$_text.length >= $$this.$$TextField.$_maxChars)
				{
					if (event.keyCode != 46 && event.keyCode != 8)
					{
						event.preventDefault();
					}
					return;
				}
				switch (event.keyCode)
				{
					case 27:
					case 8:
					case 9:
					case 20:
					case 16:
					case 17:
					case 91:
					case 92:
					case 18:
						return;
				}
				var char = $es4.$$coerce((event.shiftKey) ? TextField.mapShiftKeyPressToActualCharacter(event.keyCode) : String.fromCharCode(event.keyCode), String);
				char = $es4.$$coerce(TextField.restrictTextHandler(char, $$this.$$TextField.$_restrict), String);
				if (char == '' || (event.keyCode == 13 && !$$this.$$TextField.$_multiline))
				{
					event.preventDefault();
					return;
				}
				if (event.keyCode == 13 && !window.ie)
				{
					document.execCommand('formatBlock', false, 'p');
				}
			}

			return $$this.$$TextField.$$p.$$onKeyDown || ($$this.$$TextField.$$p.$$onKeyDown = onKeyDown);
		}};


		//private instance method
		TextField.prototype.$$v.onKeyUp = {
		get:function ()
		{
			var $$this = this.$$this;

			function onKeyUp($$$$event)
			{
				//set default parameter values
				var event = $es4.$$coerce($$$$event, Object);

				var elements = $$this.$$TextField.$_domTextView.childNodes;
				for (var i = $es4.$$coerce(elements.length, int); i--;)
				{
					if (elements[i].nodeName == 'P' && !window.ie)
					{
						elements[i].setAttribute('contenteditable', true);
					}
				}
			}

			return $$this.$$TextField.$$p.$$onKeyUp || ($$this.$$TextField.$$p.$$onKeyUp = onKeyUp);
		}};


		//private instance method
		TextField.prototype.$$v.setAutoDimensions = {
		get:function ()
		{
			var $$this = this.$$this;

			function setAutoDimensions()
			{
				if ($$this.$$TextField.$_skipSetAutoDimensions)
				{
					return;
				}
				var body = document.body;
				if (!$$this.$$TextField.$_domTextView.parentNode && !body.contains($$this.$$TextField.$_domTextView))
				{
					body.appendChild($$this.$$TextField.$_domTextView);
					$$this.$$TextField.$_properties.DisplayObjectScope.$_setExplicitBounds($$this.$$TextField.$_domTextView.scrollWidth, $$this.$$TextField.$_domTextView.scrollHeight);
					body.removeChild($$this.$$TextField.$_domTextView);
				}
				else
				{
					$$this.$$TextField.$_properties.DisplayObjectScope.$_setExplicitBounds($$this.$$TextField.$_domTextView.scrollWidth, $$this.$$TextField.$_domTextView.scrollHeight);
				}
			}

			return $$this.$$TextField.$$p.$$setAutoDimensions || ($$this.$$TextField.$$p.$$setAutoDimensions = setAutoDimensions);
		}};


		//private instance method
		TextField.prototype.$$v.onInput = {
		get:function ()
		{
			var $$this = this.$$this;

			function onInput($$$$event)
			{
				//set default parameter values
				var event = $es4.$$coerce($$$$event, Object);

				$$this.$$TextField.$_text = $$this.$$TextField.$_domTextView.textContent;
				$$this.$$TextField.setAutoDimensions();
				$$this.dispatchEvent($es4.$$primitive(new Event(Event.CHANGE, false, false)));
			}

			return $$this.$$TextField.$$p.$$onInput || ($$this.$$TextField.$$p.$$onInput = onInput);
		}};


		//private instance method
		TextField.prototype.$$v.onBlur = {
		get:function ()
		{
			var $$this = this.$$this;

			function onBlur($$$$event)
			{
				//set default parameter values
				var event = $es4.$$coerce($$$$event, Object);

				var sel = window.getSelection();
				sel.removeAllRanges();
			}

			return $$this.$$TextField.$$p.$$onBlur || ($$this.$$TextField.$$p.$$onBlur = onBlur);
		}};


		//public instance method
		Object.defineProperty(TextField.prototype, 'setTextFormat', {
		get:function ()
		{
			var $$this = this;

			function setTextFormat($$$$format, $$$$beginIndex, $$$$endIndex)
			{
				//set default parameter values
				var format = $es4.$$coerce($$$$format, TextFormat);
				var beginIndex = (1 > arguments.length - 1) ? -1 : $es4.$$coerce($$$$beginIndex, int);
				var endIndex = (2 > arguments.length - 1) ? -1 : $es4.$$coerce($$$$endIndex, int);

				var text = $$this.$$TextField.$_text || $$this.$$TextField.$_htmlText;
				var textLength = text.length;
				if (beginIndex >= textLength || endIndex >= textLength)
				{
					throw $es4.$$primitive(new Error('The supplied index is out of bounds.'));
				}
				if (!textLength)
				{
					return;
				}
				if (beginIndex == -1)
				{
					beginIndex = 0;
				}
				if (endIndex == -1)
				{
					endIndex = textLength - 1;
				}
				if (!$$this.$$TextField.$_characterTextFormats)
				{
					$$this.$$TextField.$_characterTextFormats = [];
				}
				var characterTextFormats = $$this.$$TextField.$_characterTextFormats;
				for (var i = beginIndex; i < endIndex; i++)
				{
					characterTextFormats[i] = format;
				}
				$$this.$$TextField.$_domTextView.innerHTML = $$this.$$TextField.$_generateHTMLText();
				$$this.$$TextField.setAutoDimensions();
			}

			return $$this.$$TextField.$$setTextFormat || ($$this.$$TextField.$$setTextFormat = setTextFormat);
		}});


		//private instance method
		TextField.prototype.$$v.$_applyTextFormattingToNode = {
		get:function ()
		{
			var $$this = this.$$this;

			function $_applyTextFormattingToNode($$$$node)
			{
				//set default parameter values
				var node = $es4.$$coerce($$$$node, Object);

				var characterTextFormats = $$this.$$TextField.$_characterTextFormats;
				var defaultTextFormat = $$this.$$TextField.$_defaultTextFormat;
				var previousTextFormat = defaultTextFormat;
				var textFormat = defaultTextFormat;
				if (characterTextFormats && characterTextFormats.length && characterTextFormats[0])
				{
					textFormat = $es4.$$coerce(characterTextFormats[0], TextFormat);
				}
				var color = (textFormat.color === null) ? '000000' : textFormat.color.toString(16);
				while (color.length < 6)
				{
					color = '0' + color;
				}
				var textFormatProperties = {url:textFormat.url, align:(textFormat.align) ? textFormat.align : 'left', blockIndent:textFormat.blockIndent, bold:(textFormat.bold) ? 'bold' : '500', bullet:textFormat.bullet, color:color, display:textFormat.display, indent:textFormat.indent, font:(textFormat.font) ? textFormat.font : 'Times New Roman', italic:textFormat.italic, leading:textFormat.leading, kerning:Number(textFormat.kerning), leftMargin:textFormat.leftMargin || 0, letterSpacing:textFormat.letterSpacing, rightMargin:textFormat.rightMargin || 0, size:(textFormat.size) ? Number(textFormat.size) : 12, tabStops:textFormat.tabStops, target:textFormat.target, underline:textFormat.underline};
				node.style.display = (textFormatProperties.align == 'left' ? 'inline-block' : 'block');
				node.style.textAlign = textFormatProperties.align;
				node.style.fontFamily = textFormatProperties.font;
				node.style.fontWeight = textFormatProperties.bold;
				node.style.fontSize = textFormatProperties.size + 'px';
				node.style.color = '#' + textFormatProperties.color;
				if (textFormatProperties.leftMargin !== null)
				{
					node.style.marginLeft = textFormatProperties.leftMargin + 'px';
				}
				if (textFormatProperties.rightMargin !== null)
				{
					node.style.marginRight = textFormatProperties.rightMargin + 'px';
				}
				if (textFormatProperties.leading !== null)
				{
					node.style.lineHeight = textFormatProperties.leading + 'px';
				}
				if (textFormatProperties.letterSpacing !== null)
				{
					node.style.letterSpacing = textFormatProperties.letterSpacing + 'px';
				}
			}

			return $$this.$$TextField.$$p.$$$_applyTextFormattingToNode || ($$this.$$TextField.$$p.$$$_applyTextFormattingToNode = $_applyTextFormattingToNode);
		}};


		//private instance method
		TextField.prototype.$$v.$_applyTextFormatting = {
		get:function ()
		{
			var $$this = this.$$this;

			function $_applyTextFormatting($$$$text)
			{
				//set default parameter values
				var text = $es4.$$coerce($$$$text, String);

				var characterTextFormats = $$this.$$TextField.$_characterTextFormats;
				var textFormat = $$this.$$TextField.$_defaultTextFormat;
				var textLength = text.length;
				var collected = '';
				var htmlText = '';
				if (characterTextFormats)
				{
					textFormat = $es4.$$coerce(characterTextFormats[0] || textFormat, TextFormat);
					for (var j = 0; j < textLength; j++)
					{
						if (characterTextFormats[j] !== undefined && characterTextFormats[j] !== textFormat)
						{
							htmlText += formatText(collected, textFormat);
							textFormat = $es4.$$coerce(characterTextFormats[j], TextFormat);
							collected = '';
						}
						collected += text.charAt(j);
					}
				}
				else
				{
					collected = text;
				}
				if (collected)
				{
					htmlText += formatText(collected, textFormat);
				}
				return htmlText;

				function formatText($$$$text, $$$$textFormat) 
				{
					//set default parameter values
					var text = $es4.$$coerce($$$$text, String);
					var textFormat = $es4.$$coerce($$$$textFormat, TextFormat);

					var htmlText = '';
					var color = (textFormat.color === null) ? '000000' : textFormat.color.toString(16);
					while (color.length < 6)
					{
						color = '0' + color;
					}
					var textFormatProperties = {url:textFormat.url, align:(textFormat.align) ? textFormat.align : 'left', blockIndent:textFormat.blockIndent, bold:(textFormat.bold) ? 'bold' : '500', bullet:textFormat.bullet, color:color, display:textFormat.display, indent:textFormat.indent, font:(textFormat.font) ? textFormat.font : 'Times New Roman', italic:textFormat.italic, leading:textFormat.leading, kerning:Number(textFormat.kerning), leftMargin:textFormat.leftMargin || 0, letterSpacing:textFormat.letterSpacing, rightMargin:textFormat.rightMargin || 0, size:(textFormat.size) ? Number(textFormat.size) : 12, tabStops:textFormat.tabStops, target:textFormat.target, underline:textFormat.underline};
					var letterSpacing = $es4.$$coerce(textFormatProperties.letterSpacing || 0, Number);
					if (letterSpacing >= 1)
					{
						var win = window;
						if (win.ie)
						{
							letterSpacing -= .5;
						}
						else if (!win.chrome)
						{
							letterSpacing -= 1;
						}
					}
					htmlText = '<span class="text' + ($$this.$$TextField.$_styleSheet !== null ? (' ' + $$this.$$TextField.$_styleSheet.$__id) : '') + '" tabindex="-1" ' + ($$this.$$TextField.$_type == TextFieldType.DYNAMIC ? 'role="presentation" aria-hidden="true" ' : 'contentEditable="true" ') + 'style="display:' + ((textFormatProperties.align === 'left' && $$this.$$TextField.$_styleSheet === null) ? 'inline-block' : 'block') + ';text-align:' + textFormatProperties.align + ';font-family:' + textFormatProperties.font + ';font-weight:' + textFormatProperties.bold + ';font-size:' + textFormatProperties.size + 'px' + ';color:#' + textFormatProperties.color + (textFormatProperties.leftMargin === null ? '' : ';margin-left:' + textFormatProperties.leftMargin + 'px') + (textFormatProperties.rightMargin === null ? '' : ';margin-right:' + textFormatProperties.rightMargin + 'px') + (textFormatProperties.leading === null ? '' : ';line-height:' + textFormatProperties.leading + 'px') + (textFormatProperties.letterSpacing === null ? '' : ';letter-spacing:' + letterSpacing + 'px') + ($$this.$$TextField.$_wordWrap ? '' : ';white-space:nowrap') + ';">';
					if (!$$this.$$TextField.$_multiline)
					{
						text = text.split('<br/>').join('');
					}
					if (text.indexOf("&#10;") !== -1)
					{
						text = text.split("&#10;").join('<br/>');
					}
					if (text.indexOf("\\n") !== -1)
					{
						text = text.split("\\n").join('<br/>');
					}
					if (!$$this.$$TextField.$_condenseWhite)
					{
						text = $es4.$$coerce(($es4.$$as(text, Object)).trim(), String);
						var found = 0;
						var count = 0;
						for (var i = 0; i < text.length; i++)
						{
							var char = text.charAt(i);
							if (found)
							{
								if (char == ' ')
								{
									count++;
								}
								else
								{
									var begin = text.substring(0, found);
									var end = text.substring(i);
									var insert = ' ';
									found = 0;
									while (count > 1)
									{
										if (count == 2)
										{
											insert += '&nbsp;&nbsp;';
										}
										else
										{
											insert += '&nbsp;';
										}
										count--;
									}
									count = 0;
									text = begin + insert + end;
									i = $es4.$$coerce(begin.length + insert.length, uint);
								}
							}
							else if (char == ' ')
							{
								found = $es4.$$coerce(i, int);
								count = 1;
							}
						}
						text = text.split('\t').join('&nbsp;&nbsp;&nbsp;&nbsp;');
						text = text.split('\n').join('<br/>');
					}
					htmlText += text;
					htmlText += '</span>';
					return htmlText;
				}
;
			}

			return $$this.$$TextField.$$p.$$$_applyTextFormatting || ($$this.$$TextField.$$p.$$$_applyTextFormatting = $_applyTextFormatting);
		}};


		//private instance method
		TextField.prototype.$$v.$_generateHTMLText = {
		get:function ()
		{
			var $$this = this.$$this;

			function $_generateHTMLText()
			{
				return $$this.$$TextField.$_applyTextFormatting($$this.$$TextField.$_text || $$this.$$TextField.$_htmlText);
			}

			return $$this.$$TextField.$$p.$$$_generateHTMLText || ($$this.$$TextField.$$p.$$$_generateHTMLText = $_generateHTMLText);
		}};


		//private instance method
		TextField.prototype.$$v.toColor = {
		get:function ()
		{
			var $$this = this.$$this;

			function toColor($$$$value)
			{
				//set default parameter values
				var value = $es4.$$coerce($$$$value, uint);

				var color = (!value) ? '000000' : value.toString(16);
				while (color.length < 6)
				{
					color = '0' + color;
				}
				return '#' + color;
			}

			return $$this.$$TextField.$$p.$$toColor || ($$this.$$TextField.$$p.$$toColor = toColor);
		}};


		//public instance method
		Object.defineProperty(TextField.prototype, 'appendText', {
		get:function ()
		{
			var $$this = this;

			function appendText($$$$newText)
			{
				//set default parameter values
				var newText = $es4.$$coerce($$$$newText, String);

				$$this.htmlText += newText;
			}

			return $$this.$$TextField.$$appendText || ($$this.$$TextField.$$appendText = appendText);
		}});


		//public instance method
		Object.defineProperty(TextField.prototype, 'copyRichText', {
		get:function ()
		{
			var $$this = this;

			function copyRichText()
			{
				throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "copyRichText"'));
			}

			return $$this.$$TextField.$$copyRichText || ($$this.$$TextField.$$copyRichText = copyRichText);
		}});


		//public instance method
		Object.defineProperty(TextField.prototype, 'getCharBoundaries', {
		get:function ()
		{
			var $$this = this;

			function getCharBoundaries($$$$charIndex)
			{
				//set default parameter values
				var charIndex = $es4.$$coerce($$$$charIndex, int);

				throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "getCharBoundaries"'));
			}

			return $$this.$$TextField.$$getCharBoundaries || ($$this.$$TextField.$$getCharBoundaries = getCharBoundaries);
		}});


		//public instance method
		Object.defineProperty(TextField.prototype, 'getCharIndexAtPoint', {
		get:function ()
		{
			var $$this = this;

			function getCharIndexAtPoint($$$$x, $$$$y)
			{
				//set default parameter values
				var x = $es4.$$coerce($$$$x, Number);
				var y = $es4.$$coerce($$$$y, Number);

				throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "getCharIndexAtPoint"'));
			}

			return $$this.$$TextField.$$getCharIndexAtPoint || ($$this.$$TextField.$$getCharIndexAtPoint = getCharIndexAtPoint);
		}});


		//public instance method
		Object.defineProperty(TextField.prototype, 'getFirstCharInParagraph', {
		get:function ()
		{
			var $$this = this;

			function getFirstCharInParagraph($$$$charIndex)
			{
				//set default parameter values
				var charIndex = $es4.$$coerce($$$$charIndex, int);

				throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "getFirstCharInParagraph"'));
			}

			return $$this.$$TextField.$$getFirstCharInParagraph || ($$this.$$TextField.$$getFirstCharInParagraph = getFirstCharInParagraph);
		}});


		//public instance method
		Object.defineProperty(TextField.prototype, 'getImageReference', {
		get:function ()
		{
			var $$this = this;

			function getImageReference($$$$id)
			{
				//set default parameter values
				var id = $es4.$$coerce($$$$id, String);

				throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "getImageReference"'));
			}

			return $$this.$$TextField.$$getImageReference || ($$this.$$TextField.$$getImageReference = getImageReference);
		}});


		//public instance method
		Object.defineProperty(TextField.prototype, 'getLineIndexAtPoint', {
		get:function ()
		{
			var $$this = this;

			function getLineIndexAtPoint($$$$x, $$$$y)
			{
				//set default parameter values
				var x = $es4.$$coerce($$$$x, Number);
				var y = $es4.$$coerce($$$$y, Number);

				throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "getLineIndexAtPoint"'));
			}

			return $$this.$$TextField.$$getLineIndexAtPoint || ($$this.$$TextField.$$getLineIndexAtPoint = getLineIndexAtPoint);
		}});


		//public instance method
		Object.defineProperty(TextField.prototype, 'getLineIndexOfChar', {
		get:function ()
		{
			var $$this = this;

			function getLineIndexOfChar($$$$charIndex)
			{
				//set default parameter values
				var charIndex = $es4.$$coerce($$$$charIndex, int);

				throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "getLineIndexOfChar"'));
			}

			return $$this.$$TextField.$$getLineIndexOfChar || ($$this.$$TextField.$$getLineIndexOfChar = getLineIndexOfChar);
		}});


		//public instance method
		Object.defineProperty(TextField.prototype, 'getLineLength', {
		get:function ()
		{
			var $$this = this;

			function getLineLength($$$$lineIndex)
			{
				//set default parameter values
				var lineIndex = $es4.$$coerce($$$$lineIndex, int);

				throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "getLineLength"'));
			}

			return $$this.$$TextField.$$getLineLength || ($$this.$$TextField.$$getLineLength = getLineLength);
		}});


		//public instance method
		Object.defineProperty(TextField.prototype, 'getLineMetrics', {
		get:function ()
		{
			var $$this = this;

			function getLineMetrics($$$$lineIndex)
			{
				//set default parameter values
				var lineIndex = $es4.$$coerce($$$$lineIndex, int);

				throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "getLineMetrics"'));
			}

			return $$this.$$TextField.$$getLineMetrics || ($$this.$$TextField.$$getLineMetrics = getLineMetrics);
		}});


		//public instance method
		Object.defineProperty(TextField.prototype, 'getLineOffset', {
		get:function ()
		{
			var $$this = this;

			function getLineOffset($$$$lineIndex)
			{
				//set default parameter values
				var lineIndex = $es4.$$coerce($$$$lineIndex, int);

				throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "getLineOffset"'));
			}

			return $$this.$$TextField.$$getLineOffset || ($$this.$$TextField.$$getLineOffset = getLineOffset);
		}});


		//public instance method
		Object.defineProperty(TextField.prototype, 'getLineText', {
		get:function ()
		{
			var $$this = this;

			function getLineText($$$$lineIndex)
			{
				//set default parameter values
				var lineIndex = $es4.$$coerce($$$$lineIndex, int);

				throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "getLineText"'));
			}

			return $$this.$$TextField.$$getLineText || ($$this.$$TextField.$$getLineText = getLineText);
		}});


		//public instance method
		Object.defineProperty(TextField.prototype, 'getParagraphLength', {
		get:function ()
		{
			var $$this = this;

			function getParagraphLength($$$$charIndex)
			{
				//set default parameter values
				var charIndex = $es4.$$coerce($$$$charIndex, int);

				throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "getParagraphLength"'));
			}

			return $$this.$$TextField.$$getParagraphLength || ($$this.$$TextField.$$getParagraphLength = getParagraphLength);
		}});


		//public instance method
		Object.defineProperty(TextField.prototype, 'getRawText', {
		get:function ()
		{
			var $$this = this;

			function getRawText()
			{
				throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "getRawText"'));
			}

			return $$this.$$TextField.$$getRawText || ($$this.$$TextField.$$getRawText = getRawText);
		}});


		//public instance method
		Object.defineProperty(TextField.prototype, 'getTextFormat', {
		get:function ()
		{
			var $$this = this;

			function getTextFormat($$$$beginIndex, $$$$endIndex)
			{
				//set default parameter values
				var beginIndex = (0 > arguments.length - 1) ? -1 : $es4.$$coerce($$$$beginIndex, int);
				var endIndex = (1 > arguments.length - 1) ? -1 : $es4.$$coerce($$$$endIndex, int);

				throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "getTextFormat"'));
			}

			return $$this.$$TextField.$$getTextFormat || ($$this.$$TextField.$$getTextFormat = getTextFormat);
		}});


		//public instance method
		Object.defineProperty(TextField.prototype, 'getTextRuns', {
		get:function ()
		{
			var $$this = this;

			function getTextRuns($$$$beginIndex, $$$$endIndex)
			{
				//set default parameter values
				var beginIndex = (0 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$beginIndex, int);
				var endIndex = (1 > arguments.length - 1) ? 2147483647 : $es4.$$coerce($$$$endIndex, int);

				throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "getTextRuns"'));
			}

			return $$this.$$TextField.$$getTextRuns || ($$this.$$TextField.$$getTextRuns = getTextRuns);
		}});


		//public instance method
		Object.defineProperty(TextField.prototype, 'getXMLText', {
		get:function ()
		{
			var $$this = this;

			function getXMLText($$$$beginIndex, $$$$endIndex)
			{
				//set default parameter values
				var beginIndex = (0 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$beginIndex, int);
				var endIndex = (1 > arguments.length - 1) ? 2147483647 : $es4.$$coerce($$$$endIndex, int);

				throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "getXMLText"'));
			}

			return $$this.$$TextField.$$getXMLText || ($$this.$$TextField.$$getXMLText = getXMLText);
		}});


		//public instance method
		Object.defineProperty(TextField.prototype, 'insertXMLText', {
		get:function ()
		{
			var $$this = this;

			function insertXMLText($$$$beginIndex, $$$$endIndex, $$$$richText, $$$$pasting)
			{
				//set default parameter values
				var beginIndex = $es4.$$coerce($$$$beginIndex, int);
				var endIndex = $es4.$$coerce($$$$endIndex, int);
				var richText = $es4.$$coerce($$$$richText, String);
				var pasting = (3 > arguments.length - 1) ? false : $es4.$$coerce($$$$pasting, Boolean);

				throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "insertXMLText"'));
			}

			return $$this.$$TextField.$$insertXMLText || ($$this.$$TextField.$$insertXMLText = insertXMLText);
		}});


		//public instance method
		Object.defineProperty(TextField.prototype, 'pasteRichText', {
		get:function ()
		{
			var $$this = this;

			function pasteRichText($$$$richText)
			{
				//set default parameter values
				var richText = $es4.$$coerce($$$$richText, String);

				throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "pasteRichText"'));
			}

			return $$this.$$TextField.$$pasteRichText || ($$this.$$TextField.$$pasteRichText = pasteRichText);
		}});


		//public instance method
		Object.defineProperty(TextField.prototype, 'replaceSelectedText', {
		get:function ()
		{
			var $$this = this;

			function replaceSelectedText($$$$value)
			{
				//set default parameter values
				var value = $es4.$$coerce($$$$value, String);

				throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "replaceSelectedText"'));
			}

			return $$this.$$TextField.$$replaceSelectedText || ($$this.$$TextField.$$replaceSelectedText = replaceSelectedText);
		}});


		//public instance method
		Object.defineProperty(TextField.prototype, 'replaceText', {
		get:function ()
		{
			var $$this = this;

			function replaceText($$$$beginIndex, $$$$endIndex, $$$$newText)
			{
				//set default parameter values
				var beginIndex = $es4.$$coerce($$$$beginIndex, int);
				var endIndex = $es4.$$coerce($$$$endIndex, int);
				var newText = $es4.$$coerce($$$$newText, String);

				throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "replaceText"'));
			}

			return $$this.$$TextField.$$replaceText || ($$this.$$TextField.$$replaceText = replaceText);
		}});


		//public instance method
		Object.defineProperty(TextField.prototype, 'setSelection', {
		get:function ()
		{
			var $$this = this;

			function setSelection($$$$beginIndex, $$$$endIndex)
			{
				//set default parameter values
				var beginIndex = $es4.$$coerce($$$$beginIndex, int);
				var endIndex = $es4.$$coerce($$$$endIndex, int);

				throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "setSelection"'));
			}

			return $$this.$$TextField.$$setSelection || ($$this.$$TextField.$$setSelection = setSelection);
		}});

		Object.defineProperty(TextField.prototype, 'width', {get:function ()
		{
			var $$this = this; return $es4.$$super2($$this, InteractiveObject, '$$TextField', 'width', 'get');
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var $$this = this;
			$$this.$$TextField.$_domTextView.style.width = (value - ($$this.$$TextField.$_border ? 6 : 4)) + 'px';
			$$this.$$TextField.$_properties.DisplayObjectScope.$_setExplicitBounds(value, $$this.$$TextField.$_properties.DisplayObjectScope.$_height);
		}});
		Object.defineProperty(TextField.prototype, 'height', {get:function ()
		{
			var $$this = this; return $es4.$$super2($$this, InteractiveObject, '$$TextField', 'height', 'get');
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var $$this = this;
			$$this.$$TextField.$_domTextView.style.height = (value - ($$this.$$TextField.$_border ? 6 : 4)) + 'px';
			$$this.$$TextField.$_properties.DisplayObjectScope.$_setExplicitBounds($$this.$$TextField.$_properties.DisplayObjectScope.$_width, value);
		}});
		Object.defineProperty(TextField.prototype, 'scrollRect', {get:function ()
		{
			var $$this = this; return $es4.$$super2($$this, InteractiveObject, '$$TextField', 'scrollRect', 'get');
		}, set:function ($$$$rectangle)
		{
			//set default parameter values
			var rectangle = $es4.$$coerce($$$$rectangle, Rectangle);

			var $$this = this;
			if (!rectangle)
			{
				$es4.$$super2($$this, InteractiveObject, '$$InteractiveObject', 'scrollRect', 'set', rectangle);
				$$this.$$TextField.$_domTextView.style.width = ($$this.$$TextField.$_properties.DisplayObjectScope.$_width - ($$this.$$TextField.$_border ? 6 : 4)) + 'px';
				$$this.$$TextField.$_domTextView.style.height = ($$this.$$TextField.$_properties.DisplayObjectScope.$_height - ($$this.$$TextField.$_border ? 6 : 4)) + 'px';
				return;
			}
			$es4.$$super2($$this, InteractiveObject, '$$InteractiveObject', 'scrollRect', 'set', rectangle);
		}});
		Object.defineProperty(TextField.prototype, 'type', {get:function ()
		{
			var $$this = this;
			return $$this.$$TextField.$_type;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			var $$this = this;
			if (value == $$this.$$TextField.$_type)
			{
				return;
			}
			if ($$this.$$TextField.$_domTextView)
			{
				while ($$this.$$TextField.$_domTextView.hasChildNodes())
				{
					$$this.$$TextField.$_domTextView.removeChild($$this.$$TextField.$_domTextView.lastChild);
				}
			}
			$$this.$$TextField.$_domTextView = $$this.$$TextField.$_properties.DisplayObjectScope.$_domView;
			$$this.$$TextField.$_domTextView.removeEventListener('input', $$this.$$TextField.onInput);
			$$this.$$TextField.$_domTextView.removeEventListener('keydown', $$this.$$TextField.onKeyDown);
			$$this.$$TextField.$_domTextView.removeEventListener('keyup', $$this.$$TextField.onKeyUp);
			$$this.$$TextField.$_domTextView.removeEventListener('blur', $$this.$$TextField.onBlur);
			if (value == TextFieldType.DYNAMIC)
			{
				$$this.$$TextField.$_properties.DisplayObjectScope.$_domView.setAttribute('aria-hidden', true);
				$$this.$$TextField.$_domTextView.contentEditable = 'false';
				$$this.$$TextField.$_domTextView.style.backgroundColor = 'inherit';
				$$this.$$TextField.$_domTextView.style.outline = 'inherit';
				$$this.$$TextField.$_domTextView.style.resize = 'inherit';
			}
			else if (value == TextFieldType.INPUT)
			{
				$$this.$$TextField.$_properties.DisplayObjectScope.$_domView.setAttribute('aria-hidden', false);
				$$this.$$TextField.$_domTextView.contentEditable = 'true';
				$$this.$$TextField.$_domTextView.style.backgroundColor = 'transparent';
				$$this.$$TextField.$_domTextView.style.outline = 'none';
				$$this.$$TextField.$_domTextView.style.resize = 'none';
				$$this.$$TextField.$_domTextView.addEventListener('input', $$this.$$TextField.onInput);
				$$this.$$TextField.$_domTextView.addEventListener('keydown', $$this.$$TextField.onKeyDown);
				$$this.$$TextField.$_domTextView.addEventListener('keyup', $$this.$$TextField.onKeyUp);
				$$this.$$TextField.$_domTextView.addEventListener('blur', $$this.$$TextField.onBlur);
			}
			else
			{
				throw $es4.$$primitive(new ArgumentError('Parameter type must be one of the accepted values.', 2008));
			}
			$$this.$$TextField.$_type = value;
			$$this.$$TextField.$_domTextView.style.width = ($$this.$$TextField.$_properties.DisplayObjectScope.$_width - 4) + 'px';
			$$this.$$TextField.$_domTextView.style.height = ($$this.$$TextField.$_properties.DisplayObjectScope.$_height - 4) + 'px';
			$$this.$$TextField.$_domTextView.style.textRendering = 'optimizeSpeed';
			$$this.$$TextField.$_domTextView.style.paddingLeft = '2px';
			$$this.$$TextField.$_domTextView.style.paddingTop = '2px';
			$$this.$$TextField.$_domTextView.style.paddingRight = '2px';
			$$this.$$TextField.$_domTextView.style.paddingBottom = '2px';
			$$this.$$TextField.$_applyTextFormattingToNode($$this.$$TextField.$_domTextView);
			$$this.$$TextField.$_skipSetAutoDimensions = true;
			var pscope = $$this.$$TextField.$_properties.TextFieldScope.pscope;
			$es4.$$getDescriptor(pscope, 'selectable').set.call($$this, $$this.$$TextField.$_selectable);
			$es4.$$getDescriptor(pscope, 'autoSize').set.call($$this, $$this.$$TextField.$_autoSize);
			$es4.$$getDescriptor(pscope, 'multiline').set.call($$this, $$this.$$TextField.$_multiline);
			$es4.$$getDescriptor(pscope, 'border').set.call($$this, $$this.$$TextField.$_border);
			$es4.$$getDescriptor(pscope, 'background').set.call($$this, $$this.$$TextField.$_background);
			if ($$this.$$TextField.$_htmlText)
			{
				$es4.$$getDescriptor($$this.$$TextField.$_properties.TextFieldScope.pscope, 'htmlText').set.call($$this, $$this.$$TextField.$_htmlText);
			}
			else if ($$this.$$TextField.$_text)
			{
				$es4.$$getDescriptor($$this.$$TextField.$_properties.TextFieldScope.pscope, 'text').set.call($$this, $$this.$$TextField.$_text);
			}
			$$this.$$TextField.$_skipSetAutoDimensions = false;
			$$this.$$TextField.setAutoDimensions();
		}});
		Object.defineProperty(TextField.prototype, 'text', {get:function ()
		{
			var $$this = this;
			if ($$this.$$TextField.$_type == TextFieldType.INPUT)
			{
				return $es4.$$coerce($$this.$$TextField.$_domTextView.textContent, String);
			}
			return $$this.$$TextField.$_text;
		}, set:function ($$$$text)
		{
			//set default parameter values
			var text = $es4.$$coerce($$$$text, String);

			var $$this = this;
			if (text == null)
			{
				text = '';
			}
			$$this.$$TextField.$_characterTextFormats = null;
			text = $es4.$$coerce(TextField.restrictTextHandler(text, $$this.$$TextField.$_restrict), String);
			$$this.$$TextField.$_text = text;
			$$this.$$TextField.$_domTextView.innerHTML = ($$this.$$TextField.$_type == TextFieldType.DYNAMIC) ? $$this.$$TextField.$_applyTextFormatting(text) : text.split('&').join('&amp;').split('<').join('&lt;');
			if ($$this.$$TextField.$_type == TextFieldType.INPUT && document.activeElement == $$this.$$TextField.$_domTextView)
			{
				var node = $$this.$$TextField.$_domTextView;
				var textNode = node.firstChild || node;
				var range = document.createRange();
				range.setStart(textNode, 0);
				range.setEnd(textNode, 0);
				var sel = window.getSelection();
				sel.removeAllRanges();
				sel.addRange(range);
			}
			$$this.$$TextField.setAutoDimensions();
		}});
		Object.defineProperty(TextField.prototype, 'htmlText', {get:function ()
		{
			var $$this = this;
			return $$this.$$TextField.$_generateHTMLText();
		}, set:function ($$$$text)
		{
			//set default parameter values
			var text = $es4.$$coerce($$$$text, String);

			var $$this = this;
			if (text == null)
			{
				text = '';
			}
			$$this.$$TextField.$_characterTextFormats = null;
			text = $es4.$$coerce(TextField.restrictTextHandler(text, $$this.$$TextField.$_restrict), String);
			var win = window;
			$$this.$$TextField.$_htmlText = text;
			if (text.indexOf('<') !== -1)
			{
				if ($$this.$$TextField.$_type == TextFieldType.INPUT)
				{
					win.$$getDescriptor($$this.$$TextField.$_properties.TextFieldScope.pscope, 'text').set.call($$this, win.HTMLtoText('<root>' + text + '</root>'));
					return;
				}
				text = $es4.$$coerce(win.HTMLtoXML('<root>' + text + '</root>'), String);
				text = text.substring(6, text.length - 7);
			}
			else if ($$this.$$TextField.$_type == TextFieldType.INPUT)
			{
				win.$$getDescriptor($$this.$$TextField.$_properties.TextFieldScope.pscope, 'text').set.call($$this, text);
				return;
			}
			$$this.$$TextField.$_domTextView.innerHTML = $$this.$$TextField.$_applyTextFormatting(text);
			$$this.$$TextField.setAutoDimensions();
		}});
		Object.defineProperty(TextField.prototype, 'multiline', {get:function ()
		{
			var $$this = this;
			return $$this.$$TextField.$_multiline;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var $$this = this;
			$$this.$$TextField.$_multiline = value;
			if ($$this.$$TextField.$_type == TextFieldType.INPUT)
			{
				if (!value)
				{
					$$this.$$TextField.$_domTextView.style.whiteSpace = 'nowrap';
				}
				else
				{
					$$this.$$TextField.$_domTextView.style.whiteSpace = 'pre-wrap';
				}
				$$this.$$TextField.setAutoDimensions();
			}
		}});
		Object.defineProperty(TextField.prototype, 'wordWrap', {get:function ()
		{
			var $$this = this;
			return $$this.$$TextField.$_wordWrap;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var $$this = this;
			if (value == $$this.$$TextField.$_wordWrap)
			{
				return;
			}
			$$this.$$TextField.$_wordWrap = value;
			if ($$this.$$TextField.$_type == TextFieldType.INPUT)
			{
				if (!value)
				{
					$$this.$$TextField.$_domTextView.style.wordWrap = 'normal';
				}
				else
				{
					$$this.$$TextField.$_domTextView.style.wordWrap = 'break-word';
				}
				$$this.$$TextField.setAutoDimensions();
			}
		}});
		Object.defineProperty(TextField.prototype, 'textColor', {get:function ()
		{
			var $$this = this;
			var color = $es4.$$coerce($$this.$$TextField.$_domTextView.style.color, String);
			return $es4.$$coerce(parseInt(color.split('#').pop(), 16), uint);
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, uint);

			var $$this = this;
			var color = '#' + value.toString(16);
			if (color == '#0')
			{
				color = '#000000';
			}
			$$this.$$TextField.$_domTextView.style.fill = color;
		}});
		Object.defineProperty(TextField.prototype, 'defaultTextFormat', {get:function ()
		{
			var $$this = this;
			return $$this.$$TextField.$_defaultTextFormat;
		}, set:function ($$$$format)
		{
			//set default parameter values
			var format = $es4.$$coerce($$$$format, TextFormat);

			var $$this = this;
			if (!format)
			{
				format = $es4.$$primitive(new TextFormat());
			}
			$$this.$$TextField.$_defaultTextFormat = format;
			$$this.$$TextField.$_applyTextFormattingToNode($$this.$$TextField.$_domTextView);
			$$this.$$TextField.setAutoDimensions();
		}});
		Object.defineProperty(TextField.prototype, 'autoSize', {get:function ()
		{
			var $$this = this;
			return $$this.$$TextField.$_autoSize;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			var $$this = this;
			if (value != TextFieldAutoSize.NONE)
			{
				$$this.$$TextField.$_domTextView.style.removeProperty('height');
			}
			if (value == TextFieldAutoSize.CENTER)
			{
				if ($$this.$$TextField.$_autoSize != TextFieldAutoSize.CENTER)
				{
					$$this.width = $$this.width;
				}
				$$this.$$TextField.$_domTextView.style.overflow = 'inherit';
				$$this.$$TextField.$_domTextView.style.textAlign = 'center';
			}
			else if (value == TextFieldAutoSize.LEFT)
			{
				if (!$$this.$$TextField.$_multiline)
				{
					$$this.$$TextField.$_domTextView.style.removeProperty('width');
				}
				else
				{
					$$this.$$TextField.$_domTextView.style.width = $$this.$$TextField.$_properties.DisplayObjectScope.$_width + 'px';
				}
				$$this.$$TextField.$_domTextView.style.overflow = 'inherit';
				$$this.$$TextField.$_domTextView.style.removeProperty('text-align');
			}
			else
			{
				$$this.$$TextField.$_domTextView.style.removeProperty('text-align');
				if ($$this.$$TextField.$_autoSize != TextFieldAutoSize.NONE)
				{
					$$this.width = $$this.width;
				}
				$$this.$$TextField.$_domTextView.style.overflow = 'hidden';
			}
			$$this.$$TextField.$_autoSize = value;
			$$this.$$TextField.setAutoDimensions();
		}});
		Object.defineProperty(TextField.prototype, 'length', {get:function ()
		{
			var $$this = this;
			return $$this.$$TextField.$_text.length;
		}});
		Object.defineProperty(TextField.prototype, 'alwaysShowSelection', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "alwaysShowSelection"'));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var $$this = this;
			throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "alwaysShowSelection"'));
		}});
		Object.defineProperty(TextField.prototype, 'antiAliasType', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "antiAliasType"'));
		}, set:function ($$$$antiAliasType)
		{
			//set default parameter values
			var antiAliasType = $es4.$$coerce($$$$antiAliasType, String);

			var $$this = this;
			throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "antiAliasType"'));
		}});
		Object.defineProperty(TextField.prototype, 'background', {get:function ()
		{
			var $$this = this;
			return $$this.$$TextField.$_background;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var $$this = this;
			$$this.$$TextField.$_background = value;
			if (!value)
			{
				$$this.$$TextField.$_domTextView.style.backgroundColor = 'transparent';
				return;
			}
			if ($$this.$$TextField.$_backgroundColor != 0xFFFFFF)
			{
				$$this.$$TextField.$_domTextView.style.backgroundColor = $$this.$$TextField.toColor($$this.$$TextField.$_backgroundColor);
			}
			else
			{
				$$this.$$TextField.$_domTextView.style.backgroundColor = 'white';
			}
		}});
		Object.defineProperty(TextField.prototype, 'backgroundColor', {get:function ()
		{
			var $$this = this;
			return $$this.$$TextField.$_backgroundColor;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, uint);

			var $$this = this;
			if (value == $$this.$$TextField.$_backgroundColor)
			{
				return;
			}
			$$this.$$TextField.$_backgroundColor = value;
			if ($$this.$$TextField.$_background)
			{
				if (value != 0xFFFFFF)
				{
					$$this.$$TextField.$_domTextView.style.backgroundColor = $$this.$$TextField.toColor(value);
				}
				else
				{
					$$this.$$TextField.$_domTextView.style.backgroundColor = 'white';
				}
			}
			else
			{
				$$this.$$TextField.$_domTextView.style.backgroundColor = 'transparent';
			}
		}});
		Object.defineProperty(TextField.prototype, 'border', {get:function ()
		{
			var $$this = this;
			return $$this.$$TextField.$_border;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var $$this = this;
			if (value == $$this.$$TextField.$_border)
			{
				return;
			}
			$$this.$$TextField.$_border = value;
			if (!value)
			{
				$$this.$$TextField.$_domTextView.style.borderColor = 'transparent';
				$$this.$$TextField.$_domTextView.style.borderStyle = 'none';
				$$this.$$TextField.$_domTextView.style.borderWidth = '0px';
				if ($$this.$$TextField.$_domTextView.style.width !== undefined)
				{
					$$this.$$TextField.$_domTextView.style.width = ($$this.$$TextField.$_properties.DisplayObjectScope.$_width - 4) + 'px';
				}
				if ($$this.$$TextField.$_domTextView.style.height !== undefined)
				{
					$$this.$$TextField.$_domTextView.style.height = ($$this.$$TextField.$_properties.DisplayObjectScope.$_height - 4) + 'px';
				}
				return;
			}
			if ($$this.$$TextField.$_borderColor)
			{
				$$this.$$TextField.$_domTextView.style.borderColor = $$this.$$TextField.toColor($$this.$$TextField.$_borderColor);
			}
			else
			{
				$$this.$$TextField.$_domTextView.style.borderColor = 'black';
			}
			$$this.$$TextField.$_domTextView.style.borderStyle = 'solid';
			$$this.$$TextField.$_domTextView.style.borderWidth = '1px';
			if ($$this.$$TextField.$_domTextView.style.width !== undefined)
			{
				$$this.$$TextField.$_domTextView.style.width = ($$this.$$TextField.$_properties.DisplayObjectScope.$_width - 6) + 'px';
			}
			if ($$this.$$TextField.$_domTextView.style.height !== undefined)
			{
				$$this.$$TextField.$_domTextView.style.height = ($$this.$$TextField.$_properties.DisplayObjectScope.$_height - 6) + 'px';
			}
		}});
		Object.defineProperty(TextField.prototype, 'borderColor', {get:function ()
		{
			var $$this = this;
			return $$this.$$TextField.$_borderColor;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, uint);

			var $$this = this;
			$$this.$$TextField.$_borderColor = value;
			if ($$this.$$TextField.$_border)
			{
				if (value)
				{
					$$this.$$TextField.$_domTextView.style.borderColor = $$this.$$TextField.toColor(value);
				}
				else
				{
					$$this.$$TextField.$_domTextView.style.borderColor = 'black';
				}
			}
			else
			{
				$$this.$$TextField.$_domTextView.style.borderColor = 'transparent';
			}
		}});
		Object.defineProperty(TextField.prototype, 'bottomScrollV', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "bottomScrollV"'));
		}});
		Object.defineProperty(TextField.prototype, 'caretIndex', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "caretIndex"'));
		}});
		Object.defineProperty(TextField.prototype, 'condenseWhite', {get:function ()
		{
			var $$this = this;
			return $$this.$$TextField.$_condenseWhite;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var $$this = this;
			$$this.$$TextField.$_condenseWhite = value;
		}});
		Object.defineProperty(TextField.prototype, 'displayAsPassword', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "displayAsPassword"'));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var $$this = this;
			throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "displayAsPassword"'));
		}});
		Object.defineProperty(TextField.prototype, 'embedFonts', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "embedFonts"'));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var $$this = this;
		}});
		Object.defineProperty(TextField.prototype, 'gridFitType', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "gridFitType"'));
		}, set:function ($$$$gridFitType)
		{
			//set default parameter values
			var gridFitType = $es4.$$coerce($$$$gridFitType, String);

			var $$this = this;
			throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "gridFitType"'));
		}});
		Object.defineProperty(TextField.prototype, 'maxChars', {get:function ()
		{
			var $$this = this;
			return $$this.$$TextField.$_maxChars;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, int);

			var $$this = this;
			$$this.$$TextField.$_maxChars = value;
		}});
		Object.defineProperty(TextField.prototype, 'maxScrollH', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('TextField: maxScrollH is not supported.'));
		}});
		Object.defineProperty(TextField.prototype, 'maxScrollV', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('TextField: maxScrollV is not supported.'));
		}});
		Object.defineProperty(TextField.prototype, 'mouseWheelEnabled', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "mouseWheelEnabled"'));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var $$this = this;
			throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "mouseWheelEnabled"'));
		}});
		Object.defineProperty(TextField.prototype, 'numLines', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "numLines"'));
		}});
		Object.defineProperty(TextField.prototype, 'restrict', {get:function ()
		{
			var $$this = this;
			return $$this.$$TextField.$_restrict;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			var $$this = this;
			$$this.$$TextField.$_restrict = value;
		}});
		Object.defineProperty(TextField.prototype, 'scrollH', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('TextField: scrollH is not supported.'));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, int);

			var $$this = this;
			throw $es4.$$primitive(new Error('TextField: scrollH is not supported.'));
		}});
		Object.defineProperty(TextField.prototype, 'scrollV', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('TextField: scrollV is not supported.'));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, int);

			var $$this = this;
			throw $es4.$$primitive(new Error('TextField: scrollV is not supported.'));
		}});
		Object.defineProperty(TextField.prototype, 'selectable', {get:function ()
		{
			var $$this = this;
			return $$this.$$TextField.$_selectable;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var $$this = this;
			$$this.$$TextField.$_selectable = value;
			if (value && $$this.mouseEnabled)
			{
				$$this.$$TextField.$_domTextView.style.webkitTouchCallout = $$this.$$TextField.$_domTextView.style.webkitUserSelect = $$this.$$TextField.$_domTextView.style.khtmlUserSelect = $$this.$$TextField.$_domTextView.style.mozUserSelect = $$this.$$TextField.$_domTextView.style.msUserSelect = $$this.$$TextField.$_domTextView.style.userSelect = $$this.$$TextField.$_domTextView.style.cursor = null;
				$$this.$$TextField.$_domTextView.style.cursor = 'text';
				$$this.$$TextField.$_domTextView.style.pointerEvents = 'auto';
			}
			else
			{
				$$this.$$TextField.$_domTextView.style.webkitTouchCallout = $$this.$$TextField.$_domTextView.style.webkitUserSelect = $$this.$$TextField.$_domTextView.style.khtmlUserSelect = $$this.$$TextField.$_domTextView.style.mozUserSelect = $$this.$$TextField.$_domTextView.style.msUserSelect = $$this.$$TextField.$_domTextView.style.userSelect = 'none';
				$$this.$$TextField.$_domTextView.style.cursor = 'default';
				$$this.$$TextField.$_domTextView.style.pointerEvents = 'none';
			}
		}});
		Object.defineProperty(TextField.prototype, 'mouseEnabled', {get:function ()
		{
			var $$this = this; return $es4.$$super2($$this, InteractiveObject, '$$TextField', 'mouseEnabled', 'get');
		}, set:function ($$$$enabled)
		{
			//set default parameter values
			var enabled = $es4.$$coerce($$$$enabled, Boolean);

			var $$this = this;
			if (enabled && $$this.$$TextField.$_selectable)
			{
				$$this.$$TextField.$_domTextView.style.webkitTouchCallout = $$this.$$TextField.$_domTextView.style.webkitUserSelect = $$this.$$TextField.$_domTextView.style.khtmlUserSelect = $$this.$$TextField.$_domTextView.style.mozUserSelect = $$this.$$TextField.$_domTextView.style.msUserSelect = $$this.$$TextField.$_domTextView.style.userSelect = $$this.$$TextField.$_domTextView.style.cursor = null;
				$$this.$$TextField.$_domTextView.style.cursor = 'text';
				$$this.$$TextField.$_domTextView.style.pointerEvents = 'auto';
			}
			else
			{
				$$this.$$TextField.$_domTextView.style.webkitTouchCallout = $$this.$$TextField.$_domTextView.style.webkitUserSelect = $$this.$$TextField.$_domTextView.style.khtmlUserSelect = $$this.$$TextField.$_domTextView.style.mozUserSelect = $$this.$$TextField.$_domTextView.style.msUserSelect = $$this.$$TextField.$_domTextView.style.userSelect = 'none';
				$$this.$$TextField.$_domTextView.style.cursor = 'default';
				$$this.$$TextField.$_domTextView.style.pointerEvents = 'none';
			}
			$es4.$$super2($$this, InteractiveObject, '$$InteractiveObject', 'mouseEnabled', 'set', enabled);
		}});
		Object.defineProperty(TextField.prototype, 'selectedText', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "selectedText"'));
		}});
		Object.defineProperty(TextField.prototype, 'selectionBeginIndex', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "selectionBeginIndex"'));
		}});
		Object.defineProperty(TextField.prototype, 'selectionEndIndex', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "selectionEndIndex"'));
		}});
		Object.defineProperty(TextField.prototype, 'sharpness', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "sharpness"'));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var $$this = this;
			throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "sharpness"'));
		}});
		Object.defineProperty(TextField.prototype, 'styleSheet', {get:function ()
		{
			var $$this = this;
			return $$this.$$TextField.$_styleSheet;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, StyleSheet);

			var $$this = this;
			$$this.$$TextField.$_styleSheet = value;
		}});
		Object.defineProperty(TextField.prototype, 'textHeight', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "textHeight"'));
		}});
		Object.defineProperty(TextField.prototype, 'textInteractionMode', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "textInteractionMode"'));
		}});
		Object.defineProperty(TextField.prototype, 'textWidth', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "textWidth"'));
		}});
		Object.defineProperty(TextField.prototype, 'thickness', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "thickness"'));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var $$this = this;
			throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "thickness"'));
		}});
		Object.defineProperty(TextField.prototype, 'useRichTextClipboard', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "useRichTextClipboard"'));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var $$this = this;
			throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "useRichTextClipboard"'));
		}});
		Object.defineProperty(TextField.prototype, 'tabEnabled', {get:function ()
		{
			var $$this = this; return $es4.$$super2($$this, InteractiveObject, '$$TextField', 'tabEnabled', 'get');
		}, set:function ($$$$enabled)
		{
			//set default parameter values
			var enabled = $es4.$$coerce($$$$enabled, Boolean);

			var $$this = this;
			$es4.$$super2($$this, InteractiveObject, '$$InteractiveObject', 'tabEnabled', 'set', enabled);
			if (!enabled && $$this.$$TextField.$_properties.InteractiveObjectScope.$_tabIndex == -1)
			{
				$$this.$$TextField.$_domTextView.setAttribute('aria-hidden', true);
			}
			else
			{
				$$this.$$TextField.$_domTextView.removeAttribute('aria-hidden');
			}
		}});
		Object.defineProperty(TextField.prototype, 'tabIndex', {get:function ()
		{
			var $$this = this; return $es4.$$super2($$this, InteractiveObject, '$$TextField', 'tabIndex', 'get');
		}, set:function ($$$$index)
		{
			//set default parameter values
			var index = $es4.$$coerce($$$$index, int);

			var $$this = this;
			$es4.$$super2($$this, InteractiveObject, '$$InteractiveObject', 'tabIndex', 'set', index);
			if (!$$this.$$TextField.$_properties.InteractiveObjectScope.$_tabEnabled && index == -1)
			{
				$$this.$$TextField.$_domTextView.setAttribute('aria-hidden', true);
			}
			else
			{
				$$this.$$TextField.$_domTextView.removeAttribute('aria-hidden');
			}
		}});

		//properties
		TextField.prototype.$$v.$_properties = {
		get:function () { var $$this = this.$$this; return $$this.$$TextField.$$p.$_properties; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextField.$$p.$_properties = value }
		};

		TextField.prototype.$$v.$_domTextView = {
		get:function () { var $$this = this.$$this; return $$this.$$TextField.$$p.$_domTextView; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextField.$$p.$_domTextView = $es4.$$coerce(value, Object); }
		};

		TextField.prototype.$$v.$_type = {
		get:function () { var $$this = this.$$this; return $$this.$$TextField.$$p.$_type; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextField.$$p.$_type = $es4.$$coerce(value, String); }
		};

		TextField.prototype.$$v.$_text = {
		get:function () { var $$this = this.$$this; return $$this.$$TextField.$$p.$_text; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextField.$$p.$_text = $es4.$$coerce(value, String); }
		};

		TextField.prototype.$$v.$_htmlText = {
		get:function () { var $$this = this.$$this; return $$this.$$TextField.$$p.$_htmlText; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextField.$$p.$_htmlText = $es4.$$coerce(value, String); }
		};

		TextField.prototype.$$v.$_multiline = {
		get:function () { var $$this = this.$$this; return $$this.$$TextField.$$p.$_multiline; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextField.$$p.$_multiline = $es4.$$coerce(value, Boolean); }
		};

		TextField.prototype.$$v.$_wordWrap = {
		get:function () { var $$this = this.$$this; return $$this.$$TextField.$$p.$_wordWrap; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextField.$$p.$_wordWrap = $es4.$$coerce(value, Boolean); }
		};

		TextField.prototype.$$v.$_autoSize = {
		get:function () { var $$this = this.$$this; return $$this.$$TextField.$$p.$_autoSize; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextField.$$p.$_autoSize = $es4.$$coerce(value, String); }
		};

		TextField.prototype.$$v.$_selectable = {
		get:function () { var $$this = this.$$this; return $$this.$$TextField.$$p.$_selectable; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextField.$$p.$_selectable = $es4.$$coerce(value, Boolean); }
		};

		TextField.prototype.$$v.$_condenseWhite = {
		get:function () { var $$this = this.$$this; return $$this.$$TextField.$$p.$_condenseWhite; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextField.$$p.$_condenseWhite = $es4.$$coerce(value, Boolean); }
		};

		TextField.prototype.$$v.$_restrict = {
		get:function () { var $$this = this.$$this; return $$this.$$TextField.$$p.$_restrict; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextField.$$p.$_restrict = $es4.$$coerce(value, String); }
		};

		TextField.prototype.$$v.$_maxChars = {
		get:function () { var $$this = this.$$this; return $$this.$$TextField.$$p.$_maxChars; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextField.$$p.$_maxChars = $es4.$$coerce(value, int); }
		};

		TextField.prototype.$$v.$_background = {
		get:function () { var $$this = this.$$this; return $$this.$$TextField.$$p.$_background; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextField.$$p.$_background = $es4.$$coerce(value, Boolean); }
		};

		TextField.prototype.$$v.$_backgroundColor = {
		get:function () { var $$this = this.$$this; return $$this.$$TextField.$$p.$_backgroundColor; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextField.$$p.$_backgroundColor = $es4.$$coerce(value, uint); }
		};

		TextField.prototype.$$v.$_border = {
		get:function () { var $$this = this.$$this; return $$this.$$TextField.$$p.$_border; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextField.$$p.$_border = $es4.$$coerce(value, Boolean); }
		};

		TextField.prototype.$$v.$_borderColor = {
		get:function () { var $$this = this.$$this; return $$this.$$TextField.$$p.$_borderColor; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextField.$$p.$_borderColor = $es4.$$coerce(value, uint); }
		};

		TextField.prototype.$$v.$_skipSetAutoDimensions = {
		get:function () { var $$this = this.$$this; return $$this.$$TextField.$$p.$_skipSetAutoDimensions; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextField.$$p.$_skipSetAutoDimensions = $es4.$$coerce(value, Boolean); }
		};

		TextField.prototype.$$v.$_characterTextFormats = {
		get:function () { var $$this = this.$$this; return $$this.$$TextField.$$p.$_characterTextFormats; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextField.$$p.$_characterTextFormats = $es4.$$coerce(value, Array); }
		};

		TextField.prototype.$$v.$_defaultTextFormat = {
		get:function () { var $$this = this.$$this; return $$this.$$TextField.$$p.$_defaultTextFormat; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextField.$$p.$_defaultTextFormat = $es4.$$coerce(value, TextFormat); }
		};

		TextField.prototype.$$v.$_styleSheet = {
		get:function () { var $$this = this.$$this; return $$this.$$TextField.$$p.$_styleSheet; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextField.$$p.$_styleSheet = $es4.$$coerce(value, StyleSheet); }
		};

	});

	//class initializer
	TextField.$$cinit = (function ()
	{
		TextField.$$cinit = undefined;
	});

	//private static method
	TextField.mapShiftKeyPressToActualCharacter = (function ($$$$characterCode)
	{
		if (TextField.$$cinit !== undefined) TextField.$$cinit();

		//set default parameter values
		var characterCode = $$$$characterCode;

		switch (characterCode)
		{
			case 27:
			case 8:
			case 9:
			case 20:
			case 16:
			case 17:
			case 91:
			case 92:
			case 18:
				return '';
		}
		var characterMap = [];
		characterMap[192] = '~';
		characterMap[49] = '!';
		characterMap[50] = '@';
		characterMap[51] = '#';
		characterMap[52] = '$';
		characterMap[53] = '%';
		characterMap[54] = '^';
		characterMap[55] = '&';
		characterMap[56] = '*';
		characterMap[57] = '(';
		characterMap[48] = ')';
		characterMap[109] = '_';
		characterMap[107] = '+';
		characterMap[219] = '{';
		characterMap[221] = '}';
		characterMap[220] = '|';
		characterMap[59] = ':';
		characterMap[222] = '\'';
		characterMap[188] = '<';
		characterMap[190] = '>';
		characterMap[191] = '?';
		characterMap[32] = ' ';
		var character = '';
		if (characterCode >= 65 && characterCode <= 90)
		{
			character = String.fromCharCode(characterCode);
		}
		else
		{
			character = characterMap[characterCode];
		}
		return character;
	});

	//private static method
	TextField.restrictTextHandler = (function ($$$$text, $$$$restrict)
	{
		if (TextField.$$cinit !== undefined) TextField.$$cinit();

		//set default parameter values
		var text = $$$$text;
		var restrict = $$$$restrict;

		if (restrict !== null)
		{
			if (restrict == '')
			{
				text = '';
			}
			else
			{
				text = text.replace($es4.$$primitive(new RegExp('[^' + restrict + ']')), '');
			}
		}
		return text;
	});

	//public static method
	TextField.isFontCompatible = (function ($$$$fontName, $$$$fontStyle)
	{
		if (TextField.$$cinit !== undefined) TextField.$$cinit();

		//set default parameter values
		var fontName = $es4.$$coerce($$$$fontName, String);
		var fontStyle = $es4.$$coerce($$$$fontStyle, String);

		throw $es4.$$primitive(new Error('TextField: attempted call to an unimplemented function "isFontCompatible"'));
	});
	function TextField()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof TextField) || $$this.$$TextField !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], TextField) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			TextField.$$construct($$this, $$args);
		}
	}

	//construct
	TextField.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (TextField.$$cinit !== undefined) TextField.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$TextField', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$TextField, '$_properties', TextField.prototype.$$v.$_properties);
		Object.defineProperty($$this.$$TextField, '$_domTextView', TextField.prototype.$$v.$_domTextView);
		Object.defineProperty($$this.$$TextField, '$_type', TextField.prototype.$$v.$_type);
		Object.defineProperty($$this.$$TextField, '$_text', TextField.prototype.$$v.$_text);
		Object.defineProperty($$this.$$TextField, '$_htmlText', TextField.prototype.$$v.$_htmlText);
		Object.defineProperty($$this.$$TextField, '$_multiline', TextField.prototype.$$v.$_multiline);
		Object.defineProperty($$this.$$TextField, '$_wordWrap', TextField.prototype.$$v.$_wordWrap);
		Object.defineProperty($$this.$$TextField, '$_autoSize', TextField.prototype.$$v.$_autoSize);
		Object.defineProperty($$this.$$TextField, '$_selectable', TextField.prototype.$$v.$_selectable);
		Object.defineProperty($$this.$$TextField, '$_condenseWhite', TextField.prototype.$$v.$_condenseWhite);
		Object.defineProperty($$this.$$TextField, '$_restrict', TextField.prototype.$$v.$_restrict);
		Object.defineProperty($$this.$$TextField, '$_maxChars', TextField.prototype.$$v.$_maxChars);
		Object.defineProperty($$this.$$TextField, '$_background', TextField.prototype.$$v.$_background);
		Object.defineProperty($$this.$$TextField, '$_backgroundColor', TextField.prototype.$$v.$_backgroundColor);
		Object.defineProperty($$this.$$TextField, '$_border', TextField.prototype.$$v.$_border);
		Object.defineProperty($$this.$$TextField, '$_borderColor', TextField.prototype.$$v.$_borderColor);
		Object.defineProperty($$this.$$TextField, '$_skipSetAutoDimensions', TextField.prototype.$$v.$_skipSetAutoDimensions);
		Object.defineProperty($$this.$$TextField, '$_characterTextFormats', TextField.prototype.$$v.$_characterTextFormats);
		Object.defineProperty($$this.$$TextField, '$_defaultTextFormat', TextField.prototype.$$v.$_defaultTextFormat);
		Object.defineProperty($$this.$$TextField, '$_styleSheet', TextField.prototype.$$v.$_styleSheet);

		//private instance method
		Object.defineProperty($$this.$$TextField, 'onKeyDown', TextField.prototype.$$v.onKeyDown);

		//private instance method
		Object.defineProperty($$this.$$TextField, 'onKeyUp', TextField.prototype.$$v.onKeyUp);

		//private instance method
		Object.defineProperty($$this.$$TextField, 'setAutoDimensions', TextField.prototype.$$v.setAutoDimensions);

		//private instance method
		Object.defineProperty($$this.$$TextField, 'onInput', TextField.prototype.$$v.onInput);

		//private instance method
		Object.defineProperty($$this.$$TextField, 'onBlur', TextField.prototype.$$v.onBlur);

		//private instance method
		Object.defineProperty($$this.$$TextField, '$_applyTextFormattingToNode', TextField.prototype.$$v.$_applyTextFormattingToNode);

		//private instance method
		Object.defineProperty($$this.$$TextField, '$_applyTextFormatting', TextField.prototype.$$v.$_applyTextFormatting);

		//private instance method
		Object.defineProperty($$this.$$TextField, '$_generateHTMLText', TextField.prototype.$$v.$_generateHTMLText);

		//private instance method
		Object.defineProperty($$this.$$TextField, 'toColor', TextField.prototype.$$v.toColor);

		//call construct on super
		InteractiveObject.$$construct($$this);

		//initialize properties
		TextField.$$iinit($$this);

		//call constructor
		if (args !== undefined) TextField.$$constructor.apply($$this, args);
	});

	//initializer
	TextField.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$TextField.$$p.$_properties = undefined;
		$$this.$$TextField.$$p.$_domTextView = $es4.$$coerce(undefined, Object);
		$$this.$$TextField.$$p.$_type = $es4.$$coerce(undefined, String);
		$$this.$$TextField.$$p.$_text = $es4.$$coerce('', String);
		$$this.$$TextField.$$p.$_htmlText = $es4.$$coerce('', String);
		$$this.$$TextField.$$p.$_multiline = $es4.$$coerce(undefined, Boolean);
		$$this.$$TextField.$$p.$_wordWrap = $es4.$$coerce(undefined, Boolean);
		$$this.$$TextField.$$p.$_autoSize = $es4.$$coerce(TextFieldAutoSize.NONE, String);
		$$this.$$TextField.$$p.$_selectable = $es4.$$coerce(true, Boolean);
		$$this.$$TextField.$$p.$_condenseWhite = $es4.$$coerce(undefined, Boolean);
		$$this.$$TextField.$$p.$_restrict = $es4.$$coerce(undefined, String);
		$$this.$$TextField.$$p.$_maxChars = $es4.$$coerce(int.MAX_VALUE, int);
		$$this.$$TextField.$$p.$_background = $es4.$$coerce(undefined, Boolean);
		$$this.$$TextField.$$p.$_backgroundColor = $es4.$$coerce(0xFFFFFF, uint);
		$$this.$$TextField.$$p.$_border = $es4.$$coerce(false, Boolean);
		$$this.$$TextField.$$p.$_borderColor = $es4.$$coerce(undefined, uint);
		$$this.$$TextField.$$p.$_skipSetAutoDimensions = $es4.$$coerce(undefined, Boolean);
		$$this.$$TextField.$$p.$_characterTextFormats = $es4.$$coerce(undefined, Array);
		$$this.$$TextField.$$p.$_defaultTextFormat = $es4.$$coerce($es4.$$primitive(new TextFormat()), TextFormat);
		$$this.$$TextField.$$p.$_styleSheet = $es4.$$coerce(undefined, StyleSheet);
	
		//call iinit on super
		InteractiveObject.$$iinit($$this);
	});

	//constructor
	TextField.$$constructor = (function ()
	{
		var $$this = this;
		if ($$this.$$TextField.$_properties === undefined)
		{
			$$this.$__properties({});
		}
		InteractiveObject.$$constructor.call($$this);
		$$this.$$TextField.$_properties.DisplayObjectScope.$_setExplicitBounds(100, 100);
		$es4.$$getDescriptor($$this.$$TextField.$_properties.TextFieldScope.pscope, 'type').set.call($$this, TextFieldType.DYNAMIC);
	});

	return $es4.$$class(TextField, {EXTENDS:'flash.display.InteractiveObject'}, 'flash.text::TextField');
})();
//flash.text.TextField


//flash.system.SecurityDomain
$es4.$$package('flash.system').SecurityDomain = (function ()
{
	//imports
	var SecurityDomain;

	//class pre initializer
	SecurityDomain.$$sinit = (function ()
	{
		SecurityDomain.$$sinit = undefined;

		//initialize imports
		//set prototype and constructor
		SecurityDomain.prototype = Object.create(Object.prototype);
		Object.defineProperty(SecurityDomain.prototype, "constructor", { value: SecurityDomain, enumerable: false });

		//hold private values
		Object.defineProperty(SecurityDomain.prototype, '$$v', {value:{}});
	});

	//class initializer
	SecurityDomain.$$cinit = (function ()
	{
		SecurityDomain.$$cinit = undefined;
	});

	Object.defineProperty(SecurityDomain, 'currentDomain', {get:function ()
	{
		if (SecurityDomain.$$cinit !== undefined) SecurityDomain.$$cinit();

		return $es4.$$coerce($es4.$$primitive(new SecurityDomain()), $es4.$$['flash.system'].SecurityDomain);
	}});

	function SecurityDomain()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof SecurityDomain) || $$this.$$SecurityDomain !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], SecurityDomain) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			SecurityDomain.$$construct($$this, $$args);
		}
	}

	//construct
	SecurityDomain.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (SecurityDomain.$$cinit !== undefined) SecurityDomain.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$SecurityDomain', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		SecurityDomain.$$iinit($$this);

		//call constructor
		if (args !== undefined) SecurityDomain.$$constructor.apply($$this, args);
	});

	//initializer
	SecurityDomain.$$iinit = (function ($$this)
	{
	});

	//constructor
	SecurityDomain.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(SecurityDomain, null, 'flash.system::SecurityDomain');
})();
//flash.system.SecurityDomain


//flash.media.SoundTransform
$es4.$$package('flash.media').SoundTransform = (function ()
{
	//class pre initializer
	SoundTransform.$$sinit = (function ()
	{
		SoundTransform.$$sinit = undefined;

		//set prototype and constructor
		SoundTransform.prototype = Object.create(Object.prototype);
		Object.defineProperty(SoundTransform.prototype, "constructor", { value: SoundTransform, enumerable: false });

		//hold private values
		Object.defineProperty(SoundTransform.prototype, '$$v', {value:{}});

		Object.defineProperty(SoundTransform.prototype, 'leftToLeft', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('SoundTransform: attempted call to an unimplemented function "leftToLeft"'));
		}, set:function ($$$$leftToLeft)
		{
			//set default parameter values
			var leftToLeft = $es4.$$coerce($$$$leftToLeft, Number);

			var $$this = this;
			throw $es4.$$primitive(new Error('SoundTransform: attempted call to an unimplemented function "leftToLeft"'));
		}});
		Object.defineProperty(SoundTransform.prototype, 'leftToRight', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('SoundTransform: attempted call to an unimplemented function "leftToRight"'));
		}, set:function ($$$$leftToRight)
		{
			//set default parameter values
			var leftToRight = $es4.$$coerce($$$$leftToRight, Number);

			var $$this = this;
			throw $es4.$$primitive(new Error('SoundTransform: attempted call to an unimplemented function "leftToRight"'));
		}});
		Object.defineProperty(SoundTransform.prototype, 'pan', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('SoundTransform: attempted call to an unimplemented function "pan"'));
		}, set:function ($$$$panning)
		{
			//set default parameter values
			var panning = $es4.$$coerce($$$$panning, Number);

			var $$this = this;
			throw $es4.$$primitive(new Error('SoundTransform: attempted call to an unimplemented function "pan"'));
		}});
		Object.defineProperty(SoundTransform.prototype, 'rightToLeft', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('SoundTransform: attempted call to an unimplemented function "rightToLeft"'));
		}, set:function ($$$$rightToLeft)
		{
			//set default parameter values
			var rightToLeft = $es4.$$coerce($$$$rightToLeft, Number);

			var $$this = this;
			throw $es4.$$primitive(new Error('SoundTransform: attempted call to an unimplemented function "rightToLeft"'));
		}});
		Object.defineProperty(SoundTransform.prototype, 'rightToRight', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('SoundTransform: attempted call to an unimplemented function "rightToRight"'));
		}, set:function ($$$$rightToRight)
		{
			//set default parameter values
			var rightToRight = $es4.$$coerce($$$$rightToRight, Number);

			var $$this = this;
			throw $es4.$$primitive(new Error('SoundTransform: attempted call to an unimplemented function "rightToRight"'));
		}});
		Object.defineProperty(SoundTransform.prototype, 'volume', {get:function ()
		{
			var $$this = this;
			return $$this.$$SoundTransform.$_volume;
		}, set:function ($$$$volume)
		{
			//set default parameter values
			var volume = $es4.$$coerce($$$$volume, Number);

			var $$this = this;
			$$this.$$SoundTransform.$_volume = volume;
		}});

		//properties
		SoundTransform.prototype.$$v.$_volume = {
		get:function () { var $$this = this.$$this; return $$this.$$SoundTransform.$$p.$_volume; },
		set:function (value) { var $$this = this.$$this; $$this.$$SoundTransform.$$p.$_volume = $es4.$$coerce(value, Number); }
		};

		SoundTransform.prototype.$$v.$_panning = {
		get:function () { var $$this = this.$$this; return $$this.$$SoundTransform.$$p.$_panning; },
		set:function (value) { var $$this = this.$$this; $$this.$$SoundTransform.$$p.$_panning = $es4.$$coerce(value, Number); }
		};

	});

	//class initializer
	SoundTransform.$$cinit = (function ()
	{
		SoundTransform.$$cinit = undefined;
	});

	function SoundTransform()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof SoundTransform) || $$this.$$SoundTransform !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], SoundTransform) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			SoundTransform.$$construct($$this, $$args);
		}
	}

	//construct
	SoundTransform.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (SoundTransform.$$cinit !== undefined) SoundTransform.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$SoundTransform', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$SoundTransform, '$_volume', SoundTransform.prototype.$$v.$_volume);
		Object.defineProperty($$this.$$SoundTransform, '$_panning', SoundTransform.prototype.$$v.$_panning);

		//initialize properties
		SoundTransform.$$iinit($$this);

		//call constructor
		if (args !== undefined) SoundTransform.$$constructor.apply($$this, args);
	});

	//initializer
	SoundTransform.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$SoundTransform.$$p.$_volume = $es4.$$coerce(undefined, Number);
		$$this.$$SoundTransform.$$p.$_panning = $es4.$$coerce(undefined, Number);
	
	});

	//constructor
	SoundTransform.$$constructor = (function ($$$$volume, $$$$panning)
	{
		var $$this = this;
		//set default parameter values
		var volume = (0 > arguments.length - 1) ? 1 : $es4.$$coerce($$$$volume, Number);
		var panning = (1 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$panning, Number);

		$$this.$$SoundTransform.$_volume = volume;
		$$this.$$SoundTransform.$_panning = panning;
	});

	return $es4.$$class(SoundTransform, null, 'flash.media::SoundTransform');
})();
//flash.media.SoundTransform


//flash.geom.Transform
$es4.$$package('flash.geom').Transform = (function ()
{
	//imports
	var DisplayObject;
	var ColorTransform;
	var Matrix;
	var Matrix3D;
	var PerspectiveProjection;
	var Rectangle;

	//class pre initializer
	Transform.$$sinit = (function ()
	{
		Transform.$$sinit = undefined;

		//initialize imports
		DisplayObject = $es4.$$['flash.display'].DisplayObject;
		ColorTransform = $es4.$$['flash.geom'].ColorTransform;
		Matrix = $es4.$$['flash.geom'].Matrix;
		Matrix3D = $es4.$$['flash.geom'].Matrix3D;
		PerspectiveProjection = $es4.$$['flash.geom'].PerspectiveProjection;
		Rectangle = $es4.$$['flash.geom'].Rectangle;

		//set prototype and constructor
		Transform.prototype = Object.create(Object.prototype);
		Object.defineProperty(Transform.prototype, "constructor", { value: Transform, enumerable: false });

		//hold private values
		Object.defineProperty(Transform.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(Transform.prototype, 'getRelativeMatrix3D', {
		get:function ()
		{
			var $$this = this;

			function getRelativeMatrix3D($$$$relativeTo)
			{
				//set default parameter values
				var relativeTo = $es4.$$coerce($$$$relativeTo, DisplayObject);

				throw $es4.$$primitive(new Error('Transform: attempted call to an unimplemented function "getRelativeMatrix3D"'));
			}

			return $$this.$$Transform.$$getRelativeMatrix3D || ($$this.$$Transform.$$getRelativeMatrix3D = getRelativeMatrix3D);
		}});

		Object.defineProperty(Transform.prototype, 'colorTransform', {get:function ()
		{
			var $$this = this;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, ColorTransform);

			var $$this = this;
		}});
		Object.defineProperty(Transform.prototype, 'concatenatedColorTransform', {get:function ()
		{
			var $$this = this;
		}});
		Object.defineProperty(Transform.prototype, 'concatenatedMatrix', {get:function ()
		{
			var $$this = this;
			var concMatrix = $es4.$$coerce($$this.$$Transform._displayObject.$__properties().DisplayObjectScope.$_matrix, Matrix);
			var currentDO = $$this.$$Transform._displayObject.parent;
			while (currentDO)
			{
				concMatrix.concat(currentDO.transform.matrix);
				currentDO = currentDO.parent;
			}
			return concMatrix;
		}});
		Object.defineProperty(Transform.prototype, 'matrix', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$Transform._displayObject.$__properties().DisplayObjectScope.$_matrix.clone(), Matrix);
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Matrix);

			var $$this = this;
		}});
		Object.defineProperty(Transform.prototype, 'matrix3D', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('Transform: attempted call to an unimplemented function "matrix3D"'));
		}, set:function ($$$$m)
		{
			//set default parameter values
			var m = $es4.$$coerce($$$$m, Matrix3D);

			var $$this = this;
			throw $es4.$$primitive(new Error('Transform: attempted call to an unimplemented function "matrix3D"'));
		}});
		Object.defineProperty(Transform.prototype, 'perspectiveProjection', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('Transform: attempted call to an unimplemented function "perspectiveProjection"'));
		}, set:function ($$$$pm)
		{
			//set default parameter values
			var pm = $es4.$$coerce($$$$pm, PerspectiveProjection);

			var $$this = this;
			throw $es4.$$primitive(new Error('Transform: attempted call to an unimplemented function "perspectiveProjection"'));
		}});
		Object.defineProperty(Transform.prototype, 'pixelBounds', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('Transform: attempted call to an unimplemented function "pixelBounds"'));
		}});

		//properties
		Transform.prototype.$$v._displayObject = {
		get:function () { var $$this = this.$$this; return $$this.$$Transform.$$p._displayObject; },
		set:function (value) { var $$this = this.$$this; $$this.$$Transform.$$p._displayObject = $es4.$$coerce(value, DisplayObject); }
		};

	});

	//class initializer
	Transform.$$cinit = (function ()
	{
		Transform.$$cinit = undefined;
	});

	function Transform()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof Transform) || $$this.$$Transform !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Transform) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			Transform.$$construct($$this, $$args);
		}
	}

	//construct
	Transform.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (Transform.$$cinit !== undefined) Transform.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$Transform', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$Transform, '_displayObject', Transform.prototype.$$v._displayObject);

		//initialize properties
		Transform.$$iinit($$this);

		//call constructor
		if (args !== undefined) Transform.$$constructor.apply($$this, args);
	});

	//initializer
	Transform.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$Transform.$$p._displayObject = $es4.$$coerce(undefined, DisplayObject);
	
	});

	//constructor
	Transform.$$constructor = (function ($$$$displayObject)
	{
		var $$this = this;
		//set default parameter values
		var displayObject = $es4.$$coerce($$$$displayObject, DisplayObject);

		$$this.$$Transform._displayObject = displayObject;
	});

	return $es4.$$class(Transform, null, 'flash.geom::Transform');
})();
//flash.geom.Transform


//flash.display.GraphicsShaderFill
$es4.$$package('flash.display').GraphicsShaderFill = function () { throw new Error('Use of unimplemented class: GraphicsShaderFill'); }
//flash.display.GraphicsShaderFill


//flash.xml.XMLNode
$es4.$$package('flash.xml').XMLNode = (function ()
{
	//imports
	var XMLNodeType;
	var XMLNode;

	//class pre initializer
	XMLNode.$$sinit = (function ()
	{
		XMLNode.$$sinit = undefined;

		//initialize imports
		XMLNodeType = $es4.$$['flash.xml'].XMLNodeType;

		//set prototype and constructor
		XMLNode.prototype = Object.create(Object.prototype);
		Object.defineProperty(XMLNode.prototype, "constructor", { value: XMLNode, enumerable: false });

		//hold private values
		Object.defineProperty(XMLNode.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(XMLNode.prototype, 'appendChild', {
		get:function ()
		{
			var $$this = this;

			function appendChild($$$$node)
			{
				//set default parameter values
				var node = $es4.$$coerce($$$$node, $es4.$$['flash.xml'].XMLNode);

				if (node.parentNode)
				{
					node.removeNode();
				}
				node.parentNode = $$this;
				$$this.$__childNodes.push(node);
			}

			return $$this.$$XMLNode.$$appendChild || ($$this.$$XMLNode.$$appendChild = appendChild);
		}});


		//public instance method
		Object.defineProperty(XMLNode.prototype, 'cloneNode', {
		get:function ()
		{
			var $$this = this;

			function cloneNode($$$$deep)
			{
				//set default parameter values
				var deep = $es4.$$coerce($$$$deep, Boolean);

				var newNode = $es4.$$coerce($es4.$$primitive(new XMLNode($$this.nodeType, $$this.nodeValue)), $es4.$$['flash.xml'].XMLNode);
				if (!deep)
				{
					newNode.$__childNodes = $$this.$__childNodes.concat();
				}
				return newNode;
			}

			return $$this.$$XMLNode.$$cloneNode || ($$this.$$XMLNode.$$cloneNode = cloneNode);
		}});


		//public instance method
		Object.defineProperty(XMLNode.prototype, 'getNamespaceForPrefix', {
		get:function ()
		{
			var $$this = this;

			function getNamespaceForPrefix($$$$prefix)
			{
				//set default parameter values
				var prefix = $es4.$$coerce($$$$prefix, String);

				throw $es4.$$primitive(new Error('XMLNode: attempted call to an unimplemented function "getNamespaceForPrefix"'));
			}

			return $$this.$$XMLNode.$$getNamespaceForPrefix || ($$this.$$XMLNode.$$getNamespaceForPrefix = getNamespaceForPrefix);
		}});


		//public instance method
		Object.defineProperty(XMLNode.prototype, 'getPrefixForNamespace', {
		get:function ()
		{
			var $$this = this;

			function getPrefixForNamespace($$$$ns)
			{
				//set default parameter values
				var ns = $es4.$$coerce($$$$ns, String);

				throw $es4.$$primitive(new Error('XMLNode: attempted call to an unimplemented function "getPrefixForNamespace"'));
			}

			return $$this.$$XMLNode.$$getPrefixForNamespace || ($$this.$$XMLNode.$$getPrefixForNamespace = getPrefixForNamespace);
		}});


		//public instance method
		Object.defineProperty(XMLNode.prototype, 'hasChildNodes', {
		get:function ()
		{
			var $$this = this;

			function hasChildNodes()
			{
				return $es4.$$coerce($$this.$__childNodes.length > 0, Boolean);
			}

			return $$this.$$XMLNode.$$hasChildNodes || ($$this.$$XMLNode.$$hasChildNodes = hasChildNodes);
		}});


		//public instance method
		Object.defineProperty(XMLNode.prototype, 'insertBefore', {
		get:function ()
		{
			var $$this = this;

			function insertBefore($$$$node, $$$$before)
			{
				//set default parameter values
				var node = $es4.$$coerce($$$$node, $es4.$$['flash.xml'].XMLNode);
				var before = $es4.$$coerce($$$$before, $es4.$$['flash.xml'].XMLNode);

				var childNodes = $$this.$__childNodes;
				var childNodesLength = $es4.$$coerce(childNodes.length, int);
				for (var i = 0; i < childNodesLength; i++)
				{
					if (childNodes[i] != before)
					{
						continue;
					}
					if (node.parentNode)
					{
						node.removeNode();
					}
					node.parentNode = $$this;
					childNodes.splice(i, 0, node);
					return;
				}
				trace('xmlNode insertion failed');
			}

			return $$this.$$XMLNode.$$insertBefore || ($$this.$$XMLNode.$$insertBefore = insertBefore);
		}});


		//public instance method
		Object.defineProperty(XMLNode.prototype, 'removeNode', {
		get:function ()
		{
			var $$this = this;

			function removeNode()
			{
				if (!$$this.parentNode)
				{
					return;
				}
				$$this.parentNode.$__removeNodeChild($$this);
			}

			return $$this.$$XMLNode.$$removeNode || ($$this.$$XMLNode.$$removeNode = removeNode);
		}});


		//protected instance method
		Object.defineProperty(XMLNode.prototype, '$__removeNodeChild', {
		get:function ()
		{
			var $$this = this;

			function $__removeNodeChild($$$$child)
			{
				//set default parameter values
				var child = $es4.$$coerce($$$$child, $es4.$$['flash.xml'].XMLNode);

				var childNodes = $$this.$__childNodes;
				var childNodesLength = $es4.$$coerce(childNodes.length, int);
				for (var i = 0; i < childNodesLength; i++)
				{
					if (childNodes[i] != child)
					{
						continue;
					}
					childNodes.splice(0, 1);
					i--;
					return true;
				}
				return false;
			}

			return $$this.$$XMLNode.$$$__removeNodeChild || ($$this.$$XMLNode.$$$__removeNodeChild = $__removeNodeChild);
		}});


		//public instance method
		Object.defineProperty(XMLNode.prototype, 'toString', {
		get:function ()
		{
			var $$this = this;

			function toString($$$$$toXMLString)
			{
				//set default parameter values
				var $toXMLString = (0 > arguments.length - 1) ? false : $es4.$$coerce($$$$$toXMLString, Boolean);

				if (!$$this.nodeName && $$this.nodeType != XMLNodeType.CDATA_NODE)
				{
					return '[XMLNode]';
				}
				if ($$this.nodeType == XMLNodeType.TEXT_NODE || $$this.nodeName == "#text")
				{
					return $$this.nodeValue;
				}
				if ($$this.nodeType == XMLNodeType.CDATA_NODE)
				{
					return ($toXMLString) ? $$this.nodeValue : $$this.nodeValue.split("<").join("&lt;").split(">").join("&gt;");
				}
				var attributesSerialised = "";
				var attributes = $$this.$$XMLNode.$_attributes;
				for (var iter in attributes)
				{
					attributesSerialised += " " + iter + "=\"" + attributes[iter] + "\"";
				}
				var nodeStr = "<" + $$this.nodeName + attributesSerialised;
				var nodeEnding = "";
				if (!$$this.childNodes.length)
				{
					nodeStr += " />";
				}
				else
				{
					nodeStr += ">";
					nodeEnding = "</" + $$this.nodeName + ">";
				}
				var innerNodes = "";
				var childNodesLength = $es4.$$coerce($$this.childNodes.length, int);
				for (var i = 0; i < childNodesLength; i++)
				{
					innerNodes += $es4.$$coerce($$this.childNodes[i].toString(), String);
				}
				return nodeStr + innerNodes + nodeEnding;
			}

			return $$this.$$XMLNode.$$toString || ($$this.$$XMLNode.$$toString = toString);
		}});

		Object.defineProperty(XMLNode.prototype, 'attributes', {get:function ()
		{
			var $$this = this;
			return $$this.$$XMLNode.$_attributes;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			var $$this = this;
			$$this.$$XMLNode.$_attributes = value;
		}});
		Object.defineProperty(XMLNode.prototype, 'childNodes', {get:function ()
		{
			var $$this = this;
			return $$this.$__childNodes;
		}});
		Object.defineProperty(XMLNode.prototype, 'localName', {get:function ()
		{
			var $$this = this;
			return $$this.$__localName;
		}});
		Object.defineProperty(XMLNode.prototype, 'namespaceURI', {get:function ()
		{
			var $$this = this;
			return $$this.$__namespaceURI;
		}});
		Object.defineProperty(XMLNode.prototype, 'prefix', {get:function ()
		{
			var $$this = this;
			return $$this.$__prefix;
		}});

		//properties
		XMLNode.prototype.$$v.$_attributes = {
		get:function () { var $$this = this.$$this; return $$this.$$XMLNode.$$p.$_attributes; },
		set:function (value) { var $$this = this.$$this; $$this.$$XMLNode.$$p.$_attributes = $es4.$$coerce(value, Object); }
		};

		Object.defineProperty(XMLNode.prototype, '$__childNodes', {
		get:function () { var $$this = this; return $$this.$$XMLNode.$__childNodes; },
		set:function (value) { var $$this = this; $$this.$$XMLNode.$__childNodes = $es4.$$coerce(value, Array); }
		});

		Object.defineProperty(XMLNode.prototype, '$__localName', {
		get:function () { var $$this = this; return $$this.$$XMLNode.$__localName; },
		set:function (value) { var $$this = this; $$this.$$XMLNode.$__localName = $es4.$$coerce(value, String); }
		});

		Object.defineProperty(XMLNode.prototype, '$__prefix', {
		get:function () { var $$this = this; return $$this.$$XMLNode.$__prefix; },
		set:function (value) { var $$this = this; $$this.$$XMLNode.$__prefix = $es4.$$coerce(value, String); }
		});

		Object.defineProperty(XMLNode.prototype, '$__namespaceURI', {
		get:function () { var $$this = this; return $$this.$$XMLNode.$__namespaceURI; },
		set:function (value) { var $$this = this; $$this.$$XMLNode.$__namespaceURI = $es4.$$coerce(value, String); }
		});

		Object.defineProperty(XMLNode.prototype, '$__domObject', {
		get:function () { var $$this = this; return $$this.$$XMLNode.$__domObject; },
		set:function (value) { var $$this = this; $$this.$$XMLNode.$__domObject = $es4.$$coerce(value, Object); }
		});

		Object.defineProperty(XMLNode.prototype, 'firstChild', {
		get:function () { var $$this = this; return $$this.$$XMLNode.firstChild; },
		set:function (value) { var $$this = this; $$this.$$XMLNode.firstChild = $es4.$$coerce(value, $es4.$$['flash.xml'].XMLNode); }
		});

		Object.defineProperty(XMLNode.prototype, 'lastChild', {
		get:function () { var $$this = this; return $$this.$$XMLNode.lastChild; },
		set:function (value) { var $$this = this; $$this.$$XMLNode.lastChild = $es4.$$coerce(value, $es4.$$['flash.xml'].XMLNode); }
		});

		Object.defineProperty(XMLNode.prototype, 'nextSibling', {
		get:function () { var $$this = this; return $$this.$$XMLNode.nextSibling; },
		set:function (value) { var $$this = this; $$this.$$XMLNode.nextSibling = $es4.$$coerce(value, $es4.$$['flash.xml'].XMLNode); }
		});

		Object.defineProperty(XMLNode.prototype, 'nodeName', {
		get:function () { var $$this = this; return $$this.$$XMLNode.nodeName; },
		set:function (value) { var $$this = this; $$this.$$XMLNode.nodeName = $es4.$$coerce(value, String); }
		});

		Object.defineProperty(XMLNode.prototype, 'nodeType', {
		get:function () { var $$this = this; return $$this.$$XMLNode.nodeType; },
		set:function (value) { var $$this = this; $$this.$$XMLNode.nodeType = $es4.$$coerce(value, uint); }
		});

		Object.defineProperty(XMLNode.prototype, 'nodeValue', {
		get:function () { var $$this = this; return $$this.$$XMLNode.nodeValue; },
		set:function (value) { var $$this = this; $$this.$$XMLNode.nodeValue = $es4.$$coerce(value, String); }
		});

		Object.defineProperty(XMLNode.prototype, 'parentNode', {
		get:function () { var $$this = this; return $$this.$$XMLNode.parentNode; },
		set:function (value) { var $$this = this; $$this.$$XMLNode.parentNode = $es4.$$coerce(value, $es4.$$['flash.xml'].XMLNode); }
		});

		Object.defineProperty(XMLNode.prototype, 'previousSibling', {
		get:function () { var $$this = this; return $$this.$$XMLNode.previousSibling; },
		set:function (value) { var $$this = this; $$this.$$XMLNode.previousSibling = $es4.$$coerce(value, $es4.$$['flash.xml'].XMLNode); }
		});

	});

	//class initializer
	XMLNode.$$cinit = (function ()
	{
		XMLNode.$$cinit = undefined;
	});

	function XMLNode()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof XMLNode) || $$this.$$XMLNode !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], XMLNode) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			XMLNode.$$construct($$this, $$args);
		}
	}

	//construct
	XMLNode.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (XMLNode.$$cinit !== undefined) XMLNode.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$XMLNode', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$XMLNode, '$_attributes', XMLNode.prototype.$$v.$_attributes);

		//initialize properties
		XMLNode.$$iinit($$this);

		//call constructor
		if (args !== undefined) XMLNode.$$constructor.apply($$this, args);
	});

	//initializer
	XMLNode.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$XMLNode.$$p.$_attributes = $es4.$$coerce({}, Object);
		$$this.$$XMLNode.$__childNodes = $es4.$$coerce([], Array);
		$$this.$$XMLNode.$__localName = $es4.$$coerce(undefined, String);
		$$this.$$XMLNode.$__prefix = $es4.$$coerce(undefined, String);
		$$this.$$XMLNode.$__namespaceURI = $es4.$$coerce(undefined, String);
		$$this.$$XMLNode.$__domObject = $es4.$$coerce(undefined, Object);
		$$this.$$XMLNode.firstChild = $es4.$$coerce(undefined, $es4.$$['flash.xml'].XMLNode);
		$$this.$$XMLNode.lastChild = $es4.$$coerce(undefined, $es4.$$['flash.xml'].XMLNode);
		$$this.$$XMLNode.nextSibling = $es4.$$coerce(undefined, $es4.$$['flash.xml'].XMLNode);
		$$this.$$XMLNode.nodeName = $es4.$$coerce(undefined, String);
		$$this.$$XMLNode.nodeType = $es4.$$coerce(undefined, uint);
		$$this.$$XMLNode.nodeValue = $es4.$$coerce(undefined, String);
		$$this.$$XMLNode.parentNode = $es4.$$coerce(undefined, $es4.$$['flash.xml'].XMLNode);
		$$this.$$XMLNode.previousSibling = $es4.$$coerce(undefined, $es4.$$['flash.xml'].XMLNode);
	
	});

	//constructor
	XMLNode.$$constructor = (function ($$$$type, $$$$value)
	{
		var $$this = this;
		//set default parameter values
		var type = $es4.$$coerce($$$$type, uint);
		var value = $es4.$$coerce($$$$value, String);

		$$this.nodeType = type;
		if (type != XMLNodeType.ELEMENT_NODE)
		{
			$$this.nodeValue = value;
		}
	});

	return $es4.$$class(XMLNode, null, 'flash.xml::XMLNode');
})();
//flash.xml.XMLNode


//flash.ui.Mouse
$es4.$$package('flash.ui').Mouse = (function ()
{
	//imports
	var MouseCursorData;
	var MouseCursor;

	//properties
	var $$j = {};
	Object.defineProperty(Mouse, '_cursor', {
	get:function () { if (Mouse.$$cinit !== undefined) Mouse.$$cinit(); return $$j._cursor; },
	set:function (value) { if (Mouse.$$cinit !== undefined) Mouse.$$cinit(); $$j._cursor = $es4.$$coerce(value, String); }
	});


	//class pre initializer
	Mouse.$$sinit = (function ()
	{
		Mouse.$$sinit = undefined;

		//initialize imports
		MouseCursorData = $es4.$$['flash.ui'].MouseCursorData;
		MouseCursor = $es4.$$['flash.ui'].MouseCursor;

		//set prototype and constructor
		Mouse.prototype = Object.create(Object.prototype);
		Object.defineProperty(Mouse.prototype, "constructor", { value: Mouse, enumerable: false });

		//hold private values
		Object.defineProperty(Mouse.prototype, '$$v', {value:{}});
	});

	//class initializer
	Mouse.$$cinit = (function ()
	{
		Mouse.$$cinit = undefined;

		//initialize properties
		$$j._cursor = $es4.$$coerce(MouseCursor.AUTO, String);
	
	});

	//public static method
	Mouse.hide = (function ()
	{
		if (Mouse.$$cinit !== undefined) Mouse.$$cinit();

		throw $es4.$$primitive(new Error('Mouse: attempted call to an unimplemented function "hide"'));
	});

	//public static method
	Mouse.registerCursor = (function ($$$$name, $$$$cursor)
	{
		if (Mouse.$$cinit !== undefined) Mouse.$$cinit();

		//set default parameter values
		var name = $es4.$$coerce($$$$name, String);
		var cursor = $es4.$$coerce($$$$cursor, MouseCursorData);

		throw $es4.$$primitive(new Error('Mouse: attempted call to an unimplemented function "registerCursor"'));
	});

	//public static method
	Mouse.show = (function ()
	{
		if (Mouse.$$cinit !== undefined) Mouse.$$cinit();

		throw $es4.$$primitive(new Error('Mouse: attempted call to an unimplemented function "show"'));
	});

	//public static method
	Mouse.unregisterCursor = (function ($$$$name)
	{
		if (Mouse.$$cinit !== undefined) Mouse.$$cinit();

		//set default parameter values
		var name = $es4.$$coerce($$$$name, String);

		throw $es4.$$primitive(new Error('Mouse: attempted call to an unimplemented function "unregisterCursor"'));
	});
	Object.defineProperty(Mouse, 'cursor', {get:function ()
	{
		if (Mouse.$$cinit !== undefined) Mouse.$$cinit();

		return Mouse._cursor;
	}, set:function ($$$$value)
	{
		if (Mouse.$$cinit !== undefined) Mouse.$$cinit();

		//set default parameter values
		var value = $es4.$$coerce($$$$value, String);

		if (Mouse._cursor !== MouseCursor.AUTO)
		{
			document.body.classList.remove(Mouse._cursor);
		}
		Mouse._cursor = value;
		if (value === MouseCursor.AUTO)
		{
			return;
		}
		document.body.classList.add(value);
	}});
	Object.defineProperty(Mouse, 'supportsCursor', {get:function ()
	{
		if (Mouse.$$cinit !== undefined) Mouse.$$cinit();

		throw $es4.$$primitive(new Error('Mouse: attempted call to an unimplemented function "supportsCursor"'));
	}});
	Object.defineProperty(Mouse, 'supportsNativeCursor', {get:function ()
	{
		if (Mouse.$$cinit !== undefined) Mouse.$$cinit();

		throw $es4.$$primitive(new Error('Mouse: attempted call to an unimplemented function "supportsNativeCursor"'));
	}});

	function Mouse()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof Mouse) || $$this.$$Mouse !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Mouse) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			Mouse.$$construct($$this, $$args);
		}
	}

	//construct
	Mouse.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (Mouse.$$cinit !== undefined) Mouse.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$Mouse', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		Mouse.$$iinit($$this);

		//call constructor
		if (args !== undefined) Mouse.$$constructor.apply($$this, args);
	});

	//initializer
	Mouse.$$iinit = (function ($$this)
	{
	});

	//constructor
	Mouse.$$constructor = (function ()
	{
		var $$this = this;
		throw $es4.$$primitive(new Error('Mouse: attempted call to an unimplemented constructor'));
	});

	return $es4.$$class(Mouse, null, 'flash.ui::Mouse');
})();
//flash.ui.Mouse


//flash.filters.BitmapFilter
$es4.$$package('flash.filters').BitmapFilter = function () { throw new Error('Use of unimplemented class: BitmapFilter'); }
//flash.filters.BitmapFilter


//flash.display.ShaderParameterType
$es4.$$package('flash.display').ShaderParameterType = function () { throw new Error('Use of unimplemented class: ShaderParameterType'); }
//flash.display.ShaderParameterType


//flash.net.ObjectEncoding
$es4.$$package('flash.net').ObjectEncoding = (function ()
{
	//imports
	var IDynamicPropertyWriter;

	//properties
	var $$j = {};
	ObjectEncoding.AMF0 = 0;
	ObjectEncoding.AMF3 = 3;
	ObjectEncoding.DEFAULT = 3;

	//class pre initializer
	ObjectEncoding.$$sinit = (function ()
	{
		ObjectEncoding.$$sinit = undefined;

		//initialize imports
		IDynamicPropertyWriter = $es4.$$['flash.net'].IDynamicPropertyWriter;

		//set prototype and constructor
		ObjectEncoding.prototype = Object.create(Object.prototype);
		Object.defineProperty(ObjectEncoding.prototype, "constructor", { value: ObjectEncoding, enumerable: false });

		//hold private values
		Object.defineProperty(ObjectEncoding.prototype, '$$v', {value:{}});
	});

	//class initializer
	ObjectEncoding.$$cinit = (function ()
	{
		ObjectEncoding.$$cinit = undefined;
	});

	Object.defineProperty(ObjectEncoding, 'dynamicPropertyWriter', {get:function ()
	{
		if (ObjectEncoding.$$cinit !== undefined) ObjectEncoding.$$cinit();

		throw $es4.$$primitive(new Error('ObjectEncoding: attempted call to an unimplemented function "dynamicPropertyWriter"'));
	}, set:function ($$$$object)
	{
		if (ObjectEncoding.$$cinit !== undefined) ObjectEncoding.$$cinit();

		//set default parameter values
		var object = $es4.$$coerce($$$$object, IDynamicPropertyWriter);

		throw $es4.$$primitive(new Error('ObjectEncoding: attempted call to an unimplemented function "dynamicPropertyWriter"'));
	}});

	function ObjectEncoding()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof ObjectEncoding) || $$this.$$ObjectEncoding !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], ObjectEncoding) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			ObjectEncoding.$$construct($$this, $$args);
		}
	}

	//construct
	ObjectEncoding.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (ObjectEncoding.$$cinit !== undefined) ObjectEncoding.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$ObjectEncoding', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		ObjectEncoding.$$iinit($$this);

		//call constructor
		if (args !== undefined) ObjectEncoding.$$constructor.apply($$this, args);
	});

	//initializer
	ObjectEncoding.$$iinit = (function ($$this)
	{
	});

	//constructor
	ObjectEncoding.$$constructor = (function ()
	{
		var $$this = this;
		throw $es4.$$primitive(new Error('ObjectEncoding: attempted call to an unimplemented constructor'));
	});

	return $es4.$$class(ObjectEncoding, null, 'flash.net::ObjectEncoding');
})();
//flash.net.ObjectEncoding


//flash.events.UncaughtErrorEvents
$es4.$$package('flash.events').UncaughtErrorEvents = (function ()
{
	//imports
	var EventDispatcher;

	//class pre initializer
	UncaughtErrorEvents.$$sinit = (function ()
	{
		UncaughtErrorEvents.$$sinit = undefined;

		//initialize imports
		EventDispatcher = $es4.$$['flash.events'].EventDispatcher;

		//ensure $$sinit is called on super class
		if (EventDispatcher.$$sinit !== undefined) EventDispatcher.$$sinit();

		//set prototype and constructor
		UncaughtErrorEvents.prototype = Object.create(EventDispatcher.prototype);
		Object.defineProperty(UncaughtErrorEvents.prototype, "constructor", { value: UncaughtErrorEvents, enumerable: false });

		//hold private values
		Object.defineProperty(UncaughtErrorEvents.prototype, '$$v', {value:{}});
	});

	//class initializer
	UncaughtErrorEvents.$$cinit = (function ()
	{
		UncaughtErrorEvents.$$cinit = undefined;
	});

	function UncaughtErrorEvents()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof UncaughtErrorEvents) || $$this.$$UncaughtErrorEvents !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], UncaughtErrorEvents) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			UncaughtErrorEvents.$$construct($$this, $$args);
		}
	}

	//construct
	UncaughtErrorEvents.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (UncaughtErrorEvents.$$cinit !== undefined) UncaughtErrorEvents.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$UncaughtErrorEvents', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//call construct on super
		EventDispatcher.$$construct($$this);

		//initialize properties
		UncaughtErrorEvents.$$iinit($$this);

		//call constructor
		if (args !== undefined) UncaughtErrorEvents.$$constructor.apply($$this, args);
	});

	//initializer
	UncaughtErrorEvents.$$iinit = (function ($$this)
	{
		//call iinit on super
		EventDispatcher.$$iinit($$this);
	});

	//constructor
	UncaughtErrorEvents.$$constructor = (function ()
	{
		var $$this = this;

		EventDispatcher.$$constructor.call($$this);
	});

	return $es4.$$class(UncaughtErrorEvents, {EXTENDS:'flash.events.EventDispatcher'}, 'flash.events::UncaughtErrorEvents');
})();
//flash.events.UncaughtErrorEvents


//flash.system.ApplicationDomain
$es4.$$package('flash.system').ApplicationDomain = (function ()
{
	//imports
	var Stage;
	var ByteArray;
	var getDefinitionByName;
	var ApplicationDomain;

	//class pre initializer
	ApplicationDomain.$$sinit = (function ()
	{
		ApplicationDomain.$$sinit = undefined;

		//initialize imports
		Stage = $es4.$$['flash.display'].Stage;
		ByteArray = $es4.$$['flash.utils'].ByteArray;
		getDefinitionByName = $es4.$$['flash.utils'].getDefinitionByName;

		//set prototype and constructor
		ApplicationDomain.prototype = Object.create(Object.prototype);
		Object.defineProperty(ApplicationDomain.prototype, "constructor", { value: ApplicationDomain, enumerable: false });

		//hold private values
		Object.defineProperty(ApplicationDomain.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(ApplicationDomain.prototype, 'getDefinition', {
		get:function ()
		{
			var $$this = this;

			function getDefinition($$$$name)
			{
				//set default parameter values
				var name = $es4.$$coerce($$$$name, String);

				var definitions = $$this.$__definitions;
				if (definitions[name] !== undefined)
				{
					return definitions[name];
				}
				return $es4.$$['flash.utils'].getDefinitionByName(name);
			}

			return $$this.$$ApplicationDomain.$$getDefinition || ($$this.$$ApplicationDomain.$$getDefinition = getDefinition);
		}});


		//public instance method
		Object.defineProperty(ApplicationDomain.prototype, 'hasDefinition', {
		get:function ()
		{
			var $$this = this;

			function hasDefinition($$$$name)
			{
				//set default parameter values
				var name = $es4.$$coerce($$$$name, String);

				throw $es4.$$primitive(new Error('ApplicationDomain: attempted call to an unimplemented function "hasDefinition"'));
			}

			return $$this.$$ApplicationDomain.$$hasDefinition || ($$this.$$ApplicationDomain.$$hasDefinition = hasDefinition);
		}});

		Object.defineProperty(ApplicationDomain.prototype, 'domainMemory', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('ApplicationDomain: attempted call to an unimplemented function "domainMemory"'));
		}, set:function ($$$$mem)
		{
			//set default parameter values
			var mem = $es4.$$coerce($$$$mem, ByteArray);

			var $$this = this;
			throw $es4.$$primitive(new Error('ApplicationDomain: attempted call to an unimplemented function "domainMemory"'));
		}});
		Object.defineProperty(ApplicationDomain.prototype, 'parentDomain', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('ApplicationDomain: attempted call to an unimplemented function "parentDomain"'));
		}});

		//properties
		Object.defineProperty(ApplicationDomain.prototype, '$__definitions', {
		get:function () { var $$this = this; return $$this.$$ApplicationDomain.$__definitions; },
		set:function (value) { var $$this = this; $$this.$$ApplicationDomain.$__definitions = $es4.$$coerce(value, Object); }
		});

	});

	//class initializer
	ApplicationDomain.$$cinit = (function ()
	{
		ApplicationDomain.$$cinit = undefined;
	});

	Object.defineProperty(ApplicationDomain, 'currentDomain', {get:function ()
	{
		if (ApplicationDomain.$$cinit !== undefined) ApplicationDomain.$$cinit();

		return Stage.$__stageReference.loaderInfo.applicationDomain;
	}});
	Object.defineProperty(ApplicationDomain, 'MIN_DOMAIN_MEMORY_LENGTH', {get:function ()
	{
		if (ApplicationDomain.$$cinit !== undefined) ApplicationDomain.$$cinit();

		throw $es4.$$primitive(new Error('ApplicationDomain: attempted call to an unimplemented function "MIN_DOMAIN_MEMORY_LENGTH"'));
	}});

	function ApplicationDomain()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof ApplicationDomain) || $$this.$$ApplicationDomain !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], ApplicationDomain) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			ApplicationDomain.$$construct($$this, $$args);
		}
	}

	//construct
	ApplicationDomain.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (ApplicationDomain.$$cinit !== undefined) ApplicationDomain.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$ApplicationDomain', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		ApplicationDomain.$$iinit($$this);

		//call constructor
		if (args !== undefined) ApplicationDomain.$$constructor.apply($$this, args);
	});

	//initializer
	ApplicationDomain.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$ApplicationDomain.$__definitions = $es4.$$coerce({}, Object);
	
	});

	//constructor
	ApplicationDomain.$$constructor = (function ($$$$parentDomain)
	{
		var $$this = this;
		//set default parameter values
		var parentDomain = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$parentDomain, $es4.$$['flash.system'].ApplicationDomain);

	});

	return $es4.$$class(ApplicationDomain, null, 'flash.system::ApplicationDomain');
})();
//flash.system.ApplicationDomain


//flash.media.StageVideoAvailability
$es4.$$package('flash.media').StageVideoAvailability = function () { throw new Error('Use of unimplemented class: StageVideoAvailability'); }
//flash.media.StageVideoAvailability


//flash.display.GraphicsPathCommand
$es4.$$package('flash.display').GraphicsPathCommand = function () { throw new Error('Use of unimplemented class: GraphicsPathCommand'); }
//flash.display.GraphicsPathCommand


//flash.net.drm.VoucherAccessInfo
$es4.$$package('flash.net.drm').VoucherAccessInfo = function () { throw new Error('Use of unimplemented class: VoucherAccessInfo'); }
//flash.net.drm.VoucherAccessInfo


//flash.text.engine.TextRotation
$es4.$$package('flash.text.engine').TextRotation = function () { throw new Error('Use of unimplemented class: TextRotation'); }
//flash.text.engine.TextRotation


//flash.media.VideoStatus
$es4.$$package('flash.media').VideoStatus = (function ()
{
	//properties
	var $$j = {};
	VideoStatus.ACCELERATED = "accelerated";
	VideoStatus.SOFTWARE = "software";
	VideoStatus.UNAVAILABLE = "unavailable";

	//class pre initializer
	VideoStatus.$$sinit = (function ()
	{
		VideoStatus.$$sinit = undefined;

		//set prototype and constructor
		VideoStatus.prototype = Object.create(Object.prototype);
		Object.defineProperty(VideoStatus.prototype, "constructor", { value: VideoStatus, enumerable: false });

		//hold private values
		Object.defineProperty(VideoStatus.prototype, '$$v', {value:{}});
	});

	//class initializer
	VideoStatus.$$cinit = (function ()
	{
		VideoStatus.$$cinit = undefined;
	});

	function VideoStatus()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof VideoStatus) || $$this.$$VideoStatus !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], VideoStatus) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			VideoStatus.$$construct($$this, $$args);
		}
	}

	//construct
	VideoStatus.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (VideoStatus.$$cinit !== undefined) VideoStatus.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$VideoStatus', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		VideoStatus.$$iinit($$this);

		//call constructor
		if (args !== undefined) VideoStatus.$$constructor.apply($$this, args);
	});

	//initializer
	VideoStatus.$$iinit = (function ($$this)
	{
	});

	//constructor
	VideoStatus.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(VideoStatus, null, 'flash.media::VideoStatus');
})();
//flash.media.VideoStatus


//flash.events.ErrorEvent
$es4.$$package('flash.events').ErrorEvent = (function ()
{
	//imports
	var Event;
	var TextEvent;
	var ErrorEvent;

	//properties
	var $$j = {};
	ErrorEvent.ERROR = 'error';

	//class pre initializer
	ErrorEvent.$$sinit = (function ()
	{
		ErrorEvent.$$sinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;
		TextEvent = $es4.$$['flash.events'].TextEvent;

		//ensure $$sinit is called on super class
		if (TextEvent.$$sinit !== undefined) TextEvent.$$sinit();

		//set prototype and constructor
		ErrorEvent.prototype = Object.create(TextEvent.prototype);
		Object.defineProperty(ErrorEvent.prototype, "constructor", { value: ErrorEvent, enumerable: false });

		//hold private values
		Object.defineProperty(ErrorEvent.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(ErrorEvent.prototype, 'clone', {
		get:function ()
		{
			var $$this = this;

			function clone()
			{
				return $es4.$$coerce($es4.$$primitive(new ErrorEvent($$this.type, $$this.bubbles, $$this.cancelable, $$this.text, $$this.errorID)), Event);
			}

			return $$this.$$ErrorEvent.$$clone || ($$this.$$ErrorEvent.$$clone = clone);
		}});


		//public instance method
		Object.defineProperty(ErrorEvent.prototype, 'toString', {
		get:function ()
		{
			var $$this = this;

			function toString()
			{
				return $$this.formatToString('ErrorEvent', 'bubbles', 'cancelable', 'text', 'errorID');
			}

			return $$this.$$ErrorEvent.$$toString || ($$this.$$ErrorEvent.$$toString = toString);
		}});

		Object.defineProperty(ErrorEvent.prototype, 'errorID', {get:function ()
		{
			var $$this = this;
			return $$this.$$ErrorEvent._errorID;
		}});

		//properties
		ErrorEvent.prototype.$$v._errorID = {
		get:function () { var $$this = this.$$this; return $$this.$$ErrorEvent.$$p._errorID; },
		set:function (value) { var $$this = this.$$this; $$this.$$ErrorEvent.$$p._errorID = $es4.$$coerce(value, int); }
		};

	});

	//class initializer
	ErrorEvent.$$cinit = (function ()
	{
		ErrorEvent.$$cinit = undefined;
	});

	function ErrorEvent()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof ErrorEvent) || $$this.$$ErrorEvent !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], ErrorEvent) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			ErrorEvent.$$construct($$this, $$args);
		}
	}

	//construct
	ErrorEvent.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (ErrorEvent.$$cinit !== undefined) ErrorEvent.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$ErrorEvent', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$ErrorEvent, '_errorID', ErrorEvent.prototype.$$v._errorID);

		//call construct on super
		TextEvent.$$construct($$this);

		//initialize properties
		ErrorEvent.$$iinit($$this);

		//call constructor
		if (args !== undefined) ErrorEvent.$$constructor.apply($$this, args);
	});

	//initializer
	ErrorEvent.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$ErrorEvent.$$p._errorID = $es4.$$coerce(0, int);
	
		//call iinit on super
		TextEvent.$$iinit($$this);
	});

	//constructor
	ErrorEvent.$$constructor = (function ($$$$type, $$$$bubbles, $$$$cancelable, $$$$text, $$$$id)
	{
		var $$this = this;
		//set default parameter values
		var type = $es4.$$coerce($$$$type, String);
		var bubbles = (1 > arguments.length - 1) ? false : $es4.$$coerce($$$$bubbles, Boolean);
		var cancelable = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$cancelable, Boolean);
		var text = (3 > arguments.length - 1) ? "" : $es4.$$coerce($$$$text, String);
		var id = (4 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$id, int);

		TextEvent.$$constructor.call($$this, type, bubbles, cancelable, text);
		$$this.$$ErrorEvent._errorID = id;
	});

	return $es4.$$class(ErrorEvent, {EXTENDS:'flash.events.TextEvent'}, 'flash.events::ErrorEvent');
})();
//flash.events.ErrorEvent


//flash.ui.ContextMenuBuiltInItems
$es4.$$package('flash.ui').ContextMenuBuiltInItems = function () { throw new Error('Use of unimplemented class: ContextMenuBuiltInItems'); }
//flash.ui.ContextMenuBuiltInItems


//flash.printing.PrintJob
$es4.$$package('flash.printing').PrintJob = (function ()
{
	//imports
	var Sprite;
	var EventDispatcher;
	var Rectangle;
	var PrintJobOptions;

	//class pre initializer
	PrintJob.$$sinit = (function ()
	{
		PrintJob.$$sinit = undefined;

		//initialize imports
		Sprite = $es4.$$['flash.display'].Sprite;
		EventDispatcher = $es4.$$['flash.events'].EventDispatcher;
		Rectangle = $es4.$$['flash.geom'].Rectangle;
		PrintJobOptions = $es4.$$['flash.printing'].PrintJobOptions;

		//ensure $$sinit is called on super class
		if (EventDispatcher.$$sinit !== undefined) EventDispatcher.$$sinit();

		//set prototype and constructor
		PrintJob.prototype = Object.create(EventDispatcher.prototype);
		Object.defineProperty(PrintJob.prototype, "constructor", { value: PrintJob, enumerable: false });

		//hold private values
		Object.defineProperty(PrintJob.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(PrintJob.prototype, 'addPage', {
		get:function ()
		{
			var $$this = this;

			function addPage($$$$sprite, $$$$printArea, $$$$options, $$$$frameNum)
			{
				//set default parameter values
				var sprite = $es4.$$coerce($$$$sprite, Sprite);
				var printArea = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$printArea, Rectangle);
				var options = (2 > arguments.length - 1) ? null : $es4.$$coerce($$$$options, PrintJobOptions);
				var frameNum = (3 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$frameNum, int);

				$$this.$$PrintJob.$_pages.push({sprite:sprite, printArea:printArea, options:options, frameNum:frameNum});
			}

			return $$this.$$PrintJob.$$addPage || ($$this.$$PrintJob.$$addPage = addPage);
		}});


		//public instance method
		Object.defineProperty(PrintJob.prototype, 'send', {
		get:function ()
		{
			var $$this = this;

			function send()
			{
				for (var i = $es4.$$coerce($$this.$$PrintJob.$_pages.length, int); i--;)
				{
					$$this.$$PrintJob.$_pages[i].sprite.$__domView.classList.add('printable');
				}
				window.print();
			}

			return $$this.$$PrintJob.$$send || ($$this.$$PrintJob.$$send = send);
		}});


		//public instance method
		Object.defineProperty(PrintJob.prototype, 'start', {
		get:function ()
		{
			var $$this = this;

			function start()
			{
				var nodes = window.document.querySelectorAll('.printable');
				for (var i = $es4.$$coerce(nodes.length, Number); i--;)
				{
					nodes[i].classList.remove('printable');
				}
				return true;
			}

			return $$this.$$PrintJob.$$start || ($$this.$$PrintJob.$$start = start);
		}});

		Object.defineProperty(PrintJob.prototype, 'orientation', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('PrintJob: attempted call to an unimplemented function "orientation"'));
		}});
		Object.defineProperty(PrintJob.prototype, 'pageHeight', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('PrintJob: attempted call to an unimplemented function "pageHeight"'));
		}});
		Object.defineProperty(PrintJob.prototype, 'pageWidth', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('PrintJob: attempted call to an unimplemented function "pageWidth"'));
		}});
		Object.defineProperty(PrintJob.prototype, 'paperHeight', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('PrintJob: attempted call to an unimplemented function "paperHeight"'));
		}});
		Object.defineProperty(PrintJob.prototype, 'paperWidth', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('PrintJob: attempted call to an unimplemented function "paperWidth"'));
		}});

		//properties
		PrintJob.prototype.$$v.$_pages = {
		get:function () { var $$this = this.$$this; return $$this.$$PrintJob.$$p.$_pages; },
		set:function (value) { var $$this = this.$$this; $$this.$$PrintJob.$$p.$_pages = $es4.$$coerce(value, Array); }
		};

	});

	//class initializer
	PrintJob.$$cinit = (function ()
	{
		PrintJob.$$cinit = undefined;
	});

	Object.defineProperty(PrintJob, 'isSupported', {get:function ()
	{
		if (PrintJob.$$cinit !== undefined) PrintJob.$$cinit();

		return true;
	}});

	function PrintJob()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof PrintJob) || $$this.$$PrintJob !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], PrintJob) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			PrintJob.$$construct($$this, $$args);
		}
	}

	//construct
	PrintJob.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (PrintJob.$$cinit !== undefined) PrintJob.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$PrintJob', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$PrintJob, '$_pages', PrintJob.prototype.$$v.$_pages);

		//call construct on super
		EventDispatcher.$$construct($$this);

		//initialize properties
		PrintJob.$$iinit($$this);

		//call constructor
		if (args !== undefined) PrintJob.$$constructor.apply($$this, args);
	});

	//initializer
	PrintJob.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$PrintJob.$$p.$_pages = $es4.$$coerce([], Array);
	
		//call iinit on super
		EventDispatcher.$$iinit($$this);
	});

	//constructor
	PrintJob.$$constructor = (function ()
	{
		var $$this = this;

		EventDispatcher.$$constructor.call($$this);
	});

	return $es4.$$class(PrintJob, {EXTENDS:'flash.events.EventDispatcher'}, 'flash.printing::PrintJob');
})();
//flash.printing.PrintJob


//flash.display.ShaderInput
$es4.$$package('flash.display').ShaderInput = function () { throw new Error('Use of unimplemented class: ShaderInput'); }
//flash.display.ShaderInput


//flash.display3D.Context3DTriangleFace
$es4.$$package('flash.display3D').Context3DTriangleFace = function () { throw new Error('Use of unimplemented class: Context3DTriangleFace'); }
//flash.display3D.Context3DTriangleFace


//flash.filters.GlowFilter
$es4.$$package('flash.filters').GlowFilter = function () { throw new Error('Use of unimplemented class: GlowFilter'); }
//flash.filters.GlowFilter


//flash.display.MorphShape
$es4.$$package('flash.display').MorphShape = function () { throw new Error('Use of unimplemented class: MorphShape'); }
//flash.display.MorphShape


//flash.xml.XMLDocument
$es4.$$package('flash.xml').XMLDocument = (function ()
{
	//imports
	var XMLNode;
	var Browser;
	var XMLNodeType;

	//properties
	var $$j = {};
	Object.defineProperty(XMLDocument, '$_regex2', {
	get:function () { if (XMLDocument.$$cinit !== undefined) XMLDocument.$$cinit(); return $$j.$_regex2; },
	set:function (value) { if (XMLDocument.$$cinit !== undefined) XMLDocument.$$cinit(); $$j.$_regex2 = $es4.$$coerce(value, RegExp); }
	});

	Object.defineProperty(XMLDocument, '$_regex3', {
	get:function () { if (XMLDocument.$$cinit !== undefined) XMLDocument.$$cinit(); return $$j.$_regex3; },
	set:function (value) { if (XMLDocument.$$cinit !== undefined) XMLDocument.$$cinit(); $$j.$_regex3 = $es4.$$coerce(value, RegExp); }
	});


	//class pre initializer
	XMLDocument.$$sinit = (function ()
	{
		XMLDocument.$$sinit = undefined;

		//initialize imports
		XMLNode = $es4.$$['flash.xml'].XMLNode;
		Browser = $es4.$$['browser'].Browser;
		XMLNodeType = $es4.$$['flash.xml'].XMLNodeType;

		//ensure $$sinit is called on super class
		if (XMLNode.$$sinit !== undefined) XMLNode.$$sinit();

		//set prototype and constructor
		XMLDocument.prototype = Object.create(XMLNode.prototype);
		Object.defineProperty(XMLDocument.prototype, "constructor", { value: XMLDocument, enumerable: false });

		//hold private values
		Object.defineProperty(XMLDocument.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(XMLDocument.prototype, 'createElement', {
		get:function ()
		{
			var $$this = this;

			function createElement($$$$name)
			{
				//set default parameter values
				var name = $es4.$$coerce($$$$name, String);

				throw $es4.$$primitive(new Error('XMLDocument: attempted call to an unimplemented function "createElement"'));
			}

			return $$this.$$XMLDocument.$$createElement || ($$this.$$XMLDocument.$$createElement = createElement);
		}});


		//public instance method
		Object.defineProperty(XMLDocument.prototype, 'createTextNode', {
		get:function ()
		{
			var $$this = this;

			function createTextNode($$$$text)
			{
				//set default parameter values
				var text = $es4.$$coerce($$$$text, String);

				throw $es4.$$primitive(new Error('XMLDocument: attempted call to an unimplemented function "createTextNode"'));
			}

			return $$this.$$XMLDocument.$$createTextNode || ($$this.$$XMLDocument.$$createTextNode = createTextNode);
		}});


		//public instance method
		Object.defineProperty(XMLDocument.prototype, 'parseXML', {
		get:function ()
		{
			var $$this = this;

			function parseXML($$$$source)
			{
				//set default parameter values
				var source = $es4.$$coerce($$$$source, String);

				$$this.$$XMLDocument.$_source = source = XMLDocument.trim(source.replace(XMLDocument.$_regex2, ''));
				var xmlDoc = null;
				var node = null;
				if (source.charAt(0) !== '<')
				{
					if (source.indexOf('<![CDATA[') === 0)
					{
						node = $es4.$$primitive(new XMLNode(XMLNodeType.CDATA_NODE, source));
					}
					else
					{
						node = $es4.$$primitive(new XMLNode(XMLNodeType.TEXT_NODE, source));
					}
					$$this.$__childNodes = [node];
					$$this.firstChild = $$this.lastChild = node;
					return;
				}
				xmlDoc = Browser.domParseXML(source);
				node = $es4.$$primitive(new XMLNode(XMLNodeType.ELEMENT_NODE, xmlDoc.documentElement.nodevalue));
				$$this.$__childNodes = [node];
				$$this.firstChild = $$this.lastChild = node;
				$$this.$$XMLDocument.$_parseRecursiveXML(node, xmlDoc.documentElement);
			}

			return $$this.$$XMLDocument.$$parseXML || ($$this.$$XMLDocument.$$parseXML = parseXML);
		}});


		//private instance method
		XMLDocument.prototype.$$v.$_parseRecursiveXML = {
		get:function ()
		{
			var $$this = this.$$this;

			function $_parseRecursiveXML($$$$node, $$$$domObject)
			{
				//set default parameter values
				var node = $$$$node;
				var domObject = $$$$domObject;

				node.$__prefix = domObject.prefix;
				node.nodeName = domObject.nodeName;
				node.$__localName = domObject.localName;
				var hasError = false;
				if (domObject.nodeName == 'parsererror')
				{
					domObject.nodeName = null;
					node.nodeType = XMLNodeType.TEXT_NODE;
					hasError = true;
				}
				if (node.nodeName == "#cdata-section")
				{
					node.nodeName = null;
				}
				node.nodeValue = domObject.nodeValue;
				if (hasError)
				{
					return;
				}
				var domObjectAttributes = domObject.attributes;
				if (domObjectAttributes && domObjectAttributes.length)
				{
					var attributes = node.attributes;
					for (var i = $es4.$$coerce(domObjectAttributes.length, int); i--;)
					{
						attributes[domObjectAttributes[i].nodeName] = domObjectAttributes[i].value;
					}
				}
				var ignoreWhite = $$this.ignoreWhite;
				var domObjectChildNodes = domObject.childNodes;
				if (domObjectChildNodes && domObjectChildNodes.length)
				{
					var childNodes = node.$__childNodes;
					for (i = $es4.$$coerce(domObjectChildNodes.length, int); i--;)
					{
						var innerNode = domObjectChildNodes[i];
						if (innerNode.nodeName == 'parsererror')
						{
							continue;
						}
						if (ignoreWhite)
						{
							if (innerNode.nodeType == XMLNodeType.ELEMENT_NODE)
							{
								innerNode.nodeValue = (innerNode.nodeValue) ? XMLDocument.trim(innerNode.nodeValue) : '';
							}
							else if (innerNode.nodeType == XMLNodeType.TEXT_NODE && !((XMLDocument.$_regex3).test(innerNode.nodeValue)))
							{
								continue;
							}
						}
						innerNode = $es4.$$primitive(new XMLNode(innerNode.nodeType, innerNode.nodeValue));
						innerNode.parentNode = node;
						$$this.$$XMLDocument.$_parseRecursiveXML(innerNode, domObject.childNodes[i]);
						childNodes.unshift(innerNode);
					}
					node.firstChild = childNodes[0];
					node.lastChild = childNodes[childNodes.length - 1];
				}
			}

			return $$this.$$XMLDocument.$$p.$$$_parseRecursiveXML || ($$this.$$XMLDocument.$$p.$$$_parseRecursiveXML = $_parseRecursiveXML);
		}};


		//public instance method
		Object.defineProperty(XMLDocument.prototype, 'toString', {
		get:function ()
		{
			var $$this = this;

			function toString()
			{
				return $$this.$$XMLDocument.$_source;
			}

			return $$this.$$XMLDocument.$$toString || ($$this.$$XMLDocument.$$toString = toString);
		}});

		//properties
		XMLDocument.prototype.$$v.$_source = {
		get:function () { var $$this = this.$$this; return $$this.$$XMLDocument.$$p.$_source; },
		set:function (value) { var $$this = this.$$this; $$this.$$XMLDocument.$$p.$_source = $es4.$$coerce(value, String); }
		};

		Object.defineProperty(XMLDocument.prototype, 'docTypeDecl', {
		get:function () { var $$this = this; return $$this.$$XMLDocument.docTypeDecl; },
		set:function (value) { var $$this = this; $$this.$$XMLDocument.docTypeDecl = $es4.$$coerce(value, Object); }
		});

		Object.defineProperty(XMLDocument.prototype, 'idMap', {
		get:function () { var $$this = this; return $$this.$$XMLDocument.idMap; },
		set:function (value) { var $$this = this; $$this.$$XMLDocument.idMap = $es4.$$coerce(value, Object); }
		});

		Object.defineProperty(XMLDocument.prototype, 'ignoreWhite', {
		get:function () { var $$this = this; return $$this.$$XMLDocument.ignoreWhite; },
		set:function (value) { var $$this = this; $$this.$$XMLDocument.ignoreWhite = $es4.$$coerce(value, Boolean); }
		});

		Object.defineProperty(XMLDocument.prototype, 'xmlDecl', {
		get:function () { var $$this = this; return $$this.$$XMLDocument.xmlDecl; },
		set:function (value) { var $$this = this; $$this.$$XMLDocument.xmlDecl = $es4.$$coerce(value, Object); }
		});

	});

	//class initializer
	XMLDocument.$$cinit = (function ()
	{
		XMLDocument.$$cinit = undefined;

		//initialize properties
		$$j.$_regex2 = $es4.$$coerce(/<!--[\s\S]*?-->/g, RegExp);
		$$j.$_regex3 = $es4.$$coerce(/\S/, RegExp);
	
	});

	//private static method
	XMLDocument.trim = (function ($$$$string)
	{
		if (XMLDocument.$$cinit !== undefined) XMLDocument.$$cinit();

		//set default parameter values
		var string = $$$$string;

		if (!string)
		{
			return '';
		}
		return $es4.$$coerce(string.trim(), String);
	});
	function XMLDocument()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof XMLDocument) || $$this.$$XMLDocument !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], XMLDocument) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			XMLDocument.$$construct($$this, $$args);
		}
	}

	//construct
	XMLDocument.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (XMLDocument.$$cinit !== undefined) XMLDocument.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$XMLDocument', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$XMLDocument, '$_source', XMLDocument.prototype.$$v.$_source);

		//private instance method
		Object.defineProperty($$this.$$XMLDocument, '$_parseRecursiveXML', XMLDocument.prototype.$$v.$_parseRecursiveXML);

		//call construct on super
		XMLNode.$$construct($$this);

		//initialize properties
		XMLDocument.$$iinit($$this);

		//call constructor
		if (args !== undefined) XMLDocument.$$constructor.apply($$this, args);
	});

	//initializer
	XMLDocument.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$XMLDocument.$$p.$_source = $es4.$$coerce(undefined, String);
		$$this.$$XMLDocument.docTypeDecl = $es4.$$coerce(undefined, Object);
		$$this.$$XMLDocument.idMap = $es4.$$coerce(undefined, Object);
		$$this.$$XMLDocument.ignoreWhite = $es4.$$coerce(undefined, Boolean);
		$$this.$$XMLDocument.xmlDecl = $es4.$$coerce(undefined, Object);
	
		//call iinit on super
		XMLNode.$$iinit($$this);
	});

	//constructor
	XMLDocument.$$constructor = (function ($$$$source)
	{
		var $$this = this;
		//set default parameter values
		var source = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$source, String);

		if (source)
		{
			$$this.parseXML(source);
		}
		XMLNode.$$constructor.call($$this, XMLNodeType.ELEMENT_NODE, source);
	});

	return $es4.$$class(XMLDocument, {EXTENDS:'flash.xml.XMLNode'}, 'flash.xml::XMLDocument');
})();
//flash.xml.XMLDocument


//flash.events.VideoEvent
$es4.$$package('flash.events').VideoEvent = function () { throw new Error('Use of unimplemented class: VideoEvent'); }
//flash.events.VideoEvent


//flash.ui.MultitouchInputMode
$es4.$$package('flash.ui').MultitouchInputMode = function () { throw new Error('Use of unimplemented class: MultitouchInputMode'); }
//flash.ui.MultitouchInputMode


//flash.text.TextFieldAutoSize
$es4.$$package('flash.text').TextFieldAutoSize = (function ()
{
	//properties
	var $$j = {};
	TextFieldAutoSize.CENTER = "center";
	TextFieldAutoSize.LEFT = "left";
	TextFieldAutoSize.NONE = "none";
	TextFieldAutoSize.RIGHT = "right";

	//class pre initializer
	TextFieldAutoSize.$$sinit = (function ()
	{
		TextFieldAutoSize.$$sinit = undefined;

		//set prototype and constructor
		TextFieldAutoSize.prototype = Object.create(Object.prototype);
		Object.defineProperty(TextFieldAutoSize.prototype, "constructor", { value: TextFieldAutoSize, enumerable: false });

		//hold private values
		Object.defineProperty(TextFieldAutoSize.prototype, '$$v', {value:{}});
	});

	//class initializer
	TextFieldAutoSize.$$cinit = (function ()
	{
		TextFieldAutoSize.$$cinit = undefined;
	});

	function TextFieldAutoSize()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof TextFieldAutoSize) || $$this.$$TextFieldAutoSize !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], TextFieldAutoSize) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			TextFieldAutoSize.$$construct($$this, $$args);
		}
	}

	//construct
	TextFieldAutoSize.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (TextFieldAutoSize.$$cinit !== undefined) TextFieldAutoSize.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$TextFieldAutoSize', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		TextFieldAutoSize.$$iinit($$this);

		//call constructor
		if (args !== undefined) TextFieldAutoSize.$$constructor.apply($$this, args);
	});

	//initializer
	TextFieldAutoSize.$$iinit = (function ($$this)
	{
	});

	//constructor
	TextFieldAutoSize.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(TextFieldAutoSize, null, 'flash.text::TextFieldAutoSize');
})();
//flash.text.TextFieldAutoSize


//flash.globalization.LastOperationStatus
$es4.$$package('flash.globalization').LastOperationStatus = function () { throw new Error('Use of unimplemented class: LastOperationStatus'); }
//flash.globalization.LastOperationStatus


//flash.utils.Proxy
$es4.$$package('flash.utils').Proxy = (function ()
{
	//imports
	var flash_proxy;

	//class pre initializer
	Proxy.$$sinit = (function ()
	{
		Proxy.$$sinit = undefined;

		//initialize imports
		flash_proxy = $es4.$$['flash.utils'].flash_proxy;

		//set prototype and constructor
		Proxy.prototype = Object.create(Object.prototype);
		Object.defineProperty(Proxy.prototype, "constructor", { value: Proxy, enumerable: false });

		//hold private values
		Object.defineProperty(Proxy.prototype, '$$v', {value:{}});

		//private instance method
		Proxy.prototype.$$v.$$get = {
		get:function ()
		{
			var $$this = this.$$this;

			function $$get($$$$key)
			{
				//set default parameter values
				var key = $$$$key;

				return $$this.$$namespace($$this.flash_proxy).getProperty(key);
			}

			return $$this.$$Proxy.$$p.$$$$get || ($$this.$$Proxy.$$p.$$$$get = $$get);
		}};


		//private instance method
		Proxy.prototype.$$v.$$set = {
		get:function ()
		{
			var $$this = this.$$this;

			function $$set($$$$key, $$$$value)
			{
				//set default parameter values
				var key = $$$$key;
				var value = $$$$value;

				$$this.$$namespace($$this.flash_proxy).setProperty(key, value);
				return value;
			}

			return $$this.$$Proxy.$$p.$$$$set || ($$this.$$Proxy.$$p.$$$$set = $$set);
		}};


		//private instance method
		Proxy.prototype.$$v.$$call = {
		get:function ()
		{
			var $$this = this.$$this;

			function $$call($$$$name, $$$$args)
			{
				//set default parameter values
				var name = $$$$name;
				var args = $es4.$$coerce($$$$args, Array);

				args.unshift(name);
				return $$this.$$namespace($$this.flash_proxy).callProperty.apply($$this, args);
			}

			return $$this.$$Proxy.$$p.$$$$call || ($$this.$$Proxy.$$p.$$$$call = $$call);
		}};


		//private instance method
		Proxy.prototype.$$v.$$delete = {
		get:function ()
		{
			var $$this = this.$$this;

			function $$delete($$$$key)
			{
				//set default parameter values
				var key = $$$$key;

				return $$this.$$namespace($$this.flash_proxy).deleteProperty(key);
			}

			return $$this.$$Proxy.$$p.$$$$delete || ($$this.$$Proxy.$$p.$$$$delete = $$delete);
		}};


		//private instance method
		Proxy.prototype.$$v.$$nextName = {
		get:function ()
		{
			var $$this = this.$$this;

			function $$nextName($$$$index)
			{
				//set default parameter values
				var index = $es4.$$coerce($$$$index, int);

				return $$this.$$namespace($$this.flash_proxy).nextName(index);
			}

			return $$this.$$Proxy.$$p.$$$$nextName || ($$this.$$Proxy.$$p.$$$$nextName = $$nextName);
		}};


		//private instance method
		Proxy.prototype.$$v.$$nextNameIndex = {
		get:function ()
		{
			var $$this = this.$$this;

			function $$nextNameIndex($$$$index)
			{
				//set default parameter values
				var index = $es4.$$coerce($$$$index, int);

				return $$this.$$namespace($$this.flash_proxy).nextNameIndex(index);
			}

			return $$this.$$Proxy.$$p.$$$$nextNameIndex || ($$this.$$Proxy.$$p.$$$$nextNameIndex = $$nextNameIndex);
		}};


		//private instance method
		Proxy.prototype.$$v.$$nextValue = {
		get:function ()
		{
			var $$this = this.$$this;

			function $$nextValue($$$$index)
			{
				//set default parameter values
				var index = $es4.$$coerce($$$$index, int);

				return $$this.$$namespace($$this.flash_proxy).nextValue(index);
			}

			return $$this.$$Proxy.$$p.$$$$nextValue || ($$this.$$Proxy.$$p.$$$$nextValue = $$nextValue);
		}};

		//properties
		Proxy.prototype.$$v.$$isProxy = {
		get:function () { var $$this = this.$$this; return $$this.$$Proxy.$$p.$$isProxy; },
		set:function (value) { var $$this = this.$$this; $$this.$$Proxy.$$p.$$isProxy = $es4.$$coerce(value, Boolean); }
		};

		Proxy.prototype.$$v.$keys = {
		get:function () { var $$this = this.$$this; return $$this.$$Proxy.$$p.$keys; },
		set:function (value) { var $$this = this.$$this; $$this.$$Proxy.$$p.$keys = $es4.$$coerce(value, Array); }
		};

		Proxy.prototype.$$v.$values = {
		get:function () { var $$this = this.$$this; return $$this.$$Proxy.$$p.$values; },
		set:function (value) { var $$this = this.$$this; $$this.$$Proxy.$$p.$values = $es4.$$coerce(value, Array); }
		};

	});

	//class initializer
	Proxy.$$cinit = (function ()
	{
		Proxy.$$cinit = undefined;
	});

	function Proxy()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof Proxy) || $$this.$$Proxy !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Proxy) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			Proxy.$$construct($$this, $$args);
		}
	}

	//construct
	Proxy.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (Proxy.$$cinit !== undefined) Proxy.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$Proxy', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


			//custom namespace method
			$es4.$$cnamespace_function('deleteProperty', $$this, $$this.$$Proxy.$$ns, $['flash.utils'].flash_proxy, (function ($$$$name)
			{
				//set default parameter values
				var name = $$$$name;

				for (var i = 0; i < $$this.$$Proxy.$keys.length; i++)
				{
					if ($$this.$$Proxy.$keys[i] == name)
					{
						break;
					}
				}
				if (i == $$this.$$Proxy.$keys.length)
				{
					return false;
				}
				$$this.$$Proxy.$keys.splice(i, 1);
				$$this.$$Proxy.$values.splice(i, 1);
				return true;
			}));



			//custom namespace method
			$es4.$$cnamespace_function('getProperty', $$this, $$this.$$Proxy.$$ns, $['flash.utils'].flash_proxy, (function ($$$$name)
			{
				//set default parameter values
				var name = $$$$name;

				for (var i = 0; i < $$this.$$Proxy.$keys.length; i++)
				{
					if ($$this.$$Proxy.$keys[i] == name)
					{
						break;
					}
				}
				if (i == $$this.$$Proxy.$keys.length)
				{
					return undefined;
				}
				return $$this.$$Proxy.$values[i];
			}));



			//custom namespace method
			$es4.$$cnamespace_function('setProperty', $$this, $$this.$$Proxy.$$ns, $['flash.utils'].flash_proxy, (function ($$$$name, $$$$value)
			{
				//set default parameter values
				var name = $$$$name;
				var value = $$$$value;

				for (var i = 0; i < $$this.$$Proxy.$keys.length; i++)
				{
					if ($$this.$$Proxy.$keys[i] == name)
					{
						break;
					}
				}
				$$this.$$Proxy.$keys[i] = name;
				$$this.$$Proxy.$values[i] = value;
			}));



			//custom namespace method
			$es4.$$cnamespace_function('hasProperty', $$this, $$this.$$Proxy.$$ns, $['flash.utils'].flash_proxy, (function ($$$$name)
			{
				//set default parameter values
				var name = $$$$name;

				for (var i = 0; i < $$this.$$Proxy.$keys.length; i++)
				{
					if ($$this.$$Proxy.$keys[i] == name)
					{
						return true;
					}
				}
				return false;
			}));



			//custom namespace method
			$es4.$$cnamespace_function('nextName', $$this, $$this.$$Proxy.$$ns, $['flash.utils'].flash_proxy, (function ($$$$index)
			{
				//set default parameter values
				var index = $es4.$$coerce($$$$index, int);

				return $es4.$$coerce($$this.$$Proxy.$keys[index - 1], String);
			}));



			//custom namespace method
			$es4.$$cnamespace_function('nextNameIndex', $$this, $$this.$$Proxy.$$ns, $['flash.utils'].flash_proxy, (function ($$$$index)
			{
				//set default parameter values
				var index = $es4.$$coerce($$$$index, int);

				return (index < $$this.$$Proxy.$keys.length) ? index + 1 : 0;
			}));



			//custom namespace method
			$es4.$$cnamespace_function('nextValue', $$this, $$this.$$Proxy.$$ns, $['flash.utils'].flash_proxy, (function ($$$$index)
			{
				//set default parameter values
				var index = $es4.$$coerce($$$$index, int);

				return $$this.$$Proxy.$values[index - 1];
			}));



			//custom namespace method
			$es4.$$cnamespace_function('callProperty', $$this, $$this.$$Proxy.$$ns, $['flash.utils'].flash_proxy, (function ($$$$name, $$$$rest)
			{
				//set default parameter values
				var name = $$$$name;
				for (var $$i = 1, $$length = arguments.length, rest = new Array($$length - 1); $$i < $$length; $$i += 1) rest[$$i - 1] = arguments[$$i];

				for (var i = 0; i < $$this.$$Proxy.$keys.length; i++)
				{
					if ($$this.$$Proxy.$keys[i] == name)
					{
						break;
					}
				}
				if (i == $$this.$$Proxy.$keys.length)
				{
					throw $es4.$$primitive(new Error('property not found'));
				}
				return $$this.$$Proxy.$values[i].apply($$this, rest);
			}));



			//custom namespace method
			$es4.$$cnamespace_function('getDescendants', $$this, $$this.$$Proxy.$$ns, $['flash.utils'].flash_proxy, (function ($$$$name)
			{
				//set default parameter values
				var name = $$$$name;

				throw $es4.$$primitive(new Error('Proxy: not implemented'));
			}));



			//custom namespace method
			$es4.$$cnamespace_function('isAttribute', $$this, $$this.$$Proxy.$$ns, $['flash.utils'].flash_proxy, (function ($$$$name)
			{
				//set default parameter values
				var name = $$$$name;

				throw $es4.$$primitive(new Error('Proxy: not implemented'));
			}));


		Object.defineProperty($$this.$$Proxy, '$$isProxy', Proxy.prototype.$$v.$$isProxy);
		Object.defineProperty($$this.$$Proxy, '$keys', Proxy.prototype.$$v.$keys);
		Object.defineProperty($$this.$$Proxy, '$values', Proxy.prototype.$$v.$values);

		//private instance method
		Object.defineProperty($$this.$$Proxy, '$$get', Proxy.prototype.$$v.$$get);

		//private instance method
		Object.defineProperty($$this.$$Proxy, '$$set', Proxy.prototype.$$v.$$set);

		//private instance method
		Object.defineProperty($$this.$$Proxy, '$$call', Proxy.prototype.$$v.$$call);

		//private instance method
		Object.defineProperty($$this.$$Proxy, '$$delete', Proxy.prototype.$$v.$$delete);

		//private instance method
		Object.defineProperty($$this.$$Proxy, '$$nextName', Proxy.prototype.$$v.$$nextName);

		//private instance method
		Object.defineProperty($$this.$$Proxy, '$$nextNameIndex', Proxy.prototype.$$v.$$nextNameIndex);

		//private instance method
		Object.defineProperty($$this.$$Proxy, '$$nextValue', Proxy.prototype.$$v.$$nextValue);

		//initialize properties
		Proxy.$$iinit($$this);

		//call constructor
		if (args !== undefined) Proxy.$$constructor.apply($$this, args);
	});

	//initializer
	Proxy.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$Proxy.$$p.$$isProxy = $es4.$$coerce(true, Boolean);
		$$this.$$Proxy.$$p.$keys = $es4.$$coerce([], Array);
		$$this.$$Proxy.$$p.$values = $es4.$$coerce([], Array);
	
	});

	//constructor
	Proxy.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(Proxy, null, 'flash.utils::Proxy');
})();
//flash.utils.Proxy


//flash.errors.StackOverflowError
$es4.$$package('flash.errors').StackOverflowError = function () { throw new Error('Use of unimplemented class: StackOverflowError'); }
//flash.errors.StackOverflowError


//flash.geom.Rectangle
$es4.$$package('flash.geom').Rectangle = (function ()
{
	//imports
	var Point;
	var Rectangle;

	//class pre initializer
	Rectangle.$$sinit = (function ()
	{
		Rectangle.$$sinit = undefined;

		//initialize imports
		Point = $es4.$$['flash.geom'].Point;

		//set prototype and constructor
		Rectangle.prototype = Object.create(Object.prototype);
		Object.defineProperty(Rectangle.prototype, "constructor", { value: Rectangle, enumerable: false });

		//hold private values
		Object.defineProperty(Rectangle.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(Rectangle.prototype, 'clone', {
		get:function ()
		{
			var $$this = this;

			function clone()
			{
				return $es4.$$coerce($es4.$$primitive(new Rectangle($$this.x, $$this.y, $$this.width, $$this.height)), $es4.$$['flash.geom'].Rectangle);
			}

			return $$this.$$Rectangle.$$clone || ($$this.$$Rectangle.$$clone = clone);
		}});


		//public instance method
		Object.defineProperty(Rectangle.prototype, 'contains', {
		get:function ()
		{
			var $$this = this;

			function contains($$$$x, $$$$y)
			{
				//set default parameter values
				var x = $es4.$$coerce($$$$x, Number);
				var y = $es4.$$coerce($$$$y, Number);

				return $es4.$$coerce($$this.x <= x && x <= $$this.right && $$this.y <= y && y <= $$this.bottom, Boolean);
			}

			return $$this.$$Rectangle.$$contains || ($$this.$$Rectangle.$$contains = contains);
		}});


		//public instance method
		Object.defineProperty(Rectangle.prototype, 'containsPoint', {
		get:function ()
		{
			var $$this = this;

			function containsPoint($$$$point)
			{
				//set default parameter values
				var point = $es4.$$coerce($$$$point, Point);

				return $$this.contains(point.x, point.y);
			}

			return $$this.$$Rectangle.$$containsPoint || ($$this.$$Rectangle.$$containsPoint = containsPoint);
		}});


		//public instance method
		Object.defineProperty(Rectangle.prototype, 'containsRect', {
		get:function ()
		{
			var $$this = this;

			function containsRect($$$$rect)
			{
				//set default parameter values
				var rect = $es4.$$coerce($$$$rect, $es4.$$['flash.geom'].Rectangle);

				return $$this.containsPoint(rect.topLeft) && $$this.containsPoint(rect.bottomRight);
			}

			return $$this.$$Rectangle.$$containsRect || ($$this.$$Rectangle.$$containsRect = containsRect);
		}});


		//public instance method
		Object.defineProperty(Rectangle.prototype, 'copyFrom', {
		get:function ()
		{
			var $$this = this;

			function copyFrom($$$$sourceRect)
			{
				//set default parameter values
				var sourceRect = $es4.$$coerce($$$$sourceRect, $es4.$$['flash.geom'].Rectangle);

				throw $es4.$$primitive(new Error('Rectangle: attempted call to an unimplemented function "copyFrom"'));
			}

			return $$this.$$Rectangle.$$copyFrom || ($$this.$$Rectangle.$$copyFrom = copyFrom);
		}});


		//public instance method
		Object.defineProperty(Rectangle.prototype, 'equals', {
		get:function ()
		{
			var $$this = this;

			function equals($$$$toCompare)
			{
				//set default parameter values
				var toCompare = $es4.$$coerce($$$$toCompare, $es4.$$['flash.geom'].Rectangle);

				return $es4.$$coerce($$this.x == toCompare.x && $$this.y == toCompare.y && $$this.width == toCompare.width && $$this.height == toCompare.height, Boolean);
			}

			return $$this.$$Rectangle.$$equals || ($$this.$$Rectangle.$$equals = equals);
		}});


		//public instance method
		Object.defineProperty(Rectangle.prototype, 'inflate', {
		get:function ()
		{
			var $$this = this;

			function inflate($$$$dx, $$$$dy)
			{
				//set default parameter values
				var dx = $es4.$$coerce($$$$dx, Number);
				var dy = $es4.$$coerce($$$$dy, Number);

				$$this.x -= dx;
				$$this.y -= dy;
				$$this.width += (dx * 2);
				$$this.height += (dy * 2);
			}

			return $$this.$$Rectangle.$$inflate || ($$this.$$Rectangle.$$inflate = inflate);
		}});


		//public instance method
		Object.defineProperty(Rectangle.prototype, 'inflatePoint', {
		get:function ()
		{
			var $$this = this;

			function inflatePoint($$$$point)
			{
				//set default parameter values
				var point = $es4.$$coerce($$$$point, Point);

				$$this.inflate(point.x, point.y);
			}

			return $$this.$$Rectangle.$$inflatePoint || ($$this.$$Rectangle.$$inflatePoint = inflatePoint);
		}});


		//public instance method
		Object.defineProperty(Rectangle.prototype, 'intersection', {
		get:function ()
		{
			var $$this = this;

			function intersection($$$$toIntersect)
			{
				//set default parameter values
				var toIntersect = $es4.$$coerce($$$$toIntersect, $es4.$$['flash.geom'].Rectangle);

				var x = Math.max($$this.x, toIntersect.x);
				var right = Math.min($$this.right, toIntersect.right);
				if (x <= right)
				{
					var y = Math.max($$this.y, toIntersect.y);
					var bottom = Math.min($$this.bottom, toIntersect.bottom);
					if (y <= bottom)
					{
						return $es4.$$coerce($es4.$$primitive(new Rectangle(x, y, right - x, bottom - y)), $es4.$$['flash.geom'].Rectangle);
					}
				}
				return $es4.$$coerce($es4.$$primitive(new Rectangle()), $es4.$$['flash.geom'].Rectangle);
			}

			return $$this.$$Rectangle.$$intersection || ($$this.$$Rectangle.$$intersection = intersection);
		}});


		//public instance method
		Object.defineProperty(Rectangle.prototype, 'intersects', {
		get:function ()
		{
			var $$this = this;

			function intersects($$$$toIntersect)
			{
				//set default parameter values
				var toIntersect = $es4.$$coerce($$$$toIntersect, $es4.$$['flash.geom'].Rectangle);

				return $es4.$$coerce(Math.max($$this.x, toIntersect.x) <= Math.min($$this.right, toIntersect.right) && Math.max($$this.y, toIntersect.y) <= Math.min($$this.bottom, toIntersect.bottom), Boolean);
			}

			return $$this.$$Rectangle.$$intersects || ($$this.$$Rectangle.$$intersects = intersects);
		}});


		//public instance method
		Object.defineProperty(Rectangle.prototype, 'isEmpty', {
		get:function ()
		{
			var $$this = this;

			function isEmpty()
			{
				return $es4.$$coerce($$this.x == 0 && $$this.y == 0 && $$this.width == 0 && $$this.height == 0, Boolean);
			}

			return $$this.$$Rectangle.$$isEmpty || ($$this.$$Rectangle.$$isEmpty = isEmpty);
		}});


		//public instance method
		Object.defineProperty(Rectangle.prototype, 'offset', {
		get:function ()
		{
			var $$this = this;

			function offset($$$$dx, $$$$dy)
			{
				//set default parameter values
				var dx = $es4.$$coerce($$$$dx, Number);
				var dy = $es4.$$coerce($$$$dy, Number);

				$$this.x += dx;
				$$this.y += dy;
			}

			return $$this.$$Rectangle.$$offset || ($$this.$$Rectangle.$$offset = offset);
		}});


		//public instance method
		Object.defineProperty(Rectangle.prototype, 'offsetPoint', {
		get:function ()
		{
			var $$this = this;

			function offsetPoint($$$$point)
			{
				//set default parameter values
				var point = $es4.$$coerce($$$$point, Point);

				$$this.offset(point.x, point.y);
			}

			return $$this.$$Rectangle.$$offsetPoint || ($$this.$$Rectangle.$$offsetPoint = offsetPoint);
		}});


		//public instance method
		Object.defineProperty(Rectangle.prototype, 'setEmpty', {
		get:function ()
		{
			var $$this = this;

			function setEmpty()
			{
				$$this.x = $$this.y = $$this.width = $$this.height = 0;
			}

			return $$this.$$Rectangle.$$setEmpty || ($$this.$$Rectangle.$$setEmpty = setEmpty);
		}});


		//public instance method
		Object.defineProperty(Rectangle.prototype, 'setTo', {
		get:function ()
		{
			var $$this = this;

			function setTo($$$$xa, $$$$ya, $$$$widtha, $$$$heighta)
			{
				//set default parameter values
				var xa = $es4.$$coerce($$$$xa, Number);
				var ya = $es4.$$coerce($$$$ya, Number);
				var widtha = $es4.$$coerce($$$$widtha, Number);
				var heighta = $es4.$$coerce($$$$heighta, Number);

				throw $es4.$$primitive(new Error('Rectangle: attempted call to an unimplemented function "setTo"'));
			}

			return $$this.$$Rectangle.$$setTo || ($$this.$$Rectangle.$$setTo = setTo);
		}});


		//public instance method
		Object.defineProperty(Rectangle.prototype, 'toString', {
		get:function ()
		{
			var $$this = this;

			function toString()
			{
				return '(x=' + $$this.x + ', y=' + $$this.y + ', w=' + $$this.width + ', h=' + $$this.height + ')';
			}

			return $$this.$$Rectangle.$$toString || ($$this.$$Rectangle.$$toString = toString);
		}});


		//public instance method
		Object.defineProperty(Rectangle.prototype, 'union', {
		get:function ()
		{
			var $$this = this;

			function union($$$$toUnion)
			{
				//set default parameter values
				var toUnion = $es4.$$coerce($$$$toUnion, $es4.$$['flash.geom'].Rectangle);

				if (toUnion.width === 0 || toUnion.height === 0)
				{
					return $$this.clone();
				}
				if ($$this.width === 0 || $$this.height === 0)
				{
					return toUnion.clone();
				}
				var x = Math.min($$this.x, toUnion.x);
				var y = Math.min($$this.y, toUnion.y);
				return $es4.$$coerce($es4.$$primitive(new Rectangle(x, y, Math.max($$this.right, toUnion.right) - x, Math.max($$this.bottom, toUnion.bottom) - y)), $es4.$$['flash.geom'].Rectangle);
			}

			return $$this.$$Rectangle.$$union || ($$this.$$Rectangle.$$union = union);
		}});

		Object.defineProperty(Rectangle.prototype, 'bottom', {get:function ()
		{
			var $$this = this;
			return $$this.y + $$this.height;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var $$this = this;
			$$this.height = Math.max(value - $$this.y, 0);
		}});
		Object.defineProperty(Rectangle.prototype, 'bottomRight', {get:function ()
		{
			var $$this = this;
			return $es4.$$primitive(new Point($$this.right, $$this.bottom));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Point);

			var $$this = this;
			$$this.right = value.x;
			$$this.bottom = value.y;
		}});
		Object.defineProperty(Rectangle.prototype, 'left', {get:function ()
		{
			var $$this = this;
			return $$this.x;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var $$this = this;
			$$this.width += $$this.x - value;
			$$this.x = value;
		}});
		Object.defineProperty(Rectangle.prototype, 'right', {get:function ()
		{
			var $$this = this;
			return $$this.x + $$this.width;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var $$this = this;
			$$this.width = value - $$this.x;
		}});
		Object.defineProperty(Rectangle.prototype, 'size', {get:function ()
		{
			var $$this = this;
			return $es4.$$primitive(new Point($$this.width, $$this.height));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Point);

			var $$this = this;
			$$this.width = value.x;
			$$this.height = value.y;
		}});
		Object.defineProperty(Rectangle.prototype, 'top', {get:function ()
		{
			var $$this = this;
			return $$this.y;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var $$this = this;
			$$this.height += $$this.y - value;
			$$this.y = value;
		}});
		Object.defineProperty(Rectangle.prototype, 'topLeft', {get:function ()
		{
			var $$this = this;
			return $es4.$$primitive(new Point($$this.x, $$this.y));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Point);

			var $$this = this;
			$$this.left = value.x;
			$$this.top = value.y;
		}});

		//properties
		Object.defineProperty(Rectangle.prototype, 'height', {
		get:function () { var $$this = this; return $$this.$$Rectangle.height; },
		set:function (value) { var $$this = this; $$this.$$Rectangle.height = $es4.$$coerce(value, Number); }
		});

		Object.defineProperty(Rectangle.prototype, 'width', {
		get:function () { var $$this = this; return $$this.$$Rectangle.width; },
		set:function (value) { var $$this = this; $$this.$$Rectangle.width = $es4.$$coerce(value, Number); }
		});

		Object.defineProperty(Rectangle.prototype, 'x', {
		get:function () { var $$this = this; return $$this.$$Rectangle.x; },
		set:function (value) { var $$this = this; $$this.$$Rectangle.x = $es4.$$coerce(value, Number); }
		});

		Object.defineProperty(Rectangle.prototype, 'y', {
		get:function () { var $$this = this; return $$this.$$Rectangle.y; },
		set:function (value) { var $$this = this; $$this.$$Rectangle.y = $es4.$$coerce(value, Number); }
		});

	});

	//class initializer
	Rectangle.$$cinit = (function ()
	{
		Rectangle.$$cinit = undefined;
	});

	function Rectangle()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof Rectangle) || $$this.$$Rectangle !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Rectangle) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			Rectangle.$$construct($$this, $$args);
		}
	}

	//construct
	Rectangle.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (Rectangle.$$cinit !== undefined) Rectangle.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$Rectangle', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		Rectangle.$$iinit($$this);

		//call constructor
		if (args !== undefined) Rectangle.$$constructor.apply($$this, args);
	});

	//initializer
	Rectangle.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$Rectangle.height = $es4.$$coerce(undefined, Number);
		$$this.$$Rectangle.width = $es4.$$coerce(undefined, Number);
		$$this.$$Rectangle.x = $es4.$$coerce(undefined, Number);
		$$this.$$Rectangle.y = $es4.$$coerce(undefined, Number);
	
	});

	//constructor
	Rectangle.$$constructor = (function ($$$$x, $$$$y, $$$$width, $$$$height)
	{
		var $$this = this;
		//set default parameter values
		var x = (0 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$x, Number);
		var y = (1 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$y, Number);
		var width = (2 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$width, Number);
		var height = (3 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$height, Number);

		$$this.x = x;
		$$this.y = y;
		$$this.width = width;
		$$this.height = height;
	});

	return $es4.$$class(Rectangle, null, 'flash.geom::Rectangle');
})();
//flash.geom.Rectangle


//flash.sampler.DeleteObjectSample
$es4.$$package('flash.sampler').DeleteObjectSample = function () { throw new Error('Use of unimplemented class: DeleteObjectSample'); }
//flash.sampler.DeleteObjectSample


//flash.net.NetGroupReceiveMode
$es4.$$package('flash.net').NetGroupReceiveMode = function () { throw new Error('Use of unimplemented class: NetGroupReceiveMode'); }
//flash.net.NetGroupReceiveMode


//flash.printing.PrintJobOrientation
$es4.$$package('flash.printing').PrintJobOrientation = (function ()
{
	//properties
	var $$j = {};
	PrintJobOrientation.LANDSCAPE = "landscape";
	PrintJobOrientation.PORTRAIT = "portrait";

	//class pre initializer
	PrintJobOrientation.$$sinit = (function ()
	{
		PrintJobOrientation.$$sinit = undefined;

		//set prototype and constructor
		PrintJobOrientation.prototype = Object.create(Object.prototype);
		Object.defineProperty(PrintJobOrientation.prototype, "constructor", { value: PrintJobOrientation, enumerable: false });

		//hold private values
		Object.defineProperty(PrintJobOrientation.prototype, '$$v', {value:{}});
	});

	//class initializer
	PrintJobOrientation.$$cinit = (function ()
	{
		PrintJobOrientation.$$cinit = undefined;
	});

	function PrintJobOrientation()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof PrintJobOrientation) || $$this.$$PrintJobOrientation !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], PrintJobOrientation) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			PrintJobOrientation.$$construct($$this, $$args);
		}
	}

	//construct
	PrintJobOrientation.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (PrintJobOrientation.$$cinit !== undefined) PrintJobOrientation.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$PrintJobOrientation', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		PrintJobOrientation.$$iinit($$this);

		//call constructor
		if (args !== undefined) PrintJobOrientation.$$constructor.apply($$this, args);
	});

	//initializer
	PrintJobOrientation.$$iinit = (function ($$this)
	{
	});

	//constructor
	PrintJobOrientation.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(PrintJobOrientation, null, 'flash.printing::PrintJobOrientation');
})();
//flash.printing.PrintJobOrientation


//player.Player
$es4.$$package('player').Player = (function ()
{
	//imports
	var Stage;

	//properties
	var $$j = {};
	Object.defineProperty(Player, '$_domStageContainerID', {
	get:function () { if (Player.$$cinit !== undefined) Player.$$cinit(); return $$j.$_domStageContainerID; },
	set:function (value) { if (Player.$$cinit !== undefined) Player.$$cinit(); $$j.$_domStageContainerID = $es4.$$coerce(value, String); }
	});

	Object.defineProperty(Player, '$_frameRate', {
	get:function () { if (Player.$$cinit !== undefined) Player.$$cinit(); return $$j.$_frameRate; },
	set:function (value) { if (Player.$$cinit !== undefined) Player.$$cinit(); $$j.$_frameRate = value }
	});

	Object.defineProperty(Player, '$_callObject', {
	get:function () { if (Player.$$cinit !== undefined) Player.$$cinit(); return $$j.$_callObject; },
	set:function (value) { if (Player.$$cinit !== undefined) Player.$$cinit(); $$j.$_callObject = $es4.$$coerce(value, Object); }
	});

	Object.defineProperty(Player, '$_stage', {
	get:function () { if (Player.$$cinit !== undefined) Player.$$cinit(); return $$j.$_stage; },
	set:function (value) { if (Player.$$cinit !== undefined) Player.$$cinit(); $$j.$_stage = $es4.$$coerce(value, Stage); }
	});

	Object.defineProperty(Player, '$_uid', {
	get:function () { if (Player.$$cinit !== undefined) Player.$$cinit(); return $$j.$_uid; },
	set:function (value) { if (Player.$$cinit !== undefined) Player.$$cinit(); $$j.$_uid = value }
	});


	//class pre initializer
	Player.$$sinit = (function ()
	{
		Player.$$sinit = undefined;

		//initialize imports
		Stage = $es4.$$['flash.display'].Stage;

		//set prototype and constructor
		Player.prototype = Object.create(Object.prototype);
		Object.defineProperty(Player.prototype, "constructor", { value: Player, enumerable: false });

		//hold private values
		Object.defineProperty(Player.prototype, '$$v', {value:{}});
	});

	//class initializer
	Player.$$cinit = (function ()
	{
		Player.$$cinit = undefined;

		//initialize properties
		$$j.$_domStageContainerID = $es4.$$coerce(undefined, String);
		$$j.$_frameRate = undefined;
		$$j.$_callObject = $es4.$$coerce(undefined, Object);
		$$j.$_stage = $es4.$$coerce(undefined, Stage);
		$$j.$_uid = 0;
	
	});

	//public static method
	Player.$__init = (function ($$$$domStageContainerID, $$$$frameRate, $$$$callObject)
	{
		if (Player.$$cinit !== undefined) Player.$$cinit();

		//set default parameter values
		var domStageContainerID = $es4.$$coerce($$$$domStageContainerID, String);
		var frameRate = (1 > arguments.length - 1) ? 7 : $es4.$$coerce($$$$frameRate, int);
		var callObject = (2 > arguments.length - 1) ? null : $es4.$$coerce($$$$callObject, Object);

		Player.$_domStageContainerID = domStageContainerID;
		Player.$_frameRate = frameRate;
		Player.$_callObject = callObject;
	});

	//public static method
	Player.$__getStage = (function ()
	{
		if (Player.$$cinit !== undefined) Player.$$cinit();

		if (Player.$_stage)
		{
			return Player.$_stage;
		}
		var domStageContainer = document.getElementById(Player.$_domStageContainerID);
		var stage = Stage['$__init'](domStageContainer);
		var setTimeout = $es4.$$coerce(window.setTimeout, Function);
		var requestAnimationFrame = $es4.$$coerce(window.requestAnimationFrame, Function);
		var beginTime = $es4.$$primitive(new Date().getTime());
		document.addEventListener('visibilitychange', onVisibilityChange, false);

		function onVisibilityChange($$$$event) 
		{
			//set default parameter values
			var event = $$$$event;

			stage.$__notify('visibilityChange', document.hidden);
			if (!window.audioContexts)
			{
				return;
			}
			for (var i = $es4.$$coerce(window.audioContexts.length, int); i--;)
			{
				var audioContext = window.audioContexts[i];
				try
				{
					if (document.hidden)
					{
						audioContext.suspend();
					}
					else
					{
						audioContext.resume();
					}
				}
				catch (error)
				{
				}
			}
		}
;

		render();

		function render() 
		{
			setTimeout(onTimeout, 1000 / Player.$_frameRate);
			var endTime = $es4.$$primitive(new Date().getTime());
			var timeElapsed = endTime - beginTime;
			beginTime = endTime;
			stage.$__notify('enterFrame', timeElapsed);
		}
;

		function onTimeout() 
		{
			if (requestAnimationFrame != null)
			{
				requestAnimationFrame(render);
			}
			else
			{
				render();
			}
		}
;

		return $es4.$$coerce(Player.$_stage = stage, Stage);
	});

	//public static method
	Player.getFrameRate = (function ()
	{
		if (Player.$$cinit !== undefined) Player.$$cinit();

		return $es4.$$coerce(Player.$_frameRate, int);
	});

	//public static method
	Player.setFrameRate = (function ($$$$frameRate)
	{
		if (Player.$$cinit !== undefined) Player.$$cinit();

		//set default parameter values
		var frameRate = $es4.$$coerce($$$$frameRate, int);

		Player.$_frameRate = frameRate;
	});

	//public static method
	Player.getUniqueID = (function ($$$$prefix)
	{
		if (Player.$$cinit !== undefined) Player.$$cinit();

		//set default parameter values
		var prefix = (0 > arguments.length - 1) ? 'uid' : $es4.$$coerce($$$$prefix, String);

		return prefix + '_' + Player.$_uid++;
	});

	//public static method
	Player.getDomStageContainerID = (function ()
	{
		if (Player.$$cinit !== undefined) Player.$$cinit();

		return Player.$_domStageContainerID;
	});

	//public static method
	Player.getCallObject = (function ()
	{
		if (Player.$$cinit !== undefined) Player.$$cinit();

		return Player.$_callObject;
	});
	function Player()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof Player) || $$this.$$Player !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Player) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			Player.$$construct($$this, $$args);
		}
	}

	//construct
	Player.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (Player.$$cinit !== undefined) Player.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$Player', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		Player.$$iinit($$this);

		//call constructor
		if (args !== undefined) Player.$$constructor.apply($$this, args);
	});

	//initializer
	Player.$$iinit = (function ($$this)
	{
	});

	//constructor
	Player.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(Player, null, 'player::Player');
})();
//player.Player


//flash.ui.KeyLocation
$es4.$$package('flash.ui').KeyLocation = function () { throw new Error('Use of unimplemented class: KeyLocation'); }
//flash.ui.KeyLocation


//flash.ui.Multitouch
$es4.$$package('flash.ui').Multitouch = function () { throw new Error('Use of unimplemented class: Multitouch'); }
//flash.ui.Multitouch


//flash.media.SoundCodec
$es4.$$package('flash.media').SoundCodec = (function ()
{
	//properties
	var $$j = {};
	SoundCodec.NELLYMOSER = "NellyMoser";
	Object.defineProperty(SoundCodec, 'PCMA', {
	get:function () { if (SoundCodec.$$cinit !== undefined) SoundCodec.$$cinit(); return $$j.PCMA; },
	set:function (value) { if (SoundCodec.$$cinit !== undefined) SoundCodec.$$cinit(); $$j.PCMA = $es4.$$coerce(value, String); }
	});

	Object.defineProperty(SoundCodec, 'PCMU', {
	get:function () { if (SoundCodec.$$cinit !== undefined) SoundCodec.$$cinit(); return $$j.PCMU; },
	set:function (value) { if (SoundCodec.$$cinit !== undefined) SoundCodec.$$cinit(); $$j.PCMU = $es4.$$coerce(value, String); }
	});

	SoundCodec.SPEEX = "Speex";

	//class pre initializer
	SoundCodec.$$sinit = (function ()
	{
		SoundCodec.$$sinit = undefined;

		//set prototype and constructor
		SoundCodec.prototype = Object.create(Object.prototype);
		Object.defineProperty(SoundCodec.prototype, "constructor", { value: SoundCodec, enumerable: false });

		//hold private values
		Object.defineProperty(SoundCodec.prototype, '$$v', {value:{}});
	});

	//class initializer
	SoundCodec.$$cinit = (function ()
	{
		SoundCodec.$$cinit = undefined;

		//initialize properties
		$$j.PCMA = $es4.$$coerce(undefined, String);
		$$j.PCMU = $es4.$$coerce(undefined, String);
	
	});

	function SoundCodec()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof SoundCodec) || $$this.$$SoundCodec !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], SoundCodec) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			SoundCodec.$$construct($$this, $$args);
		}
	}

	//construct
	SoundCodec.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (SoundCodec.$$cinit !== undefined) SoundCodec.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$SoundCodec', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		SoundCodec.$$iinit($$this);

		//call constructor
		if (args !== undefined) SoundCodec.$$constructor.apply($$this, args);
	});

	//initializer
	SoundCodec.$$iinit = (function ($$this)
	{
	});

	//constructor
	SoundCodec.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(SoundCodec, null, 'flash.media::SoundCodec');
})();
//flash.media.SoundCodec


//flash.display.GraphicsBitmapFill
$es4.$$package('flash.display').GraphicsBitmapFill = function () { throw new Error('Use of unimplemented class: GraphicsBitmapFill'); }
//flash.display.GraphicsBitmapFill


//flash.security.CertificateStatus
$es4.$$package('flash.security').CertificateStatus = function () { throw new Error('Use of unimplemented class: CertificateStatus'); }
//flash.security.CertificateStatus


//flash.text.engine.TextBaseline
$es4.$$package('flash.text.engine').TextBaseline = function () { throw new Error('Use of unimplemented class: TextBaseline'); }
//flash.text.engine.TextBaseline


//flash.ui.ContextMenuItem
$es4.$$package('flash.ui').ContextMenuItem = function () { throw new Error('Use of unimplemented class: ContextMenuItem'); }
//flash.ui.ContextMenuItem


//flash.events.HTTPStatusEvent
$es4.$$package('flash.events').HTTPStatusEvent = (function ()
{
	//imports
	var Event;
	var HTTPStatusEvent;

	//properties
	var $$j = {};
	HTTPStatusEvent.HTTP_RESPONSE_STATUS = "httpResponseStatus";
	HTTPStatusEvent.HTTP_STATUS = "httpStatus";

	//class pre initializer
	HTTPStatusEvent.$$sinit = (function ()
	{
		HTTPStatusEvent.$$sinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;

		//ensure $$sinit is called on super class
		if (Event.$$sinit !== undefined) Event.$$sinit();

		//set prototype and constructor
		HTTPStatusEvent.prototype = Object.create(Event.prototype);
		Object.defineProperty(HTTPStatusEvent.prototype, "constructor", { value: HTTPStatusEvent, enumerable: false });

		//hold private values
		Object.defineProperty(HTTPStatusEvent.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(HTTPStatusEvent.prototype, 'clone', {
		get:function ()
		{
			var $$this = this;

			function clone()
			{
				return $es4.$$coerce($es4.$$primitive(new HTTPStatusEvent($$this.type, $$this.bubbles, $$this.cancelable, $$this.$$HTTPStatusEvent._status)), Event);
			}

			return $$this.$$HTTPStatusEvent.$$clone || ($$this.$$HTTPStatusEvent.$$clone = clone);
		}});


		//public instance method
		Object.defineProperty(HTTPStatusEvent.prototype, 'toString', {
		get:function ()
		{
			var $$this = this;

			function toString()
			{
				return $$this.formatToString('HTTPStatusEvent', 'type', 'bubbles', 'cancelable', 'status');
			}

			return $$this.$$HTTPStatusEvent.$$toString || ($$this.$$HTTPStatusEvent.$$toString = toString);
		}});

		Object.defineProperty(HTTPStatusEvent.prototype, 'responseHeaders', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('HTTPStatusEvent: attempted call to an unimplemented function "responseHeaders"'));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Array);

			var $$this = this;
			throw $es4.$$primitive(new Error('HTTPStatusEvent: attempted call to an unimplemented function "responseHeaders"'));
		}});
		Object.defineProperty(HTTPStatusEvent.prototype, 'responseURL', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('HTTPStatusEvent: attempted call to an unimplemented function "responseURL"'));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			var $$this = this;
			throw $es4.$$primitive(new Error('HTTPStatusEvent: attempted call to an unimplemented function "responseURL"'));
		}});
		Object.defineProperty(HTTPStatusEvent.prototype, 'status', {get:function ()
		{
			var $$this = this;
			return $$this.$$HTTPStatusEvent._status;
		}});

		//properties
		HTTPStatusEvent.prototype.$$v._status = {
		get:function () { var $$this = this.$$this; return $$this.$$HTTPStatusEvent.$$p._status; },
		set:function (value) { var $$this = this.$$this; $$this.$$HTTPStatusEvent.$$p._status = $es4.$$coerce(value, int); }
		};

	});

	//class initializer
	HTTPStatusEvent.$$cinit = (function ()
	{
		HTTPStatusEvent.$$cinit = undefined;
	});

	function HTTPStatusEvent()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof HTTPStatusEvent) || $$this.$$HTTPStatusEvent !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], HTTPStatusEvent) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			HTTPStatusEvent.$$construct($$this, $$args);
		}
	}

	//construct
	HTTPStatusEvent.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (HTTPStatusEvent.$$cinit !== undefined) HTTPStatusEvent.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$HTTPStatusEvent', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$HTTPStatusEvent, '_status', HTTPStatusEvent.prototype.$$v._status);

		//call construct on super
		Event.$$construct($$this);

		//initialize properties
		HTTPStatusEvent.$$iinit($$this);

		//call constructor
		if (args !== undefined) HTTPStatusEvent.$$constructor.apply($$this, args);
	});

	//initializer
	HTTPStatusEvent.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$HTTPStatusEvent.$$p._status = $es4.$$coerce(undefined, int);
	
		//call iinit on super
		Event.$$iinit($$this);
	});

	//constructor
	HTTPStatusEvent.$$constructor = (function ($$$$type, $$$$bubbles, $$$$cancelable, $$$$status)
	{
		var $$this = this;
		//set default parameter values
		var type = $es4.$$coerce($$$$type, String);
		var bubbles = (1 > arguments.length - 1) ? false : $es4.$$coerce($$$$bubbles, Boolean);
		var cancelable = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$cancelable, Boolean);
		var status = (3 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$status, int);

		Event.$$constructor.call($$this, type, bubbles, cancelable);
		$$this.$$HTTPStatusEvent._status = status;
	});

	return $es4.$$class(HTTPStatusEvent, {EXTENDS:'flash.events.Event'}, 'flash.events::HTTPStatusEvent');
})();
//flash.events.HTTPStatusEvent


//flash.events.TransformGestureEvent
$es4.$$package('flash.events').TransformGestureEvent = function () { throw new Error('Use of unimplemented class: TransformGestureEvent'); }
//flash.events.TransformGestureEvent


//flash.display.ShaderPrecision
$es4.$$package('flash.display').ShaderPrecision = function () { throw new Error('Use of unimplemented class: ShaderPrecision'); }
//flash.display.ShaderPrecision


//flash.external.ExternalInterface
$es4.$$package('flash.external').ExternalInterface = (function ()
{
	//imports
	var Player;

	//class pre initializer
	ExternalInterface.$$sinit = (function ()
	{
		ExternalInterface.$$sinit = undefined;

		//initialize imports
		Player = $es4.$$['player'].Player;

		//set prototype and constructor
		ExternalInterface.prototype = Object.create(Object.prototype);
		Object.defineProperty(ExternalInterface.prototype, "constructor", { value: ExternalInterface, enumerable: false });

		//hold private values
		Object.defineProperty(ExternalInterface.prototype, '$$v', {value:{}});
	});

	//class initializer
	ExternalInterface.$$cinit = (function ()
	{
		ExternalInterface.$$cinit = undefined;
	});

	//public static method
	ExternalInterface.addCallback = (function ($$$$functionName, $$$$closure)
	{
		if (ExternalInterface.$$cinit !== undefined) ExternalInterface.$$cinit();

		//set default parameter values
		var functionName = $es4.$$coerce($$$$functionName, String);
		var closure = $es4.$$coerce($$$$closure, Function);

		Player.getCallObject()[functionName] = closure;
	});

	//public static method
	ExternalInterface.call = (function ($$$$functionName, $$$$rest)
	{
		if (ExternalInterface.$$cinit !== undefined) ExternalInterface.$$cinit();

		//set default parameter values
		var functionName = $es4.$$coerce($$$$functionName, String);
		for (var $$i = 1, $$length = arguments.length, rest = new Array($$length - 1); $$i < $$length; $$i += 1) rest[$$i - 1] = arguments[$$i];

		var scope = window;
		var properties = functionName.split('.');
		for (var i = 0; i < properties.length - 1; i++)
		{
			scope = scope[properties[i]];
			if ($es4.$$typeof(scope) === "undefined" || scope === null)
			{
				throw $es4.$$primitive(new Error('undefined scope in External Interface call method'));
			}
		}
		var fn = scope[properties[properties.length - 1]];
		return $es4.$$typeof(fn) === 'function' ? Function(fn).apply(scope, rest) : null;
	});
	Object.defineProperty(ExternalInterface, 'marshallExceptions', {get:function ()
	{
		if (ExternalInterface.$$cinit !== undefined) ExternalInterface.$$cinit();

		return false;
	}, set:function ($$$$value)
	{
		if (ExternalInterface.$$cinit !== undefined) ExternalInterface.$$cinit();

		//set default parameter values
		var value = $es4.$$coerce($$$$value, Boolean);

		if (!value)
		{
			return;
		}
		throw $es4.$$primitive(new Error('ExternalInterface.marshallExceptions is not supported.'));
	}});
	Object.defineProperty(ExternalInterface, 'available', {get:function ()
	{
		if (ExternalInterface.$$cinit !== undefined) ExternalInterface.$$cinit();

		return true;
	}});
	Object.defineProperty(ExternalInterface, 'objectID', {get:function ()
	{
		if (ExternalInterface.$$cinit !== undefined) ExternalInterface.$$cinit();

		return Player.getDomStageContainerID();
	}});

	function ExternalInterface()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof ExternalInterface) || $$this.$$ExternalInterface !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], ExternalInterface) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			ExternalInterface.$$construct($$this, $$args);
		}
	}

	//construct
	ExternalInterface.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (ExternalInterface.$$cinit !== undefined) ExternalInterface.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$ExternalInterface', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		ExternalInterface.$$iinit($$this);

		//call constructor
		if (args !== undefined) ExternalInterface.$$constructor.apply($$this, args);
	});

	//initializer
	ExternalInterface.$$iinit = (function ($$this)
	{
	});

	//constructor
	ExternalInterface.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(ExternalInterface, null, 'flash.external::ExternalInterface');
})();
//flash.external.ExternalInterface


//flash.filters.ConvolutionFilter
$es4.$$package('flash.filters').ConvolutionFilter = function () { throw new Error('Use of unimplemented class: ConvolutionFilter'); }
//flash.filters.ConvolutionFilter


//flash.desktop.Clipboard
$es4.$$package('flash.desktop').Clipboard = function () { throw new Error('Use of unimplemented class: Clipboard'); }
//flash.desktop.Clipboard


//flash.geom.Vector3D
$es4.$$package('flash.geom').Vector3D = function () { throw new Error('Use of unimplemented class: Vector3D'); }
//flash.geom.Vector3D


//flash.events.IMEEvent
$es4.$$package('flash.events').IMEEvent = function () { throw new Error('Use of unimplemented class: IMEEvent'); }
//flash.events.IMEEvent


//flash.ui.MouseCursorData
$es4.$$package('flash.ui').MouseCursorData = function () { throw new Error('Use of unimplemented class: MouseCursorData'); }
//flash.ui.MouseCursorData


//flash.text.engine.FontWeight
$es4.$$package('flash.text.engine').FontWeight = function () { throw new Error('Use of unimplemented class: FontWeight'); }
//flash.text.engine.FontWeight


//flash.display.GraphicsSolidFill
$es4.$$package('flash.display').GraphicsSolidFill = function () { throw new Error('Use of unimplemented class: GraphicsSolidFill'); }
//flash.display.GraphicsSolidFill


//flash.text.engine.Kerning
$es4.$$package('flash.text.engine').Kerning = function () { throw new Error('Use of unimplemented class: Kerning'); }
//flash.text.engine.Kerning


//flash.system.Security
$es4.$$package('flash.system').Security = function () { throw new Error('Use of unimplemented class: Security'); }
//flash.system.Security


//flash.filters.ShaderFilter
$es4.$$package('flash.filters').ShaderFilter = function () { throw new Error('Use of unimplemented class: ShaderFilter'); }
//flash.filters.ShaderFilter


//flash.text.engine.ElementFormat
$es4.$$package('flash.text.engine').ElementFormat = function () { throw new Error('Use of unimplemented class: ElementFormat'); }
//flash.text.engine.ElementFormat


//flash.events.GeolocationEvent
$es4.$$package('flash.events').GeolocationEvent = function () { throw new Error('Use of unimplemented class: GeolocationEvent'); }
//flash.events.GeolocationEvent


//flash.ui.KeyboardType
$es4.$$package('flash.ui').KeyboardType = function () { throw new Error('Use of unimplemented class: KeyboardType'); }
//flash.ui.KeyboardType


//flash.events.ProgressEvent
$es4.$$package('flash.events').ProgressEvent = (function ()
{
	//imports
	var Event;
	var ProgressEvent;

	//properties
	var $$j = {};
	ProgressEvent.PROGRESS = "progress";
	ProgressEvent.SOCKET_DATA = "socketData";

	//class pre initializer
	ProgressEvent.$$sinit = (function ()
	{
		ProgressEvent.$$sinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;

		//ensure $$sinit is called on super class
		if (Event.$$sinit !== undefined) Event.$$sinit();

		//set prototype and constructor
		ProgressEvent.prototype = Object.create(Event.prototype);
		Object.defineProperty(ProgressEvent.prototype, "constructor", { value: ProgressEvent, enumerable: false });

		//hold private values
		Object.defineProperty(ProgressEvent.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(ProgressEvent.prototype, 'clone', {
		get:function ()
		{
			var $$this = this;

			function clone()
			{
				return $es4.$$coerce($es4.$$primitive(new ProgressEvent($$this.type, $$this.bubbles, $$this.cancelable, $$this.bytesLoaded, $$this.bytesTotal)), Event);
			}

			return $$this.$$ProgressEvent.$$clone || ($$this.$$ProgressEvent.$$clone = clone);
		}});


		//public instance method
		Object.defineProperty(ProgressEvent.prototype, 'toString', {
		get:function ()
		{
			var $$this = this;

			function toString()
			{
				return $$this.formatToString('ProgressEvent', 'type', 'bubbles', 'cancelable', 'bytesLoaded', 'bytesTotal');
			}

			return $$this.$$ProgressEvent.$$toString || ($$this.$$ProgressEvent.$$toString = toString);
		}});

		Object.defineProperty(ProgressEvent.prototype, 'bytesLoaded', {get:function ()
		{
			var $$this = this;
			return $$this.$$ProgressEvent._bytesLoaded;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var $$this = this;
			$$this.$$ProgressEvent._bytesLoaded = value;
		}});
		Object.defineProperty(ProgressEvent.prototype, 'bytesTotal', {get:function ()
		{
			var $$this = this;
			return $$this.$$ProgressEvent._bytesTotal;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var $$this = this;
			$$this.$$ProgressEvent._bytesTotal = value;
		}});

		//properties
		ProgressEvent.prototype.$$v._bytesLoaded = {
		get:function () { var $$this = this.$$this; return $$this.$$ProgressEvent.$$p._bytesLoaded; },
		set:function (value) { var $$this = this.$$this; $$this.$$ProgressEvent.$$p._bytesLoaded = $es4.$$coerce(value, Number); }
		};

		ProgressEvent.prototype.$$v._bytesTotal = {
		get:function () { var $$this = this.$$this; return $$this.$$ProgressEvent.$$p._bytesTotal; },
		set:function (value) { var $$this = this.$$this; $$this.$$ProgressEvent.$$p._bytesTotal = $es4.$$coerce(value, Number); }
		};

	});

	//class initializer
	ProgressEvent.$$cinit = (function ()
	{
		ProgressEvent.$$cinit = undefined;
	});

	function ProgressEvent()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof ProgressEvent) || $$this.$$ProgressEvent !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], ProgressEvent) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			ProgressEvent.$$construct($$this, $$args);
		}
	}

	//construct
	ProgressEvent.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (ProgressEvent.$$cinit !== undefined) ProgressEvent.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$ProgressEvent', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$ProgressEvent, '_bytesLoaded', ProgressEvent.prototype.$$v._bytesLoaded);
		Object.defineProperty($$this.$$ProgressEvent, '_bytesTotal', ProgressEvent.prototype.$$v._bytesTotal);

		//call construct on super
		Event.$$construct($$this);

		//initialize properties
		ProgressEvent.$$iinit($$this);

		//call constructor
		if (args !== undefined) ProgressEvent.$$constructor.apply($$this, args);
	});

	//initializer
	ProgressEvent.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$ProgressEvent.$$p._bytesLoaded = $es4.$$coerce(undefined, Number);
		$$this.$$ProgressEvent.$$p._bytesTotal = $es4.$$coerce(undefined, Number);
	
		//call iinit on super
		Event.$$iinit($$this);
	});

	//constructor
	ProgressEvent.$$constructor = (function ($$$$type, $$$$bubbles, $$$$cancelable, $$$$bytesLoaded, $$$$bytesTotal)
	{
		var $$this = this;
		//set default parameter values
		var type = $es4.$$coerce($$$$type, String);
		var bubbles = (1 > arguments.length - 1) ? false : $es4.$$coerce($$$$bubbles, Boolean);
		var cancelable = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$cancelable, Boolean);
		var bytesLoaded = (3 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$bytesLoaded, Number);
		var bytesTotal = (4 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$bytesTotal, Number);

		Event.$$constructor.call($$this, type, bubbles, cancelable);
		$$this.$$ProgressEvent._bytesLoaded = bytesLoaded;
		$$this.$$ProgressEvent._bytesTotal = bytesTotal;
	});

	return $es4.$$class(ProgressEvent, {EXTENDS:'flash.events.Event'}, 'flash.events::ProgressEvent');
})();
//flash.events.ProgressEvent


//flash.net.URLRequestHeader
$es4.$$package('flash.net').URLRequestHeader = function () { throw new Error('Use of unimplemented class: URLRequestHeader'); }
//flash.net.URLRequestHeader


//flash.net.URLRequest
$es4.$$package('flash.net').URLRequest = (function ()
{
	//imports
	var URLRequestMethod;

	//class pre initializer
	URLRequest.$$sinit = (function ()
	{
		URLRequest.$$sinit = undefined;

		//initialize imports
		URLRequestMethod = $es4.$$['flash.net'].URLRequestMethod;

		//set prototype and constructor
		URLRequest.prototype = Object.create(Object.prototype);
		Object.defineProperty(URLRequest.prototype, "constructor", { value: URLRequest, enumerable: false });

		//hold private values
		Object.defineProperty(URLRequest.prototype, '$$v', {value:{}});

		Object.defineProperty(URLRequest.prototype, 'contentType', {get:function ()
		{
			var $$this = this;
			return $$this.$$URLRequest._contentType;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			var $$this = this;
			$$this.$$URLRequest._contentType = value;
		}});
		Object.defineProperty(URLRequest.prototype, 'data', {get:function ()
		{
			var $$this = this;
			return $$this.$$URLRequest._data;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			var $$this = this;
			$$this.$$URLRequest._data = value;
		}});
		Object.defineProperty(URLRequest.prototype, 'digest', {get:function ()
		{
			var $$this = this;
			return $$this.$$URLRequest._digest;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			var $$this = this;
			$$this.$$URLRequest._digest = value;
		}});
		Object.defineProperty(URLRequest.prototype, 'method', {get:function ()
		{
			var $$this = this;
			return $$this.$$URLRequest._method;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			var $$this = this;
			$$this.$$URLRequest._method = value;
		}});
		Object.defineProperty(URLRequest.prototype, 'requestHeaders', {get:function ()
		{
			var $$this = this;
			return $$this.$$URLRequest._requestHeaders;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Array);

			var $$this = this;
			$$this.$$URLRequest._requestHeaders = value;
		}});
		Object.defineProperty(URLRequest.prototype, 'url', {get:function ()
		{
			var $$this = this;
			return $$this.$$URLRequest._url;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			var $$this = this;
			$$this.$$URLRequest._url = value;
		}});

		//properties
		URLRequest.prototype.$$v._method = {
		get:function () { var $$this = this.$$this; return $$this.$$URLRequest.$$p._method; },
		set:function (value) { var $$this = this.$$this; $$this.$$URLRequest.$$p._method = $es4.$$coerce(value, String); }
		};

		URLRequest.prototype.$$v._url = {
		get:function () { var $$this = this.$$this; return $$this.$$URLRequest.$$p._url; },
		set:function (value) { var $$this = this.$$this; $$this.$$URLRequest.$$p._url = $es4.$$coerce(value, String); }
		};

		URLRequest.prototype.$$v._requestHeaders = {
		get:function () { var $$this = this.$$this; return $$this.$$URLRequest.$$p._requestHeaders; },
		set:function (value) { var $$this = this.$$this; $$this.$$URLRequest.$$p._requestHeaders = $es4.$$coerce(value, Array); }
		};

		URLRequest.prototype.$$v._digest = {
		get:function () { var $$this = this.$$this; return $$this.$$URLRequest.$$p._digest; },
		set:function (value) { var $$this = this.$$this; $$this.$$URLRequest.$$p._digest = $es4.$$coerce(value, String); }
		};

		URLRequest.prototype.$$v._data = {
		get:function () { var $$this = this.$$this; return $$this.$$URLRequest.$$p._data; },
		set:function (value) { var $$this = this.$$this; $$this.$$URLRequest.$$p._data = $es4.$$coerce(value, Object); }
		};

		URLRequest.prototype.$$v._contentType = {
		get:function () { var $$this = this.$$this; return $$this.$$URLRequest.$$p._contentType; },
		set:function (value) { var $$this = this.$$this; $$this.$$URLRequest.$$p._contentType = $es4.$$coerce(value, String); }
		};

	});

	//class initializer
	URLRequest.$$cinit = (function ()
	{
		URLRequest.$$cinit = undefined;
	});

	function URLRequest()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof URLRequest) || $$this.$$URLRequest !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], URLRequest) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			URLRequest.$$construct($$this, $$args);
		}
	}

	//construct
	URLRequest.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (URLRequest.$$cinit !== undefined) URLRequest.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$URLRequest', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$URLRequest, '_method', URLRequest.prototype.$$v._method);
		Object.defineProperty($$this.$$URLRequest, '_url', URLRequest.prototype.$$v._url);
		Object.defineProperty($$this.$$URLRequest, '_requestHeaders', URLRequest.prototype.$$v._requestHeaders);
		Object.defineProperty($$this.$$URLRequest, '_digest', URLRequest.prototype.$$v._digest);
		Object.defineProperty($$this.$$URLRequest, '_data', URLRequest.prototype.$$v._data);
		Object.defineProperty($$this.$$URLRequest, '_contentType', URLRequest.prototype.$$v._contentType);

		//initialize properties
		URLRequest.$$iinit($$this);

		//call constructor
		if (args !== undefined) URLRequest.$$constructor.apply($$this, args);
	});

	//initializer
	URLRequest.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$URLRequest.$$p._method = $es4.$$coerce(undefined, String);
		$$this.$$URLRequest.$$p._url = $es4.$$coerce(undefined, String);
		$$this.$$URLRequest.$$p._requestHeaders = $es4.$$coerce(undefined, Array);
		$$this.$$URLRequest.$$p._digest = $es4.$$coerce(undefined, String);
		$$this.$$URLRequest.$$p._data = $es4.$$coerce(undefined, Object);
		$$this.$$URLRequest.$$p._contentType = $es4.$$coerce(undefined, String);
	
	});

	//constructor
	URLRequest.$$constructor = (function ($$$$url)
	{
		var $$this = this;
		//set default parameter values
		var url = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$url, String);

		$$this.$$URLRequest._method = URLRequestMethod.GET;
		$$this.$$URLRequest._url = url;
	});

	return $es4.$$class(URLRequest, null, 'flash.net::URLRequest');
})();
//flash.net.URLRequest


//flash.media.Video
$es4.$$package('flash.media').Video = (function ()
{
	//imports
	var DisplayObject;
	var Event;
	var Camera;
	var NetStream;

	//class pre initializer
	Video.$$sinit = (function ()
	{
		Video.$$sinit = undefined;

		//initialize imports
		DisplayObject = $es4.$$['flash.display'].DisplayObject;
		Event = $es4.$$['flash.events'].Event;
		Camera = $es4.$$['flash.media'].Camera;
		NetStream = $es4.$$['flash.net'].NetStream;

		//ensure $$sinit is called on super class
		if (DisplayObject.$$sinit !== undefined) DisplayObject.$$sinit();

		//set prototype and constructor
		Video.prototype = Object.create(DisplayObject.prototype);
		Object.defineProperty(Video.prototype, "constructor", { value: Video, enumerable: false });

		//hold private values
		Object.defineProperty(Video.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(Video.prototype, '$__properties', {
		get:function ()
		{
			var $$this = this;

			function $__properties($$$$object)
			{
				//set default parameter values
				var object = (0 > arguments.length - 1) ? null : $$$$object;

				if ($$this.$$Video.$_properties === undefined)
				{
					object = $es4.$$super2($$this, DisplayObject, '$$DisplayObject', '$__properties', 'func', undefined)(object);
					object.VideoScope = {};
					return $$this.$$Video.$_properties = object;
				}
				return $$this.$$Video.$_properties;
			}

			return $$this.$$Video.$$$__properties || ($$this.$$Video.$$$__properties = $__properties);
		}});


		//public instance method
		Object.defineProperty(Video.prototype, '$__notify', {
		get:function ()
		{
			var $$this = this;

			function $__notify($$$$name, $$$$args)
			{
				//set default parameter values
				var name = $es4.$$coerce($$$$name, String);
				var args = $$$$args;

				if (name === 'visibilityChange' && $$this.$$Video.$_domVideoView && $$this.$$Video.$_netStream)
				{
					if (args)
					{
						if (!$$this.$$Video.$_domVideoView.paused)
						{
							$$this.$$Video.$_netStream.$__suspended = true;
							$$this.$$Video.$_domVideoView.pause();
						}
					}
					else
					{
						if ($$this.$$Video.$_netStream.$__suspended)
						{
							$$this.$$Video.$_netStream.$__suspended = false;
							$$this.$$Video.$_domVideoView.play();
						}
					}
				}
				$es4.$$super2($$this, DisplayObject, '$$DisplayObject', '$__notify', 'func', undefined)(name, args);
			}

			return $$this.$$Video.$$$__notify || ($$this.$$Video.$$$__notify = $__notify);
		}});


		//protected instance method
		Object.defineProperty(Video.prototype, '$_applySize', {
		get:function ()
		{
			var $$this = this;

			function $_applySize()
			{
				if (!$$this.$$Video.$_domVideoView)
				{
					return;
				}
				$$this.$$Video.$_domVideoView.setAttribute('width', $$this.$$Video.$_properties.DisplayObjectScope.$_width + 'px');
				$$this.$$Video.$_domVideoView.setAttribute('height', $$this.$$Video.$_properties.DisplayObjectScope.$_height + 'px');
			}

			return $$this.$$Video.$$$_applySize || ($$this.$$Video.$$$_applySize = $_applySize);
		}});


		//public instance method
		Object.defineProperty(Video.prototype, 'attachNetStream', {
		get:function ()
		{
			var $$this = this;

			function attachNetStream($$$$netStream)
			{
				//set default parameter values
				var netStream = $es4.$$coerce($$$$netStream, NetStream);

				if ($$this.$$Video.$_netStream)
				{
					$$this.$$Video.$_netStream.removeEventListener('videoCreated', $$this.$$Video.onVideoCreated);
					if ($$this.$$Video.$_domVideoView)
					{
						$$this.$$Video.$_properties.DisplayObjectScope.$_domView.removeChild($$this.$$Video.$_domVideoView);
					}
					$$this.$$Video.$_netStream = null;
					return;
				}
				if (!netStream)
				{
					return;
				}
				$$this.$$Video.$_netStream = netStream;
				if ($$this.$$Video.$_netStream.$__domVideoView)
				{
					$$this.$$Video.onVideoCreated(null);
					return;
				}
				else
				{
					$$this.$$Video.$_netStream.addEventListener('videoCreated', $$this.$$Video.onVideoCreated);
				}
			}

			return $$this.$$Video.$$attachNetStream || ($$this.$$Video.$$attachNetStream = attachNetStream);
		}});


		//private instance method
		Video.prototype.$$v.onVideoCreated = {
		get:function ()
		{
			var $$this = this.$$this;

			function onVideoCreated($$$$event)
			{
				//set default parameter values
				var event = $es4.$$coerce($$$$event, Event);

				$$this.$$Video.$_domVideoView = $$this.$$Video.$_netStream.$__domVideoView;
				$$this.$$Video.$_properties.DisplayObjectScope.$_domView.appendChild($$this.$$Video.$_domVideoView);
				$$this.$_applySize();
			}

			return $$this.$$Video.$$p.$$onVideoCreated || ($$this.$$Video.$$p.$$onVideoCreated = onVideoCreated);
		}};


		//public instance method
		Object.defineProperty(Video.prototype, 'attachCamera', {
		get:function ()
		{
			var $$this = this;

			function attachCamera($$$$camera)
			{
				//set default parameter values
				var camera = $es4.$$coerce($$$$camera, Camera);

				throw $es4.$$primitive(new Error('Video: attempted call to an unimplemented function "attachCamera"'));
			}

			return $$this.$$Video.$$attachCamera || ($$this.$$Video.$$attachCamera = attachCamera);
		}});


		//public instance method
		Object.defineProperty(Video.prototype, 'clear', {
		get:function ()
		{
			var $$this = this;

			function clear()
			{
				throw $es4.$$primitive(new Error('Video: attempted call to an unimplemented function "clear"'));
			}

			return $$this.$$Video.$$clear || ($$this.$$Video.$$clear = clear);
		}});

		Object.defineProperty(Video.prototype, 'width', {get:function ()
		{
			var $$this = this; return $es4.$$super2($$this, DisplayObject, '$$Video', 'width', 'get');
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var $$this = this;
			var width = (value > 0) ? value : 320;
			$$this.$$Video.$_properties.DisplayObjectScope.$_setExplicitBounds(width, $$this.$$Video.$_properties.DisplayObjectScope.$_height);
			$$this.$_applySize();
		}});
		Object.defineProperty(Video.prototype, 'height', {get:function ()
		{
			var $$this = this; return $es4.$$super2($$this, DisplayObject, '$$Video', 'height', 'get');
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var $$this = this;
			var height = (value > 0) ? value : 240;
			$$this.$$Video.$_properties.DisplayObjectScope.$_setExplicitBounds($$this.$$Video.$_properties.DisplayObjectScope.$_width, height);
			$$this.$_applySize();
		}});
		Object.defineProperty(Video.prototype, 'deblocking', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('Video: attempted call to an unimplemented function "deblocking"'));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, int);

			var $$this = this;
			throw $es4.$$primitive(new Error('Video: attempted call to an unimplemented function "deblocking"'));
		}});
		Object.defineProperty(Video.prototype, 'smoothing', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('Video: attempted call to an unimplemented function "smoothing"'));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var $$this = this;
			throw $es4.$$primitive(new Error('Video: attempted call to an unimplemented function "smoothing"'));
		}});
		Object.defineProperty(Video.prototype, 'videoHeight', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce(($$this.$$Video.$_domVideoView) ? $$this.$$Video.$_domVideoView.videoHeight : 0, int);
		}});
		Object.defineProperty(Video.prototype, 'videoWidth', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce(($$this.$$Video.$_domVideoView) ? $$this.$$Video.$_domVideoView.videoWidth : 0, int);
		}});

		//properties
		Video.prototype.$$v.$_netStream = {
		get:function () { var $$this = this.$$this; return $$this.$$Video.$$p.$_netStream; },
		set:function (value) { var $$this = this.$$this; $$this.$$Video.$$p.$_netStream = $es4.$$coerce(value, NetStream); }
		};

		Video.prototype.$$v.$_domVideoView = {
		get:function () { var $$this = this.$$this; return $$this.$$Video.$$p.$_domVideoView; },
		set:function (value) { var $$this = this.$$this; $$this.$$Video.$$p.$_domVideoView = $es4.$$coerce(value, Object); }
		};

		Video.prototype.$$v.$_properties = {
		get:function () { var $$this = this.$$this; return $$this.$$Video.$$p.$_properties; },
		set:function (value) { var $$this = this.$$this; $$this.$$Video.$$p.$_properties = value }
		};

	});

	//class initializer
	Video.$$cinit = (function ()
	{
		Video.$$cinit = undefined;
	});

	function Video()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof Video) || $$this.$$Video !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Video) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			Video.$$construct($$this, $$args);
		}
	}

	//construct
	Video.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (Video.$$cinit !== undefined) Video.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$Video', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$Video, '$_netStream', Video.prototype.$$v.$_netStream);
		Object.defineProperty($$this.$$Video, '$_domVideoView', Video.prototype.$$v.$_domVideoView);
		Object.defineProperty($$this.$$Video, '$_properties', Video.prototype.$$v.$_properties);

		//private instance method
		Object.defineProperty($$this.$$Video, 'onVideoCreated', Video.prototype.$$v.onVideoCreated);

		//call construct on super
		DisplayObject.$$construct($$this);

		//initialize properties
		Video.$$iinit($$this);

		//call constructor
		if (args !== undefined) Video.$$constructor.apply($$this, args);
	});

	//initializer
	Video.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$Video.$$p.$_netStream = $es4.$$coerce(undefined, NetStream);
		$$this.$$Video.$$p.$_domVideoView = $es4.$$coerce(undefined, Object);
		$$this.$$Video.$$p.$_properties = undefined;
	
		//call iinit on super
		DisplayObject.$$iinit($$this);
	});

	//constructor
	Video.$$constructor = (function ($$$$width, $$$$height)
	{
		var $$this = this;
		//set default parameter values
		var width = (0 > arguments.length - 1) ? 320 : $es4.$$coerce($$$$width, int);
		var height = (1 > arguments.length - 1) ? 240 : $es4.$$coerce($$$$height, int);

		if ($$this.$$Video.$_properties === undefined)
		{
			$$this.$__properties({});
		}
		DisplayObject.$$constructor.call($$this);
		$$this.$$Video.$_properties.DisplayObjectScope.$_setExplicitBounds(width, height);
	});

	return $es4.$$class(Video, {EXTENDS:'flash.display.DisplayObject'}, 'flash.media::Video');
})();
//flash.media.Video


//flash.media.MicrophoneEnhancedOptions
$es4.$$package('flash.media').MicrophoneEnhancedOptions = function () { throw new Error('Use of unimplemented class: MicrophoneEnhancedOptions'); }
//flash.media.MicrophoneEnhancedOptions


//flash.display.NativeMenuItem
$es4.$$package('flash.display').NativeMenuItem = function () { throw new Error('Use of unimplemented class: NativeMenuItem'); }
//flash.display.NativeMenuItem


//flash.globalization.NumberFormatter
$es4.$$package('flash.globalization').NumberFormatter = function () { throw new Error('Use of unimplemented class: NumberFormatter'); }
//flash.globalization.NumberFormatter


//flash.filters.DisplacementMapFilter
$es4.$$package('flash.filters').DisplacementMapFilter = function () { throw new Error('Use of unimplemented class: DisplacementMapFilter'); }
//flash.filters.DisplacementMapFilter


//flash.net.URLRequestMethod
$es4.$$package('flash.net').URLRequestMethod = (function ()
{
	//properties
	var $$j = {};
	URLRequestMethod.DELETE = "DELETE";
	URLRequestMethod.GET = "GET";
	URLRequestMethod.HEAD = "HEAD";
	URLRequestMethod.OPTIONS = "OPTIONS";
	URLRequestMethod.POST = "POST";
	URLRequestMethod.PUT = "PUT";

	//class pre initializer
	URLRequestMethod.$$sinit = (function ()
	{
		URLRequestMethod.$$sinit = undefined;

		//set prototype and constructor
		URLRequestMethod.prototype = Object.create(Object.prototype);
		Object.defineProperty(URLRequestMethod.prototype, "constructor", { value: URLRequestMethod, enumerable: false });

		//hold private values
		Object.defineProperty(URLRequestMethod.prototype, '$$v', {value:{}});
	});

	//class initializer
	URLRequestMethod.$$cinit = (function ()
	{
		URLRequestMethod.$$cinit = undefined;
	});

	function URLRequestMethod()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof URLRequestMethod) || $$this.$$URLRequestMethod !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], URLRequestMethod) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			URLRequestMethod.$$construct($$this, $$args);
		}
	}

	//construct
	URLRequestMethod.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (URLRequestMethod.$$cinit !== undefined) URLRequestMethod.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$URLRequestMethod', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		URLRequestMethod.$$iinit($$this);

		//call constructor
		if (args !== undefined) URLRequestMethod.$$constructor.apply($$this, args);
	});

	//initializer
	URLRequestMethod.$$iinit = (function ($$this)
	{
	});

	//constructor
	URLRequestMethod.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(URLRequestMethod, null, 'flash.net::URLRequestMethod');
})();
//flash.net.URLRequestMethod


//flash.events.DataEvent
$es4.$$package('flash.events').DataEvent = function () { throw new Error('Use of unimplemented class: DataEvent'); }
//flash.events.DataEvent


//flash.text.engine.TextElement
$es4.$$package('flash.text.engine').TextElement = function () { throw new Error('Use of unimplemented class: TextElement'); }
//flash.text.engine.TextElement


//flash.system.Capabilities
$es4.$$package('flash.system').Capabilities = (function ()
{
	//class pre initializer
	Capabilities.$$sinit = (function ()
	{
		Capabilities.$$sinit = undefined;

		//set prototype and constructor
		Capabilities.prototype = Object.create(Object.prototype);
		Object.defineProperty(Capabilities.prototype, "constructor", { value: Capabilities, enumerable: false });

		//hold private values
		Object.defineProperty(Capabilities.prototype, '$$v', {value:{}});
	});

	//class initializer
	Capabilities.$$cinit = (function ()
	{
		Capabilities.$$cinit = undefined;
	});

	//public static method
	Capabilities.hasMultiChannelAudio = (function ($$$$type)
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		//set default parameter values
		var type = $es4.$$coerce($$$$type, String);

		throw $es4.$$primitive(new Error('Capabilities: attempted call to an unimplemented function "hasMultiChannelAudio"'));
	});
	Object.defineProperty(Capabilities, 'avHardwareDisable', {get:function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new Error('Capabilities: attempted call to an unimplemented function "avHardwareDisable"'));
	}});
	Object.defineProperty(Capabilities, 'cpuArchitecture', {get:function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new Error('Capabilities: attempted call to an unimplemented function "cpuArchitecture"'));
	}});
	Object.defineProperty(Capabilities, 'hasAccessibility', {get:function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new Error('Capabilities: attempted call to an unimplemented function "hasAccessibility"'));
	}});
	Object.defineProperty(Capabilities, 'hasAudio', {get:function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new Error('Capabilities: attempted call to an unimplemented function "hasAudio"'));
	}});
	Object.defineProperty(Capabilities, 'hasAudioEncoder', {get:function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new Error('Capabilities: attempted call to an unimplemented function "hasAudioEncoder"'));
	}});
	Object.defineProperty(Capabilities, 'hasEmbeddedVideo', {get:function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new Error('Capabilities: attempted call to an unimplemented function "hasEmbeddedVideo"'));
	}});
	Object.defineProperty(Capabilities, 'hasIME', {get:function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new Error('Capabilities: attempted call to an unimplemented function "hasIME"'));
	}});
	Object.defineProperty(Capabilities, 'hasMP3', {get:function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new Error('Capabilities: attempted call to an unimplemented function "hasMP3"'));
	}});
	Object.defineProperty(Capabilities, 'hasPrinting', {get:function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new Error('Capabilities: attempted call to an unimplemented function "hasPrinting"'));
	}});
	Object.defineProperty(Capabilities, 'hasScreenBroadcast', {get:function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new Error('Capabilities: attempted call to an unimplemented function "hasScreenBroadcast"'));
	}});
	Object.defineProperty(Capabilities, 'hasScreenPlayback', {get:function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new Error('Capabilities: attempted call to an unimplemented function "hasScreenPlayback"'));
	}});
	Object.defineProperty(Capabilities, 'hasStreamingAudio', {get:function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new Error('Capabilities: attempted call to an unimplemented function "hasStreamingAudio"'));
	}});
	Object.defineProperty(Capabilities, 'hasStreamingVideo', {get:function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new Error('Capabilities: attempted call to an unimplemented function "hasStreamingVideo"'));
	}});
	Object.defineProperty(Capabilities, 'hasTLS', {get:function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new Error('Capabilities: attempted call to an unimplemented function "hasTLS"'));
	}});
	Object.defineProperty(Capabilities, 'hasVideoEncoder', {get:function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new Error('Capabilities: attempted call to an unimplemented function "hasVideoEncoder"'));
	}});
	Object.defineProperty(Capabilities, 'isDebugger', {get:function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new Error('Capabilities: attempted call to an unimplemented function "isDebugger"'));
	}});
	Object.defineProperty(Capabilities, 'isEmbeddedInAcrobat', {get:function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new Error('Capabilities: attempted call to an unimplemented function "isEmbeddedInAcrobat"'));
	}});
	Object.defineProperty(Capabilities, 'language', {get:function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new Error('Capabilities: attempted call to an unimplemented function "language"'));
	}});
	Object.defineProperty(Capabilities, 'localFileReadDisable', {get:function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new Error('Capabilities: attempted call to an unimplemented function "localFileReadDisable"'));
	}});
	Object.defineProperty(Capabilities, 'manufacturer', {get:function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new Error('Capabilities: attempted call to an unimplemented function "manufacturer"'));
	}});
	Object.defineProperty(Capabilities, 'maxLevelIDC', {get:function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new Error('Capabilities: attempted call to an unimplemented function "maxLevelIDC"'));
	}});
	Object.defineProperty(Capabilities, 'os', {get:function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new Error('Capabilities: attempted call to an unimplemented function "os"'));
	}});
	Object.defineProperty(Capabilities, 'pixelAspectRatio', {get:function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new Error('Capabilities: attempted call to an unimplemented function "pixelAspectRatio"'));
	}});
	Object.defineProperty(Capabilities, 'playerType', {get:function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		return 'JavaScript';
	}});
	Object.defineProperty(Capabilities, 'screenColor', {get:function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new Error('Capabilities: attempted call to an unimplemented function "screenColor"'));
	}});
	Object.defineProperty(Capabilities, 'screenDPI', {get:function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new Error('Capabilities: attempted call to an unimplemented function "screenDPI"'));
	}});
	Object.defineProperty(Capabilities, 'screenResolutionX', {get:function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new Error('Capabilities: attempted call to an unimplemented function "screenResolutionX"'));
	}});
	Object.defineProperty(Capabilities, 'screenResolutionY', {get:function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new Error('Capabilities: attempted call to an unimplemented function "screenResolutionY"'));
	}});
	Object.defineProperty(Capabilities, 'serverString', {get:function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new Error('Capabilities: attempted call to an unimplemented function "serverString"'));
	}});
	Object.defineProperty(Capabilities, 'supports32BitProcesses', {get:function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new Error('Capabilities: attempted call to an unimplemented function "supports32BitProcesses"'));
	}});
	Object.defineProperty(Capabilities, 'supports64BitProcesses', {get:function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new Error('Capabilities: attempted call to an unimplemented function "supports64BitProcesses"'));
	}});
	Object.defineProperty(Capabilities, 'touchscreenType', {get:function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new Error('Capabilities: attempted call to an unimplemented function "touchscreenType"'));
	}});
	Object.defineProperty(Capabilities, 'version', {get:function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new Error('Capabilities: attempted call to an unimplemented function "version"'));
	}});

	function Capabilities()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof Capabilities) || $$this.$$Capabilities !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Capabilities) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			Capabilities.$$construct($$this, $$args);
		}
	}

	//construct
	Capabilities.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$Capabilities', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		Capabilities.$$iinit($$this);

		//call constructor
		if (args !== undefined) Capabilities.$$constructor.apply($$this, args);
	});

	//initializer
	Capabilities.$$iinit = (function ($$this)
	{
	});

	//constructor
	Capabilities.$$constructor = (function ()
	{
		var $$this = this;
		throw $es4.$$primitive(new Error('Capabilities: attempted call to an unimplemented constructor'));
	});

	return $es4.$$class(Capabilities, null, 'flash.system::Capabilities');
})();
//flash.system.Capabilities


//flash.events.EventPhase
$es4.$$package('flash.events').EventPhase = (function ()
{
	//properties
	var $$j = {};
	EventPhase.AT_TARGET = 2;
	EventPhase.BUBBLING_PHASE = 3;
	EventPhase.CAPTURING_PHASE = 1;

	//class pre initializer
	EventPhase.$$sinit = (function ()
	{
		EventPhase.$$sinit = undefined;

		//set prototype and constructor
		EventPhase.prototype = Object.create(Object.prototype);
		Object.defineProperty(EventPhase.prototype, "constructor", { value: EventPhase, enumerable: false });

		//hold private values
		Object.defineProperty(EventPhase.prototype, '$$v', {value:{}});
	});

	//class initializer
	EventPhase.$$cinit = (function ()
	{
		EventPhase.$$cinit = undefined;
	});

	function EventPhase()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof EventPhase) || $$this.$$EventPhase !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], EventPhase) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			EventPhase.$$construct($$this, $$args);
		}
	}

	//construct
	EventPhase.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (EventPhase.$$cinit !== undefined) EventPhase.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$EventPhase', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		EventPhase.$$iinit($$this);

		//call constructor
		if (args !== undefined) EventPhase.$$constructor.apply($$this, args);
	});

	//initializer
	EventPhase.$$iinit = (function ($$this)
	{
	});

	//constructor
	EventPhase.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(EventPhase, null, 'flash.events::EventPhase');
})();
//flash.events.EventPhase


//flash.display.MovieClip
$es4.$$package('flash.display').MovieClip = (function ()
{
	//imports
	var Scene;
	var Player;
	var Sprite;

	//class pre initializer
	MovieClip.$$sinit = (function ()
	{
		MovieClip.$$sinit = undefined;

		//initialize imports
		Scene = $es4.$$['flash.display'].Scene;
		Player = $es4.$$['player'].Player;
		Sprite = $es4.$$['flash.display'].Sprite;

		//ensure $$sinit is called on super class
		if (Sprite.$$sinit !== undefined) Sprite.$$sinit();

		//set prototype and constructor
		MovieClip.prototype = Object.create(Sprite.prototype);
		Object.defineProperty(MovieClip.prototype, "constructor", { value: MovieClip, enumerable: false });

		//hold private values
		Object.defineProperty(MovieClip.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(MovieClip.prototype, '$__properties', {
		get:function ()
		{
			var $$this = this;

			function $__properties($$$$object)
			{
				//set default parameter values
				var object = (0 > arguments.length - 1) ? null : $$$$object;

				if ($$this.$$MovieClip.$_properties === undefined)
				{
					object = $es4.$$super2($$this, Sprite, '$$Sprite', '$__properties', 'func', undefined)(object);
					object.MovieClipScope = {$_setupLWF:$$this.$$MovieClip.$_setupLWF, $_setupFLWebGL:$$this.$$MovieClip.$_setupFLWebGL};
					object.TLScope = $$this;
					return $$this.$$MovieClip.$_properties = object;
				}
				return $$this.$$MovieClip.$_properties;
			}

			return $$this.$$MovieClip.$$$__properties || ($$this.$$MovieClip.$$$__properties = $__properties);
		}});


		//protected instance method
		Object.defineProperty(MovieClip.prototype, '$__createDomView', {
		get:function ()
		{
			var $$this = this;

			function $__createDomView()
			{
				return document.createElement('canvas');
			}

			return $$this.$$MovieClip.$$$__createDomView || ($$this.$$MovieClip.$$$__createDomView = $__createDomView);
		}});


		//private instance method
		MovieClip.prototype.$$v.$_setupLWF = {
		get:function ()
		{
			var $$this = this.$$this;

			function $_setupLWF()
			{
				$$this.$$MovieClip.$_lwf = $$this.$$MovieClip.$_properties.DisplayObjectScope.$_domView.lwf;
				$$this.$$MovieClip.$_stage = $$this.$$MovieClip.$_lwf.rootMovie;
			}

			return $$this.$$MovieClip.$$p.$$$_setupLWF || ($$this.$$MovieClip.$$p.$$$_setupLWF = $_setupLWF);
		}};


		//private instance method
		MovieClip.prototype.$$v.$_setupFLWebGL = {
		get:function ()
		{
			var $$this = this.$$this;

			function $_setupFLWebGL()
			{
				$$this.$$MovieClip.$_player = $$this.$$MovieClip.$_properties.DisplayObjectScope.$_domView.player;
				$$this.$$MovieClip.$_stage = $$this.$$MovieClip.$_player.getStage();
			}

			return $$this.$$MovieClip.$$p.$$$_setupFLWebGL || ($$this.$$MovieClip.$$p.$$$_setupFLWebGL = $_setupFLWebGL);
		}};


		//public instance method
		Object.defineProperty(MovieClip.prototype, '$__notify', {
		get:function ()
		{
			var $$this = this;

			function $__notify($$$$name, $$$$args)
			{
				//set default parameter values
				var name = $es4.$$coerce($$$$name, String);
				var args = $$$$args;

				if (name === 'enterFrame')
				{
					if ($$this.$$MovieClip.$_lwf)
					{
						var lwf = $$this.$$MovieClip.$_lwf;
						lwf.exec(args * .001);
						lwf.render();
					}
					else if ($$this.$$MovieClip.$_player)
					{
						$$this.$$MovieClip.$_player.update();
					}
				}
				$es4.$$super2($$this, Sprite, '$$Sprite', '$__notify', 'func', undefined)(name, args);
			}

			return $$this.$$MovieClip.$$$__notify || ($$this.$$MovieClip.$$$__notify = $__notify);
		}});


		//public instance method
		Object.defineProperty(MovieClip.prototype, 'addFrameScript', {
		get:function ()
		{
			var $$this = this;

			function addFrameScript($$$$rest)
			{
				//set default parameter values
				for (var $$i = 0, $$length = arguments.length, rest = new Array($$length - 0); $$i < $$length; $$i += 1) rest[$$i - 0] = arguments[$$i];

				throw $es4.$$primitive(new Error('MovieClip: attempted call to an unimplemented function "addFrameScript"'));
			}

			return $$this.$$MovieClip.$$addFrameScript || ($$this.$$MovieClip.$$addFrameScript = addFrameScript);
		}});


		//public instance method
		Object.defineProperty(MovieClip.prototype, 'gotoAndPlay', {
		get:function ()
		{
			var $$this = this;

			function gotoAndPlay($$$$frame, $$$$scene)
			{
				//set default parameter values
				var frame = $es4.$$coerce($$$$frame, Object);
				var scene = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$scene, String);

				$$this.$$MovieClip.$_stage.gotoAndPlay(frame);
			}

			return $$this.$$MovieClip.$$gotoAndPlay || ($$this.$$MovieClip.$$gotoAndPlay = gotoAndPlay);
		}});


		//public instance method
		Object.defineProperty(MovieClip.prototype, 'gotoAndStop', {
		get:function ()
		{
			var $$this = this;

			function gotoAndStop($$$$frame, $$$$scene)
			{
				//set default parameter values
				var frame = $es4.$$coerce($$$$frame, Object);
				var scene = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$scene, String);

				$$this.$$MovieClip.$_stage.gotoAndStop(frame);
			}

			return $$this.$$MovieClip.$$gotoAndStop || ($$this.$$MovieClip.$$gotoAndStop = gotoAndStop);
		}});


		//public instance method
		Object.defineProperty(MovieClip.prototype, 'nextFrame', {
		get:function ()
		{
			var $$this = this;

			function nextFrame()
			{
				throw $es4.$$primitive(new Error('MovieClip: attempted call to an unimplemented function "nextFrame"'));
			}

			return $$this.$$MovieClip.$$nextFrame || ($$this.$$MovieClip.$$nextFrame = nextFrame);
		}});


		//public instance method
		Object.defineProperty(MovieClip.prototype, 'nextScene', {
		get:function ()
		{
			var $$this = this;

			function nextScene()
			{
				throw $es4.$$primitive(new Error('MovieClip: attempted call to an unimplemented function "nextScene"'));
			}

			return $$this.$$MovieClip.$$nextScene || ($$this.$$MovieClip.$$nextScene = nextScene);
		}});


		//public instance method
		Object.defineProperty(MovieClip.prototype, 'play', {
		get:function ()
		{
			var $$this = this;

			function play()
			{
				$$this.$$MovieClip.$_stage.play();
			}

			return $$this.$$MovieClip.$$play || ($$this.$$MovieClip.$$play = play);
		}});


		//public instance method
		Object.defineProperty(MovieClip.prototype, 'prevFrame', {
		get:function ()
		{
			var $$this = this;

			function prevFrame()
			{
				throw $es4.$$primitive(new Error('MovieClip: attempted call to an unimplemented function "prevFrame"'));
			}

			return $$this.$$MovieClip.$$prevFrame || ($$this.$$MovieClip.$$prevFrame = prevFrame);
		}});


		//public instance method
		Object.defineProperty(MovieClip.prototype, 'prevScene', {
		get:function ()
		{
			var $$this = this;

			function prevScene()
			{
				throw $es4.$$primitive(new Error('MovieClip: attempted call to an unimplemented function "prevScene"'));
			}

			return $$this.$$MovieClip.$$prevScene || ($$this.$$MovieClip.$$prevScene = prevScene);
		}});


		//public instance method
		Object.defineProperty(MovieClip.prototype, 'stop', {
		get:function ()
		{
			var $$this = this;

			function stop()
			{
				$$this.$$MovieClip.$_stage.stop();
			}

			return $$this.$$MovieClip.$$stop || ($$this.$$MovieClip.$$stop = stop);
		}});

		Object.defineProperty(MovieClip.prototype, 'currentFrame', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$MovieClip.$_stage.currentFrame, int);
		}});
		Object.defineProperty(MovieClip.prototype, 'currentFrameLabel', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('MovieClip: attempted call to an unimplemented function "currentFrameLabel"'));
		}});
		Object.defineProperty(MovieClip.prototype, 'currentLabel', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('MovieClip: attempted call to an unimplemented function "currentLabel"'));
		}});
		Object.defineProperty(MovieClip.prototype, 'currentLabels', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('MovieClip: attempted call to an unimplemented function "currentLabels"'));
		}});
		Object.defineProperty(MovieClip.prototype, 'currentScene', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('MovieClip: attempted call to an unimplemented function "currentScene"'));
		}});
		Object.defineProperty(MovieClip.prototype, 'enabled', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('MovieClip: attempted call to an unimplemented function "enabled"'));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var $$this = this;
			throw $es4.$$primitive(new Error('MovieClip: attempted call to an unimplemented function "enabled"'));
		}});
		Object.defineProperty(MovieClip.prototype, 'framesLoaded', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('MovieClip: attempted call to an unimplemented function "framesLoaded"'));
		}});
		Object.defineProperty(MovieClip.prototype, 'scenes', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('MovieClip: attempted call to an unimplemented function "scenes"'));
		}});
		Object.defineProperty(MovieClip.prototype, 'totalFrames', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$MovieClip.$_stage.totalFrames, int);
		}});
		Object.defineProperty(MovieClip.prototype, 'trackAsMenu', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('MovieClip: attempted call to an unimplemented function "trackAsMenu"'));
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var $$this = this;
			throw $es4.$$primitive(new Error('MovieClip: attempted call to an unimplemented function "trackAsMenu"'));
		}});

		//properties
		MovieClip.prototype.$$v.$_properties = {
		get:function () { var $$this = this.$$this; return $$this.$$MovieClip.$$p.$_properties; },
		set:function (value) { var $$this = this.$$this; $$this.$$MovieClip.$$p.$_properties = value }
		};

		MovieClip.prototype.$$v.$_lwf = {
		get:function () { var $$this = this.$$this; return $$this.$$MovieClip.$$p.$_lwf; },
		set:function (value) { var $$this = this.$$this; $$this.$$MovieClip.$$p.$_lwf = value }
		};

		MovieClip.prototype.$$v.$_player = {
		get:function () { var $$this = this.$$this; return $$this.$$MovieClip.$$p.$_player; },
		set:function (value) { var $$this = this.$$this; $$this.$$MovieClip.$$p.$_player = value }
		};

		MovieClip.prototype.$$v.$_stage = {
		get:function () { var $$this = this.$$this; return $$this.$$MovieClip.$$p.$_stage; },
		set:function (value) { var $$this = this.$$this; $$this.$$MovieClip.$$p.$_stage = value }
		};

	});

	//class initializer
	MovieClip.$$cinit = (function ()
	{
		MovieClip.$$cinit = undefined;
	});

	function MovieClip()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof MovieClip) || $$this.$$MovieClip !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], MovieClip) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			MovieClip.$$construct($$this, $$args);
		}
	}

	//construct
	MovieClip.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (MovieClip.$$cinit !== undefined) MovieClip.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$MovieClip', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$MovieClip, '$_properties', MovieClip.prototype.$$v.$_properties);
		Object.defineProperty($$this.$$MovieClip, '$_lwf', MovieClip.prototype.$$v.$_lwf);
		Object.defineProperty($$this.$$MovieClip, '$_player', MovieClip.prototype.$$v.$_player);
		Object.defineProperty($$this.$$MovieClip, '$_stage', MovieClip.prototype.$$v.$_stage);

		//private instance method
		Object.defineProperty($$this.$$MovieClip, '$_setupLWF', MovieClip.prototype.$$v.$_setupLWF);

		//private instance method
		Object.defineProperty($$this.$$MovieClip, '$_setupFLWebGL', MovieClip.prototype.$$v.$_setupFLWebGL);

		//call construct on super
		Sprite.$$construct($$this);

		//initialize properties
		MovieClip.$$iinit($$this);

		//call constructor
		if (args !== undefined) MovieClip.$$constructor.apply($$this, args);
	});

	//initializer
	MovieClip.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$MovieClip.$$p.$_properties = undefined;
		$$this.$$MovieClip.$$p.$_lwf = undefined;
		$$this.$$MovieClip.$$p.$_player = undefined;
		$$this.$$MovieClip.$$p.$_stage = undefined;
	
		//call iinit on super
		Sprite.$$iinit($$this);
	});

	//constructor
	MovieClip.$$constructor = (function ()
	{
		var $$this = this;
		if ($$this.$$MovieClip.$_properties === undefined)
		{
			$$this.$__properties({});
		}
		Sprite.$$constructor.call($$this);
	});

	return $es4.$$class(MovieClip, {EXTENDS:'flash.display.Sprite'}, 'flash.display::MovieClip');
})();
//flash.display.MovieClip


//flash.text.engine.BreakOpportunity
$es4.$$package('flash.text.engine').BreakOpportunity = function () { throw new Error('Use of unimplemented class: BreakOpportunity'); }
//flash.text.engine.BreakOpportunity


//flash.text.FontStyle
$es4.$$package('flash.text').FontStyle = (function ()
{
	//properties
	var $$j = {};
	FontStyle.BOLD = "bold";
	FontStyle.BOLD_ITALIC = "boldItalic";
	FontStyle.ITALIC = "italic";
	FontStyle.REGULAR = "regular";

	//class pre initializer
	FontStyle.$$sinit = (function ()
	{
		FontStyle.$$sinit = undefined;

		//set prototype and constructor
		FontStyle.prototype = Object.create(Object.prototype);
		Object.defineProperty(FontStyle.prototype, "constructor", { value: FontStyle, enumerable: false });

		//hold private values
		Object.defineProperty(FontStyle.prototype, '$$v', {value:{}});
	});

	//class initializer
	FontStyle.$$cinit = (function ()
	{
		FontStyle.$$cinit = undefined;
	});

	function FontStyle()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof FontStyle) || $$this.$$FontStyle !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], FontStyle) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			FontStyle.$$construct($$this, $$args);
		}
	}

	//construct
	FontStyle.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (FontStyle.$$cinit !== undefined) FontStyle.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$FontStyle', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		FontStyle.$$iinit($$this);

		//call constructor
		if (args !== undefined) FontStyle.$$constructor.apply($$this, args);
	});

	//initializer
	FontStyle.$$iinit = (function ($$this)
	{
	});

	//constructor
	FontStyle.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(FontStyle, null, 'flash.text::FontStyle');
})();
//flash.text.FontStyle


//flash.accessibility.AccessibilityProperties
$es4.$$package('flash.accessibility').AccessibilityProperties = (function ()
{
	//imports
	var DisplayObject;

	//class pre initializer
	AccessibilityProperties.$$sinit = (function ()
	{
		AccessibilityProperties.$$sinit = undefined;

		//initialize imports
		DisplayObject = $es4.$$['flash.display'].DisplayObject;

		//set prototype and constructor
		AccessibilityProperties.prototype = Object.create(Object.prototype);
		Object.defineProperty(AccessibilityProperties.prototype, "constructor", { value: AccessibilityProperties, enumerable: false });

		//hold private values
		Object.defineProperty(AccessibilityProperties.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(AccessibilityProperties.prototype, '$_setOwner', {
		get:function ()
		{
			var $$this = this;

			function $_setOwner($$$$owner)
			{
				//set default parameter values
				var owner = $es4.$$coerce($$$$owner, DisplayObject);

				$$this.$$AccessibilityProperties.$_owner = owner;
				$$this.$_applyProperties($$this.$$AccessibilityProperties.$_owner.$__properties().DisplayObjectScope.$_domView);
			}

			return $$this.$$AccessibilityProperties.$$$_setOwner || ($$this.$$AccessibilityProperties.$$$_setOwner = $_setOwner);
		}});


		//public instance method
		Object.defineProperty(AccessibilityProperties.prototype, '$_applyProperties', {
		get:function ()
		{
			var $$this = this;

			function $_applyProperties($$$$object)
			{
				//set default parameter values
				var object = $es4.$$coerce($$$$object, Object);

				object.setAttribute('title', $$this.$$AccessibilityProperties.$_name);
				object.setAttribute('data-description', $$this.$$AccessibilityProperties.$_description);
			}

			return $$this.$$AccessibilityProperties.$$$_applyProperties || ($$this.$$AccessibilityProperties.$$$_applyProperties = $_applyProperties);
		}});

		Object.defineProperty(AccessibilityProperties.prototype, 'name', {get:function ()
		{
			var $$this = this;
			return $$this.$$AccessibilityProperties.$_name;
		}, set:function ($$$$name)
		{
			//set default parameter values
			var name = $es4.$$coerce($$$$name, String);

			var $$this = this;
			$$this.$$AccessibilityProperties.$_name = name;
			if ($$this.$$AccessibilityProperties.$_owner)
			{
				var scope = $$this.$$AccessibilityProperties.$_owner.$__properties().DisplayObjectScope;
				scope.$_domView.setAttribute('title', name);
			}
		}});
		Object.defineProperty(AccessibilityProperties.prototype, 'description', {get:function ()
		{
			var $$this = this;
			return $$this.$$AccessibilityProperties.$_description;
		}, set:function ($$$$description)
		{
			//set default parameter values
			var description = $es4.$$coerce($$$$description, String);

			var $$this = this;
			$$this.$$AccessibilityProperties.$_description = description;
			if ($$this.$$AccessibilityProperties.$_owner)
			{
				var scope = $$this.$$AccessibilityProperties.$_owner.$__properties().DisplayObjectScope;
				scope.$_domView.setAttribute('data-description', description);
			}
		}});

		//properties
		AccessibilityProperties.prototype.$$v.$_description = {
		get:function () { var $$this = this.$$this; return $$this.$$AccessibilityProperties.$$p.$_description; },
		set:function (value) { var $$this = this.$$this; $$this.$$AccessibilityProperties.$$p.$_description = $es4.$$coerce(value, String); }
		};

		Object.defineProperty(AccessibilityProperties.prototype, 'forceSimple', {
		get:function () { var $$this = this; return $$this.$$AccessibilityProperties.forceSimple; },
		set:function (value) { var $$this = this; $$this.$$AccessibilityProperties.forceSimple = $es4.$$coerce(value, Boolean); }
		});

		AccessibilityProperties.prototype.$$v.$_name = {
		get:function () { var $$this = this.$$this; return $$this.$$AccessibilityProperties.$$p.$_name; },
		set:function (value) { var $$this = this.$$this; $$this.$$AccessibilityProperties.$$p.$_name = $es4.$$coerce(value, String); }
		};

		Object.defineProperty(AccessibilityProperties.prototype, 'noAutoLabeling', {
		get:function () { var $$this = this; return $$this.$$AccessibilityProperties.noAutoLabeling; },
		set:function (value) { var $$this = this; $$this.$$AccessibilityProperties.noAutoLabeling = $es4.$$coerce(value, Boolean); }
		});

		Object.defineProperty(AccessibilityProperties.prototype, 'shortcut', {
		get:function () { var $$this = this; return $$this.$$AccessibilityProperties.shortcut; },
		set:function (value) { var $$this = this; $$this.$$AccessibilityProperties.shortcut = $es4.$$coerce(value, String); }
		});

		Object.defineProperty(AccessibilityProperties.prototype, 'silent', {
		get:function () { var $$this = this; return $$this.$$AccessibilityProperties.silent; },
		set:function (value) { var $$this = this; $$this.$$AccessibilityProperties.silent = $es4.$$coerce(value, Boolean); }
		});

		AccessibilityProperties.prototype.$$v.$_owner = {
		get:function () { var $$this = this.$$this; return $$this.$$AccessibilityProperties.$$p.$_owner; },
		set:function (value) { var $$this = this.$$this; $$this.$$AccessibilityProperties.$$p.$_owner = $es4.$$coerce(value, DisplayObject); }
		};

	});

	//class initializer
	AccessibilityProperties.$$cinit = (function ()
	{
		AccessibilityProperties.$$cinit = undefined;
	});

	function AccessibilityProperties()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof AccessibilityProperties) || $$this.$$AccessibilityProperties !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], AccessibilityProperties) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			AccessibilityProperties.$$construct($$this, $$args);
		}
	}

	//construct
	AccessibilityProperties.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (AccessibilityProperties.$$cinit !== undefined) AccessibilityProperties.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$AccessibilityProperties', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$AccessibilityProperties, '$_description', AccessibilityProperties.prototype.$$v.$_description);
		Object.defineProperty($$this.$$AccessibilityProperties, '$_name', AccessibilityProperties.prototype.$$v.$_name);
		Object.defineProperty($$this.$$AccessibilityProperties, '$_owner', AccessibilityProperties.prototype.$$v.$_owner);

		//initialize properties
		AccessibilityProperties.$$iinit($$this);

		//call constructor
		if (args !== undefined) AccessibilityProperties.$$constructor.apply($$this, args);
	});

	//initializer
	AccessibilityProperties.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$AccessibilityProperties.$$p.$_description = $es4.$$coerce('', String);
		$$this.$$AccessibilityProperties.forceSimple = $es4.$$coerce(undefined, Boolean);
		$$this.$$AccessibilityProperties.$$p.$_name = $es4.$$coerce('', String);
		$$this.$$AccessibilityProperties.noAutoLabeling = $es4.$$coerce(undefined, Boolean);
		$$this.$$AccessibilityProperties.shortcut = $es4.$$coerce('', String);
		$$this.$$AccessibilityProperties.silent = $es4.$$coerce(undefined, Boolean);
		$$this.$$AccessibilityProperties.$$p.$_owner = $es4.$$coerce(undefined, DisplayObject);
	
	});

	//constructor
	AccessibilityProperties.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(AccessibilityProperties, null, 'flash.accessibility::AccessibilityProperties');
})();
//flash.accessibility.AccessibilityProperties


//flash.display.Shader
$es4.$$package('flash.display').Shader = function () { throw new Error('Use of unimplemented class: Shader'); }
//flash.display.Shader


//flash.events.SoftKeyboardTrigger
$es4.$$package('flash.events').SoftKeyboardTrigger = function () { throw new Error('Use of unimplemented class: SoftKeyboardTrigger'); }
//flash.events.SoftKeyboardTrigger


//flash.events.ActivityEvent
$es4.$$package('flash.events').ActivityEvent = function () { throw new Error('Use of unimplemented class: ActivityEvent'); }
//flash.events.ActivityEvent


//flash.display3D.Context3DVertexBufferFormat
$es4.$$package('flash.display3D').Context3DVertexBufferFormat = function () { throw new Error('Use of unimplemented class: Context3DVertexBufferFormat'); }
//flash.display3D.Context3DVertexBufferFormat


//flash.net.NetStreamPlayTransitions
$es4.$$package('flash.net').NetStreamPlayTransitions = function () { throw new Error('Use of unimplemented class: NetStreamPlayTransitions'); }
//flash.net.NetStreamPlayTransitions


//flash.display3D.Program3D
$es4.$$package('flash.display3D').Program3D = function () { throw new Error('Use of unimplemented class: Program3D'); }
//flash.display3D.Program3D


//flash.filters.BlurFilter
$es4.$$package('flash.filters').BlurFilter = function () { throw new Error('Use of unimplemented class: BlurFilter'); }
//flash.filters.BlurFilter


//flash.media.Microphone
$es4.$$package('flash.media').Microphone = (function ()
{
	//imports
	var EventDispatcher;
	var SampleDataEvent;
	var StatusEvent;
	var Microphone;
	var SoundTransform;
	var MicrophoneEnhancedOptions;
	var Browser;
	var ByteArray;
	var SoundCodec;

	//class pre initializer
	Microphone.$$sinit = (function ()
	{
		Microphone.$$sinit = undefined;

		//initialize imports
		EventDispatcher = $es4.$$['flash.events'].EventDispatcher;
		SampleDataEvent = $es4.$$['flash.events'].SampleDataEvent;
		StatusEvent = $es4.$$['flash.events'].StatusEvent;
		SoundTransform = $es4.$$['flash.media'].SoundTransform;
		MicrophoneEnhancedOptions = $es4.$$['flash.media'].MicrophoneEnhancedOptions;
		Browser = $es4.$$['browser'].Browser;
		ByteArray = $es4.$$['flash.utils'].ByteArray;
		SoundCodec = $es4.$$['flash.media'].SoundCodec;

		//ensure $$sinit is called on super class
		if (EventDispatcher.$$sinit !== undefined) EventDispatcher.$$sinit();

		//set prototype and constructor
		Microphone.prototype = Object.create(EventDispatcher.prototype);
		Object.defineProperty(Microphone.prototype, "constructor", { value: Microphone, enumerable: false });

		//hold private values
		Object.defineProperty(Microphone.prototype, '$$v', {value:{}});

		//private instance method
		Microphone.prototype.$$v.$__onStream = {
		get:function ()
		{
			var $$this = this.$$this;

			function $__onStream($$$$stream)
			{
				//set default parameter values
				var stream = $$$$stream;

				var audioContext = Browser.getNewAudioContext();
				var audioInput = audioContext.createMediaStreamSource(stream);
				var bufferSize = 2048;
				var recorder = audioContext.createScriptProcessor(bufferSize, 1, 1);
				recorder.onaudioprocess = recorderProcess;
				audioInput.connect(recorder);
				recorder.connect(audioContext.destination);

				function recorderProcess($$$$event) 
				{
					//set default parameter values
					var event = $$$$event;

					var left = event.inputBuffer.getChannelData(0);
					var byteArray = $es4.$$primitive(new ByteArray());
					byteArray.$__setArrayBuffer(left.buffer);
					$$this.dispatchEvent($es4.$$primitive(new SampleDataEvent(SampleDataEvent.SAMPLE_DATA, false, false, 0, byteArray)));
				}
;

				$$this.dispatchEvent($es4.$$primitive(new StatusEvent(StatusEvent.STATUS, false, false, 'Microphone.Unmuted', '')));
			}

			return $$this.$$Microphone.$$p.$$$__onStream || ($$this.$$Microphone.$$p.$$$__onStream = $__onStream);
		}};


		//private instance method
		Microphone.prototype.$$v.$__onError = {
		get:function ()
		{
			var $$this = this.$$this;

			function $__onError()
			{
				$$this.dispatchEvent($es4.$$primitive(new StatusEvent(StatusEvent.STATUS, false, false, 'Microphone.Muted', '')));
			}

			return $$this.$$Microphone.$$p.$$$__onError || ($$this.$$Microphone.$$p.$$$__onError = $__onError);
		}};


		//public instance method
		Object.defineProperty(Microphone.prototype, 'setLoopBack', {
		get:function ()
		{
			var $$this = this;

			function setLoopBack($$$$state)
			{
				//set default parameter values
				var state = (0 > arguments.length - 1) ? true : $es4.$$coerce($$$$state, Boolean);

				throw $es4.$$primitive(new Error('Microphone: attempted call to an unimplemented function "setLoopBack"'));
			}

			return $$this.$$Microphone.$$setLoopBack || ($$this.$$Microphone.$$setLoopBack = setLoopBack);
		}});


		//public instance method
		Object.defineProperty(Microphone.prototype, 'setSilenceLevel', {
		get:function ()
		{
			var $$this = this;

			function setSilenceLevel($$$$silenceLevel, $$$$timeout)
			{
				//set default parameter values
				var silenceLevel = $es4.$$coerce($$$$silenceLevel, Number);
				var timeout = (1 > arguments.length - 1) ? -1 : $es4.$$coerce($$$$timeout, int);

				throw $es4.$$primitive(new Error('Microphone: attempted call to an unimplemented function "setSilenceLevel"'));
			}

			return $$this.$$Microphone.$$setSilenceLevel || ($$this.$$Microphone.$$setSilenceLevel = setSilenceLevel);
		}});


		//public instance method
		Object.defineProperty(Microphone.prototype, 'setUseEchoSuppression', {
		get:function ()
		{
			var $$this = this;

			function setUseEchoSuppression($$$$useEchoSuppression)
			{
				//set default parameter values
				var useEchoSuppression = $es4.$$coerce($$$$useEchoSuppression, Boolean);

				throw $es4.$$primitive(new Error('Microphone: attempted call to an unimplemented function "setUseEchoSuppression"'));
			}

			return $$this.$$Microphone.$$setUseEchoSuppression || ($$this.$$Microphone.$$setUseEchoSuppression = setUseEchoSuppression);
		}});

		Object.defineProperty(Microphone.prototype, 'activityLevel', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('Microphone: attempted call to an unimplemented function "activityLevel"'));
		}});
		Object.defineProperty(Microphone.prototype, 'codec', {get:function ()
		{
			var $$this = this;
			return $$this.$$Microphone._codec;
		}, set:function ($$$$codec)
		{
			//set default parameter values
			var codec = $es4.$$coerce($$$$codec, String);

			var $$this = this;
			throw $es4.$$primitive(new Error('Microphone: attempted call to an unimplemented function "codec"'));
		}});
		Object.defineProperty(Microphone.prototype, 'enableVAD', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('Microphone: attempted call to an unimplemented function "enableVAD"'));
		}, set:function ($$$$enable)
		{
			//set default parameter values
			var enable = $es4.$$coerce($$$$enable, Boolean);

			var $$this = this;
			throw $es4.$$primitive(new Error('Microphone: attempted call to an unimplemented function "enableVAD"'));
		}});
		Object.defineProperty(Microphone.prototype, 'encodeQuality', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('Microphone: attempted call to an unimplemented function "encodeQuality"'));
		}, set:function ($$$$quality)
		{
			//set default parameter values
			var quality = $es4.$$coerce($$$$quality, int);

			var $$this = this;
			throw $es4.$$primitive(new Error('Microphone: attempted call to an unimplemented function "encodeQuality"'));
		}});
		Object.defineProperty(Microphone.prototype, 'enhancedOptions', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('Microphone: attempted call to an unimplemented function "enhancedOptions"'));
		}, set:function ($$$$options)
		{
			//set default parameter values
			var options = $es4.$$coerce($$$$options, MicrophoneEnhancedOptions);

			var $$this = this;
			throw $es4.$$primitive(new Error('Microphone: attempted call to an unimplemented function "enhancedOptions"'));
		}});
		Object.defineProperty(Microphone.prototype, 'framesPerPacket', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('Microphone: attempted call to an unimplemented function "framesPerPacket"'));
		}, set:function ($$$$frames)
		{
			//set default parameter values
			var frames = $es4.$$coerce($$$$frames, int);

			var $$this = this;
			throw $es4.$$primitive(new Error('Microphone: attempted call to an unimplemented function "framesPerPacket"'));
		}});
		Object.defineProperty(Microphone.prototype, 'gain', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('Microphone: attempted call to an unimplemented function "gain"'));
		}, set:function ($$$$gain)
		{
			//set default parameter values
			var gain = $es4.$$coerce($$$$gain, Number);

			var $$this = this;
			throw $es4.$$primitive(new Error('Microphone: attempted call to an unimplemented function "gain"'));
		}});
		Object.defineProperty(Microphone.prototype, 'index', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('Microphone: attempted call to an unimplemented function "index"'));
		}});
		Object.defineProperty(Microphone.prototype, 'muted', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('Microphone: attempted call to an unimplemented function "muted"'));
		}});
		Object.defineProperty(Microphone.prototype, 'name', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('Microphone: attempted call to an unimplemented function "name"'));
		}});
		Object.defineProperty(Microphone.prototype, 'noiseSuppressionLevel', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('Microphone: attempted call to an unimplemented function "noiseSuppressionLevel"'));
		}, set:function ($$$$level)
		{
			//set default parameter values
			var level = $es4.$$coerce($$$$level, int);

			var $$this = this;
			throw $es4.$$primitive(new Error('Microphone: attempted call to an unimplemented function "noiseSuppressionLevel"'));
		}});
		Object.defineProperty(Microphone.prototype, 'rate', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('Microphone: attempted call to an unimplemented function "rate"'));
		}, set:function ($$$$rate)
		{
			//set default parameter values
			var rate = $es4.$$coerce($$$$rate, int);

			var $$this = this;
		}});
		Object.defineProperty(Microphone.prototype, 'silenceLevel', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('Microphone: attempted call to an unimplemented function "silenceLevel"'));
		}});
		Object.defineProperty(Microphone.prototype, 'silenceTimeout', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('Microphone: attempted call to an unimplemented function "silenceTimeout"'));
		}});
		Object.defineProperty(Microphone.prototype, 'soundTransform', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('Microphone: attempted call to an unimplemented function "soundTransform"'));
		}, set:function ($$$$sndTransform)
		{
			//set default parameter values
			var sndTransform = $es4.$$coerce($$$$sndTransform, SoundTransform);

			var $$this = this;
			throw $es4.$$primitive(new Error('Microphone: attempted call to an unimplemented function "soundTransform"'));
		}});
		Object.defineProperty(Microphone.prototype, 'useEchoSuppression', {get:function ()
		{
			var $$this = this;
			throw $es4.$$primitive(new Error('Microphone: attempted call to an unimplemented function "useEchoSuppression"'));
		}});

		//properties
		Microphone.prototype.$$v._codec = {
		get:function () { var $$this = this.$$this; return $$this.$$Microphone.$$p._codec; },
		set:function (value) { var $$this = this.$$this; $$this.$$Microphone.$$p._codec = $es4.$$coerce(value, String); }
		};

	});

	//class initializer
	Microphone.$$cinit = (function ()
	{
		Microphone.$$cinit = undefined;
	});

	//public static method
	Microphone.getEnhancedMicrophone = (function ($$$$index)
	{
		if (Microphone.$$cinit !== undefined) Microphone.$$cinit();

		//set default parameter values
		var index = (0 > arguments.length - 1) ? -1 : $es4.$$coerce($$$$index, int);

		throw $es4.$$primitive(new Error('Microphone: attempted call to an unimplemented function "getEnhancedMicrophone"'));
	});

	//public static method
	Microphone.getMicrophone = (function ($$$$index)
	{
		if (Microphone.$$cinit !== undefined) Microphone.$$cinit();

		//set default parameter values
		var index = (0 > arguments.length - 1) ? -1 : $es4.$$coerce($$$$index, int);

		var navigator = Browser.getWindow().navigator;
		navigator.getUserMedia = (navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia);
		var microphone = $es4.$$primitive(new Microphone());
		navigator.getUserMedia({audio:true, video:false}, microphone.$__onStream, microphone.$__onError);
		return $es4.$$coerce(microphone, $es4.$$['flash.media'].Microphone);
	});
	Object.defineProperty(Microphone, 'isSupported', {get:function ()
	{
		if (Microphone.$$cinit !== undefined) Microphone.$$cinit();

		throw $es4.$$primitive(new Error('Microphone: attempted call to an unimplemented function "isSupported"'));
	}});
	Object.defineProperty(Microphone, 'names', {get:function ()
	{
		if (Microphone.$$cinit !== undefined) Microphone.$$cinit();

		throw $es4.$$primitive(new Error('Microphone: attempted call to an unimplemented function "names"'));
	}});

	function Microphone()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof Microphone) || $$this.$$Microphone !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Microphone) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			Microphone.$$construct($$this, $$args);
		}
	}

	//construct
	Microphone.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (Microphone.$$cinit !== undefined) Microphone.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$Microphone', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$Microphone, '_codec', Microphone.prototype.$$v._codec);

		//private instance method
		Object.defineProperty($$this.$$Microphone, '$__onStream', Microphone.prototype.$$v.$__onStream);

		//private instance method
		Object.defineProperty($$this.$$Microphone, '$__onError', Microphone.prototype.$$v.$__onError);

		//call construct on super
		EventDispatcher.$$construct($$this);

		//initialize properties
		Microphone.$$iinit($$this);

		//call constructor
		if (args !== undefined) Microphone.$$constructor.apply($$this, args);
	});

	//initializer
	Microphone.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$Microphone.$$p._codec = $es4.$$coerce(SoundCodec.NELLYMOSER, String);
	
		//call iinit on super
		EventDispatcher.$$iinit($$this);
	});

	//constructor
	Microphone.$$constructor = (function ()
	{
		var $$this = this;

		EventDispatcher.$$constructor.call($$this);
	});

	return $es4.$$class(Microphone, {EXTENDS:'flash.events.EventDispatcher'}, 'flash.media::Microphone');
})();
//flash.media.Microphone


//flash.geom.PerspectiveProjection
$es4.$$package('flash.geom').PerspectiveProjection = function () { throw new Error('Use of unimplemented class: PerspectiveProjection'); }
//flash.geom.PerspectiveProjection


//flash.utils.ByteArray
$es4.$$package('flash.utils').ByteArray = (function ()
{
	//imports
	var ObjectEncoding;
	var ByteArray;
	var Endian;
	var IDataOutput;
	var IDataInput;

	//properties
	var $$j = {};
	ByteArray.BYTES_GROW_SIZE = 1024;

	//class pre initializer
	ByteArray.$$sinit = (function ()
	{
		ByteArray.$$sinit = undefined;

		//initialize imports
		ObjectEncoding = $es4.$$['flash.net'].ObjectEncoding;
		Endian = $es4.$$['flash.utils'].Endian;
		IDataOutput = $es4.$$['flash.utils'].IDataOutput;
		IDataInput = $es4.$$['flash.utils'].IDataInput;

		//set prototype and constructor
		ByteArray.prototype = Object.create(Object.prototype);
		Object.defineProperty(ByteArray.prototype, "constructor", { value: ByteArray, enumerable: false });

		//hold private values
		Object.defineProperty(ByteArray.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(ByteArray.prototype, '$__properties', {
		get:function ()
		{
			var $$this = this;

			function $__properties($$$$object)
			{
				//set default parameter values
				var object = (0 > arguments.length - 1) ? null : $$$$object;

				if ($$this.$$ByteArray.$_properties === undefined)
				{
					var arrayBuffer = $es4.$$primitive(new window.ArrayBuffer());
					var dataView = $es4.$$primitive(new window.DataView(arrayBuffer));
					object.ByteArrayScope = {$_arrayBuffer:arrayBuffer, $_dataView:dataView, $_bytePosition:0, $_byteLength:0, $_endian:Endian.BIG_ENDIAN, $_growSize:ByteArray.BYTES_GROW_SIZE};
					object.TLScope = $$this;
					return $$this.$$ByteArray.$_properties = object;
				}
				return $$this.$$ByteArray.$_properties;
			}

			return $$this.$$ByteArray.$$$__properties || ($$this.$$ByteArray.$$$__properties = $__properties);
		}});


		//public instance method
		Object.defineProperty(ByteArray.prototype, '$__getArrayBuffer', {
		get:function ()
		{
			var $$this = this;

			function $__getArrayBuffer()
			{
				return $$this.$$ByteArray.$_properties.ByteArrayScope.$_arrayBuffer.slice(0, $$this.$$ByteArray.$_properties.ByteArrayScope.$_byteLength);
			}

			return $$this.$$ByteArray.$$$__getArrayBuffer || ($$this.$$ByteArray.$$$__getArrayBuffer = $__getArrayBuffer);
		}});


		//public instance method
		Object.defineProperty(ByteArray.prototype, '$__setArrayBuffer', {
		get:function ()
		{
			var $$this = this;

			function $__setArrayBuffer($$$$arrayBuffer)
			{
				//set default parameter values
				var arrayBuffer = $$$$arrayBuffer;

				$$this.$$ByteArray.$_properties.ByteArrayScope.$_arrayBuffer = arrayBuffer;
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_dataView = $es4.$$primitive(new window.DataView(arrayBuffer));
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_byteLength = arrayBuffer.byteLength;
			}

			return $$this.$$ByteArray.$$$__setArrayBuffer || ($$this.$$ByteArray.$$$__setArrayBuffer = $__setArrayBuffer);
		}});


		//public instance method
		Object.defineProperty(ByteArray.prototype, 'clear', {
		get:function ()
		{
			var $$this = this;

			function clear()
			{
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_arrayBuffer = null;
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_dataView = null;
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition = 0;
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_byteLength = 0;
			}

			return $$this.$$ByteArray.$$clear || ($$this.$$ByteArray.$$clear = clear);
		}});


		//public instance method
		Object.defineProperty(ByteArray.prototype, 'readBoolean', {
		get:function ()
		{
			var $$this = this;

			function readBoolean()
			{
				return $es4.$$coerce($$this.readByte() !== 0, Boolean);
			}

			return $$this.$$ByteArray.$$readBoolean || ($$this.$$ByteArray.$$readBoolean = readBoolean);
		}});


		//public instance method
		Object.defineProperty(ByteArray.prototype, 'readByte', {
		get:function ()
		{
			var $$this = this;

			function readByte()
			{
				var value = $$this.$$ByteArray.$_properties.ByteArrayScope.$_dataView.getInt8($$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition);
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition += 1;
				return $es4.$$coerce(value, int);
			}

			return $$this.$$ByteArray.$$readByte || ($$this.$$ByteArray.$$readByte = readByte);
		}});


		//public instance method
		Object.defineProperty(ByteArray.prototype, 'readBytes', {
		get:function ()
		{
			var $$this = this;

			function readBytes($$$$writeTo, $$$$offset, $$$$length)
			{
				//set default parameter values
				var writeTo = $es4.$$coerce($$$$writeTo, $es4.$$['flash.utils'].ByteArray);
				var offset = (1 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$offset, uint);
				var length = (2 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$length, uint);

				var position = writeTo.position;
				var bytesAvailable = $es4.$$coerce($$this.bytesAvailable, uint);
				writeTo.writeBytes($$this, $$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition, length);
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition += bytesAvailable;
				writeTo.position = position;
			}

			return $$this.$$ByteArray.$$readBytes || ($$this.$$ByteArray.$$readBytes = readBytes);
		}});


		//public instance method
		Object.defineProperty(ByteArray.prototype, 'readDouble', {
		get:function ()
		{
			var $$this = this;

			function readDouble()
			{
				var value = $$this.$$ByteArray.$_properties.ByteArrayScope.$_dataView.getFloat64($$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition, $$this.$$ByteArray.$_properties.ByteArrayScope.$_endian != Endian.BIG_ENDIAN);
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition += 8;
				return $es4.$$coerce(value, Number);
			}

			return $$this.$$ByteArray.$$readDouble || ($$this.$$ByteArray.$$readDouble = readDouble);
		}});


		//public instance method
		Object.defineProperty(ByteArray.prototype, 'readFloat', {
		get:function ()
		{
			var $$this = this;

			function readFloat()
			{
				var value = $$this.$$ByteArray.$_properties.ByteArrayScope.$_dataView.getFloat32($$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition, $$this.$$ByteArray.$_properties.ByteArrayScope.$_endian != Endian.BIG_ENDIAN);
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition += 4;
				return $es4.$$coerce(value, Number);
			}

			return $$this.$$ByteArray.$$readFloat || ($$this.$$ByteArray.$$readFloat = readFloat);
		}});


		//public instance method
		Object.defineProperty(ByteArray.prototype, 'readInt', {
		get:function ()
		{
			var $$this = this;

			function readInt()
			{
				var value = $$this.$$ByteArray.$_properties.ByteArrayScope.$_dataView.getInt32($$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition, $$this.$$ByteArray.$_properties.ByteArrayScope.$_endian != Endian.BIG_ENDIAN);
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition += 4;
				return $es4.$$coerce(value, int);
			}

			return $$this.$$ByteArray.$$readInt || ($$this.$$ByteArray.$$readInt = readInt);
		}});


		//public instance method
		Object.defineProperty(ByteArray.prototype, 'readMultiByte', {
		get:function ()
		{
			var $$this = this;

			function readMultiByte($$$$length, $$$$charSet)
			{
				//set default parameter values
				var length = $es4.$$coerce($$$$length, uint);
				var charSet = $es4.$$coerce($$$$charSet, String);

				if (charSet !== 'iso-8859-1' && charSet != 'utf-8')
				{
					throw $es4.$$primitive(new Error('ByteArray: your selected charSet is not supported at this time, use: "iso-8859-1" or "utf-8"'));
				}
				if (charSet === 'utf-8')
				{
					return $$this.readUTFBytes(length);
				}
				var value = String.fromCharCode.apply(null, $es4.$$primitive(new window.Uint8Array($$this.$$ByteArray.$_properties.ByteArrayScope.$_arrayBuffer, $$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition, length)));
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition += length;
				return $es4.$$coerce(value, String);
			}

			return $$this.$$ByteArray.$$readMultiByte || ($$this.$$ByteArray.$$readMultiByte = readMultiByte);
		}});


		//public instance method
		Object.defineProperty(ByteArray.prototype, 'readShort', {
		get:function ()
		{
			var $$this = this;

			function readShort()
			{
				var value = $$this.$$ByteArray.$_properties.ByteArrayScope.$_dataView.getInt16($$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition, $$this.$$ByteArray.$_properties.ByteArrayScope.$_endian != Endian.BIG_ENDIAN);
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition += 2;
				return $es4.$$coerce(value, int);
			}

			return $$this.$$ByteArray.$$readShort || ($$this.$$ByteArray.$$readShort = readShort);
		}});


		//public instance method
		Object.defineProperty(ByteArray.prototype, 'readUnsignedByte', {
		get:function ()
		{
			var $$this = this;

			function readUnsignedByte()
			{
				var value = $$this.$$ByteArray.$_properties.ByteArrayScope.$_dataView.getUint8($$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition, $$this.$$ByteArray.$_properties.ByteArrayScope.$_endian != Endian.BIG_ENDIAN);
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition += 1;
				return $es4.$$coerce(value, uint);
			}

			return $$this.$$ByteArray.$$readUnsignedByte || ($$this.$$ByteArray.$$readUnsignedByte = readUnsignedByte);
		}});


		//public instance method
		Object.defineProperty(ByteArray.prototype, 'readUnsignedInt', {
		get:function ()
		{
			var $$this = this;

			function readUnsignedInt()
			{
				var value = $$this.$$ByteArray.$_properties.ByteArrayScope.$_dataView.getUint32($$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition, $$this.$$ByteArray.$_properties.ByteArrayScope.$_endian != Endian.BIG_ENDIAN);
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition += 4;
				return $es4.$$coerce(value, uint);
			}

			return $$this.$$ByteArray.$$readUnsignedInt || ($$this.$$ByteArray.$$readUnsignedInt = readUnsignedInt);
		}});


		//public instance method
		Object.defineProperty(ByteArray.prototype, 'readUnsignedShort', {
		get:function ()
		{
			var $$this = this;

			function readUnsignedShort()
			{
				var value = $$this.$$ByteArray.$_properties.ByteArrayScope.$_dataView.getUint16($$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition, $$this.$$ByteArray.$_properties.ByteArrayScope.$_endian != Endian.BIG_ENDIAN);
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition += 2;
				return $es4.$$coerce(value, uint);
			}

			return $$this.$$ByteArray.$$readUnsignedShort || ($$this.$$ByteArray.$$readUnsignedShort = readUnsignedShort);
		}});


		//public instance method
		Object.defineProperty(ByteArray.prototype, 'readUTF', {
		get:function ()
		{
			var $$this = this;

			function readUTF()
			{
				var length = $$this.readUnsignedShort();
				return $$this.readUTFBytes(length);
			}

			return $$this.$$ByteArray.$$readUTF || ($$this.$$ByteArray.$$readUTF = readUTF);
		}});


		//public instance method
		Object.defineProperty(ByteArray.prototype, 'readUTFBytes', {
		get:function ()
		{
			var $$this = this;

			function readUTFBytes($$$$length)
			{
				//set default parameter values
				var length = $es4.$$coerce($$$$length, uint);

				if (length == 0)
				{
					return '';
				}
				var string = '';
				var index = 0;
				var bytes = $es4.$$primitive(new window.Uint8Array($$this.$$ByteArray.$_properties.ByteArrayScope.$_arrayBuffer, $$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition, length));
				if (bytes.length >= 3 && bytes[0] === 0xEF && bytes[1] === 0xBB && bytes[2] === 0xBF)
				{
					index = 3;
				}
				var byte1 = 0;
				var byte2 = 0;
				var byte3 = 0;
				var byte4 = 0;
				while (index < bytes.length)
				{
					byte1 = $es4.$$coerce(bytes[index], int);
					if (byte1 < 0x80)
					{
						string += String.fromCharCode(byte1);
						index++;
						continue;
					}
					if (byte1 > 0xBF && byte1 < 0xE0)
					{
						if (index + 1 >= bytes.length)
						{
							throw "UTF-8 Decode failed. Two byte character was truncated.";
						}
						byte2 = $es4.$$coerce(bytes[index + 1], int);
						string += String.fromCharCode(((byte1 & 31) << 6) | (byte2 & 63));
						index += 2;
						continue;
					}
					if (byte1 > 0xDF && byte1 < 0xF0)
					{
						if (index + 2 >= bytes.length)
						{
							throw "UTF-8 Decode failed. Multi byte character was truncated.";
						}
						byte2 = $es4.$$coerce(bytes[index + 1], int);
						byte3 = $es4.$$coerce(bytes[index + 2], int);
						string += String.fromCharCode(((byte1 & 15) << 12) | ((byte2 & 63) << 6) | (byte3 & 63));
						index += 3;
						continue;
					}
					var charCode = ((byte1 & 0x07) << 18 | (bytes[index + 1] & 0x3F) << 12 | (bytes[index + 2] & 0x3F) << 6 | bytes[index + 3] & 0x3F) - 0x010000;
					string += String.fromCharCode(charCode >> 10 | 0xD800, charCode & 0x03FF | 0xDC00);
					index += 4;
				}
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition += length;
				return string;
			}

			return $$this.$$ByteArray.$$readUTFBytes || ($$this.$$ByteArray.$$readUTFBytes = readUTFBytes);
		}});


		//public instance method
		Object.defineProperty(ByteArray.prototype, 'writeBoolean', {
		get:function ()
		{
			var $$this = this;

			function writeBoolean($$$$value)
			{
				//set default parameter values
				var value = $es4.$$coerce($$$$value, Boolean);

				$$this.writeByte(int(value));
			}

			return $$this.$$ByteArray.$$writeBoolean || ($$this.$$ByteArray.$$writeBoolean = writeBoolean);
		}});


		//public instance method
		Object.defineProperty(ByteArray.prototype, 'writeByte', {
		get:function ()
		{
			var $$this = this;

			function writeByte($$$$value)
			{
				//set default parameter values
				var value = $es4.$$coerce($$$$value, int);

				var bytePosition = $es4.$$coerce($$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition, uint);
				var newBytePosition = $es4.$$coerce(bytePosition + 1, uint);
				if (newBytePosition > $$this.$$ByteArray.$_properties.ByteArrayScope.$_byteLength)
				{
					if (newBytePosition > $$this.$$ByteArray.$_properties.ByteArrayScope.$_arrayBuffer.byteLength)
					{
						$$this.length = newBytePosition;
					}
					else
					{
						$$this.$$ByteArray.$_properties.ByteArrayScope.$_byteLength = newBytePosition;
					}
				}
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_dataView.setInt8(bytePosition, value);
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition += 1;
			}

			return $$this.$$ByteArray.$$writeByte || ($$this.$$ByteArray.$$writeByte = writeByte);
		}});


		//private instance method
		ByteArray.prototype.$$v.writeUnsignedByte = {
		get:function ()
		{
			var $$this = this.$$this;

			function writeUnsignedByte($$$$value)
			{
				//set default parameter values
				var value = $es4.$$coerce($$$$value, int);

				var bytePosition = $es4.$$coerce($$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition, uint);
				var newBytePosition = $es4.$$coerce(bytePosition + 1, uint);
				if (newBytePosition > $$this.$$ByteArray.$_properties.ByteArrayScope.$_byteLength)
				{
					if (newBytePosition > $$this.$$ByteArray.$_properties.ByteArrayScope.$_arrayBuffer.byteLength)
					{
						$$this.length = newBytePosition;
					}
					else
					{
						$$this.$$ByteArray.$_properties.ByteArrayScope.$_byteLength = newBytePosition;
					}
				}
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_dataView.setUint8(bytePosition, value);
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition += 1;
			}

			return $$this.$$ByteArray.$$p.$$writeUnsignedByte || ($$this.$$ByteArray.$$p.$$writeUnsignedByte = writeUnsignedByte);
		}};


		//public instance method
		Object.defineProperty(ByteArray.prototype, 'writeBytes', {
		get:function ()
		{
			var $$this = this;

			function writeBytes($$$$readFrom, $$$$offset, $$$$length)
			{
				//set default parameter values
				var readFrom = $es4.$$coerce($$$$readFrom, $es4.$$['flash.utils'].ByteArray);
				var offset = (1 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$offset, uint);
				var length = (2 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$length, uint);

				if (length == 0)
				{
					length = readFrom.length - offset;
				}
				var bytePosition = $es4.$$coerce($$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition, uint);
				var newBytePosition = bytePosition + length;
				var arrayBuffer = $$this.$$ByteArray.$_properties.ByteArrayScope.$_arrayBuffer;
				if (newBytePosition > $$this.$$ByteArray.$_properties.ByteArrayScope.$_byteLength)
				{
					if (newBytePosition > $$this.$$ByteArray.$_properties.ByteArrayScope.$_arrayBuffer.byteLength)
					{
						var oldArrayBuffer = arrayBuffer;
						arrayBuffer = $es4.$$primitive(new window.ArrayBuffer(newBytePosition + ($$this.$$ByteArray.$_properties.ByteArrayScope.$_growSize = ($$this.$$ByteArray.$_properties.ByteArrayScope.$_growSize * 2))));
						$es4.$$primitive(new window.Uint8Array(arrayBuffer).set($es4.$$primitive(new window.Uint8Array(oldArrayBuffer))));
					}
					$$this.$$ByteArray.$_properties.ByteArrayScope.$_byteLength = newBytePosition;
				}
				$es4.$$primitive(new window.Uint8Array(arrayBuffer).set($es4.$$primitive(new window.Uint8Array(readFrom.$__properties().ByteArrayScope.$_arrayBuffer.slice(offset, offset + length))), bytePosition));
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_dataView = $es4.$$primitive(new window.DataView(arrayBuffer));
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_arrayBuffer = arrayBuffer;
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition = newBytePosition;
			}

			return $$this.$$ByteArray.$$writeBytes || ($$this.$$ByteArray.$$writeBytes = writeBytes);
		}});


		//public instance method
		Object.defineProperty(ByteArray.prototype, 'writeDouble', {
		get:function ()
		{
			var $$this = this;

			function writeDouble($$$$value)
			{
				//set default parameter values
				var value = $es4.$$coerce($$$$value, Number);

				var bytePosition = $es4.$$coerce($$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition, uint);
				var newBytePosition = $es4.$$coerce(bytePosition + 8, uint);
				if (newBytePosition > $$this.$$ByteArray.$_properties.ByteArrayScope.$_byteLength)
				{
					if (newBytePosition > $$this.$$ByteArray.$_properties.ByteArrayScope.$_arrayBuffer.byteLength)
					{
						$$this.length = newBytePosition;
					}
					else
					{
						$$this.$$ByteArray.$_properties.ByteArrayScope.$_byteLength = newBytePosition;
					}
				}
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_dataView.setFloat64(bytePosition, value, $$this.$$ByteArray.$_properties.ByteArrayScope.$_endian != Endian.BIG_ENDIAN);
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition += 8;
			}

			return $$this.$$ByteArray.$$writeDouble || ($$this.$$ByteArray.$$writeDouble = writeDouble);
		}});


		//public instance method
		Object.defineProperty(ByteArray.prototype, 'writeFloat', {
		get:function ()
		{
			var $$this = this;

			function writeFloat($$$$value)
			{
				//set default parameter values
				var value = $es4.$$coerce($$$$value, Number);

				var bytePosition = $es4.$$coerce($$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition, uint);
				var newBytePosition = $es4.$$coerce(bytePosition + 4, uint);
				if (newBytePosition > $$this.$$ByteArray.$_properties.ByteArrayScope.$_byteLength)
				{
					if (newBytePosition > $$this.$$ByteArray.$_properties.ByteArrayScope.$_arrayBuffer.byteLength)
					{
						$$this.length = newBytePosition;
					}
					else
					{
						$$this.$$ByteArray.$_properties.ByteArrayScope.$_byteLength = newBytePosition;
					}
				}
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_dataView.setFloat32(bytePosition, value, $$this.$$ByteArray.$_properties.ByteArrayScope.$_endian != Endian.BIG_ENDIAN);
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition += 4;
			}

			return $$this.$$ByteArray.$$writeFloat || ($$this.$$ByteArray.$$writeFloat = writeFloat);
		}});


		//public instance method
		Object.defineProperty(ByteArray.prototype, 'writeInt', {
		get:function ()
		{
			var $$this = this;

			function writeInt($$$$value)
			{
				//set default parameter values
				var value = $es4.$$coerce($$$$value, int);

				var bytePosition = $es4.$$coerce($$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition, uint);
				var newBytePosition = $es4.$$coerce(bytePosition + 4, uint);
				if (newBytePosition > $$this.$$ByteArray.$_properties.ByteArrayScope.$_byteLength)
				{
					if (newBytePosition > $$this.$$ByteArray.$_properties.ByteArrayScope.$_arrayBuffer.byteLength)
					{
						$$this.length = newBytePosition;
					}
					else
					{
						$$this.$$ByteArray.$_properties.ByteArrayScope.$_byteLength = newBytePosition;
					}
				}
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_dataView.setInt32(bytePosition, value, $$this.$$ByteArray.$_properties.ByteArrayScope.$_endian != Endian.BIG_ENDIAN);
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition += 4;
			}

			return $$this.$$ByteArray.$$writeInt || ($$this.$$ByteArray.$$writeInt = writeInt);
		}});


		//public instance method
		Object.defineProperty(ByteArray.prototype, 'writeMultiByte', {
		get:function ()
		{
			var $$this = this;

			function writeMultiByte($$$$string, $$$$charSet)
			{
				//set default parameter values
				var string = $es4.$$coerce($$$$string, String);
				var charSet = $es4.$$coerce($$$$charSet, String);

				if (charSet !== 'iso-8859-1' && charSet !== 'utf-8')
				{
					throw $es4.$$primitive(new Error('ByteArray: your selected charSet is not supported at this time, use: "iso-8859-1" or "utf-8"'));
				}
				if (charSet == 'utf-8')
				{
					$$this.$$ByteArray.internalWriteUTFBytes(string);
					return;
				}
				var index = 0;
				while (index < string.length)
				{
					var charCode = $es4.$$coerce(string.charCodeAt(index++), uint);
					$$this.$$ByteArray.writeUnsignedByte(charCode);
				}
			}

			return $$this.$$ByteArray.$$writeMultiByte || ($$this.$$ByteArray.$$writeMultiByte = writeMultiByte);
		}});


		//public instance method
		Object.defineProperty(ByteArray.prototype, 'writeShort', {
		get:function ()
		{
			var $$this = this;

			function writeShort($$$$value)
			{
				//set default parameter values
				var value = $es4.$$coerce($$$$value, int);

				var bytePosition = $es4.$$coerce($$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition, uint);
				var newBytePosition = $es4.$$coerce(bytePosition + 2, uint);
				if (newBytePosition > $$this.$$ByteArray.$_properties.ByteArrayScope.$_byteLength)
				{
					if (newBytePosition > $$this.$$ByteArray.$_properties.ByteArrayScope.$_arrayBuffer.byteLength)
					{
						$$this.length = newBytePosition;
					}
					else
					{
						$$this.$$ByteArray.$_properties.ByteArrayScope.$_byteLength = newBytePosition;
					}
				}
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_dataView.setInt16(bytePosition, value, $$this.$$ByteArray.$_properties.ByteArrayScope.$_endian != Endian.BIG_ENDIAN);
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition += 2;
			}

			return $$this.$$ByteArray.$$writeShort || ($$this.$$ByteArray.$$writeShort = writeShort);
		}});


		//private instance method
		ByteArray.prototype.$$v.writeUnsignedShort = {
		get:function ()
		{
			var $$this = this.$$this;

			function writeUnsignedShort($$$$value, $$$$endian)
			{
				//set default parameter values
				var value = $es4.$$coerce($$$$value, int);
				var endian = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$endian, String);

				if (!endian)
				{
					endian = $es4.$$coerce($$this.$$ByteArray.$_properties.ByteArrayScope.$_endian, String);
				}
				var bytePosition = $es4.$$coerce($$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition, uint);
				var newBytePosition = $es4.$$coerce(bytePosition + 2, uint);
				if (newBytePosition > $$this.$$ByteArray.$_properties.ByteArrayScope.$_byteLength)
				{
					if (newBytePosition > $$this.$$ByteArray.$_properties.ByteArrayScope.$_arrayBuffer.byteLength)
					{
						$$this.length = newBytePosition;
					}
					else
					{
						$$this.$$ByteArray.$_properties.ByteArrayScope.$_byteLength = newBytePosition;
					}
				}
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_dataView.setUint16(bytePosition, value, endian != Endian.BIG_ENDIAN);
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition += 2;
			}

			return $$this.$$ByteArray.$$p.$$writeUnsignedShort || ($$this.$$ByteArray.$$p.$$writeUnsignedShort = writeUnsignedShort);
		}};


		//public instance method
		Object.defineProperty(ByteArray.prototype, 'writeUnsignedInt', {
		get:function ()
		{
			var $$this = this;

			function writeUnsignedInt($$$$value)
			{
				//set default parameter values
				var value = $es4.$$coerce($$$$value, uint);

				var bytePosition = $es4.$$coerce($$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition, uint);
				var newBytePosition = $es4.$$coerce(bytePosition + 4, uint);
				if (newBytePosition > $$this.$$ByteArray.$_properties.ByteArrayScope.$_byteLength)
				{
					if (newBytePosition > $$this.$$ByteArray.$_properties.ByteArrayScope.$_arrayBuffer.byteLength)
					{
						$$this.length = newBytePosition;
					}
					else
					{
						$$this.$$ByteArray.$_properties.ByteArrayScope.$_byteLength = newBytePosition;
					}
				}
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_dataView.setUint32(bytePosition, value, $$this.$$ByteArray.$_properties.ByteArrayScope.$_endian != Endian.BIG_ENDIAN);
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition += 4;
			}

			return $$this.$$ByteArray.$$writeUnsignedInt || ($$this.$$ByteArray.$$writeUnsignedInt = writeUnsignedInt);
		}});


		//public instance method
		Object.defineProperty(ByteArray.prototype, 'writeUTF', {
		get:function ()
		{
			var $$this = this;

			function writeUTF($$$$value)
			{
				//set default parameter values
				var value = $es4.$$coerce($$$$value, String);

				var bytePosition = $es4.$$coerce($$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition, uint);
				var newBytePosition = $es4.$$coerce(bytePosition + 2, uint);
				if (newBytePosition > $$this.$$ByteArray.$_properties.ByteArrayScope.$_byteLength)
				{
					if (newBytePosition > $$this.$$ByteArray.$_properties.ByteArrayScope.$_arrayBuffer.byteLength)
					{
						$$this.length = newBytePosition;
					}
					else
					{
						$$this.$$ByteArray.$_properties.ByteArrayScope.$_byteLength = newBytePosition;
					}
				}
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition += 2;
				var length = $$this.$$ByteArray.internalWriteUTFBytes(value);
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_dataView.setUint16(bytePosition, length, $$this.$$ByteArray.$_properties.ByteArrayScope.$_endian != Endian.BIG_ENDIAN);
			}

			return $$this.$$ByteArray.$$writeUTF || ($$this.$$ByteArray.$$writeUTF = writeUTF);
		}});


		//private instance method
		ByteArray.prototype.$$v.internalWriteUTFBytes = {
		get:function ()
		{
			var $$this = this.$$this;

			function internalWriteUTFBytes($$$$string)
			{
				//set default parameter values
				var string = $es4.$$coerce($$$$string, String);

				var utf8 = [];
				for (var i = 0; i < string.length; i++)
				{
					var charcode = string.charCodeAt(i);
					if (charcode < 0x80)
					{
						utf8.push(charcode);
					}
					else if (charcode < 0x800)
					{
						utf8.push(0xc0 | (charcode >> 6), 0x80 | (charcode & 0x3f));
					}
					else if (charcode < 0xd800 || charcode >= 0xe000)
					{
						utf8.push(0xe0 | (charcode >> 12), 0x80 | ((charcode >> 6) & 0x3f), 0x80 | (charcode & 0x3f));
					}
					else
					{
						i++;
						charcode = 0x10000 + (((charcode & 0x3ff) << 10) | (string.charCodeAt(i) & 0x3ff));
						utf8.push(0xf0 | (charcode >> 18), 0x80 | ((charcode >> 12) & 0x3f), 0x80 | ((charcode >> 6) & 0x3f), 0x80 | (charcode & 0x3f));
					}
				}
				var index = 0;
				var bytesLength = utf8.length;
				while (index < bytesLength)
				{
					$$this.$$ByteArray.writeUnsignedByte(utf8[index]);
					index++;
				}
				return bytesLength;
			}

			return $$this.$$ByteArray.$$p.$$internalWriteUTFBytes || ($$this.$$ByteArray.$$p.$$internalWriteUTFBytes = internalWriteUTFBytes);
		}};


		//public instance method
		Object.defineProperty(ByteArray.prototype, 'writeUTFBytes', {
		get:function ()
		{
			var $$this = this;

			function writeUTFBytes($$$$value)
			{
				//set default parameter values
				var value = $es4.$$coerce($$$$value, String);

				$$this.$$ByteArray.internalWriteUTFBytes(value);
			}

			return $$this.$$ByteArray.$$writeUTFBytes || ($$this.$$ByteArray.$$writeUTFBytes = writeUTFBytes);
		}});


		//public instance method
		Object.defineProperty(ByteArray.prototype, 'writeObject', {
		get:function ()
		{
			var $$this = this;

			function writeObject($$$$object)
			{
				//set default parameter values
				var object = $$$$object;

				throw $es4.$$primitive(new Error('ByteArray: attempted call to an unimplemented function "writeObject"'));
			}

			return $$this.$$ByteArray.$$writeObject || ($$this.$$ByteArray.$$writeObject = writeObject);
		}});


		//public instance method
		Object.defineProperty(ByteArray.prototype, 'readObject', {
		get:function ()
		{
			var $$this = this;

			function readObject()
			{
				throw $es4.$$primitive(new Error('ByteArray: attempted call to an unimplemented function "readObject"'));
			}

			return $$this.$$ByteArray.$$readObject || ($$this.$$ByteArray.$$readObject = readObject);
		}});


		//public instance method
		Object.defineProperty(ByteArray.prototype, 'toString', {
		get:function ()
		{
			var $$this = this;

			function toString()
			{
				throw $es4.$$primitive(new Error('ByteArray: attempted call to an unimplemented function "toString"'));
			}

			return $$this.$$ByteArray.$$toString || ($$this.$$ByteArray.$$toString = toString);
		}});


		//public instance method
		Object.defineProperty(ByteArray.prototype, 'compress', {
		get:function ()
		{
			var $$this = this;

			function compress($$$$algorithm)
			{
				//set default parameter values
				var algorithm = (0 > arguments.length - 1) ? "zlib" : $es4.$$coerce($$$$algorithm, String);

				throw $es4.$$primitive(new Error('ByteArray: attempted call to an unimplemented function "compress"'));
			}

			return $$this.$$ByteArray.$$compress || ($$this.$$ByteArray.$$compress = compress);
		}});


		//public instance method
		Object.defineProperty(ByteArray.prototype, 'deflate', {
		get:function ()
		{
			var $$this = this;

			function deflate()
			{
				throw $es4.$$primitive(new Error('ByteArray: attempted call to an unimplemented function "deflate"'));
			}

			return $$this.$$ByteArray.$$deflate || ($$this.$$ByteArray.$$deflate = deflate);
		}});


		//public instance method
		Object.defineProperty(ByteArray.prototype, 'inflate', {
		get:function ()
		{
			var $$this = this;

			function inflate()
			{
				throw $es4.$$primitive(new Error('ByteArray: attempted call to an unimplemented function "inflate"'));
			}

			return $$this.$$ByteArray.$$inflate || ($$this.$$ByteArray.$$inflate = inflate);
		}});


		//public instance method
		Object.defineProperty(ByteArray.prototype, 'uncompress', {
		get:function ()
		{
			var $$this = this;

			function uncompress($$$$algorithm)
			{
				//set default parameter values
				var algorithm = (0 > arguments.length - 1) ? "zlib" : $es4.$$coerce($$$$algorithm, String);

				throw $es4.$$primitive(new Error('ByteArray: attempted call to an unimplemented function "uncompress"'));
			}

			return $$this.$$ByteArray.$$uncompress || ($$this.$$ByteArray.$$uncompress = uncompress);
		}});

		Object.defineProperty(ByteArray.prototype, 'bytesAvailable', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$ByteArray.$_properties.ByteArrayScope.$_byteLength - $$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition, uint);
		}});
		Object.defineProperty(ByteArray.prototype, 'endian', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$ByteArray.$_properties.ByteArrayScope.$_endian, String);
		}, set:function ($$$$type)
		{
			//set default parameter values
			var type = $es4.$$coerce($$$$type, String);

			var $$this = this;
			$$this.$$ByteArray.$_properties.ByteArrayScope.$_endian = type;
		}});
		Object.defineProperty(ByteArray.prototype, 'length', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$ByteArray.$_properties.ByteArrayScope.$_byteLength, uint);
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, uint);

			var $$this = this;
			if (value == $$this.$$ByteArray.$_properties.ByteArrayScope.$_byteLength)
			{
				return;
			}
			var arrayBuffer;
			if (value < $$this.$$ByteArray.$_properties.ByteArrayScope.$_byteLength)
			{
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_growSize = ByteArray.BYTES_GROW_SIZE;
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_byteLength = value;
				if ($$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition > value)
				{
					$$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition = value;
				}
				return;
			}
			if (value > $$this.$$ByteArray.$_properties.ByteArrayScope.$_arrayBuffer.byteLength)
			{
				arrayBuffer = $es4.$$primitive(new window.ArrayBuffer(value + ($$this.$$ByteArray.$_properties.ByteArrayScope.$_growSize = ($$this.$$ByteArray.$_properties.ByteArrayScope.$_growSize * 2))));
				$es4.$$primitive(new window.Uint8Array(arrayBuffer).set($es4.$$primitive(new window.Uint8Array($$this.$$ByteArray.$_properties.ByteArrayScope.$_arrayBuffer))));
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_dataView = $es4.$$primitive(new window.DataView(arrayBuffer));
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_arrayBuffer = arrayBuffer;
				$$this.$$ByteArray.$_properties.ByteArrayScope.$_byteLength = value;
			}
		}});
		Object.defineProperty(ByteArray.prototype, 'position', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce($$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition, uint);
		}, set:function ($$$$offset)
		{
			//set default parameter values
			var offset = $es4.$$coerce($$$$offset, uint);

			var $$this = this;
			$$this.$$ByteArray.$_properties.ByteArrayScope.$_bytePosition = offset;
		}});
		Object.defineProperty(ByteArray.prototype, 'objectEncoding', {get:function ()
		{
			var $$this = this;
			return ObjectEncoding.AMF3;
		}, set:function ($$$$version)
		{
			//set default parameter values
			var version = $es4.$$coerce($$$$version, uint);

			var $$this = this;
			if (version != ObjectEncoding.AMF3)
			{
				throw $es4.$$primitive(new Error('ByteArray: desired object encoding not supported at this time'));
			}
		}});

		//properties
		ByteArray.prototype.$$v.$_properties = {
		get:function () { var $$this = this.$$this; return $$this.$$ByteArray.$$p.$_properties; },
		set:function (value) { var $$this = this.$$this; $$this.$$ByteArray.$$p.$_properties = value }
		};

	});

	//class initializer
	ByteArray.$$cinit = (function ()
	{
		ByteArray.$$cinit = undefined;
	});

	Object.defineProperty(ByteArray, 'defaultObjectEncoding', {get:function ()
	{
		if (ByteArray.$$cinit !== undefined) ByteArray.$$cinit();

		return ObjectEncoding.AMF3;
	}, set:function ($$$$version)
	{
		if (ByteArray.$$cinit !== undefined) ByteArray.$$cinit();

		//set default parameter values
		var version = $es4.$$coerce($$$$version, uint);

		if (version != ObjectEncoding.AMF3)
		{
			throw $es4.$$primitive(new Error('ByteArray: desired object encoding not supported at this time'));
		}
	}});

	function ByteArray()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof ByteArray) || $$this.$$ByteArray !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], ByteArray) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			ByteArray.$$construct($$this, $$args);
		}
	}

	//construct
	ByteArray.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (ByteArray.$$cinit !== undefined) ByteArray.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$ByteArray', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$ByteArray, '$_properties', ByteArray.prototype.$$v.$_properties);

		//private instance method
		Object.defineProperty($$this.$$ByteArray, 'writeUnsignedByte', ByteArray.prototype.$$v.writeUnsignedByte);

		//private instance method
		Object.defineProperty($$this.$$ByteArray, 'writeUnsignedShort', ByteArray.prototype.$$v.writeUnsignedShort);

		//private instance method
		Object.defineProperty($$this.$$ByteArray, 'internalWriteUTFBytes', ByteArray.prototype.$$v.internalWriteUTFBytes);

		//initialize properties
		ByteArray.$$iinit($$this);

		//call constructor
		if (args !== undefined) ByteArray.$$constructor.apply($$this, args);
	});

	//initializer
	ByteArray.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$ByteArray.$$p.$_properties = undefined;
	
	});

	//constructor
	ByteArray.$$constructor = (function ()
	{
		var $$this = this;
		if ($$this.$$ByteArray.$_properties === undefined)
		{
			$$this.$__properties({});
		}
	});

	return $es4.$$class(ByteArray, {IMPLEMENTS:['flash.utils.IDataInput', 'flash.utils.IDataOutput']}, 'flash.utils::ByteArray');
})();
//flash.utils.ByteArray


//flash.net.NetStreamInfo
$es4.$$package('flash.net').NetStreamInfo = function () { throw new Error('Use of unimplemented class: NetStreamInfo'); }
//flash.net.NetStreamInfo


//flash.events.TouchEvent
$es4.$$package('flash.events').TouchEvent = function () { throw new Error('Use of unimplemented class: TouchEvent'); }
//flash.events.TouchEvent


//flash.events.EventDispatcher
$es4.$$package('flash.events').EventDispatcher = (function ()
{
	//imports
	var DisplayObject;
	var Stage;
	var Event;
	var IEventDispatcher;
	var EventPhase;

	//class pre initializer
	EventDispatcher.$$sinit = (function ()
	{
		EventDispatcher.$$sinit = undefined;

		//initialize imports
		DisplayObject = $es4.$$['flash.display'].DisplayObject;
		Stage = $es4.$$['flash.display'].Stage;
		Event = $es4.$$['flash.events'].Event;
		IEventDispatcher = $es4.$$['flash.events'].IEventDispatcher;
		EventPhase = $es4.$$['flash.events'].EventPhase;

		//set prototype and constructor
		EventDispatcher.prototype = Object.create(Object.prototype);
		Object.defineProperty(EventDispatcher.prototype, "constructor", { value: EventDispatcher, enumerable: false });

		//hold private values
		Object.defineProperty(EventDispatcher.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(EventDispatcher.prototype, '$__properties', {
		get:function ()
		{
			var $$this = this;

			function $__properties($$$$object)
			{
				//set default parameter values
				var object = (0 > arguments.length - 1) ? null : $$$$object;

				if ($$this.$$EventDispatcher.$_properties === undefined)
				{
					object.EventDispatcherScope = {$_listeners:{}};
					object.TLScope = $$this;
					return $$this.$$EventDispatcher.$_properties = object;
				}
				return $$this.$$EventDispatcher.$_properties;
			}

			return $$this.$$EventDispatcher.$$$__properties || ($$this.$$EventDispatcher.$$$__properties = $__properties);
		}});


		//public instance method
		Object.defineProperty(EventDispatcher.prototype, 'addEventListener', {
		get:function ()
		{
			var $$this = this;

			function addEventListener($$$$type, $$$$listener, $$$$useCapture, $$$$priority, $$$$useWeakReference)
			{
				//set default parameter values
				var type = $es4.$$coerce($$$$type, String);
				var listener = $es4.$$coerce($$$$listener, Function);
				var useCapture = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$useCapture, Boolean);
				var priority = (3 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$priority, int);
				var useWeakReference = (4 > arguments.length - 1) ? false : $es4.$$coerce($$$$useWeakReference, Boolean);

				if (useWeakReference)
				{
					trace('Warning: useWeakReference not supported in EventDispatacher addEventListener');
				}
				if (useCapture)
				{
					trace('Warning: useCapture not supported in EventDispatacher addEventListener');
				}
				if (type == Event.ENTER_FRAME)
				{
					Stage.$__addEnterFrameListener($$this, listener);
					return;
				}
				var listenersByType = $$this.$$EventDispatcher.$_properties.EventDispatcherScope.$_listeners;
				var eventObj = {type:type, method:listener, useCapture:useCapture, priority:priority, useWeakReference:useWeakReference};
				if (!(type in listenersByType))
				{
					listenersByType[type] = [eventObj];
				}
				else
				{
					var listeners = $es4.$$coerce(listenersByType[type], Array);
					for (var i = $es4.$$coerce(listeners.length, int); i--;)
					{
						if (listener == listeners[i].method)
						{
							return;
						}
					}
					listenersByType[type].push(eventObj);
				}
				listenersByType[type].sort(eventCompare);

				function eventCompare($$$$item1, $$$$item2) 
				{
					//set default parameter values
					var item1 = $es4.$$coerce($$$$item1, Object);
					var item2 = $es4.$$coerce($$$$item2, Object);

					if (item1.priority > item2.priority)
					{
						return -1;
					}
					else if (item1.priority < item2.priority)
					{
						return 1;
					}
					else
					{
						return 0;
					}
				}
;
			}

			return $$this.$$EventDispatcher.$$addEventListener || ($$this.$$EventDispatcher.$$addEventListener = addEventListener);
		}});


		//public instance method
		Object.defineProperty(EventDispatcher.prototype, 'dispatchEvent', {
		get:function ()
		{
			var $$this = this;

			function dispatchEvent($$$$event)
			{
				//set default parameter values
				var event = $es4.$$coerce($$$$event, Event);

				var properties = event.$__properties().TLScope;
				var listeners = $es4.$$coerce($$this.$$EventDispatcher.$_properties.EventDispatcherScope.$_listeners[event.type], Array);
				var target = $$this.$$EventDispatcher.$_properties.EventDispatcherScope.$_target;
				var bubble = $es4.$$coerce(properties.bubbles && $es4.$$is($$this.$$EventDispatcher.$_properties.EventDispatcherScope.$_target, DisplayObject), Boolean);
				if (!bubble && !listeners)
				{
					return $es4.$$coerce(!properties.isDefaultPrevented(), Boolean);
				}
				var parents = null;
				if (bubble)
				{
					parents = [];
					var currentParent = $es4.$$coerce(target.parent, DisplayObject);
					while (currentParent)
					{
						parents.push(currentParent);
						currentParent = currentParent.parent;
					}
				}
				properties = event.$__properties().EventScope;
				if (listeners && !properties.$_propagationStopped && !properties.$_immediatePropagationStopped)
				{
					event = $es4.$$coerce(properties.$_withTarget(event, target), Event);
					properties = event.$__properties().EventScope;
					properties.$_eventPhase = EventPhase.AT_TARGET;
					properties.$_currentTarget = $$this.$$EventDispatcher.$_properties.EventDispatcherScope.$_target;
					EventDispatcher.$_processListeners(event, listeners);
				}
				if (bubble && !properties.$_propagationStopped && !properties.$_immediatePropagationStopped)
				{
					var index = 0;
					var parentsLength = parents.length;
					while (parentsLength > index)
					{
						var currentTarget = parents[index];
						var currentBubbleListeners = $es4.$$coerce(currentTarget.$__properties().EventDispatcherScope.$_listeners[event.type], Array);
						if (currentBubbleListeners && currentBubbleListeners.length)
						{
							event = $es4.$$coerce(properties.$_withTarget(event, target), Event);
							properties = event.$__properties().EventScope;
							properties.$_eventPhase = EventPhase.BUBBLING_PHASE;
							event.$__properties().EventScope.$_currentTarget = currentTarget;
							EventDispatcher.$_processListeners(event, currentBubbleListeners);
							if (properties.$_propagationStopped || properties.$_immediatePropagationStopped)
							{
								break;
							}
						}
						index++;
					}
				}
				properties = event.$__properties().TLScope;
				return $es4.$$coerce(!properties.isDefaultPrevented(), Boolean);
			}

			return $$this.$$EventDispatcher.$$dispatchEvent || ($$this.$$EventDispatcher.$$dispatchEvent = dispatchEvent);
		}});


		//public instance method
		Object.defineProperty(EventDispatcher.prototype, 'hasEventListener', {
		get:function ()
		{
			var $$this = this;

			function hasEventListener($$$$type)
			{
				//set default parameter values
				var type = $es4.$$coerce($$$$type, String);

				return $es4.$$coerce($$this.$$EventDispatcher.$_properties.EventDispatcherScope.$_listeners[type], Boolean);
			}

			return $$this.$$EventDispatcher.$$hasEventListener || ($$this.$$EventDispatcher.$$hasEventListener = hasEventListener);
		}});


		//public instance method
		Object.defineProperty(EventDispatcher.prototype, 'removeEventListener', {
		get:function ()
		{
			var $$this = this;

			function removeEventListener($$$$type, $$$$listener, $$$$useCapture)
			{
				//set default parameter values
				var type = $es4.$$coerce($$$$type, String);
				var listener = $es4.$$coerce($$$$listener, Function);
				var useCapture = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$useCapture, Boolean);

				if (useCapture)
				{
					trace('Warning: useCapture not supported in EventDispatacher removeEventListener');
				}
				if (type == Event.ENTER_FRAME)
				{
					Stage.$__removeEnterFrameListener($$this, listener);
					return;
				}
				var listenersByType = $$this.$$EventDispatcher.$_properties.EventDispatcherScope.$_listeners;
				var listeners = $es4.$$coerce(listenersByType[type], Array);
				if (!listeners)
				{
					return;
				}
				for (var i = listeners.length; i--;)
				{
					if (listeners[i].method != listener)
					{
						continue;
					}
					if (listeners.length == 1)
					{
						delete listenersByType[type];
					}
					else
					{
						listeners.splice(i, 1);
					}
				}
			}

			return $$this.$$EventDispatcher.$$removeEventListener || ($$this.$$EventDispatcher.$$removeEventListener = removeEventListener);
		}});


		//public instance method
		Object.defineProperty(EventDispatcher.prototype, 'willTrigger', {
		get:function ()
		{
			var $$this = this;

			function willTrigger($$$$type)
			{
				//set default parameter values
				var type = $es4.$$coerce($$$$type, String);

				return $es4.$$coerce($$this.$$EventDispatcher.$_properties.EventDispatcherScope.$_listeners[type], Boolean);
			}

			return $$this.$$EventDispatcher.$$willTrigger || ($$this.$$EventDispatcher.$$willTrigger = willTrigger);
		}});

		//properties
		EventDispatcher.prototype.$$v.$_properties = {
		get:function () { var $$this = this.$$this; return $$this.$$EventDispatcher.$$p.$_properties; },
		set:function (value) { var $$this = this.$$this; $$this.$$EventDispatcher.$$p.$_properties = value }
		};

	});

	//class initializer
	EventDispatcher.$$cinit = (function ()
	{
		EventDispatcher.$$cinit = undefined;
	});

	//private static method
	EventDispatcher.$_processListeners = (function ($$$$event, $$$$listeners)
	{
		if (EventDispatcher.$$cinit !== undefined) EventDispatcher.$$cinit();

		//set default parameter values
		var event = $es4.$$coerce($$$$event, Event);
		var listeners = $es4.$$coerce($$$$listeners, Array);

		listeners = listeners.slice();
		var listenersLength = listeners.length;
		var properties = event.$__properties();
		for (var i = 0; i < listenersLength; i++)
		{
			if (listeners[i].method(event) === false)
			{
				properties.TLScope.stopPropagation();
				properties.TLScope.preventDefault();
			}
			if (properties.EventScope.$_immediatePropagationStopped)
			{
				break;
			}
		}
	});
	function EventDispatcher()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof EventDispatcher) || $$this.$$EventDispatcher !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], EventDispatcher) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			EventDispatcher.$$construct($$this, $$args);
		}
	}

	//construct
	EventDispatcher.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (EventDispatcher.$$cinit !== undefined) EventDispatcher.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$EventDispatcher', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$EventDispatcher, '$_properties', EventDispatcher.prototype.$$v.$_properties);

		//initialize properties
		EventDispatcher.$$iinit($$this);

		//call constructor
		if (args !== undefined) EventDispatcher.$$constructor.apply($$this, args);
	});

	//initializer
	EventDispatcher.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$EventDispatcher.$$p.$_properties = undefined;
	
	});

	//constructor
	EventDispatcher.$$constructor = (function ($$$$target)
	{
		var $$this = this;
		//set default parameter values
		var target = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$target, IEventDispatcher);

		if ($$this.$$EventDispatcher.$_properties === undefined)
		{
			$$this.$__properties({});
		}
		$$this.$$EventDispatcher.$_properties.EventDispatcherScope.$_target = target || $$this;
	});

	return $es4.$$class(EventDispatcher, {IMPLEMENTS:['flash.events.IEventDispatcher']}, 'flash.events::EventDispatcher');
})();
//flash.events.EventDispatcher


//flash.net.LocalConnection
$es4.$$package('flash.net').LocalConnection = function () { throw new Error('Use of unimplemented class: LocalConnection'); }
//flash.net.LocalConnection


//flash.media.StageVideo
$es4.$$package('flash.media').StageVideo = function () { throw new Error('Use of unimplemented class: StageVideo'); }
//flash.media.StageVideo


//flash.display.FrameLabel
$es4.$$package('flash.display').FrameLabel = function () { throw new Error('Use of unimplemented class: FrameLabel'); }
//flash.display.FrameLabel


//flash.display.ShaderData
$es4.$$package('flash.display').ShaderData = function () { throw new Error('Use of unimplemented class: ShaderData'); }
//flash.display.ShaderData


//flash.display.Shape
$es4.$$package('flash.display').Shape = (function ()
{
	//imports
	var Graphics;
	var DisplayObject;

	//class pre initializer
	Shape.$$sinit = (function ()
	{
		Shape.$$sinit = undefined;

		//initialize imports
		Graphics = $es4.$$['flash.display'].Graphics;
		DisplayObject = $es4.$$['flash.display'].DisplayObject;

		//ensure $$sinit is called on super class
		if (DisplayObject.$$sinit !== undefined) DisplayObject.$$sinit();

		//set prototype and constructor
		Shape.prototype = Object.create(DisplayObject.prototype);
		Object.defineProperty(Shape.prototype, "constructor", { value: Shape, enumerable: false });

		//hold private values
		Object.defineProperty(Shape.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(Shape.prototype, '$__properties', {
		get:function ()
		{
			var $$this = this;

			function $__properties($$$$object)
			{
				//set default parameter values
				var object = (0 > arguments.length - 1) ? null : $$$$object;

				if ($$this.$$Shape.$_properties === undefined)
				{
					object = $es4.$$super2($$this, DisplayObject, '$$DisplayObject', '$__properties', 'func', undefined)(object);
					object.ShapeScope = {};
					return $$this.$$Shape.$_properties = object;
				}
				return $$this.$$Shape.$_properties;
			}

			return $$this.$$Shape.$$$__properties || ($$this.$$Shape.$$$__properties = $__properties);
		}});

		Object.defineProperty(Shape.prototype, 'graphics', {get:function ()
		{
			var $$this = this;
			return $es4.$$coerce(($$this.$$Shape.$_properties.ShapeScope.$_graphics) ? $$this.$$Shape.$_properties.ShapeScope.$_graphics : $$this.$$Shape.$_properties.ShapeScope.$_graphics = $es4.$$primitive(new Graphics($$this)), Graphics);
		}});

		//properties
		Shape.prototype.$$v.$_properties = {
		get:function () { var $$this = this.$$this; return $$this.$$Shape.$$p.$_properties; },
		set:function (value) { var $$this = this.$$this; $$this.$$Shape.$$p.$_properties = value }
		};

	});

	//class initializer
	Shape.$$cinit = (function ()
	{
		Shape.$$cinit = undefined;
	});

	function Shape()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof Shape) || $$this.$$Shape !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Shape) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			Shape.$$construct($$this, $$args);
		}
	}

	//construct
	Shape.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (Shape.$$cinit !== undefined) Shape.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$Shape', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$Shape, '$_properties', Shape.prototype.$$v.$_properties);

		//call construct on super
		DisplayObject.$$construct($$this);

		//initialize properties
		Shape.$$iinit($$this);

		//call constructor
		if (args !== undefined) Shape.$$constructor.apply($$this, args);
	});

	//initializer
	Shape.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$Shape.$$p.$_properties = undefined;
	
		//call iinit on super
		DisplayObject.$$iinit($$this);
	});

	//constructor
	Shape.$$constructor = (function ()
	{
		var $$this = this;
		if ($$this.$$Shape.$_properties === undefined)
		{
			$$this.$__properties({});
		}
		DisplayObject.$$constructor.call($$this);
	});

	return $es4.$$class(Shape, {EXTENDS:'flash.display.DisplayObject'}, 'flash.display::Shape');
})();
//flash.display.Shape


//flash.display.PixelSnapping
$es4.$$package('flash.display').PixelSnapping = (function ()
{
	//properties
	var $$j = {};
	PixelSnapping.ALWAYS = "always";
	PixelSnapping.AUTO = "auto";
	PixelSnapping.NEVER = "never";

	//class pre initializer
	PixelSnapping.$$sinit = (function ()
	{
		PixelSnapping.$$sinit = undefined;

		//set prototype and constructor
		PixelSnapping.prototype = Object.create(Object.prototype);
		Object.defineProperty(PixelSnapping.prototype, "constructor", { value: PixelSnapping, enumerable: false });

		//hold private values
		Object.defineProperty(PixelSnapping.prototype, '$$v', {value:{}});
	});

	//class initializer
	PixelSnapping.$$cinit = (function ()
	{
		PixelSnapping.$$cinit = undefined;
	});

	function PixelSnapping()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof PixelSnapping) || $$this.$$PixelSnapping !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], PixelSnapping) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			PixelSnapping.$$construct($$this, $$args);
		}
	}

	//construct
	PixelSnapping.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (PixelSnapping.$$cinit !== undefined) PixelSnapping.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$PixelSnapping', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		PixelSnapping.$$iinit($$this);

		//call constructor
		if (args !== undefined) PixelSnapping.$$constructor.apply($$this, args);
	});

	//initializer
	PixelSnapping.$$iinit = (function ($$this)
	{
	});

	//constructor
	PixelSnapping.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(PixelSnapping, null, 'flash.display::PixelSnapping');
})();
//flash.display.PixelSnapping


//flash.net.NetStreamAppendBytesAction
$es4.$$package('flash.net').NetStreamAppendBytesAction = function () { throw new Error('Use of unimplemented class: NetStreamAppendBytesAction'); }
//flash.net.NetStreamAppendBytesAction


//flash.display3D.Context3DMipFilter
$es4.$$package('flash.display3D').Context3DMipFilter = function () { throw new Error('Use of unimplemented class: Context3DMipFilter'); }
//flash.display3D.Context3DMipFilter


//flash.text.TextFormat
$es4.$$package('flash.text').TextFormat = (function ()
{
	//imports
	var TextFormatAlign;

	//class pre initializer
	TextFormat.$$sinit = (function ()
	{
		TextFormat.$$sinit = undefined;

		//initialize imports
		TextFormatAlign = $es4.$$['flash.text'].TextFormatAlign;

		//set prototype and constructor
		TextFormat.prototype = Object.create(Object.prototype);
		Object.defineProperty(TextFormat.prototype, "constructor", { value: TextFormat, enumerable: false });

		//hold private values
		Object.defineProperty(TextFormat.prototype, '$$v', {value:{}});

		Object.defineProperty(TextFormat.prototype, 'align', {get:function ()
		{
			var $$this = this;
			return $$this.$$TextFormat._align;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			var $$this = this;
			$$this.$$TextFormat._align = value;
		}});
		Object.defineProperty(TextFormat.prototype, 'blockIndent', {get:function ()
		{
			var $$this = this;
			return $$this.$$TextFormat._blockIndent;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			var $$this = this;
			$$this.$$TextFormat._blockIndent = value;
		}});
		Object.defineProperty(TextFormat.prototype, 'bold', {get:function ()
		{
			var $$this = this;
			return $$this.$$TextFormat._bold;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			var $$this = this;
			$$this.$$TextFormat._bold = value;
		}});
		Object.defineProperty(TextFormat.prototype, 'bullet', {get:function ()
		{
			var $$this = this;
			return $$this.$$TextFormat._bullet;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			var $$this = this;
			$$this.$$TextFormat._bullet = value;
		}});
		Object.defineProperty(TextFormat.prototype, 'color', {get:function ()
		{
			var $$this = this;
			return ($$this.$$TextFormat._color == null) ? null : Number($$this.$$TextFormat._color);
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			var $$this = this;
			$$this.$$TextFormat._color = value;
		}});
		Object.defineProperty(TextFormat.prototype, 'display', {get:function ()
		{
			var $$this = this;
			return $$this.$$TextFormat._display;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			var $$this = this;
			$$this.$$TextFormat._display = value;
		}});
		Object.defineProperty(TextFormat.prototype, 'font', {get:function ()
		{
			var $$this = this;
			return $$this.$$TextFormat._font;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			var $$this = this;
			$$this.$$TextFormat._font = value;
		}});
		Object.defineProperty(TextFormat.prototype, 'indent', {get:function ()
		{
			var $$this = this;
			return $$this.$$TextFormat._indent;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			var $$this = this;
			$$this.$$TextFormat._indent = value;
		}});
		Object.defineProperty(TextFormat.prototype, 'italic', {get:function ()
		{
			var $$this = this;
			return $$this.$$TextFormat._italic;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			var $$this = this;
			$$this.$$TextFormat._italic = value;
		}});
		Object.defineProperty(TextFormat.prototype, 'kerning', {get:function ()
		{
			var $$this = this;
			return $$this.$$TextFormat._kerning;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			var $$this = this;
			$$this.$$TextFormat._kerning = value;
		}});
		Object.defineProperty(TextFormat.prototype, 'leading', {get:function ()
		{
			var $$this = this;
			return $$this.$$TextFormat._leading;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			var $$this = this;
			$$this.$$TextFormat._leading = value;
		}});
		Object.defineProperty(TextFormat.prototype, 'leftMargin', {get:function ()
		{
			var $$this = this;
			return $$this.$$TextFormat._leftMargin;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			var $$this = this;
			$$this.$$TextFormat._leftMargin = value;
		}});
		Object.defineProperty(TextFormat.prototype, 'letterSpacing', {get:function ()
		{
			var $$this = this;
			return $$this.$$TextFormat._letterSpacing;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			var $$this = this;
			$$this.$$TextFormat._letterSpacing = value;
		}});
		Object.defineProperty(TextFormat.prototype, 'rightMargin', {get:function ()
		{
			var $$this = this;
			return $$this.$$TextFormat._rightMargin;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			var $$this = this;
			$$this.$$TextFormat._rightMargin = value;
		}});
		Object.defineProperty(TextFormat.prototype, 'size', {get:function ()
		{
			var $$this = this;
			return $$this.$$TextFormat._size;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			var $$this = this;
			$$this.$$TextFormat._size = value;
		}});
		Object.defineProperty(TextFormat.prototype, 'tabStops', {get:function ()
		{
			var $$this = this;
			return $$this.$$TextFormat._tabStops;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Array);

			var $$this = this;
			$$this.$$TextFormat._tabStops = value;
		}});
		Object.defineProperty(TextFormat.prototype, 'target', {get:function ()
		{
			var $$this = this;
			return $$this.$$TextFormat._target;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			var $$this = this;
			$$this.$$TextFormat._target = value;
		}});
		Object.defineProperty(TextFormat.prototype, 'underline', {get:function ()
		{
			var $$this = this;
			return $$this.$$TextFormat._underline;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			var $$this = this;
			$$this.$$TextFormat._underline = value;
		}});
		Object.defineProperty(TextFormat.prototype, 'url', {get:function ()
		{
			var $$this = this;
			return $$this._url;
		}, set:function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			var $$this = this;
			$$this._url = value;
		}});

		//properties
		Object.defineProperty(TextFormat.prototype, '_url', {
		get:function () { var $$this = this; return $$this.$$TextFormat._url; },
		set:function (value) { var $$this = this; $$this.$$TextFormat._url = $es4.$$coerce(value, String); }
		});

		TextFormat.prototype.$$v._align = {
		get:function () { var $$this = this.$$this; return $$this.$$TextFormat.$$p._align; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextFormat.$$p._align = $es4.$$coerce(value, String); }
		};

		TextFormat.prototype.$$v._blockIndent = {
		get:function () { var $$this = this.$$this; return $$this.$$TextFormat.$$p._blockIndent; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextFormat.$$p._blockIndent = $es4.$$coerce(value, Object); }
		};

		TextFormat.prototype.$$v._bold = {
		get:function () { var $$this = this.$$this; return $$this.$$TextFormat.$$p._bold; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextFormat.$$p._bold = $es4.$$coerce(value, Object); }
		};

		TextFormat.prototype.$$v._bullet = {
		get:function () { var $$this = this.$$this; return $$this.$$TextFormat.$$p._bullet; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextFormat.$$p._bullet = $es4.$$coerce(value, Object); }
		};

		TextFormat.prototype.$$v._color = {
		get:function () { var $$this = this.$$this; return $$this.$$TextFormat.$$p._color; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextFormat.$$p._color = $es4.$$coerce(value, Object); }
		};

		TextFormat.prototype.$$v._display = {
		get:function () { var $$this = this.$$this; return $$this.$$TextFormat.$$p._display; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextFormat.$$p._display = $es4.$$coerce(value, String); }
		};

		TextFormat.prototype.$$v._indent = {
		get:function () { var $$this = this.$$this; return $$this.$$TextFormat.$$p._indent; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextFormat.$$p._indent = $es4.$$coerce(value, Object); }
		};

		TextFormat.prototype.$$v._font = {
		get:function () { var $$this = this.$$this; return $$this.$$TextFormat.$$p._font; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextFormat.$$p._font = $es4.$$coerce(value, String); }
		};

		TextFormat.prototype.$$v._italic = {
		get:function () { var $$this = this.$$this; return $$this.$$TextFormat.$$p._italic; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextFormat.$$p._italic = $es4.$$coerce(value, Object); }
		};

		TextFormat.prototype.$$v._leading = {
		get:function () { var $$this = this.$$this; return $$this.$$TextFormat.$$p._leading; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextFormat.$$p._leading = $es4.$$coerce(value, Object); }
		};

		TextFormat.prototype.$$v._kerning = {
		get:function () { var $$this = this.$$this; return $$this.$$TextFormat.$$p._kerning; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextFormat.$$p._kerning = $es4.$$coerce(value, Object); }
		};

		TextFormat.prototype.$$v._leftMargin = {
		get:function () { var $$this = this.$$this; return $$this.$$TextFormat.$$p._leftMargin; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextFormat.$$p._leftMargin = $es4.$$coerce(value, Object); }
		};

		TextFormat.prototype.$$v._letterSpacing = {
		get:function () { var $$this = this.$$this; return $$this.$$TextFormat.$$p._letterSpacing; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextFormat.$$p._letterSpacing = $es4.$$coerce(value, Object); }
		};

		TextFormat.prototype.$$v._rightMargin = {
		get:function () { var $$this = this.$$this; return $$this.$$TextFormat.$$p._rightMargin; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextFormat.$$p._rightMargin = $es4.$$coerce(value, Object); }
		};

		TextFormat.prototype.$$v._size = {
		get:function () { var $$this = this.$$this; return $$this.$$TextFormat.$$p._size; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextFormat.$$p._size = $es4.$$coerce(value, Object); }
		};

		TextFormat.prototype.$$v._tabStops = {
		get:function () { var $$this = this.$$this; return $$this.$$TextFormat.$$p._tabStops; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextFormat.$$p._tabStops = $es4.$$coerce(value, Array); }
		};

		TextFormat.prototype.$$v._target = {
		get:function () { var $$this = this.$$this; return $$this.$$TextFormat.$$p._target; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextFormat.$$p._target = $es4.$$coerce(value, String); }
		};

		TextFormat.prototype.$$v._underline = {
		get:function () { var $$this = this.$$this; return $$this.$$TextFormat.$$p._underline; },
		set:function (value) { var $$this = this.$$this; $$this.$$TextFormat.$$p._underline = $es4.$$coerce(value, Object); }
		};

	});

	//class initializer
	TextFormat.$$cinit = (function ()
	{
		TextFormat.$$cinit = undefined;
	});

	function TextFormat()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof TextFormat) || $$this.$$TextFormat !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], TextFormat) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			TextFormat.$$construct($$this, $$args);
		}
	}

	//construct
	TextFormat.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (TextFormat.$$cinit !== undefined) TextFormat.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$TextFormat', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$TextFormat, '_align', TextFormat.prototype.$$v._align);
		Object.defineProperty($$this.$$TextFormat, '_blockIndent', TextFormat.prototype.$$v._blockIndent);
		Object.defineProperty($$this.$$TextFormat, '_bold', TextFormat.prototype.$$v._bold);
		Object.defineProperty($$this.$$TextFormat, '_bullet', TextFormat.prototype.$$v._bullet);
		Object.defineProperty($$this.$$TextFormat, '_color', TextFormat.prototype.$$v._color);
		Object.defineProperty($$this.$$TextFormat, '_display', TextFormat.prototype.$$v._display);
		Object.defineProperty($$this.$$TextFormat, '_indent', TextFormat.prototype.$$v._indent);
		Object.defineProperty($$this.$$TextFormat, '_font', TextFormat.prototype.$$v._font);
		Object.defineProperty($$this.$$TextFormat, '_italic', TextFormat.prototype.$$v._italic);
		Object.defineProperty($$this.$$TextFormat, '_leading', TextFormat.prototype.$$v._leading);
		Object.defineProperty($$this.$$TextFormat, '_kerning', TextFormat.prototype.$$v._kerning);
		Object.defineProperty($$this.$$TextFormat, '_leftMargin', TextFormat.prototype.$$v._leftMargin);
		Object.defineProperty($$this.$$TextFormat, '_letterSpacing', TextFormat.prototype.$$v._letterSpacing);
		Object.defineProperty($$this.$$TextFormat, '_rightMargin', TextFormat.prototype.$$v._rightMargin);
		Object.defineProperty($$this.$$TextFormat, '_size', TextFormat.prototype.$$v._size);
		Object.defineProperty($$this.$$TextFormat, '_tabStops', TextFormat.prototype.$$v._tabStops);
		Object.defineProperty($$this.$$TextFormat, '_target', TextFormat.prototype.$$v._target);
		Object.defineProperty($$this.$$TextFormat, '_underline', TextFormat.prototype.$$v._underline);

		//initialize properties
		TextFormat.$$iinit($$this);

		//call constructor
		if (args !== undefined) TextFormat.$$constructor.apply($$this, args);
	});

	//initializer
	TextFormat.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$TextFormat._url = $es4.$$coerce(undefined, String);
		$$this.$$TextFormat.$$p._align = $es4.$$coerce(TextFormatAlign.LEFT, String);
		$$this.$$TextFormat.$$p._blockIndent = $es4.$$coerce(undefined, Object);
		$$this.$$TextFormat.$$p._bold = $es4.$$coerce(undefined, Object);
		$$this.$$TextFormat.$$p._bullet = $es4.$$coerce(undefined, Object);
		$$this.$$TextFormat.$$p._color = $es4.$$coerce(undefined, Object);
		$$this.$$TextFormat.$$p._display = $es4.$$coerce(undefined, String);
		$$this.$$TextFormat.$$p._indent = $es4.$$coerce(undefined, Object);
		$$this.$$TextFormat.$$p._font = $es4.$$coerce(undefined, String);
		$$this.$$TextFormat.$$p._italic = $es4.$$coerce(undefined, Object);
		$$this.$$TextFormat.$$p._leading = $es4.$$coerce(undefined, Object);
		$$this.$$TextFormat.$$p._kerning = $es4.$$coerce(undefined, Object);
		$$this.$$TextFormat.$$p._leftMargin = $es4.$$coerce(undefined, Object);
		$$this.$$TextFormat.$$p._letterSpacing = $es4.$$coerce(undefined, Object);
		$$this.$$TextFormat.$$p._rightMargin = $es4.$$coerce(undefined, Object);
		$$this.$$TextFormat.$$p._size = $es4.$$coerce(undefined, Object);
		$$this.$$TextFormat.$$p._tabStops = $es4.$$coerce(undefined, Array);
		$$this.$$TextFormat.$$p._target = $es4.$$coerce(undefined, String);
		$$this.$$TextFormat.$$p._underline = $es4.$$coerce(undefined, Object);
	
	});

	//constructor
	TextFormat.$$constructor = (function ($$$$font, $$$$size, $$$$color, $$$$bold, $$$$italic, $$$$underline, $$$$url, $$$$target, $$$$align, $$$$leftMargin, $$$$rightMargin, $$$$indent, $$$$leading)
	{
		var $$this = this;
		//set default parameter values
		var font = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$font, String);
		var size = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$size, Object);
		var color = (2 > arguments.length - 1) ? null : $es4.$$coerce($$$$color, Object);
		var bold = (3 > arguments.length - 1) ? null : $es4.$$coerce($$$$bold, Object);
		var italic = (4 > arguments.length - 1) ? null : $es4.$$coerce($$$$italic, Object);
		var underline = (5 > arguments.length - 1) ? null : $es4.$$coerce($$$$underline, Object);
		var url = (6 > arguments.length - 1) ? null : $es4.$$coerce($$$$url, String);
		var target = (7 > arguments.length - 1) ? null : $es4.$$coerce($$$$target, String);
		var align = (8 > arguments.length - 1) ? null : $es4.$$coerce($$$$align, String);
		var leftMargin = (9 > arguments.length - 1) ? null : $es4.$$coerce($$$$leftMargin, Object);
		var rightMargin = (10 > arguments.length - 1) ? null : $es4.$$coerce($$$$rightMargin, Object);
		var indent = (11 > arguments.length - 1) ? null : $es4.$$coerce($$$$indent, Object);
		var leading = (12 > arguments.length - 1) ? null : $es4.$$coerce($$$$leading, Object);

		$$this.$$TextFormat._font = font;
		$$this.$$TextFormat._size = size;
		$$this.$$TextFormat._color = color;
		$$this.$$TextFormat._bold = bold;
		$$this.$$TextFormat._italic = italic;
		$$this.$$TextFormat._underline = underline;
		$$this._url = url;
		$$this.$$TextFormat._target = target;
		$$this.$$TextFormat._align = align;
		$$this.$$TextFormat._leftMargin = leftMargin;
		$$this.$$TextFormat._rightMargin = rightMargin;
		$$this.$$TextFormat._indent = indent;
		$$this.$$TextFormat._leading = leading;
	});

	return $es4.$$class(TextFormat, null, 'flash.text::TextFormat');
})();
//flash.text.TextFormat


//flash.globalization.DateTimeFormatter
$es4.$$package('flash.globalization').DateTimeFormatter = function () { throw new Error('Use of unimplemented class: DateTimeFormatter'); }
//flash.globalization.DateTimeFormatter


//flash.ui.Keyboard
$es4.$$package('flash.ui').Keyboard = (function ()
{
	//properties
	var $$j = {};
	Keyboard.A = 65;
	Keyboard.ALTERNATE = 18;
	Keyboard.AUDIO = 0x01000017;
	Keyboard.B = 66;
	Keyboard.BACK = 0x01000016;
	Keyboard.BACKQUOTE = 192;
	Keyboard.BACKSLASH = 220;
	Keyboard.BACKSPACE = 8;
	Keyboard.BLUE = 0x01000003;
	Keyboard.C = 67;
	Keyboard.CAPS_LOCK = 20;
	Keyboard.CHANNEL_DOWN = 0x01000005;
	Keyboard.CHANNEL_UP = 0x01000004;
	Object.defineProperty(Keyboard, 'CharCodeStrings', {
	get:function () { if (Keyboard.$$cinit !== undefined) Keyboard.$$cinit(); return $$j.CharCodeStrings; },
	set:function (value) { if (Keyboard.$$cinit !== undefined) Keyboard.$$cinit(); $$j.CharCodeStrings = $es4.$$coerce(value, Array); }
	});

	Keyboard.COMMA = 188;
	Keyboard.COMMAND = 15;
	Keyboard.CONTROL = 17;
	Keyboard.D = 68;
	Keyboard.DELETE = 46;
	Keyboard.DOWN = 40;
	Keyboard.DVR = 0x01000019;
	Keyboard.E = 69;
	Keyboard.END = 35;
	Keyboard.ENTER = 13;
	Keyboard.EQUAL = 187;
	Keyboard.ESCAPE = 27;
	Keyboard.EXIT = 0x01000015;
	Keyboard.F = 70;
	Keyboard.F1 = 112;
	Keyboard.F10 = 121;
	Keyboard.F11 = 122;
	Keyboard.F12 = 123;
	Keyboard.F13 = 124;
	Keyboard.F14 = 125;
	Keyboard.F15 = 126;
	Keyboard.F2 = 113;
	Keyboard.F3 = 114;
	Keyboard.F4 = 115;
	Keyboard.F5 = 116;
	Keyboard.F6 = 117;
	Keyboard.F7 = 118;
	Keyboard.F8 = 119;
	Keyboard.F9 = 120;
	Keyboard.FAST_FORWARD = 0x0100000A;
	Keyboard.G = 71;
	Keyboard.GREEN = 0x01000001;
	Keyboard.GUIDE = 0x01000014;
	Keyboard.H = 72;
	Keyboard.HELP = 0x0100001D;
	Keyboard.HOME = 36;
	Keyboard.I = 73;
	Keyboard.INFO = 0x01000013;
	Keyboard.INPUT = 0x0100001B;
	Keyboard.INSERT = 45;
	Keyboard.J = 74;
	Keyboard.K = 75;
	Keyboard.KEYNAME_BEGIN = "Begin";
	Keyboard.KEYNAME_BREAK = "Break";
	Keyboard.KEYNAME_CLEARDISPLAY = "ClrDsp";
	Keyboard.KEYNAME_CLEARLINE = "ClrLn";
	Keyboard.KEYNAME_DELETE = "Delete";
	Keyboard.KEYNAME_DELETECHAR = "DelChr";
	Keyboard.KEYNAME_DELETELINE = "DelLn";
	Keyboard.KEYNAME_DOWNARROW = "Down";
	Keyboard.KEYNAME_END = "End";
	Keyboard.KEYNAME_EXECUTE = "Exec";
	Keyboard.KEYNAME_F1 = "F1";
	Keyboard.KEYNAME_F10 = "F10";
	Keyboard.KEYNAME_F11 = "F11";
	Keyboard.KEYNAME_F12 = "F12";
	Keyboard.KEYNAME_F13 = "F13";
	Keyboard.KEYNAME_F14 = "F14";
	Keyboard.KEYNAME_F15 = "F15";
	Keyboard.KEYNAME_F16 = "F16";
	Keyboard.KEYNAME_F17 = "F17";
	Keyboard.KEYNAME_F18 = "F18";
	Keyboard.KEYNAME_F19 = "F19";
	Keyboard.KEYNAME_F2 = "F2";
	Keyboard.KEYNAME_F20 = "F20";
	Keyboard.KEYNAME_F21 = "F21";
	Keyboard.KEYNAME_F22 = "F22";
	Keyboard.KEYNAME_F23 = "F23";
	Keyboard.KEYNAME_F24 = "F24";
	Keyboard.KEYNAME_F25 = "F25";
	Keyboard.KEYNAME_F26 = "F26";
	Keyboard.KEYNAME_F27 = "F27";
	Keyboard.KEYNAME_F28 = "F28";
	Keyboard.KEYNAME_F29 = "F29";
	Keyboard.KEYNAME_F3 = "F3";
	Keyboard.KEYNAME_F30 = "F30";
	Keyboard.KEYNAME_F31 = "F31";
	Keyboard.KEYNAME_F32 = "F32";
	Keyboard.KEYNAME_F33 = "F33";
	Keyboard.KEYNAME_F34 = "F34";
	Keyboard.KEYNAME_F35 = "F35";
	Keyboard.KEYNAME_F4 = "F4";
	Keyboard.KEYNAME_F5 = "F5";
	Keyboard.KEYNAME_F6 = "F6";
	Keyboard.KEYNAME_F7 = "F7";
	Keyboard.KEYNAME_F8 = "F8";
	Keyboard.KEYNAME_F9 = "F9";
	Keyboard.KEYNAME_FIND = "Find";
	Keyboard.KEYNAME_HELP = "Help";
	Keyboard.KEYNAME_HOME = "Home";
	Keyboard.KEYNAME_INSERT = "Insert";
	Keyboard.KEYNAME_INSERTCHAR = "InsChr";
	Keyboard.KEYNAME_INSERTLINE = "InsLn";
	Keyboard.KEYNAME_LEFTARROW = "Left";
	Keyboard.KEYNAME_MENU = "Menu";
	Keyboard.KEYNAME_MODESWITCH = "ModeSw";
	Keyboard.KEYNAME_NEXT = "Next";
	Keyboard.KEYNAME_PAGEDOWN = "PgDn";
	Keyboard.KEYNAME_PAGEUP = "PgUp";
	Keyboard.KEYNAME_PAUSE = "Pause";
	Keyboard.KEYNAME_PREV = "Prev";
	Keyboard.KEYNAME_PRINT = "Print";
	Keyboard.KEYNAME_PRINTSCREEN = "PrntScrn";
	Keyboard.KEYNAME_REDO = "Redo";
	Keyboard.KEYNAME_RESET = "Reset";
	Keyboard.KEYNAME_RIGHTARROW = "Right";
	Keyboard.KEYNAME_SCROLLLOCK = "ScrlLck";
	Keyboard.KEYNAME_SELECT = "Select";
	Keyboard.KEYNAME_STOP = "Stop";
	Keyboard.KEYNAME_SYSREQ = "SysReq";
	Keyboard.KEYNAME_SYSTEM = "Sys";
	Keyboard.KEYNAME_UNDO = "Undo";
	Keyboard.KEYNAME_UPARROW = "Up";
	Keyboard.KEYNAME_USER = "User";
	Keyboard.L = 76;
	Keyboard.LAST = 0x01000011;
	Keyboard.LEFT = 37;
	Keyboard.LEFTBRACKET = 219;
	Keyboard.LIVE = 0x01000010;
	Keyboard.M = 77;
	Keyboard.MASTER_SHELL = 0x0100001E;
	Keyboard.MENU = 0x01000012;
	Keyboard.MINUS = 189;
	Keyboard.N = 78;
	Keyboard.NEXT = 0x0100000E;
	Keyboard.NUMBER_0 = 48;
	Keyboard.NUMBER_1 = 49;
	Keyboard.NUMBER_2 = 50;
	Keyboard.NUMBER_3 = 51;
	Keyboard.NUMBER_4 = 52;
	Keyboard.NUMBER_5 = 53;
	Keyboard.NUMBER_6 = 54;
	Keyboard.NUMBER_7 = 55;
	Keyboard.NUMBER_8 = 56;
	Keyboard.NUMBER_9 = 57;
	Keyboard.NUMPAD = 21;
	Keyboard.NUMPAD_0 = 96;
	Keyboard.NUMPAD_1 = 97;
	Keyboard.NUMPAD_2 = 98;
	Keyboard.NUMPAD_3 = 99;
	Keyboard.NUMPAD_4 = 100;
	Keyboard.NUMPAD_5 = 101;
	Keyboard.NUMPAD_6 = 102;
	Keyboard.NUMPAD_7 = 103;
	Keyboard.NUMPAD_8 = 104;
	Keyboard.NUMPAD_9 = 105;
	Keyboard.NUMPAD_ADD = 107;
	Keyboard.NUMPAD_DECIMAL = 110;
	Keyboard.NUMPAD_DIVIDE = 111;
	Keyboard.NUMPAD_ENTER = 108;
	Keyboard.NUMPAD_MULTIPLY = 106;
	Keyboard.NUMPAD_SUBTRACT = 109;
	Keyboard.O = 79;
	Keyboard.P = 80;
	Keyboard.PAGE_DOWN = 34;
	Keyboard.PAGE_UP = 33;
	Keyboard.PAUSE = 0x01000008;
	Keyboard.PERIOD = 190;
	Keyboard.PLAY = 0x01000007;
	Keyboard.PREVIOUS = 0x0100000F;
	Keyboard.Q = 81;
	Keyboard.QUOTE = 222;
	Keyboard.R = 82;
	Keyboard.RECORD = 0x01000006;
	Keyboard.RED = 0x01000000;
	Keyboard.REWIND = 0x0100000B;
	Keyboard.RIGHT = 39;
	Keyboard.RIGHTBRACKET = 221;
	Keyboard.S = 83;
	Keyboard.SEARCH = 0x0100001F;
	Keyboard.SEMICOLON = 186;
	Keyboard.SETUP = 0x0100001C;
	Keyboard.SHIFT = 16;
	Keyboard.SKIP_BACKWARD = 0x0100000D;
	Keyboard.SKIP_FORWARD = 0x0100000C;
	Keyboard.SLASH = 191;
	Keyboard.SPACE = 32;
	Keyboard.STOP = 0x01000009;
	Keyboard.STRING_BEGIN = "";
	Keyboard.STRING_BREAK = "";
	Keyboard.STRING_CLEARDISPLAY = "";
	Keyboard.STRING_CLEARLINE = "";
	Keyboard.STRING_DELETE = "";
	Keyboard.STRING_DELETECHAR = "";
	Keyboard.STRING_DELETELINE = "";
	Keyboard.STRING_DOWNARROW = "";
	Keyboard.STRING_END = "";
	Keyboard.STRING_EXECUTE = "";
	Keyboard.STRING_F1 = "";
	Keyboard.STRING_F10 = "";
	Keyboard.STRING_F11 = "";
	Keyboard.STRING_F12 = "";
	Keyboard.STRING_F13 = "";
	Keyboard.STRING_F14 = "";
	Keyboard.STRING_F15 = "";
	Keyboard.STRING_F16 = "";
	Keyboard.STRING_F17 = "";
	Keyboard.STRING_F18 = "";
	Keyboard.STRING_F19 = "";
	Keyboard.STRING_F2 = "";
	Keyboard.STRING_F20 = "";
	Keyboard.STRING_F21 = "";
	Keyboard.STRING_F22 = "";
	Keyboard.STRING_F23 = "";
	Keyboard.STRING_F24 = "";
	Keyboard.STRING_F25 = "";
	Keyboard.STRING_F26 = "";
	Keyboard.STRING_F27 = "";
	Keyboard.STRING_F28 = "";
	Keyboard.STRING_F29 = "";
	Keyboard.STRING_F3 = "";
	Keyboard.STRING_F30 = "";
	Keyboard.STRING_F31 = "";
	Keyboard.STRING_F32 = "";
	Keyboard.STRING_F33 = "";
	Keyboard.STRING_F34 = "";
	Keyboard.STRING_F35 = "";
	Keyboard.STRING_F4 = "";
	Keyboard.STRING_F5 = "";
	Keyboard.STRING_F6 = "";
	Keyboard.STRING_F7 = "";
	Keyboard.STRING_F8 = "";
	Keyboard.STRING_F9 = "";
	Keyboard.STRING_FIND = "";
	Keyboard.STRING_HELP = "";
	Keyboard.STRING_HOME = "";
	Keyboard.STRING_INSERT = "";
	Keyboard.STRING_INSERTCHAR = "";
	Keyboard.STRING_INSERTLINE = "";
	Keyboard.STRING_LEFTARROW = "";
	Keyboard.STRING_MENU = "";
	Keyboard.STRING_MODESWITCH = "";
	Keyboard.STRING_NEXT = "";
	Keyboard.STRING_PAGEDOWN = "";
	Keyboard.STRING_PAGEUP = "";
	Keyboard.STRING_PAUSE = "";
	Keyboard.STRING_PREV = "";
	Keyboard.STRING_PRINT = "";
	Keyboard.STRING_PRINTSCREEN = "";
	Keyboard.STRING_REDO = "";
	Keyboard.STRING_RESET = "";
	Keyboard.STRING_RIGHTARROW = "";
	Keyboard.STRING_SCROLLLOCK = "";
	Keyboard.STRING_SELECT = "";
	Keyboard.STRING_STOP = "";
	Keyboard.STRING_SYSREQ = "";
	Keyboard.STRING_SYSTEM = "";
	Keyboard.STRING_UNDO = "";
	Keyboard.STRING_UPARROW = "";
	Keyboard.STRING_USER = "";
	Keyboard.SUBTITLE = 0x01000018;
	Keyboard.T = 84;
	Keyboard.TAB = 9;
	Keyboard.U = 85;
	Keyboard.UP = 38;
	Keyboard.V = 86;
	Keyboard.VOD = 0x0100001A;
	Keyboard.W = 87;
	Keyboard.X = 88;
	Keyboard.Y = 89;
	Keyboard.YELLOW = 0x01000002;
	Keyboard.Z = 90;

	//class pre initializer
	Keyboard.$$sinit = (function ()
	{
		Keyboard.$$sinit = undefined;

		//set prototype and constructor
		Keyboard.prototype = Object.create(Object.prototype);
		Object.defineProperty(Keyboard.prototype, "constructor", { value: Keyboard, enumerable: false });

		//hold private values
		Object.defineProperty(Keyboard.prototype, '$$v', {value:{}});
	});

	//class initializer
	Keyboard.$$cinit = (function ()
	{
		Keyboard.$$cinit = undefined;

		//initialize properties
		$$j.CharCodeStrings = $es4.$$coerce(undefined, Array);
	
	});

	//public static method
	Keyboard.isAccessible = (function ()
	{
		if (Keyboard.$$cinit !== undefined) Keyboard.$$cinit();

		throw $es4.$$primitive(new Error('Keyboard: attempted call to an unimplemented function "isAccessible"'));
	});
	Object.defineProperty(Keyboard, 'capsLock', {get:function ()
	{
		if (Keyboard.$$cinit !== undefined) Keyboard.$$cinit();

		throw $es4.$$primitive(new Error('Keyboard: attempted call to an unimplemented function "capsLock"'));
	}});
	Object.defineProperty(Keyboard, 'hasVirtualKeyboard', {get:function ()
	{
		if (Keyboard.$$cinit !== undefined) Keyboard.$$cinit();

		throw $es4.$$primitive(new Error('Keyboard: attempted call to an unimplemented function "hasVirtualKeyboard"'));
	}});
	Object.defineProperty(Keyboard, 'numLock', {get:function ()
	{
		if (Keyboard.$$cinit !== undefined) Keyboard.$$cinit();

		throw $es4.$$primitive(new Error('Keyboard: attempted call to an unimplemented function "numLock"'));
	}});
	Object.defineProperty(Keyboard, 'physicalKeyboardType', {get:function ()
	{
		if (Keyboard.$$cinit !== undefined) Keyboard.$$cinit();

		throw $es4.$$primitive(new Error('Keyboard: attempted call to an unimplemented function "physicalKeyboardType"'));
	}});

	function Keyboard()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof Keyboard) || $$this.$$Keyboard !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Keyboard) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			Keyboard.$$construct($$this, $$args);
		}
	}

	//construct
	Keyboard.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (Keyboard.$$cinit !== undefined) Keyboard.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$Keyboard', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		Keyboard.$$iinit($$this);

		//call constructor
		if (args !== undefined) Keyboard.$$constructor.apply($$this, args);
	});

	//initializer
	Keyboard.$$iinit = (function ($$this)
	{
	});

	//constructor
	Keyboard.$$constructor = (function ()
	{
		var $$this = this;
		throw $es4.$$primitive(new Error('Keyboard: attempted call to an unimplemented constructor'));
	});

	return $es4.$$class(Keyboard, null, 'flash.ui::Keyboard');
})();
//flash.ui.Keyboard


//flash.display.GraphicsGradientFill
$es4.$$package('flash.display').GraphicsGradientFill = function () { throw new Error('Use of unimplemented class: GraphicsGradientFill'); }
//flash.display.GraphicsGradientFill


//flash.net.FileFilter
$es4.$$package('flash.net').FileFilter = function () { throw new Error('Use of unimplemented class: FileFilter'); }
//flash.net.FileFilter


//flash.text.engine.FontMetrics
$es4.$$package('flash.text.engine').FontMetrics = function () { throw new Error('Use of unimplemented class: FontMetrics'); }
//flash.text.engine.FontMetrics


//flash.globalization.NationalDigitsType
$es4.$$package('flash.globalization').NationalDigitsType = function () { throw new Error('Use of unimplemented class: NationalDigitsType'); }
//flash.globalization.NationalDigitsType


//flash.display3D.Context3DTextureFilter
$es4.$$package('flash.display3D').Context3DTextureFilter = function () { throw new Error('Use of unimplemented class: Context3DTextureFilter'); }
//flash.display3D.Context3DTextureFilter


//flash.display.ActionScriptVersion
$es4.$$package('flash.display').ActionScriptVersion = function () { throw new Error('Use of unimplemented class: ActionScriptVersion'); }
//flash.display.ActionScriptVersion


//flash.media.VideoStreamSettings
$es4.$$package('flash.media').VideoStreamSettings = function () { throw new Error('Use of unimplemented class: VideoStreamSettings'); }
//flash.media.VideoStreamSettings


//flash.globalization.CurrencyParseResult
$es4.$$package('flash.globalization').CurrencyParseResult = function () { throw new Error('Use of unimplemented class: CurrencyParseResult'); }
//flash.globalization.CurrencyParseResult


//flash.display.IGraphicsFill
$es4.$$package('flash.display').IGraphicsFill = (function ()
{
	function IGraphicsFill()
	{
		//handle cast
		return $es4.$$as(arguments[0], IGraphicsFill);
	}
	return $es4.$$interface(IGraphicsFill, null, 'flash.display::IGraphicsFill');
})();
//flash.display.IGraphicsFill


//flash.accessibility.ISearchableText
$es4.$$package('flash.accessibility').ISearchableText = (function ()
{
	function ISearchableText()
	{
		//handle cast
		return $es4.$$as(arguments[0], ISearchableText);
	}
	return $es4.$$interface(ISearchableText, null, 'flash.accessibility::ISearchableText');
})();
//flash.accessibility.ISearchableText


//flash.display.IGraphicsStroke
$es4.$$package('flash.display').IGraphicsStroke = (function ()
{
	function IGraphicsStroke()
	{
		//handle cast
		return $es4.$$as(arguments[0], IGraphicsStroke);
	}
	return $es4.$$interface(IGraphicsStroke, null, 'flash.display::IGraphicsStroke');
})();
//flash.display.IGraphicsStroke


//flash.events.IEventDispatcher
$es4.$$package('flash.events').IEventDispatcher = (function ()
{
	function IEventDispatcher()
	{
		//handle cast
		return $es4.$$as(arguments[0], IEventDispatcher);
	}
	return $es4.$$interface(IEventDispatcher, null, 'flash.events::IEventDispatcher');
})();
//flash.events.IEventDispatcher


//flash.display.IBitmapDrawable
$es4.$$package('flash.display').IBitmapDrawable = (function ()
{
	function IBitmapDrawable()
	{
		//handle cast
		return $es4.$$as(arguments[0], IBitmapDrawable);
	}
	return $es4.$$interface(IBitmapDrawable, null, 'flash.display::IBitmapDrawable');
})();
//flash.display.IBitmapDrawable


//flash.accessibility.ISimpleTextSelection
$es4.$$package('flash.accessibility').ISimpleTextSelection = (function ()
{
	function ISimpleTextSelection()
	{
		//handle cast
		return $es4.$$as(arguments[0], ISimpleTextSelection);
	}
	return $es4.$$interface(ISimpleTextSelection, null, 'flash.accessibility::ISimpleTextSelection');
})();
//flash.accessibility.ISimpleTextSelection


//flash.utils.IDataOutput
$es4.$$package('flash.utils').IDataOutput = (function ()
{
	function IDataOutput()
	{
		//handle cast
		return $es4.$$as(arguments[0], IDataOutput);
	}
	return $es4.$$interface(IDataOutput, null, 'flash.utils::IDataOutput');
})();
//flash.utils.IDataOutput


//flash.display.IGraphicsData
$es4.$$package('flash.display').IGraphicsData = (function ()
{
	function IGraphicsData()
	{
		//handle cast
		return $es4.$$as(arguments[0], IGraphicsData);
	}
	return $es4.$$interface(IGraphicsData, null, 'flash.display::IGraphicsData');
})();
//flash.display.IGraphicsData


//flash.utils.IDataInput
$es4.$$package('flash.utils').IDataInput = (function ()
{
	function IDataInput()
	{
		//handle cast
		return $es4.$$as(arguments[0], IDataInput);
	}
	return $es4.$$interface(IDataInput, null, 'flash.utils::IDataInput');
})();
//flash.utils.IDataInput


//flash.net.IDynamicPropertyWriter
$es4.$$package('flash.net').IDynamicPropertyWriter = (function ()
{
	function IDynamicPropertyWriter()
	{
		//handle cast
		return $es4.$$as(arguments[0], IDynamicPropertyWriter);
	}
	return $es4.$$interface(IDynamicPropertyWriter, null, 'flash.net::IDynamicPropertyWriter');
})();
//flash.net.IDynamicPropertyWriter


//flash.text.ime.IIMEClient
$es4.$$package('flash.text.ime').IIMEClient = (function ()
{
	function IIMEClient()
	{
		//handle cast
		return $es4.$$as(arguments[0], IIMEClient);
	}
	return $es4.$$interface(IIMEClient, null, 'flash.text.ime::IIMEClient');
})();
//flash.text.ime.IIMEClient


//flash.display.IGraphicsPath
$es4.$$package('flash.display').IGraphicsPath = (function ()
{
	function IGraphicsPath()
	{
		//handle cast
		return $es4.$$as(arguments[0], IGraphicsPath);
	}
	return $es4.$$interface(IGraphicsPath, null, 'flash.display::IGraphicsPath');
})();
//flash.display.IGraphicsPath


//flash.utils.escapeMultiByte
$es4.$$package('flash.utils').escapeMultiByte = function () { throw new Error('Use of unimplemented function: escapeMultiByte'); }
//flash.utils.escapeMultiByte


//flash.net.getClassByAlias
$es4.$$package('flash.net').getClassByAlias = function () { throw new Error('Use of unimplemented function: getClassByAlias'); }
//flash.net.getClassByAlias


//flash.sampler.getSavedThis
$es4.$$package('flash.sampler').getSavedThis = function () { throw new Error('Use of unimplemented function: getSavedThis'); }
//flash.sampler.getSavedThis


//flash.utils.setTimeout
$es4.$$package('flash.utils').setTimeout = (function ()
{
	var $$this = setTimeout, $$thisp = setTimeout;
	//function initializer
	setTimeout.$$cinit = (function ()
	{
		setTimeout.$$cinit = undefined;
	});

	function setTimeout($$$$closure, $$$$delay, $$$$rest)
	{
		//initialize function if not initialized
		if (setTimeout.$$cinit !== undefined) setTimeout.$$cinit();

		//set default parameter values
		var closure = $es4.$$coerce($$$$closure, Function);
		var delay = $es4.$$coerce($$$$delay, Number);
		for (var $$i = 2, $$length = arguments.length, rest = new Array($$length - 2); $$i < $$length; $$i += 1) rest[$$i - 2] = arguments[$$i];

		return $es4.$$coerce(global.setTimeout(function () 
{
	closure.apply(this, rest);
}
, delay), uint);
}

	return $es4.$$function (setTimeout);
})();
//flash.utils.setTimeout


//flash.sampler.clearSamples
$es4.$$package('flash.sampler').clearSamples = function () { throw new Error('Use of unimplemented function: clearSamples'); }
//flash.sampler.clearSamples


//flash.sampler.setSamplerCallback
$es4.$$package('flash.sampler').setSamplerCallback = function () { throw new Error('Use of unimplemented function: setSamplerCallback'); }
//flash.sampler.setSamplerCallback


//flash.utils.getDefinitionByName
$es4.$$package('flash.utils').getDefinitionByName = (function ()
{
	var $$this = getDefinitionByName, $$thisp = getDefinitionByName;
	//function initializer
	getDefinitionByName.$$cinit = (function ()
	{
		getDefinitionByName.$$cinit = undefined;
	});

	function getDefinitionByName($$$$name)
	{
		//initialize function if not initialized
		if (getDefinitionByName.$$cinit !== undefined) getDefinitionByName.$$cinit();

		//set default parameter values
		var name = $es4.$$coerce($$$$name, String);


		var parts = name.split('::').join('.').split('.');
		var definitionName = parts.pop();
		var packageName = parts.join('.');
		
		if ($es4.$$[packageName] === undefined || $es4.$$[packageName][definitionName] === undefined) throw new Error('Variable ' + name + ' is not defined.');
		
		return $es4.$$[packageName][definitionName];
	}

	return $es4.$$function (getDefinitionByName);
})();
//flash.utils.getDefinitionByName


//flash.media.scanHardware
$es4.$$package('flash.media').scanHardware = function () { throw new Error('Use of unimplemented function: scanHardware'); }
//flash.media.scanHardware


//flash.sampler.getMasterString
$es4.$$package('flash.sampler').getMasterString = function () { throw new Error('Use of unimplemented function: getMasterString'); }
//flash.sampler.getMasterString


//flash.utils.getQualifiedClassName
$es4.$$package('flash.utils').getQualifiedClassName = (function ()
{
	var $$this = getQualifiedClassName, $$thisp = getQualifiedClassName;
	//function initializer
	getQualifiedClassName.$$cinit = (function ()
	{
		getQualifiedClassName.$$cinit = undefined;
	});

	function getQualifiedClassName($$$$object)
	{
		//initialize function if not initialized
		if (getQualifiedClassName.$$cinit !== undefined) getQualifiedClassName.$$cinit();

		//set default parameter values
		var object = $$$$object;

		if (object.$$isclass !== undefined)
		{
			return $es4.$$coerce(object.$$fullyQualifiedName, String);
		}
		else if (object.$$ismethod !== undefined)
		{
			return 'builtin.as$0::MethodClosure';
		}
		else if (object.constructor.name === 'Number')
		{
			if (object = int(object))
			{
				return 'int';
			}
			else if (object = uint(object))
			{
				return 'uint';
			}
			return 'Number';
		}
		else if (object.constructor.$$isclass !== undefined)
		{
			return $es4.$$coerce(object.constructor.$$fullyQualifiedName, String);
		}
		return $es4.$$coerce(object.constructor.name, String);
}

	return $es4.$$function (getQualifiedClassName);
})();
//flash.utils.getQualifiedClassName


//flash.sampler.sampleInternalAllocs
$es4.$$package('flash.sampler').sampleInternalAllocs = function () { throw new Error('Use of unimplemented function: sampleInternalAllocs'); }
//flash.sampler.sampleInternalAllocs


//flash.sampler.getMemberNames
$es4.$$package('flash.sampler').getMemberNames = function () { throw new Error('Use of unimplemented function: getMemberNames'); }
//flash.sampler.getMemberNames


//flash.sampler.getInvocationCount
$es4.$$package('flash.sampler').getInvocationCount = function () { throw new Error('Use of unimplemented function: getInvocationCount'); }
//flash.sampler.getInvocationCount


//flash.sampler.getSize
$es4.$$package('flash.sampler').getSize = function () { throw new Error('Use of unimplemented function: getSize'); }
//flash.sampler.getSize


//flash.sampler.startSampling
$es4.$$package('flash.sampler').startSampling = function () { throw new Error('Use of unimplemented function: startSampling'); }
//flash.sampler.startSampling


//flash.sampler.getSampleCount
$es4.$$package('flash.sampler').getSampleCount = function () { throw new Error('Use of unimplemented function: getSampleCount'); }
//flash.sampler.getSampleCount


//flash.utils.getTimer
$es4.$$package('flash.utils').getTimer = (function ()
{
	var $$this = getTimer, $$thisp = getTimer;
	//function initializer
	getTimer.$$cinit = (function ()
	{
		getTimer.$$cinit = undefined;
	});

	function getTimer()
	{
		//initialize function if not initialized
		if (getTimer.$$cinit !== undefined) getTimer.$$cinit();

		return $es4.$$coerce($es4.$$primitive(new Date().getTime()) - global.$es4.$$startTime, int);
}

	return $es4.$$function (getTimer);
})();
//flash.utils.getTimer


//flash.utils.clearTimeout
$es4.$$package('flash.utils').clearTimeout = (function ()
{
	var $$this = clearTimeout, $$thisp = clearTimeout;
	//function initializer
	clearTimeout.$$cinit = (function ()
	{
		clearTimeout.$$cinit = undefined;
	});

	function clearTimeout($$$$id)
	{
		//initialize function if not initialized
		if (clearTimeout.$$cinit !== undefined) clearTimeout.$$cinit();

		//set default parameter values
		var id = $es4.$$coerce($$$$id, uint);

		global.clearTimeout(id);
}

	return $es4.$$function (clearTimeout);
})();
//flash.utils.clearTimeout


//flash.profiler.profile
$es4.$$package('flash.profiler').profile = function () { throw new Error('Use of unimplemented function: profile'); }
//flash.profiler.profile


//flash.sampler.getSamples
$es4.$$package('flash.sampler').getSamples = function () { throw new Error('Use of unimplemented function: getSamples'); }
//flash.sampler.getSamples


//flash.utils.describeType
$es4.$$package('flash.utils').describeType = function () { throw new Error('Use of unimplemented function: describeType'); }
//flash.utils.describeType


//flash.net.registerClassAlias
$es4.$$package('flash.net').registerClassAlias = function () { throw new Error('Use of unimplemented function: registerClassAlias'); }
//flash.net.registerClassAlias


//flash.utils.unescapeMultiByte
$es4.$$package('flash.utils').unescapeMultiByte = function () { throw new Error('Use of unimplemented function: unescapeMultiByte'); }
//flash.utils.unescapeMultiByte


//flash.utils.setInterval
$es4.$$package('flash.utils').setInterval = (function ()
{
	var $$this = setInterval, $$thisp = setInterval;
	//function initializer
	setInterval.$$cinit = (function ()
	{
		setInterval.$$cinit = undefined;
	});

	function setInterval($$$$closure, $$$$delay, $$$$rest)
	{
		//initialize function if not initialized
		if (setInterval.$$cinit !== undefined) setInterval.$$cinit();

		//set default parameter values
		var closure = $es4.$$coerce($$$$closure, Function);
		var delay = $es4.$$coerce($$$$delay, Number);
		for (var $$i = 2, $$length = arguments.length, rest = new Array($$length - 2); $$i < $$length; $$i += 1) rest[$$i - 2] = arguments[$$i];

		return $es4.$$coerce(global.setInterval(function () 
{
	closure.apply(this, rest);
}
, delay), uint);
}

	return $es4.$$function (setInterval);
})();
//flash.utils.setInterval


//flash.sampler.getLexicalScopes
$es4.$$package('flash.sampler').getLexicalScopes = function () { throw new Error('Use of unimplemented function: getLexicalScopes'); }
//flash.sampler.getLexicalScopes


//flash.net.sendToURL
$es4.$$package('flash.net').sendToURL = function () { throw new Error('Use of unimplemented function: sendToURL'); }
//flash.net.sendToURL


//flash.sampler.getGetterInvocationCount
$es4.$$package('flash.sampler').getGetterInvocationCount = function () { throw new Error('Use of unimplemented function: getGetterInvocationCount'); }
//flash.sampler.getGetterInvocationCount


//flash.profiler.showRedrawRegions
$es4.$$package('flash.profiler').showRedrawRegions = function () { throw new Error('Use of unimplemented function: showRedrawRegions'); }
//flash.profiler.showRedrawRegions


//flash.sampler.stopSampling
$es4.$$package('flash.sampler').stopSampling = function () { throw new Error('Use of unimplemented function: stopSampling'); }
//flash.sampler.stopSampling


//flash.debugger.enterDebugger
$es4.$$package('flash.debugger').enterDebugger = (function ()
{
	var $$this = enterDebugger, $$thisp = enterDebugger;
	//function initializer
	enterDebugger.$$cinit = (function ()
	{
		enterDebugger.$$cinit = undefined;
	});

	function enterDebugger()
	{
		//initialize function if not initialized
		if (enterDebugger.$$cinit !== undefined) enterDebugger.$$cinit();


		debugger;
	}

	return $es4.$$function (enterDebugger);
})();
//flash.debugger.enterDebugger


//flash.utils.clearInterval
$es4.$$package('flash.utils').clearInterval = (function ()
{
	var $$this = clearInterval, $$thisp = clearInterval;
	//function initializer
	clearInterval.$$cinit = (function ()
	{
		clearInterval.$$cinit = undefined;
	});

	function clearInterval($$$$id)
	{
		//initialize function if not initialized
		if (clearInterval.$$cinit !== undefined) clearInterval.$$cinit();

		//set default parameter values
		var id = $es4.$$coerce($$$$id, uint);

		global.clearInterval(id);
}

	return $es4.$$function (clearInterval);
})();
//flash.utils.clearInterval


//flash.sampler.pauseSampling
$es4.$$package('flash.sampler').pauseSampling = function () { throw new Error('Use of unimplemented function: pauseSampling'); }
//flash.sampler.pauseSampling


//flash.net.navigateToURL
$es4.$$package('flash.net').navigateToURL = (function ()
{
	var $$this = navigateToURL, $$thisp = navigateToURL;
	//imports
	var URLRequest;

	//function initializer
	navigateToURL.$$cinit = (function ()
	{
		navigateToURL.$$cinit = undefined;

		//initialize imports
		URLRequest = $es4.$$['flash.net'].URLRequest;
	});

	function navigateToURL($$$$request, $$$$name)
	{
		//initialize function if not initialized
		if (navigateToURL.$$cinit !== undefined) navigateToURL.$$cinit();

		//set default parameter values
		var request = $es4.$$coerce($$$$request, URLRequest);
		var name = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$name, String);

		window.open(request.url, name);
}

	return $es4.$$function (navigateToURL);
})();
//flash.net.navigateToURL


//flash.utils.getQualifiedSuperclassName
$es4.$$package('flash.utils').getQualifiedSuperclassName = (function ()
{
	var $$this = getQualifiedSuperclassName, $$thisp = getQualifiedSuperclassName;
	//imports
	var getQualifiedClassName;

	//function initializer
	getQualifiedSuperclassName.$$cinit = (function ()
	{
		getQualifiedSuperclassName.$$cinit = undefined;

		//initialize imports
		getQualifiedClassName = $es4.$$['flash.utils'].getQualifiedClassName;
	});

	function getQualifiedSuperclassName($$$$object)
	{
		//initialize function if not initialized
		if (getQualifiedSuperclassName.$$cinit !== undefined) getQualifiedSuperclassName.$$cinit();

		//set default parameter values
		var object = $$$$object;

		if (object == Object)
		{
			return null;
		}
		if (object.$$isclass !== undefined)
		{
			if (object === Array)
			{
				return 'Object';
			}
			return getQualifiedClassName(object.__proto__);
		}
		else if (object.$$ismethod !== undefined)
		{
			return 'Function';
		}
		else if (object.constructor.$$isclass !== undefined)
		{
			return getQualifiedClassName(object.constructor.__proto__);
		}
		return $es4.$$coerce(object.constructor.__proto__.name, String);
}

	return $es4.$$function (getQualifiedSuperclassName);
})();
//flash.utils.getQualifiedSuperclassName


//flash.system.fscommand
$es4.$$package('flash.system').fscommand = function () { throw new Error('Use of unimplemented function: fscommand'); }
//flash.system.fscommand


//flash.sampler.getSetterInvocationCount
$es4.$$package('flash.sampler').getSetterInvocationCount = function () { throw new Error('Use of unimplemented function: getSetterInvocationCount'); }
//flash.sampler.getSetterInvocationCount


//flash.sampler.isGetterSetter
$es4.$$package('flash.sampler').isGetterSetter = function () { throw new Error('Use of unimplemented function: isGetterSetter'); }
//flash.sampler.isGetterSetter


$es4.$$['flash.display'].IGraphicsFill.$$pcinit();

$es4.$$['flash.accessibility'].ISearchableText.$$pcinit();

$es4.$$['flash.display'].IGraphicsStroke.$$pcinit();

$es4.$$['flash.events'].IEventDispatcher.$$pcinit();

$es4.$$['flash.display'].IBitmapDrawable.$$pcinit();

$es4.$$['flash.accessibility'].ISimpleTextSelection.$$pcinit();

$es4.$$['flash.utils'].IDataOutput.$$pcinit();

$es4.$$['flash.display'].IGraphicsData.$$pcinit();

$es4.$$['flash.utils'].IDataInput.$$pcinit();

$es4.$$['flash.net'].IDynamicPropertyWriter.$$pcinit();

$es4.$$['flash.text.ime'].IIMEClient.$$pcinit();

$es4.$$['flash.display'].IGraphicsPath.$$pcinit();

$es4.$$['flash.display'].StageScaleMode.$$pcinit();

$es4.$$['flash.text'].StyleSheet.$$pcinit();

$es4.$$['flash.media'].SoundChannel.$$pcinit();

$es4.$$['flash.geom'].Point.$$pcinit();

$es4.$$['flash.utils'].Dictionary.$$pcinit();

$es4.$$['flash.text'].TextFieldType.$$pcinit();

$es4.$$[''].XMLList.$$pcinit();

$es4.$$['flash.errors'].IOError.$$pcinit();

$es4.$$['flash.utils'].Endian.$$pcinit();

$es4.$$['flash.net'].NetConnection.$$pcinit();

$es4.$$['flash.text'].TextFormatAlign.$$pcinit();

$es4.$$['flash.geom'].ColorTransform.$$pcinit();

$es4.$$['flash.accessibility'].Accessibility.$$pcinit();

$es4.$$['flash.display'].StageDisplayState.$$pcinit();

$es4.$$['flash.display'].Sprite.$$pcinit();

$es4.$$['flash.events'].SampleDataEvent.$$pcinit();

$es4.$$['flash.net'].SharedObjectFlushStatus.$$pcinit();

$es4.$$['flash.net'].XMLSocket.$$pcinit();

$es4.$$['flash.display'].DisplayObjectContainer.$$pcinit();

$es4.$$['flash.events'].KeyboardEvent.$$pcinit();

$es4.$$['flash.net'].NetStream.$$pcinit();

$es4.$$['flash.geom'].Matrix.$$pcinit();

$es4.$$['flash.net'].SharedObject.$$pcinit();

$es4.$$['flash.display'].Graphics.$$pcinit();

$es4.$$['flash.net'].URLLoader.$$pcinit();

$es4.$$['flash.display3D'].Context3DCompareMode.$$pcinit();

$es4.$$['flash.system'].System.$$pcinit();

$es4.$$['flash.xml'].XMLNodeType.$$pcinit();

$es4.$$['flash.display'].SimpleButton.$$pcinit();

$es4.$$['fl.controls'].ScrollBarDirection.$$pcinit();

$es4.$$['flash.system'].LoaderContext.$$pcinit();

$es4.$$['browser'].Browser.$$pcinit();

$es4.$$['flash.text'].AntiAliasType.$$pcinit();

$es4.$$['flash.text'].FontType.$$pcinit();

$es4.$$['flash.events'].SecurityErrorEvent.$$pcinit();

$es4.$$['flash.utils'].Timer.$$pcinit();

$es4.$$['flash.display'].StageQuality.$$pcinit();

$es4.$$['flash.display'].InteractiveObject.$$pcinit();

$es4.$$['flash.events'].StatusEvent.$$pcinit();

$es4.$$['flash.text'].Font.$$pcinit();

$es4.$$['flash.display'].LoaderInfo.$$pcinit();

$es4.$$['flash.events'].MouseEvent.$$pcinit();

$es4.$$[''].XML.$$pcinit();

$es4.$$['flash.net'].URLVariables.$$pcinit();

$es4.$$['flash.display'].Stage.$$pcinit();

$es4.$$['flash.events'].TextEvent.$$pcinit();

$es4.$$['flash.display'].Bitmap.$$pcinit();

$es4.$$['flash.ui'].MouseCursor.$$pcinit();

$es4.$$['flash.media'].Sound.$$pcinit();

$es4.$$['flash.net'].Socket.$$pcinit();

$es4.$$['flash.display'].StageAlign.$$pcinit();

$es4.$$['flash.display'].CapsStyle.$$pcinit();

$es4.$$['flash.events'].TimerEvent.$$pcinit();

$es4.$$['flash.events'].AsyncErrorEvent.$$pcinit();

$es4.$$['flash.events'].Event.$$pcinit();

$es4.$$['flash.printing'].PrintJobOptions.$$pcinit();

$es4.$$['flash.events'].FocusEvent.$$pcinit();

$es4.$$['flash.display'].BitmapData.$$pcinit();

$es4.$$['flash.events'].IOErrorEvent.$$pcinit();

$es4.$$['flash.net'].URLLoaderDataFormat.$$pcinit();

$es4.$$['flash.display'].DisplayObject.$$pcinit();

$es4.$$['flash.events'].NetStatusEvent.$$pcinit();

$es4.$$['flash.display'].ColorCorrection.$$pcinit();

$es4.$$['flash.display'].ColorCorrectionSupport.$$pcinit();

$es4.$$['flash.display'].Loader.$$pcinit();

$es4.$$['flash.text'].TextField.$$pcinit();

$es4.$$['flash.system'].SecurityDomain.$$pcinit();

$es4.$$['flash.media'].SoundTransform.$$pcinit();

$es4.$$['flash.geom'].Transform.$$pcinit();

$es4.$$['flash.xml'].XMLNode.$$pcinit();

$es4.$$['flash.ui'].Mouse.$$pcinit();

$es4.$$['flash.net'].ObjectEncoding.$$pcinit();

$es4.$$['flash.events'].UncaughtErrorEvents.$$pcinit();

$es4.$$['flash.system'].ApplicationDomain.$$pcinit();

$es4.$$['flash.media'].VideoStatus.$$pcinit();

$es4.$$['flash.events'].ErrorEvent.$$pcinit();

$es4.$$['flash.printing'].PrintJob.$$pcinit();

$es4.$$['flash.xml'].XMLDocument.$$pcinit();

$es4.$$['flash.text'].TextFieldAutoSize.$$pcinit();

$es4.$$['flash.utils'].Proxy.$$pcinit();

$es4.$$['flash.geom'].Rectangle.$$pcinit();

$es4.$$['flash.printing'].PrintJobOrientation.$$pcinit();

$es4.$$['player'].Player.$$pcinit();

$es4.$$['flash.media'].SoundCodec.$$pcinit();

$es4.$$['flash.events'].HTTPStatusEvent.$$pcinit();

$es4.$$['flash.external'].ExternalInterface.$$pcinit();

$es4.$$['flash.events'].ProgressEvent.$$pcinit();

$es4.$$['flash.net'].URLRequest.$$pcinit();

$es4.$$['flash.media'].Video.$$pcinit();

$es4.$$['flash.net'].URLRequestMethod.$$pcinit();

$es4.$$['flash.system'].Capabilities.$$pcinit();

$es4.$$['flash.events'].EventPhase.$$pcinit();

$es4.$$['flash.display'].MovieClip.$$pcinit();

$es4.$$['flash.text'].FontStyle.$$pcinit();

$es4.$$['flash.accessibility'].AccessibilityProperties.$$pcinit();

$es4.$$['flash.media'].Microphone.$$pcinit();

$es4.$$['flash.utils'].ByteArray.$$pcinit();

$es4.$$['flash.events'].EventDispatcher.$$pcinit();

$es4.$$['flash.display'].Shape.$$pcinit();

$es4.$$['flash.display'].PixelSnapping.$$pcinit();

$es4.$$['flash.text'].TextFormat.$$pcinit();

$es4.$$['flash.ui'].Keyboard.$$pcinit();

if ($es4.$$['flash.display'].IGraphicsFill.$$sinit !== undefined) $es4.$$['flash.display'].IGraphicsFill.$$sinit();

if ($es4.$$['flash.accessibility'].ISearchableText.$$sinit !== undefined) $es4.$$['flash.accessibility'].ISearchableText.$$sinit();

if ($es4.$$['flash.display'].IGraphicsStroke.$$sinit !== undefined) $es4.$$['flash.display'].IGraphicsStroke.$$sinit();

if ($es4.$$['flash.events'].IEventDispatcher.$$sinit !== undefined) $es4.$$['flash.events'].IEventDispatcher.$$sinit();

if ($es4.$$['flash.display'].IBitmapDrawable.$$sinit !== undefined) $es4.$$['flash.display'].IBitmapDrawable.$$sinit();

if ($es4.$$['flash.accessibility'].ISimpleTextSelection.$$sinit !== undefined) $es4.$$['flash.accessibility'].ISimpleTextSelection.$$sinit();

if ($es4.$$['flash.utils'].IDataOutput.$$sinit !== undefined) $es4.$$['flash.utils'].IDataOutput.$$sinit();

if ($es4.$$['flash.display'].IGraphicsData.$$sinit !== undefined) $es4.$$['flash.display'].IGraphicsData.$$sinit();

if ($es4.$$['flash.utils'].IDataInput.$$sinit !== undefined) $es4.$$['flash.utils'].IDataInput.$$sinit();

if ($es4.$$['flash.net'].IDynamicPropertyWriter.$$sinit !== undefined) $es4.$$['flash.net'].IDynamicPropertyWriter.$$sinit();

if ($es4.$$['flash.text.ime'].IIMEClient.$$sinit !== undefined) $es4.$$['flash.text.ime'].IIMEClient.$$sinit();

if ($es4.$$['flash.display'].IGraphicsPath.$$sinit !== undefined) $es4.$$['flash.display'].IGraphicsPath.$$sinit();

if ($es4.$$['flash.display'].StageScaleMode.$$sinit !== undefined) $es4.$$['flash.display'].StageScaleMode.$$sinit();

if ($es4.$$['flash.text'].StyleSheet.$$sinit !== undefined) $es4.$$['flash.text'].StyleSheet.$$sinit();

if ($es4.$$['flash.media'].SoundChannel.$$sinit !== undefined) $es4.$$['flash.media'].SoundChannel.$$sinit();

if ($es4.$$['flash.geom'].Point.$$sinit !== undefined) $es4.$$['flash.geom'].Point.$$sinit();

if ($es4.$$['flash.utils'].Dictionary.$$sinit !== undefined) $es4.$$['flash.utils'].Dictionary.$$sinit();

if ($es4.$$['flash.text'].TextFieldType.$$sinit !== undefined) $es4.$$['flash.text'].TextFieldType.$$sinit();

if ($es4.$$[''].XMLList.$$sinit !== undefined) $es4.$$[''].XMLList.$$sinit();

if ($es4.$$['flash.errors'].IOError.$$sinit !== undefined) $es4.$$['flash.errors'].IOError.$$sinit();

if ($es4.$$['flash.utils'].Endian.$$sinit !== undefined) $es4.$$['flash.utils'].Endian.$$sinit();

if ($es4.$$['flash.net'].NetConnection.$$sinit !== undefined) $es4.$$['flash.net'].NetConnection.$$sinit();

if ($es4.$$['flash.text'].TextFormatAlign.$$sinit !== undefined) $es4.$$['flash.text'].TextFormatAlign.$$sinit();

if ($es4.$$['flash.geom'].ColorTransform.$$sinit !== undefined) $es4.$$['flash.geom'].ColorTransform.$$sinit();

if ($es4.$$['flash.accessibility'].Accessibility.$$sinit !== undefined) $es4.$$['flash.accessibility'].Accessibility.$$sinit();

if ($es4.$$['flash.display'].StageDisplayState.$$sinit !== undefined) $es4.$$['flash.display'].StageDisplayState.$$sinit();

if ($es4.$$['flash.display'].Sprite.$$sinit !== undefined) $es4.$$['flash.display'].Sprite.$$sinit();

if ($es4.$$['flash.events'].SampleDataEvent.$$sinit !== undefined) $es4.$$['flash.events'].SampleDataEvent.$$sinit();

if ($es4.$$['flash.net'].SharedObjectFlushStatus.$$sinit !== undefined) $es4.$$['flash.net'].SharedObjectFlushStatus.$$sinit();

if ($es4.$$['flash.net'].XMLSocket.$$sinit !== undefined) $es4.$$['flash.net'].XMLSocket.$$sinit();

if ($es4.$$['flash.display'].DisplayObjectContainer.$$sinit !== undefined) $es4.$$['flash.display'].DisplayObjectContainer.$$sinit();

if ($es4.$$['flash.events'].KeyboardEvent.$$sinit !== undefined) $es4.$$['flash.events'].KeyboardEvent.$$sinit();

if ($es4.$$['flash.net'].NetStream.$$sinit !== undefined) $es4.$$['flash.net'].NetStream.$$sinit();

if ($es4.$$['flash.geom'].Matrix.$$sinit !== undefined) $es4.$$['flash.geom'].Matrix.$$sinit();

if ($es4.$$['flash.net'].SharedObject.$$sinit !== undefined) $es4.$$['flash.net'].SharedObject.$$sinit();

if ($es4.$$['flash.display'].Graphics.$$sinit !== undefined) $es4.$$['flash.display'].Graphics.$$sinit();

if ($es4.$$['flash.net'].URLLoader.$$sinit !== undefined) $es4.$$['flash.net'].URLLoader.$$sinit();

if ($es4.$$['flash.display3D'].Context3DCompareMode.$$sinit !== undefined) $es4.$$['flash.display3D'].Context3DCompareMode.$$sinit();

if ($es4.$$['flash.system'].System.$$sinit !== undefined) $es4.$$['flash.system'].System.$$sinit();

if ($es4.$$['flash.xml'].XMLNodeType.$$sinit !== undefined) $es4.$$['flash.xml'].XMLNodeType.$$sinit();

if ($es4.$$['flash.display'].SimpleButton.$$sinit !== undefined) $es4.$$['flash.display'].SimpleButton.$$sinit();

if ($es4.$$['fl.controls'].ScrollBarDirection.$$sinit !== undefined) $es4.$$['fl.controls'].ScrollBarDirection.$$sinit();

if ($es4.$$['flash.system'].LoaderContext.$$sinit !== undefined) $es4.$$['flash.system'].LoaderContext.$$sinit();

if ($es4.$$['browser'].Browser.$$sinit !== undefined) $es4.$$['browser'].Browser.$$sinit();

if ($es4.$$['flash.text'].AntiAliasType.$$sinit !== undefined) $es4.$$['flash.text'].AntiAliasType.$$sinit();

if ($es4.$$['flash.text'].FontType.$$sinit !== undefined) $es4.$$['flash.text'].FontType.$$sinit();

if ($es4.$$['flash.events'].SecurityErrorEvent.$$sinit !== undefined) $es4.$$['flash.events'].SecurityErrorEvent.$$sinit();

if ($es4.$$['flash.utils'].Timer.$$sinit !== undefined) $es4.$$['flash.utils'].Timer.$$sinit();

if ($es4.$$['flash.display'].StageQuality.$$sinit !== undefined) $es4.$$['flash.display'].StageQuality.$$sinit();

if ($es4.$$['flash.display'].InteractiveObject.$$sinit !== undefined) $es4.$$['flash.display'].InteractiveObject.$$sinit();

if ($es4.$$['flash.events'].StatusEvent.$$sinit !== undefined) $es4.$$['flash.events'].StatusEvent.$$sinit();

if ($es4.$$['flash.text'].Font.$$sinit !== undefined) $es4.$$['flash.text'].Font.$$sinit();

if ($es4.$$['flash.display'].LoaderInfo.$$sinit !== undefined) $es4.$$['flash.display'].LoaderInfo.$$sinit();

if ($es4.$$['flash.events'].MouseEvent.$$sinit !== undefined) $es4.$$['flash.events'].MouseEvent.$$sinit();

if ($es4.$$[''].XML.$$sinit !== undefined) $es4.$$[''].XML.$$sinit();

if ($es4.$$['flash.net'].URLVariables.$$sinit !== undefined) $es4.$$['flash.net'].URLVariables.$$sinit();

if ($es4.$$['flash.display'].Stage.$$sinit !== undefined) $es4.$$['flash.display'].Stage.$$sinit();

if ($es4.$$['flash.events'].TextEvent.$$sinit !== undefined) $es4.$$['flash.events'].TextEvent.$$sinit();

if ($es4.$$['flash.display'].Bitmap.$$sinit !== undefined) $es4.$$['flash.display'].Bitmap.$$sinit();

if ($es4.$$['flash.ui'].MouseCursor.$$sinit !== undefined) $es4.$$['flash.ui'].MouseCursor.$$sinit();

if ($es4.$$['flash.media'].Sound.$$sinit !== undefined) $es4.$$['flash.media'].Sound.$$sinit();

if ($es4.$$['flash.net'].Socket.$$sinit !== undefined) $es4.$$['flash.net'].Socket.$$sinit();

if ($es4.$$['flash.display'].StageAlign.$$sinit !== undefined) $es4.$$['flash.display'].StageAlign.$$sinit();

if ($es4.$$['flash.display'].CapsStyle.$$sinit !== undefined) $es4.$$['flash.display'].CapsStyle.$$sinit();

if ($es4.$$['flash.events'].TimerEvent.$$sinit !== undefined) $es4.$$['flash.events'].TimerEvent.$$sinit();

if ($es4.$$['flash.events'].AsyncErrorEvent.$$sinit !== undefined) $es4.$$['flash.events'].AsyncErrorEvent.$$sinit();

if ($es4.$$['flash.events'].Event.$$sinit !== undefined) $es4.$$['flash.events'].Event.$$sinit();

if ($es4.$$['flash.printing'].PrintJobOptions.$$sinit !== undefined) $es4.$$['flash.printing'].PrintJobOptions.$$sinit();

if ($es4.$$['flash.events'].FocusEvent.$$sinit !== undefined) $es4.$$['flash.events'].FocusEvent.$$sinit();

if ($es4.$$['flash.display'].BitmapData.$$sinit !== undefined) $es4.$$['flash.display'].BitmapData.$$sinit();

if ($es4.$$['flash.events'].IOErrorEvent.$$sinit !== undefined) $es4.$$['flash.events'].IOErrorEvent.$$sinit();

if ($es4.$$['flash.net'].URLLoaderDataFormat.$$sinit !== undefined) $es4.$$['flash.net'].URLLoaderDataFormat.$$sinit();

if ($es4.$$['flash.display'].DisplayObject.$$sinit !== undefined) $es4.$$['flash.display'].DisplayObject.$$sinit();

if ($es4.$$['flash.events'].NetStatusEvent.$$sinit !== undefined) $es4.$$['flash.events'].NetStatusEvent.$$sinit();

if ($es4.$$['flash.display'].ColorCorrection.$$sinit !== undefined) $es4.$$['flash.display'].ColorCorrection.$$sinit();

if ($es4.$$['flash.display'].ColorCorrectionSupport.$$sinit !== undefined) $es4.$$['flash.display'].ColorCorrectionSupport.$$sinit();

if ($es4.$$['flash.display'].Loader.$$sinit !== undefined) $es4.$$['flash.display'].Loader.$$sinit();

if ($es4.$$['flash.text'].TextField.$$sinit !== undefined) $es4.$$['flash.text'].TextField.$$sinit();

if ($es4.$$['flash.system'].SecurityDomain.$$sinit !== undefined) $es4.$$['flash.system'].SecurityDomain.$$sinit();

if ($es4.$$['flash.media'].SoundTransform.$$sinit !== undefined) $es4.$$['flash.media'].SoundTransform.$$sinit();

if ($es4.$$['flash.geom'].Transform.$$sinit !== undefined) $es4.$$['flash.geom'].Transform.$$sinit();

if ($es4.$$['flash.xml'].XMLNode.$$sinit !== undefined) $es4.$$['flash.xml'].XMLNode.$$sinit();

if ($es4.$$['flash.ui'].Mouse.$$sinit !== undefined) $es4.$$['flash.ui'].Mouse.$$sinit();

if ($es4.$$['flash.net'].ObjectEncoding.$$sinit !== undefined) $es4.$$['flash.net'].ObjectEncoding.$$sinit();

if ($es4.$$['flash.events'].UncaughtErrorEvents.$$sinit !== undefined) $es4.$$['flash.events'].UncaughtErrorEvents.$$sinit();

if ($es4.$$['flash.system'].ApplicationDomain.$$sinit !== undefined) $es4.$$['flash.system'].ApplicationDomain.$$sinit();

if ($es4.$$['flash.media'].VideoStatus.$$sinit !== undefined) $es4.$$['flash.media'].VideoStatus.$$sinit();

if ($es4.$$['flash.events'].ErrorEvent.$$sinit !== undefined) $es4.$$['flash.events'].ErrorEvent.$$sinit();

if ($es4.$$['flash.printing'].PrintJob.$$sinit !== undefined) $es4.$$['flash.printing'].PrintJob.$$sinit();

if ($es4.$$['flash.xml'].XMLDocument.$$sinit !== undefined) $es4.$$['flash.xml'].XMLDocument.$$sinit();

if ($es4.$$['flash.text'].TextFieldAutoSize.$$sinit !== undefined) $es4.$$['flash.text'].TextFieldAutoSize.$$sinit();

if ($es4.$$['flash.utils'].Proxy.$$sinit !== undefined) $es4.$$['flash.utils'].Proxy.$$sinit();

if ($es4.$$['flash.geom'].Rectangle.$$sinit !== undefined) $es4.$$['flash.geom'].Rectangle.$$sinit();

if ($es4.$$['flash.printing'].PrintJobOrientation.$$sinit !== undefined) $es4.$$['flash.printing'].PrintJobOrientation.$$sinit();

if ($es4.$$['player'].Player.$$sinit !== undefined) $es4.$$['player'].Player.$$sinit();

if ($es4.$$['flash.media'].SoundCodec.$$sinit !== undefined) $es4.$$['flash.media'].SoundCodec.$$sinit();

if ($es4.$$['flash.events'].HTTPStatusEvent.$$sinit !== undefined) $es4.$$['flash.events'].HTTPStatusEvent.$$sinit();

if ($es4.$$['flash.external'].ExternalInterface.$$sinit !== undefined) $es4.$$['flash.external'].ExternalInterface.$$sinit();

if ($es4.$$['flash.events'].ProgressEvent.$$sinit !== undefined) $es4.$$['flash.events'].ProgressEvent.$$sinit();

if ($es4.$$['flash.net'].URLRequest.$$sinit !== undefined) $es4.$$['flash.net'].URLRequest.$$sinit();

if ($es4.$$['flash.media'].Video.$$sinit !== undefined) $es4.$$['flash.media'].Video.$$sinit();

if ($es4.$$['flash.net'].URLRequestMethod.$$sinit !== undefined) $es4.$$['flash.net'].URLRequestMethod.$$sinit();

if ($es4.$$['flash.system'].Capabilities.$$sinit !== undefined) $es4.$$['flash.system'].Capabilities.$$sinit();

if ($es4.$$['flash.events'].EventPhase.$$sinit !== undefined) $es4.$$['flash.events'].EventPhase.$$sinit();

if ($es4.$$['flash.display'].MovieClip.$$sinit !== undefined) $es4.$$['flash.display'].MovieClip.$$sinit();

if ($es4.$$['flash.text'].FontStyle.$$sinit !== undefined) $es4.$$['flash.text'].FontStyle.$$sinit();

if ($es4.$$['flash.accessibility'].AccessibilityProperties.$$sinit !== undefined) $es4.$$['flash.accessibility'].AccessibilityProperties.$$sinit();

if ($es4.$$['flash.media'].Microphone.$$sinit !== undefined) $es4.$$['flash.media'].Microphone.$$sinit();

if ($es4.$$['flash.utils'].ByteArray.$$sinit !== undefined) $es4.$$['flash.utils'].ByteArray.$$sinit();

if ($es4.$$['flash.events'].EventDispatcher.$$sinit !== undefined) $es4.$$['flash.events'].EventDispatcher.$$sinit();

if ($es4.$$['flash.display'].Shape.$$sinit !== undefined) $es4.$$['flash.display'].Shape.$$sinit();

if ($es4.$$['flash.display'].PixelSnapping.$$sinit !== undefined) $es4.$$['flash.display'].PixelSnapping.$$sinit();

if ($es4.$$['flash.text'].TextFormat.$$sinit !== undefined) $es4.$$['flash.text'].TextFormat.$$sinit();

if ($es4.$$['flash.ui'].Keyboard.$$sinit !== undefined) $es4.$$['flash.ui'].Keyboard.$$sinit();})();

//sweetrush.AS3_JS
$es4.$$package('sweetrush').AS3_JS = (function ()
{
	//imports
	var Analyzer;
	var Lexer;
	var Parser;
	var TranslatorProto;
	var TranslatorPrototype;
	var Construct;
	var Token;
	var SwcUtil;
	var FileUtil;
	var Sprite;

	//properties
	var $$j = {};
	Object.defineProperty(AS3_JS, 'DEBUG', {
	get:function () { if (AS3_JS.$$cinit !== undefined) AS3_JS.$$cinit(); return $$j.DEBUG; },
	set:function (value) { if (AS3_JS.$$cinit !== undefined) AS3_JS.$$cinit(); $$j.DEBUG = $es4.$$coerce(value, Boolean); }
	});

	Object.defineProperty(AS3_JS, '_swcs', {
	get:function () { if (AS3_JS.$$cinit !== undefined) AS3_JS.$$cinit(); return $$j._swcs; },
	set:function (value) { if (AS3_JS.$$cinit !== undefined) AS3_JS.$$cinit(); $$j._swcs = $es4.$$coerce(value, Object); }
	});


	//class pre initializer
	AS3_JS.$$sinit = (function ()
	{
		AS3_JS.$$sinit = undefined;

		//initialize imports
		Analyzer = $es4.$$['sweetrush.core'].Analyzer;
		Lexer = $es4.$$['sweetrush.core'].Lexer;
		Parser = $es4.$$['sweetrush.core'].Parser;
		TranslatorProto = $es4.$$['sweetrush.core'].TranslatorProto;
		TranslatorPrototype = $es4.$$['sweetrush.core'].TranslatorPrototype;
		Construct = $es4.$$['sweetrush.obj'].Construct;
		Token = $es4.$$['sweetrush.obj'].Token;
		SwcUtil = $es4.$$['sweetrush.utils'].SwcUtil;
		FileUtil = $es4.$$['sweetrush.utils'].FileUtil;
		Sprite = $es4.$$['flash.display'].Sprite;

		//ensure $$sinit is called on super class
		if (Sprite.$$sinit !== undefined) Sprite.$$sinit();

		//set prototype and constructor
		AS3_JS.prototype = Object.create(Sprite.prototype);
		Object.defineProperty(AS3_JS.prototype, "constructor", { value: AS3_JS, enumerable: false });

		//hold private values
		Object.defineProperty(AS3_JS.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(AS3_JS.prototype, 'executeCommand', {
		get:function ()
		{
			var $$this = this;

			function executeCommand($$$$command)
			{
				//set default parameter values
				var command = $es4.$$coerce($$$$command, String);

				var translationMode = 3;
				switch (command)
				{
					case 'as3_js':
						var modes = [1, 3];
						var platforms = ['node', 'browser', 'player'];
						for (var i = platforms.length; i--;)
						{
							var platform = $es4.$$coerce(platforms[i], String);
							for (var j = modes.length; j--;)
							{
								var mode = $es4.$$coerce(modes[j], uint);
								var result = $$this.compileCompiler(mode, platform);
								FileUtil.write(FileUtil.getExcludedPath() + '/_generated/as3_js.' + platform + '.' + mode + '.js', result.js);
								FileUtil.write(FileUtil.getExcludedPath() + '/_generated/as3_js.swc', result.swc);
							}
						}
						break;
					case 'tests':
						var result = $$this.compile({srcDir:FileUtil.getBasePath() + '/_excluded/tests', mainFile:"", compileConstants:{'CONFIG::air':'false', 'CONFIG::node':'true'}, includeBootstrap:true, includePlayerGlobal:true, expose:'', translationMode:translationMode, excludeDirectories:['_excluded', 'node_modules'], platform:'node'});
						trace(result.js);
						break;
				}
			}

			return $$this.$$AS3_JS.$$executeCommand || ($$this.$$AS3_JS.$$executeCommand = executeCommand);
		}});


		//public instance method
		Object.defineProperty(AS3_JS.prototype, 'compileCompiler', {
		get:function ()
		{
			var $$this = this;

			function compileCompiler($$$$translationMode, $$$$platform)
			{
				//set default parameter values
				var translationMode = (0 > arguments.length - 1) ? 1 : $es4.$$coerce($$$$translationMode, Number);
				var platform = (1 > arguments.length - 1) ? 'node' : $es4.$$coerce($$$$platform, String);

				return $$this.compile({srcDir:FileUtil.getBasePath(), mainFile:"sweetrush/AS3_JS.as", compileConstants:{'CONFIG::air':'false', 'CONFIG::node':'true'}, includeBootstrap:true, includePlayerGlobal:true, expose:'as3_js', translationMode:translationMode, excludeDirectories:['_excluded', 'node_modules'], platform:platform});
			}

			return $$this.$$AS3_JS.$$compileCompiler || ($$this.$$AS3_JS.$$compileCompiler = compileCompiler);
		}});


		//public instance method
		Object.defineProperty(AS3_JS.prototype, 'compile', {
		get:function ()
		{
			var $$this = this;

			function compile($$$$params)
			{
				//set default parameter values
				var params = $es4.$$coerce($$$$params, Object);

				var srcDir = $es4.$$coerce(params.srcDir, String);
				var mainFile = $es4.$$coerce(params.mainFile, String);
				var swcs = $es4.$$coerce(params.swcs || [], Array);
				var srcFiles = $es4.$$coerce(params.srcFiles || [], Array);
				var translationMode = $es4.$$coerce(params.translationMode === undefined ? 3 : params.translationMode, Number);
				var compileConstants = params.compileConstants || {};
				var release = $es4.$$coerce(params.release, Boolean);
				var rootConstructs = $es4.$$coerce(params.rootConstructs || [], Array);
				var swcOnly = $es4.$$coerce(params.swcOnly, Boolean);
				var excludeDirectories = $es4.$$coerce(params.excludeDirectories || [], Array);
				var includeBootstrap = $es4.$$coerce(params.includeBootstrap !== undefined ? params.includeBootstrap : true, Boolean);
				var includePlayerGlobal = $es4.$$coerce(params.includePlayerGlobal !== undefined ? params.includePlayerGlobal : includeBootstrap, Boolean);
				var expose = $es4.$$coerce(params.expose || '', String);
				var platform = $es4.$$coerce(params.platform || 'node', String);
				var special = $es4.$$coerce(params.special, Boolean);
				srcDir = $es4.$$coerce(FileUtil.fixPath(srcDir), String);
				if (mainFile)
				{
					mainFile = $es4.$$coerce(FileUtil.fixPath(mainFile), String);
				}
				var files = $$this.$$AS3_JS.getSrcFiles(srcDir, srcFiles, excludeDirectories, platform);
				var innerRootConstruct = null;
				if (!special)
				{
					innerRootConstruct = $$this.$$AS3_JS.getBuiltinSWC(platform);
					for (var prop in innerRootConstruct)
					{
						rootConstructs[prop] = innerRootConstruct[prop];
					}
					innerRootConstruct = $$this.$$AS3_JS.getPlayerGlobalSWC(translationMode, platform);
					for (var prop in innerRootConstruct)
					{
						rootConstructs[prop] = innerRootConstruct[prop];
					}
				}
				for (var i = 0; i < swcs.length; i++)
				{
					innerRootConstruct = swcs[i];
					for (var prop in innerRootConstruct)
					{
						rootConstructs[prop] = innerRootConstruct[prop];
					}
				}
				var filePaths = {};
				var mainID;
				var rootConstructsToTranslate = {};
				var tokens;
				var rootConstruct;
				for (var filePath in files)
				{
					if (AS3_JS.DEBUG >= 1)
					{
						trace('Lexing: ' + filePath);
					}
					tokens = Lexer.lex(files[filePath]).tokens;
					if (AS3_JS.DEBUG >= 1)
					{
						trace('Parsing: ' + filePath);
					}
					rootConstruct = Parser.parse(tokens, compileConstants, release);
					var id = filePath.split(srcDir)[1].slice(1, -3).split('/').join('.');
					if (FileUtil.fixPath(filePath) == FileUtil.resolvePath(srcDir, mainFile))
					{
						mainID = id;
					}
					rootConstructsToTranslate[id] = rootConstructs[id] = rootConstruct;
					filePaths[id] = filePath;
				}
				if (AS3_JS.DEBUG >= 1)
				{
					trace('Creating: swc');
				}
				var jsSWC = SwcUtil.stringifySWC(rootConstructsToTranslate);
				if (swcOnly)
				{
					return {js:null, rootConstructs:rootConstructsToTranslate, swc:jsSWC};
				}
				$$this.$$AS3_JS.normalizeWildcardImports(rootConstructs);
				var js = [];
				var translated = {interfaces:[], classes:[], methods:[], properties:[]};
				var mainJS = '//' + mainID + '\n';
				for (var id in rootConstructsToTranslate)
				{
					if (AS3_JS.DEBUG >= 1)
					{
						trace('Analyzing: ' + filePaths[id]);
					}
					var rootConstruct = Analyzer.analyze(rootConstructsToTranslate[id], rootConstructs, translationMode);
					if (AS3_JS.DEBUG >= 1)
					{
						trace('Translating: ' + filePaths[id]);
					}
					var innerJS = '//' + id + '\n';
					var translatedJS = (translationMode == 3) ? TranslatorPrototype.translate(rootConstruct, rootConstructs, translationMode, release) : TranslatorProto.translate(rootConstruct, rootConstructs, translationMode, release);
					innerJS += translatedJS + '//' + id + '\n';
					if (id == mainID)
					{
						mainJS += translatedJS + '//' + mainID + '\n';
					}
					else if (rootConstruct.packageConstruct.classConstruct)
					{
						translated.classes.push(innerJS);
					}
					else if (rootConstruct.packageConstruct.interfaceConstruct)
					{
						translated.interfaces.push(innerJS);
					}
					else if (rootConstruct.packageConstruct.methodConstruct)
					{
						translated.methods.push(innerJS);
					}
					else if (rootConstruct.packageConstruct.propertyConstruct)
					{
						translated.properties.push(innerJS);
					}
					else
					{
						throw $es4.$$primitive(new Error('unknown construct'));
					}
				}
				for (var i = 0; i < translated.properties.length; i++)
				{
					js.push(translated.properties[i]);
				}
				if (mainID)
				{
					js.push(mainJS);
				}
				for (var i = 0; i < translated.classes.length; i++)
				{
					js.push(translated.classes[i]);
				}
				for (var i = 0; i < translated.interfaces.length; i++)
				{
					js.push(translated.interfaces[i]);
				}
				for (var i = 0; i < translated.methods.length; i++)
				{
					js.push(translated.methods[i]);
				}
				translated = null;
				mainJS = null;
				for (var id in rootConstructsToTranslate)
				{
					if (!rootConstructsToTranslate[id].packageConstruct.interfaceConstruct)
					{
						continue;
					}
					var parts = id.split('.');
					var part = parts.pop();
					var packageName = (parts.length) ? parts.join('.') : '';
					js.push('$es4.$$[\'' + packageName + '\'].' + part + '.$$pcinit();');
				}
				for (var id in rootConstructsToTranslate)
				{
					if (rootConstructsToTranslate[id].packageConstruct.interfaceConstruct || rootConstructsToTranslate[id].packageConstruct.propertyConstruct)
					{
						continue;
					}
					if (rootConstructsToTranslate[id].packageConstruct.classConstruct && rootConstructsToTranslate[id].packageConstruct.classConstruct.UNIMPLEMENTEDToken)
					{
						continue;
					}
					if (rootConstructsToTranslate[id].packageConstruct.methodConstruct && (rootConstructsToTranslate[id].packageConstruct.methodConstruct.UNIMPLEMENTEDToken || (!rootConstructsToTranslate[id].packageConstruct.methodConstruct.getToken && !rootConstructsToTranslate[id].packageConstruct.methodConstruct.setToken)))
					{
						continue;
					}
					var parts = id.split('.');
					var part = parts.pop();
					var packageName = (parts.length) ? parts.join('.') : '';
					js.push('$es4.$$[\'' + packageName + '\'].' + part + '.$$pcinit();');
				}
				if (translationMode === 3)
				{
					for (var id in rootConstructsToTranslate)
					{
						if (!rootConstructsToTranslate[id].packageConstruct.interfaceConstruct)
						{
							continue;
						}
						if (rootConstructsToTranslate[id].packageConstruct.interfaceConstruct.UNIMPLEMENTEDToken)
						{
							continue;
						}
						var parts = id.split('.');
						var part = parts.pop();
						var packageName = (parts.length) ? parts.join('.') : '';
						js.push('if ($es4.$$[\'' + packageName + '\'].' + part + '.$$sinit !== undefined) $es4.$$[\'' + packageName + '\'].' + part + '.$$sinit();');
					}
					for (var id in rootConstructsToTranslate)
					{
						if (rootConstructsToTranslate[id].packageConstruct.interfaceConstruct || rootConstructsToTranslate[id].packageConstruct.propertyConstruct)
						{
							continue;
						}
						if (rootConstructsToTranslate[id].packageConstruct.classConstruct && rootConstructsToTranslate[id].packageConstruct.classConstruct.UNIMPLEMENTEDToken)
						{
							continue;
						}
						if (rootConstructsToTranslate[id].packageConstruct.methodConstruct && (rootConstructsToTranslate[id].packageConstruct.methodConstruct.UNIMPLEMENTEDToken || (!rootConstructsToTranslate[id].packageConstruct.methodConstruct.getToken && !rootConstructsToTranslate[id].packageConstruct.methodConstruct.setToken)))
						{
							continue;
						}
						var parts = id.split('.');
						var part = parts.pop();
						var packageName = (parts.length) ? parts.join('.') : '';
						js.push('if ($es4.$$[\'' + packageName + '\'].' + part + '.$$sinit !== undefined) $es4.$$[\'' + packageName + '\'].' + part + '.$$sinit();');
					}
				}
				var returnObject = '';
				if (mainID)
				{
					var parts = mainID.split('.');
					var name = parts.pop();
					var packageName = (parts.length) ? parts.join('.') : '';
					returnObject = "new $es4.$$['" + packageName + "']." + name + '($es4.$$MANUAL_CONSTRUCT)';
				}
				else
				{
					returnObject = "new $es4.$$['flash.display'].Sprite($es4.$$MANUAL_CONSTRUCT)";
				}
				var lastLine = '';
				if (expose)
				{
					var exposeAs = (platform != 'node') ? ('window.' + expose) : 'var _object = module.exports';
					lastLine = exposeAs + ' = ' + returnObject + '\n';
					lastLine += '$es4.$$construct(' + (platform != 'node' ? ('window.' + expose) : '_object') + ', $es4.$$EMPTY_ARRAY);\n';
					returnObject = (platform != 'node') ? ('window.' + expose) : '_object';
				}
				if (includeBootstrap && includePlayerGlobal && !mainFile)
				{
					lastLine += "return $es4.$$['player'].Player;";
				}
				else if (platform != 'node')
				{
					lastLine += 'return ' + returnObject + ';';
				}
				else
				{
					lastLine += returnObject + ';';
				}
				if (!special)
				{
					js.push(lastLine);
				}
				if (AS3_JS.DEBUG >= 2)
				{
					trace('\nOutput: \n' + js);
				}
				var bootstrapJS = [];
				if (includeBootstrap)
				{
					var bootstrapJSFileDir = FileUtil.getExcludedPath() + '/bootstrap';
					var list = FileUtil.getList(bootstrapJSFileDir, true, FileUtil.getListFilter_filters([FileUtil.getListFilter_directories(), FileUtil.getListFilter_hidden(), FileUtil.getListFilter_extension('js', true)]));
					for (var i = 0; i < list.length; i++)
					{
						var filePath = FileUtil.fixPath(list[i].src);
						var parts = filePath.split('.');
						var found = parts.length == 2;
						for (var j = 1; j < parts.length - 1; j++)
						{
							if (parts[j] != platform)
							{
								continue;
							}
							found = true;
							break;
						}
						if (found)
						{
							bootstrapJS.push(FileUtil.read(filePath));
						}
					}
					if (includePlayerGlobal)
					{
						bootstrapJS.push($$this.$$AS3_JS.getPlayerGlobalJS(translationMode, platform));
					}
				}
				var pre = (platform != 'node') ? '//__ES4__\n\n(function() { var $window = this; var window = $window.parent || $window; var global = window; var document = window.document; var $es4 = window.$es4 || (window.$es4 = {}); var _ = window._; var $ = window.$; \n\n' : '';
				var post = (platform != 'node') ? '})();' : '';
				return {js:pre + bootstrapJS.concat(js).join('\n\n') + post, rootConstructs:rootConstructsToTranslate, swc:jsSWC};
			}

			return $$this.$$AS3_JS.$$compile || ($$this.$$AS3_JS.$$compile = compile);
		}});


		//private instance method
		AS3_JS.prototype.$$v.getSrcFiles = {
		get:function ()
		{
			var $$this = this.$$this;

			function getSrcFiles($$$$srcDir, $$$$srcFiles, $$$$excludeDirectories, $$$$platform)
			{
				//set default parameter values
				var srcDir = $es4.$$coerce($$$$srcDir, String);
				var srcFiles = $es4.$$coerce($$$$srcFiles, Array);
				var excludeDirectories = $es4.$$coerce($$$$excludeDirectories, Array);
				var platform = $es4.$$coerce($$$$platform, String);

				var filters = [FileUtil.getListFilter_directories(), FileUtil.getListFilter_hidden(), FileUtil.getListFilter_extension('as', true)];
				for (var i = 0; i < excludeDirectories.length; i++)
				{
					filters.push(FileUtil.getListFilter_directory(FileUtil.resolvePath(srcDir, excludeDirectories[i])));
				}
				var list = FileUtil.getList(srcDir, true, FileUtil.getListFilter_filters(filters));
				var files = {};
				for (var i = 0; i < list.length; i++)
				{
					var filePath = FileUtil.fixPath(list[i].src);
					var parts = filePath.split('.');
					var found = parts.length == 2;
					for (var j = 1; j < parts.length - 1; j++)
					{
						if (parts[j] != platform)
						{
							continue;
						}
						found = true;
						filePath = parts[0] + '.' + parts[parts.length - 1];
						break;
					}
					if (!found)
					{
						continue;
					}
					if (srcFiles.length)
					{
						var found = false;
						for (var j = 0; j < srcFiles.length; j++)
						{
							if (filePath.indexOf(srcFiles[j]) != -1)
							{
								found = true;
								break;
							}
						}
						if (!found)
						{
							continue;
						}
					}
					files[FileUtil.fixPath(filePath)] = FileUtil.read(FileUtil.fixPath(list[i].src));
				}
				if (AS3_JS.DEBUG >= 1)
				{
					trace('Normalizing Includes');
				}

				function insertIncludes($$$$filePath, $$$$fileContents, $$$$includes) 
				{
					//set default parameter values
					var filePath = $$$$filePath;
					var fileContents = $$$$fileContents;
					var includes = $$$$includes;

					return fileContents.replace(/include\s*["|'][@\-0-9A-Za-z._\/\\]+["|'];*/g, doReplace);

					function doReplace($$$$match, $$$$offset, $$$$string) 
					{
						//set default parameter values
						var match = $$$$match;
						var offset = $$$$offset;
						var string = $$$$string;

						var includePath = match.match(/["|']([@\-0-9A-Za-z._\/\\]+)["|']/)[1];
						var parts = FileUtil.fixPath(filePath).split('/');
						parts.pop();
						var path = parts.join('/');
						includePath = FileUtil.resolvePath(path, includePath);
						trace('found include: ' + includePath + ' in: ' + filePath);
						var parts = includePath.split('.');
						var includeFilePath = parts[0] + '.' + parts[parts.length - 1];
						includes[includeFilePath] = includeFilePath;
						return insertIncludes(includePath, FileUtil.read(includePath), includes);
					}
;
				}
;

				var includes = {};
				for (var filePath in files)
				{
					files[filePath] = insertIncludes(filePath, files[filePath], includes);
				}
				for (var filePath in includes)
				{
					delete files[filePath];
				}
				return files;
			}

			return $$this.$$AS3_JS.$$p.$$getSrcFiles || ($$this.$$AS3_JS.$$p.$$getSrcFiles = getSrcFiles);
		}};


		//private instance method
		AS3_JS.prototype.$$v.normalizeWildcardImports = {
		get:function ()
		{
			var $$this = this.$$this;

			function normalizeWildcardImports($$$$rootConstructs)
			{
				//set default parameter values
				var rootConstructs = $es4.$$coerce($$$$rootConstructs, Object);

				if (AS3_JS.DEBUG >= 1)
				{
					trace('Normalizing Imports');
				}
				for (var id in rootConstructs)
				{
					var innerRootConstruct = rootConstructs[id];
					var imports = [innerRootConstruct.importConstructs, innerRootConstruct.packageConstruct.importConstructs];
					while (imports.length)
					{
						var importConstructs = imports.shift();
						var packages = [];
						for (var i = 0; i < importConstructs.length; i++)
						{
							var importConstruct = importConstructs[i];
							if (!importConstruct.mulToken)
							{
								continue;
							}
							importConstructs.splice(i, 1);
							i--;
							packages.push(Construct.nameConstructToString(importConstruct.nameConstruct));
						}
						while (packages.length)
						{
							var packageName = packages.shift();
							for (var innerId in rootConstructs)
							{
								if (innerId.indexOf(packageName) != 0)
								{
									continue;
								}
								var importConstruct = Construct.getNewImportConstruct();
								var nameConstruct = Construct.getNewNameConstruct();
								var parts = innerId.split('.');
								for (var j = 0; j < parts.length; j++)
								{
									var identifierToken = Token.getNewToken(Token.IdentifierTokenType, parts[j]);
									nameConstruct.identifierTokens.push(identifierToken);
								}
								importConstruct.nameConstruct = nameConstruct;
								importConstructs.push(importConstruct);
							}
						}
					}
				}
			}

			return $$this.$$AS3_JS.$$p.$$normalizeWildcardImports || ($$this.$$AS3_JS.$$p.$$normalizeWildcardImports = normalizeWildcardImports);
		}};


		//private instance method
		AS3_JS.prototype.$$v.getBuiltinSWC = {
		get:function ()
		{
			var $$this = this.$$this;

			function getBuiltinSWC($$$$platform)
			{
				//set default parameter values
				var platform = $es4.$$coerce($$$$platform, String);

				if (AS3_JS._swcs['builtin'][platform])
				{
					return AS3_JS._swcs['builtin'][platform];
				}
				var builtinSWCFile = FileUtil.getExcludedPath() + '/_generated/builtin.' + platform + '.swc';
				var builtinSWCString = $es4.$$coerce(FileUtil.exists(builtinSWCFile) ? FileUtil.read(builtinSWCFile) : null, String);
				if (!builtinSWCString || !SwcUtil.isValidSWCString(builtinSWCString))
				{
					var srcDir = FileUtil.getExcludedPath() + '/builtin';
					var result = $$this.compile({srcDir:srcDir, translationMode:1, special:true, includeBootstrap:false, includePlayerGlobal:false, platform:platform});
					FileUtil.write(builtinSWCFile, result.swc);
					builtinSWCString = $es4.$$coerce(result.swc, String);
				}
				return AS3_JS._swcs['builtin'][platform] = SwcUtil.parseSWCString(builtinSWCString);
			}

			return $$this.$$AS3_JS.$$p.$$getBuiltinSWC || ($$this.$$AS3_JS.$$p.$$getBuiltinSWC = getBuiltinSWC);
		}};


		//private instance method
		AS3_JS.prototype.$$v.getPlayerGlobalSWC = {
		get:function ()
		{
			var $$this = this.$$this;

			function getPlayerGlobalSWC($$$$translationMode, $$$$platform)
			{
				//set default parameter values
				var translationMode = $es4.$$coerce($$$$translationMode, Number);
				var platform = $es4.$$coerce($$$$platform, String);

				if (AS3_JS._swcs['playerGlobal'][platform + '_' + translationMode])
				{
					return AS3_JS._swcs['playerGlobal'][platform + '_' + translationMode][1];
				}
				var playerGlobalSWCFile = FileUtil.getExcludedPath() + '/_generated/playerglobal.' + platform + '.swc';
				var playerGlobalJSFile = FileUtil.getExcludedPath() + '/_generated/playerglobal.' + platform + '.' + translationMode + '.js';
				var playerGlobalSWCString = $es4.$$coerce(FileUtil.exists(playerGlobalSWCFile) ? FileUtil.read(playerGlobalSWCFile) : null, String);
				var playerGlobalJS = $es4.$$coerce(FileUtil.exists(playerGlobalJSFile) ? FileUtil.read(playerGlobalJSFile) : null, String);
				if (!playerGlobalSWCString || !playerGlobalJS || !SwcUtil.isValidSWCString(playerGlobalSWCString))
				{
					var srcDir = FileUtil.getExcludedPath() + '/playerglobal';
					var result = $$this.compile({srcDir:srcDir, translationMode:translationMode, swcs:[$$this.$$AS3_JS.getBuiltinSWC(platform)], special:true, includeBootstrap:false, includePlayerGlobal:false, platform:platform});
					FileUtil.write(playerGlobalSWCFile, result.swc);
					FileUtil.write(playerGlobalJSFile, result.js);
					playerGlobalSWCString = $es4.$$coerce(result.swc, String);
					playerGlobalJS = $es4.$$coerce(result.js, String);
				}
				AS3_JS._swcs['playerGlobal'][platform + '_' + translationMode] = [playerGlobalJS];
				return AS3_JS._swcs['playerGlobal'][platform + '_' + translationMode][1] = SwcUtil.parseSWCString(playerGlobalSWCString);
			}

			return $$this.$$AS3_JS.$$p.$$getPlayerGlobalSWC || ($$this.$$AS3_JS.$$p.$$getPlayerGlobalSWC = getPlayerGlobalSWC);
		}};


		//private instance method
		AS3_JS.prototype.$$v.getPlayerGlobalJS = {
		get:function ()
		{
			var $$this = this.$$this;

			function getPlayerGlobalJS($$$$translationMode, $$$$platform)
			{
				//set default parameter values
				var translationMode = $es4.$$coerce($$$$translationMode, Number);
				var platform = $es4.$$coerce($$$$platform, String);

				if (!AS3_JS._swcs['playerGlobal'][platform + '_' + translationMode])
				{
					$$this.$$AS3_JS.getPlayerGlobalSWC(translationMode, platform);
				}
				return AS3_JS._swcs['playerGlobal'][platform + '_' + translationMode][0];
			}

			return $$this.$$AS3_JS.$$p.$$getPlayerGlobalJS || ($$this.$$AS3_JS.$$p.$$getPlayerGlobalJS = getPlayerGlobalJS);
		}};


		//public instance method
		Object.defineProperty(AS3_JS.prototype, 'getLexer', {
		get:function ()
		{
			var $$this = this;

			function getLexer()
			{
				return $es4.$$coerce(Lexer, Class);
			}

			return $$this.$$AS3_JS.$$getLexer || ($$this.$$AS3_JS.$$getLexer = getLexer);
		}});


		//public instance method
		Object.defineProperty(AS3_JS.prototype, 'getParser', {
		get:function ()
		{
			var $$this = this;

			function getParser()
			{
				return $es4.$$coerce(Parser, Class);
			}

			return $$this.$$AS3_JS.$$getParser || ($$this.$$AS3_JS.$$getParser = getParser);
		}});


		//public instance method
		Object.defineProperty(AS3_JS.prototype, 'getAnalyzer', {
		get:function ()
		{
			var $$this = this;

			function getAnalyzer()
			{
				return $es4.$$coerce(Analyzer, Class);
			}

			return $$this.$$AS3_JS.$$getAnalyzer || ($$this.$$AS3_JS.$$getAnalyzer = getAnalyzer);
		}});


		//public instance method
		Object.defineProperty(AS3_JS.prototype, 'getTranslator', {
		get:function ()
		{
			var $$this = this;

			function getTranslator($$$$prototype)
			{
				//set default parameter values
				var prototype = (0 > arguments.length - 1) ? true : $es4.$$coerce($$$$prototype, Boolean);

				return $es4.$$coerce(prototype ? TranslatorPrototype : TranslatorProto, Class);
			}

			return $$this.$$AS3_JS.$$getTranslator || ($$this.$$AS3_JS.$$getTranslator = getTranslator);
		}});


		//public instance method
		Object.defineProperty(AS3_JS.prototype, 'getSwcUtil', {
		get:function ()
		{
			var $$this = this;

			function getSwcUtil()
			{
				return $es4.$$coerce(SwcUtil, Class);
			}

			return $$this.$$AS3_JS.$$getSwcUtil || ($$this.$$AS3_JS.$$getSwcUtil = getSwcUtil);
		}});
	});

	//class initializer
	AS3_JS.$$cinit = (function ()
	{
		AS3_JS.$$cinit = undefined;

		//initialize properties
		$$j.DEBUG = $es4.$$coerce(true, Boolean);
		$$j._swcs = $es4.$$coerce({builtin:{}, playerGlobal:{}}, Object);
	
	});

	function AS3_JS()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof AS3_JS) || $$this.$$AS3_JS !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], AS3_JS) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			AS3_JS.$$construct($$this, $$args);
		}
	}

	//construct
	AS3_JS.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (AS3_JS.$$cinit !== undefined) AS3_JS.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$AS3_JS', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//private instance method
		Object.defineProperty($$this.$$AS3_JS, 'getSrcFiles', AS3_JS.prototype.$$v.getSrcFiles);

		//private instance method
		Object.defineProperty($$this.$$AS3_JS, 'normalizeWildcardImports', AS3_JS.prototype.$$v.normalizeWildcardImports);

		//private instance method
		Object.defineProperty($$this.$$AS3_JS, 'getBuiltinSWC', AS3_JS.prototype.$$v.getBuiltinSWC);

		//private instance method
		Object.defineProperty($$this.$$AS3_JS, 'getPlayerGlobalSWC', AS3_JS.prototype.$$v.getPlayerGlobalSWC);

		//private instance method
		Object.defineProperty($$this.$$AS3_JS, 'getPlayerGlobalJS', AS3_JS.prototype.$$v.getPlayerGlobalJS);

		//call construct on super
		Sprite.$$construct($$this);

		//initialize properties
		AS3_JS.$$iinit($$this);

		//call constructor
		if (args !== undefined) AS3_JS.$$constructor.apply($$this, args);
	});

	//initializer
	AS3_JS.$$iinit = (function ($$this)
	{
		//call iinit on super
		Sprite.$$iinit($$this);
	});

	//constructor
	AS3_JS.$$constructor = (function ()
	{
		var $$this = this;

		Sprite.$$constructor.call($$this);
	});

	return $es4.$$class(AS3_JS, {EXTENDS:'flash.display.Sprite'}, 'sweetrush::AS3_JS');
})();
//sweetrush.AS3_JS


//sweetrush.core.Analyzer
$es4.$$package('sweetrush.core').Analyzer = (function ()
{
	//imports
	var Construct;
	var Token;
	var AS3_JS;
	var Analyzer;
	var Lexer;
	var Parser;
	var TranslatorProto;
	var TranslatorPrototype;
	var Construct;
	var Token;
	var Base64Util;
	var FileUtil;
	var JsonUtil;
	var SwcUtil;

	//properties
	var $$j = {};
	Object.defineProperty(Analyzer, 'globalIdentifiers', {
	get:function () { if (Analyzer.$$cinit !== undefined) Analyzer.$$cinit(); return $$j.globalIdentifiers; },
	set:function (value) { if (Analyzer.$$cinit !== undefined) Analyzer.$$cinit(); $$j.globalIdentifiers = $es4.$$coerce(value, Array); }
	});

	Object.defineProperty(Analyzer, '_globals', {
	get:function () { if (Analyzer.$$cinit !== undefined) Analyzer.$$cinit(); return $$j._globals; },
	set:function (value) { if (Analyzer.$$cinit !== undefined) Analyzer.$$cinit(); $$j._globals = $es4.$$coerce(value, Object); }
	});


	//class pre initializer
	Analyzer.$$sinit = (function ()
	{
		Analyzer.$$sinit = undefined;

		//initialize imports
		Construct = $es4.$$['sweetrush.obj'].Construct;
		Token = $es4.$$['sweetrush.obj'].Token;
		AS3_JS = $es4.$$['sweetrush'].AS3_JS;
		Lexer = $es4.$$['sweetrush.core'].Lexer;
		Parser = $es4.$$['sweetrush.core'].Parser;
		TranslatorProto = $es4.$$['sweetrush.core'].TranslatorProto;
		TranslatorPrototype = $es4.$$['sweetrush.core'].TranslatorPrototype;
		Base64Util = $es4.$$['sweetrush.utils'].Base64Util;
		FileUtil = $es4.$$['sweetrush.utils'].FileUtil;
		JsonUtil = $es4.$$['sweetrush.utils'].JsonUtil;
		SwcUtil = $es4.$$['sweetrush.utils'].SwcUtil;

		//set prototype and constructor
		Analyzer.prototype = Object.create(Object.prototype);
		Object.defineProperty(Analyzer.prototype, "constructor", { value: Analyzer, enumerable: false });

		//hold private values
		Object.defineProperty(Analyzer.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(Analyzer.prototype, 'analyze', {
		get:function ()
		{
			var $$this = this;

			function analyze($$$$rootConstruct, $$$$rootConstructs, $$$$translationMode, $$$$doNotTreatPrivateMethodsAsNative, $$$$treatThisAsDynamic)
			{
				//set default parameter values
				var rootConstruct = $$$$rootConstruct;
				var rootConstructs = $$$$rootConstructs;
				var translationMode = $es4.$$coerce($$$$translationMode, Number);
				var doNotTreatPrivateMethodsAsNative = (3 > arguments.length - 1) ? false : $es4.$$coerce($$$$doNotTreatPrivateMethodsAsNative, Boolean);
				var treatThisAsDynamic = (4 > arguments.length - 1) ? false : $es4.$$coerce($$$$treatThisAsDynamic, Boolean);

				$$this.$$Analyzer._rootConstruct = rootConstruct;
				$$this.$$Analyzer._rootConstructs = rootConstructs;
				$$this.$$Analyzer._translationMode = translationMode;
				$$this.$$Analyzer._treatThisAsDynamic = treatThisAsDynamic;
				$$this.$$Analyzer._doNotTreatPrivateMethodsAsNative = (translationMode == 1 || translationMode == 3) || doNotTreatPrivateMethodsAsNative;
				$$this.$$Analyzer.registerNamespace('public');
				$$this.$$Analyzer.registerNamespace('private');
				$$this.$$Analyzer.registerNamespace('protected');
				$$this.$$Analyzer.registerNamespace('internal');
				$$this.$$Analyzer.registerType('void', null, null, true);
				$$this.$$Analyzer.registerType('*', null, null, true);
				$$this.$$Analyzer.registerType('PACKAGE', null, null, true);
				for (var name in $$this.$$Analyzer._rootConstructs)
				{
					var construct = $$this.$$Analyzer._rootConstructs[name];
					if (!construct.packageConstruct)
					{
						continue;
					}
					if (construct.packageConstruct.classConstruct)
					{
						$$this.$$Analyzer.registerType(name, construct, construct.packageConstruct.classConstruct, Analyzer._globals[name]);
					}
					if (construct.packageConstruct.interfaceConstruct)
					{
						$$this.$$Analyzer.registerType(name, construct, construct.packageConstruct.interfaceConstruct, Analyzer._globals[name]);
					}
				}
				for (var i = 0; i < Analyzer.globalIdentifiers.length; i++)
				{
					$$this.$$Analyzer.registerIdentifier(Analyzer.globalIdentifiers[i].name);
				}
				var packageConstruct = $$this.$$Analyzer._rootConstruct.packageConstruct;
				for (var i = 0; i < $$this.$$Analyzer._rootConstruct.classConstructs.length; i++)
				{
					$$this.$$Analyzer.registerIdentifier($$this.$$Analyzer._rootConstruct.classConstructs[i], $$this.$$Analyzer._rootConstruct.classConstructs[i]);
				}
				for (var i = 0; i < $$this.$$Analyzer._rootConstruct.interfaceConstructs.length; i++)
				{
					$$this.$$Analyzer.registerIdentifier($$this.$$Analyzer._rootConstruct.interfaceConstructs[i], $$this.$$Analyzer._rootConstruct.interfaceConstructs[i]);
				}
				for (var i = 0; i < $$this.$$Analyzer._rootConstruct.propertyConstructs.length; i++)
				{
					$$this.$$Analyzer.registerIdentifier($$this.$$Analyzer._rootConstruct.propertyConstructs[i], $$this.$$Analyzer._rootConstruct.propertyConstructs[i]);
				}
				for (var i = 0; i < $$this.$$Analyzer._rootConstruct.methodConstructs.length; i++)
				{
					$$this.$$Analyzer.registerIdentifier($$this.$$Analyzer._rootConstruct.methodConstructs[i], $$this.$$Analyzer._rootConstruct.methodConstructs[i]);
				}
				for (var i = 0; i < packageConstruct.useConstructs.length; i++)
				{
					$$this.$$Analyzer.registerUseNamespace(packageConstruct.useConstructs[i]);
				}
				if (packageConstruct.classConstruct != null && packageConstruct.classConstruct.UNIMPLEMENTEDToken == null)
				{
					$$this.$$Analyzer.analyzeClassConstruct(packageConstruct.classConstruct);
				}
				if (packageConstruct.interfaceConstruct != null && packageConstruct.interfaceConstruct.UNIMPLEMENTEDToken == null)
				{
					$$this.$$Analyzer.analyzeInterfaceConstruct(packageConstruct.interfaceConstruct);
				}
				if (packageConstruct.methodConstruct != null && packageConstruct.methodConstruct.UNIMPLEMENTEDToken == null)
				{
					$$this.$$Analyzer.analyzeFunctionConstruct(packageConstruct.methodConstruct);
				}
				if (packageConstruct.propertyConstruct != null)
				{
					$$this.$$Analyzer.analyzePropertyConstruct(packageConstruct.propertyConstruct);
				}
				return $$this.$$Analyzer._rootConstruct;
			}

			return $$this.$$Analyzer.$$analyze || ($$this.$$Analyzer.$$analyze = analyze);
		}});


		//private instance method
		Analyzer.prototype.$$v.upLevel = {
		get:function ()
		{
			var $$this = this.$$this;

			function upLevel()
			{
				$$this.$$Analyzer._indent++;
				$$this.$$Analyzer._level++;
				$$this.$$Analyzer._identifiers[$$this.$$Analyzer._level] = {};
				$$this.$$Analyzer._namespaces[$$this.$$Analyzer._level] = {};
				$$this.$$Analyzer._useNamespaces[$$this.$$Analyzer._level] = [];
				return $$this.$$Analyzer._level;
			}

			return $$this.$$Analyzer.$$p.$$upLevel || ($$this.$$Analyzer.$$p.$$upLevel = upLevel);
		}};


		//private instance method
		Analyzer.prototype.$$v.downLevel = {
		get:function ()
		{
			var $$this = this.$$this;

			function downLevel()
			{
				delete $$this.$$Analyzer._identifiers[$$this.$$Analyzer._level];
				delete $$this.$$Analyzer._namespaces[$$this.$$Analyzer._level];
				delete $$this.$$Analyzer._useNamespaces[$$this.$$Analyzer._level];
				$$this.$$Analyzer._indent--;
				$$this.$$Analyzer._level--;
				return $$this.$$Analyzer._level;
			}

			return $$this.$$Analyzer.$$p.$$downLevel || ($$this.$$Analyzer.$$p.$$downLevel = downLevel);
		}};


		//private instance method
		Analyzer.prototype.$$v.output = {
		get:function ()
		{
			var $$this = this.$$this;

			function output()
			{
				trace('outputing...');
				var level = $$this.$$Analyzer._level;
				while (level >= 0)
				{
					trace('level: ' + level);
					for (var name in $$this.$$Analyzer._namespaces[level])
					{
						trace('\t' + $$this.$$Analyzer._namespaces[level][name] + '\t\t\t [[[' + name.substring(1) + ']]]');
					}
					for (var name in $$this.$$Analyzer._identifiers[level])
					{
						trace('\t' + $$this.$$Analyzer._identifiers[level][name] + '\t\t\t [[[' + name.substring(1) + ']]]');
					}
					level--;
				}
				for (var name in $$this.$$Analyzer._types)
				{
					trace('\t' + $$this.$$Analyzer._types[name] + '\t\t\t [[[' + name.substring(1) + ']]]');
				}
				for (var i = 0; i < $$this.$$Analyzer.getUseNamespaces().length; i++)
				{
					trace('UseNamespace: ' + $$this.$$Analyzer.getUseNamespaces()[i]);
				}
			}

			return $$this.$$Analyzer.$$p.$$output || ($$this.$$Analyzer.$$p.$$output = output);
		}};


		//private instance method
		Analyzer.prototype.$$v.lookupConstructInRootConstruct = {
		get:function ()
		{
			var $$this = this.$$this;

			function lookupConstructInRootConstruct($$$$rootConstruct, $$$$object)
			{
				//set default parameter values
				var rootConstruct = $$$$rootConstruct;
				var object = $$$$object;

				if (!rootConstruct || !object)
				{
					$$this.$$Analyzer.output();
					throw $es4.$$primitive(new Error('cannot lookup empty rootConstruct/object: ' + rootConstruct + ', ' + object));
				}
				else if ($es4.$$is(object, String))
				{
					for (var i = 0; i < rootConstruct.classConstructs.length; i++)
					{
						if (rootConstruct.classConstructs[i].identifierToken.data == object)
						{
							return rootConstruct.classConstructs[i];
						}
					}
					for (var i = 0; i < rootConstruct.interfaceConstructs.length; i++)
					{
						if (rootConstruct.interfaceConstructs[i].identifierToken.data == object)
						{
							return rootConstruct.interfaceConstructs[i];
						}
					}
					if (rootConstruct.packageConstruct.classConstruct)
					{
						return rootConstruct.packageConstruct.classConstruct;
					}
					if (rootConstruct.packageConstruct.interfaceConstruct)
					{
						return rootConstruct.packageConstruct.interfaceConstruct;
					}
					if (rootConstruct.packageConstruct.propertyConstruct)
					{
						return rootConstruct.packageConstruct.propertyConstruct;
					}
					if (rootConstruct.packageConstruct.methodConstruct)
					{
						return rootConstruct.packageConstruct.methodConstruct;
					}
					throw $es4.$$primitive(new Error('could not lookup construct in construct: ' + object));
				}
				if (object.constructor == Construct.NameConstruct)
				{
					return $$this.$$Analyzer.lookupConstructInRootConstruct(rootConstruct, Construct.nameConstructToString(object));
				}
				else if (object.constructor == Construct.ImportConstruct)
				{
					return $$this.$$Analyzer.lookupConstructInRootConstruct(rootConstruct, Construct.nameConstructToString(object.nameConstruct));
				}
			}

			return $$this.$$Analyzer.$$p.$$lookupConstructInRootConstruct || ($$this.$$Analyzer.$$p.$$lookupConstructInRootConstruct = lookupConstructInRootConstruct);
		}};


		//private instance method
		Analyzer.prototype.$$v.lookupRootConstruct = {
		get:function ()
		{
			var $$this = this.$$this;

			function lookupRootConstruct($$$$rootConstruct, $$$$object)
			{
				//set default parameter values
				var rootConstruct = $$$$rootConstruct;
				var object = $$$$object;

				if (!rootConstruct || !object)
				{
					throw $es4.$$primitive(new Error('cannot find empty rootConstruct/object: ' + rootConstruct + ', ' + object));
				}
				else if ($es4.$$is(object, String))
				{
					for (var i = 0; i < rootConstruct.classConstructs.length; i++)
					{
						if (rootConstruct.classConstructs[i].identifierToken.data == object)
						{
							return rootConstruct;
						}
					}
					for (var i = 0; i < rootConstruct.interfaceConstructs.length; i++)
					{
						if (rootConstruct.interfaceConstructs[i].identifierToken.data == object)
						{
							return rootConstruct;
						}
					}
					var rootConstructs = $$this.$$Analyzer._rootConstructs;
					if (rootConstructs[object])
					{
						return rootConstructs[object];
					}
					throw $es4.$$primitive(new Error('could not lookup root construct: ' + object));
				}
				else if (object.constructor == Construct.ImportConstruct)
				{
					return $$this.$$Analyzer.lookupRootConstruct(rootConstruct, Construct.nameConstructToString(object.nameConstruct));
				}
				throw $es4.$$primitive(new Error('unknown object passed into lookupRootConstruct: ' + object.constructor));
			}

			return $$this.$$Analyzer.$$p.$$lookupRootConstruct || ($$this.$$Analyzer.$$p.$$lookupRootConstruct = lookupRootConstruct);
		}};


		//private instance method
		Analyzer.prototype.$$v.lookupPackageName = {
		get:function ()
		{
			var $$this = this.$$this;

			function lookupPackageName($$$$construct, $$$$object)
			{
				//set default parameter values
				var construct = $$$$construct;
				var object = $$$$object;

				var fullyQualifiedName = $$this.$$Analyzer.lookupFullyQualifiedName(construct, object);
				var parts = fullyQualifiedName.split('.');
				if (parts.length > 1)
				{
					parts.pop();
					return parts.join('.');
				}
				return '';
			}

			return $$this.$$Analyzer.$$p.$$lookupPackageName || ($$this.$$Analyzer.$$p.$$lookupPackageName = lookupPackageName);
		}};


		//private instance method
		Analyzer.prototype.$$v.lookupFullyQualifiedName = {
		get:function ()
		{
			var $$this = this.$$this;

			function lookupFullyQualifiedName($$$$construct, $$$$object)
			{
				//set default parameter values
				var construct = $$$$construct;
				var object = $$$$object;

				if (!construct || !object)
				{
					throw $es4.$$primitive(new Error('cannot find empty construct/object: ' + construct + ', ' + object));
				}
				else if ($es4.$$is(object, String))
				{
					if (object.split('.').length > 1)
					{
						if ($$this.$$Analyzer._rootConstructs[object])
						{
							return object;
						}
						throw $es4.$$primitive(new Error('could not lookup fully qualified name: ' + object));
					}
					if (construct.identifierToken.data == object)
					{
						if (construct.packageConstruct)
						{
							return Construct.nameConstructToString(construct.packageConstruct.nameConstruct) + '.' + object;
						}
						else
						{
							return object;
						}
					}
					for (var i = 0; i < construct.rootConstruct.classConstructs.length; i++)
					{
						if (construct.rootConstruct.classConstructs[i].identifierToken.data == object)
						{
							return object;
						}
					}
					for (var i = 0; i < construct.rootConstruct.interfaceConstructs.length; i++)
					{
						if (construct.rootConstruct.interfaceConstructs[i].identifierToken.data == object)
						{
							return object;
						}
					}
					var importConstructs = (construct.isInternal) ? construct.rootConstruct.importConstructs : construct.packageConstruct.importConstructs;
					for (var i = 0; i < importConstructs.length; i++)
					{
						var nameConstruct = importConstructs[i].nameConstruct;
						if (nameConstruct.identifierTokens[nameConstruct.identifierTokens.length - 1].data == object)
						{
							if ($$this.$$Analyzer._rootConstructs[Construct.nameConstructToString(nameConstruct)])
							{
								return Construct.nameConstructToString(nameConstruct);
							}
							throw $es4.$$primitive(new Error('could not lookup fully qualified name: ' + object + ', ' + Construct.nameConstructToString(nameConstruct)));
						}
					}
					if (!construct.isInternal)
					{
						var packageName = (construct.packageConstruct.nameConstruct) ? Construct.nameConstructToString(construct.packageConstruct.nameConstruct) : '';
						for (var id in $$this.$$Analyzer._rootConstructs)
						{
							var innerPackageName = ($$this.$$Analyzer._rootConstructs[id].packageConstruct.nameConstruct) ? Construct.nameConstructToString($$this.$$Analyzer._rootConstructs[id].packageConstruct.nameConstruct) : '';
							var name = id.split('.').pop();
							if (packageName == innerPackageName && object == name)
							{
								if ($$this.$$Analyzer._rootConstructs[id])
								{
									return id;
								}
								throw $es4.$$primitive(new Error('could not lookup fully qualified name: ' + object + ', ' + id));
							}
						}
					}
					if ($$this.$$Analyzer._types.hasOwnProperty('_' + object))
					{
						return object;
					}
					$$this.$$Analyzer.output();
					throw $es4.$$primitive(new Error('could not lookup fully qualified name: ' + object + ' in ' + construct.identifierToken.data));
				}
				else if (object.constructor == Construct.NameConstruct)
				{
					return $$this.$$Analyzer.lookupFullyQualifiedName(construct, Construct.nameConstructToString(object));
				}
				throw $es4.$$primitive(new Error('could not lookup fully qualified name: ' + object));
			}

			return $$this.$$Analyzer.$$p.$$lookupFullyQualifiedName || ($$this.$$Analyzer.$$p.$$lookupFullyQualifiedName = lookupFullyQualifiedName);
		}};


		//private instance method
		Analyzer.prototype.$$v.registerNamespace = {
		get:function ()
		{
			var $$this = this.$$this;

			function registerNamespace($$$$object, $$$$construct)
			{
				//set default parameter values
				var object = $$$$object;
				var construct = (1 > arguments.length - 1) ? null : $$$$construct;

				if (!object)
				{
					return;
				}
				else if (object == 'public' || object == 'private' || object == 'protected' || object == 'internal')
				{
					$$this.$$Analyzer._namespaces[$$this.$$Analyzer._level]['_' + object] = $es4.$$primitive(new NamespaceObj(object));
					$$this.$$Analyzer._namespaces[$$this.$$Analyzer._level]['_' + object].isCustom = false;
					return;
				}
				throw $es4.$$primitive(new Error('unknown object passed into registerNamespace: ' + object.constructor));
			}

			return $$this.$$Analyzer.$$p.$$registerNamespace || ($$this.$$Analyzer.$$p.$$registerNamespace = registerNamespace);
		}};


		//private instance method
		Analyzer.prototype.$$v.lookupNamespace = {
		get:function ()
		{
			var $$this = this.$$this;

			function lookupNamespace($$$$object)
			{
				//set default parameter values
				var object = $$$$object;

				if (!object)
				{
					return $$this.$$Analyzer.lookupNamespace('internal');
				}
				if ($es4.$$is(object, String))
				{
					var level = $$this.$$Analyzer._level;
					while (level >= 0)
					{
						if ($$this.$$Analyzer._namespaces[level].hasOwnProperty('_' + object))
						{
							return $$this.$$Analyzer._namespaces[level]['_' + object];
						}
						level--;
					}
					$$this.$$Analyzer.output();
					throw $es4.$$primitive(new Error('could not lookup namespace: ' + object));
				}
				if (object.constructor == "token" && object.type == Token.IdentifierTokenType)
				{
					return $$this.$$Analyzer.lookupNamespace(object.data);
				}
				throw $es4.$$primitive(new Error('unknown object passed into lookupNamespace: ' + object.constructor));
			}

			return $$this.$$Analyzer.$$p.$$lookupNamespace || ($$this.$$Analyzer.$$p.$$lookupNamespace = lookupNamespace);
		}};


		//private instance method
		Analyzer.prototype.$$v.hasNamespace = {
		get:function ()
		{
			var $$this = this.$$this;

			function hasNamespace($$$$object)
			{
				//set default parameter values
				var object = $$$$object;

				if (!object)
				{
					return true;
				}
				if ($es4.$$is(object, String))
				{
					var level = $$this.$$Analyzer._level;
					while (level >= 0)
					{
						if ($$this.$$Analyzer._namespaces[level].hasOwnProperty('_' + object))
						{
							return true;
						}
						level--;
					}
					return false;
				}
				if (object.constructor == Construct.PropertyConstruct)
				{
					return $$this.$$Analyzer.hasNamespace(object.identifierConstruct);
				}
				if (object.constructor == "token" && object.type == Token.IdentifierTokenType)
				{
					return $$this.$$Analyzer.hasNamespace(object.data);
				}
				throw $es4.$$primitive(new Error('unknown object passed into lookupNamespace: ' + object.constructor));
			}

			return $$this.$$Analyzer.$$p.$$hasNamespace || ($$this.$$Analyzer.$$p.$$hasNamespace = hasNamespace);
		}};


		//private instance method
		Analyzer.prototype.$$v.registerUseNamespace = {
		get:function ()
		{
			var $$this = this.$$this;

			function registerUseNamespace($$$$object)
			{
				//set default parameter values
				var object = $$$$object;

				if (!object)
				{
					throw $es4.$$primitive(new Error('null object passed to registerUseNamespace'));
				}
				if (object.constructor == Construct.UseConstruct || object.constructor == Construct.UseStatement)
				{
					$$this.$$Analyzer._useNamespaces[$$this.$$Analyzer._level].push(object.namespaceIdentifierToken.data);
					return;
				}
				throw $es4.$$primitive(new Error('unknown object passed into registerUseNamespace: ' + object.constructor));
			}

			return $$this.$$Analyzer.$$p.$$registerUseNamespace || ($$this.$$Analyzer.$$p.$$registerUseNamespace = registerUseNamespace);
		}};


		//private instance method
		Analyzer.prototype.$$v.getUseNamespaces = {
		get:function ()
		{
			var $$this = this.$$this;

			function getUseNamespaces()
			{
				var useNamespaces = [];
				var level = $$this.$$Analyzer._level;
				while (level >= 0)
				{
					for (var i = 0; i < $$this.$$Analyzer._useNamespaces[level].length; i++)
					{
						useNamespaces.push($$this.$$Analyzer._useNamespaces[level][i]);
					}
					level--;
				}
				return useNamespaces;
			}

			return $$this.$$Analyzer.$$p.$$getUseNamespaces || ($$this.$$Analyzer.$$p.$$getUseNamespaces = getUseNamespaces);
		}};


		//private instance method
		Analyzer.prototype.$$v.registerIdentifier = {
		get:function ()
		{
			var $$this = this.$$this;

			function registerIdentifier($$$$object, $$$$construct)
			{
				//set default parameter values
				var object = $$$$object;
				var construct = (1 > arguments.length - 1) ? null : $$$$construct;

				if (!object)
				{
					return;
				}
				var identifier;
				var vectorType;
				if (object.constructor == Construct.PackageConstruct)
				{
					var packageName = object.nameConstruct ? Construct.nameConstructToString(object.nameConstruct) : '';
					var name = packageName.split('.').shift();
					if (name)
					{
						identifier = $es4.$$primitive(new Identifier(name, $$this.$$Analyzer.lookupType('PACKAGE', construct)));
					}
					if (object.classConstruct)
					{
						identifier = $$this.$$Analyzer.registerIdentifier(object.classConstruct, object.classConstruct);
						if (!object.isInternal && Construct.nameConstructToString(object.classConstruct.packageConstruct.nameConstruct))
						{
							$$this.$$Analyzer._identifiers[$$this.$$Analyzer._level]['_' + identifier.type.fullyQualifiedName] = identifier;
						}
					}
					else if (object.interfaceConstruct)
					{
						identifier = $$this.$$Analyzer.registerIdentifier(object.interfaceConstruct, object.interfaceConstruct);
						if (!object.isInternal && Construct.nameConstructToString(object.interfaceConstruct.packageConstruct.nameConstruct))
						{
							$$this.$$Analyzer._identifiers[$$this.$$Analyzer._level]['_' + identifier.type.fullyQualifiedName] = identifier;
						}
					}
					else if (object.methodConstruct)
					{
						identifier = $$this.$$Analyzer.registerIdentifier(object.methodConstruct, object.methodConstruct);
					}
					else if (object.propertyConstruct)
					{
						identifier = $$this.$$Analyzer.registerIdentifier(object.propertyConstruct, object.propertyConstruct);
					}
					else
					{
						throw $es4.$$primitive(new Error('could not register type: ' + object));
					}
					if (!identifier)
					{
						return;
					}
					identifier.isImport = true;
					return identifier;
				}
				else if (object.constructor == Construct.ClassConstruct || object.constructor == Construct.InterfaceConstruct)
				{
					var type;
					if (object.isInternal)
					{
						type = $$this.$$Analyzer.lookupType(object.identifierToken.data, construct);
					}
					else if (Construct.nameConstructToString(object.packageConstruct.nameConstruct))
					{
						type = $$this.$$Analyzer.lookupType(Construct.nameConstructToString(object.packageConstruct.nameConstruct) + '.' + object.identifierToken.data);
					}
					else
					{
						type = $$this.$$Analyzer.lookupType(object.identifierToken.data);
					}
					identifier = $es4.$$primitive(new Identifier(object.identifierToken.data, type));
					identifier.isType = true;
					identifier.construct = construct;
					identifier.isInternal = object.isInternal;
					var type = $es4.$$primitive(new Type(object.identifierToken.data, identifier.type.fullyQualifiedName, object.rootConstruct, construct));
					$$this.$$Analyzer._types['_' + identifier.type.fullyQualifiedName] = type;
					$$this.$$Analyzer._types['_' + identifier.type.name] = type;
				}
				else if (object.constructor == Construct.ImportConstruct)
				{
					var rootConstruct = $$this.$$Analyzer.lookupRootConstruct($$this.$$Analyzer._rootConstruct, object);
					var innerConstruct = $$this.$$Analyzer.lookupConstructInRootConstruct(rootConstruct, object);
					identifier = $es4.$$primitive(new Identifier(object.nameConstruct.identifierTokens[0].data, $$this.$$Analyzer.lookupType('PACKAGE', construct), null));
					identifier.isPackage = true;
					$$this.$$Analyzer._identifiers[$$this.$$Analyzer._level]['_' + identifier.name] = identifier;
					identifier = $es4.$$primitive(new Identifier(innerConstruct.identifierToken.data, $$this.$$Analyzer.lookupType(innerConstruct.typeConstruct, construct), vectorType));
					identifier.isType = (innerConstruct.constructor == Construct.ClassConstruct || innerConstruct.constructor == Construct.InterfaceConstruct);
					identifier.construct = innerConstruct;
					identifier.isImport = true;
					identifier.isInternal = innerConstruct.isInternal;
					identifier.fullPackageName = Construct.nameConstructToString(object.nameConstruct);
					if (innerConstruct.namespaceKeywordToken)
					{
						var namespaceObj = $$this.$$Analyzer._namespaces[$$this.$$Analyzer._level]['_' + innerConstruct.identifierToken.data] = $es4.$$primitive(new NamespaceObj(innerConstruct.identifierToken.data, $$this.$$Analyzer.lookupFullyQualifiedName(construct, innerConstruct.identifierToken.data), identifier));
						namespaceObj.isStatic = true;
						namespaceObj.namespaceIsPrivate = false;
						identifier.isNamespace = namespaceObj;
					}
					identifier.namespaceObj = $$this.$$Analyzer.lookupNamespace(innerConstruct.namespaceToken);
					var type = $es4.$$primitive(new Type(innerConstruct.identifierToken.data, Construct.nameConstructToString(object.nameConstruct), rootConstruct, innerConstruct));
					$$this.$$Analyzer._types['_' + innerConstruct.identifierToken.data] = type;
					$$this.$$Analyzer._types['_' + Construct.nameConstructToString(object.nameConstruct)] = type;
					return $$this.$$Analyzer._identifiers[$$this.$$Analyzer._level]['_' + identifier.name] = $$this.$$Analyzer._identifiers[$$this.$$Analyzer._level]['_' + Construct.nameConstructToString(object.nameConstruct)] = identifier;
				}
				else if (object.constructor == Construct.ParameterConstruct)
				{
					identifier = $es4.$$primitive(new Identifier(object.identifierToken.data, $$this.$$Analyzer.lookupType(object.typeConstruct, construct)));
					identifier.isVar = true;
				}
				else if (object.constructor == Construct.LabelStatement)
				{
					identifier = $es4.$$primitive(new Identifier(object.identifierToken.data, $$this.$$Analyzer.lookupType('void', construct)));
					identifier.isVar = true;
				}
				else if (object.constructor == Construct.VarStatement || object.constructor == Construct.CatchStatement)
				{
					if (object.typeConstruct && object.typeConstruct.vectorNameConstruct)
					{
						vectorType = $$this.$$Analyzer.lookupType(object.typeConstruct.vectorNameConstruct, construct);
					}
					identifier = $es4.$$primitive(new Identifier(object.identifierToken.data, $$this.$$Analyzer.lookupType(object.typeConstruct, construct), vectorType));
					identifier.isVar = true;
				}
				else if (object.constructor == Construct.FunctionExpression)
				{
					identifier = $es4.$$primitive(new Identifier(object.identifierToken.data, $$this.$$Analyzer.lookupType(object.typeConstruct, construct)));
					identifier.isVar = true;
				}
				else if (object == 'super')
				{
					identifier = $es4.$$primitive(new Identifier(object, $$this.$$Analyzer.lookupType(construct.identifierToken.name, construct)));
				}
				else if (object == 'this')
				{
					if (!$$this.$$Analyzer._treatThisAsDynamic)
					{
						identifier = $es4.$$primitive(new Identifier(object, $$this.$$Analyzer.lookupType(construct.identifierToken.name, construct)));
					}
					else
					{
						identifier = $es4.$$primitive(new Identifier(object, $$this.$$Analyzer.lookupType('Object', construct)));
					}
				}
				else if (object == '$thisp')
				{
					identifier = $es4.$$primitive(new Identifier(object, $$this.$$Analyzer.lookupType(construct.identifierToken.name, construct)));
				}
				else if (object == 'arguments')
				{
					identifier = $es4.$$primitive(new Identifier(object, $$this.$$Analyzer.lookupType('Array')));
				}
				else if ($es4.$$is(object, String))
				{
					var globalIdentifier = null;
					for (var i = 0; i < Analyzer.globalIdentifiers.length; i++)
					{
						if (object != Analyzer.globalIdentifiers[i].name)
						{
							continue;
						}
						globalIdentifier = Analyzer.globalIdentifiers[i];
						break;
					}
					if (globalIdentifier)
					{
						identifier = $es4.$$primitive(new Identifier(object, $$this.$$Analyzer.lookupType(globalIdentifier.returnType, construct)));
						identifier.isGlobal = true;
					}
					else
					{
						identifier = $es4.$$primitive(new Identifier(object, $$this.$$Analyzer.lookupType(object, construct)));
						identifier.isType = true;
						identifier.isGlobal = true;
						identifier.construct = $$this.$$Analyzer.lookupType(object, construct).construct;
					}
				}
				if (object.constructor == Construct.PropertyConstruct || object.constructor == Construct.MethodConstruct || object.constructor == Construct.VarStatement)
				{
					if (object.typeConstruct && object.typeConstruct.vectorNameConstruct)
					{
						vectorType = $$this.$$Analyzer.lookupType(object.typeConstruct.vectorNameConstruct, construct);
					}
				}
				if (object.constructor == Construct.PropertyConstruct)
				{
					if (object.namespaceToken && object.namespaceToken.data == 'private' && !$$this.$$Analyzer._doNotTreatPrivateMethodsAsNative)
					{
						object.isNative = true;
					}
					if (object.namespaceToken && object.namespaceToken.data == 'private')
					{
						object.isPrivate = true;
					}
					var type = $$this.$$Analyzer.lookupType(object.typeConstruct, construct);
					if (object.isNative && !object.valueExpression && type.fullyQualifiedName != '*' && type.fullyQualifiedName != 'void')
					{
						switch (type.fullyQualifiedName)
						{
							case 'Number':
								object.valueExpression = Construct.getNewExpression(Token.getNewToken(Token.NaNTokenType, 'NaN'));
								break;
							case 'uint':
							case 'int':
								object.valueExpression = Construct.getNewNumberExpression();
								object.valueExpression.numberToken = Token.getNewToken(Token.NumberTokenType, '0');
								break;
							case 'Boolean':
								object.valueExpression = Construct.getNewBooleanExpression();
								object.valueExpression.booleanToken = Token.getNewToken(Token.BooleanTokenType, 'false');
								break;
							default:
								object.valueExpression = Construct.getNewExpression(Token.getNewToken(Token.NullTokenType, 'null'));
						}
					}
					identifier = $es4.$$primitive(new Identifier(object.identifierToken.data, type, vectorType));
					identifier.isProperty = !object.isNative;
					identifier.isInternal = object.isInternal;
					identifier.isNative = object.isNative;
					identifier.isVar = identifier.isVarInitialized = object.isNative;
					identifier.isPrivate = object.isPrivate && !object.isNative;
					if (object.isNative && object.valueExpression)
					{
						object.coerce = $$this.$$Analyzer.isCoerceRequired($$this.$$Analyzer.analyzeExpression(object.valueExpression, $$this.$$Analyzer._indent, false, construct), identifier.type, identifier);
					}
					if (object.namespaceKeywordToken)
					{
						var namespaceObj = $$this.$$Analyzer._namespaces[$$this.$$Analyzer._level]['_' + object.identifierToken.data] = $es4.$$primitive(new NamespaceObj(object.identifierToken.data, undefined, identifier));
						if (object.staticToken)
						{
							namespaceObj.isStatic = true;
						}
						namespaceObj.namespaceIsPrivate = object.namespaceToken.data == 'private';
						identifier.isNamespace = namespaceObj;
					}
					identifier.namespaceObj = $$this.$$Analyzer.lookupNamespace(object.namespaceToken);
					if (object.staticToken)
					{
						identifier.isStatic = true;
						identifier.scope = $$this.$$Analyzer.lookupType(construct.identifierToken.data, construct);
					}
				}
				else if (object.constructor == Construct.MethodConstruct)
				{
					if (object.namespaceToken && object.namespaceToken.data == 'private' && !$$this.$$Analyzer._doNotTreatPrivateMethodsAsNative)
					{
						object.isNative = true;
					}
					if (object.namespaceToken && object.namespaceToken.data == 'private')
					{
						object.isPrivate = true;
					}
					identifier = $es4.$$primitive(new Identifier(object.identifierToken.data, $$this.$$Analyzer.lookupType(object.typeConstruct, construct), vectorType));
					identifier.isMethod = !object.isNative;
					identifier.isInternal = object.isInternal;
					identifier.isNative = object.isNative;
					identifier.isVar = identifier.isVarInitialized = object.isNative;
					identifier.isPrivate = object.isPrivate && !object.isNative;
					if (object.namespaceKeywordToken)
					{
						throw $es4.$$primitive(new Error('test'));
					}
					identifier.namespaceObj = $$this.$$Analyzer.lookupNamespace(object.namespaceToken);
					if (object.staticToken)
					{
						identifier.isStatic = true;
						identifier.scope = $$this.$$Analyzer.lookupType(construct.identifierToken.data, construct);
					}
				}
				else if (object.constructor == Construct.VarStatement)
				{
					identifier = $es4.$$primitive(new Identifier(object.identifierToken.data, $$this.$$Analyzer.lookupType(object.typeConstruct, construct), vectorType));
					identifier.isVar = true;
				}
				else if ($es4.$$is(object, Type))
				{
					identifier = $es4.$$primitive(new Identifier(object.name, object));
				}
				if (identifier)
				{
					var name = (identifier.namespaceObj && identifier.namespaceObj.isCustom ? identifier.namespaceObj.name + ':::' : '') + identifier.name;
					return $$this.$$Analyzer._identifiers[$$this.$$Analyzer._level]['_' + name] = identifier;
				}
				throw $es4.$$primitive(new Error('unknown object passed into registerIdentifier: ' + object.constructor));
			}

			return $$this.$$Analyzer.$$p.$$registerIdentifier || ($$this.$$Analyzer.$$p.$$registerIdentifier = registerIdentifier);
		}};


		//private instance method
		Analyzer.prototype.$$v.lookupIdentifier = {
		get:function ()
		{
			var $$this = this.$$this;

			function lookupIdentifier($$$$object, $$$$namespaceObj)
			{
				//set default parameter values
				var object = $$$$object;
				var namespaceObj = (1 > arguments.length - 1) ? null : $$$$namespaceObj;

				if (!object)
				{
					throw $es4.$$primitive(new Error('cannot find empty identifier'));
				}
				else if ($es4.$$is(object, String))
				{
					if (object == 'Vector')
					{
						object = 'Array';
					}
					if (namespaceObj && namespaceObj.isCustom)
					{
						object = namespaceObj.name + ':::' + object;
					}
					var level = $$this.$$Analyzer._level;
					var useNamespaces = $$this.$$Analyzer.getUseNamespaces();
					while (level >= 0)
					{
						if ($$this.$$Analyzer._identifiers[level].hasOwnProperty('_' + object))
						{
							return $$this.$$Analyzer._identifiers[level]['_' + object];
						}
						if (!namespaceObj && useNamespaces.length)
						{
							for (var i = 0; i < useNamespaces.length; i++)
							{
								var innerObject = useNamespaces[i] + ':::' + object;
								if ($$this.$$Analyzer._identifiers[level].hasOwnProperty('_' + innerObject))
								{
									return $$this.$$Analyzer._identifiers[level]['_' + innerObject];
								}
							}
						}
						level--;
					}
					$$this.$$Analyzer.output();
					throw $es4.$$primitive(new Error('could not lookup identifier: ' + object));
				}
				else if (object.constructor == Construct.IdentifierConstruct)
				{
					return $$this.$$Analyzer.lookupIdentifier(object.identifierToken.data, namespaceObj);
				}
				else if (object.constructor == Construct.MethodConstruct || object.constructor == Construct.PropertyConstruct)
				{
					return $$this.$$Analyzer.lookupIdentifier(object.identifierToken.data, $$this.$$Analyzer.lookupNamespace(object.namespaceToken));
				}
				else if (object.constructor == Construct.ThisConstruct)
				{
					return $$this.$$Analyzer.lookupIdentifier('this');
				}
				else if (object.constructor == Construct.SuperConstruct)
				{
					return $$this.$$Analyzer.lookupIdentifier('super');
				}
				else if (object.constructor == Construct.NameConstruct)
				{
					return $$this.$$Analyzer.lookupIdentifier(Construct.nameConstructToString(object), namespaceObj);
				}
				else if (object.constructor == Construct.PackageConstruct)
				{
					if (object.classConstruct)
					{
						return $$this.$$Analyzer.lookupIdentifier(object.classConstruct.identifierToken.data);
					}
					else if (object.interfaceConstruct)
					{
						return $$this.$$Analyzer.lookupIdentifier(object.interfaceConstruct.identifierToken.data);
					}
					else if (object.methodConstruct)
					{
						return $$this.$$Analyzer.lookupIdentifier(object.methodConstruct.identifierToken.data);
					}
					else if (object.propertyConstruct)
					{
						return $$this.$$Analyzer.lookupIdentifier(object.propertyConstruct.identifierToken.data);
					}
				}
				throw $es4.$$primitive(new Error('unknown object passed into lookupIdentifier: ' + object.constructor));
			}

			return $$this.$$Analyzer.$$p.$$lookupIdentifier || ($$this.$$Analyzer.$$p.$$lookupIdentifier = lookupIdentifier);
		}};


		//private instance method
		Analyzer.prototype.$$v.hasIdentifier = {
		get:function ()
		{
			var $$this = this.$$this;

			function hasIdentifier($$$$object, $$$$namespaceObj, $$$$currentLevel)
			{
				//set default parameter values
				var object = $$$$object;
				var namespaceObj = (1 > arguments.length - 1) ? null : $$$$namespaceObj;
				var currentLevel = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$currentLevel, Boolean);

				if (!object)
				{
					throw $es4.$$primitive(new Error('cannot find empty identifier'));
				}
				else if ($es4.$$is(object, String))
				{
					if (object == 'Vector')
					{
						object = 'Array';
					}
					if (namespaceObj && namespaceObj.isCustom)
					{
						object = namespaceObj.name + ':::' + object;
					}
					var level = $$this.$$Analyzer._level;
					var useNamespaces = $$this.$$Analyzer.getUseNamespaces();
					while (level >= 0)
					{
						if ($$this.$$Analyzer._identifiers[level].hasOwnProperty('_' + object))
						{
							return true;
						}
						if (!namespaceObj && useNamespaces.length)
						{
							for (var i = 0; i < useNamespaces.length; i++)
							{
								var innerObject = useNamespaces[i] + ':::' + object;
								if ($$this.$$Analyzer._identifiers[level].hasOwnProperty('_' + innerObject))
								{
									return true;
								}
							}
						}
						if (currentLevel)
						{
							break;
						}
						level--;
					}
					return false;
				}
				else if (object.constructor == Construct.PropertyConstruct)
				{
					return $$this.$$Analyzer.hasIdentifier(object.identifierToken.data, $$this.$$Analyzer.lookupNamespace(object.namespaceToken));
				}
				else if (object.constructor == Construct.MethodConstruct)
				{
					return $$this.$$Analyzer.hasIdentifier(object.identifierToken.data, $$this.$$Analyzer.lookupNamespace(object.namespaceToken));
				}
				throw $es4.$$primitive(new Error('unknown object passed into hasIdentifier: ' + object.constructor));
			}

			return $$this.$$Analyzer.$$p.$$hasIdentifier || ($$this.$$Analyzer.$$p.$$hasIdentifier = hasIdentifier);
		}};


		//private instance method
		Analyzer.prototype.$$v.registerType = {
		get:function ()
		{
			var $$this = this.$$this;

			function registerType($$$$object, $$$$rootConstruct, $$$$construct, $$$$isGlobal)
			{
				//set default parameter values
				var object = $$$$object;
				var rootConstruct = $$$$rootConstruct;
				var construct = $$$$construct;
				var isGlobal = $$$$isGlobal;

				if (!object)
				{
					throw $es4.$$primitive(new Error('cannot register empty type'));
				}
				else if (object == 'PACKAGE')
				{
					var type = $es4.$$primitive(new Type(object, object, rootConstruct, construct));
					type.isGlobal = isGlobal;
					$$this.$$Analyzer._types['_' + object] = type;
					return;
				}
				else if ($es4.$$is(object, String))
				{
					if (object == 'Vector')
					{
						return;
					}
					var type = $es4.$$primitive(new Type(object, object, rootConstruct, construct));
					type.isGlobal = isGlobal;
					$$this.$$Analyzer._types['_' + object] = type;
					if (isGlobal)
					{
						$$this.$$Analyzer.registerIdentifier(object, rootConstruct);
					}
					return;
				}
				throw $es4.$$primitive(new Error('unknown object passed into registerType: ' + object.constructor));
			}

			return $$this.$$Analyzer.$$p.$$registerType || ($$this.$$Analyzer.$$p.$$registerType = registerType);
		}};


		//private instance method
		Analyzer.prototype.$$v.lookupType = {
		get:function ()
		{
			var $$this = this.$$this;

			function lookupType($$$$object, $$$$construct)
			{
				//set default parameter values
				var object = $$$$object;
				var construct = (1 > arguments.length - 1) ? null : $$$$construct;

				if (!object)
				{
					return $$this.$$Analyzer.lookupType('void', construct);
				}
				else if ($es4.$$is(object, String))
				{
					if (object == 'Vector')
					{
						object = 'Array';
					}
					if ($$this.$$Analyzer._types.hasOwnProperty('_' + object))
					{
						return $$this.$$Analyzer._types['_' + object];
					}
					if (!construct)
					{
						$$this.$$Analyzer.output();
						throw $es4.$$primitive(new Error('cound not lookup type: ' + object));
					}
					var fullyQualifiedName = $$this.$$Analyzer.lookupFullyQualifiedName(construct, object);
					return $$this.$$Analyzer._types['_' + object] = (construct.isInternal) ? $es4.$$primitive(new Type(object, fullyQualifiedName, $$this.$$Analyzer._rootConstructs[fullyQualifiedName], construct)) : $es4.$$primitive(new Type(object, fullyQualifiedName, $$this.$$Analyzer._rootConstructs[fullyQualifiedName], $$this.$$Analyzer.lookupConstructInRootConstruct($$this.$$Analyzer._rootConstructs[fullyQualifiedName], fullyQualifiedName)));
				}
				else if (object.constructor == Construct.TypeConstruct)
				{
					if (!object.nameConstruct)
					{
						return $$this.$$Analyzer.lookupType('void', construct);
					}
					var name = (Construct.nameConstructToString(object.nameConstruct) == 'Vector') ? 'Array' : Construct.nameConstructToString(object.nameConstruct);
					return $$this.$$Analyzer.lookupType(name, construct);
				}
				else if (object.constructor == Construct.NameConstruct)
				{
					return $$this.$$Analyzer.lookupType(Construct.nameConstructToString(object), construct);
				}
				throw $es4.$$primitive(new Error('unknown object passed into lookupType: ' + object.constructor));
			}

			return $$this.$$Analyzer.$$p.$$lookupType || ($$this.$$Analyzer.$$p.$$lookupType = lookupType);
		}};


		//private instance method
		Analyzer.prototype.$$v.analyzeImplicitImports = {
		get:function ()
		{
			var $$this = this.$$this;

			function analyzeImplicitImports($$$$construct)
			{
				//set default parameter values
				var construct = $$$$construct;

				if (construct.isInternal)
				{
					return;
				}
				var importConstructs = (construct.isInternal) ? $$this.$$Analyzer._rootConstruct.importConstructs : $$this.$$Analyzer._rootConstruct.packageConstruct.importConstructs;
				var rootConstructs = {};
				outer:				for (var id in $$this.$$Analyzer._rootConstructs)
				{
					var rootConstruct = $$this.$$Analyzer._rootConstructs[id];
					if (!rootConstruct)
					{
						throw $es4.$$primitive(new Error('Root construct null for id: ' + id));
					}
					if (!rootConstruct.packageConstruct)
					{
						throw $es4.$$primitive(new Error('Package construct missing in: ' + id));
					}
					if (rootConstruct.packageConstruct.nameConstruct && !construct.packageConstruct.nameConstruct)
					{
						continue;
					}
					if (!rootConstruct.packageConstruct.nameConstruct && construct.packageConstruct.nameConstruct)
					{
						continue;
					}
					if (rootConstruct.packageConstruct.nameConstruct && construct.packageConstruct.nameConstruct && Construct.nameConstructToString(rootConstruct.packageConstruct.nameConstruct) != Construct.nameConstructToString(construct.packageConstruct.nameConstruct))
					{
						continue;
					}
					var identifier = $$this.$$Analyzer.lookupIdentifier(rootConstruct.packageConstruct);
					if (identifier.isGlobal)
					{
						continue;
					}
					var fullyQualifiedName = $$this.$$Analyzer.lookupFullyQualifiedName(construct, identifier.name);
					if (!$$this.$$Analyzer.lookupType(identifier.name, construct).accessed && !$$this.$$Analyzer.lookupIdentifier(identifier.name).accessed)
					{
						continue;
					}
					rootConstructs[id] = rootConstruct;
					construct.packageName = $$this.$$Analyzer.lookupPackageName(construct, identifier.name);
					var packageName = construct.packageName.split('.');
					var nameConstruct = Construct.getNewNameConstruct();
					for (var i = 0; i < packageName.length; i++)
					{
						nameConstruct.identifierTokens.push(Token.getNewToken(Token.IdentifierTokenType, packageName[i]));
					}
					nameConstruct.identifierTokens.push(Token.getNewToken(Token.IdentifierTokenType, identifier.name));
					var importConstruct = Construct.getNewImportConstruct();
					importConstruct.nameConstruct = nameConstruct;
					for (var i = 0; i < importConstructs.length; i++)
					{
						if (Construct.nameConstructToString(importConstruct.nameConstruct) == Construct.nameConstructToString(importConstructs[i].nameConstruct))
						{
							continue outer;
						}
					}
					importConstructs.push(importConstruct);
				}
			}

			return $$this.$$Analyzer.$$p.$$analyzeImplicitImports || ($$this.$$Analyzer.$$p.$$analyzeImplicitImports = analyzeImplicitImports);
		}};


		//private instance method
		Analyzer.prototype.$$v.analyzeInterfaceConstruct = {
		get:function ()
		{
			var $$this = this.$$this;

			function analyzeInterfaceConstruct($$$$construct)
			{
				//set default parameter values
				var construct = $$$$construct;

				$$this.$$Analyzer.upLevel();
				$$this.$$Analyzer.registerConstruct(construct, true);
				$$this.$$Analyzer.analyzeImplicitImports(construct);
				if (construct.extendsNameConstructs.length)
				{
					for (var i = 0; i < construct.extendsNameConstructs.length; i++)
					{
						var identifier = construct.extendsNameConstructs[i].identifier = $$this.$$Analyzer.lookupIdentifier(construct.extendsNameConstructs[i], construct);
						var type = construct.extendsNameConstructs[i].type = $$this.$$Analyzer.lookupType(construct.extendsNameConstructs[i], construct);
						type.accessed = true;
					}
				}
				var packageName = $$this.$$Analyzer.lookupPackageName(construct, construct.identifierToken.data);
				construct.packageName = packageName;
				$$this.$$Analyzer.downLevel();
			}

			return $$this.$$Analyzer.$$p.$$analyzeInterfaceConstruct || ($$this.$$Analyzer.$$p.$$analyzeInterfaceConstruct = analyzeInterfaceConstruct);
		}};


		//private instance method
		Analyzer.prototype.$$v.analyzePropertyConstruct = {
		get:function ()
		{
			var $$this = this.$$this;

			function analyzePropertyConstruct($$$$construct)
			{
				//set default parameter values
				var construct = $$$$construct;

				$$this.$$Analyzer.analyzeExpression(construct.valueExpression, $$this.$$Analyzer._indent, false, construct);
			}

			return $$this.$$Analyzer.$$p.$$analyzePropertyConstruct || ($$this.$$Analyzer.$$p.$$analyzePropertyConstruct = analyzePropertyConstruct);
		}};


		//private instance method
		Analyzer.prototype.$$v.analyzeFunctionConstruct = {
		get:function ()
		{
			var $$this = this.$$this;

			function analyzeFunctionConstruct($$$$construct)
			{
				//set default parameter values
				var construct = $$$$construct;

				$$this.$$Analyzer.upLevel();
				var importConstructs = $$this.$$Analyzer._rootConstruct.packageConstruct.importConstructs;
				var accessor = construct.getToken || construct.setToken;
				$$this.$$Analyzer.registerIdentifier('this', construct);
				$$this.$$Analyzer.registerIdentifier('arguments', construct);
				for (var id in $$this.$$Analyzer._rootConstructs)
				{
					var rootConstruct = $$this.$$Analyzer._rootConstructs[id];
					if (rootConstruct.packageConstruct.nameConstruct && !construct.packageConstruct.nameConstruct)
					{
						continue;
					}
					if (!rootConstruct.packageConstruct.nameConstruct && construct.packageConstruct.nameConstruct)
					{
						continue;
					}
					if (rootConstruct.packageConstruct.nameConstruct && construct.packageConstruct.nameConstruct && Construct.nameConstructToString(rootConstruct.packageConstruct.nameConstruct) != Construct.nameConstructToString(construct.packageConstruct.nameConstruct))
					{
						continue;
					}
					if (Analyzer._globals[id])
					{
						continue;
					}
					$$this.$$Analyzer.registerIdentifier(rootConstruct.packageConstruct, construct);
				}
				for (var i = 0; i < importConstructs.length; i++)
				{
					$$this.$$Analyzer.registerIdentifier(importConstructs[i], construct);
				}
				analyzeClassFunction(construct);
				$$this.$$Analyzer.analyzeImplicitImports(construct);
				$$this.$$Analyzer.downLevel();

				function analyzeClassFunction($$$$construct) 
				{
					//set default parameter values
					var construct = $$$$construct;

					$$this.$$Analyzer.upLevel();
					for (var j = 0; j < construct.namedFunctionExpressions.length; j++)
					{
						$$this.$$Analyzer.registerIdentifier(construct.namedFunctionExpressions[j], construct);
					}
					$$this.$$Analyzer.analyzeParameters(construct, construct);
					if (!construct.isJavaScript)
					{
						$$this.$$Analyzer._returnTypeStack.push($$this.$$Analyzer.lookupType(construct.typeConstruct, construct));
						$$this.$$Analyzer.analyzeStatements(construct.bodyStatements, $$this.$$Analyzer._indent + 1, construct);
						$$this.$$Analyzer._returnTypeStack.pop();
					}
					$$this.$$Analyzer.downLevel();
				}
;
			}

			return $$this.$$Analyzer.$$p.$$analyzeFunctionConstruct || ($$this.$$Analyzer.$$p.$$analyzeFunctionConstruct = analyzeFunctionConstruct);
		}};


		//private instance method
		Analyzer.prototype.$$v.analyzeClassConstruct = {
		get:function ()
		{
			var $$this = this.$$this;

			function analyzeClassConstruct($$$$construct)
			{
				//set default parameter values
				var construct = $$$$construct;

				$$this.$$Analyzer.upLevel();
				$$this.$$Analyzer.registerConstruct(construct, true);
				for (var i = 0; i < construct.useConstructs.length; i++)
				{
					$$this.$$Analyzer.registerUseNamespace(construct.useConstructs[i]);
				}
				$$this.$$Analyzer.analyzeNamespaces(construct);
				$$this.$$Analyzer.analyzeProperties(construct, true);
				$$this.$$Analyzer.analyzeClassInitializer(construct);
				$$this.$$Analyzer.analyzeMethods(construct, true);
				$$this.$$Analyzer.analyzeAccessors(construct, true);
				$$this.$$Analyzer.analyzeClassFunction(construct);
				$$this.$$Analyzer.analyzeInternalClasses(construct);
				$$this.$$Analyzer.analyzeInternalInterfaces(construct);
				$$this.$$Analyzer.analyzeClassReturnStatement(construct);
				$$this.$$Analyzer.analyzeImplicitImports(construct);
				$$this.$$Analyzer.downLevel();
			}

			return $$this.$$Analyzer.$$p.$$analyzeClassConstruct || ($$this.$$Analyzer.$$p.$$analyzeClassConstruct = analyzeClassConstruct);
		}};


		//private instance method
		Analyzer.prototype.$$v.analyzeClassInitializer = {
		get:function ()
		{
			var $$this = this.$$this;

			function analyzeClassInitializer($$$$construct)
			{
				//set default parameter values
				var construct = $$$$construct;

				$$this.$$Analyzer._inStaticFunction = true;
				$$this.$$Analyzer.analyzeStatements(construct.initializerStatements, $$this.$$Analyzer._indent + 2, construct);
				$$this.$$Analyzer._inStaticFunction = false;
			}

			return $$this.$$Analyzer.$$p.$$analyzeClassInitializer || ($$this.$$Analyzer.$$p.$$analyzeClassInitializer = analyzeClassInitializer);
		}};


		//private instance method
		Analyzer.prototype.$$v.analyzeClassFunction = {
		get:function ()
		{
			var $$this = this.$$this;

			function analyzeClassFunction($$$$construct)
			{
				//set default parameter values
				var construct = $$$$construct;

				$$this.$$Analyzer.upLevel();
				$$this.$$Analyzer.registerConstruct(construct, false);
				$$this.$$Analyzer.analyzeProperties(construct, false);
				$$this.$$Analyzer.analyzeConstructor(construct);
				$$this.$$Analyzer.analyzeMethods(construct, false);
				$$this.$$Analyzer.analyzeAccessors(construct, false);
				$$this.$$Analyzer.downLevel();
			}

			return $$this.$$Analyzer.$$p.$$analyzeClassFunction || ($$this.$$Analyzer.$$p.$$analyzeClassFunction = analyzeClassFunction);
		}};


		//private instance method
		Analyzer.prototype.$$v.analyzeInternalClasses = {
		get:function ()
		{
			var $$this = this.$$this;

			function analyzeInternalClasses($$$$construct)
			{
				//set default parameter values
				var construct = $$$$construct;

				if (construct.isInternal)
				{
					return;
				}
				for (var i = 0; i < $$this.$$Analyzer._rootConstruct.classConstructs.length; i++)
				{
					$$this.$$Analyzer.analyzeClassConstruct($$this.$$Analyzer._rootConstruct.classConstructs[i]);
				}
			}

			return $$this.$$Analyzer.$$p.$$analyzeInternalClasses || ($$this.$$Analyzer.$$p.$$analyzeInternalClasses = analyzeInternalClasses);
		}};


		//private instance method
		Analyzer.prototype.$$v.analyzeInternalInterfaces = {
		get:function ()
		{
			var $$this = this.$$this;

			function analyzeInternalInterfaces($$$$construct)
			{
				//set default parameter values
				var construct = $$$$construct;

				if (construct.isInternal)
				{
					return;
				}
				for (var i = 0; i < $$this.$$Analyzer._rootConstruct.interfaceConstructs.length; i++)
				{
					$$this.$$Analyzer.analyzeInterfaceConstruct($$this.$$Analyzer._rootConstruct.interfaceConstructs[i]);
				}
			}

			return $$this.$$Analyzer.$$p.$$analyzeInternalInterfaces || ($$this.$$Analyzer.$$p.$$analyzeInternalInterfaces = analyzeInternalInterfaces);
		}};


		//private instance method
		Analyzer.prototype.$$v.analyzeClassReturnStatement = {
		get:function ()
		{
			var $$this = this.$$this;

			function analyzeClassReturnStatement($$$$construct)
			{
				//set default parameter values
				var construct = $$$$construct;

				if (construct.extendsNameConstruct)
				{
					var identifier = construct.extendsNameConstruct.identifier = $$this.$$Analyzer.lookupIdentifier(construct.extendsNameConstruct, construct);
					var type = construct.extendsNameConstruct.type = $$this.$$Analyzer.lookupType(construct.extendsNameConstruct, construct);
					type.accessed = true;
				}
				if (construct.implementsNameConstructs.length)
				{
					for (var i = 0; i < construct.implementsNameConstructs.length; i++)
					{
						var identifier = construct.implementsNameConstructs[i].identifier = $$this.$$Analyzer.lookupIdentifier(construct.implementsNameConstructs[i], construct);
						var type = construct.implementsNameConstructs[i].type = $$this.$$Analyzer.lookupType(construct.implementsNameConstructs[i], construct);
						type.accessed = true;
					}
				}
				var packageName = $$this.$$Analyzer.lookupPackageName(construct, construct.identifierToken.data);
				construct.packageName = packageName;
			}

			return $$this.$$Analyzer.$$p.$$analyzeClassReturnStatement || ($$this.$$Analyzer.$$p.$$analyzeClassReturnStatement = analyzeClassReturnStatement);
		}};


		//private instance method
		Analyzer.prototype.$$v.analyzeConstructor = {
		get:function ()
		{
			var $$this = this.$$this;

			function analyzeConstructor($$$$construct)
			{
				//set default parameter values
				var construct = $$$$construct;

				$$this.$$Analyzer.upLevel();
				var methodConstruct = construct.constructorMethodConstruct;
				if (methodConstruct)
				{
					for (var j = 0; j < methodConstruct.namedFunctionExpressions.length; j++)
					{
						$$this.$$Analyzer.registerIdentifier(methodConstruct.namedFunctionExpressions[j], construct);
					}
				}
				if (methodConstruct)
				{
					$$this.$$Analyzer.analyzeParameters(methodConstruct, construct);
				}
				if (methodConstruct)
				{
					$$this.$$Analyzer.analyzeStatements(methodConstruct.bodyStatements, $$this.$$Analyzer._indent + 1, construct);
				}
				$$this.$$Analyzer.downLevel();
			}

			return $$this.$$Analyzer.$$p.$$analyzeConstructor || ($$this.$$Analyzer.$$p.$$analyzeConstructor = analyzeConstructor);
		}};


		//private instance method
		Analyzer.prototype.$$v.analyzeNamespaces = {
		get:function ()
		{
			var $$this = this.$$this;

			function analyzeNamespaces($$$$construct)
			{
				//set default parameter values
				var construct = $$$$construct;

				for (var i = 0; i < construct.propertyConstructs.length; i++)
				{
					var propertyConstruct = construct.propertyConstructs[i];
					if (!propertyConstruct.namespaceKeywordToken)
					{
						continue;
					}
					var identifier = $$this.$$Analyzer.lookupIdentifier(propertyConstruct);
					identifier.type.accessed = true;
					propertyConstruct.identifier = identifier;
					construct.namespacePropertyConstructs.push(propertyConstruct);
					if (propertyConstruct.valueExpression)
					{
						$$this.$$Analyzer.analyzeExpression(propertyConstruct.valueExpression, $$this.$$Analyzer._indent, false, construct);
					}
				}
			}

			return $$this.$$Analyzer.$$p.$$analyzeNamespaces || ($$this.$$Analyzer.$$p.$$analyzeNamespaces = analyzeNamespaces);
		}};


		//private instance method
		Analyzer.prototype.$$v.analyzeProperties = {
		get:function ()
		{
			var $$this = this.$$this;

			function analyzeProperties($$$$construct, $$$$isClassLevel)
			{
				//set default parameter values
				var construct = $$$$construct;
				var isClassLevel = $$$$isClassLevel;

				for (var i = 0; i < construct.propertyConstructs.length; i++)
				{
					var propertyConstruct = construct.propertyConstructs[i];
					if (isClassLevel && !propertyConstruct.staticToken || !isClassLevel && propertyConstruct.staticToken)
					{
						continue;
					}
					if (propertyConstruct.namespaceKeywordToken)
					{
						continue;
					}
					var identifier = $$this.$$Analyzer.lookupIdentifier(propertyConstruct);
					identifier.type.accessed = true;
					propertyConstruct.identifier = identifier;
					if (isClassLevel)
					{
						construct.staticPropertyConstructs.push(propertyConstruct);
					}
					else
					{
						construct.instancePropertyConstructs.push(propertyConstruct);
					}
					if (propertyConstruct.valueExpression)
					{
						$$this.$$Analyzer.analyzeExpression(propertyConstruct.valueExpression, $$this.$$Analyzer._indent, false, construct);
					}
				}
			}

			return $$this.$$Analyzer.$$p.$$analyzeProperties || ($$this.$$Analyzer.$$p.$$analyzeProperties = analyzeProperties);
		}};


		//private instance method
		Analyzer.prototype.$$v.analyzeMethods = {
		get:function ()
		{
			var $$this = this.$$this;

			function analyzeMethods($$$$construct, $$$$isClassLevel)
			{
				//set default parameter values
				var construct = $$$$construct;
				var isClassLevel = $$$$isClassLevel;

				if (isClassLevel)
				{
					$$this.$$Analyzer._inStaticFunction = true;
				}
				for (var i = 0; i < construct.methodConstructs.length; i++)
				{
					var methodConstruct = construct.methodConstructs[i];
					if (isClassLevel && !methodConstruct.staticToken || !isClassLevel && methodConstruct.staticToken)
					{
						continue;
					}
					if (methodConstruct.setToken || methodConstruct.getToken)
					{
						continue;
					}
					var identifier = $$this.$$Analyzer.lookupIdentifier(methodConstruct);
					identifier.type.accessed = true;
					methodConstruct.identifier = identifier;
					if (isClassLevel)
					{
						construct.staticMethodConstructs.push(methodConstruct);
					}
					else
					{
						construct.instanceMethodConstructs.push(methodConstruct);
					}
					$$this.$$Analyzer.upLevel();
					$$this.$$Analyzer.registerIdentifier('arguments', construct);
					for (var j = 0; j < methodConstruct.namedFunctionExpressions.length; j++)
					{
						$$this.$$Analyzer.registerIdentifier(methodConstruct.namedFunctionExpressions[j], construct);
					}
					$$this.$$Analyzer.analyzeParameters(methodConstruct, construct);
					if (!methodConstruct.isJavaScript)
					{
						if (methodConstruct.identifier.namespaceObj.isCustom)
						{
							$$this.$$Analyzer._inNamespacedFunction = (methodConstruct.identifier.namespaceObj.importID) ? methodConstruct.identifier.namespaceObj.importID : '$thisp.' + methodConstruct.identifier.namespaceObj.name;
						}
						$$this.$$Analyzer._returnTypeStack.push($$this.$$Analyzer.lookupType(methodConstruct.typeConstruct, construct));
						$$this.$$Analyzer.analyzeStatements(methodConstruct.bodyStatements, $$this.$$Analyzer._indent + 1, construct);
						$$this.$$Analyzer._returnTypeStack.pop();
						$$this.$$Analyzer._inNamespacedFunction = false;
					}
					$$this.$$Analyzer.downLevel();
				}
				if (isClassLevel)
				{
					$$this.$$Analyzer._inStaticFunction = false;
				}
			}

			return $$this.$$Analyzer.$$p.$$analyzeMethods || ($$this.$$Analyzer.$$p.$$analyzeMethods = analyzeMethods);
		}};


		//private instance method
		Analyzer.prototype.$$v.analyzeAccessors = {
		get:function ()
		{
			var $$this = this.$$this;

			function analyzeAccessors($$$$construct, $$$$isClassLevel)
			{
				//set default parameter values
				var construct = $$$$construct;
				var isClassLevel = $$$$isClassLevel;

				if (isClassLevel)
				{
					$$this.$$Analyzer._inStaticFunction = true;
				}
				var foundIndexes = [];

				function getMethodConstructJS($$$$methodConstruct, $$$$type) 
				{
					//set default parameter values
					var methodConstruct = $$$$methodConstruct;
					var type = $$$$type;

					if (!methodConstruct)
					{
						return;
					}
					$$this.$$Analyzer.upLevel();
					for (var j = 0; j < methodConstruct.namedFunctionExpressions.length; j++)
					{
						$$this.$$Analyzer.registerIdentifier(methodConstruct.namedFunctionExpressions[j], construct);
					}
					$$this.$$Analyzer.analyzeParameters(methodConstruct, construct);
					if (!methodConstruct.isJavaScript)
					{
						if (methodConstruct.identifier.namespaceObj.isCustom)
						{
							$$this.$$Analyzer._inNamespacedFunction = (methodConstruct.identifier.namespaceObj.importID) ? methodConstruct.identifier.namespaceObj.importID : '$thisp.' + methodConstruct.identifier.namespaceObj.name;
						}
						$$this.$$Analyzer._returnTypeStack.push(type);
						$$this.$$Analyzer.analyzeStatements(methodConstruct.bodyStatements, $$this.$$Analyzer._indent + 1, construct);
						$$this.$$Analyzer._returnTypeStack.pop();
						$$this.$$Analyzer._inNamespacedFunction = false;
					}
					$$this.$$Analyzer.downLevel();
				}
;

				for (var i = 0; i < construct.methodConstructs.length; i++)
				{
					var methodConstruct = construct.methodConstructs[i];
					if (foundIndexes[i])
					{
						continue;
					}
					if (!methodConstruct.setToken && !methodConstruct.getToken)
					{
						continue;
					}
					if (isClassLevel && !methodConstruct.staticToken || !isClassLevel && methodConstruct.staticToken)
					{
						continue;
					}
					var setterMethodConstruct = null;
					var getterMethodConstruct = null;
					if (methodConstruct.setToken)
					{
						setterMethodConstruct = methodConstruct;
						for (var j = 0; j < construct.methodConstructs.length; j++)
						{
							var innerMethodConstruct = construct.methodConstructs[j];
							if (!innerMethodConstruct.getToken)
							{
								continue;
							}
							if (innerMethodConstruct.identifierToken.data != setterMethodConstruct.identifierToken.data)
							{
								continue;
							}
							if (isClassLevel && !innerMethodConstruct.staticToken || !isClassLevel && innerMethodConstruct.staticToken)
							{
								continue;
							}
							if ($$this.$$Analyzer.lookupNamespace(innerMethodConstruct.namespaceToken) != $$this.$$Analyzer.lookupNamespace(setterMethodConstruct.namespaceToken))
							{
								continue;
							}
							var namespace1 = $$this.$$Analyzer.lookupNamespace(setterMethodConstruct.namespaceToken);
							var namespace2 = $$this.$$Analyzer.lookupNamespace(innerMethodConstruct.namespaceToken);
							if (namespace1 != namespace2)
							{
								continue;
							}
							getterMethodConstruct = innerMethodConstruct;
							foundIndexes[j] = true;
						}
					}
					else
					{
						getterMethodConstruct = methodConstruct;
						for (var j = 0; j < construct.methodConstructs.length; j++)
						{
							var innerMethodConstruct = construct.methodConstructs[j];
							if (!innerMethodConstruct.setToken)
							{
								continue;
							}
							if (innerMethodConstruct.identifierToken.data != getterMethodConstruct.identifierToken.data)
							{
								continue;
							}
							if (isClassLevel && !innerMethodConstruct.staticToken || !isClassLevel && innerMethodConstruct.staticToken)
							{
								continue;
							}
							if ($$this.$$Analyzer.lookupNamespace(innerMethodConstruct.namespaceToken) != $$this.$$Analyzer.lookupNamespace(getterMethodConstruct.namespaceToken))
							{
								continue;
							}
							var namespace1 = $$this.$$Analyzer.lookupNamespace(getterMethodConstruct.namespaceToken);
							var namespace2 = $$this.$$Analyzer.lookupNamespace(innerMethodConstruct.namespaceToken);
							if (namespace1 != namespace2)
							{
								continue;
							}
							setterMethodConstruct = innerMethodConstruct;
							foundIndexes[j] = true;
						}
					}
					if (setterMethodConstruct)
					{
						var identifier = $$this.$$Analyzer.lookupIdentifier(setterMethodConstruct);
						identifier.type.accessed = true;
						setterMethodConstruct.identifier = identifier;
					}
					if (getterMethodConstruct)
					{
						var identifier = $$this.$$Analyzer.lookupIdentifier(getterMethodConstruct);
						identifier.type.accessed = true;
						getterMethodConstruct.identifier = identifier;
					}
					var isCNamespace = methodConstruct.identifier.namespaceObj.isCustom;
					if (isClassLevel)
					{
						construct.staticAccessorConstructs.push({getter:getterMethodConstruct, setter:setterMethodConstruct});
					}
					else
					{
						construct.instanceAccessorConstructs.push({getter:getterMethodConstruct, setter:setterMethodConstruct});
					}
					if (getterMethodConstruct)
					{
						getMethodConstructJS(getterMethodConstruct, getterMethodConstruct.identifier.type);
					}
					if (setterMethodConstruct)
					{
						getMethodConstructJS(setterMethodConstruct, setterMethodConstruct.identifier.type);
					}
				}
				if (isClassLevel)
				{
					$$this.$$Analyzer._inStaticFunction = false;
				}
			}

			return $$this.$$Analyzer.$$p.$$analyzeAccessors || ($$this.$$Analyzer.$$p.$$analyzeAccessors = analyzeAccessors);
		}};


		//private instance method
		Analyzer.prototype.$$v.registerConstruct = {
		get:function ()
		{
			var $$this = this.$$this;

			function registerConstruct($$$$construct, $$$$isClassLevel)
			{
				//set default parameter values
				var construct = $$$$construct;
				var isClassLevel = $$$$isClassLevel;

				if (isClassLevel)
				{
					if (!construct.isInternal)
					{
						for (var id in $$this.$$Analyzer._rootConstructs)
						{
							var rootConstruct = $$this.$$Analyzer._rootConstructs[id];
							if (!rootConstruct)
							{
								throw $es4.$$primitive(new Error('Root construct null for id: ' + id));
							}
							if (!rootConstruct.packageConstruct)
							{
								throw $es4.$$primitive(new Error('Package construct missing in: ' + id));
							}
							if (rootConstruct.packageConstruct.nameConstruct && !construct.packageConstruct.nameConstruct)
							{
								continue;
							}
							if (!rootConstruct.packageConstruct.nameConstruct && construct.packageConstruct.nameConstruct)
							{
								continue;
							}
							if (rootConstruct.packageConstruct.nameConstruct && construct.packageConstruct.nameConstruct && Construct.nameConstructToString(rootConstruct.packageConstruct.nameConstruct) != Construct.nameConstructToString(construct.packageConstruct.nameConstruct))
							{
								continue;
							}
							if ($$this.$$Analyzer.hasIdentifier(id) && $$this.$$Analyzer.lookupIdentifier(id).isGlobal)
							{
								continue;
							}
							$$this.$$Analyzer.registerIdentifier(rootConstruct.packageConstruct, construct);
						}
					}
					var importConstructs = (construct.isInternal) ? $$this.$$Analyzer._rootConstruct.importConstructs : $$this.$$Analyzer._rootConstruct.packageConstruct.importConstructs;
					for (var i = 0; i < importConstructs.length; i++)
					{
						$$this.$$Analyzer.registerIdentifier(importConstructs[i], construct);
					}
				}
				else
				{
					$$this.$$Analyzer.registerIdentifier('this', construct);
					$$this.$$Analyzer.registerIdentifier('$thisp', construct);
					if (construct.extendsNameConstruct)
					{
						$$this.$$Analyzer.registerIdentifier('super', construct);
					}
				}
				var name = construct.identifierToken.data;
				var nextConstruct = construct;
				while (true)
				{
					for (var i = 0; i < nextConstruct.propertyConstructs.length; i++)
					{
						var propertyConstruct = nextConstruct.propertyConstructs[i];
						if (!isClassLevel)
						{
							continue;
						}
						if (!propertyConstruct.namespaceKeywordToken)
						{
							continue;
						}
						$$this.$$Analyzer.registerIdentifier(propertyConstruct, nextConstruct);
					}
					if (!nextConstruct.extendsNameConstruct)
					{
						break;
					}
					var fullyQualifiedName = $$this.$$Analyzer.lookupFullyQualifiedName(nextConstruct, nextConstruct.extendsNameConstruct);
					if (fullyQualifiedName.split('.').pop() == name)
					{
						construct.extendsNameConflict = true;
					}
					nextConstruct = $$this.$$Analyzer.lookupConstructInRootConstruct($$this.$$Analyzer.lookupRootConstruct(nextConstruct.rootConstruct, fullyQualifiedName), fullyQualifiedName);
				}
				var firstIteration = true;
				while (true)
				{
					for (var i = 0; i < construct.methodConstructs.length; i++)
					{
						var methodConstruct = construct.methodConstructs[i];
						if (Boolean(methodConstruct.staticToken) != isClassLevel)
						{
							continue;
						}
						if (!firstIteration && !$$this.$$Analyzer.hasNamespace(methodConstruct.namespaceToken))
						{
							continue;
						}
						var namespace = $$this.$$Analyzer.lookupNamespace(methodConstruct.namespaceToken);
						if ($$this.$$Analyzer.hasIdentifier(methodConstruct, namespace))
						{
							var identifier = $$this.$$Analyzer.lookupIdentifier(methodConstruct, namespace);
							if (!identifier.isGlobal && !identifier.isStatic)
							{
								continue;
							}
						}
						if (!firstIteration && methodConstruct.namespaceToken && methodConstruct.namespaceToken.data == 'private')
						{
							continue;
						}
						if (firstIteration || !$$this.$$Analyzer.hasIdentifier(methodConstruct, namespace, true))
						{
							$$this.$$Analyzer.registerIdentifier(methodConstruct, construct);
						}
					}
					for (var i = 0; i < construct.propertyConstructs.length; i++)
					{
						var propertyConstruct = construct.propertyConstructs[i];
						if (Boolean(propertyConstruct.staticToken) != isClassLevel && !propertyConstruct.namespaceKeywordToken)
						{
							continue;
						}
						if (!firstIteration && !$$this.$$Analyzer.hasNamespace(propertyConstruct.namespaceToken))
						{
							continue;
						}
						var namespace = $$this.$$Analyzer.lookupNamespace(propertyConstruct.namespaceToken);
						if ($$this.$$Analyzer.hasIdentifier(propertyConstruct, namespace))
						{
							var identifier = $$this.$$Analyzer.lookupIdentifier(propertyConstruct, namespace);
							if (!identifier.isGlobal && !identifier.isStatic)
							{
								continue;
							}
						}
						if (!firstIteration && propertyConstruct.namespaceToken && propertyConstruct.namespaceToken.data == 'private')
						{
							continue;
						}
						if (firstIteration || !$$this.$$Analyzer.hasIdentifier(propertyConstruct, namespace, true))
						{
							$$this.$$Analyzer.registerIdentifier(propertyConstruct, construct);
						}
					}
					if (!construct.extendsNameConstruct)
					{
						break;
					}
					firstIteration = false;
					var fullyQualifiedName = $$this.$$Analyzer.lookupFullyQualifiedName(construct, construct.extendsNameConstruct);
					construct = $$this.$$Analyzer.lookupConstructInRootConstruct($$this.$$Analyzer.lookupRootConstruct(construct.rootConstruct, fullyQualifiedName), fullyQualifiedName);
				}
			}

			return $$this.$$Analyzer.$$p.$$registerConstruct || ($$this.$$Analyzer.$$p.$$registerConstruct = registerConstruct);
		}};


		//private instance method
		Analyzer.prototype.$$v.analyzeParameters = {
		get:function ()
		{
			var $$this = this.$$this;

			function analyzeParameters($$$$methodConstruct, $$$$construct)
			{
				//set default parameter values
				var methodConstruct = $$$$methodConstruct;
				var construct = $$$$construct;

				for (var i = 0; i < methodConstruct.parameterConstructs.length; i++)
				{
					var parameterConstruct = methodConstruct.parameterConstructs[i];
					$$this.$$Analyzer.registerIdentifier(parameterConstruct, construct);
					var identifier = $$this.$$Analyzer.lookupIdentifier(parameterConstruct.identifierToken.data);
					identifier.type.accessed = true;
					identifier.isVarInitialized = true;
					parameterConstruct.identifier = identifier;
					if (parameterConstruct.valueExpression)
					{
						$$this.$$Analyzer.analyzeExpression(parameterConstruct.valueExpression, 0, false, construct);
					}
				}
			}

			return $$this.$$Analyzer.$$p.$$analyzeParameters || ($$this.$$Analyzer.$$p.$$analyzeParameters = analyzeParameters);
		}};


		//private instance method
		Analyzer.prototype.$$v.analyzeStatements = {
		get:function ()
		{
			var $$this = this.$$this;

			function analyzeStatements($$$$statements, $$$$indent, $$$$construct)
			{
				//set default parameter values
				var statements = $$$$statements;
				var indent = $$$$indent;
				var construct = $$$$construct;

				for (var i = 0; i < statements.length; i++)
				{
					$$this.$$Analyzer.analyzeStatement(statements[i], indent + 1, false, construct);
				}
			}

			return $$this.$$Analyzer.$$p.$$analyzeStatements || ($$this.$$Analyzer.$$p.$$analyzeStatements = analyzeStatements);
		}};


		//private instance method
		Analyzer.prototype.$$v.analyzeStatement = {
		get:function ()
		{
			var $$this = this.$$this;

			function analyzeStatement($$$$statement, $$$$_indent, $$$$inline, $$$$construct)
			{
				//set default parameter values
				var statement = $$$$statement;
				var _indent = $$$$_indent;
				var inline = $$$$inline;
				var construct = $$$$construct;

				if (!construct)
				{
					throw $es4.$$primitive(new Error('construct null in analyze statement'));
				}
				switch (statement.constructor)
				{
					case Construct.EmptyStatement:
						break;
					case Construct.IfStatement:
						$$this.$$Analyzer._inIfStatement++;
						$$this.$$Analyzer.analyzeExpression(statement.conditionExpression, _indent, false, construct);
						$$this.$$Analyzer.analyzeStatements(statement.bodyStatements, _indent + 1, construct);
						for (var i = 0; i < statement.elseIfStatements.length; i++)
						{
							$$this.$$Analyzer.analyzeStatement(statement.elseIfStatements[i], _indent, false, construct);
						}
						if (statement.elseStatement)
						{
							$$this.$$Analyzer.analyzeStatement(statement.elseStatement, _indent, false, construct);
						}
						$$this.$$Analyzer._inIfStatement--;
						break;
					case Construct.ElseIfStatement:
						$$this.$$Analyzer._inIfStatement++;
						$$this.$$Analyzer.analyzeExpression(statement.conditionExpression, _indent, false, construct);
						$$this.$$Analyzer.analyzeStatements(statement.bodyStatements, _indent + 1, construct);
						$$this.$$Analyzer._inIfStatement--;
						break;
					case Construct.ElseStatement:
						$$this.$$Analyzer._inIfStatement++;
						$$this.$$Analyzer.analyzeStatements(statement.bodyStatements, _indent + 1, construct);
						$$this.$$Analyzer._inIfStatement--;
						break;
					case Construct.WhileStatement:
						$$this.$$Analyzer._inIfStatement++;
						$$this.$$Analyzer.analyzeExpression(statement.conditionExpression, _indent, false, construct);
						$$this.$$Analyzer.analyzeStatements(statement.bodyStatements, _indent + 1, construct);
						$$this.$$Analyzer._inIfStatement--;
						break;
					case Construct.DoWhileStatement:
						$$this.$$Analyzer._inIfStatement++;
						$$this.$$Analyzer.analyzeStatements(statement.bodyStatements, _indent + 1, construct);
						$$this.$$Analyzer.analyzeExpression(statement.conditionExpression, _indent, false, construct);
						$$this.$$Analyzer._inIfStatement--;
						break;
					case Construct.ForStatement:
						$$this.$$Analyzer._inIfStatement++;
						if (statement.variableStatement)
						{
							$$this.$$Analyzer.analyzeStatement(statement.variableStatement, 0, true, construct);
						}
						if (statement.conditionExpression)
						{
							$$this.$$Analyzer.analyzeExpression(statement.conditionExpression, _indent, false, construct);
						}
						if (statement.afterthoughtExpression)
						{
							$$this.$$Analyzer.analyzeExpression(statement.afterthoughtExpression, _indent, false, construct);
						}
						$$this.$$Analyzer.analyzeStatements(statement.bodyStatements, _indent + 1, construct);
						$$this.$$Analyzer._inIfStatement--;
						break;
					case Construct.ForEachStatement:
						$$this.$$Analyzer._count++;
						$$this.$$Analyzer._inIfStatement++;
						statement.index = $$this.$$Analyzer._count;
						statement.variableStatement.doNotSetDefaultValue = true;
						$$this.$$Analyzer.analyzeStatement(statement.variableStatement, 0, true, construct);
						$$this.$$Analyzer.analyzeExpression(statement.arrayExpression, _indent, false, construct);
						$$this.$$Analyzer.analyzeStatements(statement.bodyStatements, _indent + 1, construct);
						$$this.$$Analyzer._inIfStatement--;
						break;
					case Construct.ForInStatement:
						$$this.$$Analyzer._count++;
						$$this.$$Analyzer._inIfStatement++;
						statement.index = $$this.$$Analyzer._count;
						statement.variableStatement.doNotSetDefaultValue = true;
						$$this.$$Analyzer.analyzeStatement(statement.variableStatement, 0, true, construct);
						$$this.$$Analyzer.analyzeExpression(statement.objectExpression, _indent, false, construct);
						$$this.$$Analyzer.analyzeStatements(statement.bodyStatements, _indent + 1, construct);
						$$this.$$Analyzer._inIfStatement--;
						break;
					case Construct.BreakStatement:
						if (statement.identifierToken)
						{
							statement.identifier = $$this.$$Analyzer.lookupIdentifier(statement.identifierToken.data);
						}
						break;
					case Construct.ContinueStatement:
						if (statement.identifierToken)
						{
							statement.identifier = $$this.$$Analyzer.lookupIdentifier(statement.identifierToken.data);
						}
						break;
					case Construct.ThrowStatement:
						if (statement.expression)
						{
							$$this.$$Analyzer.analyzeExpression(statement.expression, _indent, false, construct);
						}
						break;
					case Construct.TryStatement:
						$$this.$$Analyzer.analyzeStatements(statement.bodyStatements, _indent + 1, construct);
						for (var i = 0; i < statement.catchStatements.length; i++)
						{
							$$this.$$Analyzer.upLevel();
							var catchStatement = statement.catchStatements[i];
							$$this.$$Analyzer._count++;
							catchStatement.index = $$this.$$Analyzer._count;
							var identifier = $$this.$$Analyzer.registerIdentifier(catchStatement, construct);
							identifier.isVarInitialized = true;
							catchStatement.identifier = identifier;
							$$this.$$Analyzer.analyzeStatements(catchStatement.bodyStatements, _indent + 2, construct);
							$$this.$$Analyzer.downLevel();
						}
						if (statement.finallyStatement)
						{
							$$this.$$Analyzer.analyzeStatements(statement.finallyStatement.bodyStatements, _indent + 1, construct);
						}
						break;
					case Construct.UseStatement:
						$$this.$$Analyzer.registerUseNamespace(statement);
						break;
					case Construct.VarStatement:
						for (var i = 0; i < statement.innerVarStatements.length; i++)
						{
							var identifier = $$this.$$Analyzer.registerIdentifier(statement.innerVarStatements[i], construct);
							statement.innerVarStatements[i].identifier = identifier;
						}
						var identifier = $$this.$$Analyzer.registerIdentifier(statement, construct);
						statement.identifier = identifier;
						if (!statement.valueExpression && statement.identifier.type.fullyQualifiedName != '*' && statement.identifier.type.fullyQualifiedName != 'void' && !statement.doNotSetDefaultValue)
						{
							switch (statement.identifier.type.fullyQualifiedName)
							{
								case 'Number':
									statement.valueExpression = Construct.getNewExpression(Token.getNewToken(Token.NaNTokenType, 'NaN'));
									break;
								case 'uint':
								case 'int':
									statement.valueExpression = Construct.getNewNumberExpression();
									statement.valueExpression.numberToken = Token.getNewToken(Token.NumberTokenType, '0');
									break;
								case 'Boolean':
									statement.valueExpression = Construct.getNewBooleanExpression();
									statement.valueExpression.booleanToken = Token.getNewToken(Token.BooleanTokenType, 'false');
									break;
								default:
									statement.valueExpression = Construct.getNewExpression(Token.getNewToken(Token.NullTokenType, 'null'));
							}
						}
						if (statement.valueExpression)
						{
							var expressionResult = $$this.$$Analyzer.analyzeExpression(statement.valueExpression, _indent, false, construct);
							if ($$this.$$Analyzer.isCoerceRequired(expressionResult, statement.identifier.type, statement.identifier))
							{
								statement.coerce = true;
							}
						}
						statement.identifier.isVarInitialized = true;
						for (var i = 0; i < statement.innerVarStatements.length; i++)
						{
							var innerVarStatement = statement.innerVarStatements[i];
							if (!innerVarStatement.valueExpression && innerVarStatement.identifier.type.fullyQualifiedName != '*' && innerVarStatement.identifier.type.fullyQualifiedName != 'void')
							{
								switch (innerVarStatement.identifier.type.fullyQualifiedName)
								{
									case 'Number':
										innerVarStatement.valueExpression = Construct.getNewExpression(Token.getNewToken(Token.NaNTokenType, 'NaN'));
										break;
									case 'uint':
									case 'int':
										innerVarStatement.valueExpression = Construct.getNewNumberExpression();
										innerVarStatement.valueExpression.numberToken = Token.getNewToken(Token.NumberTokenType, '0');
										break;
									case 'Boolean':
										innerVarStatement.valueExpression = Construct.getNewBooleanExpression();
										innerVarStatement.valueExpression.booleanToken = Token.getNewToken(Token.BooleanTokenType, 'false');
										break;
									default:
										innerVarStatement.valueExpression = Construct.getNewExpression(Token.getNewToken(Token.NullTokenType, 'null'));
								}
							}
							if (innerVarStatement.valueExpression)
							{
								expressionResult = $$this.$$Analyzer.analyzeExpression(innerVarStatement.valueExpression, _indent, false, construct);
								if ($$this.$$Analyzer.isCoerceRequired(expressionResult, innerVarStatement.identifier.type, innerVarStatement.identifier))
								{
									innerVarStatement.coerce = true;
								}
							}
							innerVarStatement.identifier.isVarInitialized = true;
						}
						break;
					case Construct.SwitchStatement:
						$$this.$$Analyzer.analyzeExpression(statement.valueExpression, _indent, false, construct);
						for (var i = 0; i < statement.caseStatements.length; i++)
						{
							$$this.$$Analyzer.analyzeStatement(statement.caseStatements[i], _indent + 1, false, construct);
						}
						break;
					case Construct.CaseStatement:
						if (!statement.defaultToken)
						{
							$$this.$$Analyzer.analyzeExpression(statement.valueExpression, _indent, false, construct);
						}
						$$this.$$Analyzer.analyzeStatements(statement.bodyStatements, _indent + 1, construct);
						break;
					case Construct.LabelStatement:
						var identifier = $$this.$$Analyzer.registerIdentifier(statement, construct);
						identifier.isVarInitialized = true;
						statement.identifier = identifier;
						break;
					default:
						$$this.$$Analyzer.analyzeExpression(statement, _indent, false, construct);
				}
			}

			return $$this.$$Analyzer.$$p.$$analyzeStatement || ($$this.$$Analyzer.$$p.$$analyzeStatement = analyzeStatement);
		}};


		//private instance method
		Analyzer.prototype.$$v.analyzeExpression = {
		get:function ()
		{
			var $$this = this.$$this;

			function analyzeExpression($$$$expression, $$$$_indent, $$$$toString, $$$$construct, $$$$operator, $$$$expressionString)
			{
				//set default parameter values
				var expression = $$$$expression;
				var _indent = $$$$_indent;
				var toString = $$$$toString;
				var construct = $$$$construct;
				var operator = (4 > arguments.length - 1) ? null : $$$$operator;
				var expressionString = (5 > arguments.length - 1) ? null : $$$$expressionString;

				if (!construct)
				{
					throw $es4.$$primitive(new Error('construct null in analyze expression'));
				}
				var expressionResult = $es4.$$primitive(new ExpressionResult(null, false, false, false, false));
				outerSwitch:				switch (expression.constructor)
				{
					case Construct.ParenExpression:
						expressionResult = $$this.$$Analyzer.analyzeExpression(expression.expression, _indent, toString, construct, operator, expressionString);
						break;
					case Construct.PropertyExpression:
						expressionResult = $$this.$$Analyzer.analyzePropertyExpression(expression, toString, construct);
						break;
					case Construct.NumberExpression:
						if (expression.numberToken.data == $es4.$$primitive(new Number(parseFloat(expression.numberToken.data) >> 0)))
						{
							expressionResult.type = $$this.$$Analyzer.lookupType('int');
						}
						else if (expression.numberToken.data == $es4.$$primitive(new Number(parseFloat(expression.numberToken.data) >>> 0)))
						{
							expressionResult.type = $$this.$$Analyzer.lookupType('uint');
						}
						else
						{
							expressionResult.type = $$this.$$Analyzer.lookupType('Number');
						}
						break;
					case Construct.StringExpression:
						expressionResult.type = $$this.$$Analyzer.lookupType('String');
						break;
					case Construct.ReturnExpression:
						if (expression.expression)
						{
							expression.expectedType = $$this.$$Analyzer._returnTypeStack[$$this.$$Analyzer._returnTypeStack.length - 1];
							expressionResult = $$this.$$Analyzer.analyzeExpression(expression.expression, 0, toString, construct);
							expression.coerce = $$this.$$Analyzer.isCoerceRequired(expressionResult, expression.expectedType);
						}
						else
						{
							expressionResult.type = $$this.$$Analyzer.lookupType('void');
						}
						break;
					case Construct.DeleteExpression:
						expressionResult = $$this.$$Analyzer.analyzeExpression(expression.expression, 0, toString, construct);
						break;
					case Construct.FunctionExpression:
						var wasInClosure = $$this.$$Analyzer._inClosure;
						$$this.$$Analyzer._inClosure = true;
						if (expression.identifierToken)
						{
							if ($$this.$$Analyzer._inIfStatement)
							{
								throw $es4.$$primitive(new Error('support for named closures in if/elseif/else statements is not supported at this time. function name: ' + expression.identifierToken.data));
							}
							var identifier = $$this.$$Analyzer.registerIdentifier(expression, construct);
							identifier.isVarInitialized = true;
							expression.identifier = identifier;
							expressionResult.type = identifier.type;
						}
						else
						{
							expressionResult.type = $$this.$$Analyzer.lookupType(expression.typeConstruct);
						}
						for (var i = 0; i < expression.namedFunctionExpressions.length; i++)
						{
							var identifier = $$this.$$Analyzer.registerIdentifier(expression.namedFunctionExpressions[i], construct);
							identifier.isVarInitialized = true;
							expression.namedFunctionExpressions[i].identifier = identifier;
							expression.namedFunctionExpressions[i].type = identifier.type;
						}
						$$this.$$Analyzer.upLevel();
						$$this.$$Analyzer.analyzeParameters(expression, construct);
						$$this.$$Analyzer.registerIdentifier('this', construct);
						$$this.$$Analyzer._returnTypeStack.push(expressionResult.type);
						$$this.$$Analyzer.analyzeStatements(expression.bodyStatements, _indent + 1, construct);
						$$this.$$Analyzer._returnTypeStack.pop();
						if (!wasInClosure)
						{
							$$this.$$Analyzer._inClosure = false;
						}
						$$this.$$Analyzer.downLevel();
						break;
					case Construct.ObjectExpression:
						for (var i = 0; i < expression.objectPropertyConstructs.length; i++)
						{
							if (expression.objectPropertyConstructs[i].expression.constructor != Construct.PropertyExpression)
							{
								$$this.$$Analyzer.analyzeExpression(expression.objectPropertyConstructs[i].expression, 0, toString, construct);
							}
							$$this.$$Analyzer.analyzeExpression(expression.objectPropertyConstructs[i].valueExpression, 0, toString, construct);
						}
						expressionResult.type = $$this.$$Analyzer.lookupType('Object');
						break;
					case Construct.ArrayExpression:
						for (var i = 0; i < expression.valueExpressions.length; i++)
						{
							$$this.$$Analyzer.analyzeExpression(expression.valueExpressions[i], 0, toString, construct);
						}
						expressionResult.type = $$this.$$Analyzer.lookupType('Array');
						break;
					case Construct.BooleanExpression:
						expressionResult.type = $$this.$$Analyzer.lookupType('Boolean');
						break;
					case Construct.Expression:
						if (expression.token.type == Token.TypeofTokenType)
						{
							$$this.$$Analyzer.analyzeExpression(expression.expression, 0, toString, construct);
							expressionResult.type = $$this.$$Analyzer.lookupType('String');
							break;
						}
						if (expression.token.type == Token.VoidTokenType)
						{
							if (expression.expression.constructor != Construct.EmptyExpression)
							{
								$$this.$$Analyzer.analyzeExpression(expression.expression, 0, toString, construct);
							}
							expressionResult.type = $$this.$$Analyzer.lookupType('void');
							break;
						}
						if (expression.token.type == Token.NaNTokenType)
						{
							expressionResult.isNaN = true;
							break;
						}
						if (expression.token.type == Token.UndefinedTokenType)
						{
							expressionResult.isUndefined = true;
							break;
						}
						if (expression.token.type == Token.NullTokenType)
						{
							expressionResult.isNull = true;
							break;
						}
						if (expression.expression)
						{
							expressionResult = $$this.$$Analyzer.analyzeExpression(expression.expression, 0, toString, construct);
							break;
						}
						throw $es4.$$primitive(new Error('unhandled expression type'));
						break;
					case Construct.XMLExpression:
						expressionResult.type = $$this.$$Analyzer.lookupType('XML');
						break;
					case Construct.XMLListExpression:
						expressionResult.type = $$this.$$Analyzer.lookupType('XMLList');
						break;
					case Construct.EmptyExpression:
						expressionResult.type = $$this.$$Analyzer.lookupType('void');
						break;
					case Construct.RegExpression:
						expressionResult.type = $$this.$$Analyzer.lookupType('RegExp');
						break;
					case Construct.PrefixExpression:
					case Construct.PostfixExpression:
						expressionResult = $$this.$$Analyzer.analyzeExpression(expression.expression, 0, toString, construct);
						break;
					case Construct.NewExpression:
						expressionResult = $$this.$$Analyzer.analyzePropertyExpression(expression.expression, toString, construct, true);
						break;
					case Construct.BinaryExpression:
						if (expression.token.type == Token.IsTokenType)
						{
							$$this.$$Analyzer.analyzeExpression(expression.leftExpression, 0, toString, construct);
							$$this.$$Analyzer.analyzeExpression(expression.rightExpression, 0, toString, construct);
							expressionResult.type = $$this.$$Analyzer.lookupType('Boolean');
							break;
						}
						if (expression.token.type == Token.InstanceofTokenType)
						{
							$$this.$$Analyzer.analyzeExpression(expression.leftExpression, 0, toString, construct);
							$$this.$$Analyzer.analyzeExpression(expression.rightExpression, 0, toString, construct);
							expressionResult.type = $$this.$$Analyzer.lookupType('Boolean');
							break;
						}
						if (expression.token.type == Token.AsTokenType)
						{
							$$this.$$Analyzer.analyzeExpression(expression.leftExpression, 0, toString, construct);
							expressionResult = $$this.$$Analyzer.analyzeExpression(expression.rightExpression, 0, toString, construct);
							break;
						}
						innerSwitch:						switch (expression.token.type)
						{
							case Token.BitwiseLeftShiftAssignmentTokenType:
							case Token.BitwiseUnsignedRightShiftAssignmentTokenType:
							case Token.BitwiseRightShiftAssignmentTokenType:
							case Token.AddWithAssignmentTokenType:
							case Token.DivWithAssignmentTokenType:
							case Token.ModWithAssignmentTokenType:
							case Token.MulWithAssignmentTokenType:
							case Token.SubWithAssignmentTokenType:
							case Token.AssignmentTokenType:
							case Token.AndWithAssignmentTokenType:
							case Token.OrWithAssignmentTokenType:
							case Token.BitwiseAndAssignmentTokenType:
							case Token.BitwiseOrAssignmentTokenType:
							case Token.BitwiseXorAssignmentTokenType:
								var leftExpression = expression.leftExpression;
								while (leftExpression.constructor == Construct.ParenExpression)
								{
									leftExpression = leftExpression.expression;
								}
								var innerOperator = expression.token.data;
								var innerExpressionFound = false;
								var expressionResult;
								while (leftExpression.constructor == Construct.BinaryExpression)
								{
									var binaryExpression = Construct.getNewBinaryExpression();
									binaryExpression.token = expression.token;
									binaryExpression.rightExpression = expression.rightExpression;
									binaryExpression.leftExpression = leftExpression.rightExpression;
									if (!innerExpressionFound)
									{
										expressionResult = $$this.$$Analyzer.analyzeExpression(binaryExpression, _indent, toString, construct);
									}
									else
									{
										expressionResult = $$this.$$Analyzer.getGreatestCommonExpressionResult(expressionResult, $$this.$$Analyzer.analyzeExpression(binaryExpression.leftExpression, _indent, toString, construct));
									}
									innerExpressionFound = true;
									expression = leftExpression;
									leftExpression = expression.leftExpression;
								}
								var leftExpressionResult = $$this.$$Analyzer.analyzeExpression(leftExpression, 0, toString, construct);
								var rightExpressionResult;
								if (innerExpressionFound)
								{
									rightExpressionResult = expressionResult;
								}
								else
								{
									rightExpressionResult = $$this.$$Analyzer.analyzeExpression(expression.rightExpression, 0, toString, construct);
								}
								expressionResult = $$this.$$Analyzer.getGreatestCommonExpressionResult(leftExpressionResult, rightExpressionResult);
								if ($$this.$$Analyzer.isCoerceRequired(expressionResult, leftExpressionResult.type, leftExpressionResult.varIdentifier))
								{
									leftExpression.coerce = true;
								}
								if (leftExpressionResult.varIdentifier)
								{
									leftExpressionResult.varIdentifier.isVarInitialized = true;
								}
								break outerSwitch;
							case Token.AddTokenType:
								var leftExpressionResult = $$this.$$Analyzer.analyzeExpression(expression.leftExpression, 0, toString, construct);
								var rightExpressionResult = $$this.$$Analyzer.analyzeExpression(expression.rightExpression, 0, toString, construct);
								if (leftExpressionResult.type && leftExpressionResult.type.fullyQualifiedName == 'String')
								{
									expressionResult = leftExpressionResult;
								}
								else if (rightExpressionResult.type && rightExpressionResult.type.fullyQualifiedName == 'String')
								{
									expressionResult = rightExpressionResult;
								}
								else
								{
									expressionResult = $$this.$$Analyzer.getGreatestCommonExpressionResult(leftExpressionResult, rightExpressionResult);
								}
								break outerSwitch;
						}
						expressionResult = $$this.$$Analyzer.getGreatestCommonExpressionResult($$this.$$Analyzer.analyzeExpression(expression.leftExpression, 0, toString, construct), $$this.$$Analyzer.analyzeExpression(expression.rightExpression, 0, toString, construct));
						break;
					case Construct.TernaryExpression:
						$$this.$$Analyzer.analyzeExpression(expression.conditionExpression, 0, toString, construct);
						expressionResult = $$this.$$Analyzer.getGreatestCommonExpressionResult($$this.$$Analyzer.analyzeExpression(expression.trueExpression, 0, toString, construct), $$this.$$Analyzer.analyzeExpression(expression.falseExpression, 0, toString, construct));
						break;
					default:
						throw $es4.$$primitive(new Error('Unexpected expression found: ' + expression.constructor));
				}
				return expressionResult;
			}

			return $$this.$$Analyzer.$$p.$$analyzeExpression || ($$this.$$Analyzer.$$p.$$analyzeExpression = analyzeExpression);
		}};


		//private instance method
		Analyzer.prototype.$$v.isCoerceRequired = {
		get:function ()
		{
			var $$this = this.$$this;

			function isCoerceRequired($$$$expressionResultFrom, $$$$typeTo, $$$$varIdentifierTo)
			{
				//set default parameter values
				var expressionResultFrom = $$$$expressionResultFrom;
				var typeTo = $$$$typeTo;
				var varIdentifierTo = (2 > arguments.length - 1) ? null : $$$$varIdentifierTo;

				if (expressionResultFrom.varIdentifier && !expressionResultFrom.varIdentifier.isVarInitialized)
				{
					throw $es4.$$primitive(new Error('cannot declare and set var: [ ' + expressionResultFrom.varIdentifier + ' ] in same line, example: var i:uint = i;'));
				}
				if (typeTo.fullyQualifiedName == '*' || typeTo.fullyQualifiedName == 'void')
				{
					return false;
				}
				if (expressionResultFrom.isNull)
				{
					return (typeTo.fullyQualifiedName == 'Boolean' || typeTo.fullyQualifiedName == 'int' || typeTo.fullyQualifiedName == 'uint' || typeTo.fullyQualifiedName == 'Number');
				}
				if (expressionResultFrom.isUndefined || expressionResultFrom.isVoid)
				{
					return true;
				}
				if (expressionResultFrom.isNaN)
				{
					return (typeTo.fullyQualifiedName != 'Number');
				}
				if (expressionResultFrom.type == typeTo || typeTo.fullyQualifiedName == expressionResultFrom.type.fullyQualifiedName)
				{
					return false;
				}
				if (typeTo.fullyQualifiedName == 'Object')
				{
					return false;
				}
				var greatestCommonType = $$this.$$Analyzer.getGreatestCommonType(expressionResultFrom.type, typeTo);
				if (greatestCommonType == typeTo || greatestCommonType.fullyQualifiedName == typeTo.fullyQualifiedName)
				{
					return false;
				}
				return true;
			}

			return $$this.$$Analyzer.$$p.$$isCoerceRequired || ($$this.$$Analyzer.$$p.$$isCoerceRequired = isCoerceRequired);
		}};


		//private instance method
		Analyzer.prototype.$$v.getGreatestCommonExpressionResult = {
		get:function ()
		{
			var $$this = this.$$this;

			function getGreatestCommonExpressionResult($$$$expressionResult1, $$$$expressionResult2)
			{
				//set default parameter values
				var expressionResult1 = $$$$expressionResult1;
				var expressionResult2 = $$$$expressionResult2;

				var defaultExpressionResult = $es4.$$primitive(new ExpressionResult($$this.$$Analyzer.lookupType('*'), false, false, false, false));
				if (expressionResult1 == expressionResult2)
				{
					return expressionResult2;
				}
				if (expressionResult1.isNull || expressionResult2.isNull)
				{
					return (expressionResult1.isNull && expressionResult2.isNull) ? expressionResult2 : defaultExpressionResult;
				}
				if (expressionResult1.isUndefined || expressionResult2.isUndefined)
				{
					return (expressionResult1.isUndefined && expressionResult2.isUndefined) ? expressionResult2 : defaultExpressionResult;
				}
				if (expressionResult1.isNaN || expressionResult2.isNaN)
				{
					return (expressionResult1.isNaN && expressionResult2.isNaN) ? expressionResult2 : defaultExpressionResult;
				}
				var type = $$this.$$Analyzer.getGreatestCommonType(expressionResult1.type, expressionResult2.type);
				return $es4.$$primitive(new ExpressionResult(type, false, false, false, false));
			}

			return $$this.$$Analyzer.$$p.$$getGreatestCommonExpressionResult || ($$this.$$Analyzer.$$p.$$getGreatestCommonExpressionResult = getGreatestCommonExpressionResult);
		}};


		//private instance method
		Analyzer.prototype.$$v.getGreatestCommonType = {
		get:function ()
		{
			var $$this = this.$$this;

			function getGreatestCommonType($$$$type1, $$$$type2)
			{
				//set default parameter values
				var type1 = $$$$type1;
				var type2 = $$$$type2;

				if (type1 == type2 || type1.fullyQualifiedName == type2.fullyQualifiedName)
				{
					return type2;
				}
				if (type1.fullyQualifiedName == '*' || type2.fullyQualifiedName == '*')
				{
					return (type1.fullyQualifiedName == type2.fullyQualifiedName) ? type2 : $$this.$$Analyzer.lookupType('*');
				}
				if (type1.fullyQualifiedName == 'void' || type2.fullyQualifiedName == 'void')
				{
					return (type1.fullyQualifiedName == type2.fullyQualifiedName) ? type2 : $$this.$$Analyzer.lookupType('*');
				}
				if (type1.fullyQualifiedName == 'String' || type2.fullyQualifiedName == 'String')
				{
					return (type1.fullyQualifiedName == type2.fullyQualifiedName) ? type2 : $$this.$$Analyzer.lookupType('*');
				}
				if (type1.fullyQualifiedName == 'Function' || type2.fullyQualifiedName == 'Function')
				{
					return (type1.fullyQualifiedName == type2.fullyQualifiedName) ? type2 : $$this.$$Analyzer.lookupType('*');
				}
				if (type1.fullyQualifiedName == 'Class' || type2.fullyQualifiedName == 'Class')
				{
					return (type1.fullyQualifiedName == type2.fullyQualifiedName) ? type2 : $$this.$$Analyzer.lookupType('*');
				}
				if (type1.fullyQualifiedName == 'Boolean' || type2.fullyQualifiedName == 'Boolean')
				{
					return (type1.fullyQualifiedName == type2.fullyQualifiedName) ? type2 : $$this.$$Analyzer.lookupType('*');
				}
				if (type1.fullyQualifiedName == 'Array' || type2.fullyQualifiedName == 'Array')
				{
					return (type1.fullyQualifiedName == type2.fullyQualifiedName) ? type2 : $$this.$$Analyzer.lookupType('*');
				}
				if (type1.fullyQualifiedName == 'uint' || type2.fullyQualifiedName == 'uint')
				{
					if (type1.fullyQualifiedName == type2.fullyQualifiedName)
					{
						return type2;
					}
					if (type1.fullyQualifiedName == 'Number')
					{
						return type1;
					}
					if (type2.fullyQualifiedName == 'Number')
					{
						return type2;
					}
					return $$this.$$Analyzer.lookupType('*');
				}
				if (type1.fullyQualifiedName == 'int' || type2.fullyQualifiedName == 'int')
				{
					if (type1.fullyQualifiedName == type2.fullyQualifiedName)
					{
						return type2;
					}
					if (type1.fullyQualifiedName == 'Number')
					{
						return type1;
					}
					if (type2.fullyQualifiedName == 'Number')
					{
						return type2;
					}
					return $$this.$$Analyzer.lookupType('*');
				}
				if (type1.fullyQualifiedName == 'Number' || type2.fullyQualifiedName == 'Number')
				{
					return (type1.fullyQualifiedName == type2.fullyQualifiedName) ? type2 : $$this.$$Analyzer.lookupType('*');
				}
				var typea = checkForType(type1, type2);
				var typeb = checkForType(type2, type1);
				return (typea.fullyQualifiedName == $$this.$$Analyzer.lookupType('*').fullyQualifiedName) ? typeb : typea;

				function checkForType($$$$type, $$$$typeToCheckFor) 
				{
					//set default parameter values
					var type = $$$$type;
					var typeToCheckFor = $$$$typeToCheckFor;

					var visitedInterfaces = {};
					var typeConstruct = type.construct;
					var typeToCheckForConstruct = typeToCheckFor.construct;
					if (typeConstruct.constructor == Construct.InterfaceConstruct)
					{
						var result = hasConstructInInterface(typeConstruct, typeToCheckForConstruct);
						if (result)
						{
							return typeToCheckFor;
						}
					}
					else
					{
						var result = hasConstructInClass(typeConstruct, typeToCheckForConstruct);
						if (result)
						{
							return typeToCheckFor;
						}
					}
					return $$this.$$Analyzer.lookupType('*');

					function hasConstructInInterface($$$$interfaceConstruct, $$$$constructToCheckFor) 
					{
						//set default parameter values
						var interfaceConstruct = $$$$interfaceConstruct;
						var constructToCheckFor = $$$$constructToCheckFor;

						if (interfaceConstruct == constructToCheckFor)
						{
							return true;
						}
						if (constructToCheckFor.constructor == Construct.InterfaceConstruct)
						{
							var extendsNameConstructs = interfaceConstruct.extendsNameConstructs;
							for (var i = extendsNameConstructs.length; i--;)
							{
								if (visitedInterfaces[Construct.nameConstructToString(extendsNameConstructs[i])])
								{
									continue;
								}
								visitedInterfaces[Construct.nameConstructToString(extendsNameConstructs[i])] = true;
								var fullyQualifiedName = $$this.$$Analyzer.lookupFullyQualifiedName(interfaceConstruct, extendsNameConstructs[i]);
								var innerConstruct = $$this.$$Analyzer.lookupConstructInRootConstruct($$this.$$Analyzer.lookupRootConstruct(interfaceConstruct.rootConstruct, fullyQualifiedName), fullyQualifiedName);
								var result = hasConstructInInterface(interfaceConstruct, innerConstruct);
								if (result)
								{
									return true;
								}
							}
						}
						return false;
					}
;

					function hasConstructInClass($$$$classConstruct, $$$$constructToCheckFor) 
					{
						//set default parameter values
						var classConstruct = $$$$classConstruct;
						var constructToCheckFor = $$$$constructToCheckFor;

						if (classConstruct == constructToCheckFor)
						{
							return true;
						}
						if (constructToCheckFor.constructor == Construct.InterfaceConstruct)
						{
							var implementsNameConstructs = classConstruct.implementsNameConstructs;
							for (var i = implementsNameConstructs.length; i--;)
							{
								if (visitedInterfaces[Construct.nameConstructToString(implementsNameConstructs[i])])
								{
									continue;
								}
								visitedInterfaces[Construct.nameConstructToString(implementsNameConstructs[i])] = true;
								var fullyQualifiedName = $$this.$$Analyzer.lookupFullyQualifiedName(classConstruct, implementsNameConstructs[i]);
								var innerConstruct = $$this.$$Analyzer.lookupConstructInRootConstruct($$this.$$Analyzer.lookupRootConstruct(classConstruct.rootConstruct, fullyQualifiedName), fullyQualifiedName);
								var result = hasConstructInInterface(constructToCheckFor, innerConstruct);
								if (result)
								{
									return true;
								}
							}
						}
						var extendsNameConstruct;
						while (extendsNameConstruct = classConstruct.extendsNameConstruct)
						{
							var fullyQualifiedName = $$this.$$Analyzer.lookupFullyQualifiedName(classConstruct, extendsNameConstruct);
							var extendsConstruct = $$this.$$Analyzer.lookupConstructInRootConstruct($$this.$$Analyzer.lookupRootConstruct(classConstruct.rootConstruct, fullyQualifiedName), fullyQualifiedName);
							if (extendsConstruct == constructToCheckFor)
							{
								return true;
							}
							if (constructToCheckFor.constructor == Construct.InterfaceConstruct)
							{
								var implementsNameConstructs = extendsConstruct.implementsNameConstructs;
								for (var i = implementsNameConstructs.length; i--;)
								{
									if (visitedInterfaces[Construct.nameConstructToString(implementsNameConstructs[i])])
									{
										continue;
									}
									visitedInterfaces[Construct.nameConstructToString(implementsNameConstructs[i])] = true;
									var fullyQualifiedName = $$this.$$Analyzer.lookupFullyQualifiedName(extendsConstruct, implementsNameConstructs[i]);
									var innerConstruct = $$this.$$Analyzer.lookupConstructInRootConstruct($$this.$$Analyzer.lookupRootConstruct(extendsConstruct.rootConstruct, fullyQualifiedName), fullyQualifiedName);
									var result = hasConstructInInterface(constructToCheckFor, innerConstruct);
									if (result)
									{
										return true;
									}
								}
							}
							classConstruct = extendsConstruct;
						}
						return false;
					}
;
				}
;
			}

			return $$this.$$Analyzer.$$p.$$getGreatestCommonType || ($$this.$$Analyzer.$$p.$$getGreatestCommonType = getGreatestCommonType);
		}};


		//private instance method
		Analyzer.prototype.$$v.analyzePropertyExpression = {
		get:function ()
		{
			var $$this = this.$$this;

			function analyzePropertyExpression($$$$expression, $$$$toString, $$$$construct, $$$$isNew)
			{
				//set default parameter values
				var expression = $$$$expression;
				var toString = $$$$toString;
				var construct = $$$$construct;
				var isNew = (3 > arguments.length - 1) ? false : $$$$isNew;

				var innerExpression = expression;
				while (innerExpression.constructor == Construct.ParenExpression)
				{
					innerExpression = innerExpression.expression;
				}
				if (!innerExpression.construct)
				{
					throw $es4.$$primitive(new Error('invalid expression passed to analyzePropertyExpression: ' + innerExpression.constructor));
				}
				var identifier;
				var namespaceIdentifier;
				var thisConstruct = false;
				switch (innerExpression.construct.constructor)
				{
					case Construct.ThisConstruct:
						thisConstruct = true;
					case Construct.SuperConstruct:
					case Construct.IdentifierConstruct:
						identifier = innerExpression.construct.identifier = $$this.$$Analyzer.lookupIdentifier(innerExpression.construct);
						identifier.accessed = true;
						break;
					case Construct.ParenConstruct:
					case Construct.ArrayConstruct:
					case Construct.ObjectConstruct:
						break;
					case Construct.NamespaceQualifierConstruct:
						namespaceIdentifier = innerExpression.construct.namespaceIdentifier = $$this.$$Analyzer.lookupIdentifier(innerExpression.construct.identifierToken.data);
						namespaceIdentifier.accessed = true;
						identifier = innerExpression.construct.identifier = $$this.$$Analyzer.lookupIdentifier(innerExpression.construct.namespaceIdentifierToken.data, $$this.$$Analyzer.lookupNamespace(namespaceIdentifier.name));
						identifier.accessed = true;
						break;
					default:
						throw $es4.$$primitive(new Error('unknown inner property expression: ' + innerExpression.construct.constructor));
				}
				if (identifier && !namespaceIdentifier && (identifier.isProperty || identifier.isMethod) && !identifier.isImport && identifier.namespaceObj.isCustom)
				{
					namespaceIdentifier = identifier.namespaceObj.identifier;
				}
				else if (identifier && identifier.isPackage)
				{
					var tempInnerExpression;
					while ((tempInnerExpression = innerExpression.nextPropertyExpression) && tempInnerExpression.construct.constructor == Construct.DotConstruct)
					{
						if (!tempInnerExpression.nextPropertyExpression || tempInnerExpression.nextPropertyExpression.construct.construct != Construct.IdentifierConstruct)
						{
							break;
						}
						var innerIdentifier = tempInnerExpression.nextPropertyExpression.construct.construct.identifier = $$this.$$Analyzer.lookupIdentifier(tempInnerExpression.nextPropertyExpression.construct.construct.identifierToken.data);
						if (!innerIdentifier.isPackage)
						{
							break;
						}
						innerExpression = innerExpression.nextPropertyExpression;
					}
				}
				var expressionResult;
				var lastPropertyName;
				var lastExpressionResult;
				var lastIdentifier;
				var packageName = '';
				if (identifier)
				{
					if (!identifier.isVar)
					{
						expressionResult = $es4.$$primitive(new ExpressionResult(identifier.type, false, false, false, false));
					}
					else
					{
						expressionResult = $es4.$$primitive(new ExpressionResult(identifier.type, false, false, false, false, identifier));
					}
					lastPropertyName = identifier.name;
					innerExpression.identifier = identifier;
					lastExpressionResult = expressionResult;
					lastIdentifier = identifier;
					if (identifier.isPackage)
					{
						packageName += identifier.name;
					}
					if (!identifier.isType)
					{
						identifier = null;
					}
					else
					{
						thisConstruct = true;
					}
				}
				else
				{
					expressionResult = $$this.$$Analyzer.analyzeExpression(innerExpression.construct.expression, 0, toString, construct);
				}
				while (innerExpression = innerExpression.nextPropertyExpression)
				{
					if (innerExpression.construct.constructor == Construct.DotConstruct || innerExpression.construct.constructor == Construct.IdentifierConstruct)
					{
						if (lastIdentifier && lastIdentifier.name == 'this')
						{
							if ($$this.$$Analyzer._treatThisAsDynamic)
							{
								innerExpression.construct.identifier = $$this.$$Analyzer.lookupIdentifier('global');
							}
							else
							{
								innerExpression.construct.identifier = $$this.$$Analyzer.lookupIdentifier(innerExpression.construct.identifierToken.data);
							}
						}
						lastExpressionResult = expressionResult;
						lastIdentifier = identifier;
						if (thisConstruct && $$this.$$Analyzer.hasIdentifier(innerExpression.construct.identifierToken.data) && $$this.$$Analyzer.lookupIdentifier(innerExpression.construct.identifierToken.data).isNative)
						{
							throw $es4.$$primitive(new Error('cannot use "this" or classname scope before private native property: ' + innerExpression.construct.identifierToken.data));
						}
						thisConstruct = false;
						var invalidated = false;
						if (packageName)
						{
							packageName += '.' + innerExpression.construct.identifierToken.data;
							if ($$this.$$Analyzer._rootConstructs[packageName])
							{
								lastExpressionResult = expressionResult = $es4.$$primitive(new ExpressionResult($$this.$$Analyzer.lookupType(packageName), false, false, false, false));
								lastIdentifier = $$this.$$Analyzer.lookupIdentifier(packageName);
								identifier = null;
								packageName = '';
								if (innerExpression.nextPropertyExpression && innerExpression.nextPropertyExpression.construct.constructor != Construct.FunctionCallConstruct)
								{
									identifier = lastIdentifier;
									innerExpression = innerExpression.nextPropertyExpression;
								}
							}
							else
							{
								invalidated = true;
							}
						}
						if (!invalidated)
						{
							var next = (innerExpression.nextPropertyExpression && innerExpression.nextPropertyExpression.construct.constructor == Construct.FunctionCallConstruct && !isNew);
							expressionResult = $es4.$$primitive(new ExpressionResult($$this.$$Analyzer.lookupPropertyType(expressionResult.type, namespaceIdentifier, identifier, innerExpression.construct.identifierToken.data, next), false, false, false, false));
							identifier = null;
							namespaceIdentifier = null;
							lastPropertyName = innerExpression.construct.identifierToken.data;
							if (next)
							{
								var functionCallExpression = innerExpression.nextPropertyExpression;
								for (var i = 0; i < functionCallExpression.construct.argumentExpressions.length; i++)
								{
									$$this.$$Analyzer.analyzeExpression(functionCallExpression.construct.argumentExpressions[i], 0, toString, construct);
								}
								innerExpression = innerExpression.nextPropertyExpression;
								continue;
							}
						}
					}
					else if (innerExpression.construct.constructor == Construct.ArrayAccessorConstruct)
					{
						$$this.$$Analyzer.analyzeExpression(innerExpression.construct.expression, 0, toString, construct);
						expressionResult = $es4.$$primitive(new ExpressionResult($$this.$$Analyzer.lookupType('*'), false, false, false, false));
						identifier = null;
						namespaceIdentifier = null;
						lastPropertyName = null;
					}
					else if (innerExpression.construct.constructor == Construct.NamespaceQualifierConstruct)
					{
						namespaceIdentifier = innerExpression.construct.namespaceIdentifier = $$this.$$Analyzer.lookupIdentifier(innerExpression.construct.identifierToken.data);
						innerExpression.construct.identifier = $$this.$$Analyzer.lookupIdentifier(innerExpression.construct.namespaceIdentifierToken.data, $$this.$$Analyzer.lookupNamespace(namespaceIdentifier.name));
					}
					else if (innerExpression.construct.constructor == Construct.ParenConstruct)
					{
						expressionResult = $$this.$$Analyzer.analyzeExpression(innerExpression.construct.expression, 0, toString, construct);
						namespaceIdentifier = null;
						identifier = null;
						lastPropertyName = null;
					}
					else if (innerExpression.construct.constructor == Construct.AtIdentifierConstruct)
					{
						expressionResult = $es4.$$primitive(new ExpressionResult($$this.$$Analyzer.lookupType('Object'), false, false, false, false));
					}
					if (innerExpression.construct.constructor == Construct.FunctionCallConstruct || (innerExpression.nextPropertyExpression && innerExpression.nextPropertyExpression.construct.constructor == Construct.FunctionCallConstruct))
					{
						var functionCallExpression = (innerExpression.construct.constructor == Construct.FunctionCallConstruct) ? innerExpression : innerExpression.nextPropertyExpression;
						for (var i = 0; i < functionCallExpression.construct.argumentExpressions.length; i++)
						{
							$$this.$$Analyzer.analyzeExpression(functionCallExpression.construct.argumentExpressions[i], 0, toString, construct);
						}
						if (isNew)
						{
							if (lastPropertyName)
							{
								if (lastIdentifier && lastIdentifier.isType)
								{
									expressionResult = $es4.$$primitive(new ExpressionResult($$this.$$Analyzer.lookupType(lastIdentifier.fullPackageName), false, false, false, false));
								}
								else
								{
									expressionResult = lastExpressionResult;
								}
							}
							else
							{
								expressionResult = $es4.$$primitive(new ExpressionResult($$this.$$Analyzer.lookupType('Object'), false, false, false, false));
							}
							isNew = false;
						}
						else
						{
							if (lastPropertyName)
							{
								if (lastIdentifier && lastIdentifier.isType)
								{
									expressionResult = lastExpressionResult;
								}
								else
								{
									expressionResult = $es4.$$primitive(new ExpressionResult($$this.$$Analyzer.lookupPropertyType(lastExpressionResult.type, namespaceIdentifier, lastIdentifier, lastPropertyName, true), false, false, false, false));
								}
							}
							else
							{
								expressionResult = $es4.$$primitive(new ExpressionResult($$this.$$Analyzer.lookupType('*'), false, false, false, false));
							}
						}
						namespaceIdentifier = null;
						identifier = null;
						lastPropertyName = null;
						lastIdentifier = null;
						lastExpressionResult = null;
						thisConstruct = false;
						if (innerExpression.nextPropertyExpression)
						{
							innerExpression = functionCallExpression;
						}
						continue;
					}
					thisConstruct = false;
				}
				if (isNew)
				{
					if (lastPropertyName)
					{
						if (lastExpressionResult)
						{
							expressionResult = lastExpressionResult;
						}
						else
						{
							expressionResult = $es4.$$primitive(new ExpressionResult($$this.$$Analyzer.lookupPropertyType(lastExpressionResult, namespaceIdentifier, lastIdentifier, lastPropertyName), false, false, false, false));
							if (expressionResult.type.name == '*')
							{
								expressionResult = $es4.$$primitive(new ExpressionResult($$this.$$Analyzer.lookupType('Object'), false, false, false, false));
							}
						}
					}
					else
					{
						expressionResult = $es4.$$primitive(new ExpressionResult($$this.$$Analyzer.lookupType('Object'), false, false, false, false));
					}
				}
				return expressionResult;
			}

			return $$this.$$Analyzer.$$p.$$analyzePropertyExpression || ($$this.$$Analyzer.$$p.$$analyzePropertyExpression = analyzePropertyExpression);
		}};


		//private instance method
		Analyzer.prototype.$$v.lookupPropertyType = {
		get:function ()
		{
			var $$this = this.$$this;

			function lookupPropertyType($$$$type, $$$$namespaceIdentifier, $$$$identifier, $$$$name, $$$$functionReturnType)
			{
				//set default parameter values
				var type = $$$$type;
				var namespaceIdentifier = $$$$namespaceIdentifier;
				var identifier = $$$$identifier;
				var name = $$$$name;
				var functionReturnType = (4 > arguments.length - 1) ? null : $$$$functionReturnType;

				if (identifier && !identifier.isType)
				{
					return identifier.type;
				}
				else if (identifier)
				{
					if (name == 'prototype')
					{
						return $$this.$$Analyzer.lookupType('Object');
					}
					var propertyConstructs = identifier.construct.methodConstructs.concat(identifier.construct.propertyConstructs);
					for (var i = 0; i < propertyConstructs.length; i++)
					{
						var propertyConstruct = propertyConstructs[i];
						if (!propertyConstruct.staticToken)
						{
							continue;
						}
						if (!propertyConstruct.namespaceToken && namespaceIdentifier)
						{
							continue;
						}
						if (namespaceIdentifier && namespaceIdentifier.name != propertyConstruct.namespaceToken.data)
						{
							continue;
						}
						if (propertyConstruct.identifierToken.data != name)
						{
							continue;
						}
						if (propertyConstruct.constructor == Construct.MethodConstruct)
						{
							if (propertyConstruct.setToken)
							{
								if (!propertyConstruct.parameterConstructs[0] || !propertyConstruct.parameterConstructs[0].typeConstruct)
								{
									throw $es4.$$primitive(new Error('::10'));
								}
								return getType(identifier.construct, propertyConstruct.parameterConstructs[0].typeConstruct);
							}
							if (propertyConstruct.getToken)
							{
								if (!propertyConstruct.typeConstruct)
								{
									throw $es4.$$primitive(new Error('::9'));
								}
								return getType(identifier.construct, propertyConstruct.typeConstruct);
							}
							if (functionReturnType)
							{
								if (!propertyConstruct.typeConstruct)
								{
									throw $es4.$$primitive(new Error('::8'));
								}
								return getType(identifier.construct, propertyConstruct.typeConstruct);
							}
							return $$this.$$Analyzer.lookupType('Function');
						}
						if (!propertyConstruct || !propertyConstruct.typeConstruct)
						{
							throw $es4.$$primitive(new Error('::7'));
						}
						return getType(identifier.construct, propertyConstruct.typeConstruct);
					}
					throw $es4.$$primitive(new Error('cound not lookup static property ' + name + ' in: ' + type + ', ' + identifier + ', possible cause: compiling against out of date swc'));
				}
				if (type.isGlobal && (type.name == '*' || type.name == 'void'))
				{
					return type;
				}
				var construct = type.construct;
				if (!construct)
				{
					$$this.$$Analyzer.output();
					throw $es4.$$primitive(new Error('could not find construct in type: ' + type + ', property name: ' + name));
				}
				if (construct.constructor == Construct.ClassConstruct && construct.identifierToken.data == name)
				{
					return type;
				}
				if (construct.constructor == Construct.MethodConstruct)
				{
					if (construct.setToken)
					{
						return getType(construct, construct.parameterConstructs[0].typeConstruct);
					}
					if (construct.getToken)
					{
						return getType(construct, construct.typeConstruct);
					}
					if (functionReturnType)
					{
						if (!construct.typeConstruct)
						{
							throw $es4.$$primitive(new Error('::6'));
						}
						return getType(construct, construct.typeConstruct);
					}
					return $$this.$$Analyzer.lookupType('Function');
				}

				function findTypeInInterfaceConstruct($$$$construct) 
				{
					//set default parameter values
					var construct = $$$$construct;

					var type = getTypeInConstruct(construct);
					if (type)
					{
						return type;
					}
					for (var i = 0; i < construct.extendsNameConstructs.length; i++)
					{
						var fullyQualifiedName = $$this.$$Analyzer.lookupFullyQualifiedName(construct, construct.extendsNameConstructs[i]);
						var innerConstruct = $$this.$$Analyzer.lookupConstructInRootConstruct($$this.$$Analyzer.lookupRootConstruct(construct.rootConstruct, fullyQualifiedName), fullyQualifiedName);
						type = findTypeInInterfaceConstruct(innerConstruct);
						if (type)
						{
							return type;
						}
					}
					return null;
				}
;

				var innerConstruct = construct;
				var object = false;
				while (true)
				{
					if (innerConstruct.extendsNameConstructs)
					{
						var innerType = findTypeInInterfaceConstruct(innerConstruct);
						if (innerType)
						{
							return innerType;
						}
					}
					else
					{
						var innerType = getTypeInConstruct(innerConstruct);
						if (innerType)
						{
							return innerType;
						}
					}
					if (innerConstruct.extendsNameConstruct && Construct.nameConstructToString(innerConstruct.extendsNameConstruct) == 'Object')
					{
						object = true;
					}
					if (!innerConstruct.extendsNameConstruct && object)
					{
						break;
					}
					else if (!innerConstruct.extendsNameConstruct)
					{
						innerConstruct = $$this.$$Analyzer.lookupType('Object').construct;
						object = true;
					}
					else
					{
						innerConstruct = getType(innerConstruct, innerConstruct.extendsNameConstruct).construct;
					}
				}
				if (construct.dynamicToken)
				{
					return $$this.$$Analyzer.lookupType('*');
				}
				throw $es4.$$primitive(new Error('could not find property ' + name + ' in type ' + type + ' construct: ' + construct.identifierToken.data));

				function getTypeInConstruct($$$$construct) 
				{
					//set default parameter values
					var construct = $$$$construct;

					var propertyConstructs = (construct.constructor == Construct.InterfaceConstruct) ? construct.methodConstructs : construct.methodConstructs.concat(construct.propertyConstructs);
					for (var i = 0; i < propertyConstructs.length; i++)
					{
						var propertyConstruct = propertyConstructs[i];
						if (propertyConstruct.staticToken)
						{
							continue;
						}
						if (!propertyConstruct.namespaceToken && namespaceIdentifier)
						{
							continue;
						}
						if (namespaceIdentifier && namespaceIdentifier.name != propertyConstruct.namespaceToken.data)
						{
							continue;
						}
						if (propertyConstruct.identifierToken.data != name)
						{
							continue;
						}
						if (propertyConstruct.constructor == Construct.MethodConstruct)
						{
							if (propertyConstruct.setToken)
							{
								if (!propertyConstruct.parameterConstructs[0] || !propertyConstruct.parameterConstructs[0].typeConstruct)
								{
									throw $es4.$$primitive(new Error('::4'));
								}
								return getType(construct, propertyConstruct.parameterConstructs[0].typeConstruct);
							}
							if (propertyConstruct.getToken)
							{
								if (!propertyConstruct.typeConstruct)
								{
									throw $es4.$$primitive(new Error('::3'));
								}
								return getType(construct, propertyConstruct.typeConstruct);
							}
							if (functionReturnType)
							{
								if (!propertyConstruct.typeConstruct)
								{
									throw $es4.$$primitive(new Error('::1'));
								}
								return getType(construct, propertyConstruct.typeConstruct);
							}
							return $$this.$$Analyzer.lookupType('Function');
						}
						if (!propertyConstruct || !propertyConstruct.typeConstruct)
						{
							throw $es4.$$primitive(new Error('::2'));
						}
						return getType(construct, propertyConstruct.typeConstruct);
					}
					return null;
				}
;

				function getType($$$$construct, $$$$typeOrNameConstruct) 
				{
					//set default parameter values
					var construct = $$$$construct;
					var typeOrNameConstruct = $$$$typeOrNameConstruct;

					var importConstructs;
					var packageName;
					var typeName;
					if (construct.isInternal)
					{
						importConstructs = construct.rootConstruct.importConstructs;
						packageName = '';
					}
					else
					{
						importConstructs = construct.packageConstruct.importConstructs;
						if (construct.packageConstruct.nameConstruct == null)
						{
							throw $es4.$$primitive(new Error('invalid: ' + construct.identifierToken.data + ', ' + construct.packageConstruct.constructor));
						}
						packageName = Construct.nameConstructToString(construct.packageConstruct.nameConstruct);
					}
					if (!typeOrNameConstruct)
					{
						trace(construct.identifierToken.data);
						$$this.$$Analyzer.output();
					}
					if (typeOrNameConstruct.constructor == Construct.TypeConstruct)
					{
						if (!typeOrNameConstruct.nameConstruct && typeOrNameConstruct.mulToken)
						{
							return $$this.$$Analyzer.lookupType('*');
						}
						if (!typeOrNameConstruct.nameConstruct && typeOrNameConstruct.voidToken)
						{
							return $$this.$$Analyzer.lookupType('void');
						}
						if (!typeOrNameConstruct.nameConstruct)
						{
							throw $es4.$$primitive(new Error('invalid: ' + construct.identifierToken.data + ', name: ' + name));
						}
						typeName = Construct.nameConstructToString(typeOrNameConstruct.nameConstruct);
					}
					else if (typeOrNameConstruct.constructor == Construct.NameConstruct)
					{
						typeName = Construct.nameConstructToString(typeOrNameConstruct);
					}
					else
					{
						throw $es4.$$primitive(new Error('invalid type or name construct'));
					}
					if (typeName.split('.').length > 1)
					{
						return $$this.$$Analyzer.lookupType(typeOrNameConstruct);
					}
					if (!typeName)
					{
						throw $es4.$$primitive(new Error("invalid type name"));
					}
					if ($$this.$$Analyzer.hasIdentifier(typeName) && $$this.$$Analyzer.lookupIdentifier(typeName).isGlobal)
					{
						return $$this.$$Analyzer.lookupType(typeName);
					}
					for (var i = 0; i < importConstructs.length; i++)
					{
						var importConstruct = importConstructs[i];
						var innerName = importConstruct.nameConstruct.identifierTokens[importConstruct.nameConstruct.identifierTokens.length - 1].data;
						if (innerName == typeName)
						{
							return $$this.$$Analyzer.lookupType(Construct.nameConstructToString(importConstruct.nameConstruct));
						}
					}
					for (var id in $$this.$$Analyzer._rootConstructs)
					{
						var rootConstruct = $$this.$$Analyzer._rootConstructs[id];
						if (!rootConstruct)
						{
							throw $es4.$$primitive(new Error('Root construct null for id: ' + id));
						}
						if (!rootConstruct.packageConstruct)
						{
							throw $es4.$$primitive(new Error('Package construct missing in: ' + id));
						}
						if (rootConstruct.packageConstruct.nameConstruct && !construct.packageConstruct)
						{
							continue;
						}
						if (!rootConstruct.packageConstruct.nameConstruct && construct.packageConstruct.nameConstruct)
						{
							continue;
						}
						if (rootConstruct.packageConstruct.nameConstruct && construct.packageConstruct.nameConstruct)
						{
							var a = $es4.$$coerce(Construct.nameConstructToString(rootConstruct.packageConstruct.nameConstruct), String);
							var b = $es4.$$coerce(Construct.nameConstructToString(construct.packageConstruct.nameConstruct), String);
							if (a && (a != b))
							{
								continue;
							}
						}
						if ($$this.$$Analyzer.hasIdentifier(id) && $$this.$$Analyzer.lookupIdentifier(id).isGlobal)
						{
							continue;
						}
						if (!rootConstruct.packageConstruct.classConstruct && !rootConstruct.packageConstruct.interfaceConstruct)
						{
							continue;
						}
						if (id.split('.').pop() != typeName)
						{
							continue;
						}
						return $$this.$$Analyzer.lookupType(id);
					}
					if (typeName == construct.identifierToken.data)
					{
						return $$this.$$Analyzer.lookupType(typeName);
					}
					throw $es4.$$primitive(new Error('could not find type: ' + typeName + ' in ' + construct.identifierToken.data));
				}
;
			}

			return $$this.$$Analyzer.$$p.$$lookupPropertyType || ($$this.$$Analyzer.$$p.$$lookupPropertyType = lookupPropertyType);
		}};


		//private instance method
		Analyzer.prototype.$$v.print = {
		get:function ()
		{
			var $$this = this.$$this;

			function print($$$$string, $$$$tabs, $$$$newlines, $$$$preNewLines)
			{
				//set default parameter values
				var string = $$$$string;
				var tabs = $$$$tabs;
				var newlines = $$$$newlines;
				var preNewLines = $$$$preNewLines;

				if (tabs)
				{
					for (var i = 0; i < tabs; i++)
					{
						string = '\t' + string;
					}
				}
				if (newlines)
				{
					for (var i = 0; i < newlines; i++)
					{
						string += '\n';
					}
				}
				if (preNewLines)
				{
					for (var i = 0; i < preNewLines; i++)
					{
						string = '\n' + string;
					}
				}
				return string;
			}

			return $$this.$$Analyzer.$$p.$$print || ($$this.$$Analyzer.$$p.$$print = print);
		}};

		//properties
		Analyzer.prototype.$$v._rootConstruct = {
		get:function () { var $$this = this.$$this; return $$this.$$Analyzer.$$p._rootConstruct; },
		set:function (value) { var $$this = this.$$this; $$this.$$Analyzer.$$p._rootConstruct = value }
		};

		Analyzer.prototype.$$v._rootConstructs = {
		get:function () { var $$this = this.$$this; return $$this.$$Analyzer.$$p._rootConstructs; },
		set:function (value) { var $$this = this.$$this; $$this.$$Analyzer.$$p._rootConstructs = $es4.$$coerce(value, Object); }
		};

		Analyzer.prototype.$$v._translationMode = {
		get:function () { var $$this = this.$$this; return $$this.$$Analyzer.$$p._translationMode; },
		set:function (value) { var $$this = this.$$this; $$this.$$Analyzer.$$p._translationMode = $es4.$$coerce(value, int); }
		};

		Analyzer.prototype.$$v._doNotTreatPrivateMethodsAsNative = {
		get:function () { var $$this = this.$$this; return $$this.$$Analyzer.$$p._doNotTreatPrivateMethodsAsNative; },
		set:function (value) { var $$this = this.$$this; $$this.$$Analyzer.$$p._doNotTreatPrivateMethodsAsNative = $es4.$$coerce(value, Boolean); }
		};

		Analyzer.prototype.$$v._treatThisAsDynamic = {
		get:function () { var $$this = this.$$this; return $$this.$$Analyzer.$$p._treatThisAsDynamic; },
		set:function (value) { var $$this = this.$$this; $$this.$$Analyzer.$$p._treatThisAsDynamic = $es4.$$coerce(value, Boolean); }
		};

		Analyzer.prototype.$$v._indent = {
		get:function () { var $$this = this.$$this; return $$this.$$Analyzer.$$p._indent; },
		set:function (value) { var $$this = this.$$this; $$this.$$Analyzer.$$p._indent = value }
		};

		Analyzer.prototype.$$v._count = {
		get:function () { var $$this = this.$$this; return $$this.$$Analyzer.$$p._count; },
		set:function (value) { var $$this = this.$$this; $$this.$$Analyzer.$$p._count = value }
		};

		Analyzer.prototype.$$v._level = {
		get:function () { var $$this = this.$$this; return $$this.$$Analyzer.$$p._level; },
		set:function (value) { var $$this = this.$$this; $$this.$$Analyzer.$$p._level = $es4.$$coerce(value, int); }
		};

		Analyzer.prototype.$$v._inClosure = {
		get:function () { var $$this = this.$$this; return $$this.$$Analyzer.$$p._inClosure; },
		set:function (value) { var $$this = this.$$this; $$this.$$Analyzer.$$p._inClosure = value }
		};

		Analyzer.prototype.$$v._inNamespacedFunction = {
		get:function () { var $$this = this.$$this; return $$this.$$Analyzer.$$p._inNamespacedFunction; },
		set:function (value) { var $$this = this.$$this; $$this.$$Analyzer.$$p._inNamespacedFunction = value }
		};

		Analyzer.prototype.$$v._inStaticFunction = {
		get:function () { var $$this = this.$$this; return $$this.$$Analyzer.$$p._inStaticFunction; },
		set:function (value) { var $$this = this.$$this; $$this.$$Analyzer.$$p._inStaticFunction = value }
		};

		Analyzer.prototype.$$v._inIfStatement = {
		get:function () { var $$this = this.$$this; return $$this.$$Analyzer.$$p._inIfStatement; },
		set:function (value) { var $$this = this.$$this; $$this.$$Analyzer.$$p._inIfStatement = value }
		};

		Analyzer.prototype.$$v._returnTypeStack = {
		get:function () { var $$this = this.$$this; return $$this.$$Analyzer.$$p._returnTypeStack; },
		set:function (value) { var $$this = this.$$this; $$this.$$Analyzer.$$p._returnTypeStack = value }
		};

		Analyzer.prototype.$$v._identifiers = {
		get:function () { var $$this = this.$$this; return $$this.$$Analyzer.$$p._identifiers; },
		set:function (value) { var $$this = this.$$this; $$this.$$Analyzer.$$p._identifiers = value }
		};

		Analyzer.prototype.$$v._namespaces = {
		get:function () { var $$this = this.$$this; return $$this.$$Analyzer.$$p._namespaces; },
		set:function (value) { var $$this = this.$$this; $$this.$$Analyzer.$$p._namespaces = value }
		};

		Analyzer.prototype.$$v._useNamespaces = {
		get:function () { var $$this = this.$$this; return $$this.$$Analyzer.$$p._useNamespaces; },
		set:function (value) { var $$this = this.$$this; $$this.$$Analyzer.$$p._useNamespaces = value }
		};

		Analyzer.prototype.$$v._types = {
		get:function () { var $$this = this.$$this; return $$this.$$Analyzer.$$p._types; },
		set:function (value) { var $$this = this.$$this; $$this.$$Analyzer.$$p._types = value }
		};

	});

	//class initializer
	Analyzer.$$cinit = (function ()
	{
		Analyzer.$$cinit = undefined;

		//initialize properties
		$$j.globalIdentifiers = $es4.$$coerce([{name:'trace', returnType:'void'}, {name:'parseInt', returnType:'Number'}, {name:'parseFloat', returnType:'Number'}, {name:'isNaN', returnType:'Boolean'}, {name:'isFinite', returnType:'Boolean'}, {name:'escape', returnType:'String'}, {name:'unescape', returnType:'String'}, {name:'decodeURIComponent', returnType:'String'}, {name:'encodeURIComponent', returnType:'String'}, {name:'decodeURI', returnType:'String'}, {name:'encodeURI', returnType:'String'}, {name:'isXMLName', returnType:'Boolean'}, {name:'$es4', returnType:'Object'}, {name:'window', returnType:'Object'}, {name:'document', returnType:'Object'}, {name:'console', returnType:'Object'}, {name:'$', returnType:'Object'}, {name:'_', returnType:'Object'}, {name:'alert', returnType:'Object'}, {name:'debugger', returnType:'Object'}, {name:'setInterval', returnType:'Object'}, {name:'clearInterval', returnType:'Object'}, {name:'setTimeout', returnType:'Object'}, {name:'clearTimeout', returnType:'Object'}, {name:'require', returnType:'Object'}, {name:'global', returnType:'Object'}, {name:'process', returnType:'Object'}, {name:'__dirname', returnType:'String'}], Array);
		$$j._globals = $es4.$$coerce({'ArgumentError':1, 'Array':1, 'Boolean':1, 'Class':1, 'JSON':1, 'Walker':1, 'UninitializedError':1, 'Date':1, 'DefinitionError':1, 'Error':1, 'EvalError':1, 'Function':1, 'int':1, 'Math':1, 'Namespace':1, 'Number':1, 'Object':1, 'QName':1, 'RangeError':1, 'ReferenceError':1, 'RegExp':1, 'SecurityError':1, 'String':1, 'SyntaxError':1, 'TypeError':1, 'uint':1, 'URIError':1, 'Vector':1, 'VerifyError':1, 'XML':1, 'XMLList':1}, Object);
	
	});

	//public static method
	Analyzer.analyze = (function ($$$$rootConstruct, $$$$rootConstructs, $$$$translationMode, $$$$doNotTreatPrivateMethodsAsNative, $$$$treatThisAsDynamic)
	{
		if (Analyzer.$$cinit !== undefined) Analyzer.$$cinit();

		//set default parameter values
		var rootConstruct = $$$$rootConstruct;
		var rootConstructs = $$$$rootConstructs;
		var translationMode = $es4.$$coerce($$$$translationMode, Number);
		var doNotTreatPrivateMethodsAsNative = (3 > arguments.length - 1) ? false : $es4.$$coerce($$$$doNotTreatPrivateMethodsAsNative, Boolean);
		var treatThisAsDynamic = (4 > arguments.length - 1) ? false : $es4.$$coerce($$$$treatThisAsDynamic, Boolean);

		return $es4.$$primitive(new Analyzer().analyze(rootConstruct, rootConstructs, translationMode, doNotTreatPrivateMethodsAsNative, treatThisAsDynamic));
	});
	function Analyzer()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof Analyzer) || $$this.$$Analyzer !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Analyzer) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			Analyzer.$$construct($$this, $$args);
		}
	}

	//construct
	Analyzer.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (Analyzer.$$cinit !== undefined) Analyzer.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$Analyzer', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

		Object.defineProperty($$this.$$Analyzer, '_rootConstruct', Analyzer.prototype.$$v._rootConstruct);
		Object.defineProperty($$this.$$Analyzer, '_rootConstructs', Analyzer.prototype.$$v._rootConstructs);
		Object.defineProperty($$this.$$Analyzer, '_translationMode', Analyzer.prototype.$$v._translationMode);
		Object.defineProperty($$this.$$Analyzer, '_doNotTreatPrivateMethodsAsNative', Analyzer.prototype.$$v._doNotTreatPrivateMethodsAsNative);
		Object.defineProperty($$this.$$Analyzer, '_treatThisAsDynamic', Analyzer.prototype.$$v._treatThisAsDynamic);
		Object.defineProperty($$this.$$Analyzer, '_indent', Analyzer.prototype.$$v._indent);
		Object.defineProperty($$this.$$Analyzer, '_count', Analyzer.prototype.$$v._count);
		Object.defineProperty($$this.$$Analyzer, '_level', Analyzer.prototype.$$v._level);
		Object.defineProperty($$this.$$Analyzer, '_inClosure', Analyzer.prototype.$$v._inClosure);
		Object.defineProperty($$this.$$Analyzer, '_inNamespacedFunction', Analyzer.prototype.$$v._inNamespacedFunction);
		Object.defineProperty($$this.$$Analyzer, '_inStaticFunction', Analyzer.prototype.$$v._inStaticFunction);
		Object.defineProperty($$this.$$Analyzer, '_inIfStatement', Analyzer.prototype.$$v._inIfStatement);
		Object.defineProperty($$this.$$Analyzer, '_returnTypeStack', Analyzer.prototype.$$v._returnTypeStack);
		Object.defineProperty($$this.$$Analyzer, '_identifiers', Analyzer.prototype.$$v._identifiers);
		Object.defineProperty($$this.$$Analyzer, '_namespaces', Analyzer.prototype.$$v._namespaces);
		Object.defineProperty($$this.$$Analyzer, '_useNamespaces', Analyzer.prototype.$$v._useNamespaces);
		Object.defineProperty($$this.$$Analyzer, '_types', Analyzer.prototype.$$v._types);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'upLevel', Analyzer.prototype.$$v.upLevel);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'downLevel', Analyzer.prototype.$$v.downLevel);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'output', Analyzer.prototype.$$v.output);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'lookupConstructInRootConstruct', Analyzer.prototype.$$v.lookupConstructInRootConstruct);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'lookupRootConstruct', Analyzer.prototype.$$v.lookupRootConstruct);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'lookupPackageName', Analyzer.prototype.$$v.lookupPackageName);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'lookupFullyQualifiedName', Analyzer.prototype.$$v.lookupFullyQualifiedName);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'registerNamespace', Analyzer.prototype.$$v.registerNamespace);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'lookupNamespace', Analyzer.prototype.$$v.lookupNamespace);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'hasNamespace', Analyzer.prototype.$$v.hasNamespace);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'registerUseNamespace', Analyzer.prototype.$$v.registerUseNamespace);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'getUseNamespaces', Analyzer.prototype.$$v.getUseNamespaces);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'registerIdentifier', Analyzer.prototype.$$v.registerIdentifier);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'lookupIdentifier', Analyzer.prototype.$$v.lookupIdentifier);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'hasIdentifier', Analyzer.prototype.$$v.hasIdentifier);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'registerType', Analyzer.prototype.$$v.registerType);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'lookupType', Analyzer.prototype.$$v.lookupType);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'analyzeImplicitImports', Analyzer.prototype.$$v.analyzeImplicitImports);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'analyzeInterfaceConstruct', Analyzer.prototype.$$v.analyzeInterfaceConstruct);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'analyzePropertyConstruct', Analyzer.prototype.$$v.analyzePropertyConstruct);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'analyzeFunctionConstruct', Analyzer.prototype.$$v.analyzeFunctionConstruct);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'analyzeClassConstruct', Analyzer.prototype.$$v.analyzeClassConstruct);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'analyzeClassInitializer', Analyzer.prototype.$$v.analyzeClassInitializer);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'analyzeClassFunction', Analyzer.prototype.$$v.analyzeClassFunction);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'analyzeInternalClasses', Analyzer.prototype.$$v.analyzeInternalClasses);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'analyzeInternalInterfaces', Analyzer.prototype.$$v.analyzeInternalInterfaces);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'analyzeClassReturnStatement', Analyzer.prototype.$$v.analyzeClassReturnStatement);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'analyzeConstructor', Analyzer.prototype.$$v.analyzeConstructor);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'analyzeNamespaces', Analyzer.prototype.$$v.analyzeNamespaces);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'analyzeProperties', Analyzer.prototype.$$v.analyzeProperties);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'analyzeMethods', Analyzer.prototype.$$v.analyzeMethods);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'analyzeAccessors', Analyzer.prototype.$$v.analyzeAccessors);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'registerConstruct', Analyzer.prototype.$$v.registerConstruct);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'analyzeParameters', Analyzer.prototype.$$v.analyzeParameters);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'analyzeStatements', Analyzer.prototype.$$v.analyzeStatements);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'analyzeStatement', Analyzer.prototype.$$v.analyzeStatement);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'analyzeExpression', Analyzer.prototype.$$v.analyzeExpression);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'isCoerceRequired', Analyzer.prototype.$$v.isCoerceRequired);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'getGreatestCommonExpressionResult', Analyzer.prototype.$$v.getGreatestCommonExpressionResult);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'getGreatestCommonType', Analyzer.prototype.$$v.getGreatestCommonType);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'analyzePropertyExpression', Analyzer.prototype.$$v.analyzePropertyExpression);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'lookupPropertyType', Analyzer.prototype.$$v.lookupPropertyType);

		//private instance method
		Object.defineProperty($$this.$$Analyzer, 'print', Analyzer.prototype.$$v.print);

		//initialize properties
		Analyzer.$$iinit($$this);

		//call constructor
		if (args !== undefined) Analyzer.$$constructor.apply($$this, args);
	});

	//initializer
	Analyzer.$$iinit = (function ($$this)
	{
		//initialize properties
		$$this.$$Analyzer.$$p._rootConstruct = undefined;
		$$this.$$Analyzer.$$p._rootConstructs = $es4.$$coerce(undefined, Object);
		$$this.$$Analyzer.$$p._translationMode = $es4.$$coerce(undefined, int);
		$$this.$$Analyzer.$$p._doNotTreatPrivateMethodsAsNative = $es4.$$coerce(false, Boolean);
		$$this.$$Analyzer.$$p._treatThisAsDynamic = $es4.$$coerce(false, Boolean);
		$$this.$$Analyzer.$$p._indent = -1;
		$$this.$$Analyzer.$$p._count = -1;
		$$this.$$Analyzer.$$p._level = $es4.$$coerce(0, int);
		$$this.$$Analyzer.$$p._inClosure = false;
		$$this.$$Analyzer.$$p._inNamespacedFunction = false;
		$$this.$$Analyzer.$$p._inStaticFunction = false;
		$$this.$$Analyzer.$$p._inIfStatement = 0;
		$$this.$$Analyzer.$$p._returnTypeStack = [];
		$$this.$$Analyzer.$$p._identifiers = [{}];
		$$this.$$Analyzer.$$p._namespaces = [{}];
		$$this.$$Analyzer.$$p._useNamespaces = [[]];
		$$this.$$Analyzer.$$p._types = {};
	
	});

	//constructor
	Analyzer.$$constructor = (function ()
	{
		var $$this = this;
	});

	////////////////INTERNAL CLASS////////////////
	var NamespaceObj = (function ()
	{
		//class pre initializer
		NamespaceObj.$$sinit = (function ()
		{
			NamespaceObj.$$sinit = undefined;

			//set prototype and constructor
			NamespaceObj.prototype = Object.create(Object.prototype);
			Object.defineProperty(NamespaceObj.prototype, "constructor", { value: NamespaceObj, enumerable: false });

			//hold private values
			Object.defineProperty(NamespaceObj.prototype, '$$v', {value:{}});

			//public instance method
			Object.defineProperty(NamespaceObj.prototype, 'toString', {
			get:function ()
			{
				var $$this = this;

				function toString()
				{
					return 'Namespace::: ' + $$this.name;
				}

				return $$this.$$NamespaceObj.$$toString || ($$this.$$NamespaceObj.$$toString = toString);
			}});

			//properties
			Object.defineProperty(NamespaceObj.prototype, 'name', {
			get:function () { var $$this = this; return $$this.$$NamespaceObj.name; },
			set:function (value) { var $$this = this; $$this.$$NamespaceObj.name = value }
			});

			Object.defineProperty(NamespaceObj.prototype, 'normalizedName', {
			get:function () { var $$this = this; return $$this.$$NamespaceObj.normalizedName; },
			set:function (value) { var $$this = this; $$this.$$NamespaceObj.normalizedName = $es4.$$coerce(value, String); }
			});

			Object.defineProperty(NamespaceObj.prototype, 'isCustom', {
			get:function () { var $$this = this; return $$this.$$NamespaceObj.isCustom; },
			set:function (value) { var $$this = this; $$this.$$NamespaceObj.isCustom = $es4.$$coerce(value, Boolean); }
			});

			Object.defineProperty(NamespaceObj.prototype, 'isPrivate', {
			get:function () { var $$this = this; return $$this.$$NamespaceObj.isPrivate; },
			set:function (value) { var $$this = this; $$this.$$NamespaceObj.isPrivate = $es4.$$coerce(value, Boolean); }
			});

			Object.defineProperty(NamespaceObj.prototype, 'namespaceIsPrivate', {
			get:function () { var $$this = this; return $$this.$$NamespaceObj.namespaceIsPrivate; },
			set:function (value) { var $$this = this; $$this.$$NamespaceObj.namespaceIsPrivate = $es4.$$coerce(value, Boolean); }
			});

			Object.defineProperty(NamespaceObj.prototype, 'normalizedImportID', {
			get:function () { var $$this = this; return $$this.$$NamespaceObj.normalizedImportID; },
			set:function (value) { var $$this = this; $$this.$$NamespaceObj.normalizedImportID = $es4.$$coerce(value, String); }
			});

			Object.defineProperty(NamespaceObj.prototype, 'importID', {
			get:function () { var $$this = this; return $$this.$$NamespaceObj.importID; },
			set:function (value) { var $$this = this; $$this.$$NamespaceObj.importID = $es4.$$coerce(value, String); }
			});

			Object.defineProperty(NamespaceObj.prototype, 'identifier', {
			get:function () { var $$this = this; return $$this.$$NamespaceObj.identifier; },
			set:function (value) { var $$this = this; $$this.$$NamespaceObj.identifier = $es4.$$coerce(value, Identifier); }
			});

			Object.defineProperty(NamespaceObj.prototype, 'isStatic', {
			get:function () { var $$this = this; return $$this.$$NamespaceObj.isStatic; },
			set:function (value) { var $$this = this; $$this.$$NamespaceObj.isStatic = $es4.$$coerce(value, Boolean); }
			});

		});

		//class initializer
		NamespaceObj.$$cinit = (function ()
		{
			NamespaceObj.$$cinit = undefined;
		});

		function NamespaceObj()
		{
			var $$this;

			//save scope
			if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
			else
			{
				var $$this = this;

				if (!($$this instanceof NamespaceObj) || $$this.$$NamespaceObj !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], NamespaceObj) : $es4.$$throwArgumentError();
			}

			//call construct if no arguments, or argument zero does not equal manual construct
			if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
			{
				for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

				NamespaceObj.$$construct($$this, $$args);
			}
		}

		//construct
		NamespaceObj.$$construct = (function ($$this, args)
		{
			//initialize function if not initialized
			if (NamespaceObj.$$cinit !== undefined) NamespaceObj.$$cinit();

			//hold property values, and methods
			Object.defineProperty($$this, '$$NamespaceObj', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


			//initialize properties
			NamespaceObj.$$iinit($$this);

			//call constructor
			if (args !== undefined) NamespaceObj.$$constructor.apply($$this, args);
		});

		//initializer
		NamespaceObj.$$iinit = (function ($$this)
		{
			//initialize properties
			$$this.$$NamespaceObj.name = undefined;
			$$this.$$NamespaceObj.normalizedName = $es4.$$coerce(undefined, String);
			$$this.$$NamespaceObj.isCustom = $es4.$$coerce(undefined, Boolean);
			$$this.$$NamespaceObj.isPrivate = $es4.$$coerce(undefined, Boolean);
			$$this.$$NamespaceObj.namespaceIsPrivate = $es4.$$coerce(undefined, Boolean);
			$$this.$$NamespaceObj.normalizedImportID = $es4.$$coerce(undefined, String);
			$$this.$$NamespaceObj.importID = $es4.$$coerce(undefined, String);
			$$this.$$NamespaceObj.identifier = $es4.$$coerce(undefined, Identifier);
			$$this.$$NamespaceObj.isStatic = $es4.$$coerce(undefined, Boolean);
		
		});

		//constructor
		NamespaceObj.$$constructor = (function ($$$$name, $$$$importID, $$$$identifier)
		{
			var $$this = this;
			//set default parameter values
			var name = $es4.$$coerce($$$$name, String);
			var importID = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$importID, String);
			var identifier = (2 > arguments.length - 1) ? null : $es4.$$coerce($$$$identifier, Identifier);

			$$this.name = name;
			var parts = name.split('.');
			var part = parts.pop();
			$$this.normalizedName = (parts.length) ? '$[\'' + parts.join('.') + '\'].' + part : part;
			$$this.isCustom = true;
			$$this.isPrivate = name == 'private';
			$$this.namespaceIsPrivate = false;
			if (importID)
			{
				parts = importID.split('.');
				part = parts.pop();
				$$this.normalizedImportID = (parts.length) ? '$[\'' + parts.join('.') + '\'].' + part : part;
			}
			$$this.importID = importID;
			$$this.identifier = identifier;
		});

		return $es4.$$class(NamespaceObj, null, 'NamespaceObj');
	})();

	////////////////INTERNAL CLASS////////////////
	var Type = (function ()
	{
		//class pre initializer
		Type.$$sinit = (function ()
		{
			Type.$$sinit = undefined;

			//set prototype and constructor
			Type.prototype = Object.create(Object.prototype);
			Object.defineProperty(Type.prototype, "constructor", { value: Type, enumerable: false });

			//hold private values
			Object.defineProperty(Type.prototype, '$$v', {value:{}});

			//public instance method
			Object.defineProperty(Type.prototype, 'toString', {
			get:function ()
			{
				var $$this = this;

				function toString()
				{
					if ($$this.construct)
					{
						return 'Type::: ' + $$this.name + ' Construct: ' + (($$this.construct.identifierToken) ? $$this.construct.identifierToken.data : '');
					}
					else
					{
						return 'Type::: ' + $$this.name;
					}
				}

				return $$this.$$Type.$$toString || ($$this.$$Type.$$toString = toString);
			}});

			//properties
			Object.defineProperty(Type.prototype, 'name', {
			get:function () { var $$this = this; return $$this.$$Type.name; },
			set:function (value) { var $$this = this; $$this.$$Type.name = value }
			});

			Object.defineProperty(Type.prototype, 'fullyQualifiedName', {
			get:function () { var $$this = this; return $$this.$$Type.fullyQualifiedName; },
			set:function (value) { var $$this = this; $$this.$$Type.fullyQualifiedName = $es4.$$coerce(value, String); }
			});

			Object.defineProperty(Type.prototype, 'packageName', {
			get:function () { var $$this = this; return $$this.$$Type.packageName; },
			set:function (value) { var $$this = this; $$this.$$Type.packageName = $es4.$$coerce(value, String); }
			});

			Object.defineProperty(Type.prototype, 'rootConstruct', {
			get:function () { var $$this = this; return $$this.$$Type.rootConstruct; },
			set:function (value) { var $$this = this; $$this.$$Type.rootConstruct = $es4.$$coerce(value, Object); }
			});

			Object.defineProperty(Type.prototype, 'construct', {
			get:function () { var $$this = this; return $$this.$$Type.construct; },
			set:function (value) { var $$this = this; $$this.$$Type.construct = value }
			});

			Object.defineProperty(Type.prototype, 'isGlobal', {
			get:function () { var $$this = this; return $$this.$$Type.isGlobal; },
			set:function (value) { var $$this = this; $$this.$$Type.isGlobal = $es4.$$coerce(value, Boolean); }
			});

			Object.defineProperty(Type.prototype, 'isInterface', {
			get:function () { var $$this = this; return $$this.$$Type.isInterface; },
			set:function (value) { var $$this = this; $$this.$$Type.isInterface = $es4.$$coerce(value, Boolean); }
			});

			Object.defineProperty(Type.prototype, 'accessed', {
			get:function () { var $$this = this; return $$this.$$Type.accessed; },
			set:function (value) { var $$this = this; $$this.$$Type.accessed = $es4.$$coerce(value, Boolean); }
			});

		});

		//class initializer
		Type.$$cinit = (function ()
		{
			Type.$$cinit = undefined;
		});

		function Type()
		{
			var $$this;

			//save scope
			if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
			else
			{
				var $$this = this;

				if (!($$this instanceof Type) || $$this.$$Type !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Type) : $es4.$$throwArgumentError();
			}

			//call construct if no arguments, or argument zero does not equal manual construct
			if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
			{
				for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

				Type.$$construct($$this, $$args);
			}
		}

		//construct
		Type.$$construct = (function ($$this, args)
		{
			//initialize function if not initialized
			if (Type.$$cinit !== undefined) Type.$$cinit();

			//hold property values, and methods
			Object.defineProperty($$this, '$$Type', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


			//initialize properties
			Type.$$iinit($$this);

			//call constructor
			if (args !== undefined) Type.$$constructor.apply($$this, args);
		});

		//initializer
		Type.$$iinit = (function ($$this)
		{
			//initialize properties
			$$this.$$Type.name = undefined;
			$$this.$$Type.fullyQualifiedName = $es4.$$coerce(undefined, String);
			$$this.$$Type.packageName = $es4.$$coerce(undefined, String);
			$$this.$$Type.rootConstruct = $es4.$$coerce(undefined, Object);
			$$this.$$Type.construct = undefined;
			$$this.$$Type.isGlobal = $es4.$$coerce(undefined, Boolean);
			$$this.$$Type.isInterface = $es4.$$coerce(undefined, Boolean);
			$$this.$$Type.accessed = $es4.$$coerce(undefined, Boolean);
		
		});

		//constructor
		Type.$$constructor = (function ($$$$name, $$$$fullyQualifiedName, $$$$rootConstruct, $$$$construct)
		{
			var $$this = this;
			//set default parameter values
			var name = $es4.$$coerce($$$$name, String);
			var fullyQualifiedName = $es4.$$coerce($$$$fullyQualifiedName, String);
			var rootConstruct = $es4.$$coerce($$$$rootConstruct, Object);
			var construct = $$$$construct;

			$$this.name = name;
			$$this.fullyQualifiedName = (fullyQualifiedName) ? fullyQualifiedName : name;
			var parts = fullyQualifiedName.split('.');
			if (parts.length > 1)
			{
				parts.pop();
				$$this.packageName = parts.join('.');
			}
			else
			{
				$$this.packageName = '';
			}
			$$this.rootConstruct = rootConstruct;
			$$this.construct = construct;
			$$this.isGlobal = false;
			$$this.isInterface = false;
			$$this.accessed = false;
		});

		return $es4.$$class(Type, null, 'Type');
	})();

	////////////////INTERNAL CLASS////////////////
	var ExpressionResult = (function ()
	{
		//class pre initializer
		ExpressionResult.$$sinit = (function ()
		{
			ExpressionResult.$$sinit = undefined;

			//set prototype and constructor
			ExpressionResult.prototype = Object.create(Object.prototype);
			Object.defineProperty(ExpressionResult.prototype, "constructor", { value: ExpressionResult, enumerable: false });

			//hold private values
			Object.defineProperty(ExpressionResult.prototype, '$$v', {value:{}});

			//properties
			Object.defineProperty(ExpressionResult.prototype, 'type', {
			get:function () { var $$this = this; return $$this.$$ExpressionResult.type; },
			set:function (value) { var $$this = this; $$this.$$ExpressionResult.type = value }
			});

			Object.defineProperty(ExpressionResult.prototype, 'isNaN', {
			get:function () { var $$this = this; return $$this.$$ExpressionResult.isNaN; },
			set:function (value) { var $$this = this; $$this.$$ExpressionResult.isNaN = $es4.$$coerce(value, Boolean); }
			});

			Object.defineProperty(ExpressionResult.prototype, 'isNull', {
			get:function () { var $$this = this; return $$this.$$ExpressionResult.isNull; },
			set:function (value) { var $$this = this; $$this.$$ExpressionResult.isNull = $es4.$$coerce(value, Boolean); }
			});

			Object.defineProperty(ExpressionResult.prototype, 'isUndefined', {
			get:function () { var $$this = this; return $$this.$$ExpressionResult.isUndefined; },
			set:function (value) { var $$this = this; $$this.$$ExpressionResult.isUndefined = $es4.$$coerce(value, Boolean); }
			});

			Object.defineProperty(ExpressionResult.prototype, 'isVoid', {
			get:function () { var $$this = this; return $$this.$$ExpressionResult.isVoid; },
			set:function (value) { var $$this = this; $$this.$$ExpressionResult.isVoid = $es4.$$coerce(value, Boolean); }
			});

			Object.defineProperty(ExpressionResult.prototype, 'varIdentifier', {
			get:function () { var $$this = this; return $$this.$$ExpressionResult.varIdentifier; },
			set:function (value) { var $$this = this; $$this.$$ExpressionResult.varIdentifier = $es4.$$coerce(value, Identifier); }
			});

		});

		//class initializer
		ExpressionResult.$$cinit = (function ()
		{
			ExpressionResult.$$cinit = undefined;
		});

		function ExpressionResult()
		{
			var $$this;

			//save scope
			if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
			else
			{
				var $$this = this;

				if (!($$this instanceof ExpressionResult) || $$this.$$ExpressionResult !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], ExpressionResult) : $es4.$$throwArgumentError();
			}

			//call construct if no arguments, or argument zero does not equal manual construct
			if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
			{
				for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

				ExpressionResult.$$construct($$this, $$args);
			}
		}

		//construct
		ExpressionResult.$$construct = (function ($$this, args)
		{
			//initialize function if not initialized
			if (ExpressionResult.$$cinit !== undefined) ExpressionResult.$$cinit();

			//hold property values, and methods
			Object.defineProperty($$this, '$$ExpressionResult', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


			//initialize properties
			ExpressionResult.$$iinit($$this);

			//call constructor
			if (args !== undefined) ExpressionResult.$$constructor.apply($$this, args);
		});

		//initializer
		ExpressionResult.$$iinit = (function ($$this)
		{
			//initialize properties
			$$this.$$ExpressionResult.type = undefined;
			$$this.$$ExpressionResult.isNaN = $es4.$$coerce(undefined, Boolean);
			$$this.$$ExpressionResult.isNull = $es4.$$coerce(undefined, Boolean);
			$$this.$$ExpressionResult.isUndefined = $es4.$$coerce(undefined, Boolean);
			$$this.$$ExpressionResult.isVoid = $es4.$$coerce(undefined, Boolean);
			$$this.$$ExpressionResult.varIdentifier = $es4.$$coerce(undefined, Identifier);
		
		});

		//constructor
		ExpressionResult.$$constructor = (function ($$$$type, $$$$isNaN, $$$$isNull, $$$$isUndefined, $$$$isVoid, $$$$varIdentifier)
		{
			var $$this = this;
			//set default parameter values
			var type = $$$$type;
			var isNaN = $es4.$$coerce($$$$isNaN, Boolean);
			var isNull = $es4.$$coerce($$$$isNull, Boolean);
			var isUndefined = $es4.$$coerce($$$$isUndefined, Boolean);
			var isVoid = $es4.$$coerce($$$$isVoid, Boolean);
			var varIdentifier = (5 > arguments.length - 1) ? null : $es4.$$coerce($$$$varIdentifier, Identifier);

			$$this.type = type;
			$$this.isNaN = isNaN;
			$$this.isNull = isNull;
			$$this.isUndefined = isUndefined;
			$$this.isVoid = isVoid;
			$$this.varIdentifier = varIdentifier;
		});

		return $es4.$$class(ExpressionResult, null, 'ExpressionResult');
	})();

	////////////////INTERNAL CLASS////////////////
	var Identifier = (function ()
	{
		//class pre initializer
		Identifier.$$sinit = (function ()
		{
			Identifier.$$sinit = undefined;

			//set prototype and constructor
			Identifier.prototype = Object.create(Object.prototype);
			Object.defineProperty(Identifier.prototype, "constructor", { value: Identifier, enumerable: false });

			//hold private values
			Object.defineProperty(Identifier.prototype, '$$v', {value:{}});

			//public instance method
			Object.defineProperty(Identifier.prototype, 'toString', {
			get:function ()
			{
				var $$this = this;

				function toString()
				{
					return 'Identifier::: ' + $$this.name + ', scope: ' + $$this.scope;
				}

				return $$this.$$Identifier.$$toString || ($$this.$$Identifier.$$toString = toString);
			}});

			//properties
			Object.defineProperty(Identifier.prototype, 'name', {
			get:function () { var $$this = this; return $$this.$$Identifier.name; },
			set:function (value) { var $$this = this; $$this.$$Identifier.name = value }
			});

			Object.defineProperty(Identifier.prototype, 'type', {
			get:function () { var $$this = this; return $$this.$$Identifier.type; },
			set:function (value) { var $$this = this; $$this.$$Identifier.type = value }
			});

			Object.defineProperty(Identifier.prototype, 'vectorType', {
			get:function () { var $$this = this; return $$this.$$Identifier.vectorType; },
			set:function (value) { var $$this = this; $$this.$$Identifier.vectorType = value }
			});

			Object.defineProperty(Identifier.prototype, 'namespaceObj', {
			get:function () { var $$this = this; return $$this.$$Identifier.namespaceObj; },
			set:function (value) { var $$this = this; $$this.$$Identifier.namespaceObj = value }
			});

			Object.defineProperty(Identifier.prototype, 'construct', {
			get:function () { var $$this = this; return $$this.$$Identifier.construct; },
			set:function (value) { var $$this = this; $$this.$$Identifier.construct = value }
			});

			Object.defineProperty(Identifier.prototype, 'isStatic', {
			get:function () { var $$this = this; return $$this.$$Identifier.isStatic; },
			set:function (value) { var $$this = this; $$this.$$Identifier.isStatic = $es4.$$coerce(value, Boolean); }
			});

			Object.defineProperty(Identifier.prototype, 'isNative', {
			get:function () { var $$this = this; return $$this.$$Identifier.isNative; },
			set:function (value) { var $$this = this; $$this.$$Identifier.isNative = $es4.$$coerce(value, Boolean); }
			});

			Object.defineProperty(Identifier.prototype, 'isPrivate', {
			get:function () { var $$this = this; return $$this.$$Identifier.isPrivate; },
			set:function (value) { var $$this = this; $$this.$$Identifier.isPrivate = $es4.$$coerce(value, Boolean); }
			});

			Object.defineProperty(Identifier.prototype, 'isPackage', {
			get:function () { var $$this = this; return $$this.$$Identifier.isPackage; },
			set:function (value) { var $$this = this; $$this.$$Identifier.isPackage = $es4.$$coerce(value, Boolean); }
			});

			Object.defineProperty(Identifier.prototype, 'isProperty', {
			get:function () { var $$this = this; return $$this.$$Identifier.isProperty; },
			set:function (value) { var $$this = this; $$this.$$Identifier.isProperty = $es4.$$coerce(value, Boolean); }
			});

			Object.defineProperty(Identifier.prototype, 'isMethod', {
			get:function () { var $$this = this; return $$this.$$Identifier.isMethod; },
			set:function (value) { var $$this = this; $$this.$$Identifier.isMethod = $es4.$$coerce(value, Boolean); }
			});

			Object.defineProperty(Identifier.prototype, 'isGlobal', {
			get:function () { var $$this = this; return $$this.$$Identifier.isGlobal; },
			set:function (value) { var $$this = this; $$this.$$Identifier.isGlobal = $es4.$$coerce(value, Boolean); }
			});

			Object.defineProperty(Identifier.prototype, 'isType', {
			get:function () { var $$this = this; return $$this.$$Identifier.isType; },
			set:function (value) { var $$this = this; $$this.$$Identifier.isType = $es4.$$coerce(value, Boolean); }
			});

			Object.defineProperty(Identifier.prototype, 'isImport', {
			get:function () { var $$this = this; return $$this.$$Identifier.isImport; },
			set:function (value) { var $$this = this; $$this.$$Identifier.isImport = $es4.$$coerce(value, Boolean); }
			});

			Object.defineProperty(Identifier.prototype, 'isNamespace', {
			get:function () { var $$this = this; return $$this.$$Identifier.isNamespace; },
			set:function (value) { var $$this = this; $$this.$$Identifier.isNamespace = $es4.$$coerce(value, Boolean); }
			});

			Object.defineProperty(Identifier.prototype, 'isInternal', {
			get:function () { var $$this = this; return $$this.$$Identifier.isInternal; },
			set:function (value) { var $$this = this; $$this.$$Identifier.isInternal = $es4.$$coerce(value, Boolean); }
			});

			Object.defineProperty(Identifier.prototype, 'scope', {
			get:function () { var $$this = this; return $$this.$$Identifier.scope; },
			set:function (value) { var $$this = this; $$this.$$Identifier.scope = value }
			});

			Object.defineProperty(Identifier.prototype, 'accessed', {
			get:function () { var $$this = this; return $$this.$$Identifier.accessed; },
			set:function (value) { var $$this = this; $$this.$$Identifier.accessed = $es4.$$coerce(value, Boolean); }
			});

			Object.defineProperty(Identifier.prototype, 'fullPackageName', {
			get:function () { var $$this = this; return $$this.$$Identifier.fullPackageName; },
			set:function (value) { var $$this = this; $$this.$$Identifier.fullPackageName = $es4.$$coerce(value, String); }
			});

			Object.defineProperty(Identifier.prototype, 'isVar', {
			get:function () { var $$this = this; return $$this.$$Identifier.isVar; },
			set:function (value) { var $$this = this; $$this.$$Identifier.isVar = $es4.$$coerce(value, Boolean); }
			});

			Object.defineProperty(Identifier.prototype, 'isVarInitialized', {
			get:function () { var $$this = this; return $$this.$$Identifier.isVarInitialized; },
			set:function (value) { var $$this = this; $$this.$$Identifier.isVarInitialized = $es4.$$coerce(value, Boolean); }
			});

		});

		//class initializer
		Identifier.$$cinit = (function ()
		{
			Identifier.$$cinit = undefined;
		});

		function Identifier()
		{
			var $$this;

			//save scope
			if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
			else
			{
				var $$this = this;

				if (!($$this instanceof Identifier) || $$this.$$Identifier !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Identifier) : $es4.$$throwArgumentError();
			}

			//call construct if no arguments, or argument zero does not equal manual construct
			if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
			{
				for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

				Identifier.$$construct($$this, $$args);
			}
		}

		//construct
		Identifier.$$construct = (function ($$this, args)
		{
			//initialize function if not initialized
			if (Identifier.$$cinit !== undefined) Identifier.$$cinit();

			//hold property values, and methods
			Object.defineProperty($$this, '$$Identifier', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


			//initialize properties
			Identifier.$$iinit($$this);

			//call constructor
			if (args !== undefined) Identifier.$$constructor.apply($$this, args);
		});

		//initializer
		Identifier.$$iinit = (function ($$this)
		{
			//initialize properties
			$$this.$$Identifier.name = undefined;
			$$this.$$Identifier.type = undefined;
			$$this.$$Identifier.vectorType = undefined;
			$$this.$$Identifier.namespaceObj = undefined;
			$$this.$$Identifier.construct = undefined;
			$$this.$$Identifier.isStatic = $es4.$$coerce(undefined, Boolean);
			$$this.$$Identifier.isNative = $es4.$$coerce(undefined, Boolean);
			$$this.$$Identifier.isPrivate = $es4.$$coerce(undefined, Boolean);
			$$this.$$Identifier.isPackage = $es4.$$coerce(undefined, Boolean);
			$$this.$$Identifier.isProperty = $es4.$$coerce(undefined, Boolean);
			$$this.$$Identifier.isMethod = $es4.$$coerce(undefined, Boolean);
			$$this.$$Identifier.isGlobal = $es4.$$coerce(undefined, Boolean);
			$$this.$$Identifier.isType = $es4.$$coerce(undefined, Boolean);
			$$this.$$Identifier.isImport = $es4.$$coerce(undefined, Boolean);
			$$this.$$Identifier.isNamespace = $es4.$$coerce(undefined, Boolean);
			$$this.$$Identifier.isInternal = $es4.$$coerce(undefined, Boolean);
			$$this.$$Identifier.scope = undefined;
			$$this.$$Identifier.accessed = $es4.$$coerce(undefined, Boolean);
			$$this.$$Identifier.fullPackageName = $es4.$$coerce(undefined, String);
			$$this.$$Identifier.isVar = $es4.$$coerce(undefined, Boolean);
			$$this.$$Identifier.isVarInitialized = $es4.$$coerce(undefined, Boolean);
		
		});

		//constructor
		Identifier.$$constructor = (function ($$$$name, $$$$type, $$$$vectorType)
		{
			var $$this = this;
			//set default parameter values
			var name = $$$$name;
			var type = $$$$type;
			var vectorType = (2 > arguments.length - 1) ? null : $$$$vectorType;

			$$this.name = name;
			$$this.type = type;
			$$this.vectorType = vectorType;
			$$this.namespaceObj;
			$$this.construct;
			$$this.isStatic = false;
			$$this.isNative = false;
			$$this.isPrivate = false;
			$$this.isPackage = false;
			$$this.isProperty = false;
			$$this.isMethod = false;
			$$this.isGlobal = false;
			$$this.isType = false;
			$$this.isImport = false;
			$$this.isNamespace = false;
			$$this.scope;
			$$this.accessed = false;
			$$this.fullPackageName;
			$$this.isVar = false;
			$$this.isVarInitialized = false;
		});

		return $es4.$$class(Identifier, null, 'Identifier');
	})();

	return $es4.$$class(Analyzer, {CLASSES:[NamespaceObj, Type, ExpressionResult, Identifier]}, 'sweetrush.core::Analyzer');
})();
//sweetrush.core.Analyzer


//sweetrush.core.Lexer
$es4.$$package('sweetrush.core').Lexer = (function ()
{
	//imports
	var AS3_JS;
	var Token;
	var AS3_JS;
	var Analyzer;
	var Lexer;
	var Parser;
	var TranslatorProto;
	var TranslatorPrototype;
	var Construct;
	var Token;
	var Base64Util;
	var FileUtil;
	var JsonUtil;
	var SwcUtil;

	//properties
	var $$j = {};
	Object.defineProperty(Lexer, 'grammar', {
	get:function () { if (Lexer.$$cinit !== undefined) Lexer.$$cinit(); return $$j.grammar; },
	set:function (value) { if (Lexer.$$cinit !== undefined) Lexer.$$cinit(); $$j.grammar = $es4.$$coerce(value, Array); }
	});


	//class pre initializer
	Lexer.$$sinit = (function ()
	{
		Lexer.$$sinit = undefined;

		//initialize imports
		AS3_JS = $es4.$$['sweetrush'].AS3_JS;
		Token = $es4.$$['sweetrush.obj'].Token;
		Analyzer = $es4.$$['sweetrush.core'].Analyzer;
		Parser = $es4.$$['sweetrush.core'].Parser;
		TranslatorProto = $es4.$$['sweetrush.core'].TranslatorProto;
		TranslatorPrototype = $es4.$$['sweetrush.core'].TranslatorPrototype;
		Construct = $es4.$$['sweetrush.obj'].Construct;
		Base64Util = $es4.$$['sweetrush.utils'].Base64Util;
		FileUtil = $es4.$$['sweetrush.utils'].FileUtil;
		JsonUtil = $es4.$$['sweetrush.utils'].JsonUtil;
		SwcUtil = $es4.$$['sweetrush.utils'].SwcUtil;

		//set prototype and constructor
		Lexer.prototype = Object.create(Object.prototype);
		Object.defineProperty(Lexer.prototype, "constructor", { value: Lexer, enumerable: false });

		//hold private values
		Object.defineProperty(Lexer.prototype, '$$v', {value:{}});
	});

	//class initializer
	Lexer.$$cinit = (function ()
	{
		Lexer.$$cinit = undefined;

		//initialize properties
		$$j.grammar = $es4.$$coerce([Token.SpaceTokenType, Token.TabTokenType, Token.EOSTokenType, Token.NewLineTokenType, Token.OpenBracketTokenType, Token.ClosedBracketTokenType, Token.OpenParenTokenType, Token.ClosedParenTokenType, Token.VectorDotOpenArrowTokenType, Token.XMLTokenType, Token.XMLCDATATokenType, Token.EqualityTokenType, Token.BitwiseLeftShiftAssignmentTokenType, Token.BitwiseUnsignedRightShiftAssignmentTokenType, Token.BitwiseRightShiftAssignmentTokenType, Token.BitwiseLeftShiftTokenType, Token.BitwiseUnsignedRightShiftTokenType, Token.BitwiseRightShiftTokenType, Token.RelationalTokenType, Token.AddWithAssignmentTokenType, Token.DivWithAssignmentTokenType, Token.ModWithAssignmentTokenType, Token.MulWithAssignmentTokenType, Token.SubWithAssignmentTokenType, Token.AssignmentTokenType, Token.NamespaceQualifierTokenType, Token.ColonTokenType, Token.CommaTokenType, Token.BooleanTokenType, Token.StringTokenType, Token.AsTokenType, Token.DeleteTokenType, Token.IfTokenType, Token.ElseTokenType, Token.EachTokenType, Token.ForTokenType, Token.WhileTokenType, Token.DoTokenType, Token.TryTokenType, Token.CatchTokenType, Token.BreakTokenType, Token.InTokenType, Token.ContinueTokenType, Token.DefaultTokenType, Token.ConstTokenType, Token.WithTokenType, Token.FinallyTokenType, Token.ThisTokenType, Token.TypeofTokenType, Token.NullTokenType, Token.UndefinedTokenType, Token.VoidTokenType, Token.SuperTokenType, Token.ReturnTokenType, Token.ThrowTokenType, Token.TernaryTokenType, Token.ClassTokenType, Token.ImportTokenType, Token.ExtendsTokenType, Token.ImplementsTokenType, Token.OverrideTokenType, Token.StaticTokenType, Token.DynamicTokenType, Token.InterfaceTokenType, Token.FinalTokenType, Token.NamespaceKeywordTokenType, Token.NewTokenType, Token.UseTokenType, Token.CaseTokenType, Token.FunctionTokenType, Token.VarTokenType, Token.NumberTokenType, Token.AndWithAssignmentTokenType, Token.OrWithAssignmentTokenType, Token.AndTokenType, Token.OrTokenType, Token.BitwiseAndAssignmentTokenType, Token.BitwiseOrAssignmentTokenType, Token.BitwiseXorAssignmentTokenType, Token.BitwiseAndTokenType, Token.BitwiseNotTokenType, Token.BitwiseOrTokenType, Token.BitwiseXorTokenType, Token.AtTokenType, Token.SwitchTokenType, Token.DotDotTokenType, Token.DotTokenType, Token.NotTokenType, Token.IncrementTokenType, Token.DecrementTokenType, Token.OpenBraceTokenType, Token.ClosedBraceTokenType, Token.PackageTokenType, Token.IsTokenType, Token.NaNTokenType, Token.InstanceofTokenType, Token.IdentifierTokenType, Token.CommentTokenType, Token.MultiLineCommentTokenType, Token.AddTokenType, Token.SubTokenType, Token.RegExpTokenType, Token.DivTokenType, Token.MulTokenType, Token.ModTokenType, Token.UFOTokenType], Array);
	
	});

	//public static method
	Lexer.lex = (function ($$$$input, $$$$grammar, $$$$internal_)
	{
		if (Lexer.$$cinit !== undefined) Lexer.$$cinit();

		//set default parameter values
		var input = $es4.$$coerce($$$$input, String);
		var grammar = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$grammar, Array);
		var internal_ = (2 > arguments.length - 1) ? null : $$$$internal_;

		var s = ($es4.$$primitive(new Date())).getTime();
		if (!grammar)
		{
			grammar = Lexer.grammar;
		}
		if (!internal_)
		{
			input = input.split(/\r\n/).join('\n');
		}
		var token;
		var tokens = [];
		var matcherObj = Lexer.matcher(input, grammar, internal_);
		while ((token = matcherObj.find()) != null)
		{
			tokens.push(token);
		}
		if (AS3_JS.DEBUG >= 5 && !internal_)
		{
			trace('Tokens length: ' + tokens.length + ', Total time: ' + ((($es4.$$primitive(new Date())).getTime() - s) / 1000) + ' seconds.\n');
		}
		return Token.getNewResult(tokens, matcherObj.getIndex());
	});

	//private static method
	Lexer.matcher = (function ($$$$input, $$$$grammar, $$$$internal_)
	{
		if (Lexer.$$cinit !== undefined) Lexer.$$cinit();

		//set default parameter values
		var input = $$$$input;
		var grammar = $$$$grammar;
		var internal_ = $$$$internal_;

		var tokensIndex = 0;
		var tokens = [];
		var currentLine = 1;
		var currentPosition = 0;
		var length = input.length;
		var foundTokens = [];
		var find = function () 
		{
			if (tokens.length)
			{
				var token = tokens[tokensIndex];
				if (token.type == Token.NewLineTokenType)
				{
					token.position = currentPosition + 1;
					token.line = currentLine;
					currentLine++;
					currentPosition = 0;
				}
				else
				{
					token.position = currentPosition + 1;
					token.line = currentLine;
					currentPosition += token.data.length;
				}
				if (AS3_JS.DEBUG >= 4 && !internal_)
				{
					trace(token.line + ' : ' + token.position + ' : ' + token.type.name + ' => ' + token.data);
				}
				if (++tokensIndex == tokens.length)
				{
					tokens = [];
					tokensIndex = 0;
				}
				return token;
			}
			if (!input.length)
			{
				return null;
			}
			var grammarLength = grammar.length;
			for (var i = 0; i < grammarLength; i++)
			{
				var type = grammar[i];
				var result = Token.tokenFunctions[type].find(input, foundTokens);
				if (result)
				{
					input = input.slice(result.index + 1);
					tokens = result.tokens;
					tokensIndex = 0;
					foundTokens.push(tokens);
					return find();
				}
			}
			if (!internal_ && input.length)
			{
				throw $es4.$$primitive(new Error('Unknown token found on line ' + currentLine + ', at position ' + (currentPosition + 1)));
			}
			return null;
		}
;
		var getIndex = function () 
		{
			return length - input.length;
		}
;
		var api = {};
		api.find = find;
		api.getIndex = getIndex;
		return api;
	});
	function Lexer()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof Lexer) || $$this.$$Lexer !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Lexer) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			Lexer.$$construct($$this, $$args);
		}
	}

	//construct
	Lexer.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (Lexer.$$cinit !== undefined) Lexer.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$Lexer', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		Lexer.$$iinit($$this);

		//call constructor
		if (args !== undefined) Lexer.$$constructor.apply($$this, args);
	});

	//initializer
	Lexer.$$iinit = (function ($$this)
	{
	});

	//constructor
	Lexer.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(Lexer, null, 'sweetrush.core::Lexer');
})();
//sweetrush.core.Lexer


//sweetrush.core.Parser
$es4.$$package('sweetrush.core').Parser = (function ()
{
	//imports
	var Construct;
	var Token;
	var AS3_JS;
	var Analyzer;
	var Lexer;
	var Parser;
	var TranslatorProto;
	var TranslatorPrototype;
	var Construct;
	var Token;
	var Base64Util;
	var FileUtil;
	var JsonUtil;
	var SwcUtil;

	//class pre initializer
	Parser.$$sinit = (function ()
	{
		Parser.$$sinit = undefined;

		//initialize imports
		Construct = $es4.$$['sweetrush.obj'].Construct;
		Token = $es4.$$['sweetrush.obj'].Token;
		AS3_JS = $es4.$$['sweetrush'].AS3_JS;
		Analyzer = $es4.$$['sweetrush.core'].Analyzer;
		Lexer = $es4.$$['sweetrush.core'].Lexer;
		TranslatorProto = $es4.$$['sweetrush.core'].TranslatorProto;
		TranslatorPrototype = $es4.$$['sweetrush.core'].TranslatorPrototype;
		Base64Util = $es4.$$['sweetrush.utils'].Base64Util;
		FileUtil = $es4.$$['sweetrush.utils'].FileUtil;
		JsonUtil = $es4.$$['sweetrush.utils'].JsonUtil;
		SwcUtil = $es4.$$['sweetrush.utils'].SwcUtil;

		//set prototype and constructor
		Parser.prototype = Object.create(Object.prototype);
		Object.defineProperty(Parser.prototype, "constructor", { value: Parser, enumerable: false });

		//hold private values
		Object.defineProperty(Parser.prototype, '$$v', {value:{}});
	});

	//class initializer
	Parser.$$cinit = (function ()
	{
		Parser.$$cinit = undefined;
	});

	//public static method
	Parser.parse = (function ($$$$tokens, $$$$compileConstants, $$$$release)
	{
		if (Parser.$$cinit !== undefined) Parser.$$cinit();

		//set default parameter values
		var tokens = $es4.$$coerce($$$$tokens, Array);
		var compileConstants = $es4.$$coerce($$$$compileConstants, Object);
		var release = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$release, Boolean);

		if (!tokens.length)
		{
			return null;
		}
		if (!compileConstants)
		{
			compileConstants = {};
		}
		var index = -1;
		var ahead = 1;
		var rootConstruct = Construct.getNewRootConstruct();
		var callsSuper = false;
		var inCompileConstant = false;
		var add = true;
		var previousAddValue = add;
		var token;
		var statementImportConstructs = [];
		loopa:		while (token = peek(ahead))
		{
			ahead++;
			switch (token.type)
			{
				case Token.PackageTokenType:
					var p = matchPackageConstruct(rootConstruct);
					if (add)
					{
						rootConstruct.packageConstruct = p;
						rootConstruct.packageConstruct.rootConstruct = rootConstruct;
					}
					break;
				case Token.ImportTokenType:
					var p = matchImportConstruct();
					if (add)
					{
						rootConstruct.importConstructs.push(p);
					}
					break;
				case Token.ElseTokenType:
					match(Token.ElseTokenType);
					if (inCompileConstant)
					{
						throw $es4.$$primitive(new Error('nested compile constants are not supported'));
					}
					inCompileConstant = true;
					add = !previousAddValue;
					match(Token.OpenBraceTokenType);
					break;
				case Token.IfTokenType:
					match(Token.IfTokenType);
					match(Token.OpenParenTokenType);
					if (inCompileConstant)
					{
						throw $es4.$$primitive(new Error('nested compile constants are not supported'));
					}
				case Token.IdentifierTokenType:
					if (peek(ahead, 0, true).type == Token.NamespaceQualifierTokenType && peek(ahead + 1, 0, true).type == Token.IdentifierTokenType)
					{
						if (inCompileConstant)
						{
							throw $es4.$$primitive(new Error('nested compile constants are not supported'));
						}
						var compileConstantIdentifier = '';
						compileConstantIdentifier += match(Token.IdentifierTokenType).data;
						compileConstantIdentifier += match(Token.NamespaceQualifierTokenType).data;
						compileConstantIdentifier += match(Token.IdentifierTokenType).data;
						match(Token.ClosedParenTokenType, true);
						inCompileConstant = true;
						add = compileConstants[compileConstantIdentifier] == 'true';
						match(Token.OpenBraceTokenType);
						break;
					}
					continue loopa;
				case Token.ClosedBraceTokenType:
					if (inCompileConstant)
					{
						match(Token.ClosedBraceTokenType);
						inCompileConstant = false;
						previousAddValue = add;
						add = true;
						break;
					}
				case Token.FinalTokenType:
				case Token.DynamicTokenType:
					continue loopa;
				case Token.ClassTokenType:
					var classConstruct = matchClassConstruct();
					if (add)
					{
						classConstruct.isInternal = true;
						classConstruct.rootConstruct = rootConstruct;
						rootConstruct.importConstructs = classConstruct.importConstructs.concat(rootConstruct.importConstructs);
						rootConstruct.classConstructs.push(classConstruct);
					}
					break;
				case Token.InterfaceTokenType:
					var interfaceConstruct = matchInterfaceConstruct();
					if (add)
					{
						interfaceConstruct.isInternal = true;
						interfaceConstruct.rootConstruct = rootConstruct;
						rootConstruct.interfaceConstructs.push(interfaceConstruct);
					}
					break;
				case Token.FunctionTokenType:
					var methodConstruct = matchMethodConstruct();
					if (add)
					{
						methodConstruct.isInternal = true;
						methodConstruct.rootConstruct = rootConstruct;
						if (!(methodConstruct.UNIMPLEMENTEDToken && release))
						{
							rootConstruct.methodConstructs.push(methodConstruct);
						}
					}
					break;
				case Token.NamespaceKeywordTokenType:
				case Token.VarTokenType:
					var propertyConstruct = matchPropertyConstruct();
					if (add)
					{
						propertyConstruct.isInternal = true;
						propertyConstruct.rootConstruct = rootConstruct;
						rootConstruct.propertyConstructs.push(propertyConstruct);
					}
					break;
				default:
					throw error('Unexpected token found11.', token);
			}
			ahead = 1;
		}

		function matchTypeConstruct() 
		{
			var typeConstruct = Construct.getNewTypeConstruct();
			var token = peek(1);
			if (token.type == Token.MulTokenType)
			{
				typeConstruct.mulToken = match(Token.MulTokenType);
			}
			else if (token.type == Token.VoidTokenType)
			{
				typeConstruct.voidToken = match(Token.VoidTokenType);
			}
			else
			{
				typeConstruct.nameConstruct = matchNameConstruct();
				if (match(Token.VectorDotOpenArrowTokenType, true))
				{
					typeConstruct.vectorNameConstruct = matchNameConstruct();
					match(Token.VectorClosedArrowTokenType);
				}
			}
			return typeConstruct;
		}
;

		function matchPackageConstruct($$$$rootConstruct) 
		{
			//set default parameter values
			var rootConstruct = $$$$rootConstruct;

			var packageConstruct = Construct.getNewPackageConstruct();
			match(Token.PackageTokenType);
			if (peek(1).type == Token.IdentifierTokenType)
			{
				packageConstruct.nameConstruct = matchNameConstruct();
			}
			else
			{
				packageConstruct.nameConstruct = Construct.getNewNameConstruct();
			}
			match(Token.OpenBraceTokenType);
			var ahead = 1;
			var metaDataConstructs = [];
			var token;
			var inCompileConstant = false;
			var add = true;
			var previousAddValue = add;
			loopb:			while (token = peek(ahead, 0, true))
			{
				ahead++;
				switch (token.type)
				{
					case Token.ImportTokenType:
						var c = matchImportConstruct();
						if (add)
						{
							packageConstruct.importConstructs.push(c);
						}
						break;
					case Token.OpenBracketTokenType:
						var c = matchMetaDataConstruct();
						if (add)
						{
							metaDataConstructs.push(c);
						}
						ahead = 1;
						continue loopb;
					case Token.StaticTokenType:
					case Token.FinalTokenType:
					case Token.OverrideTokenType:
					case Token.DynamicTokenType:
						continue loopb;
					case Token.UseTokenType:
						var useConstruct = matchUseConstruct();
						if (add)
						{
							packageConstruct.useConstructs.push(useConstruct);
						}
						break;
					case Token.NamespaceKeywordTokenType:
						var p = matchPropertyConstruct(metaDataConstructs);
						if (add)
						{
							packageConstruct.propertyConstruct = p;
							packageConstruct.propertyConstruct.packageConstruct = packageConstruct;
							packageConstruct.propertyConstruct.rootConstruct = rootConstruct;
						}
						break;
					case Token.FunctionTokenType:
						var m = matchMethodConstruct(metaDataConstructs);
						if (add)
						{
							packageConstruct.methodConstruct = m;
							packageConstruct.methodConstruct.packageConstruct = packageConstruct;
							packageConstruct.methodConstruct.rootConstruct = rootConstruct;
						}
						break;
					case Token.ClassTokenType:
						if (add && packageConstruct.classConstruct)
						{
							throw error('Multiple definitions found in package.', token);
						}
						var c = matchClassConstruct();
						if (add)
						{
							packageConstruct.classConstruct = c;
							packageConstruct.classConstruct.packageConstruct = packageConstruct;
							packageConstruct.importConstructs = packageConstruct.classConstruct.importConstructs.concat(packageConstruct.importConstructs);
							packageConstruct.classConstruct.rootConstruct = rootConstruct;
						}
						break;
					case Token.InterfaceTokenType:
						if (add && packageConstruct.interfaceConstruct)
						{
							throw error('Multiple definitions found in package.', token);
						}
						var c = matchInterfaceConstruct();
						if (add)
						{
							packageConstruct.interfaceConstruct = c;
							packageConstruct.interfaceConstruct.packageConstruct = packageConstruct;
							packageConstruct.interfaceConstruct.rootConstruct = rootConstruct;
						}
						break;
					case Token.ElseTokenType:
						match(Token.ElseTokenType);
						if (inCompileConstant)
						{
							throw $es4.$$primitive(new Error('nested compile constants are not supported'));
						}
						inCompileConstant = true;
						add = !previousAddValue;
						match(Token.OpenBraceTokenType);
						break;
					case Token.IfTokenType:
						match(Token.IfTokenType);
						match(Token.OpenParenTokenType);
						if (inCompileConstant)
						{
							throw $es4.$$primitive(new Error('nested compile constants are not supported'));
						}
					case Token.IdentifierTokenType:
						if (peek(ahead, 0, true).type == Token.NamespaceQualifierTokenType && peek(ahead + 1, 0, true).type == Token.IdentifierTokenType)
						{
							if (inCompileConstant)
							{
								throw $es4.$$primitive(new Error('nested compile constants are not supported'));
							}
							var compileConstantIdentifier = '';
							compileConstantIdentifier += match(Token.IdentifierTokenType).data;
							compileConstantIdentifier += match(Token.NamespaceQualifierTokenType).data;
							compileConstantIdentifier += match(Token.IdentifierTokenType).data;
							match(Token.ClosedParenTokenType, true);
							inCompileConstant = true;
							add = compileConstants[compileConstantIdentifier] == 'true';
							match(Token.OpenBraceTokenType);
							break;
						}
						continue loopb;
					case Token.ClosedBraceTokenType:
						if (inCompileConstant)
						{
							match(Token.ClosedBraceTokenType);
							inCompileConstant = false;
							previousAddValue = add;
							add = true;
							break;
						}
						break loopb;
					default:
						throw error('Unexpected token found1.', token);
				}
				metaDataConstructs = [];
				ahead = 1;
			}
			match(Token.ClosedBraceTokenType);
			return packageConstruct;
		}
;

		function matchMetaDataConstruct() 
		{
			var metaDataConstruct = Construct.getNewMetaDataConstruct();
			match(Token.OpenBracketTokenType);
			while (!match(Token.ClosedBracketTokenType, true))
			{
				metaDataConstruct.tokens.push(next());
			}
			match(Token.EOSTokenType, true, true);
			return metaDataConstruct;
		}
;

		function matchClassConstruct() 
		{
			var classConstruct = Construct.getNewClassConstruct();
			var token;
			loop1a:			while (token = next(0, true))
			{
				switch (token.type)
				{
					case Token.IdentifierTokenType:
						if (token.data == 'UNIMPLEMENTED')
						{
							classConstruct.UNIMPLEMENTEDToken = token;
						}
						else
						{
							classConstruct.namespaceToken = token;
						}
						break;
					case Token.StaticTokenType:
						classConstruct.staticToken = token;
						break;
					case Token.FinalTokenType:
						classConstruct.finalToken = token;
						break;
					case Token.DynamicTokenType:
						classConstruct.dynamicToken = token;
						break;
					case Token.ClassTokenType:
						break loop1a;
					default:
						throw error('Unexpected token found2.', token);
				}
			}
			classConstruct.identifierToken = match(Token.IdentifierTokenType);
			loop2a:			while (token = next())
			{
				switch (token.type)
				{
					case Token.ExtendsTokenType:
						classConstruct.extendsNameConstruct = matchNameConstruct();
						break;
					case Token.ImplementsTokenType:
						classConstruct.implementsNameConstructs.push(matchNameConstruct());
						while (token = peek(1))
						{
							if (token.type != Token.CommaTokenType)
							{
								continue loop2a;
							}
							match(Token.CommaTokenType);
							classConstruct.implementsNameConstructs.push(matchNameConstruct());
						}
						break;
					case Token.OpenBraceTokenType:
						break loop2a;
					default:
						throw error('Unexpected token found3.', token);
				}
			}
			var add = true;
			var inCompileConstant = false;
			var previousAddValue = add;
			var metaDataConstructs = [];
			var ahead = 1;
			loop3a:			while (token = peek(ahead, 0, true))
			{
				ahead++;
				switch (token.type)
				{
					case Token.ImportTokenType:
						var c = matchImportConstruct();
						if (add)
						{
							classConstruct.importConstructs.push(c);
						}
						break;
					case Token.OpenBracketTokenType:
						var c = matchMetaDataConstruct();
						if (add)
						{
							metaDataConstructs.push(c);
						}
						ahead = 1;
						continue loop3a;
					case Token.OpenBraceTokenType:
						match(Token.OpenBraceTokenType);
						var innerInnerToken;
						while ((innerInnerToken = peek(1)) && (innerInnerToken.type != Token.ClosedBraceTokenType))
						{
							var s = matchStatement();
							if (add)
							{
								classConstruct.initializerStatements.push(s);
							}
						}
						match(Token.ClosedBraceTokenType);
						break;
					case Token.ElseTokenType:
						match(Token.ElseTokenType);
						if (inCompileConstant)
						{
							throw $es4.$$primitive(new Error('nested compile constants are not supported'));
						}
						inCompileConstant = true;
						add = !previousAddValue;
						match(Token.OpenBraceTokenType);
						break;
					case Token.IfTokenType:
						match(Token.IfTokenType);
						match(Token.OpenParenTokenType);
						if (inCompileConstant)
						{
							throw $es4.$$primitive(new Error('nested compile constants are not supported'));
						}
					case Token.IdentifierTokenType:
						if (peek(ahead, 0, true).type == Token.NamespaceQualifierTokenType && peek(ahead + 1, 0, true).type == Token.IdentifierTokenType)
						{
							if (inCompileConstant)
							{
								throw $es4.$$primitive(new Error('nested compile constants are not supported'));
							}
							var compileConstantIdentifier = '';
							compileConstantIdentifier += match(Token.IdentifierTokenType).data;
							compileConstantIdentifier += match(Token.NamespaceQualifierTokenType).data;
							compileConstantIdentifier += match(Token.IdentifierTokenType).data;
							match(Token.ClosedParenTokenType, true);
							inCompileConstant = true;
							add = compileConstants[compileConstantIdentifier] == 'true';
							match(Token.OpenBraceTokenType);
							break;
						}
					case Token.OverrideTokenType:
					case Token.StaticTokenType:
					case Token.FinalTokenType:
						continue loop3a;
					case Token.VarTokenType:
					case Token.ConstTokenType:
					case Token.NamespaceKeywordTokenType:
						var propertyConstruct = matchPropertyConstruct(metaDataConstructs);
						if (add)
						{
							classConstruct.propertyConstructs.push(propertyConstruct);
						}
						break;
					case Token.FunctionTokenType:
						var methodConstruct = matchMethodConstruct(metaDataConstructs);
						if (methodConstruct.UNIMPLEMENTEDToken && release)
						{
							break;
						}
						if (methodConstruct.identifierToken.data == classConstruct.identifierToken.data)
						{
							if (add)
							{
								classConstruct.constructorMethodConstruct = methodConstruct;
							}
							if (methodConstruct.isJavaScript)
							{
								throw error('Constructor cannot be declared as native.', methodConstruct.identifierToken);
							}
						}
						else if (add)
						{
							classConstruct.methodConstructs.push(methodConstruct);
						}
						break;
					case Token.UseTokenType:
						var useConstruct = matchUseConstruct();
						if (add)
						{
							classConstruct.useConstructs.push(useConstruct);
						}
						break;
					case Token.ClosedBraceTokenType:
						if (inCompileConstant)
						{
							match(Token.ClosedBraceTokenType);
							inCompileConstant = false;
							previousAddValue = add;
							add = true;
							break;
						}
						break loop3a;
					default:
						throw error('Unexpected token found4.', token);
				}
				metaDataConstructs = [];
				ahead = 1;
			}
			match(Token.ClosedBraceTokenType);
			return classConstruct;
		}
;

		function matchUseConstruct() 
		{
			var useConstruct = Construct.getNewUseConstruct();
			useConstruct.useToken = match(Token.UseTokenType);
			match(Token.NamespaceKeywordTokenType);
			useConstruct.namespaceIdentifierToken = match(Token.IdentifierTokenType);
			match(Token.EOSTokenType, true, true);
			return useConstruct;
		}
;

		function matchInterfaceConstruct() 
		{
			var interfaceConstruct = Construct.getNewInterfaceConstruct();
			var token;
			loop1b:			while (token = next())
			{
				switch (token.type)
				{
					case Token.IdentifierTokenType:
						interfaceConstruct.namespaceToken = token;
						break;
					case Token.InterfaceTokenType:
						break loop1b;
					default:
						throw error('Unexpected token found5.', token);
				}
			}
			interfaceConstruct.identifierToken = match(Token.IdentifierTokenType);
			loop2b:			while (token = next())
			{
				switch (token.type)
				{
					case Token.ExtendsTokenType:
						interfaceConstruct.extendsNameConstructs.push(matchNameConstruct());
						while (token = peek(1))
						{
							if (token.type != Token.CommaTokenType)
							{
								continue loop2b;
							}
							match(Token.CommaTokenType);
							interfaceConstruct.extendsNameConstructs.push(matchNameConstruct());
						}
						break;
					case Token.OpenBraceTokenType:
						break loop2b;
					default:
						throw error('Unexpected token found6.', token);
				}
			}
			var ahead = 1;
			loop3b:			while (token = peek(ahead))
			{
				ahead++;
				switch (token.type)
				{
					case Token.FunctionTokenType:
						var methodConstruct = Construct.getNewMethodConstruct();
						match(Token.FunctionTokenType);
						methodConstruct.setToken = match(Token.SetTokenType, true);
						if (!methodConstruct.setToken)
						{
							methodConstruct.getToken = match(Token.GetTokenType, true);
						}
						methodConstruct.identifierToken = match(Token.IdentifierTokenType);
						match(Token.OpenParenTokenType);
						while (!match(Token.ClosedParenTokenType, true))
						{
							methodConstruct.parameterConstructs.push(matchParameterConstruct());
							match(Token.CommaTokenType, true);
						}
						if (match(Token.ColonTokenType, true))
						{
							methodConstruct.typeConstruct = matchTypeConstruct();
						}
						else
						{
							methodConstruct.typeConstruct = Construct.getNewTypeConstruct();
							methodConstruct.typeConstruct.mulToken = Token.getNewToken(Token.MulTokenType, '*');
						}
						match(Token.EOSTokenType, true, true);
						interfaceConstruct.methodConstructs.push(methodConstruct);
						break;
					case Token.ClosedBraceTokenType:
						break loop3b;
					default:
						throw error('Unexpected token found7.', token);
				}
				ahead = 1;
			}
			match(Token.ClosedBraceTokenType);
			return interfaceConstruct;
		}
;

		function matchNameConstruct() 
		{
			var nameConstruct = Construct.getNewNameConstruct();
			nameConstruct.identifierTokens.push(match(Token.IdentifierTokenType));
			var token1;
			var token2;
			while ((token1 = peek(1)) && (token2 = peek(2)))
			{
				if (token1.type != Token.DotTokenType)
				{
					break;
				}
				if (token2.type != Token.IdentifierTokenType)
				{
					break;
				}
				match(Token.DotTokenType);
				nameConstruct.identifierTokens.push(match(Token.IdentifierTokenType));
			}
			return nameConstruct;
		}
;

		function matchImportConstruct() 
		{
			var importConstruct = Construct.getNewImportConstruct();
			match(Token.ImportTokenType);
			importConstruct.nameConstruct = matchNameConstruct();
			if (match(Token.DotTokenType, true))
			{
				importConstruct.mulToken = match(Token.MulTokenType);
			}
			match(Token.EOSTokenType, true, true);
			return importConstruct;
		}
;

		function matchPropertyConstruct($$$$metaDataConstructs) 
		{
			//set default parameter values
			var metaDataConstructs = (0 > arguments.length - 1) ? null : $$$$metaDataConstructs;

			var propertyConstruct = Construct.getNewPropertyConstruct();
			var token;
			loop1c:			while (token = next(0, true))
			{
				switch (token.type)
				{
					case Token.IdentifierTokenType:
						propertyConstruct.namespaceToken = token;
						break;
					case Token.StaticTokenType:
						propertyConstruct.staticToken = token;
						break;
					case Token.NamespaceKeywordTokenType:
						propertyConstruct.namespaceKeywordToken = token;
						break loop1c;
					case Token.ConstTokenType:
						propertyConstruct.constToken = token;
						break loop1c;
					case Token.VarTokenType:
						break loop1c;
					default:
						throw error('Unexpected token found8.', token);
				}
			}
			propertyConstruct.identifierToken = match(Token.IdentifierTokenType);
			if (match(Token.ColonTokenType, true))
			{
				propertyConstruct.typeConstruct = matchTypeConstruct();
			}
			else
			{
				propertyConstruct.typeConstruct = Construct.getNewTypeConstruct();
				propertyConstruct.typeConstruct.mulToken = Token.getNewToken(Token.MulTokenType, '*');
			}
			match(Token.EOSTokenType, true, true);
			if (metaDataConstructs)
			{
				for (var i = 0; i < metaDataConstructs.length; i++)
				{
					var metaDataConstruct = metaDataConstructs[i];
					if (metaDataConstruct.tokens[0].data == 'Native')
					{
						propertyConstruct.isNative = true;
						if (!propertyConstruct.namespaceToken || propertyConstruct.namespaceToken.data != 'private')
						{
							throw $es4.$$primitive(new Error('native properties must be defined as private'));
						}
						if (propertyConstruct.typeConstruct && !propertyConstruct.typeConstruct.mulToken)
						{
							throw $es4.$$primitive(new Error('native properties must be defined as type *'));
						}
						propertyConstruct.namespaceToken = null;
					}
				}
			}
			if (!match(Token.AssignmentTokenType, true))
			{
				return propertyConstruct;
			}
			propertyConstruct.valueExpression = matchExpression();
			match(Token.EOSTokenType, true, true);
			return propertyConstruct;
		}
;

		function matchMethodConstruct($$$$metaDataConstructs) 
		{
			//set default parameter values
			var metaDataConstructs = (0 > arguments.length - 1) ? null : $$$$metaDataConstructs;

			var methodConstruct = Construct.getNewMethodConstruct();
			var token;
			loop1d:			while (token = next(0, true))
			{
				switch (token.type)
				{
					case Token.IdentifierTokenType:
						if (token.data == 'UNIMPLEMENTED')
						{
							methodConstruct.UNIMPLEMENTEDToken = token;
						}
						else
						{
							methodConstruct.namespaceToken = token;
						}
						break;
					case Token.StaticTokenType:
						methodConstruct.staticToken = token;
						break;
					case Token.OverrideTokenType:
						methodConstruct.overrideToken = token;
						break;
					case Token.FinalTokenType:
						break;
					case Token.FunctionTokenType:
						break loop1d;
					default:
						throw error('Unexpected token found9.', token);
				}
			}
			methodConstruct.setToken = match(Token.SetTokenType, true);
			if (!methodConstruct.setToken)
			{
				methodConstruct.getToken = match(Token.GetTokenType, true);
			}
			methodConstruct.identifierToken = match(Token.IdentifierTokenType);
			match(Token.OpenParenTokenType);
			while (!match(Token.ClosedParenTokenType, true))
			{
				methodConstruct.parameterConstructs.push(matchParameterConstruct());
				match(Token.CommaTokenType, true);
			}
			if (match(Token.ColonTokenType, true))
			{
				methodConstruct.typeConstruct = matchTypeConstruct();
			}
			else
			{
				methodConstruct.typeConstruct = Construct.getNewTypeConstruct();
				methodConstruct.typeConstruct.mulToken = Token.getNewToken(Token.MulTokenType, '*');
			}
			if (metaDataConstructs)
			{
				for (var i = 0; i < metaDataConstructs.length; i++)
				{
					var metaDataConstruct = metaDataConstructs[i];
					if (metaDataConstruct.tokens[0].data == 'JavaScript')
					{
						methodConstruct.isJavaScript = true;
					}
					if (metaDataConstruct.tokens[0].data == 'Native')
					{
						methodConstruct.isNative = true;
						if (!methodConstruct.namespaceToken || methodConstruct.namespaceToken.data != 'private')
						{
							throw $es4.$$primitive(new Error('native methods must be defined as private'));
						}
						methodConstruct.namespaceToken = null;
					}
				}
			}
			match(Token.OpenBraceTokenType, undefined, undefined);
			callsSuper = false;
			var open = 1;
			var closed = 0;
			if (methodConstruct.isJavaScript)
			{
				while (token = next(2, undefined))
				{
					if (token.type == Token.ClosedBraceTokenType)
					{
						closed++;
						if (closed == open)
						{
							break;
						}
					}
					if (token.type == Token.OpenBraceTokenType)
					{
						open++;
					}
					methodConstruct.javaScriptString += token.data;
				}
			}
			else
			{
				while (!match(Token.ClosedBraceTokenType, true, undefined))
				{
					methodConstruct.bodyStatements.push(matchStatement(false, methodConstruct.namedFunctionExpressions));
				}
			}
			methodConstruct.callsSuper = callsSuper;
			match(Token.EOSTokenType, true, true);
			return methodConstruct;
		}
;

		function matchParameterConstruct() 
		{
			var argumentConstruct = Construct.getNewParameterConstruct();
			argumentConstruct.restToken = match(Token.RestTokenType, true);
			argumentConstruct.identifierToken = match(Token.IdentifierTokenType);
			if (argumentConstruct.restToken)
			{
				return argumentConstruct;
			}
			if (match(Token.ColonTokenType, true))
			{
				argumentConstruct.typeConstruct = matchTypeConstruct();
			}
			else
			{
				argumentConstruct.typeConstruct = Construct.getNewTypeConstruct();
				argumentConstruct.typeConstruct.mulToken = Token.getNewToken(Token.MulTokenType, '*');
			}
			if (match(Token.AssignmentTokenType, true) && !match(Token.MulTokenType, true))
			{
				argumentConstruct.valueExpression = matchExpression(true);
			}
			return argumentConstruct;
		}
;

		function matchPropertyExpression($$$$construct) 
		{
			//set default parameter values
			var construct = (0 > arguments.length - 1) ? null : $$$$construct;

			var token = peek(1);
			if (token.type == Token.ThisTokenType)
			{
				construct = Construct.getNewThisConstruct();
				construct.thisToken = match(Token.ThisTokenType);
			}
			else if (token.type == Token.SuperTokenType)
			{
				construct = Construct.getNewSuperConstruct();
				construct.superToken = match(Token.SuperTokenType);
				callsSuper = true;
			}
			else if (token.type == Token.AtTokenType)
			{
				match(Token.AtTokenType);
				construct = Construct.getNewAtIdentifierConstruct();
			}
			else if (!construct)
			{
				construct = Construct.getNewIdentifierConstruct();
				construct.identifierToken = match(Token.IdentifierTokenType);
			}
			var propertyExpression = Construct.getNewPropertyExpression();
			propertyExpression.construct = construct;
			var innerPropertyExpression;
			var nextPropertyExpression = propertyExpression;
			loopc:			while (token = peek(1))
			{
				innerPropertyExpression = null;
				switch (token.type)
				{
					case Token.VectorDotOpenArrowTokenType:
						match(Token.VectorDotOpenArrowTokenType);
						construct = Construct.getNewVectorConstruct();
						construct.nameConstruct = matchNameConstruct();
						match(Token.VectorClosedArrowTokenType);
						break;
					case Token.NamespaceQualifierTokenType:
						construct = Construct.getNewNamespaceQualifierConstruct();
						construct.namespaceQualifierToken = match(Token.NamespaceQualifierTokenType);
						construct.identifierToken = nextPropertyExpression.construct.identifierToken;
						construct.namespaceIdentifierToken = match(Token.IdentifierTokenType);
						nextPropertyExpression.construct = construct;
						continue loopc;
					case Token.IdentifierTokenType:
						construct = Construct.getNewIdentifierConstruct();
						construct.identifierToken = match(Token.IdentifierTokenType);
						break;
					case Token.DotTokenType:
						match(Token.DotTokenType);
						if (match(Token.AtTokenType, true))
						{
							construct = Construct.getNewAtIdentifierConstruct();
						}
						else if (match(Token.OpenParenTokenType, true))
						{
							throw $es4.$$primitive(new Error('E4X is not supported'));
							construct = Construct.getNewE4XSearchConstruct();
							construct.expression = matchExpression();
							if (construct.expression.constructor == 'PropertyExpression')
							{
								construct.expression.root = false;
							}
							match(Token.ClosedParenTokenType);
						}
						else
						{
							construct = Construct.getNewDotConstruct();
							construct.identifierToken = match(Token.IdentifierTokenType);
						}
						break;
					case Token.OpenBracketTokenType:
						match(Token.OpenBracketTokenType);
						construct = Construct.getNewArrayAccessorConstruct();
						construct.expression = matchExpression();
						if (construct.expression.constructor == 'PropertyExpression')
						{
							construct.expression.root = false;
						}
						match(Token.ClosedBracketTokenType);
						break;
					case Token.OpenParenTokenType:
						match(Token.OpenParenTokenType);
						construct = Construct.getNewFunctionCallConstruct();
						while (!match(Token.ClosedParenTokenType, true))
						{
							construct.argumentExpressions.push(matchExpression(true));
							match(Token.CommaTokenType, true);
						}
						break;
					default:
						break loopc;
				}
				if (!innerPropertyExpression)
				{
					innerPropertyExpression = Construct.getNewPropertyExpression();
					innerPropertyExpression.construct = construct;
				}
				nextPropertyExpression.nextPropertyExpression = innerPropertyExpression;
				nextPropertyExpression = innerPropertyExpression;
			}
			return propertyExpression;
		}
;

		function matchStatement($$$$dontmatchEOS, $$$$namedFunctionExpressions, $$$$dontReadIn) 
		{
			//set default parameter values
			var dontmatchEOS = (0 > arguments.length - 1) ? false : $es4.$$coerce($$$$dontmatchEOS, Boolean);
			var namedFunctionExpressions = (1 > arguments.length - 1) ? null : $$$$namedFunctionExpressions;
			var dontReadIn = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$dontReadIn, Boolean);

			var statement;
			var token = peek(1, undefined, undefined);
			var innerToken;
			var openBraceTokenType;
			var innerToken1;
			var innerToken2;
			var innerInnerToken;
			var tokenType = token.type;
			var foundCompileConstantIdentifier = false;
			if (peek(2, 0, true).type == Token.NamespaceQualifierTokenType && compileConstants[token.data + peek(2, 0, true).data + peek(3, 0, true).data] !== undefined)
			{
				foundCompileConstantIdentifier = true;
				tokenType = Token.IfTokenType;
			}
			switch (tokenType)
			{
				case Token.ImportTokenType:
					var p = matchImportConstruct();
					statementImportConstructs.push(p);
					statement = Construct.getNewEmptyStatement();
					break;
				case Token.IfTokenType:
					if (!foundCompileConstantIdentifier)
					{
						match(Token.IfTokenType);
					}
					statement = Construct.getNewIfStatement();
					if (!foundCompileConstantIdentifier)
					{
						match(Token.OpenParenTokenType);
					}
					var inCompileConstant = false;
					var inCompileConstantLocal = false;
					var innerStatement;
					var add = true;
					if (peek(1, 0, true).type == Token.IdentifierTokenType && peek(2, 0, true).type == Token.NamespaceQualifierTokenType && compileConstants[peek(1, 0, true).data + peek(2, 0, true).data + peek(3, 0, true).data] !== undefined)
					{
						if (inCompileConstant)
						{
							throw $es4.$$primitive(new Error('nested compile constants are not supported'));
						}
						inCompileConstantLocal = true;
						inCompileConstant = true;
						var compileConstantIdentifier = '';
						compileConstantIdentifier += match(Token.IdentifierTokenType).data;
						compileConstantIdentifier += match(Token.NamespaceQualifierTokenType).data;
						compileConstantIdentifier += match(Token.IdentifierTokenType).data;
						add = compileConstants[compileConstantIdentifier] == 'true';
						var booleanExpression = Construct.getNewBooleanExpression();
						booleanExpression.booleanToken = Token.getNewToken(Token.BooleanTokenType, add.toString());
						statement.conditionExpression = booleanExpression;
					}
					else
					{
						statement.conditionExpression = matchExpression(false, namedFunctionExpressions);
					}
					if (!foundCompileConstantIdentifier)
					{
						match(Token.ClosedParenTokenType);
					}
					foundCompileConstantIdentifier = false;
					openBraceTokenType = match(Token.OpenBraceTokenType, true);
					loopd:					while ((innerToken = peek(1)) && (innerToken.type != Token.ClosedBraceTokenType))
					{
						innerStatement = matchStatement(false, namedFunctionExpressions);
						if (add)
						{
							statement.bodyStatements.push(innerStatement);
						}
						if (!openBraceTokenType)
						{
							break loopd;
						}
					}
					if (openBraceTokenType)
					{
						match(Token.ClosedBraceTokenType);
					}
					while (((innerToken1 = peek(1)) && (innerToken2 = peek(2))) && (innerToken1.type == Token.ElseTokenType && innerToken2.type == Token.IfTokenType))
					{
						match(Token.ElseTokenType);
						match(Token.IfTokenType);
						var elseIfStatement = Construct.getNewElseIfStatement();
						match(Token.OpenParenTokenType);
						elseIfStatement.conditionExpression = matchExpression(false, namedFunctionExpressions);
						match(Token.ClosedParenTokenType);
						openBraceTokenType = match(Token.OpenBraceTokenType, true);
						loope:						while ((innerToken = peek(1)) && (innerToken.type != Token.ClosedBraceTokenType))
						{
							elseIfStatement.bodyStatements.push(matchStatement(false, namedFunctionExpressions));
							if (!openBraceTokenType)
							{
								break loope;
							}
						}
						if (openBraceTokenType)
						{
							match(Token.ClosedBraceTokenType);
						}
						statement.elseIfStatements.push(elseIfStatement);
					}
					while ((innerToken1 = peek(1)) && (innerToken1.type == Token.ElseTokenType))
					{
						var elseStatement = Construct.getNewElseStatement();
						match(Token.ElseTokenType);
						openBraceTokenType = match(Token.OpenBraceTokenType, true);
						loopf:						while ((innerInnerToken = peek(1)) && (innerInnerToken.type != Token.ClosedBraceTokenType))
						{
							innerStatement = matchStatement(false, namedFunctionExpressions);
							if (inCompileConstantLocal)
							{
								if (!add)
								{
									elseStatement.bodyStatements.push(innerStatement);
								}
							}
							else
							{
								elseStatement.bodyStatements.push(innerStatement);
							}
							if (!openBraceTokenType)
							{
								break loopf;
							}
						}
						if (openBraceTokenType)
						{
							match(Token.ClosedBraceTokenType);
						}
						statement.elseStatement = elseStatement;
					}
					if (inCompileConstantLocal)
					{
						inCompileConstant = false;
					}
					break;
				case Token.WhileTokenType:
					statement = Construct.getNewWhileStatement();
					match(Token.WhileTokenType);
					match(Token.OpenParenTokenType);
					statement.conditionExpression = matchExpression(false, namedFunctionExpressions);
					match(Token.ClosedParenTokenType);
					openBraceTokenType = match(Token.OpenBraceTokenType, true);
					loopg:					while ((innerToken = peek(1)) && (innerToken.type != Token.ClosedBraceTokenType))
					{
						statement.bodyStatements.push(matchStatement(false, namedFunctionExpressions));
						if (!openBraceTokenType)
						{
							break loopg;
						}
					}
					if (openBraceTokenType)
					{
						match(Token.ClosedBraceTokenType);
					}
					break;
				case Token.DoTokenType:
					statement = Construct.getNewDoWhileStatement();
					match(Token.DoTokenType);
					openBraceTokenType = match(Token.OpenBraceTokenType, true);
					looph:					while ((innerToken = peek(1)) && (innerToken.type != Token.ClosedBraceTokenType))
					{
						statement.bodyStatements.push(matchStatement(false, namedFunctionExpressions));
						if (!openBraceTokenType)
						{
							break looph;
						}
					}
					if (openBraceTokenType)
					{
						match(Token.ClosedBraceTokenType);
					}
					match(Token.WhileTokenType);
					match(Token.OpenParenTokenType);
					statement.conditionExpression = matchExpression(false, namedFunctionExpressions);
					match(Token.ClosedParenTokenType);
					break;
				case Token.ForTokenType:
					match(Token.ForTokenType);
					if (peek(1).type == Token.EachTokenType)
					{
						match(Token.EachTokenType);
						statement = Construct.getNewForEachStatement();
						match(Token.OpenParenTokenType);
						statement.variableStatement = matchStatement(false, namedFunctionExpressions, true);
						match(Token.InTokenType);
						statement.arrayExpression = matchExpression(false, namedFunctionExpressions);
						match(Token.ClosedParenTokenType);
						openBraceTokenType = match(Token.OpenBraceTokenType, true);
						loopi:						while ((innerToken = peek(1)) && (innerToken.type != Token.ClosedBraceTokenType))
						{
							statement.bodyStatements.push(matchStatement(false, namedFunctionExpressions));
							if (!openBraceTokenType)
							{
								break loopi;
							}
						}
						if (openBraceTokenType)
						{
							match(Token.ClosedBraceTokenType);
						}
						break;
					}
					match(Token.OpenParenTokenType);
					var ahead = 1;
					var openParens = 1;
					var closedParens = 0;
					var inTokenFound = false;
					while (innerToken = peek(ahead))
					{
						if (innerToken.type == Token.OpenParenTokenType)
						{
							openParens++;
						}
						if (innerToken.type == Token.ClosedParenTokenType)
						{
							closedParens++;
						}
						if (innerToken.type == Token.InTokenType)
						{
							inTokenFound = true;
						}
						if (openParens == closedParens || inTokenFound)
						{
							break;
						}
						ahead++;
					}
					if (inTokenFound)
					{
						statement = Construct.getNewForInStatement();
						statement.variableStatement = matchStatement(false, namedFunctionExpressions, true);
						match(Token.InTokenType);
						statement.objectExpression = matchExpression(false, namedFunctionExpressions);
						match(Token.ClosedParenTokenType);
					}
					else
					{
						statement = Construct.getNewForStatement();
						var eosTokenType = match(Token.EOSTokenType, 1);
						if (!eosTokenType)
						{
							statement.variableStatement = matchStatement(true, namedFunctionExpressions);
							match(Token.EOSTokenType);
						}
						eosTokenType = match(Token.EOSTokenType, 1);
						if (!eosTokenType)
						{
							statement.conditionExpression = matchExpression(false, namedFunctionExpressions);
							match(Token.EOSTokenType);
						}
						var closedParenTokenType = match(Token.ClosedParenTokenType, 1);
						if (!closedParenTokenType)
						{
							statement.afterthoughtExpression = matchExpression(false, namedFunctionExpressions);
							match(Token.ClosedParenTokenType);
						}
					}
					openBraceTokenType = match(Token.OpenBraceTokenType, true);
					loop2f:					while ((innerToken = peek(1)) && (innerToken.type != Token.ClosedBraceTokenType))
					{
						statement.bodyStatements.push(matchStatement(false, namedFunctionExpressions));
						if (!openBraceTokenType)
						{
							break loop2f;
						}
					}
					if (openBraceTokenType)
					{
						match(Token.ClosedBraceTokenType);
					}
					break;
				case Token.BreakTokenType:
					statement = Construct.getNewBreakStatement();
					statement.token = match(Token.BreakTokenType);
					statement.identifierToken = match(Token.IdentifierTokenType, true);
					break;
				case Token.ContinueTokenType:
					statement = Construct.getNewContinueStatement();
					statement.token = match(Token.ContinueTokenType);
					statement.identifierToken = match(Token.IdentifierTokenType, true);
					break;
				case Token.ThrowTokenType:
					statement = Construct.getNewThrowStatement();
					statement.token = match(Token.ThrowTokenType);
					statement.expression = matchExpression(false, namedFunctionExpressions);
					break;
				case Token.UseTokenType:
					statement = Construct.getNewUseStatement();
					statement.useToken = match(Token.UseTokenType);
					match(Token.NamespaceKeywordTokenType);
					statement.namespaceIdentifierToken = match(Token.IdentifierTokenType);
					break;
				case Token.TryTokenType:
					match(Token.TryTokenType);
					statement = Construct.getNewTryStatement();
					openBraceTokenType = match(Token.OpenBraceTokenType, true);
					loop2g:					while ((innerToken = peek(1)) && (innerToken.type != Token.ClosedBraceTokenType))
					{
						statement.bodyStatements.push(matchStatement(false, namedFunctionExpressions));
						if (!openBraceTokenType)
						{
							break loop2g;
						}
					}
					if (openBraceTokenType)
					{
						match(Token.ClosedBraceTokenType);
					}
					while (match(Token.CatchTokenType, true))
					{
						var catchStatement = Construct.getNewCatchStatement();
						match(Token.OpenParenTokenType);
						catchStatement.identifierToken = match(Token.IdentifierTokenType);
						if (match(Token.ColonTokenType, true))
						{
							catchStatement.typeConstruct = matchTypeConstruct();
						}
						else
						{
							catchStatement.typeConstruct = Construct.getNewTypeConstruct();
							catchStatement.typeConstruct.mulToken = Token.getNewToken(Token.MulTokenType, '*');
						}
						match(Token.ClosedParenTokenType);
						openBraceTokenType = match(Token.OpenBraceTokenType, true);
						loopt:						while ((innerInnerToken = peek(1)) && (innerInnerToken.type != Token.ClosedBraceTokenType))
						{
							catchStatement.bodyStatements.push(matchStatement(false, namedFunctionExpressions));
							if (!openBraceTokenType)
							{
								break loopt;
							}
						}
						if (openBraceTokenType)
						{
							match(Token.ClosedBraceTokenType);
						}
						statement.catchStatements.push(catchStatement);
					}
					while (match(Token.FinallyTokenType, true))
					{
						var finallyStatement = Construct.getNewFinallyStatement();
						openBraceTokenType = match(Token.OpenBraceTokenType, true);
						loopx:						while ((innerInnerToken = peek(1)) && (innerInnerToken.type != Token.ClosedBraceTokenType))
						{
							finallyStatement.bodyStatements.push(matchStatement(false, namedFunctionExpressions));
							if (!openBraceTokenType)
							{
								break loopx;
							}
						}
						if (openBraceTokenType)
						{
							match(Token.ClosedBraceTokenType);
						}
						statement.finallyStatement = finallyStatement;
					}
					break;
				case Token.VarTokenType:
				case Token.ConstTokenType:
					statement = Construct.getNewVarStatement();
					if (match(Token.VarTokenType, true))
					{
					}
					else
					{
						match(Token.ConstTokenType, true);
					}
					statement.identifierToken = match(Token.IdentifierTokenType);
					if (match(Token.ColonTokenType, true))
					{
						statement.typeConstruct = matchTypeConstruct();
					}
					else
					{
						statement.typeConstruct = Construct.getNewTypeConstruct();
						statement.typeConstruct.mulToken = Token.getNewToken(Token.MulTokenType, '*');
					}
					if (match(Token.AssignmentTokenType, true))
					{
						statement.valueExpression = matchExpression(true, namedFunctionExpressions);
					}
					while (match(Token.CommaTokenType, true))
					{
						var innerVarStatement = Construct.getNewVarStatement();
						innerVarStatement.identifierToken = match(Token.IdentifierTokenType);
						if (match(Token.ColonTokenType, true))
						{
							innerVarStatement.typeConstruct = matchTypeConstruct();
						}
						else
						{
							innerVarStatement.typeConstruct = Construct.getNewTypeConstruct();
							innerVarStatement.typeConstruct.mulToken = Token.getNewToken(Token.MulTokenType, '*');
						}
						if (match(Token.AssignmentTokenType, true))
						{
							innerVarStatement.valueExpression = matchExpression(true, namedFunctionExpressions);
						}
						statement.innerVarStatements.push(innerVarStatement);
					}
					break;
				case Token.SwitchTokenType:
					statement = Construct.getNewSwitchStatement();
					match(Token.SwitchTokenType);
					match(Token.OpenParenTokenType);
					statement.valueExpression = matchExpression(false, namedFunctionExpressions);
					match(Token.ClosedParenTokenType);
					match(Token.OpenBraceTokenType, true);
					while ((innerToken = peek(1)) && (innerToken.type == Token.CaseTokenType || innerToken.type == Token.DefaultTokenType))
					{
						var caseStatement = Construct.getNewCaseStatement();
						if (innerToken.type == Token.CaseTokenType)
						{
							match(Token.CaseTokenType);
							caseStatement.valueExpression = matchExpression(false, namedFunctionExpressions);
						}
						if (innerToken.type == Token.DefaultTokenType)
						{
							caseStatement.defaultToken = match(Token.DefaultTokenType);
						}
						match(Token.ColonTokenType);
						var openFound = match(Token.OpenBraceTokenType, true);
						while ((innerToken = peek(1)) && (innerToken.type != Token.CaseTokenType && innerToken.type != Token.DefaultTokenType && innerToken.type != Token.ClosedBraceTokenType))
						{
							caseStatement.bodyStatements.push(matchStatement(false, namedFunctionExpressions));
						}
						if (openFound)
						{
							match(Token.ClosedBraceTokenType);
						}
						statement.caseStatements.push(caseStatement);
					}
					match(Token.ClosedBraceTokenType);
					break;
				default:
					if (peek(1).type == Token.IdentifierTokenType && (peek(2) && peek(2).type == Token.ColonTokenType))
					{
						statement = Construct.getNewLabelStatement();
						statement.identifierToken = match(Token.IdentifierTokenType);
						match(Token.ColonTokenType);
						break;
					}
					statement = matchExpression(false, namedFunctionExpressions, false, false, dontReadIn);
			}
			if (!dontmatchEOS)
			{
				match(Token.EOSTokenType, true, true);
			}
			return statement;
		}
;

		function matchExpression($$$$ignoreCommas, $$$$namedFunctionExpressions, $$$$operand, $$$$optional, $$$$dontReadIn) 
		{
			//set default parameter values
			var ignoreCommas = (0 > arguments.length - 1) ? false : $es4.$$coerce($$$$ignoreCommas, Boolean);
			var namedFunctionExpressions = (1 > arguments.length - 1) ? null : $$$$namedFunctionExpressions;
			var operand = (2 > arguments.length - 1) ? null : $$$$operand;
			var optional = (3 > arguments.length - 1) ? false : $es4.$$coerce($$$$optional, Boolean);
			var dontReadIn = (4 > arguments.length - 1) ? false : $es4.$$coerce($$$$dontReadIn, Boolean);

			var expression = null;
			var expressions = [];
			var ternaryTokens = 0;
			var token;
			var construct;
			var regExpString;
			var prefixExpression;
			var binaryExpression;
			var binaryExpressionParent;
			loopy:			while (token = peek(1))
			{
				switch (token.type)
				{
					case Token.OpenParenTokenType:
						match(Token.OpenParenTokenType);
						expression = Construct.getNewParenExpression();
						expression.expression = matchExpression(false, namedFunctionExpressions);
						match(Token.ClosedParenTokenType);
						if (peek(1) && (peek(1).type == Token.DotTokenType || peek(1).type == Token.OpenBracketTokenType || peek(1).type == Token.OpenParenTokenType))
						{
							construct = Construct.getNewParenConstruct();
							construct.expression = expression;
							expression = matchPropertyExpression(construct);
						}
						break;
					case Token.NumberTokenType:
						expression = Construct.getNewNumberExpression();
						expression.numberToken = match(Token.NumberTokenType);
						break;
					case Token.StringTokenType:
						expression = Construct.getNewStringExpression();
						expression.stringToken = match(Token.StringTokenType);
						while (token = match(Token.StringChunkTokenType, true))
						{
							expression.stringChunkTokens.push(token);
						}
						expression.stringEndToken = match(Token.StringEndTokenType);
						if (peek(1) && (peek(1).type == Token.DotTokenType || peek(1).type == Token.OpenBracketTokenType || peek(1).type == Token.OpenParenTokenType))
						{
							construct = Construct.getNewParenConstruct();
							construct.expression = expression;
							expression = matchPropertyExpression(construct);
						}
						break;
					case Token.ReturnTokenType:
						expression = Construct.getNewReturnExpression();
						match(Token.ReturnTokenType);
						if (peek(1).type != Token.ClosedBraceTokenType && peek(1).type != Token.EOSTokenType)
						{
							expression.expression = matchExpression(false, namedFunctionExpressions);
						}
						break;
					case Token.DeleteTokenType:
						expression = Construct.getNewDeleteExpression();
						match(Token.DeleteTokenType);
						expression.expression = matchExpression(ignoreCommas, namedFunctionExpressions, true);
						break;
					case Token.FunctionTokenType:
						expression = Construct.getNewFunctionExpression();
						match(Token.FunctionTokenType);
						expression.identifierToken = match(Token.IdentifierTokenType, true);
						if (expression.identifierToken && namedFunctionExpressions)
						{
							namedFunctionExpressions.push(expression);
						}
						match(Token.OpenParenTokenType);
						while (!match(Token.ClosedParenTokenType, true))
						{
							expression.parameterConstructs.push(matchParameterConstruct());
							match(Token.CommaTokenType, true);
						}
						if (match(Token.ColonTokenType, true))
						{
							expression.typeConstruct = matchTypeConstruct();
						}
						else
						{
							expression.typeConstruct = Construct.getNewTypeConstruct();
							expression.typeConstruct.mulToken = Token.getNewToken(Token.MulTokenType, '*');
						}
						match(Token.OpenBraceTokenType);
						while (!match(Token.ClosedBraceTokenType, true))
						{
							expression.bodyStatements.push(matchStatement(false, expression.namedFunctionExpressions));
						}
						break;
					case Token.OpenBraceTokenType:
						expression = Construct.getNewObjectExpression();
						match(Token.OpenBraceTokenType);
						while (!match(Token.ClosedBraceTokenType, true))
						{
							var objectPropertyConstruct = Construct.getNewObjectPropertyConstruct();
							objectPropertyConstruct.expression = matchExpression(false, namedFunctionExpressions);
							match(Token.ColonTokenType);
							objectPropertyConstruct.valueExpression = matchExpression(true, namedFunctionExpressions);
							expression.objectPropertyConstructs.push(objectPropertyConstruct);
							match(Token.CommaTokenType, true);
						}
						if (peek(1) && (peek(1).type == Token.DotTokenType || peek(1).type == Token.OpenBracketTokenType))
						{
							expression = matchPropertyExpression(Construct.getNewObjectConstruct(expression));
						}
						break;
					case Token.OpenBracketTokenType:
						expression = Construct.getNewArrayExpression();
						match(Token.OpenBracketTokenType);
						while (!match(Token.ClosedBracketTokenType, true))
						{
							expression.valueExpressions.push(matchExpression(true, namedFunctionExpressions));
							match(Token.CommaTokenType, true);
						}
						if (peek(1) && (peek(1).type == Token.DotTokenType || peek(1).type == Token.OpenBracketTokenType))
						{
							expression = matchPropertyExpression(Construct.getNewArrayConstruct(expression));
						}
						break;
					case Token.BooleanTokenType:
						expression = Construct.getNewBooleanExpression();
						expression.booleanToken = match(Token.BooleanTokenType);
						break;
					case Token.NaNTokenType:
						expression = Construct.getNewExpression(match(Token.NaNTokenType));
						break;
					case Token.UndefinedTokenType:
						expression = Construct.getNewExpression(match(Token.UndefinedTokenType));
						break;
					case Token.ThisTokenType:
						expression = matchPropertyExpression();
						break;
					case Token.NullTokenType:
						expression = Construct.getNewExpression(match(Token.NullTokenType));
						break;
					case Token.AddTokenType:
						expression = Construct.getNewExpression(match(Token.AddTokenType), matchExpression(true, namedFunctionExpressions, true));
						break;
					case Token.SubTokenType:
						expression = Construct.getNewExpression(match(Token.SubTokenType), matchExpression(true, namedFunctionExpressions, true));
						break;
					case Token.XMLOpenArrowTokenType:
						match(Token.XMLOpenArrowTokenType);
						var isXMLList = peek(1).type == Token.XMLClosedArrowTokenType;
						var openTags = 1;
						var xmlString = '<';
						if (isXMLList)
						{
							expression = Construct.getNewXMLListExpression();
							match(Token.XMLClosedArrowTokenType);
							match(Token.XMLOpenArrowTokenType);
						}
						else
						{
							expression = Construct.getNewXMLExpression();
						}
						var inNode = true;
						while ((openTags || inNode || isXMLList) && (token = next(1)))
						{
							if (isXMLList)
							{
								if (token.type == Token.XMLOpenArrowTokenType && peek(1) && peek(1).type == Token.XMLForwardSlashTokenType && peek(2) && peek(2).type == Token.XMLClosedArrowTokenType)
								{
									match(Token.XMLForwardSlashTokenType);
									match(Token.XMLClosedArrowTokenType);
									break;
								}
							}
							else
							{
								if (token.type == Token.XMLOpenArrowTokenType)
								{
									inNode = true;
								}
								if (token.type == Token.XMLOpenArrowTokenType && peek(1) && peek(1).type == Token.XMLForwardSlashTokenType)
								{
									openTags--;
								}
								else if (token.type == Token.XMLOpenArrowTokenType)
								{
									openTags++;
								}
								if (token.type == Token.XMLForwardSlashTokenType && peek(1) && peek(1).type == Token.XMLClosedArrowTokenType)
								{
									openTags--;
								}
								if (token.type == Token.XMLClosedArrowTokenType)
								{
									inNode = false;
								}
							}
							if (token.data == "'")
							{
								token.data = "\\'";
							}
							if (token.type == Token.NewLineTokenType)
							{
								xmlString += '\\' + token.data;
							}
							else
							{
								xmlString += token.data;
							}
						}
						expression.string = xmlString;
						break;
					case Token.RegExpTokenType:
						expression = Construct.getNewRegExpression();
						regExpString = match(Token.RegExpTokenType).data;
						while ((token = peek(1, 1)) && token.type == Token.SpecialUFOTokenType)
						{
							token = next();
							regExpString += token.data;
						}
						expression.string = regExpString;
						break;
					case Token.DivTokenType:
						expression = Construct.getNewRegExpression();
						regExpString = match(Token.DivTokenType).data;
						while (token = next(2))
						{
							regExpString += token.data;
							if (regExpString.charAt(regExpString.length - 1) == '/' && regExpString.charAt(regExpString.length - 2) != '\\')
							{
								break;
							}
						}
						while (token = peek(1, 1))
						{
							if (token.type == Token.NewLineTokenType || token.type == Token.TabTokenType || token.type == Token.SpaceTokenType || token.type == Token.EOSTokenType || token.type == Token.CommaTokenType)
							{
								break;
							}
							token = next();
							regExpString += token.data;
						}
						expression.string = regExpString;
						break;
					case Token.IncrementTokenType:
						expression = Construct.getNewPrefixExpression();
						expression.incrementToken = match(Token.IncrementTokenType);
						expression.expression = matchExpression(false, namedFunctionExpressions);
						if (expression.expression.constructor != Construct.BinaryExpression)
						{
							break;
						}
						prefixExpression = expression;
						binaryExpression = expression = expression.expression;
						binaryExpressionParent = binaryExpression;
						while (binaryExpression.constructor == Construct.BinaryExpression)
						{
							binaryExpressionParent = binaryExpression;
							binaryExpression = binaryExpression.leftExpression;
						}
						while (binaryExpression.constructor == Construct.ParenExpression)
						{
							binaryExpressionParent = binaryExpression;
							binaryExpression = binaryExpression.expression;
						}
						prefixExpression.expression = binaryExpression;
						if (binaryExpressionParent.constructor == Construct.ParenExpression)
						{
							binaryExpressionParent.expression = prefixExpression;
						}
						else
						{
							binaryExpressionParent.leftExpression = prefixExpression;
						}
						break;
					case Token.DecrementTokenType:
						expression = Construct.getNewPrefixExpression();
						expression.decrementToken = match(Token.DecrementTokenType);
						expression.expression = matchExpression(false, namedFunctionExpressions);
						if (expression.expression.constructor != Construct.BinaryExpression)
						{
							break;
						}
						prefixExpression = expression;
						binaryExpression = expression = expression.expression;
						binaryExpressionParent = binaryExpression;
						while (binaryExpression.constructor == Construct.BinaryExpression)
						{
							binaryExpressionParent = binaryExpression;
							binaryExpression = binaryExpression.leftExpression;
						}
						while (binaryExpression.constructor == Construct.ParenExpression)
						{
							binaryExpressionParent = binaryExpression;
							binaryExpression = binaryExpression.expression;
						}
						prefixExpression.expression = binaryExpression;
						if (binaryExpressionParent.constructor == Construct.ParenExpression)
						{
							binaryExpressionParent.expression = prefixExpression;
						}
						else
						{
							binaryExpressionParent.leftExpression = prefixExpression;
						}
						break;
					case Token.BitwiseNotTokenType:
						expression = Construct.getNewExpression(match(Token.BitwiseNotTokenType), matchExpression(false, namedFunctionExpressions, true));
						break;
					case Token.NotTokenType:
						expression = Construct.getNewExpression(match(Token.NotTokenType), matchExpression(false, namedFunctionExpressions, true));
						break;
					case Token.TypeofTokenType:
						expression = Construct.getNewExpression(match(Token.TypeofTokenType), matchExpression(false, namedFunctionExpressions, true));
						break;
					case Token.SuperTokenType:
						expression = matchPropertyExpression();
						break;
					case Token.NewTokenType:
						expression = Construct.getNewNewExpression();
						match(Token.NewTokenType);
						if (peek(1).type == Token.RelationalTokenType)
						{
							next();
							next();
							next();
							expression = matchExpression(ignoreCommas, namedFunctionExpressions, true);
							break;
						}
						expression.expression = matchExpression(ignoreCommas, namedFunctionExpressions, true);
						break;
					case Token.IdentifierTokenType:
						expression = matchPropertyExpression();
						expression.root = true;
						break;
					case Token.AtTokenType:
						expression = matchPropertyExpression();
						break;
					case Token.VoidTokenType:
						expression = Construct.getNewExpression(match(Token.VoidTokenType), matchExpression(false, namedFunctionExpressions, null, true));
						break;
					default:
						if (optional)
						{
							expression = Construct.getNewEmptyExpression();
							break;
						}
						throw error('Unexpected token found10.', token);
				}
				token = match(Token.IncrementTokenType, true) || match(Token.DecrementTokenType, true);
				if (token)
				{
					var originalExpression = expression;
					expression = Construct.getNewPostfixExpression();
					if (token.type == Token.IncrementTokenType)
					{
						expression.incrementToken = token;
					}
					else
					{
						expression.decrementToken = token;
					}
					expression.expression = originalExpression;
				}
				if (operand)
				{
					return expression;
				}
				expressions.push(expression);
				token = match(Token.AssignmentTokenType, true) || match(Token.AddTokenType, true) || match(Token.AsTokenType, true) || match((dontReadIn) ? Token.SubTokenType : Token.InTokenType, true) || match(Token.SubTokenType, true) || match(Token.MulTokenType, true) || match(Token.DivTokenType, true) || match(Token.ModTokenType, true) || match(Token.TernaryTokenType, true) || match(Token.IsTokenType, true) || match(Token.InstanceofTokenType, true) || match(Token.AndWithAssignmentTokenType, true) || match(Token.OrWithAssignmentTokenType, true) || match(Token.AndTokenType, true) || match(Token.OrTokenType, true) || match(Token.EqualityTokenType, true) || match(Token.RelationalTokenType, true) || match(Token.AddWithAssignmentTokenType, true) || match(Token.DivWithAssignmentTokenType, true) || match(Token.ModWithAssignmentTokenType, true) || match(Token.MulWithAssignmentTokenType, true) || match(Token.SubWithAssignmentTokenType, true) || match(Token.BitwiseLeftShiftAssignmentTokenType, true) || match(Token.BitwiseRightShiftAssignmentTokenType, true) || match(Token.BitwiseUnsignedRightShiftAssignmentTokenType, true) || match(Token.BitwiseLeftShiftTokenType, true) || match(Token.BitwiseRightShiftTokenType, true) || match(Token.BitwiseUnsignedRightShiftTokenType, true) || match(Token.BitwiseAndAssignmentTokenType, true) || match(Token.BitwiseOrAssignmentTokenType, true) || match(Token.BitwiseXorAssignmentTokenType, true) || match(Token.BitwiseAndTokenType, true) || match(Token.BitwiseOrTokenType, true) || match(Token.BitwiseXorTokenType, true);
				if (!ignoreCommas && !token)
				{
					token = match(Token.CommaTokenType, true);
				}
				if (token && token.type == Token.TernaryTokenType)
				{
					ternaryTokens++;
				}
				else if (!token && ternaryTokens)
				{
					token = match(Token.ColonTokenType);
					ternaryTokens--;
				}
				if (!token)
				{
					break loopy;
				}
				expressions.push(token);
			}
			return combineExpressions(expressions);

			function getBinaryTernaryOperatorPrecedence($$$$token) 
			{
				//set default parameter values
				var token = $$$$token;

				switch (token.type)
				{
					case Token.ColonTokenType:
						return -1;
					case Token.CommaTokenType:
						return 1;
					case Token.AssignmentTokenType:
					case Token.MulWithAssignmentTokenType:
					case Token.DivWithAssignmentTokenType:
					case Token.ModWithAssignmentTokenType:
					case Token.AddWithAssignmentTokenType:
					case Token.SubWithAssignmentTokenType:
					case Token.BitwiseLeftShiftAssignmentTokenType:
					case Token.BitwiseRightShiftAssignmentTokenType:
					case Token.BitwiseUnsignedRightShiftAssignmentTokenType:
					case Token.BitwiseAndAssignmentTokenType:
					case Token.BitwiseXorAssignmentTokenType:
					case Token.BitwiseOrAssignmentTokenType:
					case Token.AndWithAssignmentTokenType:
					case Token.OrWithAssignmentTokenType:
						return 2;
					case Token.TernaryTokenType:
						return 3;
					case Token.OrTokenType:
						return 4;
					case Token.AndTokenType:
						return 5;
					case Token.BitwiseOrTokenType:
						return 6;
					case Token.BitwiseXorTokenType:
						return 7;
					case Token.BitwiseAndTokenType:
						return 8;
					case Token.EqualityTokenType:
						return 9;
					case Token.RelationalTokenType:
					case Token.AsTokenType:
					case Token.InTokenType:
					case Token.InstanceofTokenType:
					case Token.IsTokenType:
						return 10;
					case Token.BitwiseLeftShiftTokenType:
					case Token.BitwiseRightShiftTokenType:
					case Token.BitwiseUnsignedRightShiftTokenType:
						return 11;
					case Token.AddTokenType:
					case Token.SubTokenType:
						return 12;
					case Token.MulTokenType:
					case Token.DivTokenType:
					case Token.ModTokenType:
						return 13;
					default:
						throw $es4.$$primitive(new Error('unknown binary/ternary operator: ' + token.type.name));
				}
			}
;

			function combineExpressions($$$$expressions) 
			{
				//set default parameter values
				var expressions = $$$$expressions;

				var currentOperatorPrecedence = 13;
				var i = -1;
				var expression;
				var begin;
				while (expressions.length > 1 && currentOperatorPrecedence)
				{
					if (i >= expressions.length - 1)
					{
						i = -1;
						currentOperatorPrecedence--;
					}
					i++;
					if (i % 2 == 0)
					{
						continue;
					}
					var token = expressions[i];
					if (getBinaryTernaryOperatorPrecedence(token) != currentOperatorPrecedence)
					{
						continue;
					}
					if (token.type == Token.TernaryTokenType)
					{
						expression = Construct.getNewTernaryExpression();
						expression.conditionExpression = expressions[i - 1];
						var index = i + 1;
						var ternaryTokens = 1;
						var colonTokens = 0;
						var innerExpressions = [];
						while (ternaryTokens != colonTokens && index < expressions.length - 1)
						{
							innerExpressions.push(expressions[index]);
							if (index % 2 == 0)
							{
								index++;
								continue;
							}
							if (expressions[index].type == Token.TernaryTokenType)
							{
								ternaryTokens++;
							}
							else if (expressions[index].type == Token.ColonTokenType)
							{
								colonTokens++;
							}
							index++;
						}
						expression.trueExpression = combineExpressions(innerExpressions.slice(0, innerExpressions.length - 1));
						expression.falseExpression = combineExpressions(expressions.slice(index));
						begin = expressions.slice(0, i - 1);
						expressions = begin.concat([expression]);
					}
					else
					{
						expression = Construct.getNewBinaryExpression();
						expression.token = token;
						expression.leftExpression = expressions[i - 1];
						expression.rightExpression = expressions[i + 1];
						begin = expressions.slice(0, i - 1);
						var end = expressions.slice(i + 2);
						expressions = begin.concat([expression], end);
					}
					i = -1;
				}
				return expressions[0];
			}
;
		}
;

		function match($$$$type, $$$$optional, $$$$greedy) 
		{
			//set default parameter values
			var type = $$$$type;
			var optional = (1 > arguments.length - 1) ? false : $es4.$$coerce($$$$optional, Boolean);
			var greedy = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$greedy, Boolean);

			var token = (optional) ? peek(1) : next();
			if (!token && !optional)
			{
				throw error('Expected token type: ' + type.name + '. No token found.', null);
			}
			if (!token)
			{
				return false;
			}
			if (token.type != type && !optional)
			{
				throw error('Expected token type: ' + type + '. Got', token);
			}
			if (token.type != type)
			{
				return false;
			}
			if (optional)
			{
				token = next();
			}
			var gtoken = (greedy) ? match(type, true, greedy) : false;
			return (gtoken) ? gtoken : token;
		}
;

		function next($$$$includeLevel, $$$$keywordStrictMode) 
		{
			//set default parameter values
			var includeLevel = (0 > arguments.length - 1) ? false : $es4.$$coerce($$$$includeLevel, Boolean);
			var keywordStrictMode = (1 > arguments.length - 1) ? false : $es4.$$coerce($$$$keywordStrictMode, Boolean);

			if (!includeLevel)
			{
				includeLevel = $es4.$$coerce(0, Boolean);
			}
			while (index < tokens.length - 1)
			{
				var token = tokens[++index];
				switch (token.type)
				{
					case Token.CommentTokenType:
					case Token.CommentChunkTokenType:
					case Token.MultiLineCommentTokenType:
					case Token.MultiLineCommentChunkTokenType:
					case Token.MultiLineCommentEndTokenType:
						if (includeLevel == 1 || includeLevel == 0)
						{
							break;
						}
					case Token.NewLineTokenType:
					case Token.TabTokenType:
					case Token.SpaceTokenType:
						if (includeLevel == 0)
						{
							break;
						}
					default:
						if (keywordStrictMode)
						{
							return token;
						}
						if (token.type == Token.StaticTokenType)
						{
							token = Token.getNewToken(Token.IdentifierTokenType, 'static');
						}
						return token;
				}
			}
			return null;
		}
;

		function peek($$$$ahead, $$$$includeLevel, $$$$keywordStrictMode) 
		{
			//set default parameter values
			var ahead = $$$$ahead;
			var includeLevel = (1 > arguments.length - 1) ? false : $es4.$$coerce($$$$includeLevel, Boolean);
			var keywordStrictMode = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$keywordStrictMode, Boolean);

			if (!includeLevel)
			{
				includeLevel = $es4.$$coerce(0, Boolean);
			}
			var i = index;
			while (true)
			{
				if (ahead > 0 && i >= tokens.length - 1)
				{
					break;
				}
				if (ahead < 0 && i < 1)
				{
					break;
				}
				var token = (ahead > 0) ? tokens[++i] : tokens[--i];
				switch (token.type)
				{
					case Token.CommentTokenType:
					case Token.CommentChunkTokenType:
					case Token.MultiLineCommentTokenType:
					case Token.MultiLineCommentChunkTokenType:
					case Token.MultiLineCommentEndTokenType:
						break;
					case Token.TabTokenType:
					case Token.SpaceTokenType:
					case Token.NewLineTokenType:
						if (includeLevel != 1)
						{
							break;
						}
					default:
						(ahead > 0) ? ahead-- : ahead++;
						if (!ahead)
						{
							if (keywordStrictMode)
							{
								return token;
							}
							if (token.type == Token.StaticTokenType)
							{
								token = Token.getNewToken(Token.IdentifierTokenType, 'static');
							}
							return token;
						}
				}
			}
			return null;
		}
;

		function error($$$$string, $$$$token) 
		{
			//set default parameter values
			var string = $$$$string;
			var token = $$$$token;

			var i = (index - 25) < 25 ? 0 : index - 25;
			for (i; i <= index; i++)
			{
				trace(tokens[i].line + ' : ' + tokens[i].position + ' : ' + tokens[i].type + ' => ' + tokens[i].data);
			}
			if (token)
			{
				return $es4.$$primitive(new Error(string + ' token type ' + token.type + ' found on line ' + token.line + ', at position ' + token.position));
			}
			else
			{
				return $es4.$$primitive(new Error(string));
			}
		}
;

		if (statementImportConstructs.length)
		{
			rootConstruct.packageConstruct.importConstructs = rootConstruct.packageConstruct.importConstructs.concat(statementImportConstructs);
		}
		return rootConstruct;
	});
	function Parser()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof Parser) || $$this.$$Parser !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Parser) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			Parser.$$construct($$this, $$args);
		}
	}

	//construct
	Parser.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (Parser.$$cinit !== undefined) Parser.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$Parser', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		Parser.$$iinit($$this);

		//call constructor
		if (args !== undefined) Parser.$$constructor.apply($$this, args);
	});

	//initializer
	Parser.$$iinit = (function ($$this)
	{
	});

	//constructor
	Parser.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(Parser, null, 'sweetrush.core::Parser');
})();
//sweetrush.core.Parser


//sweetrush.core.TranslatorProto
$es4.$$package('sweetrush.core').TranslatorProto = (function ()
{
	//imports
	var Construct;
	var Token;
	var AS3_JS;
	var Analyzer;
	var Lexer;
	var Parser;
	var TranslatorProto;
	var TranslatorPrototype;
	var Construct;
	var Token;
	var Base64Util;
	var FileUtil;
	var JsonUtil;
	var SwcUtil;

	//class pre initializer
	TranslatorProto.$$sinit = (function ()
	{
		TranslatorProto.$$sinit = undefined;

		//initialize imports
		Construct = $es4.$$['sweetrush.obj'].Construct;
		Token = $es4.$$['sweetrush.obj'].Token;
		AS3_JS = $es4.$$['sweetrush'].AS3_JS;
		Analyzer = $es4.$$['sweetrush.core'].Analyzer;
		Lexer = $es4.$$['sweetrush.core'].Lexer;
		Parser = $es4.$$['sweetrush.core'].Parser;
		TranslatorPrototype = $es4.$$['sweetrush.core'].TranslatorPrototype;
		Base64Util = $es4.$$['sweetrush.utils'].Base64Util;
		FileUtil = $es4.$$['sweetrush.utils'].FileUtil;
		JsonUtil = $es4.$$['sweetrush.utils'].JsonUtil;
		SwcUtil = $es4.$$['sweetrush.utils'].SwcUtil;

		//set prototype and constructor
		TranslatorProto.prototype = Object.create(Object.prototype);
		Object.defineProperty(TranslatorProto.prototype, "constructor", { value: TranslatorProto, enumerable: false });

		//hold private values
		Object.defineProperty(TranslatorProto.prototype, '$$v', {value:{}});
	});

	//class initializer
	TranslatorProto.$$cinit = (function ()
	{
		TranslatorProto.$$cinit = undefined;
	});

	//public static method
	TranslatorProto.translate = (function ($$$$rootConstruct, $$$$rootConstructs, $$$$dynamicPropertyAccess, $$$$release, $$$$fastPropertyAccess)
	{
		if (TranslatorProto.$$cinit !== undefined) TranslatorProto.$$cinit();

		//set default parameter values
		var rootConstruct = $$$$rootConstruct;
		var rootConstructs = $$$$rootConstructs;
		var dynamicPropertyAccess = $$$$dynamicPropertyAccess;
		var release = $$$$release;
		var fastPropertyAccess = (4 > arguments.length - 1) ? false : $es4.$$coerce($$$$fastPropertyAccess, Boolean);

		var _rootConstruct = rootConstruct;
		var _rootConstructs = rootConstructs;
		var _indent = -1;
		var _count = -1;
		var _level = 0;
		var _fastPropertyAccess = fastPropertyAccess = false;
		var _dynamicPropertyAccess = dynamicPropertyAccess;
		var _inClosure = false;
		var _inNamespacedFunction = false;
		var _inStaticFunction = false;
		var _inIfStatement = 0;
		var _importNameConflicts = {};

		function upLevel() 
		{
			_indent++;
			_level++;
			return _level;
		}
;

		function downLevel() 
		{
			_indent--;
			_level--;
			return _level;
		}
;

		function lookupConstructInRootConstruct($$$$rootConstruct, $$$$object) 
		{
			//set default parameter values
			var rootConstruct = $$$$rootConstruct;
			var object = $$$$object;

			if (!rootConstruct || !object)
			{
				throw $es4.$$primitive(new Error('cannot lookup empty rootConstruct/object: ' + rootConstruct + ', ' + object));
			}
			else if ($es4.$$is(object, String))
			{
				for (var i = 0; i < rootConstruct.classConstructs.length; i++)
				{
					if (rootConstruct.classConstructs[i].identifierToken.data == object)
					{
						return rootConstruct.classConstructs[i];
					}
				}
				for (var i = 0; i < rootConstruct.interfaceConstructs.length; i++)
				{
					if (rootConstruct.interfaceConstructs[i].identifierToken.data == object)
					{
						return rootConstruct.interfaceConstructs[i];
					}
				}
				if (rootConstruct.packageConstruct.classConstruct)
				{
					return rootConstruct.packageConstruct.classConstruct;
				}
				if (rootConstruct.packageConstruct.interfaceConstruct)
				{
					return rootConstruct.packageConstruct.interfaceConstruct;
				}
				if (rootConstruct.packageConstruct.propertyConstruct)
				{
					return rootConstruct.packageConstruct.propertyConstruct;
				}
				if (rootConstruct.packageConstruct.methodConstruct)
				{
					return rootConstruct.packageConstruct.methodConstruct;
				}
				throw $es4.$$primitive(new Error('could not lookup construct in construct: ' + object));
			}
			if (object.constructor == Construct.NameConstruct)
			{
				return lookupConstructInRootConstruct(rootConstruct, Construct.nameConstructToString(object));
			}
			else if (object.constructor == Construct.ImportConstruct)
			{
				return lookupConstructInRootConstruct(rootConstruct, Construct.nameConstructToString(object.nameConstruct));
			}
		}
;

		var packageConstruct = rootConstruct.packageConstruct;
		var js = print('$es4.$$package(\'' + (packageConstruct.nameConstruct ? Construct.nameConstructToString(packageConstruct.nameConstruct) : '') + '\').', _indent, 0);
		if (packageConstruct.classConstruct)
		{
			if (packageConstruct.classConstruct.UNIMPLEMENTEDToken)
			{
				if (release)
				{
					js += packageConstruct.classConstruct.identifierToken.data + ' = null;\n';
					return js;
				}
				js = (packageConstruct.nameConstruct) ? '$es4.$$package(\'' + Construct.nameConstructToString(packageConstruct.nameConstruct) + '\')' : 'global';
				js += '.' + packageConstruct.classConstruct.identifierToken.data;
				js += ' = function () { throw new Error(\'Use of unimplemented class: ' + packageConstruct.classConstruct.identifierToken.data + '\'); }';
				js += '\n';
				return js;
			}
			js += print(translateClassConstruct(packageConstruct.classConstruct), _indent, 0);
		}
		js += (packageConstruct.interfaceConstruct) ? print(translateInterfaceConstruct(packageConstruct.interfaceConstruct), _indent, 0) : '';
		js += (packageConstruct.propertyConstruct) ? print(translatePropertyConstruct(packageConstruct.propertyConstruct), _indent, 0) : '';
		if (packageConstruct.methodConstruct)
		{
			if (packageConstruct.methodConstruct.UNIMPLEMENTEDToken)
			{
				if (release)
				{
					js += packageConstruct.methodConstruct.identifierToken.data + ' = null;\n';
					return js;
				}
				js = (packageConstruct.nameConstruct) ? '$es4.$$package(\'' + Construct.nameConstructToString(packageConstruct.nameConstruct) + '\')' : 'global';
				js += '.' + packageConstruct.methodConstruct.identifierToken.data;
				js += ' = function () { throw new Error(\'Use of unimplemented function: ' + packageConstruct.methodConstruct.identifierToken.data + '\'); }';
				js += '\n';
				return js;
			}
			_inStaticFunction = true;
			js += print(translateFunctionConstruct(packageConstruct.methodConstruct), _indent, 0);
		}
		return js;

		function getTranslatedTypeName($$$$type) 
		{
			//set default parameter values
			var type = $$$$type;

			if (type.name == '*' || type.name == 'void')
			{
				return '';
			}
			if (_importNameConflicts[type.name])
			{
				var fullyQualifiedName = type.fullyQualifiedName;
				var parts = fullyQualifiedName.split('.');
				var name = parts.pop();
				return '$es4.$$[\'' + parts.join('.') + '\'].' + name;
			}
			return type.name;
		}
;

		function translateInterfaceConstruct($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			upLevel();
			var js = print(construct.identifierToken.data + ' = (function ()', 0, 1);
			js += print('{', _indent, 1);
			js += print('function ' + construct.identifierToken.data + '()', _indent + 1, 1);
			js += print('{', _indent + 1, 1);
			js += print('//handle cast', _indent + 2, 1);
			js += print('return $es4.$$as(arguments[0], ' + construct.identifierToken.data + ');', _indent + 2, 1);
			js += print('}', _indent + 1, 1);
			var comma = false;
			var innerJS = '';
			if (construct.extendsNameConstructs.length)
			{
				innerJS += 'IMPLEMENTS:[';
				for (var i = 0; i < construct.extendsNameConstructs.length; i++)
				{
					if (comma)
					{
						innerJS += ', ';
					}
					var type = construct.extendsNameConstructs[i].type;
					var innerConstruct = lookupConstructInRootConstruct(construct.rootConstruct, construct.extendsNameConstructs[i]);
					if (innerConstruct.isInternal)
					{
						innerJS += comma = type.fullyQualifiedName;
					}
					else
					{
						innerJS += comma = '\'' + type.fullyQualifiedName + '\'';
					}
				}
				innerJS += comma = ']';
			}
			if (!construct.isInternal)
			{
				if (_rootConstruct.classConstructs.length)
				{
					if (comma)
					{
						innerJS += ', ';
					}
					innerJS += 'CLASSES:[';
					comma = false;
					for (var i = 0; i < _rootConstruct.classConstructs.length; i++)
					{
						if (comma)
						{
							innerJS += ', ';
						}
						innerJS += comma = _rootConstruct.classConstructs[i].identifierToken.data;
					}
					innerJS += comma = ']';
				}
				if (_rootConstruct.interfaceConstructs.length)
				{
					if (comma)
					{
						innerJS += ', ';
					}
					innerJS += 'INTERFACES:[';
					comma = false;
					for (var i = 0; i < _rootConstruct.interfaceConstructs.length; i++)
					{
						if (comma)
						{
							innerJS += ', ';
						}
						innerJS += comma = _rootConstruct.interfaceConstructs[i].identifierToken.data;
					}
					innerJS += comma = ']';
				}
			}
			var packageName = construct.packageName;
			var fullyQualifiedName = (packageName) ? packageName + '::' + construct.identifierToken.data : construct.identifierToken.data;
			if (innerJS)
			{
				js += print('return $es4.$$interface(' + construct.identifierToken.data + ', ', _indent + 1, 0, 1);
				js += '{' + innerJS + '}';
				js += print(', \'' + fullyQualifiedName + '\');', 0, 1);
			}
			else
			{
				js += print('return $es4.$$interface(' + construct.identifierToken.data + ', null, ', _indent + 1, 0);
				js += print('\'' + fullyQualifiedName + '\');', 0, 1);
			}
			js += print('})();', _indent, 1);
			downLevel();
			return js;
		}
;

		function translatePropertyConstruct($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			return print(construct.identifierToken.data + ' = $es4.$$namespace(' + translateExpression(construct.valueExpression, _indent, false, construct) + ', true);', 0, 1);
		}
;

		function translateFunctionConstruct($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			upLevel();
			var importConstructs = _rootConstruct.packageConstruct.importConstructs;
			var js = '';
			var innerJS;
			var cr = false;
			var accessor = construct.getToken || construct.setToken;
			js += print(construct.identifierToken.data + ' = (function ()', 0, 1);
			js += print('{', _indent, 1);
			js += print('var $$this = ' + construct.identifierToken.data + ', $$thisp = ' + construct.identifierToken.data + ';', _indent + 1, 1);
			js += (innerJS = translateImports(construct)) ? cr = innerJS : '';
			js += (innerJS = translateClassInitializer(construct)) ? cr = print(innerJS, 0, 0, (cr) ? 1 : 0) : '';
			js += (innerJS = translateClassFunction(construct)) ? print(innerJS, 0, 0, 1) : '';
			if (accessor)
			{
				js += print(construct.identifierToken.data + '.$$pcinit = ' + construct.identifierToken.data + ';', _indent + 1, 1, 1);
				js += print('return ' + construct.identifierToken.data + ';', _indent + 1, 1, 0);
			}
			else
			{
				js += print('return $es4.$$function (' + construct.identifierToken.data + ');', _indent + 1, 1, 1);
			}
			js += print('})();', _indent, 1);
			downLevel();
			return js;

			function translateImports($$$$construct) 
			{
				//set default parameter values
				var construct = $$$$construct;

				var js = '';
				if (importConstructs.length)
				{
					js += print('//imports', _indent + 1, 1);
				}
				for (var i = 0; i < importConstructs.length; i++)
				{
					js += print('var ' + importConstructs[i].nameConstruct.identifierTokens[importConstructs[i].nameConstruct.identifierTokens.length - 1].data + ';', _indent + 1, 1);
				}
				return js;
			}
;

			function translateClassInitializer($$$$construct) 
			{
				//set default parameter values
				var construct = $$$$construct;

				_inStaticFunction = true;
				var js = print('//function initializer', _indent + 1, 1);
				js += print(construct.identifierToken.data + '.$$cinit = (function ()', _indent + 1, 1);
				js += print('{', _indent + 1, 1);
				js += print(construct.identifierToken.data + '.$$cinit = undefined;', _indent + 2, 1);
				var importConstructs = (construct.isInternal) ? _rootConstruct.importConstructs : _rootConstruct.packageConstruct.importConstructs;
				if (importConstructs.length)
				{
					js += print('//initialize imports', _indent + 2, 1, 1);
				}
				var importNames = {};
				importNames[construct.identifierToken.data] = true;
				for (var i = 0; i < importConstructs.length; i++)
				{
					var name = importConstructs[i].nameConstruct.identifierTokens[importConstructs[i].nameConstruct.identifierTokens.length - 1].data;
					var packageName = '';
					if (importConstructs[i].nameConstruct.identifierTokens.length > 1)
					{
						var fullyQualifiedName = Construct.nameConstructToString(importConstructs[i].nameConstruct);
						fullyQualifiedName = fullyQualifiedName.split('.');
						fullyQualifiedName.pop();
						packageName = fullyQualifiedName.join('.');
					}
					if (importNames[name])
					{
						_importNameConflicts[name] = true;
						continue;
					}
					else
					{
						importNames[name] = true;
					}
					js += print(name + ' = $es4.$$[\'' + packageName + '\'].' + name + ';', _indent + 2, 1);
				}
				js += print('});', _indent + 1, 1);
				_inStaticFunction = false;
				return js;
			}
;

			function translateClassFunction($$$$construct) 
			{
				//set default parameter values
				var construct = $$$$construct;

				upLevel();
				var js = '';
				if (accessor)
				{
					var name = construct.getToken ? 'getter' : 'setter';
					js += print('function ' + construct.identifierToken.data + '() { $$' + name + '(\'' + construct.identifierToken.data + '\', ' + '$es4.$$package(\'' + (construct.packageConstruct.nameConstruct ? Construct.nameConstructToString(construct.packageConstruct.nameConstruct) : '') + '\'), (function ()', _indent, 1);
				}
				else
				{
					js += print('function ' + construct.identifierToken.data + '(', _indent, 0);
				}
				js += translateParameters(construct, construct);
				if (!accessor)
				{
					js += print(')', 0, (_indent) ? 1 : 0);
				}
				js += print('{', _indent, (_indent) ? 1 : 0);
				js += print('//initialize function if not initialized', _indent + 1, 1);
				js += print('if (' + construct.identifierToken.data + '.$$cinit !== undefined) ' + construct.identifierToken.data + '.$$cinit();', _indent + 1, 2);
				js += translateDefaultParameterValues(construct, construct);
				if (accessor)
				{
					js += print('//change reference', _indent + 1, 1, 1);
					js += print(construct.identifierToken.data + ' = this;', _indent + 1, construct.bodyStatements.length ? 2 : 1);
				}
				if (construct.isJavaScript)
				{
					js += construct.javaScriptString;
				}
				else
				{
					js += translateStatements(construct.bodyStatements, _indent + 1, construct);
				}
				if (accessor)
				{
					js += print('})', (construct.isJavaScript) ? 0 : _indent, 0);
					js += print(');}', 0, 1);
				}
				else
				{
					js += print('}', 0, 1);
				}
				downLevel();
				return js;
			}
;
		}
;

		function translateClassConstruct($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			var js = '';
			upLevel();
			var innerJS;
			var cr = false;
			js += print(construct.identifierToken.data + ' = (function ()', 0, 1);
			js += print('{', _indent, 1);
			js += (innerJS = translateImports(construct)) ? cr = innerJS : '';
			js += (innerJS = translateNamespaces(construct, true)) ? cr = print(innerJS, 0, 0, (cr) ? 1 : 0) : '';
			js += (innerJS = translateStaticProperties(construct)) ? cr = print(innerJS, 0, 0, (cr) ? 1 : 0) : '';
			js += (innerJS = translateClassInitializer(construct)) ? cr = print(innerJS, 0, 0, (cr) ? 1 : 0) : '';
			js += (innerJS = translateStaticMethods(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateStaticAccessors(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateClassFunction(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateInternalClasses(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateInternalInterfaces(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateClassReturnStatement(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += print('})();', _indent, 1);
			downLevel();
			return js;
		}
;

		function translateClassInitializer($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			_inStaticFunction = true;
			var js = print('//class initializer', _indent + 1, 1);
			js += print(construct.identifierToken.data + '.$$cinit = (function ()', _indent + 1, 1);
			js += print('{', _indent + 1, 1);
			js += print(construct.identifierToken.data + '.$$cinit = undefined;', _indent + 2, 2);
			var importConstructs = (construct.isInternal) ? _rootConstruct.importConstructs : _rootConstruct.packageConstruct.importConstructs;
			if (importConstructs.length)
			{
				js += print('//initialize imports', _indent + 2, 1);
			}
			var found = false;
			var importNames = {};
			importNames[construct.identifierToken.data] = true;
			for (var i = 0; i < importConstructs.length; i++)
			{
				found = true;
				var name = importConstructs[i].nameConstruct.identifierTokens[importConstructs[i].nameConstruct.identifierTokens.length - 1].data;
				var packageName = '';
				if (importConstructs[i].nameConstruct.identifierTokens.length > 1)
				{
					var fullyQualifiedName = Construct.nameConstructToString(importConstructs[i].nameConstruct);
					fullyQualifiedName = fullyQualifiedName.split('.');
					fullyQualifiedName.pop();
					packageName = fullyQualifiedName.join('.');
				}
				if (importNames[name])
				{
					_importNameConflicts[name] = true;
					continue;
				}
				else
				{
					importNames[name] = true;
				}
				js += print(name + ' = $es4.$$[\'' + packageName + '\'].' + name + ';', _indent + 2, 1);
			}
			var found = false;
			for (var i = 0; i < construct.propertyConstructs.length; i++)
			{
				var propertyConstruct = construct.propertyConstructs[i];
				if (!propertyConstruct.staticToken)
				{
					continue;
				}
				if (!propertyConstruct.valueExpression)
				{
					continue;
				}
				if (propertyConstruct.translatedEarlier)
				{
					continue;
				}
				if (!found)
				{
					found = true;
					js += print('//initialize properties', _indent + 2, 1, (importConstructs.length) ? 1 : 0);
				}
				var namespaceObj = propertyConstruct.identifier.namespaceObj;
				var namespaceString;
				if (namespaceObj.importID)
				{
					namespaceString = namespaceObj.importID;
				}
				else
				{
					namespaceString = (construct.identifierToken.data + '.' + namespaceObj.name);
				}
				if (namespaceObj.isCustom)
				{
					js += print('$es4.$$namespace(' + namespaceString + ', ' + construct.identifierToken.data + ').' + propertyConstruct.identifierToken.data, _indent + 2, 0);
					js += ' = ' + translateExpression(propertyConstruct.valueExpression, _indent, false, construct);
					js += print(';', 0, 1);
				}
				else
				{
					if (propertyConstruct.isNative)
					{
						js += print(propertyConstruct.identifierToken.data, _indent + 2, 0);
					}
					else
					{
						js += print(construct.identifierToken.data + '.' + propertyConstruct.identifierToken.data, _indent + 2, 0);
					}
					var valueJS = translateExpression(propertyConstruct.valueExpression, _indent, false, construct);
					var typeString = getTranslatedTypeName(propertyConstruct.identifier.type);
					if (propertyConstruct.isNative && propertyConstruct.coerce && isCoerceRequired(propertyConstruct, typeString, valueJS))
					{
						js += ' = $es4.$$coerce(' + valueJS + ', ' + typeString + ')';
					}
					else
					{
						js += ' = ' + valueJS;
					}
					js += print(';', 0, 1);
				}
			}
			js += translateStatements(construct.initializerStatements, _indent + 2, construct);
			js += print('});', _indent + 1, 1);
			_inStaticFunction = false;
			return js;
		}
;

		function translateClassFunction($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			var js = '';
			upLevel();
			var js = print('function ' + construct.identifierToken.data + '()', _indent, 1);
			js += print('{', _indent, 1);
			js += print('//initialize class if not initialized', _indent + 1, 1);
			js += print('if (' + construct.identifierToken.data + '.$$cinit !== undefined) ' + construct.identifierToken.data + '.$$cinit();', _indent + 1, 2);
			js += print('//save scope', _indent + 1, 1);
			js += print('var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;', _indent + 1, 1);
			js += print('var $$thisp = this;', _indent + 1, 2);
			js += print('//handle possible cast', _indent + 1, 1);
			js += print('if ($$this === $$thisp && (!($$this instanceof ' + construct.identifierToken.data + ') || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], ' + construct.identifierToken.data + ') : $es4.$$throwArgumentError();', _indent + 1, 1);
			js += print('Object.defineProperty($$this, \'$$t\', {value:1});', _indent + 1, 1);
			var innerJS;
			js += (innerJS = translateNamespaces(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateInstanceProperties(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateInitializer(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateConstructor(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateInstanceMethods(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateInstanceAccessors(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += print('//call construct if no arguments, or argument zero does not equal manual construct', _indent + 1, 1, 1);
			js += print('if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)', _indent + 1, 1);
			js += print('{', _indent + 1, 1);
			js += print('for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];', _indent + 2, 2);
			js += print('$es4.$$construct($$this, $$args);', _indent + 2, 1);
			js += print('}', _indent + 1, 1);
			js += print('}', _indent, 1);
			downLevel();
			return js;
		}
;

		function translateInternalClasses($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			if (construct.isInternal)
			{
				return '';
			}
			var js = '';
			for (var i = 0; i < _rootConstruct.classConstructs.length; i++)
			{
				if (js)
				{
					js += print('', 0, 1);
				}
				js += print('////////////////INTERNAL CLASS////////////////', _indent + 1, 1);
				js += print('var ' + translateClassConstruct(_rootConstruct.classConstructs[i]), 1, 0);
			}
			return js;
		}
;

		function translateInternalInterfaces($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			if (construct.isInternal)
			{
				return '';
			}
			var js = '';
			for (var i = 0; i < _rootConstruct.interfaceConstructs.length; i++)
			{
				if (js)
				{
					js += print('', 0, 1);
				}
				js += print('////////////////INTERNAL INTERFACE////////////////', _indent + 1, 1);
				js += print('var ' + translateInterfaceConstruct(_rootConstruct.interfaceConstructs[i]), 1, 0);
			}
			return js;
		}
;

		function translateClassReturnStatement($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			var js = print('return $es4.$$class(' + construct.identifierToken.data + ', ', _indent + 1, 0);
			var comma = false;
			var innerJS = '';
			if (construct.extendsNameConstruct)
			{
				var type = construct.extendsNameConstruct.type;
				var innerConstruct = lookupConstructInRootConstruct(construct.rootConstruct, construct.extendsNameConstruct);
				if (innerConstruct.isInternal)
				{
					innerJS += comma = 'EXTENDS:' + type.fullyQualifiedName;
				}
				else
				{
					innerJS += comma = 'EXTENDS:\'' + type.fullyQualifiedName + '\'';
				}
			}
			if (construct.implementsNameConstructs.length)
			{
				if (comma)
				{
					innerJS += ', ';
				}
				innerJS += 'IMPLEMENTS:[';
				comma = false;
				for (var i = 0; i < construct.implementsNameConstructs.length; i++)
				{
					if (comma)
					{
						innerJS += ', ';
					}
					var type = construct.implementsNameConstructs[i].type;
					var innerConstruct = lookupConstructInRootConstruct(construct.rootConstruct, construct.implementsNameConstructs[i]);
					if (innerConstruct.isInternal)
					{
						innerJS += comma = type.fullyQualifiedName;
					}
					else
					{
						innerJS += comma = '\'' + type.fullyQualifiedName + '\'';
					}
				}
				innerJS += comma = ']';
			}
			if (!construct.isInternal)
			{
				if (_rootConstruct.classConstructs.length)
				{
					if (comma)
					{
						innerJS += ', ';
					}
					innerJS += 'CLASSES:[';
					comma = false;
					for (var i = 0; i < _rootConstruct.classConstructs.length; i++)
					{
						if (comma)
						{
							innerJS += ', ';
						}
						innerJS += comma = _rootConstruct.classConstructs[i].identifierToken.data;
					}
					innerJS += comma = ']';
				}
				if (_rootConstruct.interfaceConstructs.length)
				{
					if (comma)
					{
						innerJS += ', ';
					}
					innerJS += 'INTERFACES:[';
					comma = false;
					for (var i = 0; i < _rootConstruct.interfaceConstructs.length; i++)
					{
						if (comma)
						{
							innerJS += ', ';
						}
						innerJS += comma = _rootConstruct.interfaceConstructs[i].identifierToken.data;
					}
					innerJS += comma = ']';
				}
			}
			var packageName = construct.packageName;
			var fullyQualifiedName = (packageName) ? packageName + '::' + construct.identifierToken.data : construct.identifierToken.data;
			if (innerJS)
			{
				js += '{' + innerJS + '}';
				js += print(', \'' + fullyQualifiedName + '\');', 0, 1);
			}
			else
			{
				js = print('return $es4.$$class(' + construct.identifierToken.data + ', null, ', _indent + 1, 0);
				js += print('\'' + fullyQualifiedName + '\');', 0, 1);
			}
			return js;
		}
;

		function translateInitializer($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			upLevel();
			var js = print('//initializer', _indent, 1);
			js += print('$es4.$$iinit($$thisp, (function ()', _indent, 1);
			js += print('{', _indent, 1);
			var found = false;
			for (var i = 0; i < construct.instancePropertyConstructs.length; i++)
			{
				var propertyConstruct = construct.instancePropertyConstructs[i];
				if (!propertyConstruct.valueExpression)
				{
					continue;
				}
				if (!found)
				{
					found = true;
					js += print('//initialize properties', _indent + 1, 1);
				}
				var namespaceObj = propertyConstruct.identifier.namespaceObj;
				if (namespaceObj.isCustom)
				{
					var namespaceString = '$$thisp.' + propertyConstruct.namespaceToken.data;
					if (namespaceObj.importID)
					{
						namespaceString = namespaceObj.normalizedImportID;
					}
					js += print('$es4.$$namespace(' + namespaceString + ', $$this).' + propertyConstruct.identifierToken.data + ' = ', _indent + 1, 0);
					js += translateExpression(propertyConstruct.valueExpression, _indent, false, construct);
					js += print(';', 0, 1);
				}
				else
				{
					if (propertyConstruct.isNative)
					{
						js += print(propertyConstruct.identifierToken.data + ' = ', _indent + 1, 0);
						var valueJS = translateExpression(propertyConstruct.valueExpression, _indent, false, construct);
						var typeString = getTranslatedTypeName(propertyConstruct.identifier.type);
						if (propertyConstruct.coerce && isCoerceRequired(propertyConstruct, typeString, valueJS))
						{
							js += '$es4.$$coerce(' + valueJS + ', ' + typeString + ')';
						}
						else
						{
							js += valueJS;
						}
						js += print(';', 0, 1);
					}
					else if (_dynamicPropertyAccess)
					{
						js += print('$es4.$$set($$this, $$this, $$thisp, \'' + propertyConstruct.identifierToken.data + '\', ' + translateExpression(propertyConstruct.valueExpression, _indent, false, construct) + ', \'=\')', _indent + 1, 0);
						js += print(';', 0, 1);
					}
					else
					{
						if (namespaceObj.isPrivate)
						{
							js += print('$$thisp.' + propertyConstruct.identifierToken.data + ' = ', _indent + 1, 0);
						}
						else
						{
							js += print('$$this.' + propertyConstruct.identifierToken.data + ' = ', _indent + 1, 0);
						}
						js += translateExpression(propertyConstruct.valueExpression, _indent, false, construct);
						js += print(';', 0, 1);
					}
				}
			}
			js += print('}));', _indent, 1);
			downLevel();
			return (found) ? js : '';
		}
;

		function translateConstructor($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			var js = '';
			upLevel();
			var methodConstruct = construct.constructorMethodConstruct;
			js += print('//constructor', _indent, 1);
			js += print('$es4.$$constructor($$thisp, (function (', _indent, 0);
			if (methodConstruct)
			{
				js += translateParameters(methodConstruct, construct);
			}
			js += print(')', 0, 1);
			js += print('{', _indent, 1);
			if (methodConstruct)
			{
				js += translateDefaultParameterValues(methodConstruct, construct);
			}
			var carriage = false;
			if (construct.extendsNameConstruct && (!methodConstruct || (methodConstruct && !methodConstruct.callsSuper)))
			{
				js += print('$es4.$$super($$thisp).$$z();', _indent + 1, 1);
				carriage = true;
			}
			if (methodConstruct)
			{
				var innerJS = print(translateStatements(methodConstruct.bodyStatements, _indent + 1, construct), 0, 0);
				if (innerJS && carriage)
				{
					js += print('', 0, 1);
				}
				if (innerJS)
				{
					js += innerJS;
				}
			}
			js += print('})', _indent, 0);
			js += print(');', 0, 1);
			downLevel();
			return js;
		}
;

		function translateImports($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			var js = '';
			var importConstructs = (construct.isInternal) ? _rootConstruct.importConstructs : _rootConstruct.packageConstruct.importConstructs;
			if (importConstructs.length)
			{
				js += print('//imports', _indent + 1, 1);
			}
			for (var i = 0; i < importConstructs.length; i++)
			{
				js += print('var ' + importConstructs[i].nameConstruct.identifierTokens[importConstructs[i].nameConstruct.identifierTokens.length - 1].data + ';', _indent + 1, 1);
			}
			return js;
		}
;

		function translateNamespaces($$$$construct, $$$$isClassLevel) 
		{
			//set default parameter values
			var construct = $$$$construct;
			var isClassLevel = (1 > arguments.length - 1) ? false : $$$$isClassLevel;

			var js = '';
			var propertyConstructs = construct.namespacePropertyConstructs;
			var counter = 0;
			for (var i = 0; i < propertyConstructs.length; i++)
			{
				var propertyConstruct = propertyConstructs[i];
				if (!js)
				{
					js += print('//namespaces', _indent + 1, 1);
				}
				js += print('$es4.$$' + propertyConstruct.identifier.namespaceObj.name + '_namespace(' + (propertyConstruct.valueExpression ? translateExpression(propertyConstruct.valueExpression, _indent, false, construct) : '\'$$uniqueNS_' + (counter++) + '_' + construct.identifierToken.data + '\'') + ', ' + ((isClassLevel) ? construct.identifierToken.data : (propertyConstruct.namespaceToken.data == 'private' ? '$$thisp' : '$$this')) + ', \'' + propertyConstruct.identifierToken.data + '\');', _indent + 1, 1);
			}
			return js;
		}
;

		function translateStaticProperties($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			var js = '';
			var propertyConstructs = construct.staticPropertyConstructs;
			for (var i = 0; i < propertyConstructs.length; i++)
			{
				var propertyConstruct = propertyConstructs[i];
				if (!js)
				{
					js += print('//properties', _indent + 1, 1);
				}
				var namespaceObj = propertyConstruct.identifier.namespaceObj;
				var type = propertyConstruct.identifier.type;
				var scope = construct.identifierToken.data;
				var returnString = (type.isGlobal) ? getTranslatedTypeName(type) : '\'' + type.fullyQualifiedName + '\'';
				var namespaceString = (namespaceObj.importID) ? ', ' + namespaceObj.importID : ', ' + (construct.identifierToken.data + '.' + namespaceObj.name);
				if (namespaceObj.isCustom)
				{
					js += print('$$cnamespace_property(\'' + propertyConstruct.identifierToken.data + '\', ' + scope + namespaceString + ((returnString) ? ', ' + returnString : '') + ');', _indent + 1, 1);
				}
				else if (propertyConstruct.isNative)
				{
					js += print('var ' + propertyConstruct.identifierToken.data + ';', _indent + 1, 1);
				}
				else
				{
					if (propertyConstruct.constToken && propertyConstruct.valueExpression)
					{
						if (returnString == 'String' || returnString == 'uint' || returnString == 'int' || returnString == 'Number' || returnString == 'Boolean')
						{
							var constructor = propertyConstruct.valueExpression.constructor;
							if (constructor === Construct.StringExpression || constructor === Construct.NumberExpression || constructor === Construct.BooleanExpression)
							{
								var valueJS = translateExpression(propertyConstruct.valueExpression, _indent, false, construct);
								var coerce = false;
								if (constructor === Construct.StringExpression && returnString != 'String')
								{
									coerce = true;
								}
								else if (constructor === Construct.BooleanExpression && returnString != 'Boolean')
								{
									coerce = true;
								}
								else if (constructor === Construct.NumberExpression)
								{
									if (returnString == 'uint')
									{
										if (parseInt(valueJS) != (valueJS >>> 0))
										{
											coerce = true;
										}
									}
									else if (returnString == 'int')
									{
										if (parseInt(valueJS) != (valueJS >> 0))
										{
											coerce = true;
										}
									}
								}
								if (coerce)
								{
									js += print(scope + '.' + propertyConstruct.identifierToken.data + ' = $es4.$$coerce(' + valueJS + ', ' + returnString + ');', _indent + 1, 1);
								}
								else
								{
									js += print(scope + '.' + propertyConstruct.identifierToken.data + ' = ' + valueJS + ';', _indent + 1, 1);
								}
								propertyConstruct.translatedEarlier = true;
								continue;
							}
						}
					}
					js += print('$es4.$$' + propertyConstruct.identifier.namespaceObj.name + '_property(\'' + propertyConstruct.identifierToken.data + '\', ' + scope + ((returnString) ? ', ' + returnString : '') + ');', _indent + 1, 1);
				}
			}
			return js;
		}
;

		function translateInstanceProperties($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			var js = '';
			var propertyConstructs = construct.instancePropertyConstructs;
			for (var i = 0; i < propertyConstructs.length; i++)
			{
				var propertyConstruct = propertyConstructs[i];
				if (!js)
				{
					js += print('//properties', _indent + 1, 1);
				}
				var namespaceObj = propertyConstruct.identifier.namespaceObj;
				var isCNamespace = namespaceObj.isCustom;
				var scope = (isCNamespace) ? '$$this, $$thisp' : '$$thisp';
				var returnString = getTranslatedTypeName(propertyConstruct.identifier.type);
				var namespaceString = (namespaceObj.importID) ? ', ' + namespaceObj.importID : ', $$thisp.' + namespaceObj.name;
				if (isCNamespace)
				{
					js += print('$es4.$$cnamespace_property(\'' + propertyConstruct.identifierToken.data + '\', ' + scope + namespaceString + ((returnString) ? ', ' + returnString : '') + ');', _indent + 1, 1);
				}
				else if (propertyConstruct.isNative)
				{
					js += print('var ' + propertyConstruct.identifierToken.data + ';', _indent + 1, 1);
				}
				else
				{
					js += print('$es4.$$' + propertyConstruct.identifier.namespaceObj.name + '_property(\'' + propertyConstruct.identifierToken.data + '\', ' + scope + ((returnString) ? ', ' + returnString : '') + ');', _indent + 1, 1);
				}
			}
			return js;
		}
;

		function translateStaticMethods($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			_inStaticFunction = true;
			var js = '';
			for (var i = 0; i < construct.staticMethodConstructs.length; i++)
			{
				var methodConstruct = construct.staticMethodConstructs[i];
				upLevel();
				var namespaceObj = methodConstruct.identifier.namespaceObj;
				var isCNamespace = namespaceObj.isCustom;
				var type = methodConstruct.identifier.type;
				if (methodConstruct.isNative)
				{
					if (isCNamespace)
					{
						throw $es4.$$primitive(new Error('cannot have native custom namespace native static'));
					}
					if (methodConstruct.isJavaScript)
					{
						if (getTranslatedTypeName(type))
						{
							js += print('//method', _indent, 1, (js) ? 1 : 0);
							js += print('function ' + methodConstruct.identifierToken.data + '() { return $es4.$$coerce((function (', _indent, 0);
							js += translateParameters(methodConstruct, construct);
							js += print(')', 0, 1);
							js += print('{', _indent, 1);
							js += print('if (' + construct.identifierToken.data + '.$$cinit !== undefined) ' + construct.identifierToken.data + '.$$cinit();', _indent + 1, 2);
							js += translateDefaultParameterValues(methodConstruct, construct);
							js += methodConstruct.javaScriptString;
							js += print('}).apply(this, arguments), ' + getTranslatedTypeName(type) + '); }', _indent, 1);
						}
						else
						{
							js += print('//method', _indent, 1, (js) ? 1 : 0);
							js += print('function ' + methodConstruct.identifierToken.data + '(', _indent, 0);
							js += translateParameters(methodConstruct, construct);
							js += print(')', 0, 1);
							js += print('{', _indent, 1);
							js += print('if (' + construct.identifierToken.data + '.$$cinit !== undefined) ' + construct.identifierToken.data + '.$$cinit();', _indent + 1, 2);
							js += translateDefaultParameterValues(methodConstruct, construct);
							js += methodConstruct.javaScriptString;
							js += print('}', _indent, 1);
						}
					}
					else
					{
						js += print('//method', _indent, 1, (js) ? 1 : 0);
						js += print('function ' + methodConstruct.identifierToken.data + '(', _indent, 0);
						js += translateParameters(methodConstruct, construct);
						js += print(')', 0, 1);
						js += print('{', _indent, 1);
						js += print('if (' + construct.identifierToken.data + '.$$cinit !== undefined) ' + construct.identifierToken.data + '.$$cinit();', _indent + 1, 2);
						js += translateDefaultParameterValues(methodConstruct, construct);
						if (methodConstruct.UNIMPLEMENTEDToken && release)
						{
							js += print("throw new Error('" + methodConstruct.identifierToken.data + "');", 0, 0);
						}
						else
						{
							js += print(translateStatements(methodConstruct.bodyStatements, _indent + 1, construct), 0, 0);
						}
						js += print('}', _indent, 1);
					}
				}
				else if (methodConstruct.isJavaScript)
				{
					js += print('//method', _indent, 1, (js) ? 1 : 0);
					js += print('$es4.$$' + namespaceObj.name + '_function(\'' + methodConstruct.identifierToken.data + '\', ' + construct.identifierToken.data + ', (function (', _indent, 0);
					js += translateParameters(methodConstruct, construct);
					js += print(')', 0, 1);
					js += print('{', _indent, (methodConstruct.isJavaScript) ? 0 : 1);
					js += print('if (' + construct.identifierToken.data + '.$$cinit !== undefined) ' + construct.identifierToken.data + '.$$cinit();', _indent + 1, 2);
					js += translateDefaultParameterValues(methodConstruct, construct);
					if (methodConstruct.UNIMPLEMENTEDToken && release)
					{
						js += print("throw new Error('" + methodConstruct.identifierToken.data + "');", 0, 0);
					}
					else
					{
						js += print(translateStatements(methodConstruct.bodyStatements, _indent + 1, construct), 0, 0);
					}
					js += print('})', _indent, 0);
					if (getTranslatedTypeName(type))
					{
						js += ', ' + getTranslatedTypeName(type);
					}
					js += print(');', 0, 1);
				}
				else if (isCNamespace)
				{
					js += print('//custom namespace method', _indent, 1, (js) ? 1 : 0);
					var namespaceString = (namespaceObj.importID) ? ', ' + namespaceObj.normalizedImportID : ', ' + construct.identifierToken.data + '.' + namespaceObj.normalizedName;
					js += print('$$cnamespace_function(\'' + methodConstruct.identifierToken.data + '\', ' + construct.identifierToken.data + namespaceString + ', (function (', _indent, 0);
					js += translateParameters(methodConstruct, construct);
					js += print(')', 0, 1);
					js += print('{', _indent, (methodConstruct.isJavaScript) ? 0 : 1);
					js += print('if (' + construct.identifierToken.data + '.$$cinit !== undefined) ' + construct.identifierToken.data + '.$$cinit();', _indent + 1, 2);
					js += translateDefaultParameterValues(methodConstruct, construct);
					if (methodConstruct.UNIMPLEMENTEDToken && release)
					{
						js += print("throw new Error('" + methodConstruct.identifierToken.data + "');", 0, 0);
					}
					else
					{
						_inNamespacedFunction = (namespaceObj.importID) ? namespaceObj.importID : (namespaceObj.namespaceIsPrivate ? '$$thisp.' : '$$this.') + namespaceObj.name;
						js += print(translateStatements(methodConstruct.bodyStatements, _indent + 1, construct), 0, 0);
						_inNamespacedFunction = false;
					}
					js += print('})', _indent, 0);
					js += print(');', 0, 1);
				}
				else
				{
					js += print('//method', _indent, 1, (js) ? 1 : 0);
					js += print('$es4.$$' + namespaceObj.name + '_function(\'' + methodConstruct.identifierToken.data + '\', ' + construct.identifierToken.data + ', (function (', _indent, 0);
					js += translateParameters(methodConstruct, construct);
					js += print(')', 0, 1);
					js += print('{', _indent, 1);
					js += print('if (' + construct.identifierToken.data + '.$$cinit !== undefined) ' + construct.identifierToken.data + '.$$cinit();', _indent + 1, 2);
					js += translateDefaultParameterValues(methodConstruct, construct);
					if (methodConstruct.UNIMPLEMENTEDToken && release)
					{
						js += print("throw new Error('" + methodConstruct.identifierToken.data + "');", 0, 0);
					}
					else
					{
						js += print(translateStatements(methodConstruct.bodyStatements, _indent + 1, construct), 0, 0);
					}
					js += print('})', _indent, 0);
					js += print(');', 0, 1);
				}
				downLevel();
			}
			_inStaticFunction = false;
			return js;
		}
;

		function translateInstanceMethods($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			var js = '';
			for (var i = 0; i < construct.instanceMethodConstructs.length; i++)
			{
				var methodConstruct = construct.instanceMethodConstructs[i];
				upLevel();
				var namespaceObj = methodConstruct.identifier.namespaceObj;
				var isCNamespace = namespaceObj.isCustom;
				var type = methodConstruct.identifier.type;
				js += print((isCNamespace) ? '//custom namespace method' : '//method', _indent, 1, (js) ? 1 : 0);
				var namespaceString = (namespaceObj.importID) ? ', ' + namespaceObj.normalizedImportID : ', ' + (namespaceObj.namespaceIsPrivate ? '$$thisp.' : '$$this.') + namespaceObj.normalizedName;
				if (methodConstruct.isNative)
				{
					js += print('function ' + methodConstruct.identifierToken.data + '(', _indent, 0);
				}
				else
				{
					if (isCNamespace)
					{
						js += print('$es4.$$cnamespace_function(\'' + methodConstruct.identifierToken.data + '\', $$this, $$thisp' + namespaceString + ', (function (', _indent, 0);
					}
					else if (!methodConstruct.ITERABLEToken && _fastPropertyAccess)
					{
						js += print('$$thisp.' + methodConstruct.identifierToken.data + ' = function (', _indent, 0);
					}
					else
					{
						js += print('$es4.$$' + namespaceObj.name + '_function(\'' + methodConstruct.identifierToken.data + '\', $$thisp, (function (', _indent, 0);
					}
				}
				js += translateParameters(methodConstruct, construct);
				js += print(')', 0, 1);
				js += print('{', _indent, (methodConstruct.isJavaScript) ? 0 : 1);
				js += translateDefaultParameterValues(methodConstruct, construct);
				if (methodConstruct.isJavaScript)
				{
					js += methodConstruct.javaScriptString;
				}
				else if (methodConstruct.UNIMPLEMENTEDToken && release)
				{
					js += print("throw new Error('" + methodConstruct.identifierToken.data + "');", 0, 0);
				}
				else
				{
					if (isCNamespace)
					{
						_inNamespacedFunction = (namespaceObj.importID) ? namespaceObj.importID : '$$thisp.' + namespaceObj.name;
					}
					js += print(translateStatements(methodConstruct.bodyStatements, _indent + 1, construct), 0, 0);
					_inNamespacedFunction = false;
				}
				if (methodConstruct.isNative || (!methodConstruct.ITERABLEToken && _fastPropertyAccess && !isCNamespace))
				{
					js += print('}', _indent, 1);
				}
				else
				{
					js += print('})', (methodConstruct.isJavaScript) ? 0 : _indent, 0);
					if (methodConstruct.isJavaScript && getTranslatedTypeName(type))
					{
						js += ', ' + getTranslatedTypeName(type);
					}
					js += print(');', 0, 1);
				}
				downLevel();
			}
			return js;
		}
;

		function translateStaticAccessors($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			_inStaticFunction = true;
			var js = '';

			function getMethodConstructJS($$$$methodConstruct, $$$$type) 
			{
				//set default parameter values
				var methodConstruct = $$$$methodConstruct;
				var type = $$$$type;

				if (!methodConstruct)
				{
					return 'null';
				}
				upLevel();
				var js = '(function (';
				js += translateParameters(methodConstruct, construct);
				js += print(')', 0, 1);
				js += print('{', _indent, (methodConstruct.javaScriptString) ? 0 : 1);
				js += print('if (' + construct.identifierToken.data + '.$$cinit !== undefined) ' + construct.identifierToken.data + '.$$cinit();', _indent + 1, (methodConstruct.isJavaScript) ? 0 : 2);
				js += translateDefaultParameterValues(methodConstruct, construct);
				if (methodConstruct.isNative)
				{
					throw $es4.$$primitive(new Error('accessor cannot be native: ' + methodConstruct.identifierToken.data));
				}
				if (methodConstruct.isJavaScript)
				{
					js += methodConstruct.javaScriptString;
				}
				else if (methodConstruct.UNIMPLEMENTEDToken && release)
				{
					js += print("throw new Error('" + methodConstruct.identifierToken.data + "');", 0, 0);
				}
				else
				{
					if (methodConstruct.identifier.namespaceObj.isCustom)
					{
						_inNamespacedFunction = (methodConstruct.identifier.namespaceObj.importID) ? methodConstruct.identifier.namespaceObj.importID : '$es4.$$thisp.' + methodConstruct.identifier.namespaceObj.name;
					}
					js += translateStatements(methodConstruct.bodyStatements, _indent + 1, construct);
					_inNamespacedFunction = false;
				}
				js += print('})', (methodConstruct.javaScriptString) ? 0 : _indent, 0);
				downLevel();
				return js;
			}
;

			for (var i = 0; i < construct.staticAccessorConstructs.length; i++)
			{
				var setterMethodConstruct = construct.staticAccessorConstructs[i].setter;
				var getterMethodConstruct = construct.staticAccessorConstructs[i].getter;
				var methodConstruct = setterMethodConstruct || getterMethodConstruct;
				js += print((methodConstruct.identifier.namespaceObj.isCustom) ? '//custom namespace accessor' : '//accessor', _indent + 1, 1, (js) ? 1 : 0);
				var namespaceObj = methodConstruct.identifier.namespaceObj;
				var namespaceString = (namespaceObj.importID) ? ', ' + namespaceObj.importID : ', ' + construct.identifierToken.data + '.' + namespaceObj.name;
				if (methodConstruct.identifier.namespaceObj.isCustom)
				{
					js += print('$es4.$$cnamespace_accessor(\'' + methodConstruct.identifierToken.data + '\', ' + construct.identifierToken.data + namespaceString + ', ', _indent + 1, 0);
				}
				else
				{
					js += print('$es4.$$' + methodConstruct.identifier.namespaceObj.name + '_accessor(\'' + methodConstruct.identifierToken.data + '\', ' + construct.identifierToken.data + ', ', _indent + 1, 0);
				}
				var type = (getterMethodConstruct) ? getterMethodConstruct.identifier.type : setterMethodConstruct.identifier.type;
				if (!getterMethodConstruct)
				{
					js += '(function ()';
					js += print('{', _indent + 1, 1, 1);
					js += print("throw new Error('attempted access to undefined static getter');", _indent + 2, 0);
					js += print('}), ', _indent + 1, 0, 1);
				}
				else
				{
					js += getMethodConstructJS(getterMethodConstruct, type) + ', ';
				}
				if (!setterMethodConstruct && methodConstruct.overrideToken)
				{
					js += '(function ($$value)';
					js += print('{', _indent + 1, 1, 1);
					js += print("throw new Error('attempted access to undefined static setter');", _indent + 2, 0);
					js += print('})', _indent + 1, 0, 1);
				}
				else
				{
					js += getMethodConstructJS(setterMethodConstruct, type);
				}
				js += print(');', 0, 1);
			}
			_inStaticFunction = false;
			return js;
		}
;

		function translateInstanceAccessors($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			var js = '';

			function getMethodConstructJS($$$$methodConstruct, $$$$type) 
			{
				//set default parameter values
				var methodConstruct = $$$$methodConstruct;
				var type = $$$$type;

				if (!methodConstruct)
				{
					return 'null';
				}
				upLevel();
				var js = '(function (';
				js += translateParameters(methodConstruct, construct);
				js += print(')', 0, 1);
				js += print('{', _indent, (methodConstruct.javaScriptString) ? 0 : 1);
				js += translateDefaultParameterValues(methodConstruct, construct);
				if (methodConstruct.isNative)
				{
					throw $es4.$$primitive(new Error('accessor cannot be native: ' + methodConstruct.identifierToken.data));
				}
				if (methodConstruct.isJavaScript)
				{
					js += methodConstruct.javaScriptString;
				}
				else if (methodConstruct.UNIMPLEMENTEDToken && release)
				{
					js += print("throw new Error('" + methodConstruct.identifierToken.data + "');", 0, 0);
				}
				else
				{
					if (methodConstruct.identifier.namespaceObj.isCustom)
					{
						_inNamespacedFunction = (methodConstruct.identifier.namespaceObj.importID) ? methodConstruct.identifier.namespaceObj.importID : '$$thisp.' + methodConstruct.identifier.namespaceObj.name;
					}
					js += translateStatements(methodConstruct.bodyStatements, _indent + 1, construct);
					_inNamespacedFunction = false;
				}
				js += print('})', (methodConstruct.javaScriptString) ? 0 : _indent, 0);
				downLevel();
				return js;
			}
;

			for (var i = 0; i < construct.instanceAccessorConstructs.length; i++)
			{
				var setterMethodConstruct = construct.instanceAccessorConstructs[i].setter;
				var getterMethodConstruct = construct.instanceAccessorConstructs[i].getter;
				var methodConstruct = setterMethodConstruct || getterMethodConstruct;
				js += print((methodConstruct.identifier.namespaceObj.isCustom) ? '//custom namespace accessor' : '//accessor', _indent + 1, 1, (js) ? 1 : 0);
				var namespaceObj = methodConstruct.identifier.namespaceObj;
				var namespaceString = (namespaceObj.importID) ? ', ' + namespaceObj.importID : ', $$thisp.' + namespaceObj.name;
				if (methodConstruct.identifier.namespaceObj.isCustom)
				{
					js += print('$es4.$$cnamespace_accessor(\'' + methodConstruct.identifierToken.data + '\', $$this, $$thisp' + namespaceString + ', ', _indent + 1, 0);
				}
				else
				{
					js += print('$es4.$$' + methodConstruct.identifier.namespaceObj.name + '_accessor(\'' + methodConstruct.identifierToken.data + '\', $$thisp, ', _indent + 1, 0);
				}
				var type = (getterMethodConstruct) ? getterMethodConstruct.identifier.type : setterMethodConstruct.identifier.type;
				if (!getterMethodConstruct && methodConstruct.overrideToken)
				{
					js += '(function ()';
					js += print('{', _indent + 1, 1, 1);
					js += print('return $es4.$$super($$thisp).' + methodConstruct.identifierToken.data + ';', _indent + 2, 0);
					js += print('}), ', _indent + 1, 0, 1);
				}
				else
				{
					js += getMethodConstructJS(getterMethodConstruct, type) + ', ';
				}
				if (!setterMethodConstruct && methodConstruct.overrideToken)
				{
					js += '(function ($$value)';
					js += print('{', _indent + 1, 1, 1);
					js += print('$es4.$$super($$thisp).' + methodConstruct.identifierToken.data + ' = $$value;', _indent + 2, 0);
					js += print('})', _indent + 1, 0, 1);
				}
				else
				{
					js += getMethodConstructJS(setterMethodConstruct, type);
				}
				js += print(');', 0, 1);
			}
			return js;
		}
;

		function translateParameters($$$$methodConstruct, $$$$construct) 
		{
			//set default parameter values
			var methodConstruct = $$$$methodConstruct;
			var construct = $$$$construct;

			var js = '';
			for (var i = 0; i < methodConstruct.parameterConstructs.length; i++)
			{
				var parameterConstruct = methodConstruct.parameterConstructs[i];
				js += '$$$$' + parameterConstruct.identifierToken.data;
				if ((i + 1) < methodConstruct.parameterConstructs.length)
				{
					js += ', ';
				}
			}
			return js;
		}
;

		function translateDefaultParameterValues($$$$methodConstruct, $$$$construct) 
		{
			//set default parameter values
			var methodConstruct = $$$$methodConstruct;
			var construct = $$$$construct;

			var js = '';
			for (var i = 0; i < methodConstruct.parameterConstructs.length; i++)
			{
				var parameterConstruct = methodConstruct.parameterConstructs[i];
				if (!js)
				{
					js += print('//set default parameter values', _indent + 1, 1);
				}
				if (parameterConstruct.restToken || parameterConstruct.valueExpression)
				{
					if (parameterConstruct.restToken)
					{
						js += print('for (var $$i = ' + (methodConstruct.parameterConstructs.length - 1) + ', $$length = arguments.length, ' + parameterConstruct.identifierToken.data + ' = new Array($$length - ' + (methodConstruct.parameterConstructs.length - 1) + '); $$i < $$length; $$i += 1) ' + parameterConstruct.identifierToken.data + '[$$i - ' + (methodConstruct.parameterConstructs.length - 1) + '] = arguments[$$i];', _indent + 1, 1);
					}
					else if (parameterConstruct.valueExpression)
					{
						var coerceType = getTranslatedTypeName(parameterConstruct.identifier.type);
						if (coerceType)
						{
							js += print('var ' + parameterConstruct.identifierToken.data + ' = (' + i + ' > arguments.length - 1) ? ' + translateExpression(parameterConstruct.valueExpression, 0, false, construct) + ' : $es4.$$coerce($$$$' + parameterConstruct.identifierToken.data + ', ' + coerceType + ');', _indent + 1, 1);
						}
						else
						{
							js += print('var ' + parameterConstruct.identifierToken.data + ' = (' + i + ' > arguments.length - 1) ? ' + translateExpression(parameterConstruct.valueExpression, 0, false, construct) + ' : $$$$' + parameterConstruct.identifierToken.data + ';', _indent + 1, 1);
						}
					}
				}
				else
				{
					var coerceType = getTranslatedTypeName(parameterConstruct.identifier.type);
					if (coerceType)
					{
						js += print('var ' + parameterConstruct.identifierToken.data + ' = $es4.$$coerce($$$$' + parameterConstruct.identifierToken.data + ', ' + coerceType + ');', _indent + 1, 1);
					}
					else
					{
						js += print('var ' + parameterConstruct.identifierToken.data + ' = $$$$' + parameterConstruct.identifierToken.data + ';', _indent + 1, 1);
					}
				}
			}
			if (js)
			{
				js += print('', 0, 1);
			}
			return js;
		}
;

		function translateStatements($$$$statements, $$$$indent, $$$$construct) 
		{
			//set default parameter values
			var statements = $$$$statements;
			var indent = $$$$indent;
			var construct = $$$$construct;

			if (!indent)
			{
				indent = _indent;
			}
			else
			{
				indent--;
			}
			var js = '';
			for (var i = 0; i < statements.length; i++)
			{
				var statement = statements[i];
				if (i != 0 && statements[i - 1].constructor != Construct.FunctionExpression && statements[i].constructor == Construct.FunctionExpression)
				{
					js += '\n';
				}
				js += translateStatement(statement, indent + 1, false, construct);
				if (i + 1 < statements.length && statement.constructor == 'FunctionExpression')
				{
					js += '\n';
				}
			}
			return js;
		}
;

		function translateStatement($$$$statement, $$$$_indent, $$$$inline, $$$$construct) 
		{
			//set default parameter values
			var statement = $$$$statement;
			var _indent = $$$$_indent;
			var inline = $$$$inline;
			var construct = $$$$construct;

			if (!construct)
			{
				throw $es4.$$primitive(new Error('construct null in translate statement'));
			}
			var js = '';
			switch (statement.constructor)
			{
				case Construct.EmptyStatement:
					break;
				case Construct.IfStatement:
					_inIfStatement++;
					js += print('if (' + translateExpression(statement.conditionExpression, _indent, false, construct) + ')', _indent, 1);
					js += print('{', _indent, 1);
					js += translateStatements(statement.bodyStatements, _indent + 1, construct);
					js += print('}', _indent, 1);
					for (var i = 0; i < statement.elseIfStatements.length; i++)
					{
						js += translateStatement(statement.elseIfStatements[i], _indent, false, construct);
					}
					if (statement.elseStatement)
					{
						js += translateStatement(statement.elseStatement, _indent, false, construct);
					}
					_inIfStatement--;
					break;
				case Construct.ElseIfStatement:
					_inIfStatement++;
					js += print('else if (' + translateExpression(statement.conditionExpression, _indent, false, construct) + ')', _indent, 1);
					js += print('{', _indent, 1);
					js += translateStatements(statement.bodyStatements, _indent + 1, construct);
					js += print('}', _indent, 1);
					_inIfStatement--;
					break;
				case Construct.ElseStatement:
					_inIfStatement++;
					js += print('else', _indent, 1);
					js += print('{', _indent, 1);
					js += translateStatements(statement.bodyStatements, _indent + 1, construct);
					js += print('}', _indent, 1);
					_inIfStatement--;
					break;
				case Construct.WhileStatement:
					js += print('while (' + translateExpression(statement.conditionExpression, _indent, false, construct) + ')', _indent, 1);
					js += print('{', _indent, 1);
					js += translateStatements(statement.bodyStatements, _indent + 1, construct);
					js += print('}', _indent, 1);
					break;
				case Construct.DoWhileStatement:
					js += print('do', _indent, 1);
					js += print('{', _indent, 1);
					js += translateStatements(statement.bodyStatements, _indent + 1, construct);
					js += print('}', _indent, 1);
					js += print('while (' + translateExpression(statement.conditionExpression, _indent, false, construct) + ')', _indent, 1);
					break;
				case Construct.ForStatement:
					js += print('for (', _indent, 0);
					if (statement.variableStatement)
					{
						js += translateStatement(statement.variableStatement, 0, true, construct);
					}
					js += ';';
					if (statement.conditionExpression)
					{
						js += ' ' + translateExpression(statement.conditionExpression, _indent, false, construct);
					}
					js += ';';
					if (statement.afterthoughtExpression)
					{
						js += ' ' + translateExpression(statement.afterthoughtExpression, _indent, false, construct);
					}
					js += ')\n';
					js += print('{', _indent, 1);
					js += translateStatements(statement.bodyStatements, _indent + 1, construct);
					js += print('}', _indent, 1);
					break;
				case Construct.ForEachStatement:
					_count++;
					var object = translateExpression(statement.arrayExpression, _indent, false, construct);
					var index = '$$i' + _count;
					if (_dynamicPropertyAccess)
					{
						js += print('for (var ' + index + ' = (' + object + ' || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); ' + index + ' != 0; ' + index + ' = ' + object + '.$$nextNameIndex(' + index + '))', _indent, 1);
					}
					else
					{
						js += print('for (var ' + index + ' in ' + object + ')', _indent, 1);
					}
					js += print('{', _indent, 1);
					var valueJS = '';
					if (_dynamicPropertyAccess)
					{
						valueJS += object + '.$$nextValue(' + index + ')';
					}
					else
					{
						valueJS += object + '[' + index + ']';
					}
					var typeString = getTranslatedTypeName(statement.variableStatement.identifier.type);
					if (typeString)
					{
						js += print(translateStatement(statement.variableStatement, 0, true, construct) + ' = $es4.$$coerce(' + valueJS + ', ' + typeString + ');', _indent + 1, 2);
					}
					else
					{
						js += print(translateStatement(statement.variableStatement, 0, true, construct) + ' = ' + valueJS + ';', _indent + 1, 2);
					}
					js += translateStatements(statement.bodyStatements, _indent + 1, construct);
					js += print('}', _indent, 1);
					break;
				case Construct.ForInStatement:
					_count++;
					var object = translateExpression(statement.objectExpression, _indent, false, construct);
					var index = '$$i' + _count;
					if (_dynamicPropertyAccess)
					{
						js += print('for (var ' + index + ' = (' + object + ' || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); ' + index + ' != 0; ' + index + ' = ' + object + '.$$nextNameIndex(' + index + '))', _indent, 1);
					}
					else
					{
						js += print('for (' + translateStatement(statement.variableStatement, 0, true, construct) + ' in ' + translateExpression(statement.objectExpression, _indent, false, construct) + ')', _indent, 1);
					}
					js += print('{', _indent, 1);
					if (_dynamicPropertyAccess)
					{
						valueJS = object + '.$$nextName(' + index + ')';
						var typeString = getTranslatedTypeName(statement.variableStatement.identifier.type);
						if (typeString)
						{
							js += print(translateStatement(statement.variableStatement, 0, true, construct) + ' = $es4.$$coerce(' + valueJS + ', ' + typeString + ');', _indent + 1, 2);
						}
						else
						{
							js += print(translateStatement(statement.variableStatement, 0, true, construct) + ' = ' + valueJS + ';', _indent + 1, 2);
						}
					}
					js += translateStatements(statement.bodyStatements, _indent + 1, construct);
					js += print('}', _indent, 1);
					break;
				case Construct.BreakStatement:
					js += print('break', _indent, 0);
					if (statement.identifierToken)
					{
						js += ' ' + statement.identifierToken.data;
					}
					js += ';\n';
					break;
				case Construct.ContinueStatement:
					js += print('continue', _indent, 0);
					if (statement.identifierToken)
					{
						js += ' ' + statement.identifierToken.data;
					}
					js += ';\n';
					break;
				case Construct.ThrowStatement:
					js += print('throw', _indent, 0);
					if (statement.expression)
					{
						js += ' ' + translateExpression(statement.expression, _indent, false, construct);
					}
					js += ';\n';
					break;
				case Construct.TryStatement:
					js += print('try', _indent, 1);
					js += print('{', _indent, 1);
					js += translateStatements(statement.bodyStatements, _indent + 1, construct);
					js += print('}', _indent, 1);
					if (statement.catchStatements.length == 1)
					{
						js += print('catch (' + statement.catchStatements[0].identifierToken.data + ')', _indent, 1);
					}
					else
					{
						js += print('catch ($$error)', _indent, 1);
					}
					js += print('{', _indent, 1);
					for (var i = 0; i < statement.catchStatements.length; i++)
					{
						upLevel();
						var catchStatement = statement.catchStatements[i];
						var typeName = catchStatement.identifier.type.name;
						if (i == 0 && statement.catchStatements.length == 1)
						{
							if (typeName == 'void' || typeName == 'Error')
							{
								js += translateStatements(catchStatement.bodyStatements, _indent + 1, construct);
							}
							else
							{
								js += print('if ($es4.$$is(' + catchStatement.identifierToken.data + ', ' + getTranslatedTypeName(catchStatement.identifier.type) + '))', _indent + 1, 1);
								js += print('{', _indent + 1, 1);
								js += translateStatements(catchStatement.bodyStatements, _indent + 2, construct);
								js += print('}', _indent + 1, 1);
							}
							downLevel();
							break;
						}
						if (typeName == 'void' || typeName == 'Error')
						{
							js += print('else', _indent + 1, 1);
							js += print('{', _indent + 1, 1);
							js += print('var ' + catchStatement.identifierToken.data + ' = $$error;', _indent + 2, 1);
							js += translateStatements(catchStatement.bodyStatements, _indent + 2, construct);
							js += print('}', _indent + 1, 1);
							downLevel();
							break;
						}
						js += print(((i == 0) ? 'if' : 'else if') + ' ($es4.$$is($$error, ' + typeName + '))', _indent + 1, 1);
						js += print('{', _indent + 1, 1);
						js += print('var ' + catchStatement.identifierToken.data + ' = $$error;', _indent + 2, 1);
						js += translateStatements(catchStatement.bodyStatements, _indent + 2, construct);
						js += print('}', _indent + 1, 1);
						downLevel();
					}
					js += print('}', _indent, 1);
					if (statement.finallyStatement)
					{
						js += print('finally', _indent, 1);
						js += print('{', _indent, 1);
						js += translateStatements(statement.finallyStatement.bodyStatements, _indent + 1, construct);
						js += print('}', _indent, 1);
					}
					break;
				case Construct.UseStatement:
					break;
				case Construct.VarStatement:
					var translateVarValueExpression = function ($$$$statement) 
					{
				//set default parameter values
				var statement = $$$$statement;

						var valueJS = translateExpression(statement.valueExpression, _indent, false, construct);
						var typeString = getTranslatedTypeName(statement.identifier.type);
						if (isCoerceRequired(statement, typeString, valueJS))
						{
							valueJS = '$es4.$$coerce(' + valueJS + ', ' + typeString + ')';
						}
						return ' = ' + valueJS;
					}
;
					js += print('var ' + statement.identifierToken.data, _indent, 0);
					if (statement.valueExpression)
					{
						js += translateVarValueExpression(statement);
					}
					for (var i = 0; i < statement.innerVarStatements.length; i++)
					{
						var innerVarStatement = statement.innerVarStatements[i];
						js += ', ' + innerVarStatement.identifierToken.data;
						if (innerVarStatement.valueExpression)
						{
							js += translateVarValueExpression(innerVarStatement);
						}
					}
					if (!inline)
					{
						js += ';\n';
					}
					break;
				case Construct.SwitchStatement:
					js += print('switch (' + translateExpression(statement.valueExpression, _indent, false, construct) + ')', _indent, 1);
					js += print('{', _indent, 1);
					for (var i = 0; i < statement.caseStatements.length; i++)
					{
						js += translateStatement(statement.caseStatements[i], _indent + 1, false, construct);
					}
					js += print('}', _indent, 1);
					break;
				case Construct.CaseStatement:
					if (statement.defaultToken)
					{
						js += print('default:', _indent, 1);
					}
					else
					{
						js += print('case ' + translateExpression(statement.valueExpression, _indent, false, construct) + ':', _indent, 1);
					}
					js += translateStatements(statement.bodyStatements, _indent + 1, construct);
					break;
				case Construct.LabelStatement:
					js += print(statement.identifierToken.data + ':', _indent, 0);
					break;
				default:
					if (inline)
					{
						js += print(translateExpression(statement, _indent, false, construct), _indent, 0);
					}
					else
					{
						js += print(translateExpression(statement, _indent, false, construct) + ';', _indent, 1);
					}
			}
			return js;
		}
;

		function translateExpression($$$$expression, $$$$_indent, $$$$toString, $$$$construct, $$$$operator, $$$$expressionString) 
		{
			//set default parameter values
			var expression = $$$$expression;
			var _indent = $$$$_indent;
			var toString = $$$$toString;
			var construct = $$$$construct;
			var operator = (4 > arguments.length - 1) ? null : $$$$operator;
			var expressionString = (5 > arguments.length - 1) ? null : $$$$expressionString;

			if (!construct)
			{
				throw $es4.$$primitive(new Error('construct null in translate expression'));
			}
			if (!_indent)
			{
				_indent = 0;
			}
			var js = '';
			outerSwitch:			switch (expression.constructor)
			{
				case Construct.ParenExpression:
					js += '(' + translateExpression(expression.expression, _indent, toString, construct, operator, expressionString) + ')';
					break;
				case Construct.PropertyExpression:
					if (_dynamicPropertyAccess)
					{
						js += translatePropertyExpressionDynamic(expression, toString, expressionString, operator, construct);
					}
					else
					{
						js += translatePropertyExpression(expression, toString, construct);
					}
					break;
				case Construct.NumberExpression:
					js += expression.numberToken.data;
					break;
				case Construct.StringExpression:
					if (toString && expression.stringToken.data == "'")
					{
						js += '\\' + expression.stringToken.data;
					}
					else
					{
						js += expression.stringToken.data;
					}
					for (var i = 0; i < expression.stringChunkTokens.length; i++)
					{
						js += expression.stringChunkTokens[i].data;
						if (i + 1 < expression.stringChunkTokens.length)
						{
							js += '\n';
						}
					}
					if (toString && expression.stringToken.data == "'")
					{
						js += '\\' + expression.stringToken.data;
					}
					else
					{
						js += expression.stringToken.data;
					}
					break;
				case Construct.ReturnExpression:
					js += 'return';
					if (expression.expression)
					{
						var typeName = getTranslatedTypeName(expression.expectedType);
						var valueJS = translateExpression(expression.expression, 0, toString, construct);
						if (typeName && isCoerceRequired(expression, typeName, valueJS))
						{
							js += ' $es4.$$coerce(' + valueJS + ', ' + typeName + ')';
						}
						else
						{
							js += ' ' + valueJS;
						}
					}
					break;
				case Construct.DeleteExpression:
					if (_dynamicPropertyAccess)
					{
						js += translatePropertyExpressionDynamic(expression.expression, toString, undefined, undefined, construct, true);
					}
					else
					{
						js += 'delete ' + translateExpression(expression.expression, 0, toString, construct);
					}
					break;
				case Construct.FunctionExpression:
					upLevel();
					var wasInClosure = _inClosure;
					_inClosure = true;
					if (!expression.identifierToken)
					{
						js += print('function (', 0, 0);
					}
					else
					{
						if (_inIfStatement)
						{
							throw $es4.$$primitive(new Error('support for named closures in if/elseif/else statements is not supported at this time.'));
						}
						js += print('function ' + expression.identifierToken.data + '(', 0, 0);
					}
					js += translateParameters(expression, construct);
					js += print(') ', 0, 1);
					js += print('{', _indent, 1);
					js += translateDefaultParameterValues(expression, construct);
					js += translateStatements(expression.bodyStatements, _indent + 1, construct);
					js += print('}', _indent, 1);
					if (!wasInClosure)
					{
						_inClosure = false;
					}
					downLevel();
					break;
				case Construct.ObjectExpression:
					js += '{';
					for (var i = 0; i < expression.objectPropertyConstructs.length; i++)
					{
						var prop;
						if (expression.objectPropertyConstructs[i].expression.constructor == Construct.PropertyExpression)
						{
							prop = expression.objectPropertyConstructs[i].expression.construct.identifierToken.data;
						}
						else
						{
							prop = translateExpression(expression.objectPropertyConstructs[i].expression, 0, toString, construct);
						}
						js += prop + ':' + translateExpression(expression.objectPropertyConstructs[i].valueExpression, 0, toString, construct);
						if ((i + 1) < expression.objectPropertyConstructs.length)
						{
							js += ', ';
						}
					}
					js += '}';
					break;
				case Construct.ArrayExpression:
					js += '[';
					for (var i = 0; i < expression.valueExpressions.length; i++)
					{
						if (!expression.valueExpressions[i])
						{
							trace('invalid 20');
						}
						js += translateExpression(expression.valueExpressions[i], 0, toString, construct);
						if ((i + 1) < expression.valueExpressions.length)
						{
							js += ', ';
						}
					}
					js += ']';
					break;
				case Construct.BooleanExpression:
					js += expression.booleanToken.data;
					break;
				case Construct.Expression:
					if (expression.token.type == Token.TypeofTokenType)
					{
						if (!expression.expression)
						{
							trace('invalid 21');
						}
						js += '$es4.$$typeof(' + translateExpression(expression.expression, 0, toString, construct) + ')';
						break;
					}
					if (expression.token.type == Token.VoidTokenType)
					{
						if (expression.expression.constructor == Construct.EmptyExpression)
						{
							js += 'void 0';
						}
						else
						{
							if (!expression.expression)
							{
								trace('invalid 01');
							}
							js += 'void ' + translateExpression(expression.expression, 0, toString, construct);
						}
						break;
					}
					js += expression.token.data;
					if (expression.expression)
					{
						if (!expression.expression)
						{
							trace('invalid 22');
						}
						js += translateExpression(expression.expression, 0, toString, construct);
					}
					break;
				case Construct.XMLExpression:
					js += 'new XML(\'' + expression.string + '\')';
					break;
				case Construct.XMLListExpression:
					js += 'new XMLList(\'' + expression.string + '\')';
					break;
				case Construct.EmptyExpression:
					break;
				case Construct.RegExpression:
					js += expression.string;
					break;
				case Construct.PrefixExpression:
					if (_dynamicPropertyAccess)
					{
						js += translatePropertyExpressionDynamic(expression.expression, toString, '\'prefix\'', (expression.decrementToken) ? '--' : '++', construct);
					}
					else
					{
						if (!expression.expression)
						{
							trace('invalid 25');
						}
						js += ((expression.decrementToken) ? '--' : '++') + translateExpression(expression.expression, 0, toString, construct);
					}
					break;
				case Construct.PostfixExpression:
					if (_dynamicPropertyAccess)
					{
						js += translatePropertyExpressionDynamic(expression.expression, toString, '\'postfix\'', (expression.decrementToken) ? '--' : '++', construct);
					}
					else
					{
						if (!expression.expression)
						{
							trace('invalid 26');
						}
						js += translateExpression(expression.expression, 0, toString, construct) + ((expression.decrementToken) ? '--' : '++');
					}
					break;
				case Construct.NewExpression:
					if (_dynamicPropertyAccess)
					{
						if (expression.expression.constructor == Construct.ParenExpression)
						{
							if (!expression.expression)
							{
								trace('invalid 02');
							}
							js += '$es4.$$primitive(new ' + translateExpression(expression.expression, 0, toString, construct) + ')';
						}
						else
						{
							js += translatePropertyExpressionDynamic(expression.expression, toString, null, null, construct, null, true);
						}
					}
					else
					{
						if (!expression.expression)
						{
							trace('invalid 03');
						}
						js += '$es4.$$primitive(new ' + translateExpression(expression.expression, 0, toString, construct) + ')';
					}
					break;
				case Construct.BinaryExpression:
					if (expression.token.type == Token.IsTokenType)
					{
						if (!expression.leftExpression)
						{
							trace('invalid 04');
						}
						if (!expression.rightExpression)
						{
							trace('invalid 05');
						}
						js += '$es4.$$is(' + translateExpression(expression.leftExpression, 0, toString, construct) + ', ' + translateExpression(expression.rightExpression, 0, toString, construct) + ')';
						break;
					}
					if (expression.token.type == Token.InstanceofTokenType)
					{
						if (!expression.leftExpression)
						{
							trace('invalid 06');
						}
						if (!expression.rightExpression)
						{
							trace('invalid 07');
						}
						js += '$es4.$$instanceof(' + translateExpression(expression.leftExpression, 0, toString, construct) + ', ' + translateExpression(expression.rightExpression, 0, toString, construct) + ')';
						break;
					}
					if (expression.token.type == Token.AsTokenType)
					{
						if (!expression.leftExpression)
						{
							trace('invalid 08');
						}
						if (!expression.rightExpression)
						{
							trace('invalid 09');
						}
						js += '$es4.$$as(' + translateExpression(expression.leftExpression, 0, toString, construct) + ', ' + translateExpression(expression.rightExpression, 0, toString, construct) + ')';
						break;
					}
					innerSwitch:					switch (expression.token.type)
					{
						case Token.BitwiseLeftShiftAssignmentTokenType:
						case Token.BitwiseUnsignedRightShiftAssignmentTokenType:
						case Token.BitwiseRightShiftAssignmentTokenType:
						case Token.AddWithAssignmentTokenType:
						case Token.DivWithAssignmentTokenType:
						case Token.ModWithAssignmentTokenType:
						case Token.MulWithAssignmentTokenType:
						case Token.SubWithAssignmentTokenType:
						case Token.AssignmentTokenType:
						case Token.AndWithAssignmentTokenType:
						case Token.OrWithAssignmentTokenType:
						case Token.BitwiseAndAssignmentTokenType:
						case Token.BitwiseOrAssignmentTokenType:
						case Token.BitwiseXorAssignmentTokenType:
							var leftExpression = expression.leftExpression;
							while (leftExpression.constructor == Construct.ParenExpression)
							{
								leftExpression = leftExpression.expression;
							}
							var innerOperator = expression.token.data;
							var innerExpressionString = '';
							while (leftExpression.constructor == Construct.BinaryExpression)
							{
								expression.leftExpression = leftExpression.rightExpression;
								if (!innerExpressionString)
								{
									if (!expression)
									{
										trace('invalid 10');
									}
									innerExpressionString = translateExpression(expression, _indent, toString, construct);
								}
								else
								{
									if (!expression.leftExpression)
									{
										trace('invalid 11');
									}
									if (_dynamicPropertyAccess)
									{
										innerExpressionString = translateExpression(expression.leftExpression, _indent, toString, construct, innerOperator, innerExpressionString);
									}
									else
									{
										innerExpressionString = translateExpression(expression.leftExpression, _indent, toString, construct) + ' ' + innerOperator + ' ' + innerExpressionString;
									}
								}
								expression = leftExpression;
								innerOperator = expression.token.data;
								leftExpression = expression.leftExpression;
							}
							var typeString;
							if (!leftExpression.nextPropertyExpression && leftExpression.construct && leftExpression.construct.constructor == Construct.IdentifierConstruct)
							{
								var identifier = leftExpression.construct.identifier;
								typeString = (identifier.isVar && identifier.type) ? getTranslatedTypeName(identifier.type) : '';
							}
							if (_dynamicPropertyAccess)
							{
								if (!innerExpressionString)
								{
									if (!expression.rightExpression)
									{
										trace('invalid 12');
									}
									innerExpressionString = translateExpression(expression.rightExpression, 0, toString, construct);
								}
								if (typeString && isCoerceRequired(leftExpression, typeString, innerExpressionString))
								{
									js += translatePropertyExpressionDynamic(leftExpression, toString, '$es4.$$coerce(' + innerExpressionString + ', ' + typeString + ')', innerOperator, construct);
								}
								else
								{
									js += translatePropertyExpressionDynamic(leftExpression, toString, innerExpressionString, innerOperator, construct);
								}
							}
							else
							{
								if (!expression.leftExpression)
								{
									trace('invalid 13');
								}
								js += translateExpression(leftExpression, 0, toString, construct);
								if (!innerExpressionString)
								{
									if (!expression.rightExpression)
									{
										trace('invalid 14');
									}
									innerExpressionString = translateExpression(expression.rightExpression, 0, toString, construct);
								}
								if (typeString && isCoerceRequired(leftExpression, typeString, innerExpressionString))
								{
									js += ' ' + innerOperator + ' $es4.$$coerce(' + innerExpressionString + ', ' + typeString + ')';
								}
								else
								{
									js += ' ' + innerOperator + ' ' + innerExpressionString;
								}
							}
							break outerSwitch;
					}
					if (!expression.leftExpression)
					{
						trace('invalid 15');
					}
					if (!expression.rightExpression)
					{
						trace('invalid 16');
					}
					js += translateExpression(expression.leftExpression, 0, toString, construct) + ' ' + expression.token.data + ' ' + translateExpression(expression.rightExpression, 0, toString, construct);
					break;
				case Construct.TernaryExpression:
					if (!expression.trueExpression)
					{
						trace('invalid 34');
					}
					if (!expression.conditionExpression)
					{
						trace('invalid 35');
					}
					if (!expression.falseExpression)
					{
						trace('invalid 36');
					}
					js += translateExpression(expression.conditionExpression, 0, toString, construct) + ' ? ' + translateExpression(expression.trueExpression, 0, toString, construct) + ' : ' + translateExpression(expression.falseExpression, 0, toString, construct);
					break;
				default:
					throw $es4.$$primitive(new Error('Unexpected expression found: ' + expression.constructor));
			}
			return js;
		}
;

		function translatePropertyExpression($$$$expression, $$$$toString, $$$$construct) 
		{
			//set default parameter values
			var expression = $$$$expression;
			var toString = $$$$toString;
			var construct = $$$$construct;

			var js = '';
			if (!expression.construct)
			{
				throw $es4.$$primitive(new Error('invalid expression passed to translatePropertyExpression: ' + expression.constructor));
			}
			var identifier;
			var namespaceIdentifier;
			switch (expression.construct.constructor)
			{
				case Construct.SuperConstruct:
				case Construct.ThisConstruct:
				case Construct.IdentifierConstruct:
					identifier = expression.construct.identifier;
					break;
				case Construct.ParenConstruct:
				case Construct.ArrayConstruct:
				case Construct.ObjectConstruct:
					break;
				case Construct.NamespaceQualifierConstruct:
					namespaceIdentifier = expression.construct.namespaceIdentifier;
					identifier = expression.construct.identifier;
					break;
				default:
					throw $es4.$$primitive(new Error('unknown inner property expression: ' + expression.construct.constructor));
			}
			var pname;
			var name;
			if (identifier && !namespaceIdentifier && (identifier.isProperty || identifier.isMethod) && !identifier.isImport && identifier.namespaceObj.isCustom)
			{
				namespaceIdentifier = identifier.namespaceObj.identifier;
			}
			if (identifier && namespaceIdentifier)
			{
				var pname = (namespaceIdentifier.isStatic) ? namespaceIdentifier.scope.name : '$$this';
				var namespaceObj = namespaceIdentifier.namespaceObj;
				var namespaceString = namespaceObj.normalizedImportID;
				if (namespaceIdentifier.isStatic && !namespaceString)
				{
					namespaceString = namespaceIdentifier.scope.name + '.' + namespaceIdentifier.name;
				}
				else if (!namespaceString)
				{
					namespaceString = (namespaceIdentifier.namespaceObj && namespaceIdentifier.namespaceObj.isPrivate ? '$$thisp.' : '$$this.') + namespaceIdentifier.name;
				}
				pname += '.$$namespace(' + namespaceString + ')';
				name = identifier.name;
			}
			else if (identifier)
			{
				name = identifier.name;
				if (identifier.isStatic && !identifier.isImport && !identifier.isNative)
				{
					pname = identifier.scope.name;
				}
				else if (identifier.isPrivate && !identifier.isImport)
				{
					pname = '$$thisp';
				}
				else if ((identifier.isProperty || identifier.isMethod) && !identifier.isImport)
				{
					pname = '$$this';
				}
				else if (identifier.isPackage)
				{
					name = '$es4.$$[\'' + identifier.name;
					var packageName = identifier.name;
					var tempInnerExpression = expression;
					var lastExpression = tempInnerExpression;
					while (tempInnerExpression = tempInnerExpression.nextPropertyExpression)
					{
						if (_rootConstructs[packageName + '.' + tempInnerExpression.construct.identifierToken.data])
						{
							expression = lastExpression;
							break;
						}
						packageName += '.' + tempInnerExpression.construct.identifierToken.data;
						name += '.' + tempInnerExpression.construct.identifierToken.data;
						lastExpression = tempInnerExpression;
					}
					name += '\']';
				}
				if (name == 'super')
				{
					if (_inNamespacedFunction && expression.nextPropertyExpression)
					{
						name = '$$this.$$namespace(' + _inNamespacedFunction + ', $$this, $es4.$$super($$thisp))';
					}
					else
					{
						name = (expression.nextPropertyExpression) ? '$es4.$$super($$thisp)' : 'this';
					}
				}
				if (name == 'this' && !_inClosure)
				{
					name = '$$this';
				}
			}
			else
			{
				if (!expression.construct.expression)
				{
					trace('invalid 37');
				}
				name = translateExpression(expression.construct.expression, 0, toString, construct);
			}
			js += (!pname) ? name : (pname + '.' + name);
			while (expression = expression.nextPropertyExpression)
			{
				if (expression.construct.constructor == Construct.DotConstruct || expression.construct.constructor == Construct.IdentifierConstruct)
				{
					if (expression.construct.constructor == Construct.DotConstruct)
					{
						js += '.';
					}
					js += expression.construct.identifierToken.data;
				}
				else if (expression.construct.constructor == Construct.ArrayAccessorConstruct)
				{
					if (!expression.construct.expression)
					{
						trace('invalid 38');
					}
					js += '[' + translateExpression(expression.construct.expression, 0, toString, construct) + ']';
				}
				else if (expression.construct.constructor == Construct.NamespaceQualifierConstruct)
				{
					namespaceIdentifier = expression.construct.namespaceIdentifier;
					var namespaceObj = namespaceIdentifier.namespaceObj;
					var namespaceString = namespaceObj.normalizedImportID;
					if (namespaceIdentifier.isStatic && !namespaceString)
					{
						namespaceString = namespaceIdentifier.scope.name + '.' + namespaceIdentifier.name;
					}
					else if (!namespaceString)
					{
						namespaceString = (identifier.isPrivate) ? '$$thisp.' + namespaceIdentifier.name : '$$this.' + namespaceIdentifier.name;
					}
					js += '.$$namespace(' + namespaceString + ').' + expression.construct.namespaceIdentifierToken.data;
				}
				else if (expression.construct.constructor == Construct.ParenConstruct)
				{
					if (!expression.construct.expression)
					{
						trace('invalid 39');
					}
					js += '(' + translateExpression(expression.construct.expression, 0, toString, construct) + ')';
				}
				else if (expression.construct.constructor == Construct.AtIdentifierConstruct)
				{
					throw $es4.$$primitive(new Error('E4X is not supported'));
				}
				if (expression.construct.constructor == Construct.FunctionCallConstruct || (expression.nextPropertyExpression && expression.nextPropertyExpression.construct.constructor == Construct.FunctionCallConstruct))
				{
					var functionCallExpression = (expression.construct.constructor == Construct.FunctionCallConstruct) ? expression : expression.nextPropertyExpression;
					if (js == '$es4.$$super($$thisp)')
					{
						js += '.$$z';
					}
					js += '(';
					for (var i = 0; i < functionCallExpression.construct.argumentExpressions.length; i++)
					{
						if (!functionCallExpression.construct.argumentExpressions[i])
						{
							trace('invalid 40');
						}
						js += translateExpression(functionCallExpression.construct.argumentExpressions[i], 0, toString, construct);
						if ((i + 1) < functionCallExpression.construct.argumentExpressions.length)
						{
							js += ', ';
						}
					}
					js += ')';
					if (expression.nextPropertyExpression)
					{
						expression = functionCallExpression;
					}
					continue;
				}
			}
			return js;
		}
;

		function translatePropertyExpressionDynamic($$$$expression, $$$$toString, $$$$setString, $$$$operator, $$$$construct, $$$$doDelete, $$$$doNew) 
		{
			//set default parameter values
			var expression = $$$$expression;
			var toString = $$$$toString;
			var setString = $$$$setString;
			var operator = $$$$operator;
			var construct = $$$$construct;
			var doDelete = (5 > arguments.length - 1) ? null : $$$$doDelete;
			var doNew = (6 > arguments.length - 1) ? null : $$$$doNew;

			var js = '';
			if (expression.constructor == Construct.DeleteExpression)
			{
				return translatePropertyExpressionDynamic(expression.expression, toString, setString, operator, construct, true, doNew);
			}
			if (expression.constructor == Construct.NewExpression)
			{
				return translatePropertyExpressionDynamic(expression.expression, toString, setString, operator, construct, doDelete, true);
			}
			if (!expression.construct)
			{
				throw $es4.$$primitive(new Error('invalid expression passed to translatePropertyExpression: ' + expression.constructor));
			}
			var identifier;
			var namespaceIdentifier;
			switch (expression.construct.constructor)
			{
				case Construct.SuperConstruct:
				case Construct.ThisConstruct:
				case Construct.IdentifierConstruct:
					identifier = expression.construct.identifier;
					break;
				case Construct.ParenConstruct:
				case Construct.ArrayConstruct:
				case Construct.ObjectConstruct:
					break;
				case Construct.NamespaceQualifierConstruct:
					namespaceIdentifier = expression.construct.namespaceIdentifier;
					identifier = expression.construct.identifier;
					break;
				default:
					throw $es4.$$primitive(new Error('unknown inner property expression: ' + expression.construct.constructor));
			}
			var pname;
			var name;
			var isUseNamespace = false;
			if (identifier && !namespaceIdentifier && (identifier.isProperty || identifier.isMethod) && !identifier.isImport && identifier.namespaceObj.isCustom)
			{
				isUseNamespace = namespaceIdentifier = identifier.namespaceObj.identifier;
			}
			if (identifier && namespaceIdentifier)
			{
				var pname = (namespaceIdentifier.isStatic) ? namespaceIdentifier.scope.name : '$$this';
				var namespaceObj = namespaceIdentifier.namespaceObj;
				var namespaceString = namespaceObj.normalizedImportID;
				if (namespaceIdentifier.isStatic && !namespaceString)
				{
					namespaceString = namespaceIdentifier.scope.name + '.' + namespaceIdentifier.name;
				}
				else if (!namespaceString)
				{
					namespaceString = (namespaceIdentifier.namespaceObj && namespaceIdentifier.namespaceObj.isPrivate ? '$$thisp.' : '$$this.') + namespaceIdentifier.name;
				}
				if (isUseNamespace)
				{
					pname += '.$$namespace(' + namespaceString + ')';
				}
				name = identifier.name;
			}
			else if (identifier)
			{
				name = identifier.name;
				if (identifier.isStatic && !identifier.isImport && !identifier.isNative)
				{
					pname = identifier.scope.name;
				}
				else if (identifier.isPrivate && !identifier.isImport)
				{
					pname = '$$thisp';
				}
				else if ((identifier.isProperty || identifier.isMethod) && !identifier.isImport)
				{
					pname = '$$this';
				}
				else if (identifier.isPackage)
				{
					name = '$es4.$$[\'' + identifier.name;
					var packageName = identifier.name;
					var tempInnerExpression = expression;
					var lastExpression = tempInnerExpression;
					while (tempInnerExpression = tempInnerExpression.nextPropertyExpression)
					{
						if (_rootConstructs[packageName + '.' + tempInnerExpression.construct.identifierToken.data])
						{
							expression = lastExpression;
							break;
						}
						packageName += '.' + tempInnerExpression.construct.identifierToken.data;
						name += '.' + tempInnerExpression.construct.identifierToken.data;
						lastExpression = tempInnerExpression;
					}
					name += '\']';
				}
				if (name == 'super')
				{
					if (_inNamespacedFunction && expression.nextPropertyExpression)
					{
						name = '$$this.$$namespace(' + _inNamespacedFunction + ', $$this, $es4.$$super($$thisp))';
					}
					else
					{
						name = (expression.nextPropertyExpression) ? '$es4.$$super($$thisp)' : 'this';
					}
				}
				if (name == 'this' && !_inClosure)
				{
					name = '$$this';
				}
			}
			else
			{
				name = translateExpression(expression.construct.expression, 0, toString, construct);
			}
			var state = {doAssignment:setString != null, doDelete:doDelete, doNew:doNew, doPostfix:setString == '\'postfix\'', doPrefix:setString == '\'prefix\''};
			var propListCount = (pname) ? 2 : 1;
			var accessString = '$es4.$$get';
			if (pname)
			{
				if (_inStaticFunction)
				{
					js += accessString + '(' + pname + ', null, null';
				}
				else
				{
					js += accessString + '(' + pname + ', $$this, $$thisp';
				}
			}
			else
			{
				expression = expression.nextPropertyExpression;
				js += name;
			}
			var lastAccessTypeWasArrayAccessor = false;
			var closed = false;
			while (expression)
			{
				var expressionConstruct = expression.construct;
				var expressionConstructor = expressionConstruct.constructor;
				if (expressionConstructor == Construct.DotConstruct || expressionConstructor == Construct.IdentifierConstruct || expressionConstructor == Construct.ArrayAccessorConstruct || expressionConstructor == Construct.NamespaceQualifierConstruct || expression.construct.constructor == Construct.AtIdentifierConstruct)
				{
					propListCount++;
					if (!pname || closed)
					{
						if (_inStaticFunction)
						{
							js = accessString + '(' + js + ', null, null';
						}
						else
						{
							js = accessString + '(' + js + ', $$this, $$thisp';
						}
						closed = false;
						pname = js;
					}
				}
				if (expressionConstructor == Construct.DotConstruct || expressionConstructor == Construct.IdentifierConstruct)
				{
					js += ', \'' + expressionConstruct.identifierToken.data + '\'';
					lastAccessTypeWasArrayAccessor = false;
				}
				else if (expressionConstructor == Construct.ArrayAccessorConstruct)
				{
					js += ', ' + translateExpression(expression.construct.expression, 0, toString, construct);
					lastAccessTypeWasArrayAccessor = true;
				}
				else if (expressionConstructor == Construct.NamespaceQualifierConstruct)
				{
					namespaceIdentifier = expression.construct.namespaceIdentifier;
					var namespaceObj = namespaceIdentifier.namespaceObj;
					var namespaceString = namespaceObj.normalizedImportID;
					if (namespaceIdentifier.isStatic && !namespaceString)
					{
						namespaceString = namespaceIdentifier.scope.name + '.' + namespaceIdentifier.name;
					}
					else if (!namespaceString)
					{
						namespaceString = (identifier.isPrivate) ? '$$thisp.' + namespaceIdentifier.name : '$$this.' + namespaceIdentifier.name;
					}
					if (_inStaticFunction)
					{
						js = accessString + '(' + js + ').$$namespace(' + namespaceString + '), null, null, \'' + expressionConstruct.namespaceIdentifierToken.data + '\'';
					}
					else
					{
						js = accessString + '(' + js + ').$$namespace(' + namespaceString + '), $$this, $$thisp, \'' + expressionConstruct.namespaceIdentifierToken.data + '\'';
					}
					propListCount = 2;
				}
				else if (expression.construct.constructor == Construct.ParenConstruct)
				{
					throw $es4.$$primitive(new Error('check translator.js for this error.'));
				}
				else if (expression.construct.constructor == Construct.AtIdentifierConstruct)
				{
					js += ', \'$$attributes\'';
					lastAccessTypeWasArrayAccessor = false;
				}
				if (expression.construct.constructor == Construct.FunctionCallConstruct || (expression.nextPropertyExpression && expression.nextPropertyExpression.construct.constructor == Construct.FunctionCallConstruct))
				{
					var functionCallExpression = (expression.construct.constructor == Construct.FunctionCallConstruct) ? expression : expression.nextPropertyExpression;
					if (js == '$es4.$$super($$thisp)')
					{
						js += '.$$z';
					}
					var start = null;
					if (propListCount == 1)
					{
						if (state.doNew)
						{
							if (js != name)
							{
								js = '(' + js + ')';
							}
							if (functionCallExpression.construct.argumentExpressions.length)
							{
								js = '$es4.$$primitive(new ' + js + '(';
							}
							else
							{
								js = '$es4.$$primitive(new ' + js + '(';
							}
						}
						else
						{
							js += '(';
						}
					}
					else
					{
						if (state.doNew)
						{
							if (js != name)
							{
								js = '(' + js + ')';
							}
							js = '$es4.$$primitive(new ' + js + ')(';
						}
						else
						{
							if (!lastAccessTypeWasArrayAccessor)
							{
								start = js.substring(10);
								js = '$es4.$$call' + start;
								if (functionCallExpression.construct.argumentExpressions.length)
								{
									js += ', [';
								}
							}
							else
							{
								js += ')(';
							}
						}
						closed = true;
						propListCount = 2;
					}
					for (var i = 0; i < functionCallExpression.construct.argumentExpressions.length; i++)
					{
						js += translateExpression(functionCallExpression.construct.argumentExpressions[i], 0, toString, construct);
						if ((i + 1) < functionCallExpression.construct.argumentExpressions.length)
						{
							js += ', ';
						}
					}
					if (state.doNew)
					{
						js += ')';
					}
					state.doNew = false;
					if (start && functionCallExpression.construct.argumentExpressions.length)
					{
						js += '])';
					}
					else if (start)
					{
						js += ', $es4.$$EMPTY_ARRAY)';
					}
					else
					{
						js += ')';
					}
					if (expression.nextPropertyExpression)
					{
						expression = functionCallExpression;
					}
				}
				expression = expression.nextPropertyExpression;
			}
			if (!pname)
			{
				if (!state.doPostfix && !state.doPrefix)
				{
					if (state.doAssignment && operator == '||=' || operator == '&&=')
					{
						js += ' = ' + js + ((operator == '&&=') ? ' && (' : ' || (') + setString + ')';
					}
					else if (state.doAssignment)
					{
						js += ' ' + operator + ' ' + setString;
					}
				}
				else if (state.doPrefix)
				{
					js = operator + js;
				}
				else if (state.doPostfix)
				{
					js += operator;
				}
				if (state.doDelete)
				{
					js = 'delete ' + js;
				}
				if (state.doNew)
				{
					if (js != name)
					{
						js = '(' + js + ')';
					}
					js = '$es4.$$primitive(new ' + js + '())';
				}
			}
			else
			{
				if (state.doAssignment)
				{
					js = '$es4.$$set' + js.slice(10);
					js += ', ' + setString + ', \'' + operator + '\'';
				}
				else if (state.doDelete)
				{
					js = '$es4.$$delete' + js.slice(10);
				}
				if (!closed)
				{
					js += ')';
				}
			}
			return js;
		}
;

		function isCoerceRequired($$$$statementOrExpression, $$$$typeName, $$$$valueJS) 
		{
			//set default parameter values
			var statementOrExpression = $$$$statementOrExpression;
			var typeName = $$$$typeName;
			var valueJS = $$$$valueJS;

			if (!statementOrExpression.coerce)
			{
				return false;
			}
			switch (typeName)
			{
				case 'uint':
					if (Number(valueJS) == (valueJS >>> 0))
					{
						return false;
					}
					break;
				case 'int':
					if (Number(valueJS) == (valueJS >> 0))
					{
						return false;
					}
					break;
			}
			return true;
		}
;

		function print($$$$string, $$$$tabs, $$$$newlines, $$$$preNewLines) 
		{
			//set default parameter values
			var string = $$$$string;
			var tabs = $$$$tabs;
			var newlines = $$$$newlines;
			var preNewLines = (3 > arguments.length - 1) ? null : $$$$preNewLines;

			if (tabs)
			{
				for (var i = 0; i < tabs; i++)
				{
					string = '\t' + string;
				}
			}
			if (newlines)
			{
				for (var i = 0; i < newlines; i++)
				{
					string += '\n';
				}
			}
			if (preNewLines)
			{
				for (var i = 0; i < preNewLines; i++)
				{
					string = '\n' + string;
				}
			}
			return string;
		}
;
	});
	function TranslatorProto()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof TranslatorProto) || $$this.$$TranslatorProto !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], TranslatorProto) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			TranslatorProto.$$construct($$this, $$args);
		}
	}

	//construct
	TranslatorProto.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (TranslatorProto.$$cinit !== undefined) TranslatorProto.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$TranslatorProto', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		TranslatorProto.$$iinit($$this);

		//call constructor
		if (args !== undefined) TranslatorProto.$$constructor.apply($$this, args);
	});

	//initializer
	TranslatorProto.$$iinit = (function ($$this)
	{
	});

	//constructor
	TranslatorProto.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(TranslatorProto, null, 'sweetrush.core::TranslatorProto');
})();
//sweetrush.core.TranslatorProto


//sweetrush.core.TranslatorPrototype
$es4.$$package('sweetrush.core').TranslatorPrototype = (function ()
{
	//imports
	var Construct;
	var Token;
	var AS3_JS;
	var Analyzer;
	var Lexer;
	var Parser;
	var TranslatorProto;
	var TranslatorPrototype;
	var Construct;
	var Token;
	var Base64Util;
	var FileUtil;
	var JsonUtil;
	var SwcUtil;

	//class pre initializer
	TranslatorPrototype.$$sinit = (function ()
	{
		TranslatorPrototype.$$sinit = undefined;

		//initialize imports
		Construct = $es4.$$['sweetrush.obj'].Construct;
		Token = $es4.$$['sweetrush.obj'].Token;
		AS3_JS = $es4.$$['sweetrush'].AS3_JS;
		Analyzer = $es4.$$['sweetrush.core'].Analyzer;
		Lexer = $es4.$$['sweetrush.core'].Lexer;
		Parser = $es4.$$['sweetrush.core'].Parser;
		TranslatorProto = $es4.$$['sweetrush.core'].TranslatorProto;
		Base64Util = $es4.$$['sweetrush.utils'].Base64Util;
		FileUtil = $es4.$$['sweetrush.utils'].FileUtil;
		JsonUtil = $es4.$$['sweetrush.utils'].JsonUtil;
		SwcUtil = $es4.$$['sweetrush.utils'].SwcUtil;

		//set prototype and constructor
		TranslatorPrototype.prototype = Object.create(Object.prototype);
		Object.defineProperty(TranslatorPrototype.prototype, "constructor", { value: TranslatorPrototype, enumerable: false });

		//hold private values
		Object.defineProperty(TranslatorPrototype.prototype, '$$v', {value:{}});
	});

	//class initializer
	TranslatorPrototype.$$cinit = (function ()
	{
		TranslatorPrototype.$$cinit = undefined;
	});

	//public static method
	TranslatorPrototype.translate = (function ($$$$rootConstruct, $$$$rootConstructs, $$$$dynamicPropertyAccess, $$$$release, $$$$fastPropertyAccess)
	{
		if (TranslatorPrototype.$$cinit !== undefined) TranslatorPrototype.$$cinit();

		//set default parameter values
		var rootConstruct = $$$$rootConstruct;
		var rootConstructs = $$$$rootConstructs;
		var dynamicPropertyAccess = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$dynamicPropertyAccess, Boolean);
		var release = (3 > arguments.length - 1) ? false : $es4.$$coerce($$$$release, Boolean);
		var fastPropertyAccess = (4 > arguments.length - 1) ? false : $es4.$$coerce($$$$fastPropertyAccess, Boolean);

		var _rootConstruct = rootConstruct;
		var _rootConstructs = rootConstructs;
		var _indent = -1;
		var _count = -1;
		var _level = 0;
		var _fastPropertyAccess = fastPropertyAccess = false;
		var _dynamicPropertyAccess = false;
		var _inClosure = false;
		var _inNamespacedFunction = false;
		var _inStaticFunction = false;
		var _inIfStatement = 0;
		var _importNameConflicts = {};
		var _extendsNameConflict = false;

		function upLevel() 
		{
			_indent++;
			_level++;
			return _level;
		}
;

		function downLevel() 
		{
			_indent--;
			_level--;
			return _level;
		}
;

		function lookupConstructInRootConstruct($$$$rootConstruct, $$$$object) 
		{
			//set default parameter values
			var rootConstruct = $$$$rootConstruct;
			var object = $$$$object;

			if (!rootConstruct || !object)
			{
				throw $es4.$$primitive(new Error('cannot lookup empty rootConstruct/object: ' + rootConstruct + ', ' + object));
			}
			else if ($es4.$$is(object, String))
			{
				for (var i = 0; i < rootConstruct.classConstructs.length; i++)
				{
					if (rootConstruct.classConstructs[i].identifierToken.data == object)
					{
						return rootConstruct.classConstructs[i];
					}
				}
				for (var i = 0; i < rootConstruct.interfaceConstructs.length; i++)
				{
					if (rootConstruct.interfaceConstructs[i].identifierToken.data == object)
					{
						return rootConstruct.interfaceConstructs[i];
					}
				}
				if (rootConstruct.packageConstruct.classConstruct)
				{
					return rootConstruct.packageConstruct.classConstruct;
				}
				if (rootConstruct.packageConstruct.interfaceConstruct)
				{
					return rootConstruct.packageConstruct.interfaceConstruct;
				}
				if (rootConstruct.packageConstruct.propertyConstruct)
				{
					return rootConstruct.packageConstruct.propertyConstruct;
				}
				if (rootConstruct.packageConstruct.methodConstruct)
				{
					return rootConstruct.packageConstruct.methodConstruct;
				}
				throw $es4.$$primitive(new Error('could not lookup construct in construct: ' + object));
			}
			if (object.constructor == Construct.NameConstruct)
			{
				return lookupConstructInRootConstruct(rootConstruct, Construct.nameConstructToString(object));
			}
			else if (object.constructor == Construct.ImportConstruct)
			{
				return lookupConstructInRootConstruct(rootConstruct, Construct.nameConstructToString(object.nameConstruct));
			}
		}
;

		var packageConstruct = rootConstruct.packageConstruct;
		var js = print('$es4.$$package(\'' + (packageConstruct.nameConstruct ? Construct.nameConstructToString(packageConstruct.nameConstruct) : '') + '\').', _indent, 0);
		if (packageConstruct.classConstruct)
		{
			if (packageConstruct.classConstruct.UNIMPLEMENTEDToken)
			{
				if (release)
				{
					js += packageConstruct.classConstruct.identifierToken.data + ' = null;\n';
					return js;
				}
				js = (packageConstruct.nameConstruct) ? '$es4.$$package(\'' + Construct.nameConstructToString(packageConstruct.nameConstruct) + '\')' : 'global';
				js += '.' + packageConstruct.classConstruct.identifierToken.data;
				js += ' = function () { throw new Error(\'Use of unimplemented class: ' + packageConstruct.classConstruct.identifierToken.data + '\'); }';
				js += '\n';
				return js;
			}
			js += print(translateClassConstruct(packageConstruct.classConstruct), _indent, 0);
		}
		js += (packageConstruct.interfaceConstruct) ? print(translateInterfaceConstruct(packageConstruct.interfaceConstruct), _indent, 0) : '';
		js += (packageConstruct.propertyConstruct) ? print(translatePropertyConstruct(packageConstruct.propertyConstruct), _indent, 0) : '';
		if (packageConstruct.methodConstruct)
		{
			if (packageConstruct.methodConstruct.UNIMPLEMENTEDToken)
			{
				if (release)
				{
					js += packageConstruct.methodConstruct.identifierToken.data + ' = null;\n';
					return js;
				}
				js = (packageConstruct.nameConstruct) ? '$es4.$$package(\'' + Construct.nameConstructToString(packageConstruct.nameConstruct) + '\')' : 'global';
				js += '.' + packageConstruct.methodConstruct.identifierToken.data;
				js += ' = function () { throw new Error(\'Use of unimplemented function: ' + packageConstruct.methodConstruct.identifierToken.data + '\'); }';
				js += '\n';
				return js;
			}
			_inStaticFunction = true;
			js += print(translateFunctionConstruct(packageConstruct.methodConstruct), _indent, 0);
		}
		return js;

		function getTranslatedTypeName($$$$type) 
		{
			//set default parameter values
			var type = $$$$type;

			if (type.name == '*' || type.name == 'void')
			{
				return '';
			}
			if (_importNameConflicts[type.name])
			{
				var fullyQualifiedName = type.fullyQualifiedName;
				var parts = fullyQualifiedName.split('.');
				var name = parts.pop();
				return '$es4.$$[\'' + parts.join('.') + '\'].' + name;
			}
			return type.name;
		}
;

		function translateInterfaceConstruct($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			upLevel();
			var js = print(construct.identifierToken.data + ' = (function ()', 0, 1);
			js += print('{', _indent, 1);
			js += print('function ' + construct.identifierToken.data + '()', _indent + 1, 1);
			js += print('{', _indent + 1, 1);
			js += print('//handle cast', _indent + 2, 1);
			js += print('return $es4.$$as(arguments[0], ' + construct.identifierToken.data + ');', _indent + 2, 1);
			js += print('}', _indent + 1, 1);
			var comma = false;
			var innerJS = '';
			if (construct.extendsNameConstructs.length)
			{
				innerJS += 'IMPLEMENTS:[';
				for (var i = 0; i < construct.extendsNameConstructs.length; i++)
				{
					if (comma)
					{
						innerJS += ', ';
					}
					var type = construct.extendsNameConstructs[i].type;
					var innerConstruct = lookupConstructInRootConstruct(construct.rootConstruct, construct.extendsNameConstructs[i]);
					if (innerConstruct.isInternal)
					{
						innerJS += comma = type.fullyQualifiedName;
					}
					else
					{
						innerJS += comma = '\'' + type.fullyQualifiedName + '\'';
					}
				}
				innerJS += comma = ']';
			}
			if (!construct.isInternal)
			{
				if (_rootConstruct.classConstructs.length)
				{
					if (comma)
					{
						innerJS += ', ';
					}
					innerJS += 'CLASSES:[';
					comma = false;
					for (var i = 0; i < _rootConstruct.classConstructs.length; i++)
					{
						if (comma)
						{
							innerJS += ', ';
						}
						innerJS += comma = _rootConstruct.classConstructs[i].identifierToken.data;
					}
					innerJS += comma = ']';
				}
				if (_rootConstruct.interfaceConstructs.length)
				{
					if (comma)
					{
						innerJS += ', ';
					}
					innerJS += 'INTERFACES:[';
					comma = false;
					for (var i = 0; i < _rootConstruct.interfaceConstructs.length; i++)
					{
						if (comma)
						{
							innerJS += ', ';
						}
						innerJS += comma = _rootConstruct.interfaceConstructs[i].identifierToken.data;
					}
					innerJS += comma = ']';
				}
			}
			var packageName = construct.packageName;
			var fullyQualifiedName = (packageName) ? packageName + '::' + construct.identifierToken.data : construct.identifierToken.data;
			if (innerJS)
			{
				js += print('return $es4.$$interface(' + construct.identifierToken.data + ', ', _indent + 1, 0, 1);
				js += '{' + innerJS + '}';
				js += print(', \'' + fullyQualifiedName + '\');', 0, 1);
			}
			else
			{
				js += print('return $es4.$$interface(' + construct.identifierToken.data + ', null, ', _indent + 1, 0);
				js += print('\'' + fullyQualifiedName + '\');', 0, 1);
			}
			js += print('})();', _indent, 1);
			downLevel();
			return js;
		}
;

		function translatePropertyConstruct($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			return print(construct.identifierToken.data + ' = $es4.$$namespace(' + translateExpression(construct.valueExpression, _indent, false, construct) + ', true);', 0, 1);
		}
;

		function translateFunctionConstruct($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			upLevel();
			var importConstructs = _rootConstruct.packageConstruct.importConstructs;
			var js = '';
			var innerJS;
			var cr = false;
			var accessor = construct.getToken || construct.setToken;
			js += print(construct.identifierToken.data + ' = (function ()', 0, 1);
			js += print('{', _indent, 1);
			js += print('var $$this = ' + construct.identifierToken.data + ', $$thisp = ' + construct.identifierToken.data + ';', _indent + 1, 1);
			js += (innerJS = translateImports(construct)) ? cr = innerJS : '';
			js += (innerJS = translateClassInitializer(construct)) ? cr = print(innerJS, 0, 0, (cr) ? 1 : 0) : '';
			js += (innerJS = translateClassFunction(construct)) ? print(innerJS, 0, 0, 1) : '';
			if (accessor)
			{
				js += print(construct.identifierToken.data + '.$$pcinit = ' + construct.identifierToken.data + ';', _indent + 1, 1, 1);
				js += print('return ' + construct.identifierToken.data + ';', _indent + 1, 1, 0);
			}
			else
			{
				js += print('return $es4.$$function (' + construct.identifierToken.data + ');', _indent + 1, 1, 1);
			}
			js += print('})();', _indent, 1);
			downLevel();
			return js;

			function translateImports($$$$construct) 
			{
				//set default parameter values
				var construct = $$$$construct;

				var js = '';
				if (importConstructs.length)
				{
					js += print('//imports', _indent + 1, 1);
				}
				for (var i = 0; i < importConstructs.length; i++)
				{
					js += print('var ' + importConstructs[i].nameConstruct.identifierTokens[importConstructs[i].nameConstruct.identifierTokens.length - 1].data + ';', _indent + 1, 1);
				}
				return js;
			}
;

			function translateClassInitializer($$$$construct) 
			{
				//set default parameter values
				var construct = $$$$construct;

				_inStaticFunction = true;
				var js = print('//function initializer', _indent + 1, 1);
				js += print(construct.identifierToken.data + '.$$cinit = (function ()', _indent + 1, 1);
				js += print('{', _indent + 1, 1);
				js += print(construct.identifierToken.data + '.$$cinit = undefined;', _indent + 2, 1);
				var importConstructs = (construct.isInternal) ? _rootConstruct.importConstructs : _rootConstruct.packageConstruct.importConstructs;
				if (importConstructs.length)
				{
					js += print('//initialize imports', _indent + 2, 1, 1);
				}
				var importNames = {};
				importNames[construct.identifierToken.data] = true;
				for (var i = 0; i < importConstructs.length; i++)
				{
					var name = importConstructs[i].nameConstruct.identifierTokens[importConstructs[i].nameConstruct.identifierTokens.length - 1].data;
					var packageName = '';
					if (importConstructs[i].nameConstruct.identifierTokens.length > 1)
					{
						var fullyQualifiedName = Construct.nameConstructToString(importConstructs[i].nameConstruct);
						fullyQualifiedName = fullyQualifiedName.split('.');
						fullyQualifiedName.pop();
						packageName = fullyQualifiedName.join('.');
					}
					if (importNames[name])
					{
						_importNameConflicts[name] = true;
						continue;
					}
					else
					{
						importNames[name] = true;
					}
					js += print(name + ' = $es4.$$[\'' + packageName + '\'].' + name + ';', _indent + 2, 1);
				}
				js += print('});', _indent + 1, 1);
				_inStaticFunction = false;
				return js;
			}
;

			function translateClassFunction($$$$construct) 
			{
				//set default parameter values
				var construct = $$$$construct;

				upLevel();
				var js = '';
				if (accessor)
				{
					var name = construct.getToken ? 'getter' : 'setter';
					js += print('function ' + construct.identifierToken.data + '() { $es4.$$' + name + '(\'' + construct.identifierToken.data + '\', ' + '$es4.$$package(\'' + (construct.packageConstruct.nameConstruct ? Construct.nameConstructToString(construct.packageConstruct.nameConstruct) : '') + '\'), (function ()', _indent, 1);
				}
				else
				{
					js += print('function ' + construct.identifierToken.data + '(', _indent, 0);
				}
				js += translateParameters(construct, construct);
				if (!accessor)
				{
					js += print(')', 0, (_indent) ? 1 : 0);
				}
				js += print('{', _indent, (_indent) ? 1 : 0);
				js += print('//initialize function if not initialized', _indent + 1, 1);
				js += print('if (' + construct.identifierToken.data + '.$$cinit !== undefined) ' + construct.identifierToken.data + '.$$cinit();', _indent + 1, 2);
				js += translateDefaultParameterValues(construct, construct);
				if (accessor)
				{
					js += print('//change reference', _indent + 1, 1, 1);
					js += print(construct.identifierToken.data + ' = this;', _indent + 1, construct.bodyStatements.length ? 2 : 1);
				}
				if (construct.isJavaScript)
				{
					js += construct.javaScriptString;
				}
				else
				{
					js += translateStatements(construct.bodyStatements, _indent + 1, construct);
				}
				if (accessor)
				{
					js += print('})', (construct.isJavaScript) ? 0 : _indent, 0);
					js += print(');}', 0, 1);
				}
				else
				{
					js += print('}', 0, 1);
				}
				downLevel();
				return js;
			}
;
		}
;

		function translateClassConstruct($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			var js = '';
			upLevel();
			_extendsNameConflict = construct.extendsNameConflict;
			var innerJS;
			var cr = false;
			js += print(construct.identifierToken.data + ' = (function ()', 0, 1);
			js += print('{', _indent, 1);
			js += (innerJS = translateImports(construct)) ? cr = innerJS : '';
			js += (innerJS = translateNamespaces(construct, true)) ? cr = print(innerJS, 0, 0, (cr) ? 1 : 0) : '';
			js += (innerJS = translateStaticProperties(construct)) ? cr = print(innerJS, 0, 0, (cr) ? 1 : 0) : '';
			js += (innerJS = translateClassPreInitializer(construct)) ? cr = print(innerJS, 0, 0, (cr) ? 1 : 0) : '';
			js += (innerJS = translateClassInitializer(construct)) ? cr = print(innerJS, 0, 0, (cr) ? 1 : 0) : '';
			js += (innerJS = translateStaticMethods(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateStaticAccessors(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateClassFunction(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateConstruct(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateInitializer(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateConstructor(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateInternalClasses(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateInternalInterfaces(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateClassReturnStatement(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += print('})();', _indent, 1);
			downLevel();
			return js;
		}
;

		function translateClassPreInitializer($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			_inStaticFunction = true;
			var js = print('//class pre initializer', _indent + 1, 1);
			js += print(construct.identifierToken.data + '.$$sinit = (function ()', _indent + 1, 1);
			js += print('{', _indent + 1, 1);
			js += print(construct.identifierToken.data + '.$$sinit = undefined;', _indent + 2, 2);
			var importConstructs = (construct.isInternal) ? _rootConstruct.importConstructs : _rootConstruct.packageConstruct.importConstructs;
			if (importConstructs.length)
			{
				js += print('//initialize imports', _indent + 2, 1);
			}
			var found = false;
			var extraCR = 0;
			var importNames = {};
			importNames[construct.identifierToken.data] = true;
			for (var i = 0; i < importConstructs.length; i++)
			{
				found = true;
				var name = importConstructs[i].nameConstruct.identifierTokens[importConstructs[i].nameConstruct.identifierTokens.length - 1].data;
				var packageName = '';
				if (importConstructs[i].nameConstruct.identifierTokens.length > 1)
				{
					var fullyQualifiedName = Construct.nameConstructToString(importConstructs[i].nameConstruct);
					fullyQualifiedName = fullyQualifiedName.split('.');
					fullyQualifiedName.pop();
					packageName = fullyQualifiedName.join('.');
				}
				if (importNames[name])
				{
					_importNameConflicts[name] = true;
					continue;
				}
				else
				{
					importNames[name] = true;
				}
				extraCR = 1;
				js += print(name + ' = $es4.$$[\'' + packageName + '\'].' + name + ';', _indent + 2, 1);
			}
			var className = construct.identifierToken.data;
			var superClassName = 'Object';
			if (construct.extendsNameConstruct)
			{
				superClassName = getTranslatedTypeName(construct.extendsNameConstruct.type);
				js += print('//ensure $$sinit is called on super class', _indent + 2, 1, extraCR);
				js += print('if (' + superClassName + '.$$sinit !== undefined) ' + superClassName + '.$$sinit();', _indent + 2, 1);
			}
			js += print('//set prototype and constructor', _indent + 2, 1, extraCR);
			js += print(className + '.prototype = Object.create(' + superClassName + '.prototype);', _indent + 2, 1);
			js += print('Object.defineProperty(' + className + '.prototype, "constructor", { value: ' + className + ', enumerable: false });', _indent + 2, 2);
			extraCR = 0;
			js += print('//hold private values', _indent + 2, 1);
			js += print('Object.defineProperty(' + className + '.prototype, \'$$v\', {value:{}});', _indent + 2, 1);
			var innerJS;
			js += (innerJS = translateInstanceMethods(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateInstanceAccessors(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateInstanceProperties(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += print('});', _indent + 1, 1);
			_inStaticFunction = false;
			return js;
		}
;

		function translateClassInitializer($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			_inStaticFunction = true;
			var js = print('//class initializer', _indent + 1, 1);
			js += print(construct.identifierToken.data + '.$$cinit = (function ()', _indent + 1, 1);
			js += print('{', _indent + 1, 1);
			js += print(construct.identifierToken.data + '.$$cinit = undefined;', _indent + 2, 1);
			var found = false;
			for (var i = 0; i < construct.propertyConstructs.length; i++)
			{
				var propertyConstruct = construct.propertyConstructs[i];
				if (!propertyConstruct.staticToken)
				{
					continue;
				}
				if (propertyConstruct.translatedEarlier)
				{
					continue;
				}
				if (!found)
				{
					found = true;
					js += print('//initialize properties', _indent + 2, 1, 1);
				}
				var namespaceObj = propertyConstruct.identifier.namespaceObj;
				var type = getTranslatedTypeName(propertyConstruct.identifier.type);
				js += print('$$j.' + propertyConstruct.identifierToken.data + ' = ', _indent + 2, 0);
				if (type)
				{
					js += '$es4.$$coerce(';
				}
				js += (propertyConstruct.valueExpression) ? translateExpression(propertyConstruct.valueExpression, _indent, false, construct) : 'undefined';
				if (type)
				{
					js += ', ' + type + ')';
				}
				js += print(';', 0, 1);
			}
			if (found)
			{
				js += print('', _indent + 1, 1);
			}
			js += translateStatements(construct.initializerStatements, _indent + 2, construct);
			js += print('});', _indent + 1, 1);
			_inStaticFunction = false;
			return js;
		}
;

		function translateClassFunction($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			var js = '';
			upLevel();
			var js = print('function ' + construct.identifierToken.data + '()', _indent, 1);
			js += print('{', _indent, 1);
			js += print('var $$this;', _indent + 1, 2);
			js += print('//save scope', _indent + 1, 1);
			js += print('if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];', _indent + 1, 1);
			js += print('else', _indent + 1, 1);
			js += print('{', _indent + 1, 1);
			js += print('var $$this = this;', _indent + 2, 2);
			js += print('if (!($$this instanceof ' + construct.identifierToken.data + ') || $$this.$$' + ((construct.packageName && _extendsNameConflict ? construct.packageName : '') + construct.identifierToken.data).split('.').join('') + ' !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], ' + construct.identifierToken.data + ') : $es4.$$throwArgumentError();', _indent + 2, 1);
			js += print('}', _indent + 1, 1);
			js += print('//call construct if no arguments, or argument zero does not equal manual construct', _indent + 1, 1, 1);
			js += print('if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)', _indent + 1, 1);
			js += print('{', _indent + 1, 1);
			js += print('for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];', _indent + 2, 2);
			js += print(construct.identifierToken.data + '.$$construct($$this, $$args);', _indent + 2, 1);
			js += print('}', _indent + 1, 1);
			js += print('}', _indent, 1);
			downLevel();
			return js;
		}
;

		function translateConstruct($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			_inStaticFunction = true;
			var js = print('//construct', _indent + 1, 1);
			js += print(construct.identifierToken.data + '.$$construct = (function ($$this, args)', _indent + 1, 1);
			js += print('{', _indent + 1, 1);
			js += print('//initialize function if not initialized', _indent + 2, 1);
			js += print('if (' + construct.identifierToken.data + '.$$cinit !== undefined) ' + construct.identifierToken.data + '.$$cinit();', _indent + 2, 2);
			js += print('//hold property values, and methods', _indent + 2, 1);
			js += print('Object.defineProperty($$this, \'$$' + ((construct.packageName && _extendsNameConflict ? construct.packageName : '') + construct.identifierToken.data).split('.').join('') + '\', {value:{$$this:$$this, $$p:{}, $$ns:{}}});', _indent + 2, 2);
			upLevel();
			var innerJS;
			innerJS = translateNamespaces(construct, false);
			if (innerJS)
			{
				js += print(innerJS, 0, 0, 1);
			}
			js += translateNamespaceInstanceMethods(construct);
			downLevel();
			var propertyConstructs = construct.instancePropertyConstructs;
			for (var i = 0; i < propertyConstructs.length; i++)
			{
				var propertyConstruct = propertyConstructs[i];
				var namespaceObj = propertyConstruct.identifier.namespaceObj;
				if (!namespaceObj.isPrivate)
				{
					continue;
				}
				js += print('Object.defineProperty($$this.$$' + ((construct.packageName && _extendsNameConflict ? construct.packageName : '') + construct.identifierToken.data).split('.').join('') + ', \'' + propertyConstruct.identifierToken.data + '\', ' + construct.identifierToken.data + '.prototype.$$v.' + propertyConstruct.identifierToken.data + ');', _indent + 2, 1);
			}
			for (var i = 0; i < construct.instanceAccessorConstructs.length; i++)
			{
				var setterMethodConstruct = construct.instanceAccessorConstructs[i].setter;
				var getterMethodConstruct = construct.instanceAccessorConstructs[i].getter;
				var methodConstruct = setterMethodConstruct || getterMethodConstruct;
				var namespaceObj = methodConstruct.identifier.namespaceObj;
				var isPrivate = methodConstruct.namespaceToken.data == 'private';
				if (!isPrivate)
				{
					continue;
				}
				js += print('Object.defineProperty($$this.$$' + ((construct.packageName && _extendsNameConflict ? construct.packageName : '') + construct.identifierToken.data).split('.').join('') + ', \'' + methodConstruct.identifierToken.data + '\', ' + construct.identifierToken.data + '.prototype.$$v.' + methodConstruct.identifierToken.data + ');', _indent + 2, 1);
			}
			js += print(innerJS, 0, 0, 1);
			for (var i = 0; i < construct.instanceMethodConstructs.length; i++)
			{
				var methodConstruct = construct.instanceMethodConstructs[i];
				var namespaceObj = methodConstruct.identifier.namespaceObj;
				if (namespaceObj.isCustom)
				{
					continue;
				}
				if (!methodConstruct.identifier.namespaceObj.isPrivate)
				{
					continue;
				}
				var type = methodConstruct.identifier.type;
				js += print('//' + methodConstruct.identifier.namespaceObj.name + ' instance method', _indent + 2, 1);
				js += print('Object.defineProperty($$this.$$' + ((construct.packageName && _extendsNameConflict ? construct.packageName : '') + construct.identifierToken.data).split('.').join('') + ', \'' + methodConstruct.identifierToken.data + '\', ' + construct.identifierToken.data + '.prototype.$$v.' + methodConstruct.identifierToken.data + ');', _indent + 2, 2);
			}
			if (construct.extendsNameConstruct)
			{
				var superClassName = getTranslatedTypeName(construct.extendsNameConstruct.type);
				js += print('//call construct on super', _indent + 2, 1);
				js += print(superClassName + '.$$construct($$this);', _indent + 2, 2, 0);
			}
			js += print('//initialize properties', _indent + 2, 1);
			js += print(construct.identifierToken.data + '.$$iinit($$this);', _indent + 2, 2, 0);
			js += print('//call constructor', _indent + 2, 1);
			js += print('if (args !== undefined) ' + construct.identifierToken.data + '.$$constructor.apply($$this, args);', _indent + 2, 1, 0);
			js += print('});', _indent + 1, 1);
			_inStaticFunction = false;
			return js;
		}
;

		function translateInitializer($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			_inStaticFunction = true;
			var js = print('//initializer', _indent + 1, 1);
			js += print(construct.identifierToken.data + '.$$iinit = (function ($$this)', _indent + 1, 1);
			js += print('{', _indent + 1, 1);
			var found = false;
			for (var i = 0; i < construct.instancePropertyConstructs.length; i++)
			{
				var propertyConstruct = construct.instancePropertyConstructs[i];
				if (!found)
				{
					found = true;
					js += print('//initialize properties', _indent + 2, 1);
				}
				var namespaceObj = propertyConstruct.identifier.namespaceObj;
				var type = getTranslatedTypeName(propertyConstruct.identifier.type);
				if (!namespaceObj.isPrivate)
				{
					js += print('$$this.$$' + ((construct.packageName && _extendsNameConflict ? construct.packageName : '') + construct.identifierToken.data).split('.').join('') + '.' + propertyConstruct.identifierToken.data + ' = ', _indent + 2, 0);
				}
				else
				{
					js += print('$$this.$$' + ((construct.packageName && _extendsNameConflict ? construct.packageName : '') + construct.identifierToken.data).split('.').join('') + '.$$p.' + propertyConstruct.identifierToken.data + ' = ', _indent + 2, 0);
				}
				if (type)
				{
					js += '$es4.$$coerce(';
				}
				js += (propertyConstruct.valueExpression) ? translateExpression(propertyConstruct.valueExpression, _indent, false, construct) : 'undefined';
				if (type)
				{
					js += ', ' + type + ')';
				}
				js += print(';', 0, 1);
			}
			if (found)
			{
				js += print('', _indent + 1, 1);
			}
			if (construct.extendsNameConstruct)
			{
				var superClassName = getTranslatedTypeName(construct.extendsNameConstruct.type);
				js += print('//call iinit on super', _indent + 2, 1);
				js += print(superClassName + '.$$iinit($$this);', _indent + 2, 1, 0);
			}
			js += print('});', _indent + 1, 1);
			_inStaticFunction = false;
			return js;
		}
;

		function translateConstructor($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			upLevel();
			var methodConstruct = construct.constructorMethodConstruct;
			var js = print('//constructor', _indent, 1);
			js += print(construct.identifierToken.data + '.$$constructor = (function (', _indent, 0);
			if (methodConstruct)
			{
				js += translateParameters(methodConstruct, construct);
			}
			js += print(')', 0, 1);
			js += print('{', _indent, 1);
			js += print('var $$this = this;', _indent + 1, 1, 0);
			if (methodConstruct)
			{
				js += translateDefaultParameterValues(methodConstruct, construct);
			}
			var carriage = false;
			if (construct.extendsNameConstruct && (!methodConstruct || (methodConstruct && !methodConstruct.callsSuper)))
			{
				var superClassName = getTranslatedTypeName(construct.extendsNameConstruct.type);
				js += print(superClassName + '.$$constructor.call($$this);', _indent + 1, 1, 1);
				carriage = true;
			}
			if (methodConstruct)
			{
				var innerJS = print(translateStatements(methodConstruct.bodyStatements, _indent + 1, construct), 0, 0);
				if (innerJS && carriage)
				{
					js += print('', 0, 1);
				}
				if (innerJS)
				{
					js += innerJS;
				}
			}
			js += print('});', _indent, 1);
			downLevel();
			return js;
		}
;

		function translateInternalClasses($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			if (construct.isInternal)
			{
				return '';
			}
			var js = '';
			for (var i = 0; i < _rootConstruct.classConstructs.length; i++)
			{
				if (js)
				{
					js += print('', 0, 1);
				}
				js += print('////////////////INTERNAL CLASS////////////////', _indent + 1, 1);
				js += print('var ' + translateClassConstruct(_rootConstruct.classConstructs[i]), 1, 0);
			}
			return js;
		}
;

		function translateInternalInterfaces($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			if (construct.isInternal)
			{
				return '';
			}
			var js = '';
			for (var i = 0; i < _rootConstruct.interfaceConstructs.length; i++)
			{
				if (js)
				{
					js += print('', 0, 1);
				}
				js += print('////////////////INTERNAL INTERFACE////////////////', _indent + 1, 1);
				js += print('var ' + translateInterfaceConstruct(_rootConstruct.interfaceConstructs[i]), 1, 0);
			}
			return js;
		}
;

		function translateClassReturnStatement($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			var js = print('return $es4.$$class(' + construct.identifierToken.data + ', ', _indent + 1, 0);
			var comma = false;
			var innerJS = '';
			if (construct.extendsNameConstruct)
			{
				var type = construct.extendsNameConstruct.type;
				var innerConstruct = lookupConstructInRootConstruct(construct.rootConstruct, construct.extendsNameConstruct);
				if (innerConstruct.isInternal)
				{
					innerJS += comma = 'EXTENDS:' + type.fullyQualifiedName;
				}
				else
				{
					innerJS += comma = 'EXTENDS:\'' + type.fullyQualifiedName + '\'';
				}
			}
			if (construct.implementsNameConstructs.length)
			{
				if (comma)
				{
					innerJS += ', ';
				}
				innerJS += 'IMPLEMENTS:[';
				comma = false;
				for (var i = 0; i < construct.implementsNameConstructs.length; i++)
				{
					if (comma)
					{
						innerJS += ', ';
					}
					var type = construct.implementsNameConstructs[i].type;
					var innerConstruct = lookupConstructInRootConstruct(construct.rootConstruct, construct.implementsNameConstructs[i]);
					if (innerConstruct.isInternal)
					{
						innerJS += comma = type.fullyQualifiedName;
					}
					else
					{
						innerJS += comma = '\'' + type.fullyQualifiedName + '\'';
					}
				}
				innerJS += comma = ']';
			}
			if (!construct.isInternal)
			{
				if (_rootConstruct.classConstructs.length)
				{
					if (comma)
					{
						innerJS += ', ';
					}
					innerJS += 'CLASSES:[';
					comma = false;
					for (var i = 0; i < _rootConstruct.classConstructs.length; i++)
					{
						if (comma)
						{
							innerJS += ', ';
						}
						innerJS += comma = _rootConstruct.classConstructs[i].identifierToken.data;
					}
					innerJS += comma = ']';
				}
				if (_rootConstruct.interfaceConstructs.length)
				{
					if (comma)
					{
						innerJS += ', ';
					}
					innerJS += 'INTERFACES:[';
					comma = false;
					for (var i = 0; i < _rootConstruct.interfaceConstructs.length; i++)
					{
						if (comma)
						{
							innerJS += ', ';
						}
						innerJS += comma = _rootConstruct.interfaceConstructs[i].identifierToken.data;
					}
					innerJS += comma = ']';
				}
			}
			var packageName = construct.packageName;
			var fullyQualifiedName = (packageName) ? packageName + '::' + construct.identifierToken.data : construct.identifierToken.data;
			if (innerJS)
			{
				js += '{' + innerJS + '}';
				js += print(', \'' + fullyQualifiedName + '\');', 0, 1);
			}
			else
			{
				js = print('return $es4.$$class(' + construct.identifierToken.data + ', null, ', _indent + 1, 0);
				js += print('\'' + fullyQualifiedName + '\');', 0, 1);
			}
			return js;
		}
;

		function translateImports($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			var js = '';
			var importConstructs = (construct.isInternal) ? _rootConstruct.importConstructs : _rootConstruct.packageConstruct.importConstructs;
			if (importConstructs.length)
			{
				js += print('//imports', _indent + 1, 1);
			}
			for (var i = 0; i < importConstructs.length; i++)
			{
				js += print('var ' + importConstructs[i].nameConstruct.identifierTokens[importConstructs[i].nameConstruct.identifierTokens.length - 1].data + ';', _indent + 1, 1);
			}
			return js;
		}
;

		function translateNamespaces($$$$construct, $$$$isClassLevel) 
		{
			//set default parameter values
			var construct = $$$$construct;
			var isClassLevel = $$$$isClassLevel;

			var js = '';
			var propertyConstructs = construct.namespacePropertyConstructs;
			var counter = 0;
			for (var i = 0; i < propertyConstructs.length; i++)
			{
				var propertyConstruct = propertyConstructs[i];
				if (!js)
				{
					js += print('//namespaces', _indent + 1, 1);
				}
				js += print('$es4.$$' + propertyConstruct.identifier.namespaceObj.name + '_namespace(' + (propertyConstruct.valueExpression ? translateExpression(propertyConstruct.valueExpression, _indent, false, construct) : '\'$$uniqueNS_' + (counter++) + '_' + construct.identifierToken.data + '\'') + ', ' + ((isClassLevel) ? construct.identifierToken.data : (propertyConstruct.namespaceToken.data == 'private' ? ('$$this.$$' + ((construct.packageName && _extendsNameConflict ? construct.packageName : '') + construct.identifierToken.data).split('.').join('') + '.$$ns') : '$$this')) + ', \'' + propertyConstruct.identifierToken.data + '\');', _indent + 1, 1);
			}
			return js;
		}
;

		function translateStaticProperties($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			var js = '';
			var propertyConstructs = construct.staticPropertyConstructs;
			for (var i = 0; i < propertyConstructs.length; i++)
			{
				var propertyConstruct = propertyConstructs[i];
				if (!js)
				{
					js += print('//properties', _indent + 1, 1);
					js += print('var $$j = {};', _indent + 1, 1);
				}
				var namespaceObj = propertyConstruct.identifier.namespaceObj;
				var type = propertyConstruct.identifier.type;
				var scope = construct.identifierToken.data;
				if (namespaceObj.isCustom)
				{
					throw $es4.$$primitive(new Error('custom static properties not supported at the moment'));
				}
				var returnString = getTranslatedTypeName(type);
				if (propertyConstruct.constToken && propertyConstruct.valueExpression)
				{
					if (returnString == 'String' || returnString == 'uint' || returnString == 'int' || returnString == 'Number' || returnString == 'Boolean')
					{
						var constructor = propertyConstruct.valueExpression.constructor;
						if (constructor === Construct.StringExpression || constructor === Construct.NumberExpression || constructor === Construct.BooleanExpression)
						{
							var valueJS = translateExpression(propertyConstruct.valueExpression, _indent, false, construct);
							var coerce = false;
							if (constructor === Construct.StringExpression && returnString != 'String')
							{
								coerce = true;
							}
							else if (constructor === Construct.BooleanExpression && returnString != 'Boolean')
							{
								coerce = true;
							}
							else if (constructor === Construct.NumberExpression)
							{
								if (returnString == 'uint')
								{
									if (parseInt(valueJS) != (valueJS >>> 0))
									{
										coerce = true;
									}
								}
								else if (returnString == 'int')
								{
									if (parseInt(valueJS) != (valueJS >> 0))
									{
										coerce = true;
									}
								}
							}
							if (coerce)
							{
								js += print(scope + '.' + propertyConstruct.identifierToken.data + ' = $es4.$$coerce(' + valueJS + ', ' + returnString + ');', _indent + 1, 1);
							}
							else
							{
								js += print(scope + '.' + propertyConstruct.identifierToken.data + ' = ' + valueJS + ';', _indent + 1, 1);
							}
							propertyConstruct.translatedEarlier = true;
							continue;
						}
					}
				}
				js += print('Object.defineProperty(' + construct.identifierToken.data + ', \'' + propertyConstruct.identifierToken.data + '\', {', _indent + 1, 1);
				js += print('get:function () { ', _indent + 1, 0);
				js += 'if (' + construct.identifierToken.data + '.$$cinit !== undefined) ' + construct.identifierToken.data + '.$$cinit(); ';
				js += print('return $$j.' + propertyConstruct.identifierToken.data + '; },', 0, 1);
				js += print('set:function (value) { ', _indent + 1, 0);
				js += 'if (' + construct.identifierToken.data + '.$$cinit !== undefined) ' + construct.identifierToken.data + '.$$cinit(); ';
				if (returnString)
				{
					js += print('$$j.' + propertyConstruct.identifierToken.data + ' = $es4.$$coerce(value, ' + returnString + '); }', 0, 1);
				}
				else
				{
					js += print('$$j.' + propertyConstruct.identifierToken.data + ' = value }', 0, 1);
				}
				js += print('});', _indent + 1, 2);
			}
			return js;
		}
;

		function translateInstanceProperties($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			var js = '';
			var propertyConstructs = construct.instancePropertyConstructs;
			for (var i = 0; i < propertyConstructs.length; i++)
			{
				var propertyConstruct = propertyConstructs[i];
				if (!js)
				{
					js += print('//properties', _indent + 2, 1);
				}
				var namespaceObj = propertyConstruct.identifier.namespaceObj;
				if (namespaceObj.isCustom)
				{
					throw $es4.$$primitive(new Error('custom namespace properties not supported at this time'));
				}
				var returnString = getTranslatedTypeName(propertyConstruct.identifier.type);
				if (namespaceObj.isPrivate)
				{
					js += print(construct.identifierToken.data + '.prototype.$$v.' + propertyConstruct.identifierToken.data + ' = {', _indent + 2, 1);
					js += print('get:function () { var $$this = this.$$this; return $$this.$$' + ((construct.packageName && _extendsNameConflict ? construct.packageName : '') + construct.identifierToken.data).split('.').join('') + '.$$p.' + propertyConstruct.identifierToken.data + '; },', _indent + 2, 1);
					if (returnString)
					{
						js += print('set:function (value) { var $$this = this.$$this; $$this.$$' + ((construct.packageName && _extendsNameConflict ? construct.packageName : '') + construct.identifierToken.data).split('.').join('') + '.$$p.' + propertyConstruct.identifierToken.data + ' = $es4.$$coerce(value, ' + returnString + '); }', _indent + 2, 1);
					}
					else
					{
						js += print('set:function (value) { var $$this = this.$$this; $$this.$$' + ((construct.packageName && _extendsNameConflict ? construct.packageName : '') + construct.identifierToken.data).split('.').join('') + '.$$p.' + propertyConstruct.identifierToken.data + ' = value }', _indent + 2, 1);
					}
					js += print('};', _indent + 2, 2);
					continue;
				}
				js += print('Object.defineProperty(' + construct.identifierToken.data + '.prototype, \'' + propertyConstruct.identifierToken.data + '\', {', _indent + 2, 1);
				js += print('get:function () { var $$this = this; return $$this.$$' + ((construct.packageName && _extendsNameConflict ? construct.packageName : '') + construct.identifierToken.data).split('.').join('') + '.' + propertyConstruct.identifierToken.data + '; },', _indent + 2, 1);
				if (returnString)
				{
					js += print('set:function (value) { var $$this = this; $$this.$$' + ((construct.packageName && _extendsNameConflict ? construct.packageName : '') + construct.identifierToken.data).split('.').join('') + '.' + propertyConstruct.identifierToken.data + ' = $es4.$$coerce(value, ' + returnString + '); }', _indent + 2, 1);
				}
				else
				{
					js += print('set:function (value) { var $$this = this; $$this.$$' + ((construct.packageName && _extendsNameConflict ? construct.packageName : '') + construct.identifierToken.data).split('.').join('') + '.' + propertyConstruct.identifierToken.data + ' = value }', _indent + 2, 1);
				}
				js += print('});', _indent + 2, 2);
			}
			return js;
		}
;

		function translateStaticMethods($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			var js = '';
			for (var i = 0; i < construct.staticMethodConstructs.length; i++)
			{
				var methodConstruct = construct.staticMethodConstructs[i];
				var namespaceObj = methodConstruct.identifier.namespaceObj;
				if (methodConstruct.isJavaScript)
				{
					if (namespaceObj.isCustom)
					{
						js += translateCustomNamespaceJavaScriptStaticMethod(construct, methodConstruct);
					}
					else
					{
						js += translateNoCustomNamespaceJavaScriptStaticMethod(construct, methodConstruct);
					}
				}
				else
				{
					if (namespaceObj.isCustom)
					{
						js += translateCustomNamespaceStaticMethod(construct, methodConstruct);
					}
					else
					{
						js += translateNoCustomNamespaceStaticMethod(construct, methodConstruct);
					}
				}
				if (i + 1 < construct.staticMethodConstructs.length)
				{
					js += print('', 0, 2);
				}
			}
			return js;
		}
;

		function translateNoCustomNamespaceJavaScriptStaticMethod($$$$construct, $$$$methodConstruct) 
		{
			//set default parameter values
			var construct = $$$$construct;
			var methodConstruct = $$$$methodConstruct;

			_inStaticFunction = true;
			var js = '';
			var namespaceObj = methodConstruct.identifier.namespaceObj;
			var type = methodConstruct.identifier.type;
			upLevel();
			js += print('//' + methodConstruct.identifier.namespaceObj.name + ' static method', _indent, 1, (js) ? 1 : 0);
			if (getTranslatedTypeName(type))
			{
				js += translateJavaScriptWithReturnTypeStaticMethod(construct, methodConstruct);
			}
			else
			{
				js += translateJavaScriptWithoutReturnTypeStaticMethod(construct, methodConstruct);
			}
			downLevel();
			_inStaticFunction = false;
			return js;

			function translateJavaScriptWithReturnTypeStaticMethod($$$$construct, $$$$methodConstruct) 
			{
				//set default parameter values
				var construct = $$$$construct;
				var methodConstruct = $$$$methodConstruct;

				var js = '';
				js += print(construct.identifierToken.data + '.' + methodConstruct.identifierToken.data + ' = (function () { return $es4.$$coerce((function (', _indent, 0);
				js += translateParameters(methodConstruct, construct);
				js += print(')', 0, 1);
				js += print('{', _indent, 1);
				js += print('if (' + construct.identifierToken.data + '.$$cinit !== undefined) ' + construct.identifierToken.data + '.$$cinit();', _indent + 1, 2);
				js += translateDefaultParameterValues(methodConstruct, construct);
				js += methodConstruct.javaScriptString;
				js += print('', 0, 1);
				js += print('}).apply(this, arguments), ' + getTranslatedTypeName(type) + ');});', _indent, 1);
				return js;
			}
;

			function translateJavaScriptWithoutReturnTypeStaticMethod($$$$construct, $$$$methodConstruct) 
			{
				//set default parameter values
				var construct = $$$$construct;
				var methodConstruct = $$$$methodConstruct;

				var js = '';
				js += print(construct.identifierToken.data + '.' + methodConstruct.identifierToken.data + ' = (function (', _indent, 0);
				js += translateParameters(methodConstruct, construct);
				js += print(')', 0, 1);
				js += print('{', _indent, 1);
				js += print('if (' + construct.identifierToken.data + '.$$cinit !== undefined) ' + construct.identifierToken.data + '.$$cinit();', _indent + 1, 2);
				js += translateDefaultParameterValues(methodConstruct, construct);
				js += methodConstruct.javaScriptString;
				js += print('', _indent, 1);
				js += print('});', _indent, 0);
				return js;
			}
;
		}
;

		function translateCustomNamespaceJavaScriptStaticMethod($$$$construct, $$$$methodConstruct) 
		{
			//set default parameter values
			var construct = $$$$construct;
			var methodConstruct = $$$$methodConstruct;

			return 'TODO translateCustomNamespaceJavaScriptStaticMethod';
		}
;

		function translateNoCustomNamespaceStaticMethod($$$$construct, $$$$methodConstruct) 
		{
			//set default parameter values
			var construct = $$$$construct;
			var methodConstruct = $$$$methodConstruct;

			_inStaticFunction = true;
			var js = '';
			var namespaceObj = methodConstruct.identifier.namespaceObj;
			upLevel();
			var type = methodConstruct.identifier.type;
			js += print('//' + methodConstruct.identifier.namespaceObj.name + ' static method', _indent, 1, (js) ? 1 : 0);
			js += print(construct.identifierToken.data + '.' + methodConstruct.identifierToken.data + ' = (function (', _indent, 0);
			js += translateParameters(methodConstruct, construct);
			js += print(')', 0, 1);
			js += print('{', _indent, (methodConstruct.isJavaScript) ? 0 : 1);
			js += print('if (' + construct.identifierToken.data + '.$$cinit !== undefined) ' + construct.identifierToken.data + '.$$cinit();', _indent + 1, 2);
			js += translateDefaultParameterValues(methodConstruct, construct);
			if (methodConstruct.UNIMPLEMENTEDToken && release)
			{
				js += print("throw new Error('" + methodConstruct.identifierToken.data + "');", 0, 0);
			}
			else
			{
				js += print(translateStatements(methodConstruct.bodyStatements, _indent + 1, construct), 0, 0);
			}
			js += print('});', _indent, 0);
			downLevel();
			_inStaticFunction = false;
			return js;
		}
;

		function translateCustomNamespaceStaticMethod($$$$construct, $$$$methodConstruct) 
		{
			//set default parameter values
			var construct = $$$$construct;
			var methodConstruct = $$$$methodConstruct;

			return 'TODO translateCustomNamespaceStaticMethod';
		}
;

		function translateInstanceMethods($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			var js = '';
			for (var i = 0; i < construct.instanceMethodConstructs.length; i++)
			{
				var methodConstruct = construct.instanceMethodConstructs[i];
				var namespaceObj = methodConstruct.identifier.namespaceObj;
				var type = methodConstruct.identifier.type;
				if (methodConstruct.isJavaScript)
				{
					if (namespaceObj.isCustom)
					{
						continue;
					}
					else
					{
						js += translateNoCustomNamespaceJavaScriptInstanceMethod(construct, methodConstruct);
					}
				}
				else
				{
					if (namespaceObj.isCustom)
					{
						continue;
					}
					else
					{
						js += translateNoCustomNamespaceInstanceMethod(construct, methodConstruct);
					}
				}
				if (i + 1 < construct.instanceMethodConstructs.length)
				{
					js += print('', 0, 2);
				}
			}
			return js;
		}
;

		function translateNamespaceInstanceMethods($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			var js = '';
			for (var i = 0; i < construct.instanceMethodConstructs.length; i++)
			{
				var methodConstruct = construct.instanceMethodConstructs[i];
				var namespaceObj = methodConstruct.identifier.namespaceObj;
				var type = methodConstruct.identifier.type;
				if (!namespaceObj.isCustom)
				{
					continue;
				}
				if (methodConstruct.isJavaScript)
				{
					js += translateCustomNamespaceJavaScriptInstanceMethod(construct, methodConstruct);
				}
				else
				{
					js += translateCustomNamespaceInstanceMethod(construct, methodConstruct);
				}
				if (i + 1 < construct.instanceMethodConstructs.length)
				{
					js += print('', 0, 2);
				}
			}
			return js;
		}
;

		function translateCustomNamespaceInstanceMethod($$$$construct, $$$$methodConstruct) 
		{
			//set default parameter values
			var construct = $$$$construct;
			var methodConstruct = $$$$methodConstruct;

			upLevel();
			upLevel();
			var js = '';
			var namespaceObj = methodConstruct.identifier.namespaceObj;
			var type = methodConstruct.identifier.type;
			js += print('//custom namespace method', _indent, 1, 1);
			var namespaceString = (namespaceObj.importID) ? ', ' + namespaceObj.normalizedImportID : ', ' + (namespaceObj.namespaceIsPrivate ? ('$$this.$$' + ((construct.packageName && _extendsNameConflict ? construct.packageName : '') + construct.identifierToken.data).split('.').join('') + '.$$ns.') : '$$this.') + namespaceObj.normalizedName;
			js += print('$es4.$$cnamespace_function(\'' + methodConstruct.identifierToken.data + '\', $$this, ' + ('$$this.$$' + ((construct.packageName && _extendsNameConflict ? construct.packageName : '') + construct.identifierToken.data).split('.').join('') + '.$$ns') + namespaceString + ', (function (', _indent, 0);
			js += translateParameters(methodConstruct, construct);
			js += print(')', 0, 1);
			js += print('{', _indent, 1);
			js += translateDefaultParameterValues(methodConstruct, construct);
			if (methodConstruct.UNIMPLEMENTEDToken && release)
			{
				js += print("throw new Error('" + methodConstruct.identifierToken.data + "');", 0, 0);
			}
			else
			{
				_inNamespacedFunction = (namespaceObj.importID) ? namespaceObj.importID : ('$$this.$$' + ((construct.packageName && _extendsNameConflict ? construct.packageName : '') + construct.identifierToken.data).split('.').join('') + '.$$ns.') + namespaceObj.name;
				js += print(translateStatements(methodConstruct.bodyStatements, _indent + 1, construct), 0, 0);
				_inNamespacedFunction = false;
			}
			js += print('})', _indent, 0);
			js += print(');', 0, 1);
			downLevel();
			downLevel();
			return js;
		}
;

		function translateNoCustomNamespaceInstanceMethod($$$$construct, $$$$methodConstruct) 
		{
			//set default parameter values
			var construct = $$$$construct;
			var methodConstruct = $$$$methodConstruct;

			upLevel();
			upLevel();
			var js = '';
			var namespaceObj = methodConstruct.identifier.namespaceObj;
			var type = methodConstruct.identifier.type;
			js += print('//' + methodConstruct.identifier.namespaceObj.name + ' instance method', _indent, 1);
			js += (methodConstruct.identifier.namespaceObj.isPrivate) ? translatePrivate() : translateOther();
			downLevel();
			downLevel();
			return js;

			function translatePrivate() 
			{
				var js = '';
				js += print(construct.identifierToken.data + '.prototype.$$v.' + methodConstruct.identifierToken.data + ' = {', _indent, 1);
				js += print('get:function ()', _indent, 1);
				js += print('{', _indent, 1);
				js += print('var $$this = this.$$this;', _indent + 1, 2);
				upLevel();
				js += print('function ' + methodConstruct.identifierToken.data + '(', _indent, 0);
				js += translateParameters(methodConstruct, construct);
				js += print(')', 0, 1);
				js += print('{', _indent, 1);
				js += translateDefaultParameterValues(methodConstruct, construct);
				if (methodConstruct.UNIMPLEMENTEDToken && release)
				{
					js += print("throw new Error('" + methodConstruct.identifierToken.data + "');", 0, 0);
				}
				else
				{
					js += print(translateStatements(methodConstruct.bodyStatements, _indent + 1, construct), 0, 0);
				}
				js += print('}', _indent, 2);
				var name = '$$this.$$' + ((construct.packageName && _extendsNameConflict ? construct.packageName : '') + construct.identifierToken.data).split('.').join('') + '.$$p.$$' + methodConstruct.identifierToken.data;
				js += print('return ' + name + ' || (' + name + ' = ' + methodConstruct.identifierToken.data + ');', _indent, 1);
				downLevel();
				js += print('}};', _indent, 1);
				return js;
			}
;

			function translateOther() 
			{
				var js = '';
				js += print('Object.defineProperty(' + construct.identifierToken.data + '.prototype, \'' + methodConstruct.identifierToken.data + '\', {', _indent, 1);
				js += print('get:function ()', _indent, 1);
				js += print('{', _indent, 1);
				js += print('var $$this = this;', _indent + 1, 2);
				upLevel();
				js += print('function ' + methodConstruct.identifierToken.data + '(', _indent, 0);
				js += translateParameters(methodConstruct, construct);
				js += print(')', 0, 1);
				js += print('{', _indent, 1);
				js += translateDefaultParameterValues(methodConstruct, construct);
				if (methodConstruct.UNIMPLEMENTEDToken && release)
				{
					js += print("throw new Error('" + methodConstruct.identifierToken.data + "');", 0, 0);
				}
				else
				{
					js += print(translateStatements(methodConstruct.bodyStatements, _indent + 1, construct), 0, 0);
				}
				js += print('}', _indent, 2);
				var name = '$$this.$$' + ((construct.packageName && _extendsNameConflict ? construct.packageName : '') + construct.identifierToken.data).split('.').join('') + '.$$' + methodConstruct.identifierToken.data;
				js += print('return ' + name + ' || (' + name + ' = ' + methodConstruct.identifierToken.data + ');', _indent, 1);
				downLevel();
				js += print('}});', _indent, 1);
				return js;
			}
;
		}
;

		function translateNoCustomNamespaceJavaScriptInstanceMethod($$$$construct, $$$$methodConstruct) 
		{
			//set default parameter values
			var construct = $$$$construct;
			var methodConstruct = $$$$methodConstruct;

			upLevel();
			upLevel();
			var js = '';
			var namespaceObj = methodConstruct.identifier.namespaceObj;
			var type = methodConstruct.identifier.type;
			js += print('//' + methodConstruct.identifier.namespaceObj.name + ' instance method', _indent, 1);
			js += (methodConstruct.identifier.namespaceObj.isPrivate) ? translatePrivate() : translateOther();
			downLevel();
			downLevel();
			return js;

			function translatePrivate() 
			{
				var js = '';
				js += print(construct.identifierToken.data + '.prototype.$$v.' + methodConstruct.identifierToken.data + ' = {', _indent, 1);
				js += print('get:function ()', _indent, 1);
				js += print('{', _indent, 1);
				js += print('var $$this = this.$$this;', _indent + 1, 2);
				upLevel();
				js += print('function ' + methodConstruct.identifierToken.data + '(', _indent, 0);
				js += translateParameters(methodConstruct, construct);
				js += print(')', 0, 1);
				js += print('{', _indent, 1);
				js += translateDefaultParameterValues(methodConstruct, construct);
				js += methodConstruct.javaScriptString;
				js += print('', 0, 1);
				js += print('}', _indent, 2);
				var name = '$$this.$$' + ((construct.packageName && _extendsNameConflict ? construct.packageName : '') + construct.identifierToken.data).split('.').join('') + '.$$p.$$' + methodConstruct.identifierToken.data;
				if (getTranslatedTypeName(type))
				{
					js += print('return ' + name + ' || (' + name + ' = function () { return $es4.$$coerce(' + methodConstruct.identifierToken.data + '.apply($$this, arguments), ' + getTranslatedTypeName(type) + '); });', _indent, 1);
				}
				else
				{
					js += print('return ' + name + ' || (' + name + ' = function () { return ' + methodConstruct.identifierToken.data + '.apply($$this, arguments); });', _indent, 1);
				}
				downLevel();
				js += print('}};', _indent, 1);
				return js;
			}
;

			function translateOther() 
			{
				var js = '';
				js += print('Object.defineProperty(' + construct.identifierToken.data + '.prototype, \'' + methodConstruct.identifierToken.data + '\', {', _indent, 0);
				js += print(' get:function ()', 0, 0);
				js += print(' {', 0, 0);
				js += print(' var $$this = this; ', 0, 0);
				js += print('return $$this.$$' + ((construct.packageName && _extendsNameConflict ? construct.packageName : '') + construct.identifierToken.data).split('.').join('') + '.' + methodConstruct.identifierToken.data + ' || ' + '($$this.$$' + ((construct.packageName && _extendsNameConflict ? construct.packageName : '') + construct.identifierToken.data).split('.').join('') + '.' + methodConstruct.identifierToken.data + ' = ', 0, 0);
				if (getTranslatedTypeName(type))
				{
					js += print('function () { return $es4.$$coerce(' + methodConstruct.identifierToken.data + '.apply($$this, arguments), ' + getTranslatedTypeName(type) + '); }); }});', 0, 1);
				}
				else
				{
					js += print('function () { return ' + methodConstruct.identifierToken.data + '.apply($$this, arguments); }); }});', 0, 1);
				}
				js += print('function ' + methodConstruct.identifierToken.data + '(', _indent, 0);
				js += translateParameters(methodConstruct, construct);
				js += print(')', 0, 1);
				js += print('{', _indent, (!methodConstruct.parameterConstructs.length) ? 0 : 1);
				js += translateDefaultParameterValues(methodConstruct, construct);
				js += methodConstruct.javaScriptString;
				js += print('}', 0, 1);
				return js;
			}
;
		}
;

		function translateCustomNamespaceJavaScriptInstanceMethod($$$$construct, $$$$methodConstruct) 
		{
			//set default parameter values
			var construct = $$$$construct;
			var methodConstruct = $$$$methodConstruct;

			return 'TODO translateCustomNamespaceJavaScriptInstanceMethod';
		}
;

		function translateStaticAccessors($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			_inStaticFunction = true;
			var js = '';

			function getMethodConstructJS($$$$methodConstruct, $$$$type) 
			{
				//set default parameter values
				var methodConstruct = $$$$methodConstruct;
				var type = $$$$type;

				if (!methodConstruct)
				{
					return 'null';
				}
				upLevel();
				var js = 'function (';
				js += translateParameters(methodConstruct, construct);
				js += print(')', 0, 1);
				js += print('{', _indent, (methodConstruct.javaScriptString) ? 0 : 1);
				js += print('if (' + construct.identifierToken.data + '.$$cinit !== undefined) ' + construct.identifierToken.data + '.$$cinit();', _indent + 1, (methodConstruct.isJavaScript) ? 0 : 2);
				js += translateDefaultParameterValues(methodConstruct, construct);
				if (methodConstruct.isNative)
				{
					throw $es4.$$primitive(new Error('accessor cannot be native: ' + methodConstruct.identifierToken.data));
				}
				if (methodConstruct.isJavaScript)
				{
					js += methodConstruct.javaScriptString;
				}
				else if (methodConstruct.UNIMPLEMENTEDToken && release)
				{
					js += print("throw new Error('" + methodConstruct.identifierToken.data + "');", 0, 0);
				}
				else
				{
					js += translateStatements(methodConstruct.bodyStatements, _indent + 1, construct);
				}
				js += print('}', (methodConstruct.javaScriptString) ? 0 : _indent, 0);
				downLevel();
				return js;
			}
;

			for (var i = 0; i < construct.staticAccessorConstructs.length; i++)
			{
				var setterMethodConstruct = construct.staticAccessorConstructs[i].setter;
				var getterMethodConstruct = construct.staticAccessorConstructs[i].getter;
				var methodConstruct = setterMethodConstruct || getterMethodConstruct;
				if (methodConstruct.identifier.namespaceObj.isCustom)
				{
					throw $es4.$$primitive(new Error('custom namespaced accessor not supported at this time'));
				}
				var namespaceObj = methodConstruct.identifier.namespaceObj;
				js += print('Object.defineProperty(' + construct.identifierToken.data + ', \'' + methodConstruct.identifierToken.data + '\', {', _indent + 1, 0);
				var type = (getterMethodConstruct) ? getterMethodConstruct.identifier.type : setterMethodConstruct.identifier.type;
				if (getterMethodConstruct)
				{
					js += 'get:';
					if (methodConstruct.isJavaScript && getTranslatedTypeName(type))
					{
						js += 'function () { return $es4.$$coerce((';
					}
					js += getMethodConstructJS(getterMethodConstruct, type);
					if (methodConstruct.isJavaScript && getTranslatedTypeName(type))
					{
						js += ')(), ' + getTranslatedTypeName(type) + ');}';
					}
					if (setterMethodConstruct)
					{
						js += ', ';
					}
				}
				if (setterMethodConstruct)
				{
					js += 'set:';
					js += getMethodConstructJS(setterMethodConstruct, type);
				}
				js += print('});', 0, 1);
			}
			_inStaticFunction = false;
			return js;
		}
;

		function translateInstanceAccessors($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			upLevel();
			var js = '';

			function getMethodConstructJS($$$$methodConstruct, $$$$type, $$$$isPrivate) 
			{
				//set default parameter values
				var methodConstruct = $$$$methodConstruct;
				var type = $$$$type;
				var isPrivate = $$$$isPrivate;

				if (!methodConstruct)
				{
					return 'null';
				}
				upLevel();
				var js = 'function (';
				js += translateParameters(methodConstruct, construct);
				js += print(')', 0, 1);
				js += print('{', _indent, (methodConstruct.javaScriptString) ? 0 : 1);
				js += translateDefaultParameterValues(methodConstruct, construct);
				if (methodConstruct.isNative)
				{
					throw $es4.$$primitive(new Error('accessor cannot be native: ' + methodConstruct.identifierToken.data));
				}
				if (!isPrivate)
				{
					js += print('var $$this = this;', _indent + 1, 1);
				}
				else
				{
					js += print('var $$this = this.$$this;', _indent + 1, 1);
				}
				if (methodConstruct.isJavaScript)
				{
					js += methodConstruct.javaScriptString;
				}
				else if (methodConstruct.UNIMPLEMENTEDToken && release)
				{
					js += print("throw new Error('" + methodConstruct.identifierToken.data + "');", 0, 0);
				}
				else
				{
					js += translateStatements(methodConstruct.bodyStatements, _indent + 1, construct);
				}
				js += print('}', (methodConstruct.javaScriptString) ? 0 : _indent, 0);
				downLevel();
				return js;
			}
;

			for (var i = 0; i < construct.instanceAccessorConstructs.length; i++)
			{
				var setterMethodConstruct = construct.instanceAccessorConstructs[i].setter;
				var getterMethodConstruct = construct.instanceAccessorConstructs[i].getter;
				var methodConstruct = setterMethodConstruct || getterMethodConstruct;
				if (methodConstruct.identifier.namespaceObj.isCustom)
				{
					throw $es4.$$primitive(new Error('custom namespaced accessor not supported at this time'));
				}
				var namespaceObj = methodConstruct.identifier.namespaceObj;
				var isPrivate = methodConstruct.namespaceToken.data == 'private';
				var hasGet = false;
				if (isPrivate)
				{
					js += print(construct.identifierToken.data + '.prototype.$$v.' + methodConstruct.identifierToken.data + ' = {', _indent + 1, 0);
				}
				else
				{
					js += print('Object.defineProperty(' + construct.identifierToken.data + '.prototype, \'' + methodConstruct.identifierToken.data + '\', {', _indent + 1, 0);
				}
				var type = (getterMethodConstruct) ? getterMethodConstruct.identifier.type : setterMethodConstruct.identifier.type;
				if (!getterMethodConstruct && methodConstruct.overrideToken)
				{
					hasGet = true;
					js += 'get:function ()';
					js += print('{', _indent + 1, 1, 1);
					js += print('var $$this = this; return $es4.$$super2($$this, ' + getTranslatedTypeName(construct.extendsNameConstruct.type) + ', \'$$' + ((construct.packageName && _extendsNameConflict ? construct.packageName : '') + construct.identifierToken.data).split('.').join('') + '\', \'' + methodConstruct.identifierToken.data + '\', \'get\');', _indent + 2, 0);
					js += print('}', _indent + 1, 0, 1);
				}
				else if (getterMethodConstruct)
				{
					hasGet = true;
					js += 'get:';
					if (methodConstruct.isJavaScript && getTranslatedTypeName(type))
					{
						js += 'function () { return $es4.$$coerce((';
					}
					js += getMethodConstructJS(getterMethodConstruct, type, isPrivate);
					if (methodConstruct.isJavaScript && getTranslatedTypeName(type))
					{
						js += ')(), ' + getTranslatedTypeName(type) + ');}';
					}
				}
				if (!setterMethodConstruct && methodConstruct.overrideToken)
				{
					if (hasGet)
					{
						js += ', ';
					}
					js += 'set:function ($$value)';
					js += print('{', _indent + 1, 1, 1);
					js += print('var $$this = this; $es4.$$super2($$this, ' + getTranslatedTypeName(construct.extendsNameConstruct.type) + ', \'$$' + ((construct.packageName && _extendsNameConflict ? construct.packageName : '') + construct.identifierToken.data).split('.').join('') + '\', \'' + methodConstruct.identifierToken.data + '\', \'set\', $$value);', _indent + 2, 0);
					js += print('}', _indent + 1, 0, 1);
				}
				else if (setterMethodConstruct)
				{
					if (hasGet)
					{
						js += ', ';
					}
					js += 'set:';
					js += getMethodConstructJS(setterMethodConstruct, type, isPrivate);
				}
				if (isPrivate)
				{
					js += print('};', 0, 1);
				}
				else
				{
					js += print('});', 0, 1);
				}
			}
			downLevel();
			return js;
		}
;

		function translateParameters($$$$methodConstruct, $$$$construct) 
		{
			//set default parameter values
			var methodConstruct = $$$$methodConstruct;
			var construct = $$$$construct;

			var js = '';
			for (var i = 0; i < methodConstruct.parameterConstructs.length; i++)
			{
				var parameterConstruct = methodConstruct.parameterConstructs[i];
				js += '$$$$' + parameterConstruct.identifierToken.data;
				if ((i + 1) < methodConstruct.parameterConstructs.length)
				{
					js += ', ';
				}
			}
			return js;
		}
;

		function translateDefaultParameterValues($$$$methodConstruct, $$$$construct) 
		{
			//set default parameter values
			var methodConstruct = $$$$methodConstruct;
			var construct = $$$$construct;

			var js = '';
			for (var i = 0; i < methodConstruct.parameterConstructs.length; i++)
			{
				var parameterConstruct = methodConstruct.parameterConstructs[i];
				if (!js)
				{
					js += print('//set default parameter values', _indent + 1, 1);
				}
				if (parameterConstruct.restToken || parameterConstruct.valueExpression)
				{
					if (parameterConstruct.restToken)
					{
						js += print('for (var $$i = ' + (methodConstruct.parameterConstructs.length - 1) + ', $$length = arguments.length, ' + parameterConstruct.identifierToken.data + ' = new Array($$length - ' + (methodConstruct.parameterConstructs.length - 1) + '); $$i < $$length; $$i += 1) ' + parameterConstruct.identifierToken.data + '[$$i - ' + (methodConstruct.parameterConstructs.length - 1) + '] = arguments[$$i];', _indent + 1, 1);
					}
					else if (parameterConstruct.valueExpression)
					{
						var coerceType = getTranslatedTypeName(parameterConstruct.identifier.type);
						if (coerceType)
						{
							js += print('var ' + parameterConstruct.identifierToken.data + ' = (' + i + ' > arguments.length - 1) ? ' + translateExpression(parameterConstruct.valueExpression, 0, false, construct) + ' : $es4.$$coerce($$$$' + parameterConstruct.identifierToken.data + ', ' + coerceType + ');', _indent + 1, 1);
						}
						else
						{
							js += print('var ' + parameterConstruct.identifierToken.data + ' = (' + i + ' > arguments.length - 1) ? ' + translateExpression(parameterConstruct.valueExpression, 0, false, construct) + ' : $$$$' + parameterConstruct.identifierToken.data + ';', _indent + 1, 1);
						}
					}
				}
				else
				{
					var coerceType = getTranslatedTypeName(parameterConstruct.identifier.type);
					if (coerceType)
					{
						js += print('var ' + parameterConstruct.identifierToken.data + ' = $es4.$$coerce($$$$' + parameterConstruct.identifierToken.data + ', ' + coerceType + ');', _indent + 1, 1);
					}
					else
					{
						js += print('var ' + parameterConstruct.identifierToken.data + ' = $$$$' + parameterConstruct.identifierToken.data + ';', _indent + 1, 1);
					}
				}
			}
			if (js)
			{
				js += print('', 0, 1);
			}
			return js;
		}
;

		function translateStatements($$$$statements, $$$$indent, $$$$construct) 
		{
			//set default parameter values
			var statements = $$$$statements;
			var indent = $$$$indent;
			var construct = $$$$construct;

			if (!indent)
			{
				indent = _indent;
			}
			else
			{
				indent--;
			}
			var js = '';
			for (var i = 0; i < statements.length; i++)
			{
				var statement = statements[i];
				if (i != 0 && statements[i - 1].constructor != Construct.FunctionExpression && statements[i].constructor == Construct.FunctionExpression)
				{
					js += '\n';
				}
				js += translateStatement(statement, indent + 1, false, construct);
				if (i + 1 < statements.length && statement.constructor == 'FunctionExpression')
				{
					js += '\n';
				}
			}
			return js;
		}
;

		function translateStatement($$$$statement, $$$$_indent, $$$$inline, $$$$construct) 
		{
			//set default parameter values
			var statement = $$$$statement;
			var _indent = $$$$_indent;
			var inline = $$$$inline;
			var construct = $$$$construct;

			if (!construct)
			{
				throw $es4.$$primitive(new Error('construct null in translate statement'));
			}
			var js = '';
			switch (statement.constructor)
			{
				case Construct.EmptyStatement:
					break;
				case Construct.IfStatement:
					_inIfStatement++;
					js += print('if (' + translateExpression(statement.conditionExpression, _indent, false, construct) + ')', _indent, 1);
					js += print('{', _indent, 1);
					js += translateStatements(statement.bodyStatements, _indent + 1, construct);
					js += print('}', _indent, 1);
					for (var i = 0; i < statement.elseIfStatements.length; i++)
					{
						js += translateStatement(statement.elseIfStatements[i], _indent, false, construct);
					}
					if (statement.elseStatement)
					{
						js += translateStatement(statement.elseStatement, _indent, false, construct);
					}
					_inIfStatement--;
					break;
				case Construct.ElseIfStatement:
					_inIfStatement++;
					js += print('else if (' + translateExpression(statement.conditionExpression, _indent, false, construct) + ')', _indent, 1);
					js += print('{', _indent, 1);
					js += translateStatements(statement.bodyStatements, _indent + 1, construct);
					js += print('}', _indent, 1);
					_inIfStatement--;
					break;
				case Construct.ElseStatement:
					_inIfStatement++;
					js += print('else', _indent, 1);
					js += print('{', _indent, 1);
					js += translateStatements(statement.bodyStatements, _indent + 1, construct);
					js += print('}', _indent, 1);
					_inIfStatement--;
					break;
				case Construct.WhileStatement:
					js += print('while (' + translateExpression(statement.conditionExpression, _indent, false, construct) + ')', _indent, 1);
					js += print('{', _indent, 1);
					js += translateStatements(statement.bodyStatements, _indent + 1, construct);
					js += print('}', _indent, 1);
					break;
				case Construct.DoWhileStatement:
					js += print('do', _indent, 1);
					js += print('{', _indent, 1);
					js += translateStatements(statement.bodyStatements, _indent + 1, construct);
					js += print('}', _indent, 1);
					js += print('while (' + translateExpression(statement.conditionExpression, _indent, false, construct) + ')', _indent, 1);
					break;
				case Construct.ForStatement:
					js += print('for (', _indent, 0);
					if (statement.variableStatement)
					{
						js += translateStatement(statement.variableStatement, 0, true, construct);
					}
					js += ';';
					if (statement.conditionExpression)
					{
						js += ' ' + translateExpression(statement.conditionExpression, _indent, false, construct);
					}
					js += ';';
					if (statement.afterthoughtExpression)
					{
						js += ' ' + translateExpression(statement.afterthoughtExpression, _indent, false, construct);
					}
					js += ')\n';
					js += print('{', _indent, 1);
					js += translateStatements(statement.bodyStatements, _indent + 1, construct);
					js += print('}', _indent, 1);
					break;
				case Construct.ForEachStatement:
					_count++;
					var object = translateExpression(statement.arrayExpression, _indent, false, construct);
					var index = '$$i' + _count;
					if (_dynamicPropertyAccess)
					{
						js += print('for (var ' + index + ' = (' + object + ' || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); ' + index + ' != 0; ' + index + ' = ' + object + '.$$nextNameIndex(' + index + '))', _indent, 1);
					}
					else
					{
						js += print('for (var ' + index + ' in ' + object + ')', _indent, 1);
					}
					js += print('{', _indent, 1);
					var valueJS = '';
					if (_dynamicPropertyAccess)
					{
						valueJS += object + '.$$nextValue(' + index + ')';
					}
					else
					{
						valueJS += object + '[' + index + ']';
					}
					var typeString = getTranslatedTypeName(statement.variableStatement.identifier.type);
					if (typeString)
					{
						js += print(translateStatement(statement.variableStatement, 0, true, construct) + ' = $es4.$$coerce(' + valueJS + ', ' + typeString + ');', _indent + 1, 2);
					}
					else
					{
						js += print(translateStatement(statement.variableStatement, 0, true, construct) + ' = ' + valueJS + ';', _indent + 1, 2);
					}
					js += translateStatements(statement.bodyStatements, _indent + 1, construct);
					js += print('}', _indent, 1);
					break;
				case Construct.ForInStatement:
					_count++;
					var object = translateExpression(statement.objectExpression, _indent, false, construct);
					var index = '$$i' + _count;
					if (_dynamicPropertyAccess)
					{
						js += print('for (var ' + index + ' = (' + object + ' || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); ' + index + ' != 0; ' + index + ' = ' + object + '.$$nextNameIndex(' + index + '))', _indent, 1);
					}
					else
					{
						js += print('for (' + translateStatement(statement.variableStatement, 0, true, construct) + ' in ' + translateExpression(statement.objectExpression, _indent, false, construct) + ')', _indent, 1);
					}
					js += print('{', _indent, 1);
					if (_dynamicPropertyAccess)
					{
						valueJS = object + '.$$nextName(' + index + ')';
						var typeString = getTranslatedTypeName(statement.variableStatement.identifier.type);
						if (typeString)
						{
							js += print(translateStatement(statement.variableStatement, 0, true, construct) + ' = $es4.$$coerce(' + valueJS + ', ' + typeString + ');', _indent + 1, 2);
						}
						else
						{
							js += print(translateStatement(statement.variableStatement, 0, true, construct) + ' = ' + valueJS + ';', _indent + 1, 2);
						}
					}
					js += translateStatements(statement.bodyStatements, _indent + 1, construct);
					js += print('}', _indent, 1);
					break;
				case Construct.BreakStatement:
					js += print('break', _indent, 0);
					if (statement.identifierToken)
					{
						js += ' ' + statement.identifierToken.data;
					}
					js += ';\n';
					break;
				case Construct.ContinueStatement:
					js += print('continue', _indent, 0);
					if (statement.identifierToken)
					{
						js += ' ' + statement.identifierToken.data;
					}
					js += ';\n';
					break;
				case Construct.ThrowStatement:
					js += print('throw', _indent, 0);
					if (statement.expression)
					{
						js += ' ' + translateExpression(statement.expression, _indent, false, construct);
					}
					js += ';\n';
					break;
				case Construct.TryStatement:
					js += print('try', _indent, 1);
					js += print('{', _indent, 1);
					js += translateStatements(statement.bodyStatements, _indent + 1, construct);
					js += print('}', _indent, 1);
					if (statement.catchStatements.length == 1)
					{
						js += print('catch (' + statement.catchStatements[0].identifierToken.data + ')', _indent, 1);
					}
					else
					{
						js += print('catch ($$error)', _indent, 1);
					}
					js += print('{', _indent, 1);
					for (var i = 0; i < statement.catchStatements.length; i++)
					{
						upLevel();
						var catchStatement = statement.catchStatements[i];
						var typeName = catchStatement.identifier.type.name;
						if (i == 0 && statement.catchStatements.length == 1)
						{
							if (typeName == 'void' || typeName == 'Error')
							{
								js += translateStatements(catchStatement.bodyStatements, _indent + 1, construct);
							}
							else
							{
								js += print('if ($es4.$$is(' + catchStatement.identifierToken.data + ', ' + typeName + '))', _indent + 1, 1);
								js += print('{', _indent + 1, 1);
								js += translateStatements(catchStatement.bodyStatements, _indent + 2, construct);
								js += print('}', _indent + 1, 1);
							}
							downLevel();
							break;
						}
						if (typeName == 'void' || typeName == 'Error')
						{
							js += print('else', _indent + 1, 1);
							js += print('{', _indent + 1, 1);
							js += print('var ' + catchStatement.identifierToken.data + ' = $$error;', _indent + 2, 1);
							js += translateStatements(catchStatement.bodyStatements, _indent + 2, construct);
							js += print('}', _indent + 1, 1);
							downLevel();
							break;
						}
						js += print(((i == 0) ? 'if' : 'else if') + ' ($es4.$$is($$error, ' + typeName + '))', _indent + 1, 1);
						js += print('{', _indent + 1, 1);
						js += print('var ' + catchStatement.identifierToken.data + ' = $$error;', _indent + 2, 1);
						js += translateStatements(catchStatement.bodyStatements, _indent + 2, construct);
						js += print('}', _indent + 1, 1);
						downLevel();
					}
					js += print('}', _indent, 1);
					if (statement.finallyStatement)
					{
						js += print('finally', _indent, 1);
						js += print('{', _indent, 1);
						js += translateStatements(statement.finallyStatement.bodyStatements, _indent + 1, construct);
						js += print('}', _indent, 1);
					}
					break;
				case Construct.UseStatement:
					break;
				case Construct.VarStatement:
					var translateVarValueExpression = function ($$$$statement) 
					{
				//set default parameter values
				var statement = $$$$statement;

						var valueJS = translateExpression(statement.valueExpression, _indent, false, construct);
						var typeString = getTranslatedTypeName(statement.identifier.type);
						if (isCoerceRequired(statement, typeString, valueJS))
						{
							valueJS = '$es4.$$coerce(' + valueJS + ', ' + typeString + ')';
						}
						return ' = ' + valueJS;
					}
;
					js += print('var ' + statement.identifierToken.data, _indent, 0);
					if (statement.valueExpression)
					{
						js += translateVarValueExpression(statement);
					}
					for (var i = 0; i < statement.innerVarStatements.length; i++)
					{
						var innerVarStatement = statement.innerVarStatements[i];
						js += ', ' + innerVarStatement.identifierToken.data;
						if (innerVarStatement.valueExpression)
						{
							js += translateVarValueExpression(innerVarStatement);
						}
					}
					if (!inline)
					{
						js += ';\n';
					}
					break;
				case Construct.SwitchStatement:
					js += print('switch (' + translateExpression(statement.valueExpression, _indent, false, construct) + ')', _indent, 1);
					js += print('{', _indent, 1);
					for (var i = 0; i < statement.caseStatements.length; i++)
					{
						js += translateStatement(statement.caseStatements[i], _indent + 1, false, construct);
					}
					js += print('}', _indent, 1);
					break;
				case Construct.CaseStatement:
					if (statement.defaultToken)
					{
						js += print('default:', _indent, 1);
					}
					else
					{
						js += print('case ' + translateExpression(statement.valueExpression, _indent, false, construct) + ':', _indent, 1);
					}
					js += translateStatements(statement.bodyStatements, _indent + 1, construct);
					break;
				case Construct.LabelStatement:
					js += print(statement.identifierToken.data + ':', _indent, 0);
					break;
				default:
					if (inline)
					{
						js += print(translateExpression(statement, _indent, false, construct), _indent, 0);
					}
					else
					{
						js += print(translateExpression(statement, _indent, false, construct) + ';', _indent, 1);
					}
			}
			return js;
		}
;

		function translateExpression($$$$expression, $$$$_indent, $$$$toString, $$$$construct, $$$$operator, $$$$expressionString) 
		{
			//set default parameter values
			var expression = $$$$expression;
			var _indent = $$$$_indent;
			var toString = $$$$toString;
			var construct = $$$$construct;
			var operator = (4 > arguments.length - 1) ? null : $$$$operator;
			var expressionString = (5 > arguments.length - 1) ? null : $$$$expressionString;

			if (!construct)
			{
				throw $es4.$$primitive(new Error('construct null in translate expression'));
			}
			if (!_indent)
			{
				_indent = 0;
			}
			var js = '';
			outerSwitch:			switch (expression.constructor)
			{
				case Construct.ParenExpression:
					js += '(' + translateExpression(expression.expression, _indent, toString, construct, operator, expressionString) + ')';
					break;
				case Construct.PropertyExpression:
					js += translatePropertyExpressionDynamic(expression, toString, expressionString, operator, construct);
					break;
				case Construct.NumberExpression:
					js += expression.numberToken.data;
					break;
				case Construct.StringExpression:
					if (toString && expression.stringToken.data == "'")
					{
						js += '\\' + expression.stringToken.data;
					}
					else
					{
						js += expression.stringToken.data;
					}
					for (var i = 0; i < expression.stringChunkTokens.length; i++)
					{
						js += expression.stringChunkTokens[i].data;
						if (i + 1 < expression.stringChunkTokens.length)
						{
							js += '\n';
						}
					}
					if (toString && expression.stringToken.data == "'")
					{
						js += '\\' + expression.stringToken.data;
					}
					else
					{
						js += expression.stringToken.data;
					}
					break;
				case Construct.ReturnExpression:
					js += 'return';
					if (expression.expression)
					{
						var typeName = getTranslatedTypeName(expression.expectedType);
						var valueJS = translateExpression(expression.expression, 0, toString, construct);
						if (typeName && isCoerceRequired(expression, typeName, valueJS))
						{
							js += ' $es4.$$coerce(' + valueJS + ', ' + typeName + ')';
						}
						else
						{
							js += ' ' + valueJS;
						}
					}
					break;
				case Construct.DeleteExpression:
					js += translatePropertyExpressionDynamic(expression.expression, toString, undefined, undefined, construct, true);
					break;
				case Construct.FunctionExpression:
					upLevel();
					var wasInClosure = _inClosure;
					_inClosure = true;
					if (!expression.identifierToken)
					{
						js += print('function (', 0, 0);
					}
					else
					{
						if (_inIfStatement)
						{
							throw $es4.$$primitive(new Error('support for named closures in if/elseif/else statements is not supported at this time.'));
						}
						js += print('function ' + expression.identifierToken.data + '(', 0, 0);
					}
					js += translateParameters(expression, construct);
					js += print(') ', 0, 1);
					js += print('{', _indent, 1);
					js += translateDefaultParameterValues(expression, construct);
					js += translateStatements(expression.bodyStatements, _indent + 1, construct);
					js += print('}', _indent, 1);
					if (!wasInClosure)
					{
						_inClosure = false;
					}
					downLevel();
					break;
				case Construct.ObjectExpression:
					js += '{';
					for (var i = 0; i < expression.objectPropertyConstructs.length; i++)
					{
						var prop;
						if (expression.objectPropertyConstructs[i].expression.constructor == Construct.PropertyExpression)
						{
							prop = expression.objectPropertyConstructs[i].expression.construct.identifierToken.data;
						}
						else
						{
							prop = translateExpression(expression.objectPropertyConstructs[i].expression, 0, toString, construct);
						}
						js += prop + ':' + translateExpression(expression.objectPropertyConstructs[i].valueExpression, 0, toString, construct);
						if ((i + 1) < expression.objectPropertyConstructs.length)
						{
							js += ', ';
						}
					}
					js += '}';
					break;
				case Construct.ArrayExpression:
					js += '[';
					for (var i = 0; i < expression.valueExpressions.length; i++)
					{
						if (!expression.valueExpressions[i])
						{
							trace('invalid 20');
						}
						js += translateExpression(expression.valueExpressions[i], 0, toString, construct);
						if ((i + 1) < expression.valueExpressions.length)
						{
							js += ', ';
						}
					}
					js += ']';
					break;
				case Construct.BooleanExpression:
					js += expression.booleanToken.data;
					break;
				case Construct.Expression:
					if (expression.token.type == Token.TypeofTokenType)
					{
						if (!expression.expression)
						{
							trace('invalid 21');
						}
						js += '$es4.$$typeof(' + translateExpression(expression.expression, 0, toString, construct) + ')';
						break;
					}
					if (expression.token.type == Token.VoidTokenType)
					{
						if (expression.expression.constructor == Construct.EmptyExpression)
						{
							js += 'void 0';
						}
						else
						{
							if (!expression.expression)
							{
								trace('invalid 01');
							}
							js += 'void ' + translateExpression(expression.expression, 0, toString, construct);
						}
						break;
					}
					js += expression.token.data;
					if (expression.expression)
					{
						if (!expression.expression)
						{
							trace('invalid 22');
						}
						js += translateExpression(expression.expression, 0, toString, construct);
					}
					break;
				case Construct.XMLExpression:
					js += 'new XML(\'' + expression.string + '\')';
					break;
				case Construct.XMLListExpression:
					js += 'new XMLList(\'' + expression.string + '\')';
					break;
				case Construct.EmptyExpression:
					break;
				case Construct.RegExpression:
					js += expression.string;
					break;
				case Construct.PrefixExpression:
					js += translatePropertyExpressionDynamic(expression.expression, toString, '\'prefix\'', (expression.decrementToken) ? '--' : '++', construct);
					break;
				case Construct.PostfixExpression:
					js += translatePropertyExpressionDynamic(expression.expression, toString, '\'postfix\'', (expression.decrementToken) ? '--' : '++', construct);
					break;
				case Construct.NewExpression:
					if (expression.expression.constructor == Construct.ParenExpression)
					{
						if (!expression.expression)
						{
							trace('invalid 02');
						}
						js += '$es4.$$primitive(new ' + translateExpression(expression.expression, 0, toString, construct) + ')';
					}
					else
					{
						js += translatePropertyExpressionDynamic(expression.expression, toString, null, null, construct, null, true);
					}
					break;
				case Construct.BinaryExpression:
					if (expression.token.type == Token.IsTokenType)
					{
						if (!expression.leftExpression)
						{
							trace('invalid 04');
						}
						if (!expression.rightExpression)
						{
							trace('invalid 05');
						}
						js += '$es4.$$is(' + translateExpression(expression.leftExpression, 0, toString, construct) + ', ' + translateExpression(expression.rightExpression, 0, toString, construct) + ')';
						break;
					}
					if (expression.token.type == Token.InstanceofTokenType)
					{
						if (!expression.leftExpression)
						{
							trace('invalid 06');
						}
						if (!expression.rightExpression)
						{
							trace('invalid 07');
						}
						js += '$es4.$$instanceof(' + translateExpression(expression.leftExpression, 0, toString, construct) + ', ' + translateExpression(expression.rightExpression, 0, toString, construct) + ')';
						break;
					}
					if (expression.token.type == Token.AsTokenType)
					{
						if (!expression.leftExpression)
						{
							trace('invalid 08');
						}
						if (!expression.rightExpression)
						{
							trace('invalid 09');
						}
						js += '$es4.$$as(' + translateExpression(expression.leftExpression, 0, toString, construct) + ', ' + translateExpression(expression.rightExpression, 0, toString, construct) + ')';
						break;
					}
					innerSwitch:					switch (expression.token.type)
					{
						case Token.BitwiseLeftShiftAssignmentTokenType:
						case Token.BitwiseUnsignedRightShiftAssignmentTokenType:
						case Token.BitwiseRightShiftAssignmentTokenType:
						case Token.AddWithAssignmentTokenType:
						case Token.DivWithAssignmentTokenType:
						case Token.ModWithAssignmentTokenType:
						case Token.MulWithAssignmentTokenType:
						case Token.SubWithAssignmentTokenType:
						case Token.AssignmentTokenType:
						case Token.AndWithAssignmentTokenType:
						case Token.OrWithAssignmentTokenType:
						case Token.BitwiseAndAssignmentTokenType:
						case Token.BitwiseOrAssignmentTokenType:
						case Token.BitwiseXorAssignmentTokenType:
							var leftExpression = expression.leftExpression;
							while (leftExpression.constructor == Construct.ParenExpression)
							{
								leftExpression = leftExpression.expression;
							}
							var innerOperator = expression.token.data;
							var innerExpressionString = '';
							while (leftExpression.constructor == Construct.BinaryExpression)
							{
								expression.leftExpression = leftExpression.rightExpression;
								if (!innerExpressionString)
								{
									if (!expression)
									{
										trace('invalid 10');
									}
									innerExpressionString = translateExpression(expression, _indent, toString, construct);
								}
								else
								{
									if (!expression.leftExpression)
									{
										trace('invalid 11');
									}
									if (_dynamicPropertyAccess)
									{
										innerExpressionString = translateExpression(expression.leftExpression, _indent, toString, construct, innerOperator, innerExpressionString);
									}
									else
									{
										innerExpressionString = translateExpression(expression.leftExpression, _indent, toString, construct) + ' ' + innerOperator + ' ' + innerExpressionString;
									}
								}
								expression = leftExpression;
								innerOperator = expression.token.data;
								leftExpression = expression.leftExpression;
							}
							var typeString;
							if (!leftExpression.nextPropertyExpression && leftExpression.construct && leftExpression.construct.constructor == Construct.IdentifierConstruct)
							{
								var identifier = leftExpression.construct.identifier;
								typeString = (identifier.isVar && identifier.type) ? getTranslatedTypeName(identifier.type) : '';
							}
							if (true)
							{
								if (!innerExpressionString)
								{
									if (!expression.rightExpression)
									{
										trace('invalid 12');
									}
									innerExpressionString = translateExpression(expression.rightExpression, 0, toString, construct);
								}
								if (typeString && isCoerceRequired(leftExpression, typeString, innerExpressionString))
								{
									js += translatePropertyExpressionDynamic(leftExpression, toString, '$es4.$$coerce(' + innerExpressionString + ', ' + typeString + ')', innerOperator, construct);
								}
								else
								{
									js += translatePropertyExpressionDynamic(leftExpression, toString, innerExpressionString, innerOperator, construct);
								}
							}
							else
							{
								if (!expression.leftExpression)
								{
									trace('invalid 13');
								}
								js += translateExpression(leftExpression, 0, toString, construct);
								if (!innerExpressionString)
								{
									if (!expression.rightExpression)
									{
										trace('invalid 14');
									}
									innerExpressionString = translateExpression(expression.rightExpression, 0, toString, construct);
								}
								if (typeString && isCoerceRequired(leftExpression, typeString, innerExpressionString))
								{
									js += ' ' + innerOperator + ' $es4.$$coerce(' + innerExpressionString + ', ' + typeString + ')';
								}
								else
								{
									js += ' ' + innerOperator + ' ' + innerExpressionString;
								}
							}
							break outerSwitch;
					}
					if (!expression.leftExpression)
					{
						trace('invalid 15');
					}
					if (!expression.rightExpression)
					{
						trace('invalid 16');
					}
					js += translateExpression(expression.leftExpression, 0, toString, construct) + ' ' + expression.token.data + ' ' + translateExpression(expression.rightExpression, 0, toString, construct);
					break;
				case Construct.TernaryExpression:
					if (!expression.trueExpression)
					{
						trace('invalid 34');
					}
					if (!expression.conditionExpression)
					{
						trace('invalid 35');
					}
					if (!expression.falseExpression)
					{
						trace('invalid 36');
					}
					js += translateExpression(expression.conditionExpression, 0, toString, construct) + ' ? ' + translateExpression(expression.trueExpression, 0, toString, construct) + ' : ' + translateExpression(expression.falseExpression, 0, toString, construct);
					break;
				default:
					throw $es4.$$primitive(new Error('Unexpected expression found: ' + expression.constructor));
			}
			return js;
		}
;

		function translatePropertyExpressionDynamic($$$$expression, $$$$toString, $$$$setString, $$$$operator, $$$$construct, $$$$doDelete, $$$$doNew) 
		{
			//set default parameter values
			var expression = $$$$expression;
			var toString = $$$$toString;
			var setString = $$$$setString;
			var operator = $$$$operator;
			var construct = $$$$construct;
			var doDelete = (5 > arguments.length - 1) ? null : $$$$doDelete;
			var doNew = (6 > arguments.length - 1) ? null : $$$$doNew;

			var js = '';
			if (!expression.construct)
			{
				throw $es4.$$primitive(new Error('invalid expression passed to translatePropertyExpression: ' + expression.constructor));
			}
			var identifier;
			var namespaceIdentifier;
			switch (expression.construct.constructor)
			{
				case Construct.SuperConstruct:
				case Construct.ThisConstruct:
				case Construct.IdentifierConstruct:
					identifier = expression.construct.identifier;
					break;
				case Construct.ParenConstruct:
				case Construct.ArrayConstruct:
				case Construct.ObjectConstruct:
					break;
				case Construct.NamespaceQualifierConstruct:
					namespaceIdentifier = expression.construct.namespaceIdentifier;
					identifier = expression.construct.identifier;
					break;
				default:
					throw $es4.$$primitive(new Error('unknown inner property expression: ' + expression.construct.constructor));
			}
			var pname;
			var name;
			if (identifier && !namespaceIdentifier && (identifier.isProperty || identifier.isMethod) && !identifier.isImport && identifier.namespaceObj.isCustom)
			{
				namespaceIdentifier = identifier.namespaceObj.identifier;
			}
			if (identifier && namespaceIdentifier)
			{
				var pname = (namespaceIdentifier.isStatic) ? namespaceIdentifier.scope.name : '$$this';
				var namespaceObj = namespaceIdentifier.namespaceObj;
				var namespaceString = namespaceObj.normalizedImportID;
				if (namespaceIdentifier.isStatic && !namespaceString)
				{
					namespaceString = namespaceIdentifier.scope.name + '.' + namespaceIdentifier.name;
				}
				else if (!namespaceString)
				{
					namespaceString = (namespaceIdentifier.namespaceObj && namespaceIdentifier.namespaceObj.isPrivate ? ('$$this.$$' + ((construct.packageName && _extendsNameConflict ? construct.packageName : '') + construct.identifierToken.data).split('.').join('') + '.$$ns.') : '$$this.') + namespaceIdentifier.name;
				}
				pname += '.$$namespace(' + namespaceString + ')';
				name = identifier.name;
			}
			else if (identifier)
			{
				name = identifier.name;
				if (identifier.isStatic && !identifier.isImport && !identifier.isNative)
				{
					pname = identifier.scope.name;
				}
				else if (identifier.isPrivate && !identifier.isImport)
				{
					pname = '$$this.$$' + ((construct.packageName && _extendsNameConflict ? construct.packageName : '') + construct.identifierToken.data).split('.').join('');
				}
				else if ((identifier.isProperty || identifier.isMethod) && !identifier.isImport)
				{
					pname = '$$this';
				}
				else if (identifier.isPackage)
				{
					name = '$es4.$$[\'' + identifier.name;
					var packageName = identifier.name;
					var tempInnerExpression = expression;
					var lastExpression = tempInnerExpression;
					while (tempInnerExpression = tempInnerExpression.nextPropertyExpression)
					{
						if (_rootConstructs[packageName + '.' + tempInnerExpression.construct.identifierToken.data])
						{
							expression = lastExpression;
							break;
						}
						packageName += '.' + tempInnerExpression.construct.identifierToken.data;
						name += '.' + tempInnerExpression.construct.identifierToken.data;
						lastExpression = tempInnerExpression;
					}
					name += '\']';
				}
				var superString = (construct.extendsNameConstruct) ? '$es4.$$super2($$this, ' + getTranslatedTypeName(construct.extendsNameConstruct.type) + ', \'$$' + construct.extendsNameConstruct.type.name + '\', ***REPLACE1***, \'***REPLACE2***\', ***REPLACE3***)' : '____________________';
				if (name == 'super')
				{
					if (_inNamespacedFunction && expression.nextPropertyExpression)
					{
						name = '$$this.$$namespace(' + _inNamespacedFunction + ', $$this, $es4.$$super($$thisp))';
					}
					else
					{
						name = (expression.nextPropertyExpression) ? superString : 'this';
					}
				}
				if (name == 'this' && !_inClosure)
				{
					if (expression.nextPropertyExpression && expression.nextPropertyExpression.construct.constructor == Construct.DotConstruct && expression.nextPropertyExpression.construct.identifier.isPrivate)
					{
						name = '$$this.$$' + ((construct.packageName && _extendsNameConflict ? construct.packageName : '') + construct.identifierToken.data).split('.').join('');
					}
					else
					{
						name = '$$this';
					}
				}
			}
			else
			{
				if (!expression.construct.expression)
				{
					trace('invalid 37');
				}
				name = translateExpression(expression.construct.expression, 0, toString, construct);
			}
			js += (!pname) ? name : (pname + '.' + name);
			var state = {doAssignment:setString != null, doDelete:doDelete, doNew:doNew, doPostfix:setString == '\'postfix\'', doPrefix:setString == '\'prefix\''};
			var doSuper = name == superString;
			var doSuperConstructor = doSuper && (expression.nextPropertyExpression && expression.nextPropertyExpression.construct.constructor == Construct.FunctionCallConstruct);
			var superExpression;
			while (expression = expression.nextPropertyExpression)
			{
				if (expression.construct.constructor == Construct.DotConstruct || expression.construct.constructor == Construct.IdentifierConstruct)
				{
					if (doSuper && !superExpression)
					{
						superExpression = '\'' + expression.construct.identifierToken.data + '\'';
					}
					else
					{
						if (expression.construct.constructor == Construct.DotConstruct)
						{
							js += '.';
						}
						js += expression.construct.identifierToken.data;
					}
				}
				else if (expression.construct.constructor == Construct.ArrayAccessorConstruct)
				{
					if (!expression.construct.expression)
					{
						trace('invalid 38');
					}
					if (doSuper && !superExpression)
					{
						superExpression = translateExpression(expression.construct.expression, 0, toString, construct);
					}
					else
					{
						js += '[' + translateExpression(expression.construct.expression, 0, toString, construct) + ']';
					}
				}
				else if (expression.construct.constructor == Construct.NamespaceQualifierConstruct)
				{
					namespaceIdentifier = expression.construct.namespaceIdentifier;
					var namespaceObj = namespaceIdentifier.namespaceObj;
					var namespaceString = namespaceObj.normalizedImportID;
					if (namespaceIdentifier.isStatic && !namespaceString)
					{
						namespaceString = namespaceIdentifier.scope.name + '.' + namespaceIdentifier.name;
					}
					else if (!namespaceString)
					{
						namespaceString = (identifier.isPrivate) ? ('$$this.$$' + ((construct.packageName && _extendsNameConflict ? construct.packageName : '') + construct.identifierToken.data).split('.').join('') + '.$$ns.') + namespaceIdentifier.name : '$$this.' + namespaceIdentifier.name;
					}
					js += '.$$namespace(' + namespaceString + ').' + expression.construct.namespaceIdentifierToken.data;
				}
				else if (expression.construct.constructor == Construct.ParenConstruct)
				{
					if (!expression.construct.expression)
					{
						trace('invalid 39');
					}
					js += '(' + translateExpression(expression.construct.expression, 0, toString, construct) + ')';
				}
				else if (expression.construct.constructor == Construct.AtIdentifierConstruct)
				{
					throw $es4.$$primitive(new Error('E4X is not supported'));
				}
				if (expression.construct.constructor == Construct.FunctionCallConstruct || (expression.nextPropertyExpression && expression.nextPropertyExpression.construct.constructor == Construct.FunctionCallConstruct))
				{
					var functionCallExpression = (expression.construct.constructor == Construct.FunctionCallConstruct) ? expression : expression.nextPropertyExpression;
					if (doSuperConstructor)
					{
						js = getTranslatedTypeName(construct.extendsNameConstruct.type) + '.$$constructor.call($$this';
						if (functionCallExpression.construct.argumentExpressions.length)
						{
							js += ', ';
						}
						doSuperConstructor = false;
					}
					else
					{
						js += '(';
					}
					for (var i = 0; i < functionCallExpression.construct.argumentExpressions.length; i++)
					{
						if (!functionCallExpression.construct.argumentExpressions[i])
						{
							trace('invalid 40');
						}
						js += translateExpression(functionCallExpression.construct.argumentExpressions[i], 0, toString, construct);
						if ((i + 1) < functionCallExpression.construct.argumentExpressions.length)
						{
							js += ', ';
						}
					}
					js += ')';
					if (expression.nextPropertyExpression)
					{
						expression = functionCallExpression;
					}
					continue;
				}
			}
			if (doSuper && superExpression)
			{
				js = js.split('***REPLACE1***').join(superExpression);
				if (setString)
				{
					js = js.split('***REPLACE2***').join('set');
					js = js.split('***REPLACE3***').join(setString);
					state.doAssignment = false;
				}
				else
				{
					js = js.split('***REPLACE2***').join('func');
					js = js.split('***REPLACE3***').join('undefined');
				}
			}
			if (!state.doPostfix && !state.doPrefix)
			{
				if (state.doAssignment && operator == '||=' || operator == '&&=')
				{
					js += ' = ' + js + ((operator == '&&=') ? ' && (' : ' || (') + setString + ')';
				}
				else if (state.doAssignment)
				{
					js += ' ' + operator + ' ' + setString;
				}
			}
			else if (state.doPrefix)
			{
				js = operator + js;
			}
			else if (state.doPostfix)
			{
				js += operator;
			}
			if (state.doDelete)
			{
				js = 'delete ' + js;
			}
			if (state.doNew)
			{
				js = '$es4.$$primitive(new ' + js + ')';
			}
			return js;
		}
;

		function isCoerceRequired($$$$statementOrExpression, $$$$typeName, $$$$valueJS) 
		{
			//set default parameter values
			var statementOrExpression = $$$$statementOrExpression;
			var typeName = $$$$typeName;
			var valueJS = $$$$valueJS;

			if (!statementOrExpression.coerce)
			{
				return false;
			}
			switch (typeName)
			{
				case 'uint':
					if (Number(valueJS) == (valueJS >>> 0))
					{
						return false;
					}
					break;
				case 'int':
					if (Number(valueJS) == (valueJS >> 0))
					{
						return false;
					}
					break;
			}
			return true;
		}
;

		function print($$$$string, $$$$tabs, $$$$newlines, $$$$preNewLines) 
		{
			//set default parameter values
			var string = $$$$string;
			var tabs = $$$$tabs;
			var newlines = $$$$newlines;
			var preNewLines = (3 > arguments.length - 1) ? null : $$$$preNewLines;

			if (tabs)
			{
				for (var i = 0; i < tabs; i++)
				{
					string = '\t' + string;
				}
			}
			if (newlines)
			{
				for (var i = 0; i < newlines; i++)
				{
					string += '\n';
				}
			}
			if (preNewLines)
			{
				for (var i = 0; i < preNewLines; i++)
				{
					string = '\n' + string;
				}
			}
			return string;
		}
;
	});
	function TranslatorPrototype()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof TranslatorPrototype) || $$this.$$TranslatorPrototype !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], TranslatorPrototype) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			TranslatorPrototype.$$construct($$this, $$args);
		}
	}

	//construct
	TranslatorPrototype.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (TranslatorPrototype.$$cinit !== undefined) TranslatorPrototype.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$TranslatorPrototype', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		TranslatorPrototype.$$iinit($$this);

		//call constructor
		if (args !== undefined) TranslatorPrototype.$$constructor.apply($$this, args);
	});

	//initializer
	TranslatorPrototype.$$iinit = (function ($$this)
	{
	});

	//constructor
	TranslatorPrototype.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(TranslatorPrototype, null, 'sweetrush.core::TranslatorPrototype');
})();
//sweetrush.core.TranslatorPrototype


//sweetrush.obj.Construct
$es4.$$package('sweetrush.obj').Construct = (function ()
{
	//properties
	var $$j = {};
	Construct.Expression = 'Expression';
	Construct.EmptyExpression = 'EmptyExpression';
	Construct.BinaryExpression = 'BinaryExpression';
	Construct.ObjectExpression = 'ObjectExpression';
	Construct.ArrayExpression = 'ArrayExpression';
	Construct.NewExpression = 'NewExpression';
	Construct.PropertyExpression = 'PropertyExpression';
	Construct.IdentifierConstruct = 'IdentifierConstruct';
	Construct.NamespaceQualifierConstruct = 'NamespaceQualifierConstruct';
	Construct.AtIdentifierConstruct = 'AtIdentifierConstruct';
	Construct.DotConstruct = 'DotConstruct';
	Construct.SuperConstruct = 'SuperConstruct';
	Construct.ThisConstruct = 'ThisConstruct';
	Construct.E4XSearchConstruct = 'E4XSearchConstruct';
	Construct.ArrayAccessorConstruct = 'ArrayAccessorConstruct';
	Construct.VectorConstruct = 'VectorConstruct';
	Construct.TypeConstruct = 'TypeConstruct';
	Construct.ParenConstruct = 'ParenConstruct';
	Construct.ObjectConstruct = 'ObjectConstruct';
	Construct.ArrayConstruct = 'ArrayConstruct';
	Construct.TernaryExpression = 'TernaryExpression';
	Construct.RegExpression = 'RegExpression';
	Construct.ParenExpression = 'ParenExpression';
	Construct.BooleanExpression = 'BooleanExpression';
	Construct.NumberExpression = 'NumberExpression';
	Construct.PrefixExpression = 'PrefixExpression';
	Construct.PostfixExpression = 'PostfixExpression';
	Construct.StringExpression = 'StringExpression';
	Construct.FunctionExpression = 'FunctionExpression';
	Construct.FunctionCallConstruct = 'FunctionCallConstruct';
	Construct.RootConstruct = 'RootConstruct';
	Construct.PackageConstruct = 'PackageConstruct';
	Construct.ClassConstruct = 'ClassConstruct';
	Construct.InterfaceConstruct = 'InterfaceConstruct';
	Construct.NameConstruct = 'NameConstruct';
	Construct.ImportConstruct = 'ImportConstruct';
	Construct.UseConstruct = 'UseConstruct';
	Construct.UseStatement = 'UseStatement';
	Construct.ForEachStatement = 'ForEachStatement';
	Construct.ReturnExpression = 'ReturnExpression';
	Construct.DeleteExpression = 'DeleteExpression';
	Construct.XMLExpression = 'XMLExpression';
	Construct.XMLListExpression = 'XMLListExpression';
	Construct.ForStatement = 'ForStatement';
	Construct.ForInStatement = 'ForInStatement';
	Construct.LabelStatement = 'LabelStatement';
	Construct.WhileStatement = 'WhileStatement';
	Construct.DoWhileStatement = 'DoWhileStatement';
	Construct.IfStatement = 'IfStatement';
	Construct.ElseIfStatement = 'ElseIfStatement';
	Construct.ElseStatement = 'ElseStatement';
	Construct.EmptyStatement = 'EmptyStatement';
	Construct.TryStatement = 'TryStatement';
	Construct.CatchStatement = 'CatchStatement';
	Construct.FinallyStatement = 'FinallyStatement';
	Construct.BreakStatement = 'BreakStatement';
	Construct.ContinueStatement = 'ContinueStatement';
	Construct.ThrowStatement = 'ThrowStatement';
	Construct.SwitchStatement = 'SwitchStatement';
	Construct.CaseStatement = 'CaseStatement';
	Construct.VarStatement = 'VarStatement';
	Construct.MethodConstruct = 'MethodConstruct';
	Construct.ObjectPropertyConstruct = 'ObjectPropertyConstruct';
	Construct.ParameterConstruct = 'ParameterConstruct';
	Construct.PropertyConstruct = 'PropertyConstruct';
	Construct.MetaDataConstruct = 'MetaDataConstruct';

	//class pre initializer
	Construct.$$sinit = (function ()
	{
		Construct.$$sinit = undefined;

		//set prototype and constructor
		Construct.prototype = Object.create(Object.prototype);
		Object.defineProperty(Construct.prototype, "constructor", { value: Construct, enumerable: false });

		//hold private values
		Object.defineProperty(Construct.prototype, '$$v', {value:{}});
	});

	//class initializer
	Construct.$$cinit = (function ()
	{
		Construct.$$cinit = undefined;
	});

	//public static method
	Construct.getNewExpression = (function ($$$$token, $$$$expression)
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		//set default parameter values
		var token = $$$$token;
		var expression = (1 > arguments.length - 1) ? null : $$$$expression;

		return {constructor:Construct.Expression, token:token, expression:expression};
	});

	//public static method
	Construct.getNewEmptyExpression = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.EmptyExpression};
	});

	//public static method
	Construct.getNewBinaryExpression = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.BinaryExpression, token:null, leftExpression:null, rightExpression:null};
	});

	//public static method
	Construct.getNewObjectExpression = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.ObjectExpression, objectPropertyConstructs:[]};
	});

	//public static method
	Construct.getNewArrayExpression = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.ArrayExpression, valueExpressions:[]};
	});

	//public static method
	Construct.getNewNewExpression = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.NewExpression, expression:null};
	});

	//public static method
	Construct.getNewPropertyExpression = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.PropertyExpression, construct:null, nextPropertyExpression:null, root:false};
	});

	//public static method
	Construct.getNewIdentifierConstruct = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.IdentifierConstruct, identifierToken:null, identifer:null};
	});

	//public static method
	Construct.getNewNamespaceQualifierConstruct = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.NamespaceQualifierConstruct, namespaceQualifierToken:null, identifierToken:null, namespaceIdentifierToken:null, namespaceIdentifier:null, identifer:null};
	});

	//public static method
	Construct.getNewAtIdentifierConstruct = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.AtIdentifierConstruct};
	});

	//public static method
	Construct.getNewDotConstruct = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.DotConstruct, identifierToken:null};
	});

	//public static method
	Construct.getNewSuperConstruct = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.SuperConstruct, superToken:null, identifer:null};
	});

	//public static method
	Construct.getNewThisConstruct = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.ThisConstruct, thisToken:null, identifer:null};
	});

	//public static method
	Construct.getNewE4XSearchConstruct = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.E4XSearchConstruct, expression:null};
	});

	//public static method
	Construct.getNewArrayAccessorConstruct = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.ArrayAccessorConstruct, expression:null};
	});

	//public static method
	Construct.getNewVectorConstruct = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.VectorConstruct, nameConstruct:null};
	});

	//public static method
	Construct.getNewTypeConstruct = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.TypeConstruct, mulToken:null, voidToken:null, nameConstruct:null, vectorNameConstruct:null, identifer:null};
	});

	//public static method
	Construct.getNewParenConstruct = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.ParenConstruct, expression:null};
	});

	//public static method
	Construct.getNewObjectConstruct = (function ($$$$expression)
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		//set default parameter values
		var expression = $$$$expression;

		return {constructor:Construct.ObjectConstruct, expression:expression};
	});

	//public static method
	Construct.getNewArrayConstruct = (function ($$$$expression)
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		//set default parameter values
		var expression = $$$$expression;

		return {constructor:Construct.ArrayConstruct, expression:expression};
	});

	//public static method
	Construct.getNewTernaryExpression = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.TernaryExpression, conditionExpression:null, trueExpression:null, falseExpression:null};
	});

	//public static method
	Construct.getNewRegExpression = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.RegExpression, string:null};
	});

	//public static method
	Construct.getNewParenExpression = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.ParenExpression, expression:null};
	});

	//public static method
	Construct.getNewBooleanExpression = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.BooleanExpression, booleanToken:null};
	});

	//public static method
	Construct.getNewNumberExpression = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.NumberExpression, numberToken:null};
	});

	//public static method
	Construct.getNewPrefixExpression = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.PrefixExpression, incrementToken:null, decrementToken:null, expression:null};
	});

	//public static method
	Construct.getNewPostfixExpression = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.PostfixExpression, incrementToken:null, decrementToken:null, expression:null};
	});

	//public static method
	Construct.getNewStringExpression = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.StringExpression, stringToken:null, stringChunkTokens:[], stringEndToken:null};
	});

	//public static method
	Construct.getNewFunctionExpression = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.FunctionExpression, identifierToken:null, parameterConstructs:[], typeConstruct:null, bodyStatements:[], namedFunctionExpressions:[], identifer:null, type:null};
	});

	//public static method
	Construct.getNewFunctionCallConstruct = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.FunctionCallConstruct, argumentExpressions:[]};
	});

	//public static method
	Construct.getNewRootConstruct = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.RootConstruct, classConstructs:[], interfaceConstructs:[], methodConstructs:[], propertyConstructs:[], importConstructs:[], packageConstruct:null, namespacePropertyConstructs:[], instancePropertyConstructs:[], staticPropertyConstructs:[], instanceMethodConstructs:[], staticMethodConstructs:[], instanceAccessorConstructs:[], staticAccessorConstructs:[]};
	});

	//public static method
	Construct.getNewPackageConstruct = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.PackageConstruct, nameConstruct:null, classConstruct:null, importConstructs:[], interfaceConstruct:null, methodConstruct:null, propertyConstruct:null, rootConstruct:null, useConstructs:[]};
	});

	//public static method
	Construct.getNewClassConstruct = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.ClassConstruct, identifierToken:null, extendsNameConstruct:null, importConstructs:[], initializerStatements:[], implementsNameConstructs:[], metaDataConstructs:[], constructorMethodConstruct:null, propertyConstructs:[], methodConstructs:[], isInternal:false, packageConstruct:null, rootConstruct:null, dynamicToken:null, useConstructs:[], UNIMPLEMENTEDToken:null, namespacePropertyConstructs:[], instancePropertyConstructs:[], staticPropertyConstructs:[], instanceMethodConstructs:[], staticMethodConstructs:[], instanceAccessorConstructs:[], staticAccessorConstructs:[], packageName:null, identifer:null, type:null};
	});

	//public static method
	Construct.getNewInterfaceConstruct = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.InterfaceConstruct, identifierToken:null, extendsNameConstructs:[], methodConstructs:[], propertyConstructs:[], isInternal:false, packageConstruct:null, rootConstruct:null, packageName:null, identifer:null, type:null};
	});

	//public static method
	Construct.getNewNameConstruct = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.NameConstruct, identifierTokens:[]};
	});

	//public static method
	Construct.nameConstructToString = (function ($$$$nameConstruct)
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		//set default parameter values
		var nameConstruct = $$$$nameConstruct;

		if (nameConstruct.identifierTokens.length == 1)
		{
			return nameConstruct.identifierTokens[0].data;
		}
		var data = [];
		for (var i = 0; i < nameConstruct.identifierTokens.length; i++)
		{
			data.push(nameConstruct.identifierTokens[i].data);
		}
		return data.join('.');
	});

	//public static method
	Construct.getNewImportConstruct = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.ImportConstruct, nameConstruct:null, mulToken:null};
	});

	//public static method
	Construct.getNewUseConstruct = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.UseConstruct, useToken:null, namespaceIdentifierToken:null};
	});

	//public static method
	Construct.getNewUseStatement = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.UseStatement, useToken:null, namespaceIdentifierToken:null};
	});

	//public static method
	Construct.getNewForEachStatement = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.ForEachStatement, variableStatement:null, arrayExpression:null, bodyStatements:[], index:null};
	});

	//public static method
	Construct.getNewReturnExpression = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.ReturnExpression, expression:null, type:null, expectedType:null};
	});

	//public static method
	Construct.getNewDeleteExpression = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.DeleteExpression, expression:null};
	});

	//public static method
	Construct.getNewXMLExpression = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.XMLExpression, string:null};
	});

	//public static method
	Construct.getNewXMLListExpression = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.XMLListExpression, string:null};
	});

	//public static method
	Construct.getNewForStatement = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.ForStatement, variableStatement:null, conditionExpression:null, afterthoughtExpression:null, bodyStatements:[]};
	});

	//public static method
	Construct.getNewForInStatement = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.ForInStatement, variableStatement:null, objectExpression:null, bodyStatements:[], index:null};
	});

	//public static method
	Construct.getNewLabelStatement = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.LabelStatement, identifierToken:null, identifer:null};
	});

	//public static method
	Construct.getNewWhileStatement = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.WhileStatement, conditionExpression:null, bodyStatements:[]};
	});

	//public static method
	Construct.getNewDoWhileStatement = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.DoWhileStatement, conditionExpression:null, bodyStatements:[]};
	});

	//public static method
	Construct.getNewIfStatement = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.IfStatement, conditionExpression:null, bodyStatements:[], elseIfStatements:[], elseStatement:null};
	});

	//public static method
	Construct.getNewElseIfStatement = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.ElseIfStatement, conditionExpression:null, bodyStatements:[]};
	});

	//public static method
	Construct.getNewElseStatement = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.ElseStatement, bodyStatements:[]};
	});

	//public static method
	Construct.getNewEmptyStatement = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.EmptyStatement, bodyStatements:[]};
	});

	//public static method
	Construct.getNewTryStatement = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.TryStatement, bodyStatements:[], catchStatements:[], finallyStatement:null};
	});

	//public static method
	Construct.getNewCatchStatement = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.CatchStatement, identifierToken:null, typeConstruct:null, bodyStatements:[], index:null, identifer:null};
	});

	//public static method
	Construct.getNewFinallyStatement = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.FinallyStatement, bodyStatements:[]};
	});

	//public static method
	Construct.getNewBreakStatement = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.BreakStatement, token:null, identifierToken:null, identifer:null};
	});

	//public static method
	Construct.getNewContinueStatement = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.ContinueStatement, token:null, identifierToken:null, identifer:null};
	});

	//public static method
	Construct.getNewThrowStatement = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.ThrowStatement, token:null, expression:null};
	});

	//public static method
	Construct.getNewSwitchStatement = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.SwitchStatement, valueExpression:null, caseStatements:[]};
	});

	//public static method
	Construct.getNewCaseStatement = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.CaseStatement, valueExpression:null, bodyStatements:[], defaultToken:null};
	});

	//public static method
	Construct.getNewVarStatement = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.VarStatement, identifierToken:null, innerVarStatements:[], typeConstruct:null, valueExpression:null, identifer:null};
	});

	//public static method
	Construct.getNewMethodConstruct = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.MethodConstruct, identifierToken:null, parameterConstructs:[], typeConstruct:null, bodyStatements:[], staticToken:null, overrideToken:null, namespaceToken:null, setToken:null, getToken:null, callsSuper:null, isNative:null, isJavaScript:null, javaScriptString:'', namedFunctionExpressions:[], isInternal:null, packageConstruct:null, rootConstruct:null, UNIMPLEMENTEDToken:null, identifer:null};
	});

	//public static method
	Construct.getNewObjectPropertyConstruct = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.ObjectPropertyConstruct, expression:null, valueExpression:null};
	});

	//public static method
	Construct.getNewParameterConstruct = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.ParameterConstruct, identifierToken:null, typeConstruct:null, valueExpression:null, restToken:null, identifer:null};
	});

	//public static method
	Construct.getNewPropertyConstruct = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.PropertyConstruct, identifierToken:null, typeConstruct:null, namespaceToken:null, namespaceValueToken:null, namespaceKeywordToken:null, staticToken:null, constToken:null, valueExpression:null, isNative:null, isInternal:false, packageConstruct:null, rootConstruct:null, identifer:null};
	});

	//public static method
	Construct.getNewMetaDataConstruct = (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:Construct.MetaDataConstruct, tokens:[]};
	});
	function Construct()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof Construct) || $$this.$$Construct !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Construct) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			Construct.$$construct($$this, $$args);
		}
	}

	//construct
	Construct.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$Construct', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		Construct.$$iinit($$this);

		//call constructor
		if (args !== undefined) Construct.$$constructor.apply($$this, args);
	});

	//initializer
	Construct.$$iinit = (function ($$this)
	{
	});

	//constructor
	Construct.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(Construct, null, 'sweetrush.obj::Construct');
})();
//sweetrush.obj.Construct


//sweetrush.obj.Token
$es4.$$package('sweetrush.obj').Token = (function ()
{
	//imports
	var Lexer;

	//properties
	var $$j = {};
	Object.defineProperty(Token, 'whitespaceCharacters', {
	get:function () { if (Token.$$cinit !== undefined) Token.$$cinit(); return $$j.whitespaceCharacters; },
	set:function (value) { if (Token.$$cinit !== undefined) Token.$$cinit(); $$j.whitespaceCharacters = $es4.$$coerce(value, Object); }
	});

	Object.defineProperty(Token, 'identifierStartCharacters', {
	get:function () { if (Token.$$cinit !== undefined) Token.$$cinit(); return $$j.identifierStartCharacters; },
	set:function (value) { if (Token.$$cinit !== undefined) Token.$$cinit(); $$j.identifierStartCharacters = $es4.$$coerce(value, Object); }
	});

	Token.OpenParenTokenType = 'OpenParenTokenType';
	Token.ClosedParenTokenType = 'ClosedParenTokenType';
	Token.OpenBraceTokenType = 'OpenBraceTokenType';
	Token.ClosedBraceTokenType = 'ClosedBraceTokenType';
	Token.OpenBracketTokenType = 'OpenBracketTokenType';
	Token.ClosedBracketTokenType = 'ClosedBracketTokenType';
	Token.EOSTokenType = 'EOSTokenType';
	Token.PackageTokenType = 'PackageTokenType';
	Token.ImportTokenType = 'ImportTokenType';
	Token.ClassTokenType = 'ClassTokenType';
	Token.InterfaceTokenType = 'InterfaceTokenType';
	Token.NewTokenType = 'NewTokenType';
	Token.UseTokenType = 'UseTokenType';
	Token.CaseTokenType = 'CaseTokenType';
	Token.FunctionTokenType = 'FunctionTokenType';
	Token.GetTokenType = 'GetTokenType';
	Token.SetTokenType = 'SetTokenType';
	Token.RestTokenType = 'RestTokenType';
	Token.ExtendsTokenType = 'ExtendsTokenType';
	Token.ImplementsTokenType = 'ImplementsTokenType';
	Token.CommentTokenType = 'CommentTokenType';
	Token.CommentChunkTokenType = 'CommentChunkTokenType';
	Token.MultiLineCommentTokenType = 'MultiLineCommentTokenType';
	Token.MultiLineCommentChunkTokenType = 'MultiLineCommentChunkTokenType';
	Token.MultiLineCommentEndTokenType = 'MultiLineCommentEndTokenType';
	Token.OverrideTokenType = 'OverrideTokenType';
	Token.StaticTokenType = 'StaticTokenType';
	Token.DynamicTokenType = 'DynamicTokenType';
	Token.FinalTokenType = 'FinalTokenType';
	Token.VarTokenType = 'VarTokenType';
	Token.ConstTokenType = 'ConstTokenType';
	Token.IdentifierTokenType = 'IdentifierTokenType';
	Token.BooleanTokenType = 'BooleanTokenType';
	Token.ThisTokenType = 'ThisTokenType';
	Token.TypeofTokenType = 'TypeofTokenType';
	Token.NullTokenType = 'NullTokenType';
	Token.VoidTokenType = 'VoidTokenType';
	Token.UndefinedTokenType = 'UndefinedTokenType';
	Token.IsTokenType = 'IsTokenType';
	Token.NaNTokenType = 'NaNTokenType';
	Token.InstanceofTokenType = 'InstanceofTokenType';
	Token.ReturnTokenType = 'ReturnTokenType';
	Token.SwitchTokenType = 'SwitchTokenType';
	Token.SuperTokenType = 'SuperTokenType';
	Token.ThrowTokenType = 'ThrowTokenType';
	Token.DotDotTokenType = 'DotDotTokenType';
	Token.DotTokenType = 'DotTokenType';
	Token.NotTokenType = 'NotTokenType';
	Token.BitwiseNotTokenType = 'BitwiseNotTokenType';
	Token.ColonTokenType = 'ColonTokenType';
	Token.CommaTokenType = 'CommaTokenType';
	Token.TernaryTokenType = 'TernaryTokenType';
	Token.IncrementTokenType = 'IncrementTokenType';
	Token.DecrementTokenType = 'DecrementTokenType';
	Token.BreakTokenType = 'BreakTokenType';
	Token.ContinueTokenType = 'ContinueTokenType';
	Token.DefaultTokenType = 'DefaultTokenType';
	Token.InTokenType = 'InTokenType';
	Token.AsTokenType = 'AsTokenType';
	Token.DeleteTokenType = 'DeleteTokenType';
	Token.IfTokenType = 'IfTokenType';
	Token.ElseTokenType = 'ElseTokenType';
	Token.EachTokenType = 'EachTokenType';
	Token.ForTokenType = 'ForTokenType';
	Token.WhileTokenType = 'WhileTokenType';
	Token.DoTokenType = 'DoTokenType';
	Token.WithTokenType = 'WithTokenType';
	Token.TryTokenType = 'TryTokenType';
	Token.CatchTokenType = 'CatchTokenType';
	Token.RegExpTokenType = 'RegExpTokenType';
	Token.SpecialUFOTokenType = 'SpecialUFOTokenType';
	Token.FinallyTokenType = 'FinallyTokenType';
	Token.AtTokenType = 'AtTokenType';
	Token.BitwiseLeftShiftAssignmentTokenType = 'BitwiseLeftShiftAssignmentTokenType';
	Token.BitwiseRightShiftAssignmentTokenType = 'BitwiseRightShiftAssignmentTokenType';
	Token.BitwiseUnsignedRightShiftAssignmentTokenType = 'BitwiseUnsignedRightShiftAssignmentTokenType';
	Token.BitwiseAndAssignmentTokenType = 'BitwiseAndAssignmentTokenType';
	Token.BitwiseOrAssignmentTokenType = 'BitwiseOrAssignmentTokenType';
	Token.BitwiseXorAssignmentTokenType = 'BitwiseXorAssignmentTokenType';
	Token.AddWithAssignmentTokenType = 'AddWithAssignmentTokenType';
	Token.DivWithAssignmentTokenType = 'DivWithAssignmentTokenType';
	Token.ModWithAssignmentTokenType = 'ModWithAssignmentTokenType';
	Token.MulWithAssignmentTokenType = 'MulWithAssignmentTokenType';
	Token.SubWithAssignmentTokenType = 'SubWithAssignmentTokenType';
	Token.EqualityTokenType = 'EqualityTokenType';
	Token.RelationalTokenType = 'RelationalTokenType';
	Token.BitwiseAndTokenType = 'BitwiseAndTokenType';
	Token.BitwiseXorTokenType = 'BitwiseXorTokenType';
	Token.BitwiseOrTokenType = 'BitwiseOrTokenType';
	Token.AndTokenType = 'AndTokenType';
	Token.AndWithAssignmentTokenType = 'AndWithAssignmentTokenType';
	Token.OrTokenType = 'OrTokenType';
	Token.OrWithAssignmentTokenType = 'OrWithAssignmentTokenType';
	Token.BitwiseLeftShiftTokenType = 'BitwiseLeftShiftTokenType';
	Token.BitwiseRightShiftTokenType = 'BitwiseRightShiftTokenType';
	Token.BitwiseUnsignedRightShiftTokenType = 'BitwiseUnsignedRightShiftTokenType';
	Token.SubTokenType = 'SubTokenType';
	Token.AddTokenType = 'AddTokenType';
	Token.DivTokenType = 'DivTokenType';
	Token.MulTokenType = 'MulTokenType';
	Token.ModTokenType = 'ModTokenType';
	Token.AssignmentTokenType = 'AssignmentTokenType';
	Token.NamespaceKeywordTokenType = 'NamespaceKeywordTokenType';
	Token.XMLTokenType = 'XMLTokenType';
	Token.XMLIdentifierTokenType = 'XMLIdentifierTokenType';
	Token.XMLTextTokenType = 'XMLTextTokenType';
	Token.XMLCDATATokenType = 'XMLCDATATokenType';
	Token.XMLCDATAChunkTokenType = 'XMLCDATAChunkTokenType';
	Token.XMLCDATAEndTokenType = 'XMLCDATAEndTokenType';
	Token.XMLOpenArrowTokenType = 'XMLOpenArrowTokenType';
	Token.XMLClosedArrowTokenType = 'XMLClosedArrowTokenType';
	Token.XMLForwardSlashTokenType = 'XMLForwardSlashTokenType';
	Token.NamespaceQualifierTokenType = 'NamespaceQualifierTokenType';
	Token.VectorDotOpenArrowTokenType = 'VectorDotOpenArrowTokenType';
	Token.VectorClosedArrowTokenType = 'VectorClosedArrowTokenType';
	Token.StringTokenType = 'StringTokenType';
	Token.StringChunkTokenType = 'StringChunkTokenType';
	Token.StringMultiLineDelimiterTokenType = 'StringMultiLineDelimiterTokenType';
	Token.StringEndTokenType = 'StringEndTokenType';
	Token.NumberTokenType = 'NumberTokenType';
	Token.SpaceTokenType = 'SpaceTokenType';
	Token.TabTokenType = 'TabTokenType';
	Token.NewLineTokenType = 'NewLineTokenType';
	Token.UFOTokenType = 'UFOTokenType';
	Object.defineProperty(Token, 'tokenFunctions', {
	get:function () { if (Token.$$cinit !== undefined) Token.$$cinit(); return $$j.tokenFunctions; },
	set:function (value) { if (Token.$$cinit !== undefined) Token.$$cinit(); $$j.tokenFunctions = $es4.$$coerce(value, Object); }
	});


	//class pre initializer
	Token.$$sinit = (function ()
	{
		Token.$$sinit = undefined;

		//initialize imports
		Lexer = $es4.$$['sweetrush.core'].Lexer;

		//set prototype and constructor
		Token.prototype = Object.create(Object.prototype);
		Object.defineProperty(Token.prototype, "constructor", { value: Token, enumerable: false });

		//hold private values
		Object.defineProperty(Token.prototype, '$$v', {value:{}});
	});

	//class initializer
	Token.$$cinit = (function ()
	{
		Token.$$cinit = undefined;

		//initialize properties
		$$j.whitespaceCharacters = $es4.$$coerce({'\u0020':true, '\u0009':true, '\u000A':true, '\u000C':true, '\u000D':true}, Object);
		$$j.identifierStartCharacters = $es4.$$coerce({'_':true, '$':true, 'a':true, 'b':true, 'c':true, 'd':true, 'e':true, 'f':true, 'g':true, 'h':true, 'i':true, 'j':true, 'k':true, 'l':true, 'm':true, 'n':true, 'o':true, 'p':true, 'q':true, 'r':true, 's':true, 't':true, 'u':true, 'v':true, 'w':true, 'x':true, 'y':true, 'z':true, 'A':true, 'B':true, 'C':true, 'D':true, 'E':true, 'F':true, 'G':true, 'H':true, 'I':true, 'J':true, 'K':true, 'L':true, 'M':true, 'N':true, 'O':true, 'P':true, 'Q':true, 'R':true, 'S':true, 'T':true, 'U':true, 'V':true, 'W':true, 'X':true, 'Y':true, 'Z':true}, Object);
		$$j.tokenFunctions = $es4.$$coerce({}, Object);
	
		Token.tokenFunctions[Token.OpenParenTokenType] = {};
		Token.tokenFunctions[Token.ClosedParenTokenType] = {};
		Token.tokenFunctions[Token.OpenBraceTokenType] = {};
		Token.tokenFunctions[Token.ClosedBraceTokenType] = {};
		Token.tokenFunctions[Token.OpenBracketTokenType] = {};
		Token.tokenFunctions[Token.ClosedBracketTokenType] = {};
		Token.tokenFunctions[Token.EOSTokenType] = {};
		Token.tokenFunctions[Token.PackageTokenType] = {};
		Token.tokenFunctions[Token.ImportTokenType] = {};
		Token.tokenFunctions[Token.ClassTokenType] = {};
		Token.tokenFunctions[Token.InterfaceTokenType] = {};
		Token.tokenFunctions[Token.NewTokenType] = {};
		Token.tokenFunctions[Token.UseTokenType] = {};
		Token.tokenFunctions[Token.CaseTokenType] = {};
		Token.tokenFunctions[Token.FunctionTokenType] = {};
		Token.tokenFunctions[Token.GetTokenType] = {};
		Token.tokenFunctions[Token.SetTokenType] = {};
		Token.tokenFunctions[Token.RestTokenType] = {};
		Token.tokenFunctions[Token.ExtendsTokenType] = {};
		Token.tokenFunctions[Token.ImplementsTokenType] = {};
		Token.tokenFunctions[Token.CommentTokenType] = {};
		Token.tokenFunctions[Token.CommentChunkTokenType] = {};
		Token.tokenFunctions[Token.MultiLineCommentTokenType] = {};
		Token.tokenFunctions[Token.MultiLineCommentChunkTokenType] = {};
		Token.tokenFunctions[Token.MultiLineCommentEndTokenType] = {};
		Token.tokenFunctions[Token.OverrideTokenType] = {};
		Token.tokenFunctions[Token.StaticTokenType] = {};
		Token.tokenFunctions[Token.DynamicTokenType] = {};
		Token.tokenFunctions[Token.FinalTokenType] = {};
		Token.tokenFunctions[Token.VarTokenType] = {};
		Token.tokenFunctions[Token.ConstTokenType] = {};
		Token.tokenFunctions[Token.IdentifierTokenType] = {};
		Token.tokenFunctions[Token.BooleanTokenType] = {};
		Token.tokenFunctions[Token.ThisTokenType] = {};
		Token.tokenFunctions[Token.TypeofTokenType] = {};
		Token.tokenFunctions[Token.NullTokenType] = {};
		Token.tokenFunctions[Token.VoidTokenType] = {};
		Token.tokenFunctions[Token.UndefinedTokenType] = {};
		Token.tokenFunctions[Token.IsTokenType] = {};
		Token.tokenFunctions[Token.NaNTokenType] = {};
		Token.tokenFunctions[Token.InstanceofTokenType] = {};
		Token.tokenFunctions[Token.ReturnTokenType] = {};
		Token.tokenFunctions[Token.SwitchTokenType] = {};
		Token.tokenFunctions[Token.SuperTokenType] = {};
		Token.tokenFunctions[Token.ThrowTokenType] = {};
		Token.tokenFunctions[Token.DotDotTokenType] = {};
		Token.tokenFunctions[Token.DotTokenType] = {};
		Token.tokenFunctions[Token.NotTokenType] = {};
		Token.tokenFunctions[Token.BitwiseNotTokenType] = {};
		Token.tokenFunctions[Token.ColonTokenType] = {};
		Token.tokenFunctions[Token.CommaTokenType] = {};
		Token.tokenFunctions[Token.TernaryTokenType] = {};
		Token.tokenFunctions[Token.IncrementTokenType] = {};
		Token.tokenFunctions[Token.DecrementTokenType] = {};
		Token.tokenFunctions[Token.BreakTokenType] = {};
		Token.tokenFunctions[Token.ContinueTokenType] = {};
		Token.tokenFunctions[Token.DefaultTokenType] = {};
		Token.tokenFunctions[Token.InTokenType] = {};
		Token.tokenFunctions[Token.AsTokenType] = {};
		Token.tokenFunctions[Token.DeleteTokenType] = {};
		Token.tokenFunctions[Token.IfTokenType] = {};
		Token.tokenFunctions[Token.ElseTokenType] = {};
		Token.tokenFunctions[Token.EachTokenType] = {};
		Token.tokenFunctions[Token.ForTokenType] = {};
		Token.tokenFunctions[Token.WhileTokenType] = {};
		Token.tokenFunctions[Token.DoTokenType] = {};
		Token.tokenFunctions[Token.WithTokenType] = {};
		Token.tokenFunctions[Token.TryTokenType] = {};
		Token.tokenFunctions[Token.CatchTokenType] = {};
		Token.tokenFunctions[Token.RegExpTokenType] = {};
		Token.tokenFunctions[Token.SpecialUFOTokenType] = {};
		Token.tokenFunctions[Token.FinallyTokenType] = {};
		Token.tokenFunctions[Token.AtTokenType] = {};
		Token.tokenFunctions[Token.BitwiseLeftShiftAssignmentTokenType] = {};
		Token.tokenFunctions[Token.BitwiseRightShiftAssignmentTokenType] = {};
		Token.tokenFunctions[Token.BitwiseUnsignedRightShiftAssignmentTokenType] = {};
		Token.tokenFunctions[Token.BitwiseAndAssignmentTokenType] = {};
		Token.tokenFunctions[Token.BitwiseOrAssignmentTokenType] = {};
		Token.tokenFunctions[Token.BitwiseXorAssignmentTokenType] = {};
		Token.tokenFunctions[Token.AddWithAssignmentTokenType] = {};
		Token.tokenFunctions[Token.DivWithAssignmentTokenType] = {};
		Token.tokenFunctions[Token.ModWithAssignmentTokenType] = {};
		Token.tokenFunctions[Token.MulWithAssignmentTokenType] = {};
		Token.tokenFunctions[Token.SubWithAssignmentTokenType] = {};
		Token.tokenFunctions[Token.EqualityTokenType] = {};
		Token.tokenFunctions[Token.RelationalTokenType] = {};
		Token.tokenFunctions[Token.BitwiseAndTokenType] = {};
		Token.tokenFunctions[Token.BitwiseXorTokenType] = {};
		Token.tokenFunctions[Token.BitwiseOrTokenType] = {};
		Token.tokenFunctions[Token.AndTokenType] = {};
		Token.tokenFunctions[Token.AndWithAssignmentTokenType] = {};
		Token.tokenFunctions[Token.OrTokenType] = {};
		Token.tokenFunctions[Token.OrWithAssignmentTokenType] = {};
		Token.tokenFunctions[Token.BitwiseLeftShiftTokenType] = {};
		Token.tokenFunctions[Token.BitwiseRightShiftTokenType] = {};
		Token.tokenFunctions[Token.BitwiseUnsignedRightShiftTokenType] = {};
		Token.tokenFunctions[Token.SubTokenType] = {};
		Token.tokenFunctions[Token.AddTokenType] = {};
		Token.tokenFunctions[Token.DivTokenType] = {};
		Token.tokenFunctions[Token.MulTokenType] = {};
		Token.tokenFunctions[Token.ModTokenType] = {};
		Token.tokenFunctions[Token.AssignmentTokenType] = {};
		Token.tokenFunctions[Token.NamespaceKeywordTokenType] = {};
		Token.tokenFunctions[Token.XMLTokenType] = {};
		Token.tokenFunctions[Token.XMLIdentifierTokenType] = {};
		Token.tokenFunctions[Token.XMLTextTokenType] = {};
		Token.tokenFunctions[Token.XMLCDATATokenType] = {};
		Token.tokenFunctions[Token.XMLCDATAChunkTokenType] = {};
		Token.tokenFunctions[Token.XMLCDATAEndTokenType] = {};
		Token.tokenFunctions[Token.XMLOpenArrowTokenType] = {};
		Token.tokenFunctions[Token.XMLClosedArrowTokenType] = {};
		Token.tokenFunctions[Token.XMLForwardSlashTokenType] = {};
		Token.tokenFunctions[Token.NamespaceQualifierTokenType] = {};
		Token.tokenFunctions[Token.VectorDotOpenArrowTokenType] = {};
		Token.tokenFunctions[Token.VectorClosedArrowTokenType] = {};
		Token.tokenFunctions[Token.StringTokenType] = {};
		Token.tokenFunctions[Token.StringChunkTokenType] = {};
		Token.tokenFunctions[Token.StringMultiLineDelimiterTokenType] = {};
		Token.tokenFunctions[Token.StringEndTokenType] = {};
		Token.tokenFunctions[Token.NumberTokenType] = {};
		Token.tokenFunctions[Token.SpaceTokenType] = {};
		Token.tokenFunctions[Token.TabTokenType] = {};
		Token.tokenFunctions[Token.NewLineTokenType] = {};
		Token.tokenFunctions[Token.UFOTokenType] = {};
		Token.tokenFunctions[Token.OpenParenTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) == '(') ? Token.getNewResult(Token.getNewToken(Token.OpenParenTokenType, '('), 0) : null;
}
;
		Token.tokenFunctions[Token.ClosedParenTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) == ')') ? Token.getNewResult(Token.getNewToken(Token.ClosedParenTokenType, ')'), 0) : null;
}
;
		Token.tokenFunctions[Token.OpenBraceTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) == '{') ? Token.getNewResult(Token.getNewToken(Token.OpenBraceTokenType, '{'), 0) : null;
}
;
		Token.tokenFunctions[Token.ClosedBraceTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) == '}') ? Token.getNewResult(Token.getNewToken(Token.ClosedBraceTokenType, '}'), 0) : null;
}
;
		Token.tokenFunctions[Token.OpenBracketTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) == '[') ? Token.getNewResult(Token.getNewToken(Token.OpenBracketTokenType, '['), 0) : null;
}
;
		Token.tokenFunctions[Token.ClosedBracketTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) == ']') ? Token.getNewResult(Token.getNewToken(Token.ClosedBracketTokenType, ']'), 0) : null;
}
;
		Token.tokenFunctions[Token.EOSTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) == ';') ? Token.getNewResult(Token.getNewToken(Token.EOSTokenType, ';'), 0) : null;
}
;
		Token.tokenFunctions[Token.PackageTokenType].keyword = 'package';
		Token.tokenFunctions[Token.PackageTokenType].terminator = /^([\s]|\{)/;
		Token.tokenFunctions[Token.PackageTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 'p' || input.charAt(1) != 'a') ? null : Token.keywordFind(input, Token.PackageTokenType, [Token.NewLineTokenType, Token.TabTokenType, Token.SpaceTokenType, Token.IdentifierTokenType, Token.DotTokenType]);
}
;
		Token.tokenFunctions[Token.ImportTokenType].keyword = 'import';
		Token.tokenFunctions[Token.ImportTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 'i' || input.charAt(1) != 'm') ? null : Token.keywordFind2(input, 'import', Token.ImportTokenType, Token.identifierStartCharacters, true);
}
;
		Token.tokenFunctions[Token.ClassTokenType].keyword = 'class';
		Token.tokenFunctions[Token.ClassTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 'c' || input.charAt(1) != 'l') ? null : Token.keywordFind2(input, 'class', Token.ClassTokenType, Token.identifierStartCharacters, true);
}
;
		Token.tokenFunctions[Token.InterfaceTokenType].keyword = 'interface';
		Token.tokenFunctions[Token.InterfaceTokenType].terminator = /^[\s]/;
		Token.tokenFunctions[Token.InterfaceTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 'i' || input.charAt(1) != 'n') ? null : Token.keywordFind2(input, 'interface', Token.InterfaceTokenType, Token.identifierStartCharacters, true);
}
;
		Token.tokenFunctions[Token.NewTokenType].keyword = 'new';
		Token.tokenFunctions[Token.NewTokenType].terminator = /^[\s]/;
		Token.tokenFunctions[Token.NewTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 'n' || input.charAt(1) != 'e') ? null : Token.keywordFind(input, Token.NewTokenType);
}
;
		Token.tokenFunctions[Token.UseTokenType].keyword = 'use';
		Token.tokenFunctions[Token.UseTokenType].terminator = /^[\s]/;
		Token.tokenFunctions[Token.UseTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 'u' || input.charAt(1) != 's') ? null : Token.keywordFind(input, Token.UseTokenType);
}
;
		Token.tokenFunctions[Token.CaseTokenType].keyword = 'case';
		Token.tokenFunctions[Token.CaseTokenType].terminator = /^[\s]/;
		Token.tokenFunctions[Token.CaseTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 'c' || input.charAt(1) != 'a') ? null : Token.keywordFind(input, Token.CaseTokenType);
}
;
		Token.tokenFunctions[Token.FunctionTokenType].keyword = 'function';
		Token.tokenFunctions[Token.FunctionTokenType].terminator = /^[\s]|\(/;
		Token.tokenFunctions[Token.FunctionTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	if (input.charAt(0) != 'f')
	{
		return null;
	}
	var result = Token.keywordFind(input, Token.FunctionTokenType, [Token.NewLineTokenType, Token.TabTokenType, Token.SpaceTokenType, Token.GetTokenType, Token.SetTokenType, Token.IdentifierTokenType]);
	if (!result)
	{
		return null;
	}
	var tokens = result.tokens;
	var index = result.index;
	result = Lexer.lex(input.slice(index + 1), [Token.NewLineTokenType, Token.TabTokenType, Token.SpaceTokenType, Token.OpenParenTokenType, Token.ClosedParenTokenType, Token.VectorDotOpenArrowTokenType, Token.VectorClosedArrowTokenType, Token.VoidTokenType, Token.StringTokenType, Token.BooleanTokenType, Token.SubTokenType, Token.AddTokenType, Token.RestTokenType, Token.NumberTokenType, Token.NullTokenType, Token.UndefinedTokenType, Token.NaNTokenType, Token.ColonTokenType, Token.MulTokenType, Token.CommaTokenType, Token.AssignmentTokenType, Token.IdentifierTokenType, Token.DotTokenType], true);
	tokens = tokens.concat(result.tokens);
	return Token.getNewResult(tokens, result.index + index);
}
;
		Token.tokenFunctions[Token.GetTokenType].keyword = 'get';
		Token.tokenFunctions[Token.GetTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 'g' || input.charAt(1) != 'e') ? null : Token.keywordFind2(input, 'get', Token.GetTokenType, Token.identifierStartCharacters, true);
}
;
		Token.tokenFunctions[Token.SetTokenType].keyword = 'set';
		Token.tokenFunctions[Token.SetTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 's' || input.charAt(1) != 'e') ? null : Token.keywordFind2(input, 'set', Token.SetTokenType, Token.identifierStartCharacters, true);
}
;
		Token.tokenFunctions[Token.RestTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != '.' || input.charAt(1) != '.') ? null : Token.keywordFind2(input, '...', Token.RestTokenType, Token.identifierStartCharacters, false);
}
;
		Token.tokenFunctions[Token.ExtendsTokenType].keyword = 'extends';
		Token.tokenFunctions[Token.ExtendsTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 'e' || input.charAt(1) != 'x') ? null : Token.keywordFind2(input, 'extends', Token.ExtendsTokenType, Token.identifierStartCharacters, true);
}
;
		Token.tokenFunctions[Token.ImplementsTokenType].keyword = 'implements';
		Token.tokenFunctions[Token.ImplementsTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 'i' || input.charAt(1) != 'm') ? null : Token.keywordFind2(input, 'implements', Token.ImplementsTokenType, Token.identifierStartCharacters, true);
}
;
		Token.tokenFunctions[Token.CommentTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	if (input.charAt(0) != '/' || input.charAt(1) != '/')
	{
		return null;
	}
	var tokens = [];
	var i = 2;
	var commentChunk = '';
	var token = Token.getNewToken(Token.CommentTokenType, input.charAt(0) + input.charAt(1));
	tokens.push(token);
	while (i < input.length)
	{
		if (input.charAt(i).match(/[\r\n]/))
		{
			break;
		}
		commentChunk += input.charAt(i);
		i++;
	}
	if (i > 2)
	{
		token = Token.getNewToken(Token.CommentChunkTokenType, commentChunk);
		tokens.push(token);
	}
	return Token.getNewResult(tokens, i - 1);
}
;
		Token.tokenFunctions[Token.MultiLineCommentTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	if (input.charAt(0) != '/' || input.charAt(1) != '*')
	{
		return null;
	}
	var tokens = [];
	var token = Token.getNewToken(Token.MultiLineCommentTokenType, input.charAt(0) + input.charAt(1));
	tokens.push(token);
	var i = 2;
	var lastChar;
	var commentChunk = '';
	while (i < input.length)
	{
		if (input.charAt(i).match(/[\r\n]/))
		{
			if (commentChunk.length > 0)
			{
				token = Token.getNewToken(Token.MultiLineCommentChunkTokenType, commentChunk);
				tokens.push(token);
			}
			token = Token.getNewToken(Token.NewLineTokenType, input.charAt(i));
			tokens.push(token);
			commentChunk = '';
		}
		else if (lastChar == '*' && input.charAt(i) == '/')
		{
			commentChunk = commentChunk.slice(0, commentChunk.length - 1);
			i--;
			break;
		}
		else
		{
			commentChunk += input.charAt(i);
		}
		lastChar = input.charAt(i);
		i++;
	}
	if (commentChunk.length > 0)
	{
		token = Token.getNewToken(Token.MultiLineCommentChunkTokenType, commentChunk);
		tokens.push(token);
	}
	token = Token.getNewToken(Token.MultiLineCommentEndTokenType, input.charAt(i) + input.charAt(i + 1));
	tokens.push(token);
	return Token.getNewResult(tokens, i + 1);
}
;
		Token.tokenFunctions[Token.OverrideTokenType].keyword = 'override';
		Token.tokenFunctions[Token.OverrideTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 'o' || input.charAt(1) != 'v') ? null : Token.keywordFind2(input, 'override', Token.OverrideTokenType, Token.identifierStartCharacters, true);
}
;
		Token.tokenFunctions[Token.StaticTokenType].keyword = 'static';
		Token.tokenFunctions[Token.StaticTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 's' || input.charAt(1) != 't') ? null : Token.keywordFind2(input, 'static', Token.StaticTokenType, Token.identifierStartCharacters, true);
}
;
		Token.tokenFunctions[Token.DynamicTokenType].keyword = 'dynamic';
		Token.tokenFunctions[Token.DynamicTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 'd' || input.charAt(1) != 'y') ? null : Token.keywordFind2(input, 'dynamic', Token.DynamicTokenType, Token.identifierStartCharacters, true);
}
;
		Token.tokenFunctions[Token.FinalTokenType].keyword = 'final';
		Token.tokenFunctions[Token.FinalTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 'f' || input.charAt(1) != 'i') ? null : Token.keywordFind2(input, 'final', Token.FinalTokenType, Token.identifierStartCharacters, true);
}
;
		Token.tokenFunctions[Token.VarTokenType].keyword = 'var';
		Token.tokenFunctions[Token.VarTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 'v' || input.charAt(1) != 'a') ? null : Token.keywordFind2(input, 'var', Token.VarTokenType, Token.identifierStartCharacters, true);
}
;
		Token.tokenFunctions[Token.ConstTokenType].keyword = 'const';
		Token.tokenFunctions[Token.ConstTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 'c' || input.charAt(1) != 'o') ? null : Token.keywordFind2(input, 'const', Token.ConstTokenType, Token.identifierStartCharacters, true);
}
;
		Token.tokenFunctions[Token.IdentifierTokenType].regex = /^[a-zA-Z_$][a-zA-Z_0-9$]*/;
		Token.tokenFunctions[Token.IdentifierTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return Token.regexFind(input, Token.IdentifierTokenType);
}
;
		Token.tokenFunctions[Token.BooleanTokenType].regex = /^(true|false)(?![a-zA-Z0-9_])/;
		Token.tokenFunctions[Token.BooleanTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 't' && input.charAt(0) != 'f') ? null : Token.regexFind(input, Token.BooleanTokenType);
}
;
		Token.tokenFunctions[Token.ThisTokenType].regex = /^this(?![a-zA-Z0-9_])/;
		Token.tokenFunctions[Token.ThisTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 't' || input.charAt(1) != 'h') ? null : Token.regexFind(input, Token.ThisTokenType);
}
;
		Token.tokenFunctions[Token.TypeofTokenType].regex = /^typeof(?![a-zA-Z0-9_])/;
		Token.tokenFunctions[Token.TypeofTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 't' || input.charAt(1) != 'y') ? null : Token.regexFind(input, Token.TypeofTokenType);
}
;
		Token.tokenFunctions[Token.NullTokenType].regex = /^null(?![a-zA-Z0-9_])/;
		Token.tokenFunctions[Token.NullTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 'n' || input.charAt(1) != 'u') ? null : Token.regexFind(input, Token.NullTokenType);
}
;
		Token.tokenFunctions[Token.VoidTokenType].regex = /^void(?![a-zA-Z0-9_])/;
		Token.tokenFunctions[Token.VoidTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 'v' || input.charAt(1) != 'o') ? null : Token.regexFind(input, Token.VoidTokenType);
}
;
		Token.tokenFunctions[Token.UndefinedTokenType].regex = /^undefined(?![a-zA-Z0-9_])/;
		Token.tokenFunctions[Token.UndefinedTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 'u' || input.charAt(1) != 'n') ? null : Token.regexFind(input, Token.UndefinedTokenType);
}
;
		Token.tokenFunctions[Token.IsTokenType].regex = /^is(?![a-zA-Z0-9_])/;
		Token.tokenFunctions[Token.IsTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 'i' || input.charAt(1) != 's') ? null : Token.regexFind(input, Token.IsTokenType);
}
;
		Token.tokenFunctions[Token.NaNTokenType].regex = /^NaN(?![a-zA-Z0-9_])/;
		Token.tokenFunctions[Token.NaNTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 'N' || input.charAt(1) != 'a') ? null : Token.regexFind(input, Token.NaNTokenType);
}
;
		Token.tokenFunctions[Token.InstanceofTokenType].regex = /^instanceof(?![a-zA-Z0-9_])/;
		Token.tokenFunctions[Token.InstanceofTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 'i' || input.charAt(1) != 'n') ? null : Token.regexFind(input, Token.InstanceofTokenType);
}
;
		Token.tokenFunctions[Token.ReturnTokenType].regex = /^return(?![a-zA-Z0-9_])/;
		Token.tokenFunctions[Token.ReturnTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 'r' || input.charAt(1) != 'e') ? null : Token.regexFind(input, Token.ReturnTokenType);
}
;
		Token.tokenFunctions[Token.SwitchTokenType].regex = /^switch(?![a-zA-Z0-9_])/;
		Token.tokenFunctions[Token.SwitchTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 's' || input.charAt(1) != 'w') ? null : Token.regexFind(input, Token.SwitchTokenType);
}
;
		Token.tokenFunctions[Token.SuperTokenType].regex = /^super(?![a-zA-Z0-9_])/;
		Token.tokenFunctions[Token.SuperTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 's' || input.charAt(1) != 'u') ? null : Token.regexFind(input, Token.SuperTokenType);
}
;
		Token.tokenFunctions[Token.ThrowTokenType].regex = /^throw(?![a-zA-Z0-9_])/;
		Token.tokenFunctions[Token.ThrowTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 't' || input.charAt(1) != 'h') ? null : Token.regexFind(input, Token.ThrowTokenType);
}
;
		Token.tokenFunctions[Token.DotDotTokenType].regex = /^\.\./;
		Token.tokenFunctions[Token.DotDotTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != '.' || input.charAt(1) != '.') ? null : Token.regexFind(input, Token.DotDotTokenType);
}
;
		Token.tokenFunctions[Token.DotTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) == '.') ? Token.getNewResult(Token.getNewToken(Token.DotTokenType, '.'), 0) : null;
}
;
		Token.tokenFunctions[Token.NotTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) == '!') ? Token.getNewResult(Token.getNewToken(Token.NotTokenType, '!'), 0) : null;
}
;
		Token.tokenFunctions[Token.BitwiseNotTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) == '~') ? Token.getNewResult(Token.getNewToken(Token.BitwiseNotTokenType, '~'), 0) : null;
}
;
		Token.tokenFunctions[Token.ColonTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) == ':') ? Token.getNewResult(Token.getNewToken(Token.ColonTokenType, ':'), 0) : null;
}
;
		Token.tokenFunctions[Token.CommaTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) == ',') ? Token.getNewResult(Token.getNewToken(Token.CommaTokenType, ','), 0) : null;
}
;
		Token.tokenFunctions[Token.TernaryTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) == '?') ? Token.getNewResult(Token.getNewToken(Token.TernaryTokenType, '?'), 0) : null;
}
;
		Token.tokenFunctions[Token.IncrementTokenType].regex = /^\+\+/;
		Token.tokenFunctions[Token.IncrementTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != '+' || input.charAt(1) != '+') ? null : Token.regexFind(input, Token.IncrementTokenType);
}
;
		Token.tokenFunctions[Token.DecrementTokenType].regex = /^\-\-/;
		Token.tokenFunctions[Token.DecrementTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != '-' || input.charAt(1) != '-') ? null : Token.regexFind(input, Token.DecrementTokenType);
}
;
		Token.tokenFunctions[Token.BreakTokenType].regex = /^break(?![a-zA-Z0-9_])/;
		Token.tokenFunctions[Token.BreakTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 'b' || input.charAt(1) != 'r') ? null : Token.regexFind(input, Token.BreakTokenType);
}
;
		Token.tokenFunctions[Token.ContinueTokenType].regex = /^continue(?![a-zA-Z0-9_])/;
		Token.tokenFunctions[Token.ContinueTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 'c' || input.charAt(1) != 'o') ? null : Token.regexFind(input, Token.ContinueTokenType);
}
;
		Token.tokenFunctions[Token.DefaultTokenType].regex = /^default(?![a-zA-Z0-9_])/;
		Token.tokenFunctions[Token.DefaultTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 'd' || input.charAt(1) != 'e') ? null : Token.regexFind(input, Token.DefaultTokenType);
}
;
		Token.tokenFunctions[Token.InTokenType].regex = /^in(?![a-zA-Z0-9_])/;
		Token.tokenFunctions[Token.InTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 'i' || input.charAt(1) != 'n') ? null : Token.regexFind(input, Token.InTokenType);
}
;
		Token.tokenFunctions[Token.AsTokenType].regex = /^as(?![a-zA-Z0-9_])/;
		Token.tokenFunctions[Token.AsTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 'a' || input.charAt(1) != 's') ? null : Token.regexFind(input, Token.AsTokenType);
}
;
		Token.tokenFunctions[Token.DeleteTokenType].regex = /^delete(?![a-zA-Z0-9_.(])/;
		Token.tokenFunctions[Token.DeleteTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 'd' || input.charAt(1) != 'e') ? null : Token.regexFind(input, Token.DeleteTokenType);
}
;
		Token.tokenFunctions[Token.IfTokenType].keyword = 'if';
		Token.tokenFunctions[Token.IfTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 'i' || input.charAt(1) != 'f') ? null : Token.keywordFind2(input, 'if', Token.IfTokenType, '(', false);
}
;
		Token.tokenFunctions[Token.ElseTokenType].keyword = 'else';
		Token.tokenFunctions[Token.ElseTokenType].terminator = /^([\s]|\{)/;
		Token.tokenFunctions[Token.ElseTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 'e' || input.charAt(1) != 'l') ? null : Token.keywordFind(input, Token.ElseTokenType);
}
;
		Token.tokenFunctions[Token.EachTokenType].keyword = 'each';
		Token.tokenFunctions[Token.EachTokenType].terminator = /^([\s]|\()/;
		Token.tokenFunctions[Token.EachTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 'e' || input.charAt(1) != 'a') ? null : Token.keywordFind(input, Token.EachTokenType);
}
;
		Token.tokenFunctions[Token.ForTokenType].keyword = 'for';
		Token.tokenFunctions[Token.ForTokenType].terminator = /^([\s]|\()/;
		Token.tokenFunctions[Token.ForTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 'f' || input.charAt(1) != 'o') ? null : Token.keywordFind(input, Token.ForTokenType);
}
;
		Token.tokenFunctions[Token.WhileTokenType].keyword = 'while';
		Token.tokenFunctions[Token.WhileTokenType].terminator = /^([\s]|\()/;
		Token.tokenFunctions[Token.WhileTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 'w' || input.charAt(1) != 'h') ? null : Token.keywordFind(input, Token.WhileTokenType);
}
;
		Token.tokenFunctions[Token.DoTokenType].keyword = 'do';
		Token.tokenFunctions[Token.DoTokenType].terminator = /^([\s]|\{)/;
		Token.tokenFunctions[Token.DoTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 'd' || input.charAt(1) != 'o') ? null : Token.keywordFind(input, Token.DoTokenType);
}
;
		Token.tokenFunctions[Token.WithTokenType].keyword = 'with';
		Token.tokenFunctions[Token.WithTokenType].terminator = /^([\s]|\{)/;
		Token.tokenFunctions[Token.WithTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 'w' || input.charAt(1) != 'i') ? null : Token.keywordFind(input, Token.WithTokenType);
}
;
		Token.tokenFunctions[Token.TryTokenType].keyword = 'try';
		Token.tokenFunctions[Token.TryTokenType].terminator = /^([\s]|\{)/;
		Token.tokenFunctions[Token.TryTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 't' || input.charAt(1) != 'r') ? null : Token.keywordFind(input, Token.TryTokenType);
}
;
		Token.tokenFunctions[Token.CatchTokenType].keyword = 'catch';
		Token.tokenFunctions[Token.CatchTokenType].terminator = /^([\s]|\()/;
		Token.tokenFunctions[Token.CatchTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	if (input.charAt(0) != 'c' || input.charAt(1) != 'a')
	{
		return null;
	}
	var result = Token.keywordFind(input, Token.CatchTokenType, [Token.NewLineTokenType, Token.TabTokenType, Token.SpaceTokenType]);
	if (!result)
	{
		return null;
	}
	var tokens = result.tokens;
	var index = result.index;
	result = Lexer.lex(input.slice(index + 1), [Token.NewLineTokenType, Token.TabTokenType, Token.SpaceTokenType, Token.OpenParenTokenType, Token.ClosedParenTokenType, Token.IdentifierTokenType, Token.DotTokenType, Token.ColonTokenType], true);
	tokens = tokens.concat(result.tokens);
	return Token.getNewResult(tokens, result.index + index);
}
;
		Token.tokenFunctions[Token.RegExpTokenType].find = function ($$$$input, $$$$foundTokens) 
{
		//set default parameter values
		var input = $$$$input;
		var foundTokens = $$$$foundTokens;

	if (input.charAt(0) != '/')
	{
		return null;
	}
	outer:	for (var j = foundTokens.length - 1; j >= 0; j--)
	{
		var tokens = foundTokens[j];
		var token;
		var i;
		for (i = tokens.length - 1; i >= 0; i--)
		{
			token = tokens[i];
			switch (token.type)
			{
				case Token.SpaceTokenType:
				case Token.TabTokenType:
				case Token.NewLineTokenType:
					break;
				case Token.EOSTokenType:
				case Token.OpenBracketTokenType:
				case Token.OpenParenTokenType:
				case Token.EqualityTokenType:
				case Token.BitwiseLeftShiftAssignmentTokenType:
				case Token.BitwiseUnsignedRightShiftAssignmentTokenType:
				case Token.BitwiseRightShiftAssignmentTokenType:
				case Token.BitwiseLeftShiftTokenType:
				case Token.BitwiseUnsignedRightShiftTokenType:
				case Token.BitwiseRightShiftTokenType:
				case Token.RelationalTokenType:
				case Token.AddWithAssignmentTokenType:
				case Token.DivWithAssignmentTokenType:
				case Token.ModWithAssignmentTokenType:
				case Token.MulWithAssignmentTokenType:
				case Token.SubWithAssignmentTokenType:
				case Token.AssignmentTokenType:
				case Token.CommaTokenType:
				case Token.DeleteTokenType:
				case Token.InTokenType:
				case Token.WithTokenType:
				case Token.TypeofTokenType:
				case Token.VoidTokenType:
				case Token.ReturnTokenType:
				case Token.ThrowTokenType:
				case Token.NewTokenType:
				case Token.CaseTokenType:
				case Token.AndWithAssignmentTokenType:
				case Token.OrWithAssignmentTokenType:
				case Token.AndTokenType:
				case Token.OrTokenType:
				case Token.BitwiseAndAssignmentTokenType:
				case Token.BitwiseOrAssignmentTokenType:
				case Token.BitwiseXorAssignmentTokenType:
				case Token.BitwiseAndTokenType:
				case Token.BitwiseNotTokenType:
				case Token.BitwiseOrTokenType:
				case Token.BitwiseXorTokenType:
				case Token.NotTokenType:
				case Token.IncrementTokenType:
				case Token.DecrementTokenType:
				case Token.OpenBraceTokenType:
				case Token.IsTokenType:
				case Token.InstanceofTokenType:
				case Token.AddTokenType:
				case Token.RegExpTokenType:
				case Token.SubTokenType:
				case Token.DivTokenType:
				case Token.MulTokenType:
				case Token.ModTokenType:
					break outer;
				default:
					return null;
			}
		}
	}
	var result = Lexer.lex(input.slice(1), [Token.SpecialUFOTokenType], true);
	var previousToken;
	var tokens = result.tokens;
	var foundEnd = false;
	for (i = 0; i < tokens.length; i++)
	{
		token = tokens[i];
		if (foundEnd)
		{
			if (token.data == ',' || token.data == ';' || token.data == ']' || token.data == ')' || token.data == ']' || token.data == '.' || token.data == ' ' || token.data == '	' || token.data.match(/[\r\n]/))
			{
				i++;
				break;
			}
		}
		else if (token.data == '/' && previousToken && previousToken.data != '\\')
		{
			foundEnd = true;
		}
		previousToken = token;
	}
	if (!foundEnd)
	{
		return null;
	}
	tokens = tokens.splice(0, i - 1);
	tokens.unshift(Token.getNewToken(Token.RegExpTokenType, '/'));
	return Token.getNewResult(tokens, i - 1);
}
;
		Token.tokenFunctions[Token.SpecialUFOTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	if (Token.tokenFunctions[Token.NewLineTokenType].find(input) != null)
	{
		return null;
	}
	return Token.getNewResult(Token.getNewToken(Token.SpecialUFOTokenType, input.charAt(0)), 0);
}
;
		Token.tokenFunctions[Token.FinallyTokenType].keyword = 'finally';
		Token.tokenFunctions[Token.FinallyTokenType].terminator = /^([\s]|\{)/;
		Token.tokenFunctions[Token.FinallyTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != 'f' || input.charAt(1) != 'i') ? null : Token.keywordFind(input, Token.FinallyTokenType);
}
;
		Token.tokenFunctions[Token.AtTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) == '@') ? Token.getNewResult(Token.getNewToken(Token.AtTokenType, '@'), 0) : null;
}
;
		Token.tokenFunctions[Token.BitwiseLeftShiftAssignmentTokenType].regex = /^<<=/;
		Token.tokenFunctions[Token.BitwiseLeftShiftAssignmentTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != '<' || input.charAt(1) != '<') ? null : Token.regexFind(input, Token.BitwiseLeftShiftAssignmentTokenType);
}
;
		Token.tokenFunctions[Token.BitwiseRightShiftAssignmentTokenType].regex = /^>>=/;
		Token.tokenFunctions[Token.BitwiseRightShiftAssignmentTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != '>' || input.charAt(1) != '>') ? null : Token.regexFind(input, Token.BitwiseRightShiftAssignmentTokenType);
}
;
		Token.tokenFunctions[Token.BitwiseUnsignedRightShiftAssignmentTokenType].regex = /^>>>=/;
		Token.tokenFunctions[Token.BitwiseUnsignedRightShiftAssignmentTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != '>' || input.charAt(1) != '>') ? null : Token.regexFind(input, Token.BitwiseUnsignedRightShiftAssignmentTokenType);
}
;
		Token.tokenFunctions[Token.BitwiseAndAssignmentTokenType].regex = /^&=/;
		Token.tokenFunctions[Token.BitwiseAndAssignmentTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != '&' || input.charAt(1) != '=') ? null : Token.regexFind(input, Token.BitwiseAndAssignmentTokenType);
}
;
		Token.tokenFunctions[Token.BitwiseOrAssignmentTokenType].regex = /^\|=/;
		Token.tokenFunctions[Token.BitwiseOrAssignmentTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != '|' || input.charAt(1) != '=') ? null : Token.regexFind(input, Token.BitwiseOrAssignmentTokenType);
}
;
		Token.tokenFunctions[Token.BitwiseXorAssignmentTokenType].regex = /^\^=/;
		Token.tokenFunctions[Token.BitwiseXorAssignmentTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != '^' || input.charAt(1) != '=') ? null : Token.regexFind(input, Token.BitwiseXorAssignmentTokenType);
}
;
		Token.tokenFunctions[Token.AddWithAssignmentTokenType].regex = /^\+\=/;
		Token.tokenFunctions[Token.AddWithAssignmentTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != '+' || input.charAt(1) != '=') ? null : Token.regexFind(input, Token.AddWithAssignmentTokenType);
}
;
		Token.tokenFunctions[Token.DivWithAssignmentTokenType].regex = /^\/\=/;
		Token.tokenFunctions[Token.DivWithAssignmentTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != '/' || input.charAt(1) != '=') ? null : Token.regexFind(input, Token.DivWithAssignmentTokenType);
}
;
		Token.tokenFunctions[Token.ModWithAssignmentTokenType].regex = /^\%\=/;
		Token.tokenFunctions[Token.ModWithAssignmentTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != '%' || input.charAt(1) != '=') ? null : Token.regexFind(input, Token.ModWithAssignmentTokenType);
}
;
		Token.tokenFunctions[Token.MulWithAssignmentTokenType].regex = /^\*\=/;
		Token.tokenFunctions[Token.MulWithAssignmentTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != '*' || input.charAt(1) != '=') ? null : Token.regexFind(input, Token.MulWithAssignmentTokenType);
}
;
		Token.tokenFunctions[Token.SubWithAssignmentTokenType].regex = /^\-\=/;
		Token.tokenFunctions[Token.SubWithAssignmentTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != '-' || input.charAt(1) != '=') ? null : Token.regexFind(input, Token.SubWithAssignmentTokenType);
}
;
		Token.tokenFunctions[Token.EqualityTokenType].operators = ['===', '!==', '==', '!='];
		Token.tokenFunctions[Token.EqualityTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	if (input.charAt(0) != '=' && input.charAt(0) != '!')
	{
		return null;
	}
	for (var i = 0; i < Token.tokenFunctions[Token.EqualityTokenType].operators.length; i++)
	{
		var operator = Token.tokenFunctions[Token.EqualityTokenType].operators[i];
		var match = input.match($es4.$$primitive(new RegExp("^" + operator)));
		if (!match)
		{
			continue;
		}
		var token = Token.getNewToken(Token.EqualityTokenType, operator);
		return Token.getNewResult(token, operator.length - 1);
	}
	return null;
}
;
		Token.tokenFunctions[Token.RelationalTokenType].operators = ['>=', '>', '<=', '<'];
		Token.tokenFunctions[Token.RelationalTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	if (input.charAt(0) != '>' && input.charAt(0) != '<')
	{
		return null;
	}
	for (var i = 0; i < Token.tokenFunctions[Token.RelationalTokenType].operators.length; i++)
	{
		var operator = Token.tokenFunctions[Token.RelationalTokenType].operators[i];
		var match = input.match($es4.$$primitive(new RegExp("^" + operator)));
		if (!match)
		{
			continue;
		}
		var token = Token.getNewToken(Token.RelationalTokenType, operator);
		return Token.getNewResult(token, operator.length - 1);
	}
	return null;
}
;
		Token.tokenFunctions[Token.BitwiseAndTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) == '&') ? Token.getNewResult(Token.getNewToken(Token.BitwiseAndTokenType, '&'), 0) : null;
}
;
		Token.tokenFunctions[Token.BitwiseXorTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) == '^') ? Token.getNewResult(Token.getNewToken(Token.BitwiseXorTokenType, '^'), 0) : null;
}
;
		Token.tokenFunctions[Token.BitwiseOrTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) == '|') ? Token.getNewResult(Token.getNewToken(Token.BitwiseOrTokenType, '|'), 0) : null;
}
;
		Token.tokenFunctions[Token.AndTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) == '&' && input.charAt(1) == '&') ? Token.getNewResult(Token.getNewToken(Token.AndTokenType, '&&'), 1) : null;
}
;
		Token.tokenFunctions[Token.AndWithAssignmentTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) == '&' && input.charAt(1) == '&' && input.charAt(2) == '=') ? Token.getNewResult(Token.getNewToken(Token.AndWithAssignmentTokenType, '&&='), 2) : null;
}
;
		Token.tokenFunctions[Token.OrTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) == '|' && input.charAt(1) == '|') ? Token.getNewResult(Token.getNewToken(Token.OrTokenType, '||'), 1) : null;
}
;
		Token.tokenFunctions[Token.OrWithAssignmentTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) == '|' && input.charAt(1) == '|' && input.charAt(2) == '=') ? Token.getNewResult(Token.getNewToken(Token.OrWithAssignmentTokenType, '||='), 2) : null;
}
;
		Token.tokenFunctions[Token.BitwiseLeftShiftTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) == '<' && input.charAt(1) == '<') ? Token.getNewResult(Token.getNewToken(Token.BitwiseLeftShiftTokenType, '<<'), 1) : null;
}
;
		Token.tokenFunctions[Token.BitwiseRightShiftTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) == '>' && input.charAt(1) == '>') ? Token.getNewResult(Token.getNewToken(Token.BitwiseRightShiftTokenType, '>>'), 1) : null;
}
;
		Token.tokenFunctions[Token.BitwiseUnsignedRightShiftTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) == '>' && input.charAt(1) == '>' && input.charAt(2) == '>') ? Token.getNewResult(Token.getNewToken(Token.BitwiseUnsignedRightShiftTokenType, '>>>'), 2) : null;
}
;
		Token.tokenFunctions[Token.SubTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) == '-') ? Token.getNewResult(Token.getNewToken(Token.SubTokenType, '-'), 0) : null;
}
;
		Token.tokenFunctions[Token.AddTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) == '+') ? Token.getNewResult(Token.getNewToken(Token.AddTokenType, '+'), 0) : null;
}
;
		Token.tokenFunctions[Token.DivTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) == '/') ? Token.getNewResult(Token.getNewToken(Token.DivTokenType, '/'), 0) : null;
}
;
		Token.tokenFunctions[Token.MulTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) == '*') ? Token.getNewResult(Token.getNewToken(Token.MulTokenType, '*'), 0) : null;
}
;
		Token.tokenFunctions[Token.ModTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) == '%') ? Token.getNewResult(Token.getNewToken(Token.ModTokenType, '%'), 0) : null;
}
;
		Token.tokenFunctions[Token.AssignmentTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) == '=') ? Token.getNewResult(Token.getNewToken(Token.AssignmentTokenType, '='), 0) : null;
}
;
		Token.tokenFunctions[Token.NamespaceKeywordTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) == 'n') ? Token.keywordFind2(input, 'namespace', Token.NamespaceKeywordTokenType, Token.identifierStartCharacters, true) : null;
}
;
		Token.tokenFunctions[Token.XMLTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	if (input.charAt(0) != '<')
	{
		return null;
	}
	var isXMLList = input.charAt(1) == '>';
	var resultTokens = [];
	var index = -1;
	var openNodes = 0;
	while (true)
	{
		var result = Lexer.lex(input, [Token.NewLineTokenType, Token.TabTokenType, Token.SpaceTokenType, Token.StringTokenType, Token.AssignmentTokenType, Token.ColonTokenType, Token.XMLOpenArrowTokenType, Token.XMLIdentifierTokenType, Token.XMLForwardSlashTokenType], true);
		if (!result.tokens.length)
		{
			break;
		}
		if (input.charAt(result.index) != '>')
		{
			break;
		}
		var tokens = result.tokens.concat(Token.getNewToken(Token.XMLClosedArrowTokenType, '>'));
		input = input.slice(result.index + 1);
		index += result.index + 1;
		resultTokens = resultTokens.concat(tokens);
		if (tokens[1].type != Token.XMLForwardSlashTokenType)
		{
			openNodes++;
		}
		if (tokens[1].type == Token.XMLForwardSlashTokenType)
		{
			openNodes--;
		}
		else if (tokens[tokens.length - 2].type == Token.XMLForwardSlashTokenType)
		{
			openNodes--;
		}
		if (!openNodes)
		{
			break;
		}
		if (isXMLList && openNodes == 1)
		{
			result = Lexer.lex(input, [Token.NewLineTokenType, Token.TabTokenType, Token.SpaceTokenType], true);
			if (!result.tokens.length)
			{
				continue;
			}
			input = input.slice(result.index);
			index += result.index;
			resultTokens = resultTokens.concat(result.tokens);
		}
		else
		{
			result = Lexer.lex(input, [Token.XMLTextTokenType, Token.XMLCDATATokenType], true);
			if (!result.tokens.length)
			{
				continue;
			}
			input = input.slice(result.index);
			index += result.index;
			resultTokens = resultTokens.concat(result.tokens);
		}
	}
	if (openNodes || !resultTokens.length)
	{
		return null;
	}
	return Token.getNewResult(resultTokens, index);
}
;
		Token.tokenFunctions[Token.XMLIdentifierTokenType].regex = /^[a-zA-Z_][a-zA-Z_0-9]*/;
		Token.tokenFunctions[Token.XMLIdentifierTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return Token.regexFind(input, Token.XMLIdentifierTokenType);
}
;
		Token.tokenFunctions[Token.XMLTextTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	if (input.charAt(0) == '<')
	{
		return null;
	}
	var token;
	var tokens = [];
	var i = 0;
	var chunk = '';
	while (i < input.length)
	{
		if (input.charAt(i).match(/[\r\n]/))
		{
			if (chunk.length > 0)
			{
				token = Token.getNewToken(Token.XMLTextTokenType, chunk);
				tokens.push(token);
			}
			token = Token.getNewToken(Token.NewLineTokenType, input.charAt(i));
			tokens.push(token);
			chunk = '';
		}
		else if (input.charAt(i) == '<')
		{
			i--;
			break;
		}
		else
		{
			chunk += input.charAt(i);
		}
		i++;
	}
	if (chunk.length > 0)
	{
		token = Token.getNewToken(Token.XMLTextTokenType, chunk);
		tokens.push(token);
	}
	return Token.getNewResult(tokens, i);
}
;
		Token.tokenFunctions[Token.XMLCDATATokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	if (input.charAt(0) != '<' || input.charAt(1) != '!' || input.charAt(2) != '[' || input.indexOf('<![CDATA[') != 0)
	{
		return null;
	}
	var tokens = [];
	var token = Token.getNewToken(Token.XMLCDATATokenType, '<![CDATA[');
	tokens.push(token);
	var i = 9;
	var chunk = '';
	while (i < input.length)
	{
		if (input.charAt(i).match(/[\r\n]/))
		{
			if (chunk.length > 0)
			{
				token = Token.getNewToken(Token.XMLCDATAChunkTokenType, chunk);
				tokens.push(token);
			}
			token = Token.getNewToken(Token.NewLineTokenType, input.charAt(i));
			tokens.push(token);
			chunk = '';
		}
		else if (input.charAt(i - 2) == ']' && input.charAt(i - 1) == ']' && input.charAt(i) == '>')
		{
			chunk = chunk.slice(0, chunk.length - 2);
			break;
		}
		else
		{
			chunk += input.charAt(i);
		}
		i++;
	}
	if (chunk.length > 0)
	{
		token = Token.getNewToken(Token.XMLCDATAChunkTokenType, chunk);
		tokens.push(token);
	}
	token = Token.getNewToken(Token.XMLCDATAEndTokenType, ']]>');
	tokens.push(token);
	return Token.getNewResult(tokens, i);
}
;
		Token.tokenFunctions[Token.XMLOpenArrowTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) == '<') ? Token.getNewResult(Token.getNewToken(Token.XMLOpenArrowTokenType, '<'), 0) : null;
}
;
		Token.tokenFunctions[Token.XMLClosedArrowTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) == '>') ? Token.getNewResult(Token.getNewToken(Token.XMLClosedArrowTokenType, '>'), 0) : null;
}
;
		Token.tokenFunctions[Token.XMLForwardSlashTokenType].regex = /^\//;
		Token.tokenFunctions[Token.XMLForwardSlashTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != '/') ? null : Token.regexFind(input, Token.XMLForwardSlashTokenType);
}
;
		Token.tokenFunctions[Token.NamespaceQualifierTokenType].regex = /^::/;
		Token.tokenFunctions[Token.NamespaceQualifierTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) != ':' || input.charAt(1) != ':') ? null : Token.regexFind(input, Token.NamespaceQualifierTokenType);
}
;
		Token.tokenFunctions[Token.VectorDotOpenArrowTokenType].regex = /^\.\</;
		Token.tokenFunctions[Token.VectorDotOpenArrowTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	if (input.charAt(0) != '.')
	{
		return null;
	}
	var result = Token.regexFind(input, Token.VectorDotOpenArrowTokenType);
	if (!result)
	{
		return null;
	}
	var tokens = result.tokens;
	var index = result.index;
	result = Lexer.lex(input.slice(index + 1), [Token.NewLineTokenType, Token.TabTokenType, Token.SpaceTokenType, Token.IdentifierTokenType, Token.DotTokenType, Token.VectorClosedArrowTokenType], true);
	tokens = tokens.concat(result.tokens);
	return Token.getNewResult(tokens, result.index + index);
}
;
		Token.tokenFunctions[Token.VectorClosedArrowTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) == '>') ? Token.getNewResult(Token.getNewToken(Token.VectorClosedArrowTokenType, '>'), 0) : null;
}
;
		Token.tokenFunctions[Token.StringTokenType].prefixAllowed = ["'", '"'];
		Token.tokenFunctions[Token.StringTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	if (input.charAt(0) != "'" && input.charAt(0) != '"')
	{
		return null;
	}
	var tokens = [];
	var token = Token.getNewToken(Token.StringTokenType, input.charAt(0));
	tokens.push(token);
	var i = 1;
	var ignore = false;
	var lastChar;
	var stringChunk = '';
	while (i < input.length && (input.charAt(0) != input.charAt(i) || ignore))
	{
		if (lastChar == '\\' && input.charAt(i).match(/[\r\n]/) && !ignore)
		{
			if (stringChunk.length - 1 > 0)
			{
				token = Token.getNewToken(Token.StringChunkTokenType, stringChunk.slice(0, stringChunk.length - 1));
				tokens.push(token);
			}
			token = Token.getNewToken(Token.StringMultiLineDelimiterTokenType, lastChar);
			tokens.push(token);
			token = Token.getNewToken(Token.NewLineTokenType, input.charAt(i));
			tokens.push(token);
			stringChunk = '';
		}
		else
		{
			stringChunk += input.charAt(i);
		}
		lastChar = input.charAt(i);
		ignore = lastChar == '\\' && !ignore;
		i++;
	}
	if (stringChunk.length > 0)
	{
		token = Token.getNewToken(Token.StringChunkTokenType, stringChunk);
		tokens.push(token);
	}
	token = Token.getNewToken(Token.StringEndTokenType, input.charAt(i));
	tokens.push(token);
	return Token.getNewResult(tokens, i);
}
;
		Token.tokenFunctions[Token.NumberTokenType].regex1 = /^([0-9]|[\.][0-9\.]+)[0-9\.]*(e[+-][0-9]+)*/;
		Token.tokenFunctions[Token.NumberTokenType].regex2 = /^0x[a-fA-F0-9]+/;
		Token.tokenFunctions[Token.NumberTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	if (input.charAt(0) == '0' && input.charAt(1) == 'x')
	{
		return Token.regexFind(input, Token.NumberTokenType, Token.tokenFunctions[Token.NumberTokenType].regex2);
	}
	if (input.charAt(0) != '0' && input.charAt(0) != '1' && input.charAt(0) != '2' && input.charAt(0) != '3' && input.charAt(0) != '4' && input.charAt(0) != '5' && input.charAt(0) != '6' && input.charAt(0) != '7' && input.charAt(0) != '8' && input.charAt(0) != '9' && input.charAt(0) != '.')
	{
		return;
	}
	return Token.regexFind(input, Token.NumberTokenType, Token.tokenFunctions[Token.NumberTokenType].regex1);
}
;
		Token.tokenFunctions[Token.SpaceTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) == ' ') ? Token.getNewResult(Token.getNewToken(Token.SpaceTokenType, ' '), 0) : null;
}
;
		Token.tokenFunctions[Token.TabTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return (input.charAt(0) == '	') ? Token.getNewResult(Token.getNewToken(Token.TabTokenType, '	'), 0) : null;
}
;
		Token.tokenFunctions[Token.NewLineTokenType].regex = /[\r\n]/;
		Token.tokenFunctions[Token.NewLineTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	var tokens;
	var index = -1;
	while (input.charAt(index + 1).match(Token.tokenFunctions[Token.NewLineTokenType].regex))
	{
		if (!tokens)
		{
			tokens = [];
		}
		tokens.push(Token.getNewToken(Token.NewLineTokenType, input.charAt(index + 1)));
		index++;
	}
	return (index == -1) ? null : Token.getNewResult(tokens, index);
}
;
		Token.tokenFunctions[Token.UFOTokenType].find = function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return Token.getNewResult(Token.getNewToken(Token.UFOTokenType, input.charAt(0)), 0);
}
;
	});

	//public static method
	Token.getNewToken = (function ($$$$type, $$$$data)
	{
		if (Token.$$cinit !== undefined) Token.$$cinit();

		//set default parameter values
		var type = $es4.$$coerce($$$$type, String);
		var data = $$$$data;

		return {constructor:"token", type:type, data:data, line:NaN, position:NaN};
	});

	//public static method
	Token.getNewResult = (function ($$$$tokens, $$$$index)
	{
		if (Token.$$cinit !== undefined) Token.$$cinit();

		//set default parameter values
		var tokens = $$$$tokens;
		var index = $es4.$$coerce($$$$index, Number);

		if (!($es4.$$is(tokens, Array)))
		{
			tokens = [tokens];
		}
		return {tokens:tokens, index:index};
	});

	//public static method
	Token.keywordFind2 = (function ($$$$input, $$$$keyword, $$$$TokenType, $$$$matchNext, $$$$requireWhitespace)
	{
		if (Token.$$cinit !== undefined) Token.$$cinit();

		//set default parameter values
		var input = $$$$input;
		var keyword = $$$$keyword;
		var TokenType = $$$$TokenType;
		var matchNext = $$$$matchNext;
		var requireWhitespace = $es4.$$coerce($$$$requireWhitespace, Boolean);

		if (input.substring(0, keyword.length) != keyword)
		{
			return null;
		}
		var cur = null;
		var whitespace = 0;
		var inputLength = input.length;
		for (var i = keyword.length; i < inputLength; i++)
		{
			cur = input.charAt(i);
			if (Token.whitespaceCharacters[cur] === undefined)
			{
				break;
			}
			whitespace++;
		}
		if (requireWhitespace && whitespace === 0)
		{
			return null;
		}
		if ($es4.$$is(matchNext, String))
		{
			if (cur != matchNext)
			{
				return null;
			}
		}
		else
		{
			if (matchNext[cur] === undefined)
			{
				return null;
			}
		}
		return Token.getNewResult(Token.getNewToken(TokenType, keyword), keyword.length - 1);
	});

	//public static method
	Token.keywordFind = (function ($$$$input, $$$$TokenType, $$$$grammer)
	{
		if (Token.$$cinit !== undefined) Token.$$cinit();

		//set default parameter values
		var input = $$$$input;
		var TokenType = $$$$TokenType;
		var grammer = (2 > arguments.length - 1) ? null : $$$$grammer;

		for (var i = 0; i < Token.tokenFunctions[TokenType].keyword.length; i++)
		{
			if (Token.tokenFunctions[TokenType].keyword.charAt(i) !== input.charAt(i))
			{
				return null;
			}
		}
		if (!input.charAt(i).match(Token.tokenFunctions[TokenType].terminator))
		{
			return null;
		}
		if (!grammer)
		{
			return Token.getNewResult(Token.getNewToken(TokenType, Token.tokenFunctions[TokenType].keyword), Token.tokenFunctions[TokenType].keyword.length - 1);
		}
		var result = Lexer.lex(input.slice(Token.tokenFunctions[TokenType].keyword.length), grammer, true);
		result.tokens.unshift(Token.getNewToken(TokenType, Token.tokenFunctions[TokenType].keyword));
		return Token.getNewResult(result.tokens, result.index + Token.tokenFunctions[TokenType].keyword.length - 1);
	});

	//public static method
	Token.regexFind = (function ($$$$input, $$$$TokenType, $$$$regex)
	{
		if (Token.$$cinit !== undefined) Token.$$cinit();

		//set default parameter values
		var input = $$$$input;
		var TokenType = $$$$TokenType;
		var regex = (2 > arguments.length - 1) ? null : $$$$regex;

		if (!regex)
		{
			regex = Token.tokenFunctions[TokenType].regex;
		}
		var match = input.match(regex);
		if (!match)
		{
			return null;
		}
		return Token.getNewResult(Token.getNewToken(TokenType, match[0]), match[0].length - 1);
	});
	function Token()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof Token) || $$this.$$Token !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Token) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			Token.$$construct($$this, $$args);
		}
	}

	//construct
	Token.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (Token.$$cinit !== undefined) Token.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$Token', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		Token.$$iinit($$this);

		//call constructor
		if (args !== undefined) Token.$$constructor.apply($$this, args);
	});

	//initializer
	Token.$$iinit = (function ($$this)
	{
	});

	//constructor
	Token.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(Token, null, 'sweetrush.obj::Token');
})();
//sweetrush.obj.Token


//sweetrush.utils.Base64Util
$es4.$$package('sweetrush.utils').Base64Util = (function ()
{
	//imports
	var ByteArray;

	//class pre initializer
	Base64Util.$$sinit = (function ()
	{
		Base64Util.$$sinit = undefined;

		//initialize imports
		ByteArray = $es4.$$['flash.utils'].ByteArray;

		//set prototype and constructor
		Base64Util.prototype = Object.create(Object.prototype);
		Object.defineProperty(Base64Util.prototype, "constructor", { value: Base64Util, enumerable: false });

		//hold private values
		Object.defineProperty(Base64Util.prototype, '$$v', {value:{}});
	});

	//class initializer
	Base64Util.$$cinit = (function ()
	{
		Base64Util.$$cinit = undefined;
	});

	//public static method
	Base64Util.encodeString = (function ($$$$value)
	{
		if (Base64Util.$$cinit !== undefined) Base64Util.$$cinit();

		//set default parameter values
		var value = $es4.$$coerce($$$$value, String);

		if (false)
		{
		}
		if (true)
		{
			if (global.btoa !== undefined)
			{
				return $es4.$$coerce(global.btoa(value), String);
			}
			return $es4.$$coerce(global.Buffer.from(value).toString('base64'), String);
		}
	});

	//public static method
	Base64Util.decodeString = (function ($$$$str)
	{
		if (Base64Util.$$cinit !== undefined) Base64Util.$$cinit();

		//set default parameter values
		var str = $es4.$$coerce($$$$str, String);

		if (false)
		{
		}
		if (true)
		{
			if (global.atob !== undefined)
			{
				return $es4.$$coerce(global.atob(str), String);
			}
			return $es4.$$coerce(global.Buffer.from(str, 'base64').toString(), String);
		}
	});
	function Base64Util()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof Base64Util) || $$this.$$Base64Util !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Base64Util) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			Base64Util.$$construct($$this, $$args);
		}
	}

	//construct
	Base64Util.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (Base64Util.$$cinit !== undefined) Base64Util.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$Base64Util', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		Base64Util.$$iinit($$this);

		//call constructor
		if (args !== undefined) Base64Util.$$constructor.apply($$this, args);
	});

	//initializer
	Base64Util.$$iinit = (function ($$this)
	{
	});

	//constructor
	Base64Util.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(Base64Util, null, 'sweetrush.utils::Base64Util');
})();
//sweetrush.utils.Base64Util


//sweetrush.utils.FileUtil
$es4.$$package('sweetrush.utils').FileUtil = (function ()
{
	//imports
	var ByteArray;
	var AS3_JS;
	var Analyzer;
	var Lexer;
	var Parser;
	var TranslatorProto;
	var TranslatorPrototype;
	var Construct;
	var Token;
	var Base64Util;
	var FileUtil;
	var JsonUtil;
	var SwcUtil;

	//properties
	var $$j = {};
	Object.defineProperty(FileUtil, 'fs', {
	get:function () { if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit(); return $$j.fs; },
	set:function (value) { if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit(); $$j.fs = value }
	});

	Object.defineProperty(FileUtil, 'path', {
	get:function () { if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit(); return $$j.path; },
	set:function (value) { if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit(); $$j.path = value }
	});


	//class pre initializer
	FileUtil.$$sinit = (function ()
	{
		FileUtil.$$sinit = undefined;

		//initialize imports
		ByteArray = $es4.$$['flash.utils'].ByteArray;
		AS3_JS = $es4.$$['sweetrush'].AS3_JS;
		Analyzer = $es4.$$['sweetrush.core'].Analyzer;
		Lexer = $es4.$$['sweetrush.core'].Lexer;
		Parser = $es4.$$['sweetrush.core'].Parser;
		TranslatorProto = $es4.$$['sweetrush.core'].TranslatorProto;
		TranslatorPrototype = $es4.$$['sweetrush.core'].TranslatorPrototype;
		Construct = $es4.$$['sweetrush.obj'].Construct;
		Token = $es4.$$['sweetrush.obj'].Token;
		Base64Util = $es4.$$['sweetrush.utils'].Base64Util;
		JsonUtil = $es4.$$['sweetrush.utils'].JsonUtil;
		SwcUtil = $es4.$$['sweetrush.utils'].SwcUtil;

		//set prototype and constructor
		FileUtil.prototype = Object.create(Object.prototype);
		Object.defineProperty(FileUtil.prototype, "constructor", { value: FileUtil, enumerable: false });

		//hold private values
		Object.defineProperty(FileUtil.prototype, '$$v', {value:{}});
	});

	//class initializer
	FileUtil.$$cinit = (function ()
	{
		FileUtil.$$cinit = undefined;

		//initialize properties
		$$j.fs = require('fs');
		$$j.path = require('path');
	
	});

	//public static method
	FileUtil.getBasePath = (function ()
	{
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		if (true)
		{
			return FileUtil.path.join(__dirname, '../../../', 'as3-js');
		}
		if (false)
		{
		}
	});

	//public static method
	FileUtil.getExcludedPath = (function ()
	{
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		if (true)
		{
			return FileUtil.path.join(__dirname, '../../../', 'as3-js', '_excluded');
		}
		if (false)
		{
		}
	});

	//public static method
	FileUtil.resolvePath = (function ($$$$src, $$$$append)
	{
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		//set default parameter values
		var src = $$$$src;
		var append = $$$$append;

		if (true)
		{
			return FileUtil.fixPath(FileUtil.path.join(src, append));
		}
		if (false)
		{
		}
	});

	//public static method
	FileUtil.read = (function ($$$$file)
	{
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		//set default parameter values
		var file = $$$$file;

		if (false)
		{
		}
		if (true)
		{
			return FileUtil.fs.readFileSync(file, 'utf8').replace(/^\uFEFF/, '');
		}
	});

	//public static method
	FileUtil.write = (function ($$$$file, $$$$contents)
	{
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		//set default parameter values
		var file = $$$$file;
		var contents = $$$$contents;

		if (false)
		{
		}
		if (true)
		{
			FileUtil.fs.writeFileSync(file, contents, 'utf8');
		}
	});

	//public static method
	FileUtil.readDirectory = (function ($$$$directory)
	{
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		//set default parameter values
		var directory = $$$$directory;

		if (false)
		{
		}
		if (true)
		{
			var files = $es4.$$coerce(FileUtil.fs.readdirSync(directory), Array);
			for (var i = 0; i < files.length; i++)
			{
				files[i] = directory + '/' + files[i];
			}
			return files;
		}
	});

	//public static method
	FileUtil.fixPath = (function ($$$$path)
	{
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		//set default parameter values
		var path = $$$$path;

		return path.split('\\\\').join('/').split('\\').join('/');
	});

	//public static method
	FileUtil.exists = (function ($$$$file)
	{
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		//set default parameter values
		var file = $$$$file;

		if (false)
		{
		}
		if (true)
		{
			return FileUtil.fs.existsSync(file);
		}
	});

	//public static method
	FileUtil.getList = (function ($$$$path, $$$$recursive, $$$$filter)
	{
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		//set default parameter values
		var path = $$$$path;
		var recursive = $$$$recursive;
		var filter = $$$$filter;

		var returnList = innerGetList(path, recursive, filter, path);
		returnList['basepath'] = FileUtil.fixPath(path);
		return returnList;

		function innerGetList($$$$path, $$$$recursive, $$$$filter, $$$$basePath) 
		{
			//set default parameter values
			var path = $$$$path;
			var recursive = $$$$recursive;
			var filter = $$$$filter;
			var basePath = $$$$basePath;

			path = FileUtil.fixPath(path);
			basePath = FileUtil.fixPath(basePath);
			var file = $es4.$$primitive(new VFile(path));
			var list = file.listFiles();
			var returnList = $es4.$$primitive(new Array());
			for (var i = 0; i < list.length; i++)
			{
				file = list[i];
				var result = filter(file, basePath);
				if (result)
				{
					returnList.push(result);
				}
				if (file.isDirectory() && recursive)
				{
					var innerList = innerGetList(file.src, recursive, filter, basePath);
					returnList = returnList.concat(innerList);
				}
			}
			return returnList;
		}
;
	});

	//public static method
	FileUtil.filterList = (function ($$$$list, $$$$filter)
	{
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		//set default parameter values
		var list = $$$$list;
		var filter = $$$$filter;

		var returnList = [];
		returnList['basepath'] = list['basepath'];
		for (var i = 0; i < list.length; i++)
		{
			var file = filter(list[i], list['basepath']);
			if (!file)
			{
				continue;
			}
			returnList.push(file);
		}
		return returnList;
	});

	//public static method
	FileUtil.getListFilter_none = (function ()
	{
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		function filter($$$$file, $$$$basePath) 
		{
			//set default parameter values
			var file = $$$$file;
			var basePath = $$$$basePath;

			return file;
		}
;

		return filter;
	});

	//public static method
	FileUtil.getListFilter_hidden = (function ()
	{
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		function filter($$$$file, $$$$basePath) 
		{
			//set default parameter values
			var file = $$$$file;
			var basePath = $$$$basePath;

			return file.isHidden() ? null : file;
		}
;

		return filter;
	});

	//public static method
	FileUtil.getListFilter_extension = (function ($$$$extension, $$$$include_)
	{
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		//set default parameter values
		var extension = $$$$extension;
		var include_ = $$$$include_;

		extension = '.' + extension;

		function filter($$$$file, $$$$basePath) 
		{
			//set default parameter values
			var file = $$$$file;
			var basePath = $$$$basePath;

			var result = file.src.slice(-extension.length);
			if (result == extension)
			{
				return (include_) ? file : null;
			}
			return (include_) ? null : file;
		}
;

		return filter;
	});

	//public static method
	FileUtil.getListFilter_name = (function ($$$$name, $$$$include_)
	{
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		//set default parameter values
		var name = $$$$name;
		var include_ = $$$$include_;

		function filter($$$$file, $$$$basePath) 
		{
			//set default parameter values
			var file = $$$$file;
			var basePath = $$$$basePath;

			var result = FileUtil.fixPath(file.src).split('/').pop();
			if (result == name)
			{
				return (include_) ? file : null;
			}
			return (include_) ? null : file;
		}
;

		return filter;
	});

	//public static method
	FileUtil.getListFilter_directories = (function ()
	{
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		function filter($$$$file, $$$$basePath) 
		{
			//set default parameter values
			var file = $$$$file;
			var basePath = $$$$basePath;

			if (file.isDirectory())
			{
				return null;
			}
			return file;
		}
;

		return filter;
	});

	//public static method
	FileUtil.getListFilter_directory = (function ($$$$path)
	{
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		//set default parameter values
		var path = $$$$path;

		path = FileUtil.fixPath(path);

		function filter($$$$file, $$$$basePath) 
		{
			//set default parameter values
			var file = $$$$file;
			var basePath = $$$$basePath;

			basePath = FileUtil.fixPath(basePath);
			if (FileUtil.fixPath(file.src).indexOf(path) == 0)
			{
				return null;
			}
			return file;
		}
;

		return filter;
	});

	//public static method
	FileUtil.getListFilter_list = (function ($$$$list)
	{
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		//set default parameter values
		var list = $$$$list;

		function filter($$$$file, $$$$basePath) 
		{
			//set default parameter values
			var file = $$$$file;
			var basePath = $$$$basePath;

			basePath = FileUtil.fixPath(basePath);
			var compare1 = FileUtil.fixPath(file.src).split(basePath)[1];
			for (var i = 0; i < list.length; i++)
			{
				var compare2 = FileUtil.fixPath(list[i].src).split(FileUtil.fixPath(list['basepath']))[1];
				if (compare1 == compare2)
				{
					return null;
				}
			}
			return file;
		}
;

		return filter;
	});

	//public static method
	FileUtil.getListFilter_filters = (function ($$$$filters)
	{
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		//set default parameter values
		var filters = $$$$filters;

		function filter($$$$file, $$$$basePath) 
		{
			//set default parameter values
			var file = $$$$file;
			var basePath = $$$$basePath;

			for (var i = 0; i < filters.length; i++)
			{
				var result = filters[i](file, basePath);
				if (!result)
				{
					return null;
				}
			}
			return file;
		}
;

		return filter;
	});
	function FileUtil()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof FileUtil) || $$this.$$FileUtil !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], FileUtil) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			FileUtil.$$construct($$this, $$args);
		}
	}

	//construct
	FileUtil.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$FileUtil', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		FileUtil.$$iinit($$this);

		//call constructor
		if (args !== undefined) FileUtil.$$constructor.apply($$this, args);
	});

	//initializer
	FileUtil.$$iinit = (function ($$this)
	{
	});

	//constructor
	FileUtil.$$constructor = (function ()
	{
		var $$this = this;
	});

	////////////////INTERNAL CLASS////////////////
	var VFile = (function ()
	{
		//imports
		var FileUtil;

		//properties
		var $$j = {};
		Object.defineProperty(VFile, 'fs', {
		get:function () { if (VFile.$$cinit !== undefined) VFile.$$cinit(); return $$j.fs; },
		set:function (value) { if (VFile.$$cinit !== undefined) VFile.$$cinit(); $$j.fs = value }
		});

		Object.defineProperty(VFile, 'path', {
		get:function () { if (VFile.$$cinit !== undefined) VFile.$$cinit(); return $$j.path; },
		set:function (value) { if (VFile.$$cinit !== undefined) VFile.$$cinit(); $$j.path = value }
		});


		//class pre initializer
		VFile.$$sinit = (function ()
		{
			VFile.$$sinit = undefined;

			//initialize imports
			FileUtil = $es4.$$['sweetrush.utils'].FileUtil;

			//set prototype and constructor
			VFile.prototype = Object.create(Object.prototype);
			Object.defineProperty(VFile.prototype, "constructor", { value: VFile, enumerable: false });

			//hold private values
			Object.defineProperty(VFile.prototype, '$$v', {value:{}});

			//public instance method
			Object.defineProperty(VFile.prototype, 'listFiles', {
			get:function ()
			{
				var $$this = this;

				function listFiles()
				{
					function getFiles($$$$dir, $$$$files_) 
					{
						//set default parameter values
						var dir = $$$$dir;
						var files_ = $$$$files_;

						files_ = files_ || [];
						var files = FileUtil.readDirectory(dir);
						for (var i in files)
						{
							var name = files[i];
							if ($es4.$$primitive(new VFile(name).isDirectory()))
							{
								getFiles(name, files_);
							}
							else
							{
								files_.push($es4.$$primitive(new VFile(name)));
							}
						}
						return files_;
					}
;

					return getFiles($$this.src, []);
				}

				return $$this.$$VFile.$$listFiles || ($$this.$$VFile.$$listFiles = listFiles);
			}});


			//public instance method
			Object.defineProperty(VFile.prototype, 'getPath', {
			get:function ()
			{
				var $$this = this;

				function getPath()
				{
					if (false)
					{
					}
					if (true)
					{
						return VFile.path.dirname($$this.src).split('/').pop();
					}
				}

				return $$this.$$VFile.$$getPath || ($$this.$$VFile.$$getPath = getPath);
			}});


			//public instance method
			Object.defineProperty(VFile.prototype, 'getParent', {
			get:function ()
			{
				var $$this = this;

				function getParent()
				{
					if (false)
					{
					}
					if (true)
					{
						return VFile.path.dirname($$this.src).split('/').pop();
					}
				}

				return $$this.$$VFile.$$getParent || ($$this.$$VFile.$$getParent = getParent);
			}});


			//public instance method
			Object.defineProperty(VFile.prototype, 'isHidden', {
			get:function ()
			{
				var $$this = this;

				function isHidden()
				{
					var parts = $$this.src.split('/');
					if (!$$this.isDirectory())
					{
						parts.pop();
					}
					var src = parts.join('/');
					return src.indexOf('/.') !== -1;
				}

				return $$this.$$VFile.$$isHidden || ($$this.$$VFile.$$isHidden = isHidden);
			}});


			//public instance method
			Object.defineProperty(VFile.prototype, 'equals', {
			get:function ()
			{
				var $$this = this;

				function equals($$$$file)
				{
					//set default parameter values
					var file = $$$$file;

					return $$this.src == file.src;
				}

				return $$this.$$VFile.$$equals || ($$this.$$VFile.$$equals = equals);
			}});


			//public instance method
			Object.defineProperty(VFile.prototype, 'isDirectory', {
			get:function ()
			{
				var $$this = this;

				function isDirectory()
				{
					if (false)
					{
					}
					if (true)
					{
						return VFile.fs.statSync($$this.src).isDirectory();
					}
				}

				return $$this.$$VFile.$$isDirectory || ($$this.$$VFile.$$isDirectory = isDirectory);
			}});


			//public instance method
			Object.defineProperty(VFile.prototype, 'toString', {
			get:function ()
			{
				var $$this = this;

				function toString()
				{
					return $$this.src;
				}

				return $$this.$$VFile.$$toString || ($$this.$$VFile.$$toString = toString);
			}});

			//properties
			Object.defineProperty(VFile.prototype, 'src', {
			get:function () { var $$this = this; return $$this.$$VFile.src; },
			set:function (value) { var $$this = this; $$this.$$VFile.src = $es4.$$coerce(value, String); }
			});

		});

		//class initializer
		VFile.$$cinit = (function ()
		{
			VFile.$$cinit = undefined;

			//initialize properties
			$$j.fs = require('fs');
			$$j.path = require('path');
		
		});

		function VFile()
		{
			var $$this;

			//save scope
			if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
			else
			{
				var $$this = this;

				if (!($$this instanceof VFile) || $$this.$$VFile !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], VFile) : $es4.$$throwArgumentError();
			}

			//call construct if no arguments, or argument zero does not equal manual construct
			if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
			{
				for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

				VFile.$$construct($$this, $$args);
			}
		}

		//construct
		VFile.$$construct = (function ($$this, args)
		{
			//initialize function if not initialized
			if (VFile.$$cinit !== undefined) VFile.$$cinit();

			//hold property values, and methods
			Object.defineProperty($$this, '$$VFile', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


			//initialize properties
			VFile.$$iinit($$this);

			//call constructor
			if (args !== undefined) VFile.$$constructor.apply($$this, args);
		});

		//initializer
		VFile.$$iinit = (function ($$this)
		{
			//initialize properties
			$$this.$$VFile.src = $es4.$$coerce(undefined, String);
		
		});

		//constructor
		VFile.$$constructor = (function ($$$$src)
		{
			var $$this = this;
			//set default parameter values
			var src = $$$$src;

			if (true)
			{
				$$this.src = FileUtil.fixPath(VFile.path.normalize(src));
			}
			if (false)
			{
			}
		});

		return $es4.$$class(VFile, null, 'VFile');
	})();

	return $es4.$$class(FileUtil, {CLASSES:[VFile]}, 'sweetrush.utils::FileUtil');
})();
//sweetrush.utils.FileUtil


//sweetrush.utils.JsonUtil
$es4.$$package('sweetrush.utils').JsonUtil = (function ()
{
	//class pre initializer
	JsonUtil.$$sinit = (function ()
	{
		JsonUtil.$$sinit = undefined;

		//set prototype and constructor
		JsonUtil.prototype = Object.create(Object.prototype);
		Object.defineProperty(JsonUtil.prototype, "constructor", { value: JsonUtil, enumerable: false });

		//hold private values
		Object.defineProperty(JsonUtil.prototype, '$$v', {value:{}});

		//public instance method
		Object.defineProperty(JsonUtil.prototype, 'parse', {
		get:function ()
		{
			var $$this = this;

			function parse($$$$string)
			{
				//set default parameter values
				var string = $es4.$$coerce($$$$string, String);

				return $es4.$$primitive(new Hydrate(string).result);
			}

			return $$this.$$JsonUtil.$$parse || ($$this.$$JsonUtil.$$parse = parse);
		}});


		//public instance method
		Object.defineProperty(JsonUtil.prototype, 'stringify', {
		get:function ()
		{
			var $$this = this;

			function stringify($$$$obj)
			{
				//set default parameter values
				var obj = $$$$obj;

				return $es4.$$coerce($es4.$$primitive(new Dehydrate(obj).result), String);
			}

			return $$this.$$JsonUtil.$$stringify || ($$this.$$JsonUtil.$$stringify = stringify);
		}});
	});

	//class initializer
	JsonUtil.$$cinit = (function ()
	{
		JsonUtil.$$cinit = undefined;
	});

	function JsonUtil()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof JsonUtil) || $$this.$$JsonUtil !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], JsonUtil) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			JsonUtil.$$construct($$this, $$args);
		}
	}

	//construct
	JsonUtil.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (JsonUtil.$$cinit !== undefined) JsonUtil.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$JsonUtil', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		JsonUtil.$$iinit($$this);

		//call constructor
		if (args !== undefined) JsonUtil.$$constructor.apply($$this, args);
	});

	//initializer
	JsonUtil.$$iinit = (function ($$this)
	{
	});

	//constructor
	JsonUtil.$$constructor = (function ()
	{
		var $$this = this;
	});

	////////////////INTERNAL CLASS////////////////
	var Hydrate = (function ()
	{
		//imports
		var getDefinitionByName;
		var getQualifiedClassName;
		var Dictionary;
		var Base64Util;

		//class pre initializer
		Hydrate.$$sinit = (function ()
		{
			Hydrate.$$sinit = undefined;

			//initialize imports
			getDefinitionByName = $es4.$$['flash.utils'].getDefinitionByName;
			getQualifiedClassName = $es4.$$['flash.utils'].getQualifiedClassName;
			Dictionary = $es4.$$['flash.utils'].Dictionary;
			Base64Util = $es4.$$['sweetrush.utils'].Base64Util;

			//set prototype and constructor
			Hydrate.prototype = Object.create(Object.prototype);
			Object.defineProperty(Hydrate.prototype, "constructor", { value: Hydrate, enumerable: false });

			//hold private values
			Object.defineProperty(Hydrate.prototype, '$$v', {value:{}});

			//private instance method
			Hydrate.prototype.$$v.hydrateObject = {
			get:function ()
			{
				var $$this = this.$$this;

				function hydrateObject($$$$object, $$$$type)
				{
					//set default parameter values
					var object = $es4.$$coerce($$$$object, Object);
					var type = $es4.$$coerce($$$$type, String);

					if ($$this.$$Hydrate._hydratedIDs[object.id] !== undefined)
					{
						return $$this.$$Hydrate._hydratedIDs[object.id];
					}
					var properties = null;
					var propertyName = null;
					var robject = type === 'array' ? [] : {};
					$$this.$$Hydrate._hydratedIDs[object.id] = robject;
					properties = object.p || {};
					for (propertyName in properties)
					{
						robject[propertyName] = $$this.$$Hydrate.getValueObject(properties[propertyName]);
					}
					return robject;
				}

				return $$this.$$Hydrate.$$p.$$hydrateObject || ($$this.$$Hydrate.$$p.$$hydrateObject = hydrateObject);
			}};


			//private instance method
			Hydrate.prototype.$$v.getValueObject = {
			get:function ()
			{
				var $$this = this.$$this;

				function getValueObject($$$$object)
				{
					//set default parameter values
					var object = $$$$object;

					if ($es4.$$is(object, String) && object == '__NaN__')
					{
						return $es4.$$coerce(NaN, Object);
					}
					if ($es4.$$is(object, String))
					{
						return Base64Util.decodeString(object);
					}
					if ($es4.$$is(object, Number) || $es4.$$is(object, Boolean) || object == null)
					{
						return object;
					}
					if (object.constructor == Object)
					{
						if (object.r !== undefined)
						{
							var id = $es4.$$coerce(object.r, String);
							var obj = $$this.$$Hydrate._dehydratedObj.o;
							return $$this.$$Hydrate.hydrateObject(obj[id], obj[id].type);
						}
					}
					throw $es4.$$primitive(new Error('unknown value type'));
				}

				return $$this.$$Hydrate.$$p.$$getValueObject || ($$this.$$Hydrate.$$p.$$getValueObject = getValueObject);
			}};

			Object.defineProperty(Hydrate.prototype, 'result', {get:function ()
			{
				var $$this = this;
				return $$this.$$Hydrate._result;
			}});

			//properties
			Hydrate.prototype.$$v._dehydratedObj = {
			get:function () { var $$this = this.$$this; return $$this.$$Hydrate.$$p._dehydratedObj; },
			set:function (value) { var $$this = this.$$this; $$this.$$Hydrate.$$p._dehydratedObj = $es4.$$coerce(value, Object); }
			};

			Hydrate.prototype.$$v._hydratedIDs = {
			get:function () { var $$this = this.$$this; return $$this.$$Hydrate.$$p._hydratedIDs; },
			set:function (value) { var $$this = this.$$this; $$this.$$Hydrate.$$p._hydratedIDs = $es4.$$coerce(value, Object); }
			};

			Hydrate.prototype.$$v._result = {
			get:function () { var $$this = this.$$this; return $$this.$$Hydrate.$$p._result; },
			set:function (value) { var $$this = this.$$this; $$this.$$Hydrate.$$p._result = $es4.$$coerce(value, Object); }
			};

		});

		//class initializer
		Hydrate.$$cinit = (function ()
		{
			Hydrate.$$cinit = undefined;
		});

		function Hydrate()
		{
			var $$this;

			//save scope
			if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
			else
			{
				var $$this = this;

				if (!($$this instanceof Hydrate) || $$this.$$Hydrate !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Hydrate) : $es4.$$throwArgumentError();
			}

			//call construct if no arguments, or argument zero does not equal manual construct
			if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
			{
				for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

				Hydrate.$$construct($$this, $$args);
			}
		}

		//construct
		Hydrate.$$construct = (function ($$this, args)
		{
			//initialize function if not initialized
			if (Hydrate.$$cinit !== undefined) Hydrate.$$cinit();

			//hold property values, and methods
			Object.defineProperty($$this, '$$Hydrate', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

			Object.defineProperty($$this.$$Hydrate, '_dehydratedObj', Hydrate.prototype.$$v._dehydratedObj);
			Object.defineProperty($$this.$$Hydrate, '_hydratedIDs', Hydrate.prototype.$$v._hydratedIDs);
			Object.defineProperty($$this.$$Hydrate, '_result', Hydrate.prototype.$$v._result);

			//private instance method
			Object.defineProperty($$this.$$Hydrate, 'hydrateObject', Hydrate.prototype.$$v.hydrateObject);

			//private instance method
			Object.defineProperty($$this.$$Hydrate, 'getValueObject', Hydrate.prototype.$$v.getValueObject);

			//initialize properties
			Hydrate.$$iinit($$this);

			//call constructor
			if (args !== undefined) Hydrate.$$constructor.apply($$this, args);
		});

		//initializer
		Hydrate.$$iinit = (function ($$this)
		{
			//initialize properties
			$$this.$$Hydrate.$$p._dehydratedObj = $es4.$$coerce(undefined, Object);
			$$this.$$Hydrate.$$p._hydratedIDs = $es4.$$coerce(undefined, Object);
			$$this.$$Hydrate.$$p._result = $es4.$$coerce(undefined, Object);
		
		});

		//constructor
		Hydrate.$$constructor = (function ($$$$string)
		{
			var $$this = this;
			//set default parameter values
			var string = $es4.$$coerce($$$$string, String);

			if (!string)
			{
				return;
			}
			$$this.$$Hydrate._dehydratedObj = JSON.parse(string) || {};
			$$this.$$Hydrate._dehydratedObj.dehydrated || {};
			$$this.$$Hydrate._hydratedIDs = {};
			$$this.$$Hydrate._result = $$this.$$Hydrate.hydrateObject($$this.$$Hydrate._dehydratedObj.dehydrated, $$this.$$Hydrate._dehydratedObj.type);
		});

		return $es4.$$class(Hydrate, null, 'Hydrate');
	})();

	////////////////INTERNAL CLASS////////////////
	var Dehydrate = (function ()
	{
		//imports
		var getDefinitionByName;
		var getQualifiedClassName;
		var Dictionary;
		var Base64Util;

		//class pre initializer
		Dehydrate.$$sinit = (function ()
		{
			Dehydrate.$$sinit = undefined;

			//initialize imports
			getDefinitionByName = $es4.$$['flash.utils'].getDefinitionByName;
			getQualifiedClassName = $es4.$$['flash.utils'].getQualifiedClassName;
			Dictionary = $es4.$$['flash.utils'].Dictionary;
			Base64Util = $es4.$$['sweetrush.utils'].Base64Util;

			//set prototype and constructor
			Dehydrate.prototype = Object.create(Object.prototype);
			Object.defineProperty(Dehydrate.prototype, "constructor", { value: Dehydrate, enumerable: false });

			//hold private values
			Object.defineProperty(Dehydrate.prototype, '$$v', {value:{}});

			//private instance method
			Dehydrate.prototype.$$v.dehydrateObject = {
			get:function ()
			{
				var $$this = this.$$this;

				function dehydrateObject($$$$object)
				{
					//set default parameter values
					var object = $es4.$$coerce($$$$object, Object);

					var dehydrated = $$this.$$Dehydrate.getDehydrated(object);
					if (dehydrated)
					{
						return dehydrated;
					}
					dehydrated = {};
					dehydrated.id = $$this.$$Dehydrate.generateID();
					dehydrated.type = $es4.$$is(object, Array) ? 'array' : 'object';
					$$this.$$Dehydrate._dehydratedNodes[object] = dehydrated;
					if ($es4.$$is(object, Array) || $es4.$$is($es4.$$typeof(object.valueOf()), Object))
					{
						$$this.$$Dehydrate._dehydratedObjects[dehydrated.id] = dehydrated;
						for (var property in object)
						{
							if (dehydrated.p === undefined)
							{
								dehydrated.p = {};
							}
							dehydrated.p[property] = $$this.$$Dehydrate.getValue(object[property]);
						}
						return dehydrated;
					}
					throw $es4.$$primitive(new Error('Type is not supported for dehydration'));
				}

				return $$this.$$Dehydrate.$$p.$$dehydrateObject || ($$this.$$Dehydrate.$$p.$$dehydrateObject = dehydrateObject);
			}};


			//private instance method
			Dehydrate.prototype.$$v.getDehydrated = {
			get:function ()
			{
				var $$this = this.$$this;

				function getDehydrated($$$$object)
				{
					//set default parameter values
					var object = $es4.$$coerce($$$$object, Object);

					return $$this.$$Dehydrate._dehydratedNodes[object];
				}

				return $$this.$$Dehydrate.$$p.$$getDehydrated || ($$this.$$Dehydrate.$$p.$$getDehydrated = getDehydrated);
			}};


			//private instance method
			Dehydrate.prototype.$$v.getValue = {
			get:function ()
			{
				var $$this = this.$$this;

				function getValue($$$$object)
				{
					//set default parameter values
					var object = $es4.$$coerce($$$$object, Object);

					if ($es4.$$is(object, String))
					{
						return Base64Util.encodeString($es4.$$as(object, String));
					}
					if ($es4.$$is(object, Number) && isNaN($es4.$$as(object, Number)))
					{
						return '__NaN__';
					}
					if ($es4.$$is(object, Number) || $es4.$$is(object, Boolean) || object == null)
					{
						return object;
					}
					object = $$this.$$Dehydrate.dehydrateObject(object);
					return {r:object.id};
				}

				return $$this.$$Dehydrate.$$p.$$getValue || ($$this.$$Dehydrate.$$p.$$getValue = getValue);
			}};


			//private instance method
			Dehydrate.prototype.$$v.generateID = {
			get:function ()
			{
				var $$this = this.$$this;

				function generateID()
				{
					return ($$this.$$Dehydrate._idCounter++).toString();
				}

				return $$this.$$Dehydrate.$$p.$$generateID || ($$this.$$Dehydrate.$$p.$$generateID = generateID);
			}};

			Object.defineProperty(Dehydrate.prototype, 'result', {get:function ()
			{
				var $$this = this;
				return $$this.$$Dehydrate._result;
			}});

			//properties
			Dehydrate.prototype.$$v._dehydratedObjects = {
			get:function () { var $$this = this.$$this; return $$this.$$Dehydrate.$$p._dehydratedObjects; },
			set:function (value) { var $$this = this.$$this; $$this.$$Dehydrate.$$p._dehydratedObjects = $es4.$$coerce(value, Object); }
			};

			Dehydrate.prototype.$$v._dehydratedNodes = {
			get:function () { var $$this = this.$$this; return $$this.$$Dehydrate.$$p._dehydratedNodes; },
			set:function (value) { var $$this = this.$$this; $$this.$$Dehydrate.$$p._dehydratedNodes = $es4.$$coerce(value, Dictionary); }
			};

			Dehydrate.prototype.$$v._idCounter = {
			get:function () { var $$this = this.$$this; return $$this.$$Dehydrate.$$p._idCounter; },
			set:function (value) { var $$this = this.$$this; $$this.$$Dehydrate.$$p._idCounter = $es4.$$coerce(value, int); }
			};

			Dehydrate.prototype.$$v._result = {
			get:function () { var $$this = this.$$this; return $$this.$$Dehydrate.$$p._result; },
			set:function (value) { var $$this = this.$$this; $$this.$$Dehydrate.$$p._result = $es4.$$coerce(value, String); }
			};

		});

		//class initializer
		Dehydrate.$$cinit = (function ()
		{
			Dehydrate.$$cinit = undefined;
		});

		function Dehydrate()
		{
			var $$this;

			//save scope
			if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
			else
			{
				var $$this = this;

				if (!($$this instanceof Dehydrate) || $$this.$$Dehydrate !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Dehydrate) : $es4.$$throwArgumentError();
			}

			//call construct if no arguments, or argument zero does not equal manual construct
			if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
			{
				for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

				Dehydrate.$$construct($$this, $$args);
			}
		}

		//construct
		Dehydrate.$$construct = (function ($$this, args)
		{
			//initialize function if not initialized
			if (Dehydrate.$$cinit !== undefined) Dehydrate.$$cinit();

			//hold property values, and methods
			Object.defineProperty($$this, '$$Dehydrate', {value:{$$this:$$this, $$p:{}, $$ns:{}}});

			Object.defineProperty($$this.$$Dehydrate, '_dehydratedObjects', Dehydrate.prototype.$$v._dehydratedObjects);
			Object.defineProperty($$this.$$Dehydrate, '_dehydratedNodes', Dehydrate.prototype.$$v._dehydratedNodes);
			Object.defineProperty($$this.$$Dehydrate, '_idCounter', Dehydrate.prototype.$$v._idCounter);
			Object.defineProperty($$this.$$Dehydrate, '_result', Dehydrate.prototype.$$v._result);

			//private instance method
			Object.defineProperty($$this.$$Dehydrate, 'dehydrateObject', Dehydrate.prototype.$$v.dehydrateObject);

			//private instance method
			Object.defineProperty($$this.$$Dehydrate, 'getDehydrated', Dehydrate.prototype.$$v.getDehydrated);

			//private instance method
			Object.defineProperty($$this.$$Dehydrate, 'getValue', Dehydrate.prototype.$$v.getValue);

			//private instance method
			Object.defineProperty($$this.$$Dehydrate, 'generateID', Dehydrate.prototype.$$v.generateID);

			//initialize properties
			Dehydrate.$$iinit($$this);

			//call constructor
			if (args !== undefined) Dehydrate.$$constructor.apply($$this, args);
		});

		//initializer
		Dehydrate.$$iinit = (function ($$this)
		{
			//initialize properties
			$$this.$$Dehydrate.$$p._dehydratedObjects = $es4.$$coerce({}, Object);
			$$this.$$Dehydrate.$$p._dehydratedNodes = $es4.$$coerce($es4.$$primitive(new Dictionary()), Dictionary);
			$$this.$$Dehydrate.$$p._idCounter = $es4.$$coerce(1, int);
			$$this.$$Dehydrate.$$p._result = $es4.$$coerce(undefined, String);
		
		});

		//constructor
		Dehydrate.$$constructor = (function ($$$$persistable)
		{
			var $$this = this;
			//set default parameter values
			var persistable = $$$$persistable;

			var dehydrated = $$this.$$Dehydrate.dehydrateObject(persistable);
			var obj = {};
			obj.dehydrated = dehydrated;
			obj.type = $es4.$$is(persistable, Array) ? 'array' : 'object';
			obj.o = $$this.$$Dehydrate._dehydratedObjects;
			$$this.$$Dehydrate._result = JSON.stringify(obj);
		});

		return $es4.$$class(Dehydrate, null, 'Dehydrate');
	})();

	return $es4.$$class(JsonUtil, {CLASSES:[Hydrate, Dehydrate]}, 'sweetrush.utils::JsonUtil');
})();
//sweetrush.utils.JsonUtil


//sweetrush.utils.SwcUtil
$es4.$$package('sweetrush.utils').SwcUtil = (function ()
{
	//imports
	var JsonUtil;

	//class pre initializer
	SwcUtil.$$sinit = (function ()
	{
		SwcUtil.$$sinit = undefined;

		//initialize imports
		JsonUtil = $es4.$$['sweetrush.utils'].JsonUtil;

		//set prototype and constructor
		SwcUtil.prototype = Object.create(Object.prototype);
		Object.defineProperty(SwcUtil.prototype, "constructor", { value: SwcUtil, enumerable: false });

		//hold private values
		Object.defineProperty(SwcUtil.prototype, '$$v', {value:{}});
	});

	//class initializer
	SwcUtil.$$cinit = (function ()
	{
		SwcUtil.$$cinit = undefined;
	});

	//public static method
	SwcUtil.stringifySWC = (function ($$$$obj)
	{
		if (SwcUtil.$$cinit !== undefined) SwcUtil.$$cinit();

		//set default parameter values
		var obj = $$$$obj;

		return '_SWC_' + ($es4.$$primitive(new JsonUtil().stringify(obj)));
	});

	//public static method
	SwcUtil.parseSWCString = (function ($$$$contents)
	{
		if (SwcUtil.$$cinit !== undefined) SwcUtil.$$cinit();

		//set default parameter values
		var contents = $$$$contents;

		return $es4.$$primitive(new JsonUtil().parse(contents.substring(5)));
	});

	//public static method
	SwcUtil.isValidSWCString = (function ($$$$contents)
	{
		if (SwcUtil.$$cinit !== undefined) SwcUtil.$$cinit();

		//set default parameter values
		var contents = $$$$contents;

		return contents.indexOf('_SWC_') == 0;
	});
	function SwcUtil()
	{
		var $$this;

		//save scope
		if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];
		else
		{
			var $$this = this;

			if (!($$this instanceof SwcUtil) || $$this.$$SwcUtil !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], SwcUtil) : $es4.$$throwArgumentError();
		}

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			SwcUtil.$$construct($$this, $$args);
		}
	}

	//construct
	SwcUtil.$$construct = (function ($$this, args)
	{
		//initialize function if not initialized
		if (SwcUtil.$$cinit !== undefined) SwcUtil.$$cinit();

		//hold property values, and methods
		Object.defineProperty($$this, '$$SwcUtil', {value:{$$this:$$this, $$p:{}, $$ns:{}}});


		//initialize properties
		SwcUtil.$$iinit($$this);

		//call constructor
		if (args !== undefined) SwcUtil.$$constructor.apply($$this, args);
	});

	//initializer
	SwcUtil.$$iinit = (function ($$this)
	{
	});

	//constructor
	SwcUtil.$$constructor = (function ()
	{
		var $$this = this;
	});

	return $es4.$$class(SwcUtil, null, 'sweetrush.utils::SwcUtil');
})();
//sweetrush.utils.SwcUtil


$es4.$$['sweetrush'].AS3_JS.$$pcinit();

$es4.$$['sweetrush.core'].Analyzer.$$pcinit();

$es4.$$['sweetrush.core'].Lexer.$$pcinit();

$es4.$$['sweetrush.core'].Parser.$$pcinit();

$es4.$$['sweetrush.core'].TranslatorProto.$$pcinit();

$es4.$$['sweetrush.core'].TranslatorPrototype.$$pcinit();

$es4.$$['sweetrush.obj'].Construct.$$pcinit();

$es4.$$['sweetrush.obj'].Token.$$pcinit();

$es4.$$['sweetrush.utils'].Base64Util.$$pcinit();

$es4.$$['sweetrush.utils'].FileUtil.$$pcinit();

$es4.$$['sweetrush.utils'].JsonUtil.$$pcinit();

$es4.$$['sweetrush.utils'].SwcUtil.$$pcinit();

if ($es4.$$['sweetrush'].AS3_JS.$$sinit !== undefined) $es4.$$['sweetrush'].AS3_JS.$$sinit();

if ($es4.$$['sweetrush.core'].Analyzer.$$sinit !== undefined) $es4.$$['sweetrush.core'].Analyzer.$$sinit();

if ($es4.$$['sweetrush.core'].Lexer.$$sinit !== undefined) $es4.$$['sweetrush.core'].Lexer.$$sinit();

if ($es4.$$['sweetrush.core'].Parser.$$sinit !== undefined) $es4.$$['sweetrush.core'].Parser.$$sinit();

if ($es4.$$['sweetrush.core'].TranslatorProto.$$sinit !== undefined) $es4.$$['sweetrush.core'].TranslatorProto.$$sinit();

if ($es4.$$['sweetrush.core'].TranslatorPrototype.$$sinit !== undefined) $es4.$$['sweetrush.core'].TranslatorPrototype.$$sinit();

if ($es4.$$['sweetrush.obj'].Construct.$$sinit !== undefined) $es4.$$['sweetrush.obj'].Construct.$$sinit();

if ($es4.$$['sweetrush.obj'].Token.$$sinit !== undefined) $es4.$$['sweetrush.obj'].Token.$$sinit();

if ($es4.$$['sweetrush.utils'].Base64Util.$$sinit !== undefined) $es4.$$['sweetrush.utils'].Base64Util.$$sinit();

if ($es4.$$['sweetrush.utils'].FileUtil.$$sinit !== undefined) $es4.$$['sweetrush.utils'].FileUtil.$$sinit();

if ($es4.$$['sweetrush.utils'].JsonUtil.$$sinit !== undefined) $es4.$$['sweetrush.utils'].JsonUtil.$$sinit();

if ($es4.$$['sweetrush.utils'].SwcUtil.$$sinit !== undefined) $es4.$$['sweetrush.utils'].SwcUtil.$$sinit();

window.as3_js = new $es4.$$['sweetrush'].AS3_JS($es4.$$MANUAL_CONSTRUCT)
$es4.$$construct(window.as3_js, $es4.$$EMPTY_ARRAY);
return window.as3_js;})();