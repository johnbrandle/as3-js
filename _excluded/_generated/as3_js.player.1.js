//__ES4__

(function() { var $window = this; var window = $window.parent || $window; var global = window; var document = window.document; var $es4 = window.$es4 || (window.$es4 = {}); var _ = window._; var $ = window.$; var alert = window.alert; 

/**
 * @author		John Brandle
 * @license		see "NOTICE" file
 * @date		04.15.2013
 */

if ($es4.$$window === undefined)
{	 
	$es4.$$window = $window;
	$es4.$$startTime = new Date().getTime();
	 
	$es4.$$EMPTY_ARRAY = [];
	$es4.$$EMPTY_OBJECT = {};
	$es4.$$VALUE_OBJECT = {};
	$es4.$$DEFAULT_PROPERTY_VALUE = {};
	$es4.$$MANUAL_CONSTRUCT = {};
	 
	Object.defineProperty(Object.prototype, '$$hasOwnProperty', {value:Object.prototype.hasOwnProperty});
	Object.defineProperty(Object.prototype, '$$propertyIsEnumerable', {value:Object.prototype.propertyIsEnumerable});

	Object.defineProperty(Object.prototype, 'hasOwnProperty', {value:function(property)
	{
		var proto = this;
		while (proto !== null)
		{
			if (proto.$$hasOwnProperty(property)) return true;
			
			proto = proto.__proto__;
		}
		
		return false;
	}});
	Object.defineProperty(Object.prototype, '$$hasOwnProperty_private', {value:Object.prototype.hasOwnProperty});

	Object.defineProperty(Object.prototype, 'propertyIsEnumerable', {value:function(property)
	{
		var proto = this;
		while (proto !== null)
		{
			if (proto.$$hasOwnProperty(property)) return proto.$$propertyIsEnumerable(property);
			
			proto = proto.__proto__;
		}
		
		return false;
	}});

	Object.defineProperty(Object.prototype, 'toString', {value:function() 
	{ 
		var val = (this.constructor !== undefined) ? this.constructor.name : this; //nodejs depd blows up without this
		return '[object ' + val + ']'; 
	}});

	Object.defineProperty(Object.prototype, '$$nextNameIndex', {value:function(index)
	{
		if (this.$$names === undefined || index === 0)
		{
			if (this.$$names === undefined) Object.defineProperty(this, '$$names', void ($es4.$$VALUE_OBJECT.value = []) || $es4.$$VALUE_OBJECT);
			else this.$$names.splice(0, this.$$names.length);
		
			var i = 0;
			for (var name in this) this.$$names[i++] = name;
		}
		
		return (index < this.$$names.length) ? index + 1 : 0;
	}});

	Object.defineProperty(Object.prototype, '$$nextName', {value:function(index)
	{	
		if (this.$$names === undefined) 
		{
			Object.defineProperty(this, '$$names', void ($es4.$$VALUE_OBJECT.value = []) || $es4.$$VALUE_OBJECT);
			
			var i = 0;
			for (var name in this) this.$$names[i++] = name;
		}

		var name = this.$$names[index - 1];
		if (!(name in this))
		{
			this.$$nextNameIndex(0);
			return this.$$nextName(index);
		}
		
		return name;
	}});

	Object.defineProperty(Object.prototype, '$$nextValue', {value:function(index)
	{
		if (this.$$names === undefined) 
		{
			Object.defineProperty(this, '$$names', void ($es4.$$VALUE_OBJECT.value = []) || $es4.$$VALUE_OBJECT);
			
			var i = 0;
			for (var name in this) this.$$names[i++] = name;
		}
		
		var name = this.$$names[index - 1];
		if (!(name in this))
		{
			this.$$nextNameIndex(0);
			return this.$$nextValue(index);
		}
		
		return this[name]; //TODO $$get(this, $$this, $$thisp, name);
	}});

	$es4.requestAnimationFrame = $es4.$$window.requestAnimationFrame || $es4.$$window.webkitRequestAnimationFrame || $es4.$$window.mozRequestAnimationFrame || $es4.$$window.oRequestAnimationFrame || $es4.$$window.msRequestAnimationFrame;

	$es4.$$class = function(Type, info, fullyQualifiedName)
	{
		if (Type.name === undefined) Object.defineProperty(Type, 'name', {value:fullyQualifiedName.split('::').pop()});
		Type.$$isclass = true;
		Type.$$fullyQualifiedName = fullyQualifiedName;
		Type.$$info = info;
		Type.toString = function() { return '[class ' + Type.name + ']'; };
		
		if (info === undefined) return Type;  //basic type
		
		Type.$$pcinit = function()
		{	
			info = Type.$$info;
		
			Type.$$info = undefined;
			Type.$$pcinit = undefined;
			
			if (info === null) 
			{
				$es4.$$extends(Type, Object);
				return;
			}
			
			if (info.INTERFACES !== undefined)
			{
				for (var i = info.INTERFACES.length; i--;) 
				{
					info.INTERFACES[i].$$pcinit();
					if (info.INTERFACES[i].$$sinit !== undefined) info.INTERFACES[i].$$sinit();
				}
			}

			if (info.EXTENDS !== undefined) 
			{
				var extendsInfo = info.EXTENDS;
				if (typeof extendsInfo === 'string')
				{ 
					var index = extendsInfo.lastIndexOf('.');
					if (index === -1) $es4.$$extends(Type, $es4.$$[''][extendsInfo]);
					else $es4.$$extends(Type, $es4.$$[extendsInfo.substring(0, index)][extendsInfo.substring(index + 1)]);
				}
				else $es4.$$extends(Type, extendsInfo);
			}
			else $es4.$$extends(Type, Object);
			
			if (info.IMPLEMENTS !== undefined)
			{
				var implementsInfo = info.IMPLEMENTS;
				for (var i = implementsInfo.length; i--;)
				{
					var implementInfo = implementsInfo[i];
					
					if (typeof implementInfo !== 'string') continue;
					
					var index = implementInfo.lastIndexOf('.');
					if (index === -1) implementsInfo[i] = $es4.$$[''][implementInfo];
					else implementsInfo[i] = $es4.$$[implementInfo.substring(0, index)][implementInfo.substring(index + 1)];
				}
				
				implementsInfo.unshift(Type);
				
				Type.$$implementsInterfaces = implementsInfo;
				Type.$$_implements = [];
				switch (implementsInfo.length)
				{
					case 1:
						break;
					case 2:
						$es4.$$implements(implementsInfo[0], implementsInfo[1]);
						break;
					case 3:
						$es4.$$implements(implementsInfo[0], implementsInfo[1], implementsInfo[2]);
						break;
					case 4:
						$es4.$$implements(implementsInfo[0], implementsInfo[1], implementsInfo[2], implementsInfo[3]);
						break;
					default:
						$es4.$$implements.apply(null, implementsInfo);
						break;
				}
			}
			else Type.$$implementsInterfaces = $es4.$$EMPTY_ARRAY;
			
			if (info.CLASSES !== undefined)
			{
				for (var i = info.CLASSES.length; i--;) 
				{
					info.CLASSES[i].$$pcinit();
					if (info.CLASSES[i].$$sinit !== undefined) info.CLASSES[i].$$sinit();
				}
			}
		};
		
		return Type;
	}

	$es4.$$function = function(Type)
	{
		Type.$$ismethod = true;
		
		return Type;
	}

	$es4.$$interface = function(Type, info, fullyQualifiedName)
	{
		if (Type.name === undefined) Object.defineProperty(Type, 'name', {value:fullyQualifiedName.split('::').pop()});
		Type.$$isclass = true;
		Type.$$fullyQualifiedName = fullyQualifiedName;
		Type.$$info = info;
		Type.toString = function() { return '[class ' + Type.name + ']'; };
		
		Type.$$pcinit = function()
		{
			info = Type.$$info;
			
			Type.$$info = undefined;
			Type.$$pcinit = undefined;
			
			if (info === null) 
			{
				Type.$$implementsInterfaces = $es4.$$EMPTY_ARRAY;
				return;
			}

			if (info.IMPLEMENTS !== undefined) 
			{
				var implementsInfo = info.IMPLEMENTS;
				for (var i = implementsInfo.length; i--;)
				{
					var implementInfo = implementsInfo[i];
					
					if (typeof implementInfo !== 'string') continue;
					
					var index = implementInfo.lastIndexOf('.');
					if (index === -1) implementsInfo[i] = $es4.$$[''][implementInfo];
					else implementsInfo[i] = $es4.$$[implementInfo.substring(0, index)][implementInfo.substring(index + 1)];
				}
				
				Type.$$implementsInterfaces = info.IMPLEMENTS;
			}
			else Type.$$implementsInterfaces = $es4.$$EMPTY_ARRAY;
		};

		return Type;
	}

	$es4.$$super = function(object)
	{
		var s = {};
		Object.defineProperty(s, '$$z', {value:function()
		{
			if (object.__proto__.$$constructor === undefined) throw new Error('trouble calling super for: ' + object.constructor.name + ', ' + object.__proto__.constructor.name);
			switch (arguments.length)
			{
				case 0:
					object.__proto__.$$constructor();
					break;
				case 1:
					object.__proto__.$$constructor(arguments[0]);
					break;
				case 2:
					object.__proto__.$$constructor(arguments[0], arguments[1]);
					break;
				case 3:
					object.__proto__.$$constructor(arguments[0], arguments[1], arguments[2]);
					break;
				default:
					object.__proto__.$$constructor.apply(null, arguments);
					break;
			}
			
		}});
		s.__proto__ = object.__proto__;
		return s;
	}

	$es4.$$super2 = function($$this, Type, $$typeString, propertyName, type, arg)
	{
		while (!Type.prototype.$$hasOwnProperty(propertyName)) Type = Type.__proto__;	
		
		if (type == 'func') 
		{
			//if ($$this[$$typeString].$$hasOwnProperty(propertyName)) return $$this[$$typeString][propertyName];
			return Object.getOwnPropertyDescriptor(Type.prototype, propertyName).get.call($$this);
		}
		
		if (type == 'get') return Object.getOwnPropertyDescriptor(Type.prototype, propertyName).get.call($$this);
		if (type == 'set') return Object.getOwnPropertyDescriptor(Type.prototype, propertyName).set.call($$this, arg);
		
		throw new Error('unknown type');
	}

	$es4.$$getOwnScope = function(scope, Type)
	{
		if (Type.prototype.$$v !== undefined) return Type.prototype;
		
		//proto method
		while (scope.constructor != Type) scope = scope.__proto__;	
		return scope;
	}

	$es4.$$getDescriptor = function(scope, propertyName)
	{
		return Object.getOwnPropertyDescriptor(scope, propertyName);
	}

	$es4.$$primitive = function(object)
	{
		if (object !== undefined && object !== null) 
		{
			switch (object.constructor.name)
			{
				case 'Boolean':
				case 'String':
				case 'Number':
				case 'uint':
				case 'int':
					return object.valueOf();
			}
		}
		
		return object;
	}

	$es4.$$construct = function(object, args)
	{	
		if (object.constructor.$$construct !== undefined) return object.constructor.$$construct(object, args);
		
		var objectTypeObject = object.__proto__;
		var Type = object.constructor.__proto__;
		var innerObject = object;
		var innerTypeObject = objectTypeObject;
		var innerObjectSave;
		var innerObjectSaveConstructor;
		var VALUE_OBJECT = $es4.$$VALUE_OBJECT;
		var MANUAL_CONSTRUCT = $es4.$$MANUAL_CONSTRUCT;
		while (Type.$$isclass !== undefined && Type !== Class)
		{
			innerObjectSave = innerObject;
			innerObjectSaveConstructor = innerObject.constructor;
			innerObject = innerObject.__proto__ = (Type !== Object) ? new Type(MANUAL_CONSTRUCT, object) : {};
			Object.defineProperty(innerObjectSave, 'constructor', void (VALUE_OBJECT.value = innerObjectSaveConstructor) || VALUE_OBJECT);
			
			innerTypeObject = innerTypeObject.__proto__ = innerObject.__proto__;
			
			Type = Type.__proto__;
		}
		innerObject.__proto__ = objectTypeObject;
		
		innerObject = object;
		while (innerObject !== objectTypeObject)
		{
			if (innerObject.$$iinit !== undefined) innerObject.$$iinit();
			innerObject = innerObject.__proto__;
		}
		
		switch (args.length)
		{
			case 0:
				object.$$constructor();
				break;
			case 1:
				object.$$constructor(args[0]);
				break;
			case 2:
				object.$$constructor(args[0], args[1]);
				break;
			case 3:
				object.$$constructor(args[0], args[1], args[2]);
				break;
			case 4:
				object.$$constructor(args[0], args[1], args[2], args[3]);
				break;
			default:
				object.$$constructor.apply(object, args);
				break;
		}
	}

	$es4.$$extends = function(object, Type)
	{
		object.__proto__ = Type;
	}

	$es4.$$implements = function(object)
	{
		var argumentsLength = arguments.length;
		for (var i = 1; i < argumentsLength; i++)
		{
			var Type = arguments[i];
			
			var implementsInterfaces = Type.$$implementsInterfaces;
			for (var j = implementsInterfaces.length; j--;) $es4.$$implements(object, implementsInterfaces[j]);
			
			object.$$_implements.push(Type);
		}
	}

	$es4.$$is = function(object, Type)
	{
		if ($es4.$$instanceof(object, Type)) return true;
		
		var proto = object;
		while (proto != null)
		{
			if (proto.constructor.$$_implements !== undefined && proto.constructor.$$_implements.indexOf(Type) !== -1) return true;
			proto = proto.__proto__;
		}
		
		return false
	}

	$es4.$$instanceof = function(object, Type)
	{
		if (object === null || object === undefined) return false;
		if (Type === Class && object.$$isclass !== undefined) return true;
		if (Type === Object && object.$$isclass === undefined) return true;
		if (object instanceof Type) return true;
		
		var typeOfObject = typeof object;
		
		switch (typeOfObject)
		{
			case 'string':
				return Type === String;
			case 'number':
				if (Type === Number) return true;
				if (Type === uint || Type === int) return Type(object) == object;
				break;
			case 'boolean':
				return Type === Boolean;
			case 'function':
				if (object.$$isclass === undefined) return Type === Function;
				if (Type === Function) return false;

				var proto = object.__proto__;
				while (proto !== null)
				{
					if (proto === Type) return true;
					proto = proto.__proto__;
				}
				
				return false;
		}
		
		return false;
	}

	$es4.$$typeof = function(object)
	{
		return (object !== null && object !== undefined && object.$$isclass !== undefined) ? 'object' : typeof object;
	}

	$es4.$$as = function(object, Type)
	{
		return (object === null || object === undefined) ? null : ($es4.$$is(object, Type)) ? object : null;
	}

	$es4.$$coerce = function(value, coerceType)
	{
		switch (coerceType)
		{
			case Object:
			case Function:
			case Array:
			case Date:
				return (!$es4.$$is(value, coerceType)) ? null : value;
			case String:
				return (value === null || value === undefined) ? null : String(value);
			case Boolean:
				if (value === true || value === false) return value;
				return Boolean(value);
			case Number:
			case uint:
			case int:
				return coerceType(value);
			default:			
				return coerceType(value);
		}
	}

	$es4.$$isPrivateProperty = function(scope, object)
	{
		if (typeof object !== 'string') return false;
		
		var proto = scope;
		while (proto !== null)
		{
			if (proto.$$hasOwnProperty(object)) return (scope.$$private !== undefined && scope.$$private.$$hasOwnProperty(object));
			
			proto = proto.__proto__;
		}
		
		throw new Error('$$isPrivateProperty:: property not found: ' + object);
	}

	$es4.$$delete = function(scope, $$this, $$thisp)
	{
		var argumentsLength = arguments.length;

		if (argumentsLength > 4) 
		{
			var i, args = new Array(argumentsLength - 1);
			for (i = 0; i < argumentsLength - 1; i += 1) args[i] = arguments[i];		
			
			scope = $es4.$$get.apply(this, args);
		}
		
		var object = arguments[argumentsLength - 1];
		
		if (scope.$$hasOwnProperty_private('$$isProxy') && (typeof object !== 'string' || !scope.$$hasOwnProperty_private(object) || ($es4.$$isPrivateProperty(scope, object) && scope !== $$thisp))) return scope.$$delete(object);
		else return delete scope[object];
	}

	$es4.$$get = function(scope, $$this, $$thisp)
	{
		var argumentsLength = arguments.length;
		if (argumentsLength === 3) return scope;
		
		var originalScope = scope;
		var index = 3;
		while (index < argumentsLength)
		{
			var object = arguments[index];
			if (scope.$$hasOwnProperty_private('$$isProxy') && (typeof object !== 'string' || !scope.$$hasOwnProperty_private(object) || ($es4.$$isPrivateProperty(scope, object) && scope !== $$thisp))) scope = scope.$$get(object);
			else if (scope.constructor.$$isclass !== undefined && scope === $$this && $$thisp.$$private !== undefined && $$thisp.$$private.$$hasOwnProperty(object)) scope = $$thisp[object];
			else scope = scope[object];
			
			index++;
		}
		
		return (scope != null && scope.call !== undefined && scope.apply !== undefined && scope.bind !== undefined && scope.$$isclass === undefined && scope.$$ismethod === undefined && Function.prototype.$$hasOwnProperty(object)) ? scope.bind(originalScope) : scope;  //this is supposed to bind things like myarray.split //instead of doing this it this way, check if the scope is an array, then see if the name of the prop is a native function, like split, then bind as necessary
	}

	$es4.$$call = function(scope, $$this, $$thisp)
	{
		var argumentsLength = arguments.length;
		
		if (argumentsLength > 5) 
		{
			var i, args = new Array(argumentsLength - 2);
			for (i = 0; i < argumentsLength - 2; i += 1) args[i] = arguments[i];	
			
			scope = $es4.$$get.apply(this, args);
		}
		
		var args = arguments[argumentsLength - 1];
		var object = arguments[argumentsLength - 2];
		
		scope = (scope.constructor.$$isclass !== undefined && scope === $$this && $$thisp.$$private !== undefined && $$thisp.$$private.$$hasOwnProperty(object)) ? $$thisp : scope;
		if (scope.$$hasOwnProperty_private('$$isProxy') && (typeof object !== 'string' || !scope.$$hasOwnProperty_private(object) || ($es4.$$isPrivateProperty(scope, object) && scope !== $$thisp))) return scope.$$call(object, args);
		else 
		{
			try { return scope[object].apply(scope, args); }
			catch (error)
			{
				if ($es4.$$window.navigator.userAgent.indexOf("Firefox") > 0 && scope && $es4.$$is(scope[object], Function)) try { trace(scope[object].toSource()); } catch (error2) {}
				
				throw error;
			}
		}
	}

	$es4.$$set = function(scope, $$this, $$thisp)
	{
		var argumentsLength = arguments.length;
		
		if (argumentsLength > 5) 
		{
			var i, args = new Array(argumentsLength - 3);
			for (i = 0; i < argumentsLength - 3; i += 1) args[i] = arguments[i];	
			
			scope = $es4.$$get.apply(this, args);
		}
		
		var operator = arguments[argumentsLength - 1];
		var value = arguments[argumentsLength - 2];
		var object = arguments[argumentsLength - 3];
		
		scope = (scope.constructor.$$isclass !== undefined && scope === $$this && $$thisp.$$private !== undefined && $$thisp.$$private.$$hasOwnProperty(object)) ? $$thisp : scope;
		
		var useSet = (scope.$$hasOwnProperty_private('$$isProxy') && (typeof object !== 'string' || !scope.$$hasOwnProperty_private(object) || ($es4.$$isPrivateProperty(scope, object) && scope !== $$thisp)));
		switch (operator)
		{
			case '=':
				return (useSet) ? scope.$$set(object, value) : scope[object] = value;
			case '+=':
				if (useSet) { return (scope instanceof XMLList && !isNaN(object)) ? scope.$$append(object, value) : scope.$$set(object, scope.$$get(object) + value); }
				return scope[object] += value;
			case '-=':
				return (useSet) ? scope.$$set(object, scope.$$get(object) - value) : (scope[object] -= value);
			case '/=':
				return (useSet) ? scope.$$set(object, scope.$$get(object) / value) : (scope[object] /= value);
			case '*=':
				return (useSet) ? scope.$$set(object, scope.$$get(object) * value) : (scope[object] *= value);
			case '%=':
				return (useSet) ? scope.$$set(object, scope.$$get(object) % value) : (scope[object] %= value);
			case '|=':
				return (useSet) ? scope.$$set(object, scope.$$get(object) | value) : (scope[object] |= value);
			case '&=':
				return (useSet) ? scope.$$set(object, scope.$$get(object) & value) : (scope[object] &= value);
			case '^=':
				return (useSet) ? scope.$$set(object, scope.$$get(object) ^ value) : (scope[object] ^= value);
			case '<<':
				return (useSet) ? scope.$$set(object, scope.$$get(object) << value) : (scope[object]= scope[object] << value);
			case '>>':
				return (useSet) ? scope.$$set(object, scope.$$get(object) >> value) : (scope[object] = scope[object] >> value);
			case '>>>':
				return (useSet) ? scope.$$set(object, scope.$$get(object) >>> value) : (scope[object] = scope[object] >>> value);
			case '||=':
				return (useSet) ? scope.$$set(object, scope.$$get(object) || value) : (scope[object] = scope[object] || value);
			case '&&=':
				return (useSet) ? scope.$$set(object, scope.$$get(object) && value) : (scope[object] = scope[object] && value);
			case '++':
			case '--':
				if (value === 'prefix')
				{
					if (useSet) return scope.$$prefix(object, operator);  //TODO
					if (operator === '++') return ++scope[object];
					else return --scope[object];
				}
				else if (value === 'postfix')
				{
					if (useSet) return scope.$$postfix(object, operator);  //TODO
					if (operator === '++') return scope[object]++;
					else return scope[object]--;
				}
			default:
				throw new Error('unknown operator used in $$set: ' + operator);
		}
	}

	$es4.$$ = {};
	$es4.$$package = function($package)
	{
		return ($es4.$$[$package] !== undefined) ? $es4.$$[$package] : $es4.$$[$package] = ($package != '') ? {} : $es4.$$window;
	}

	Object.defineProperty(Object.prototype, '$$namespace', {value:function(namespace, object, pscope)
	{
		if (object === undefined) object = this;
		if (namespace.constructor === String) return ($es4.$$namespaces[namespace] === undefined) ? $es4.$$namespaces[namespace] = {name:namespace, toString:function() { return namespace; }} : $es4.$$namespaces[namespace];
		if (object.$$namespaces === undefined) Object.defineProperty(object, '$$namespaces', void ($es4.$$VALUE_OBJECT.value = {}) || $es4.$$VALUE_OBJECT);
		namespace = (object.$$namespaces && object.$$namespaces[namespace.name]) ? object.$$namespaces[namespace.name] : object.$$namespaces[namespace.name] = {};
		if (pscope === object || pscope === undefined) return namespace;
		
		var Class;
		var SuperClass;
		var Type;
		var objectProto;
		
		//for whatever reason, mobile safari inconsistently fails when testing if Type and SuperClass are equal 
		//an empty try catch try {} catch(e) {) appears to fix this issue... MAGIC!
		//to reproduce, create about 15 - 20 new TextField() objects in a row, and remove the try catch below
		//UPDATE: THIS MAY BE UNNECESSARY NOW
		try { Class = null; } catch(e) {}; //Note: Class = null is only there to prevent closure compiler warning
		
		Class = object.constructor;
		SuperClass = pscope.constructor;
		Type = Class;
		objectProto = $es4.$$EMPTY_OBJECT.__proto__;
		
		while (Type !== SuperClass)
		{
			if (!namespace.__proto__ || namespace.__proto__ === objectProto) namespace.__proto__ = {};
			namespace = namespace.__proto__;
			Type = Type.__proto__;
		}
		return namespace;
	}});
	$es4.$$namespaces = {};

	$es4.$$expose = function(functionName, closure)
	{
		$es4.$$exposed.functionName = closure;
	}
	$es4.$$exposed = {};

	$es4.$$constructor = function(scope, func)
	{	
		Object.defineProperty(scope, '$$constructor', void ($es4.$$VALUE_OBJECT.value = func) || $es4.$$VALUE_OBJECT);
	}

	$es4.$$iinit = function(scope, func)
	{
		Object.defineProperty(scope, '$$iinit', void ($es4.$$VALUE_OBJECT.value = func) || $es4.$$VALUE_OBJECT);
	}

	$es4.$$public_namespace = function(name, scope, propName)
	{
		if ($es4.$$namespaces[name] === undefined) $es4.$$namespaces[name] = {name:name, toString:function() { return name; }};
		
		Object.defineProperty(scope, propName, {value:$es4.$$namespaces[name]});
	}
	$es4.$$private_namespace = function(name, scope, propName)
	{
		if ($es4.$$namespaces[name] === undefined) $es4.$$namespaces[name] = {name:name, toString:function() { return name; }};
		
		if (scope.$$private === undefined) Object.defineProperty(scope, '$$private', {value:{}});
		scope.$$private[name] = name;
		
		Object.defineProperty(scope, propName, {value:$es4.$$namespaces[name]});
	}
	$es4.$$protected_namespace = $es4.$$public_namespace;
	$es4.$$internal_namespace = $es4.$$public_namespace;
	$es4.$$cnamespace_namespace = function(name, scope, namespace, propName)
	{
		$es4.$$public_namespace(name, $es4.$$namespace(namespace, scope), propName);
	}

	$es4.$$getDefaultPropertyValue = function(type)
	{
		if (type == null) return undefined;
		
		switch (type)
		{
			case int:
			case uint:
				return 0;
			case Number:
				return NaN;
			case Boolean:
				return false;
		}
		
		return null;
	}

	$es4.$$public_property = function(name, scope, coerceType)
	{
		if (coerceType === undefined)
		{
			Object.defineProperty(scope, name, {value:undefined, writable:true});
			return;
		}
		
		var obj;
		var getFunc;
		var setFunc;
		if (typeof scope === 'function')
		{
			var normalized = false;
			
			getFunc = function() 
			{ 
				if (scope.$$cinit !== undefined) scope.$$cinit(); 
				
				if (normalized === true) return obj;
				
				if (typeof coerceType === 'string')
				{
					var index = coerceType.lastIndexOf('.');
					if (index === -1) coerceType = $es4.$$[''][coerceType];
					else coerceType = $es4.$$[coerceType.substring(0, index)][coerceType.substring(index + 1)];
				}
				normalized = true;
				
				return obj = $es4.$$getDefaultPropertyValue(coerceType);
			}
			setFunc = function(value) 
			{ 
				if (scope.$$cinit !== undefined) scope.$$cinit(); 
				
				if (normalized === true)
				{
					obj = $es4.$$coerce(value, coerceType);
					return;
				}
				
				if (typeof coerceType === 'string')
				{
					var index = coerceType.lastIndexOf('.');
					if (index === -1) coerceType = $es4.$$[''][coerceType];
					else coerceType = $es4.$$[coerceType.substring(0, index)][coerceType.substring(index + 1)];
				}
				normalized = true;
				
				obj = $es4.$$coerce(value, coerceType);
			}
		}
		else 
		{
			obj = $es4.$$getDefaultPropertyValue(coerceType);
			getFunc = function() { return obj; };
			setFunc = function(value) { obj = $es4.$$coerce(value, coerceType); };
		}
		
		Object.defineProperty(scope, name, {get:getFunc, set:setFunc});
	}
	 
	$es4.$$private_property = function(name, scope, coerceType)
	{
		if (scope.$$private === undefined) Object.defineProperty(scope, '$$private', void ($es4.$$VALUE_OBJECT.value = {}) || $es4.$$VALUE_OBJECT);
		scope.$$private[name] = name;
		
		if (coerceType === undefined)
		{
			Object.defineProperty(scope, name, {value:undefined, writable:true});
			return;
		}
		
		var obj;
		var getFunc;
		var setFunc;
		if (typeof scope === 'function')
		{
			var normalized = false;
			
			getFunc = function() 
			{ 
				if (scope.$$cinit !== undefined) scope.$$cinit(); 
				
				if (normalized === true) return obj;
				
				if (typeof coerceType === 'string')
				{
					var index = coerceType.lastIndexOf('.');
					if (index === -1) coerceType = $es4.$$[''][coerceType];
					else coerceType = $es4.$$[coerceType.substring(0, index)][coerceType.substring(index + 1)];
				}
				normalized = true;
				
				return obj = $es4.$$getDefaultPropertyValue(coerceType);
			}
			setFunc = function(value) 
			{ 
				if (scope.$$cinit !== undefined) scope.$$cinit(); 
				
				if (normalized === true)
				{
					obj = $es4.$$coerce(value, coerceType);
					return;
				}
				
				if (typeof coerceType === 'string')
				{
					var index = coerceType.lastIndexOf('.');
					if (index === -1) coerceType = $es4.$$[''][coerceType];
					else coerceType = $es4.$$[coerceType.substring(0, index)][coerceType.substring(index + 1)];
				}
				normalized = true;
				
				obj = $es4.$$coerce(value, coerceType);
			}
		}
		else 
		{
			obj = $es4.$$getDefaultPropertyValue(coerceType);
			getFunc = function() { return obj; };
			setFunc = function(value) { obj = $es4.$$coerce(value, coerceType); };
		}
		
		Object.defineProperty(scope, name, {get:getFunc, set:setFunc});
	}
	$es4.$$protected_property = $es4.$$public_property;
	$es4.$$internal_property = $es4.$$public_property;
	$es4.$$cnamespace_property = function(name, scope, pscope, namespace, castType)
	{
		var obj = $es4.$$DEFAULT_PROPERTY_VALUE;
		var getFunc;
		var setFunc;
		if (typeof scope === 'function')
		{
			var resolved = castType === undefined;
			
			castType = namespace;
			namespace = pscope;
			pscope = undefined;
			
			getFunc = function() 
			{ 
				if (scope.$$cinit !== undefined) scope.$$cinit(); 
				
				if (obj !== $es4.$$DEFAULT_PROPERTY_VALUE) return obj;
				
				return obj = (resolved) ? $es4.$$getDefaultPropertyValue(castType) : $es4.$$getDefaultPropertyValue(resolved = castType = castType());
			}
			setFunc = function(value) 
			{ 
				if (scope.$$cinit !== undefined) scope.$$cinit(); 
				
				obj = (resolved) ? $es4.$$coerce(value, castType) : $es4.$$coerce(value, resolved = castType = castType());
			}
		}
		else 
		{
			obj = $es4.$$getDefaultPropertyValue(castType);
			getFunc = function() { return obj; };
			setFunc = function(value) { obj = $es4.$$coerce(value, castType); };
		}
		Object.defineProperty($es4.$$namespace(namespace, scope, pscope), name, {get:getFunc, set:setFunc});
	}

	$es4.$$public_function = function(name, scope, func, returnCastType)
	{
		if (returnCastType === undefined)
		{
			Object.defineProperty(scope, name, void ($es4.$$VALUE_OBJECT.value = func) || $es4.$$VALUE_OBJECT);
			func.$$ismethod = true;
			return;
		}
		
		var wrapFunc;
		
		if (typeof scope === 'function')
		{
			var normalized = false;
			wrapFunc = function() 
			{ 
				if (normalized === false)
				{
					if (typeof returnCastType === 'string')
					{
						var index = returnCastType.lastIndexOf('.');
						if (index === -1) returnCastType = $es4.$$[''][returnCastType];
						else returnCastType = $es4.$$[returnCastType.substring(0, index)][returnCastType.substring(index + 1)];
					}
					
					normalized = true;
				}
				
				var result;
				switch (arguments.length)
				{
					case 0:
						result = func();
						break;
					case 1:
						result = func(arguments[0]);
						break;
					case 2:
						result = func(arguments[0], arguments[1]);
						break;
					case 3:
						result = func(arguments[0], arguments[1], arguments[2]);
						break;
					default:
						var i, length = arguments.length, args = new Array(length);
						for (i = 0; i < length; i += 1) args[i] = arguments[i];
						result = func.apply(null, args);
						break;
				}
				
				return $es4.$$coerce(result, returnCastType); 
			};
		}
		else 
		{
			wrapFunc = function() 
			{ 
				var result;
				switch (arguments.length)
				{
					case 0:
						result = func();
						break;
					case 1:
						result = func(arguments[0]);
						break;
					case 2:
						result = func(arguments[0], arguments[1]);
						break;
					case 3:
						result = func(arguments[0], arguments[1], arguments[2]);
						break;
					default:
						var i, length = arguments.length, args = new Array(length);
						for (i = 0; i < length; i += 1) args[i] = arguments[i];
						result = func.apply(null, args);
						break;
				}
			
				return $es4.$$coerce(result, returnCastType); 
			};
		}
		
		Object.defineProperty(scope, name, void ($es4.$$VALUE_OBJECT.value = wrapFunc) || $es4.$$VALUE_OBJECT);
		wrapFunc.$$ismethod = true;
	}
	$es4.$$private_function = function(name, scope, func, returnCastType)
	{
		if (scope.$$private === undefined) Object.defineProperty(scope, '$$private', void ($es4.$$VALUE_OBJECT.value = {}) || $es4.$$VALUE_OBJECT);
		scope.$$private[name] = name;
		
		if (returnCastType === undefined)
		{
			Object.defineProperty(scope, name, void ($es4.$$VALUE_OBJECT.value = func) || $es4.$$VALUE_OBJECT);
			func.$$ismethod = true;
			return;
		}
		
		var wrapFunc;
		
		if (typeof scope === 'function')
		{
			var normalized = false;
			wrapFunc = function() 
			{ 
				if (normalized === false)
				{
					if (typeof returnCastType === 'string')
					{
						var index = returnCastType.lastIndexOf('.');
						if (index === -1) returnCastType = $es4.$$[''][returnCastType];
						else returnCastType = $es4.$$[returnCastType.substring(0, index)][returnCastType.substring(index + 1)];
					}
					
					normalized = true;
				}
				
				var result;
				switch (arguments.length)
				{
					case 0:
						result = func();
						break;
					case 1:
						result = func(arguments[0]);
						break;
					case 2:
						result = func(arguments[0], arguments[1]);
						break;
					case 3:
						result = func(arguments[0], arguments[1], arguments[2]);
						break;
					default:
						var i, length = arguments.length, args = new Array(length);
						for (i = 0; i < length; i += 1) args[i] = arguments[i];
						result = func.apply(null, args);
						break;
				}
				
				return $es4.$$coerce(result, returnCastType); 
			};
		}
		else 
		{
			wrapFunc = function() 
			{ 
				var result;
				switch (arguments.length)
				{
					case 0:
						result = func();
						break;
					case 1:
						result = func(arguments[0]);
						break;
					case 2:
						result = func(arguments[0], arguments[1]);
						break;
					case 3:
						result = func(arguments[0], arguments[1], arguments[2]);
						break;
					default:
						var i, length = arguments.length, args = new Array(length);
						for (i = 0; i < length; i += 1) args[i] = arguments[i];
						result = func.apply(null, args);
						break;
				}
			
				return $es4.$$coerce(result, returnCastType); 
			};
		}
		
		Object.defineProperty(scope, name, void ($es4.$$VALUE_OBJECT.value = wrapFunc) || $es4.$$VALUE_OBJECT);
		wrapFunc.$$ismethod = true;
	}
	$es4.$$protected_function = $es4.$$public_function;
	$es4.$$internal_function = $es4.$$public_function;
	$es4.$$cnamespace_function = function(name, scope, pscope, namespace, func, returnCastType)
	{
		if (returnCastType === undefined)
		{
			if (typeof scope === 'function')
			{
				returnCastType = func;
				func = namespace;
				namespace = pscope;
				pscope = undefined;
			}
			
			Object.defineProperty($es4.$$namespace(namespace, scope, pscope), name, void ($es4.$$VALUE_OBJECT.value = func) || $es4.$$VALUE_OBJECT);
			func.$$ismethod = true;
			return;
		}
		
		var wrapFunc;

		if (typeof scope === 'function')
		{
			returnCastType = func;
			func = namespace;
			namespace = pscope;
			pscope = undefined;
			
			var normalized = false;
			wrapFunc = function() 
			{ 
				if (normalized === false)
				{
					if (typeof returnCastType === 'string')
					{
						var index = returnCastType.lastIndexOf('.');
						if (index === -1) returnCastType = $es4.$$[''][returnCastType];
						else returnCastType = $es4.$$[returnCastType.substring(0, index)][returnCastType.substring(index + 1)];
					}
					
					normalized = true;
				}
				
				var result;
				switch (arguments.length)
				{
					case 0:
						result = func();
						break;
					case 1:
						result = func(arguments[0]);
						break;
					case 2:
						result = func(arguments[0], arguments[1]);
						break;
					case 3:
						result = func(arguments[0], arguments[1], arguments[2]);
						break;
					default:
						var i, length = arguments.length, args = new Array(length);
						for (i = 0; i < length; i += 1) args[i] = arguments[i];
						result = func.apply(null, args);
						break;
				}
				
				return $es4.$$coerce(result, returnCastType); 
			};
		}
		else
		{
			wrapFunc = function() 
			{ 
				var result;
				switch (arguments.length)
				{
					case 0:
						result = func();
						break;
					case 1:
						result = func(arguments[0]);
						break;
					case 2:
						result = func(arguments[0], arguments[1]);
						break;
					case 3:
						result = func(arguments[0], arguments[1], arguments[2]);
						break;
					default:
						var i, length = arguments.length, args = new Array(length);
						for (i = 0; i < length; i += 1) args[i] = arguments[i];
						result = func.apply(null, args);
						break;
				}
			
				return $es4.$$coerce(result, returnCastType); 
			};
		}
		
		Object.defineProperty($es4.$$namespace(namespace, scope, pscope), name, void ($es4.$$VALUE_OBJECT.value = wrapFunc) || $es4.$$VALUE_OBJECT);
		wrapFunc.$$ismethod = true;
	}

	$es4.$$getter = function(name, scope, get_func, castType)
	{
		Object.defineProperty(scope, name, {get:get_func});
	}
	$es4.$$setter = function(name, scope, set_func, castType)
	{
		Object.defineProperty(scope, name, {set:set_func});
	}

	$es4.$$public_accessor = function(name, scope, get_func, set_func)
	{
		if (get_func !== null && set_func !== null) Object.defineProperty(scope, name, {get:get_func, set:set_func});
		else if (get_func !== null) Object.defineProperty(scope, name, {get:get_func});
		else Object.defineProperty(scope, name, {set:set_func});
	}
	$es4.$$private_accessor = function(name, scope, get_func, set_func)
	{
		if (scope.$$private === undefined) Object.defineProperty(scope, '$$private', void ($es4.$$VALUE_OBJECT.value = {}) || $es4.$$VALUE_OBJECT);
		scope.$$private[name] = name;
		
		if (get_func !== null && set_func !== null) Object.defineProperty(scope, name, {get:get_func, set:set_func});
		else if (get_func !== null) Object.defineProperty(scope, name, {get:get_func});
		else Object.defineProperty(scope, name, {set:set_func});
	}
	$es4.$$protected_accessor = $es4.$$public_accessor;
	$es4.$$internal_accessor = $es4.$$public_accessor;
	$es4.$$cnamespace_accessor = function(name, scope, pscope, namespace, get_func, set_func)
	{
		if (typeof scope === 'function')
		{
			set_func = get_func;
			get_func = namespace;
			namespace = pscope;
			pscope = undefined;
		}
		
		if (get_func !== null && set_func !== null) Object.defineProperty($es4.$$namespace(namespace, scope, pscope), name, {get:get_func, set:set_func});
		else if (get_func !== null) Object.defineProperty($es4.$$namespace(namespace, scope, pscope), name, {get:get_func});
		else Object.defineProperty($es4.$$namespace(namespace, scope, pscope), name, {set:set_func});
	}

	$es4.$$window.trace = function() //returns false if trace returns before outputting to console
	{
		//if (!$es4.$$window.loaderInfoParams || ($es4.$$window.loaderInfoParams['debug'] !== 'true' && $es4.$$window.loaderInfoParams['trace'] !== 'true')) return false;
		
		if (arguments[0] === ':::benchmark:::') arguments[0] = 'benchmark time: ' + (new Date().getTime() - $es4.$$['player'].Player.getStartTime());
		
		var trace = document.getElementById('traceOutJS');
		var argumentsLength = arguments.length;
		var output = '';
		for (var i = 0; i < argumentsLength; i++) output += arguments[i] + ' ';
		
		console.log(output);
		
		if (!trace) return true;
		
		var div = document.createElement('div');
		div.setAttribute('tabindex', -1);
		div.innerHTML = output;
		
		if (trace.firstChild) trace.insertBefore(div, trace.firstChild);
		else trace.appendChild(div);
		
		return true;
	}

	$es4.$$window.toString = function() { return '[object global]'; }
	Function.__proto__.toString = function() { return 'function Function() {}'; }

	$es4.$$throwArgumentError = function()
	{
		throw new ArgumentError('Argument count mismatch on class coercion.  Expected 1, got 0.');
	}

	$es4.$$window.isXMLName = function()
	{
		throw new Error('isXMLName is not supported at this time.');
	}

	/*
	$es4.$$window.onerror = function(errorMsg, url, lineNumber, colno, error) 
	{
		var event = document.createEvent('CustomEvent');
		event.initCustomEvent('ERROR', false, false, {'msg':errorMsg, 'url':url, 'line':lineNumber, 'error':error});
		$es4.$$window.dispatchEvent(event);
		
		var message = errorMsg + ', ' + url + ', ' + lineNumber;
		if (!trace(message)) console.log(message);
	};
	*/

	$es4.$$class(Number, undefined, 'Number');
	$es4.$$class(String, undefined, 'String');
	$es4.$$class(Array, undefined, 'Array');
	$es4.$$class(Object, undefined, 'Object');
	$es4.$$class(Boolean, undefined, 'Boolean');

	$es4.$$package('').Class = (function()
	{
		function Class()
		{
			if (arguments.length !== 0) return (arguments[0] !== null && arguments[0].$$isclass !== undefined) ? arguments[0] : null;
			else throw new TypeError('Class$$ is not a constructor.');
		}
		
		return $es4.$$class(Class, null, 'Class');
	})();

	$es4.$$Function = Function;
	$es4.$$package('').Function = (function()
	{
		function Function()
		{
			return (arguments.length !== 0) ? ((typeof arguments[0] === 'function') ? arguments[0] : null) : this;
		}
		Function.prototype = $es4.$$Function;

		return $es4.$$class(Function, null, 'Function');
	})();

	$es4.$$package('').int = (function()
	{
		int.MAX_VALUE = 2147483647;
		int.MIN_VALUE = -2147483648;
		
		function int(value)
		{
			var value = new Number(value >> 0);
		
			return (this instanceof int) ? value : value.valueOf();
		}
		int.prototype = Number;
		
		return $es4.$$class(int, null, 'int');
	})();

	$es4.$$package('').uint = (function()
	{
		uint.MAX_VALUE = 4294967295;
		uint.MIN_VALUE = 0;
		
		function uint(value)
		{
			var value = new Number(value >>> 0);
		
			return (this instanceof uint) ? value : value.valueOf();
		}
		
		return $es4.$$class(uint, null, 'uint');
	})();

	$es4.$$package('').Namespace = (function()
	{	
		function Namespace()
		{
			//save scope
			var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
			var $$thisp = this;
			
			//handle possible cast
			if ($$this === $$thisp && (!($$this instanceof Namespace) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Namespace) : $es4.$$throwArgumentError();
			Object.defineProperty($$this, '$$t', {value:1});
			
			//constructor
			$es4.$$constructor($$thisp, (function()
			{
			}));
			
			//call construct if no arguments, or argument zero does not equal manual construct
			if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT) 
			{
				var $$i, $$length = arguments.length, $$args = new Array($$length);
				for ($$i = 0; $$i < $$length; $$i += 1) $$args[$$i]  = arguments[$$i];
			
				$es4.$$construct($$this, $$args);
			}
			
			throw new Error('Namespace is not supported at this time.');
		}
		
		return $es4.$$class(Namespace, null, 'Namespace');
	})();

	$es4.$$package('').QName = (function()
	{	
		function QName()
		{
			//save scope
			var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
			var $$thisp = this;
			
			//handle possible cast
			if ($$this === $$thisp && (!($$this instanceof QName) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], QName) : $es4.$$throwArgumentError();
			Object.defineProperty($$this, '$$t', {value:1});
			
			//constructor
			$es4.$$constructor($$thisp, (function()
			{
			}));
			
			//call construct if no arguments, or argument zero does not equal manual construct
			if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT) 
			{
				var $$i, $$length = arguments.length, $$args = new Array($$length);
				for ($$i = 0; $$i < $$length; $$i += 1) $$args[$$i]  = arguments[$$i];
			
				$es4.$$construct($$this, $$args);
			}
			
			throw new Error('QName is not supported at this time.');
		}
		
		return $es4.$$class(QName, null, 'QName');
	})();

	$es4.$$Error = Error;
	$es4.$$package('').Error = (function()
	{	
		function Error()
		{
			//save scope
			var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
			var $$thisp = this;
			
			//handle possible cast
			if ($$this === $$thisp && (!($$this instanceof Error) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Error) : $es4.$$throwArgumentError();
			Object.defineProperty($$this, '$$t', {value:1});
			
			//properties
			$es4.$$protected_property('name', $$thisp, String);
			$es4.$$public_property('message', $$thisp, String);
			
			//constructor
			$es4.$$constructor($$thisp, (function($$$$message)
			{
				//set default parameter values
				var message = (0 > arguments.length - 1) ? '' : $es4.$$coerce($$$$message, String);

				$$this.name = $$this.constructor.name;
				$$this.message = message;
				
				//$$Error.call($$this);
				//if (Error.captureStackTrace !== undefined) Error.captureStackTrace($$this, $$this.constructor);
			}));
			
			//method
			$es4.$$public_function('toString', $$thisp, (function()
			{
				return $$this.name + ': ' + $$this.message;
			}));
			
			//method
			$es4.$$public_function('getStackTrace', $$thisp, (function()
			{
				return $$this.name + ': ' + $$this.message;
			}));
			
			//call construct if no arguments, or argument zero does not equal manual construct
			if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT) 
			{
				var $$i, $$length = arguments.length, $$args = new Array($$length);
				for ($$i = 0; $$i < $$length; $$i += 1) $$args[$$i]  = arguments[$$i];
			
				$es4.$$construct($$this, $$args);
			}
		}
		Error.prototype = new $es4.$$Error;
		
		return $es4.$$class(Error, null, 'Error');
	})();


	$es4.$$package('').ArgumentError = (function()
	{
		function ArgumentError()
		{
			//save scope
			var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
			var $$thisp = this;
			
			//handle possible cast
			if ($$this === $$thisp && (!($$this instanceof ArgumentError) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], ArgumentError) : $es4.$$throwArgumentError();
			Object.defineProperty($$this, '$$t', {value:1});

			//constructor
			$es4.$$constructor($$thisp, (function($$$$message)
			{
				//set default parameter values
				var message = (0 > arguments.length - 1) ? '' : $es4.$$coerce($$$$message, String);
				
				$es4.$$super($$thisp)(message);

				$$this.name = $$this.constructor.name;
			}));		

			//call construct if no arguments, or argument zero does not equal manual construct
			if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT) 
			{
				var $$i, $$length = arguments.length, $$args = new Array($$length);
				for ($$i = 0; $$i < $$length; $$i += 1) $$args[$$i]  = arguments[$$i];
			
				$es4.$$construct($$this, $$args);
			}
		}
		
		return $es4.$$class(ArgumentError, {EXTENDS:'Error'}, 'ArgumentError');
	})();

	$es4.$$package('').DefinitionError = (function()
	{
		function DefinitionError()
		{
			//save scope
			var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
			var $$thisp = this;
			
			//handle possible cast
			if ($$this === $$thisp && (!($$this instanceof DefinitionError) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], DefinitionError) : $es4.$$throwArgumentError();
			Object.defineProperty($$this, '$$t', {value:1});

			//constructor
			$es4.$$constructor($$thisp, (function($$$$message)
			{
				//set default parameter values
				var message = (0 > arguments.length - 1) ? '' : $es4.$$coerce($$$$message, String);
				
				$es4.$$super($$thisp)(message);
				
				$$this.name = $$this.constructor.name;
			}));		

			//call construct if no arguments, or argument zero does not equal manual construct
			if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT) 
			{
				var $$i, $$length = arguments.length, $$args = new Array($$length);
				for ($$i = 0; $$i < $$length; $$i += 1) $$args[$$i]  = arguments[$$i];
			
				$es4.$$construct($$this, $$args);
			}
		}
		
		return $es4.$$class(DefinitionError, {EXTENDS:'Error'}, 'DefinitionError');
	})();

	$es4.$$package('').SecurityError = (function()
	{
		function SecurityError()
		{
			//save scope
			var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
			var $$thisp = this;
			
			//handle possible cast
			if ($$this === $$thisp && (!($$this instanceof SecurityError) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], SecurityError) : $es4.$$throwArgumentError();
			Object.defineProperty($$this, '$$t', {value:1});

			//constructor
			$es4.$$constructor($$thisp, (function($$$$message)
			{
				//set default parameter values
				var message = (0 > arguments.length - 1) ? '' : $es4.$$coerce($$$$message, String);
				
				$es4.$$super($$thisp)(message);
				
				$$this.name = $$this.constructor.name;
			}));		

			//call construct if no arguments, or argument zero does not equal manual construct
			if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT) 
			{
				var $$i, $$length = arguments.length, $$args = new Array($$length);
				for ($$i = 0; $$i < $$length; $$i += 1) $$args[$$i]  = arguments[$$i];
			
				$es4.$$construct($$this, $$args);
			}
		}
		
		return $es4.$$class(SecurityError, {EXTENDS:'Error'}, 'SecurityError');
	})();

	$es4.$$package('').VerifyError = (function()
	{
		function VerifyError()
		{
			//save scope
			var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
			var $$thisp = this;
			
			//handle possible cast
			if ($$this === $$thisp && (!($$this instanceof VerifyError) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], VerifyError) : $es4.$$throwArgumentError();
			Object.defineProperty($$this, '$$t', {value:1});

			//constructor
			$es4.$$constructor($$thisp, (function($$$$message)
			{
				//set default parameter values
				var message = (0 > arguments.length - 1) ? '' : $es4.$$coerce($$$$message, String);
				
				$es4.$$super($$thisp)(message);
				
				$$this.name = $$this.constructor.name;
			}));
			
			//call construct if no arguments, or argument zero does not equal manual construct
			if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT) 
			{
				var $$i, $$length = arguments.length, $$args = new Array($$length);
				for ($$i = 0; $$i < $$length; $$i += 1) $$args[$$i]  = arguments[$$i];
			
				$es4.$$construct($$this, $$args);
			}
		}
		
		return $es4.$$class(VerifyError, {EXTENDS:'Error'}, 'Error');
	})();

	$es4.$$package('').TypeError = (function()
	{
		function TypeError()
		{
			//save scope
			var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
			var $$thisp = this;
			
			//handle possible cast
			if ($$this === $$thisp && (!($$this instanceof TypeError) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], TypeError) : $es4.$$throwArgumentError();
			Object.defineProperty($$this, '$$t', {value:1});

			//constructor
			$es4.$$constructor($$thisp, (function($$$$message)
			{
				//set default parameter values
				var message = (0 > arguments.length - 1) ? '' : $es4.$$coerce($$$$message, String);
				
				$es4.$$super($$thisp)(message);
				
				$$this.name = $$this.constructor.name;
			}));
			
			//call construct if no arguments, or argument zero does not equal manual construct
			if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT) 
			{
				var $$i, $$length = arguments.length, $$args = new Array($$length);
				for ($$i = 0; $$i < $$length; $$i += 1) $$args[$$i]  = arguments[$$i];
			
				$es4.$$construct($$this, $$args);
			}
		}
		
		return $es4.$$class(TypeError, {EXTENDS:'Error'}, 'TypeError');
	})();

	$es4.$$[''].Function.$$pcinit();
	$es4.$$[''].Class.$$pcinit();
	$es4.$$[''].int.$$pcinit();
	$es4.$$[''].uint.$$pcinit();
	$es4.$$[''].Namespace.$$pcinit();
	$es4.$$[''].QName.$$pcinit();
	$es4.$$[''].Error.$$pcinit();
	$es4.$$[''].ArgumentError.$$pcinit();
	$es4.$$[''].DefinitionError.$$pcinit();
	$es4.$$[''].SecurityError.$$pcinit();
	$es4.$$[''].VerifyError.$$pcinit();
	$es4.$$[''].TypeError.$$pcinit();
}

/*
 * HTML Parser By John Resig (ejohn.org)
 * Modified by Juriy "kangax" Zaytsev
 * Original code by Erik Arvidsson, Mozilla Public License
 * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js
 *
 * // Use like so:
 * HTMLParser(htmlString, {
 *     start: function(tag, attrs, unary) {},
 *     end: function(tag) {},
 *     chars: function(text) {},
 *     comment: function(text) {}
 * });
 *
 * // or to get an XML string:
 * HTMLtoXML(htmlString);
 *
 * // or to get an XML DOM Document
 * HTMLtoDOM(htmlString);
 *
 * // or to inject into an existing document/DOM node
 * HTMLtoDOM(htmlString, document);
 * HTMLtoDOM(htmlString, document.body);
 *
 */

if (window.HTMLParser === undefined)
{	 
	(function(){

		// Regular Expressions for parsing tags and attributes
		var startTag = /^<([-A-Za-z0-9_]+)((?:\s+[\w\-]+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)>/,
			endTag = /^<\/([-A-Za-z0-9_]+)[^>]*>/,
			attr = /([-A-Za-z0-9_]+)(?:\s*=\s*(?:(?:"((?:\\.|[^"])*)")|(?:'((?:\\.|[^'])*)')|([^>\s]+)))?/g;
			
		// Empty Elements - HTML 4.01
		var empty = makeMap("area,base,basefont,br,col,frame,hr,img,input,isindex,link,meta,param,embed");

		// Block Elements - HTML 4.01
		var block = makeMap("address,applet,blockquote,button,center,dd,del,dir,div,dl,dt,fieldset,form,frameset,hr,iframe,ins,isindex,li,map,menu,noframes,noscript,object,ol,p,pre,script,table,tbody,td,tfoot,th,thead,tr,ul");

		// Inline Elements - HTML 4.01
		var inline = makeMap("a,abbr,acronym,applet,b,basefont,bdo,big,br,button,cite,code,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,object,q,s,samp,script,select,small,span,strike,strong,sub,sup,textarea,tt,u,var");

		// Elements that you can, intentionally, leave open
		// (and which close themselves)
		var closeSelf = makeMap("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr");

		// Attributes that have their values filled in disabled="disabled"
		var fillAttrs = makeMap("checked,compact,declare,defer,disabled,ismap,multiple,nohref,noresize,noshade,nowrap,readonly,selected");

		// Special Elements (can contain anything)
		var special = makeMap("script,style");

		var HTMLParser = this.HTMLParser = function( html, handler ) {
			var original = html;
			var index, chars, match, stack = [], last = html;
			stack.last = function(){
				return this[ this.length - 1 ];
			};

			while ( html ) {
				chars = true;

				// Make sure we're not in a script or style element
				if ( !stack.last() || !special[ stack.last() ] ) {

					// Comment
					if ( html.indexOf("<!--") == 0 ) {
						index = html.indexOf("-->");
		
						if ( index >= 0 ) {
							if ( handler.comment )
								handler.comment( html.substring( 4, index ) );
							html = html.substring( index + 3 );
							chars = false;
						}
		
					// end tag
					} else if ( html.indexOf("</") == 0 ) {
						match = html.match( endTag );
		
						if ( match ) {
							html = html.substring( match[0].length );
							match[0].replace( endTag, parseEndTag );
							chars = false;
						}
		
					// start tag
					} else if ( html.indexOf("<") == 0 ) {
						match = html.match( startTag );
		
						if ( match ) {
							html = html.substring( match[0].length );
							match[0].replace( startTag, parseStartTag );
							chars = false;
						}
					}

					if ( chars ) {
						index = html.indexOf("<");
						
						var text = index < 0 ? html : html.substring( 0, index );
						html = index < 0 ? "" : html.substring( index );
						
						if ( handler.chars )
							handler.chars( text );
					}

				} else {
					html = html.replace(new RegExp("(.*)<\/" + stack.last() + "[^>]*>"), function(all, text){
						text = text.replace(/<!--(.*?)-->/g, "$1")
							.replace(/<!\[CDATA\[(.*?)]]>/g, "$1");

						if ( handler.chars )
							handler.chars( text );

						return "";
					});

					parseEndTag( "", stack.last() );
				}

				if ( html == last )
				{
					return original; //ignore parse error. return original html
					//throw "Parse Error: " + html;
				}
				last = html;
			}
			
			// Clean up any remaining tags
			parseEndTag();

			function parseStartTag( tag, tagName, rest, unary ) {
				tagName = tagName.toLowerCase();

				if ( block[ tagName ] ) {
					while ( stack.last() && inline[ stack.last() ] ) {
						parseEndTag( "", stack.last() );
					}
				}

				if ( closeSelf[ tagName ] && stack.last() == tagName ) {
					parseEndTag( "", tagName );
				}

				unary = empty[ tagName ] || !!unary;

				if ( !unary )
					stack.push( tagName );
				
				if ( handler.start ) {
					var attrs = [];
		
					rest.replace(attr, function(match, name) {
						var value = arguments[2] ? arguments[2] :
							arguments[3] ? arguments[3] :
							arguments[4] ? arguments[4] :
							fillAttrs[name] ? name : "";
						
						attrs.push({
							name: name,
							value: value,
							escaped: value.replace(/(^|[^\\])"/g, '$1\\\"') //"
						});
					});
		
					if ( handler.start )
						handler.start( tagName, attrs, unary );
				}
			}

			function parseEndTag( tag, tagName ) {
				// If no tag name is provided, clean shop
				if ( !tagName )
					var pos = 0;
					
				// Find the closest opened tag of the same type
				else
					for ( var pos = stack.length - 1; pos >= 0; pos-- )
						if ( stack[ pos ] == tagName )
							break;
				
				if ( pos >= 0 ) {
					// Close all the open elements, up the stack
					for ( var i = stack.length - 1; i >= pos; i-- )
						if ( handler.end )
							handler.end( stack[ i ] );
					
					// Remove the open elements from the stack
					stack.length = pos;
				}
			}
		};
		
		this.HTMLtoXML = function( html ) {
			var results = "";
			
			HTMLParser(html, {
				start: function( tag, attrs, unary ) {
					results += "<" + tag;
			
					for ( var i = 0; i < attrs.length; i++ )
						results += " " + attrs[i].name + '="' + attrs[i].escaped + '"';
			
					results += (unary ? "/" : "") + ">";
				},
				end: function( tag ) {
					results += "</" + tag + ">";
				},
				chars: function( text ) {
					results += text;
				},
				comment: function( text ) {
					results += "<!--" + text + "-->";
				}
			});
			
			return results;
		};
		
		this.HTMLtoText = function( html ) {
			var results = "";
			
			HTMLParser(html, {
				start: function( tag, attrs, unary ) {
					if (tag != 'br') return;
					
					results += "<" + tag;
			
					for ( var i = 0; i < attrs.length; i++ )
						results += " " + attrs[i].name + '="' + attrs[i].escaped + '"';
			
					results += (unary ? "/" : "") + ">";
				},
				end: function( tag ) {
				},
				chars: function( text ) {
					results += text;
				},
				comment: function( text ) {
					results += "<!--" + text + "-->";
				}
			});
			
			return results;
		};
		
		this.HTMLtoDOM = function( html, doc ) {
			// There can be only one of these elements
			var one = makeMap("html,head,body,title");
			
			// Enforce a structure for the document
			var structure = {
				link: "head",
				base: "head"
			};
		
			if ( !doc ) {
				if ( typeof DOMDocument != "undefined" )
					doc = new DOMDocument();
				else if ( typeof document != "undefined" && document.implementation && document.implementation.createDocument )
					doc = document.implementation.createDocument("", "", null);
				else if ( typeof ActiveX != "undefined" )
					doc = new ActiveXObject("Msxml.DOMDocument");
				
			} else
				doc = doc.ownerDocument ||
					doc.getOwnerDocument && doc.getOwnerDocument() ||
					doc;
			
			var elems = [],
				documentElement = doc.documentElement ||
					doc.getDocumentElement && doc.getDocumentElement();
					
			// If we're dealing with an empty document then we
			// need to pre-populate it with the HTML document structure
			if ( !documentElement && doc.createElement ) (function(){
				var html = doc.createElement("html");
				var head = doc.createElement("head");
				head.appendChild( doc.createElement("title") );
				html.appendChild( head );
				html.appendChild( doc.createElement("body") );
				doc.appendChild( html );
			})();
			
			// Find all the unique elements
			if ( doc.getElementsByTagName )
				for ( var i in one )
					one[ i ] = doc.getElementsByTagName( i )[0];
			
			// If we're working with a document, inject contents into
			// the body element
			var curParentNode = one.body;
			
			HTMLParser( html, {
				start: function( tagName, attrs, unary ) {
					// If it's a pre-built element, then we can ignore
					// its construction
					if ( one[ tagName ] ) {
						curParentNode = one[ tagName ];
						if ( !unary ) {
							elems.push( curParentNode );
						}
						return;
					}
				
					var elem = doc.createElement( tagName );
					
					for ( var attr in attrs )
						elem.setAttribute( attrs[ attr ].name, attrs[ attr ].value );
					
					if ( structure[ tagName ] && typeof one[ structure[ tagName ] ] != "boolean" )
						one[ structure[ tagName ] ].appendChild( elem );
					
					else if ( curParentNode && curParentNode.appendChild )
						curParentNode.appendChild( elem );
						
					if ( !unary ) {
						elems.push( elem );
						curParentNode = elem;
					}
				},
				end: function( tag ) {
					elems.length -= 1;
					
					// Init the new parentNode
					curParentNode = elems[ elems.length - 1 ];
				},
				chars: function( text ) {
					curParentNode.appendChild( doc.createTextNode( text ) );
				},
				comment: function( text ) {
					// create comment node
				}
			});
			
			return doc;
		};

		function makeMap(str){
			var obj = {}, items = str.split(",");
			for ( var i = 0; i < items.length; i++ )
				obj[ items[i] ] = true;
			return obj;
		}
	})();
}

/*
---

script: Array.sortOn.js

description: Adds Array.sortOn function and related constants that works like in ActionScript for sorting arrays of objects (applying all same strict rules)

license: MIT-style license.

authors:
- gonchuki

docs: http://www.adobe.com/livedocs/flash/9.0/ActionScriptLangRefV3/Array.html#sortOn()

requires:
- core/1.2.4: [Array]

provides: 
- [Array.sortOn, Array.CASEINSENSITIVE, Array.DESCENDING, Array.UNIQUESORT, Array.RETURNINDEXEDARRAY, Array.NUMERIC]

...
*/

if (Array.prototype.$sort === undefined)
{
	Array.CASEINSENSITIVE = 1;
	Array.DESCENDING = 2;
	Array.UNIQUESORT = 4;
	Array.RETURNINDEXEDARRAY = 8;
	Array.NUMERIC = 16;

	var dup_fn = function(field, field_options) 
	{
		var filtered = (field_options & Array.NUMERIC) 
					   ? this.map(function(item) {return parseFloat(item[field]); })
					   : (field_options & Array.CASEINSENSITIVE)
					   ? this.map(function(item) {return item[field].toLowerCase(); })
					   : this.map(function(item) {return item[field]; });
		return filtered.length !== [].combine(filtered).length;
	};
	  
	  var sort_fn = function(item_a, item_b, fields, options) 
	  {
		return (function sort_by(fields, options) 
		{
			var ret, a, b, 
			opts = options[0],
			sub_fields = fields[0].match(/[^.]+/g);
		  
			(function get_values(s_fields, s_a, s_b) 
			{
				var field = s_fields[0];
				if (s_fields.length > 1) 
				{
					get_values(s_fields.slice(1), s_a[field], s_b[field]);
				} 
				else 
				{
					a = s_a[field].toString();
					b = s_b[field].toString();
				}
			})(sub_fields, item_a, item_b);
		  
			if (opts & Array.NUMERIC) 
			{
				ret = parseFloat(a) - parseFloat(b);
			} 
			else 
			{
				if (opts & Array.CASEINSENSITIVE) { a = a.toLowerCase(); b = b.toLowerCase(); }
			
				ret = (a > b) ? 1 : (a < b) ? -1 : 0;
			}
		  
			if ((ret === 0) && (fields.length > 1)) 
			{
				ret = sort_by(fields.slice(1), options.slice(1));
			} 
			else if (opts & Array.DESCENDING) 
			{
				ret *= -1;
			}
		  
			return ret;
		})(fields, options);
	  };
	  
	  var sort_fn2 = function(item_a, item_b, options) 
	  {
		return (function sort_by(options) 
		{
			var ret, a, b;
			var opts = options[0];
			a = item_a;
			b = item_b;
			
			if (opts & Array.NUMERIC) 
			{
				ret = parseFloat(a) - parseFloat(b);
			} 
			else 
			{
				if (opts & Array.CASEINSENSITIVE) { a = a.toLowerCase(); b = b.toLowerCase(); }
			
				ret = (a > b) ? 1 : (a < b) ? -1 : 0;
			}
		  
			if ((ret === 0) && (fields.length > 1)) 
			{
				ret = sort_by(options.slice(1));
			} 
			else if (opts & Array.DESCENDING) 
			{
				ret *= -1;
			}
		  
			return ret;
		})(options);
	  };
	  
	  Object.defineProperty(Array.prototype, 'combine', {enumerable:false, value:function(array) 
	  {
		for (var i = 0, l = array.length; i < l; i++) 
		{
			if (this.indexOf(array[i]) == -1) this.push(array[i]); 
		}
		
		return this;
	  }});
	  
	  Object.defineProperty(Array.prototype, 'sortOn', {enumerable:false, value:function(fields, options) 
	  {
		  fields = (fields instanceof Array) ? fields : [fields];
		  options = (options instanceof Array) ? options : [options];
		  
		  if (options.length !== fields.length) options = [];
		  
		  if ((options[0] & Array.UNIQUESORT) && (fields.some(function(field, i){return dup_fn(field, options[i]);}))) return 0;
		  
		  var curry_sort = function(item_a, item_b) {
			return sort_fn(item_a, item_b, fields, options);
		  };
		  
		  if (options[0] & Array.RETURNINDEXEDARRAY)
			return this.slice().sort(curry_sort);
		  else
			this.sort(curry_sort);
		}
	  });
	  
	Object.defineProperty(Array.prototype, '$sort', {value:Array.prototype.sort});
	  
	Object.defineProperty(Array.prototype, 'sort', {enumerable:false, value:function() 
	{
		if (arguments.length == 0) return this.$sort();
		if (typeof arguments[0] === "function") return this.$sort(arguments[0]);
	  
		options = [arguments[0]];
	  
		if (options[0] & Array.UNIQUESORT) throw new Error('sort option not supported at this time');
	  
		var curry_sort = function(item_a, item_b) 
		{
			return sort_fn2(item_a, item_b, options);
		};
		  
		if (options[0] & Array.RETURNINDEXEDARRAY) return this.slice().$sort(curry_sort);
		else return this.$sort(curry_sort);
	}
	});
}

/*! URI.js v1.17.1 http://medialize.github.io/URI.js/ */
/* build contains: URI.js */
/* URI.js is published under the MIT license. */
(function(p, w) {
    "object" === typeof exports ? module.exports = w(require("./punycode"), require("./IPv6"), require("./SecondLevelDomains")) : "function" === typeof define && define.amd ? define(["./punycode", "./IPv6", "./SecondLevelDomains"], w) : p.URI = w(p.punycode, p.IPv6, p.SecondLevelDomains, p)
})(this, function(p, w, u, m) {
    function d(a, b) {
        var c = 1 <= arguments.length,
            f = 2 <= arguments.length;
        if (!(this instanceof d)) return c ? f ? new d(a, b) : new d(a) : new d;
        if (void 0 === a) {
            if (c) throw new TypeError("undefined is not a valid argument for URI");
            a = "undefined" !== typeof location ? location.href + "" : ""
        }
        this.href(a);
        return void 0 !== b ? this.absoluteTo(b) : this
    }

    function r(a) {
        return a.replace(/([.*+?^=!:${}()|[\]\/\\])/g, "\\$1")
    }

    function v(a) {
        return void 0 === a ? "Undefined" : String(Object.prototype.toString.call(a)).slice(8, -1)
    }

    function h(a) {
        return "Array" === v(a)
    }

    function D(a, b) {
        var c = {},
            d, g;
        if ("RegExp" === v(b)) c = null;
        else if (h(b))
            for (d = 0, g = b.length; d < g; d++) c[b[d]] = !0;
        else c[b] = !0;
        d = 0;
        for (g = a.length; d < g; d++)
            if (c && void 0 !== c[a[d]] || !c && b.test(a[d])) a.splice(d,
                1), g--, d--;
        return a
    }

    function z(a, b) {
        var c, d;
        if (h(b)) {
            c = 0;
            for (d = b.length; c < d; c++)
                if (!z(a, b[c])) return !1;
            return !0
        }
        var g = v(b);
        c = 0;
        for (d = a.length; c < d; c++)
            if ("RegExp" === g) {
                if ("string" === typeof a[c] && a[c].match(b)) return !0
            } else if (a[c] === b) return !0;
        return !1
    }

    function E(a, b) {
        if (!h(a) || !h(b) || a.length !== b.length) return !1;
        a.sort();
        b.sort();
        for (var c = 0, d = a.length; c < d; c++)
            if (a[c] !== b[c]) return !1;
        return !0
    }

    function A(a) {
        return a.replace(/^\/+|\/+$/g, "")
    }

    function G(a) {
        return escape(a)
    }

    function B(a) {
        return encodeURIComponent(a).replace(/[!'()*]/g,
            G).replace(/\*/g, "%2A")
    }

    function x(a) {
        return function(b, c) {
            if (void 0 === b) return this._parts[a] || "";
            this._parts[a] = b || null;
            this.build(!c);
            return this
        }
    }

    function F(a, b) {
        return function(c, d) {
            if (void 0 === c) return this._parts[a] || "";
            null !== c && (c += "", c.charAt(0) === b && (c = c.substring(1)));
            this._parts[a] = c;
            this.build(!d);
            return this
        }
    }
    var H = m && m.URI;
    d.version = "1.17.1";
    var e = d.prototype,
        q = Object.prototype.hasOwnProperty;
    d._parts = function() {
        return {
            protocol: null,
            username: null,
            password: null,
            hostname: null,
            urn: null,
            port: null,
            path: null,
            query: null,
            fragment: null,
            duplicateQueryParameters: d.duplicateQueryParameters,
            escapeQuerySpace: d.escapeQuerySpace
        }
    };
    d.duplicateQueryParameters = !1;
    d.escapeQuerySpace = !0;
    d.protocol_expression = /^[a-z][a-z0-9.+-]*$/i;
    d.idn_expression = /[^a-z0-9\.-]/i;
    d.punycode_expression = /(xn--)/i;
    d.ip4_expression = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;
    d.ip6_expression = /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/;
    d.find_uri_expression = /\b((?:[a-z][\w-]+:(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))/ig;
    d.findUri = {
        start: /\b(?:([a-z][a-z0-9.+-]*:\/\/)|www\.)/gi,
        end: /[\s\r\n]|$/,
        trim: /[`!()\[\]{};:'".,<>?\u00ab\u00bb\u201c\u201d\u201e\u2018\u2019]+$/
    };
    d.defaultPorts = {
        http: "80",
        https: "443",
        ftp: "21",
        gopher: "70",
        ws: "80",
        wss: "443"
    };
    d.invalid_hostname_characters =
        /[^a-zA-Z0-9\.-]/;
    d.domAttributes = {
        a: "href",
        blockquote: "cite",
        link: "href",
        base: "href",
        script: "src",
        form: "action",
        img: "src",
        area: "href",
        iframe: "src",
        embed: "src",
        source: "src",
        track: "src",
        input: "src",
        audio: "src",
        video: "src"
    };
    d.getDomAttribute = function(a) {
        if (a && a.nodeName) {
            var b = a.nodeName.toLowerCase();
            return "input" === b && "image" !== a.type ? void 0 : d.domAttributes[b]
        }
    };
    d.encode = B;
    d.decode = decodeURIComponent;
    d.iso8859 = function() {
        d.encode = escape;
        d.decode = unescape
    };
    d.unicode = function() {
        d.encode = B;
        d.decode =
            decodeURIComponent
    };
    d.characters = {
        pathname: {
            encode: {
                expression: /%(24|26|2B|2C|3B|3D|3A|40)/ig,
                map: {
                    "%24": "$",
                    "%26": "&",
                    "%2B": "+",
                    "%2C": ",",
                    "%3B": ";",
                    "%3D": "=",
                    "%3A": ":",
                    "%40": "@"
                }
            },
            decode: {
                expression: /[\/\?#]/g,
                map: {
                    "/": "%2F",
                    "?": "%3F",
                    "#": "%23"
                }
            }
        },
        reserved: {
            encode: {
                expression: /%(21|23|24|26|27|28|29|2A|2B|2C|2F|3A|3B|3D|3F|40|5B|5D)/ig,
                map: {
                    "%3A": ":",
                    "%2F": "/",
                    "%3F": "?",
                    "%23": "#",
                    "%5B": "[",
                    "%5D": "]",
                    "%40": "@",
                    "%21": "!",
                    "%24": "$",
                    "%26": "&",
                    "%27": "'",
                    "%28": "(",
                    "%29": ")",
                    "%2A": "*",
                    "%2B": "+",
                    "%2C": ",",
                    "%3B": ";",
                    "%3D": "="
                }
            }
        },
        urnpath: {
            encode: {
                expression: /%(21|24|27|28|29|2A|2B|2C|3B|3D|40)/ig,
                map: {
                    "%21": "!",
                    "%24": "$",
                    "%27": "'",
                    "%28": "(",
                    "%29": ")",
                    "%2A": "*",
                    "%2B": "+",
                    "%2C": ",",
                    "%3B": ";",
                    "%3D": "=",
                    "%40": "@"
                }
            },
            decode: {
                expression: /[\/\?#:]/g,
                map: {
                    "/": "%2F",
                    "?": "%3F",
                    "#": "%23",
                    ":": "%3A"
                }
            }
        }
    };
    d.encodeQuery = function(a, b) {
        var c = d.encode(a + "");
        void 0 === b && (b = d.escapeQuerySpace);
        return b ? c.replace(/%20/g, "+") : c
    };
    d.decodeQuery = function(a, b) {
        a += "";
        void 0 === b && (b = d.escapeQuerySpace);
        try {
            return d.decode(b ? a.replace(/\+/g,
                "%20") : a)
        } catch (c) {
            return a
        }
    };
    var t = {
            encode: "encode",
            decode: "decode"
        },
        y, C = function(a, b) {
            return function(c) {
                try {
                    return d[b](c + "").replace(d.characters[a][b].expression, function(c) {
                        return d.characters[a][b].map[c]
                    })
                } catch (f) {
                    return c
                }
            }
        };
    for (y in t) d[y + "PathSegment"] = C("pathname", t[y]), d[y + "UrnPathSegment"] = C("urnpath", t[y]);
    t = function(a, b, c) {
        return function(f) {
            var g;
            g = c ? function(a) {
                return d[b](d[c](a))
            } : d[b];
            f = (f + "").split(a);
            for (var e = 0, l = f.length; e < l; e++) f[e] = g(f[e]);
            return f.join(a)
        }
    };
    d.decodePath =
        t("/", "decodePathSegment");
    d.decodeUrnPath = t(":", "decodeUrnPathSegment");
    d.recodePath = t("/", "encodePathSegment", "decode");
    d.recodeUrnPath = t(":", "encodeUrnPathSegment", "decode");
    d.encodeReserved = C("reserved", "encode");
    d.parse = function(a, b) {
        var c;
        b || (b = {});
        c = a.indexOf("#"); - 1 < c && (b.fragment = a.substring(c + 1) || null, a = a.substring(0, c));
        c = a.indexOf("?"); - 1 < c && (b.query = a.substring(c + 1) || null, a = a.substring(0, c));
        "//" === a.substring(0, 2) ? (b.protocol = null, a = a.substring(2), a = d.parseAuthority(a, b)) : (c = a.indexOf(":"), -1 < c && (b.protocol = a.substring(0, c) || null, b.protocol && !b.protocol.match(d.protocol_expression) ? b.protocol = void 0 : "//" === a.substring(c + 1, c + 3) ? (a = a.substring(c + 3), a = d.parseAuthority(a, b)) : (a = a.substring(c + 1), b.urn = !0)));
        b.path = a;
        return b
    };
    d.parseHost = function(a, b) {
        a = a.replace(/\\/g, "/");
        var c = a.indexOf("/"),
            d; - 1 === c && (c = a.length);
        if ("[" === a.charAt(0)) d = a.indexOf("]"), b.hostname = a.substring(1, d) || null, b.port = a.substring(d + 2, c) || null, "/" === b.port && (b.port = null);
        else {
            var g = a.indexOf(":");
            d = a.indexOf("/");
            g = a.indexOf(":", g + 1); - 1 !== g && (-1 === d || g < d) ? (b.hostname = a.substring(0, c) || null, b.port = null) : (d = a.substring(0, c).split(":"), b.hostname = d[0] || null, b.port = d[1] || null)
        }
        b.hostname && "/" !== a.substring(c).charAt(0) && (c++, a = "/" + a);
        return a.substring(c) || "/"
    };
    d.parseAuthority = function(a, b) {
        a = d.parseUserinfo(a, b);
        return d.parseHost(a, b)
    };
    d.parseUserinfo = function(a, b) {
        var c = a.indexOf("/"),
            f = a.lastIndexOf("@", -1 < c ? c : a.length - 1); - 1 < f && (-1 === c || f < c) ? (c = a.substring(0, f).split(":"), b.username = c[0] ? d.decode(c[0]) : null,
            c.shift(), b.password = c[0] ? d.decode(c.join(":")) : null, a = a.substring(f + 1)) : (b.username = null, b.password = null);
        return a
    };
    d.parseQuery = function(a, b) {
        if (!a) return {};
        a = a.replace(/&+/g, "&").replace(/^\?*&*|&+$/g, "");
        if (!a) return {};
        for (var c = {}, f = a.split("&"), g = f.length, e, l, n = 0; n < g; n++)
            if (e = f[n].split("="), l = d.decodeQuery(e.shift(), b), e = e.length ? d.decodeQuery(e.join("="), b) : null, q.call(c, l)) {
                if ("string" === typeof c[l] || null === c[l]) c[l] = [c[l]];
                c[l].push(e)
            } else c[l] = e;
        return c
    };
    d.build = function(a) {
        var b = "";
        a.protocol && (b += a.protocol + ":");
        a.urn || !b && !a.hostname || (b += "//");
        b += d.buildAuthority(a) || "";
        
		
		
		
		
		//HACK SECTION ADDED BY JOHN to fix issue with ports not being included in localhost uris 
		if (!a.hostname && a.port)
		{
			if (a.path.indexOf('/') !== -1)
			{
				var parts = a.path.split('/');
				b += parts.shift();
				b += ":" + a.port;
				var j = parts.join('/');
				"string" === typeof j && ("/" !== j.charAt(0) && "string" === typeof a.hostname && (b += "/"), b += '/' + j);
			}
			else 
			{
				"string" === typeof a.path && ("/" !== a.path.charAt(0) && "string" === typeof a.hostname && (b += "/"), b += a.path);
				b += ":" + a.port;
			}
		}
        else "string" === typeof a.path && ("/" !== a.path.charAt(0) && "string" === typeof a.hostname && (b += "/"), b += a.path);
		
		
		
		
		
		//REMOVED BY JOHN
		//"string" === typeof a.path && ("/" !== a.path.charAt(0) && "string" === typeof a.hostname && (b += "/"), b += a.path);
        
		
		
		
		
		"string" === typeof a.query && a.query && (b += "?" + a.query);
        "string" === typeof a.fragment && a.fragment && (b += "#" + a.fragment);
        return b
    };
    d.buildHost = function(a) {
        var b = "";
        if (a.hostname) b = d.ip6_expression.test(a.hostname) ? b + ("[" + a.hostname + "]") : b + a.hostname;
        else return "";
        a.port && (b += ":" + a.port);
        return b
    };
    d.buildAuthority =
        function(a) {
            return d.buildUserinfo(a) + d.buildHost(a)
        };
    d.buildUserinfo = function(a) {
        var b = "";
        a.username && (b += d.encode(a.username), a.password && (b += ":" + d.encode(a.password)), b += "@");
        return b
    };
    d.buildQuery = function(a, b, c) {
        var f = "",
            g, e, l, n;
        for (e in a)
            if (q.call(a, e) && e)
                if (h(a[e]))
                    for (g = {}, l = 0, n = a[e].length; l < n; l++) void 0 !== a[e][l] && void 0 === g[a[e][l] + ""] && (f += "&" + d.buildQueryParameter(e, a[e][l], c), !0 !== b && (g[a[e][l] + ""] = !0));
                else void 0 !== a[e] && (f += "&" + d.buildQueryParameter(e, a[e], c));
        return f.substring(1)
    };
    d.buildQueryParameter = function(a, b, c) {
        return d.encodeQuery(a, c) + (null !== b ? "=" + d.encodeQuery(b, c) : "")
    };
    d.addQuery = function(a, b, c) {
        if ("object" === typeof b)
            for (var f in b) q.call(b, f) && d.addQuery(a, f, b[f]);
        else if ("string" === typeof b) void 0 === a[b] ? a[b] = c : ("string" === typeof a[b] && (a[b] = [a[b]]), h(c) || (c = [c]), a[b] = (a[b] || []).concat(c));
        else throw new TypeError("URI.addQuery() accepts an object, string as the name parameter");
    };
    d.removeQuery = function(a, b, c) {
        var f;
        if (h(b))
            for (c = 0, f = b.length; c < f; c++) a[b[c]] =
                void 0;
        else if ("RegExp" === v(b))
            for (f in a) b.test(f) && (a[f] = void 0);
        else if ("object" === typeof b)
            for (f in b) q.call(b, f) && d.removeQuery(a, f, b[f]);
        else if ("string" === typeof b) void 0 !== c ? "RegExp" === v(c) ? !h(a[b]) && c.test(a[b]) ? a[b] = void 0 : a[b] = D(a[b], c) : a[b] !== String(c) || h(c) && 1 !== c.length ? h(a[b]) && (a[b] = D(a[b], c)) : a[b] = void 0 : a[b] = void 0;
        else throw new TypeError("URI.removeQuery() accepts an object, string, RegExp as the first parameter");
    };
    d.hasQuery = function(a, b, c, f) {
        switch (v(b)) {
            case "String":
                break;
            case "RegExp":
                for (var e in a)
                    if (q.call(a, e) && b.test(e) && (void 0 === c || d.hasQuery(a, e, c))) return !0;
                return !1;
            case "Object":
                for (var k in b)
                    if (q.call(b, k) && !d.hasQuery(a, k, b[k])) return !1;
                return !0;
            default:
                throw new TypeError("URI.hasQuery() accepts a string, regular expression or object as the name parameter");
        }
        switch (v(c)) {
            case "Undefined":
                return b in a;
            case "Boolean":
                return a = !(h(a[b]) ? !a[b].length : !a[b]), c === a;
            case "Function":
                return !!c(a[b], b, a);
            case "Array":
                return h(a[b]) ? (f ? z : E)(a[b], c) : !1;
            case "RegExp":
                return h(a[b]) ?
                    f ? z(a[b], c) : !1 : !(!a[b] || !a[b].match(c));
            case "Number":
                c = String(c);
            case "String":
                return h(a[b]) ? f ? z(a[b], c) : !1 : a[b] === c;
            default:
                throw new TypeError("URI.hasQuery() accepts undefined, boolean, string, number, RegExp, Function as the value parameter");
        }
    };
    d.commonPath = function(a, b) {
        var c = Math.min(a.length, b.length),
            d;
        for (d = 0; d < c; d++)
            if (a.charAt(d) !== b.charAt(d)) {
                d--;
                break
            }
        if (1 > d) return a.charAt(0) === b.charAt(0) && "/" === a.charAt(0) ? "/" : "";
        if ("/" !== a.charAt(d) || "/" !== b.charAt(d)) d = a.substring(0, d).lastIndexOf("/");
        return a.substring(0, d + 1)
    };
    d.withinString = function(a, b, c) {
        c || (c = {});
        var f = c.start || d.findUri.start,
            e = c.end || d.findUri.end,
            k = c.trim || d.findUri.trim,
            l = /[a-z0-9-]=["']?$/i;
        for (f.lastIndex = 0;;) {
            var n = f.exec(a);
            if (!n) break;
            n = n.index;
            if (c.ignoreHtml) {
                var h = a.slice(Math.max(n - 3, 0), n);
                if (h && l.test(h)) continue
            }
            var h = n + a.slice(n).search(e),
                m = a.slice(n, h).replace(k, "");
            c.ignore && c.ignore.test(m) || (h = n + m.length, m = b(m, n, h, a), a = a.slice(0, n) + m + a.slice(h), f.lastIndex = n + m.length)
        }
        f.lastIndex = 0;
        return a
    };
    d.ensureValidHostname =
        function(a) {
            if (a.match(d.invalid_hostname_characters)) {
                if (!p) throw new TypeError('Hostname "' + a + '" contains characters other than [A-Z0-9.-] and Punycode.js is not available');
                if (p.toASCII(a).match(d.invalid_hostname_characters)) throw new TypeError('Hostname "' + a + '" contains characters other than [A-Z0-9.-]');
            }
        };
    d.noConflict = function(a) {
        if (a) return a = {
                URI: this.noConflict()
            }, m.URITemplate && "function" === typeof m.URITemplate.noConflict && (a.URITemplate = m.URITemplate.noConflict()), m.IPv6 && "function" ===
            typeof m.IPv6.noConflict && (a.IPv6 = m.IPv6.noConflict()), m.SecondLevelDomains && "function" === typeof m.SecondLevelDomains.noConflict && (a.SecondLevelDomains = m.SecondLevelDomains.noConflict()), a;
        m.URI === this && (m.URI = H);
        return this
    };
    e.build = function(a) {
        if (!0 === a) this._deferred_build = !0;
        else if (void 0 === a || this._deferred_build) this._string = d.build(this._parts), this._deferred_build = !1;
        return this
    };
    e.clone = function() {
        return new d(this)
    };
    e.valueOf = e.toString = function() {
        return this.build(!1)._string
    };
    e.protocol =
        x("protocol");
    e.username = x("username");
    e.password = x("password");
    e.hostname = x("hostname");
    e.port = x("port");
    e.query = F("query", "?");
    e.fragment = F("fragment", "#");
    e.search = function(a, b) {
        var c = this.query(a, b);
        return "string" === typeof c && c.length ? "?" + c : c
    };
    e.hash = function(a, b) {
        var c = this.fragment(a, b);
        return "string" === typeof c && c.length ? "#" + c : c
    };
    e.pathname = function(a, b) {
        if (void 0 === a || !0 === a) {
            var c = this._parts.path || (this._parts.hostname ? "/" : "");
            return a ? (this._parts.urn ? d.decodeUrnPath : d.decodePath)(c) : c
        }
        this._parts.path =
            this._parts.urn ? a ? d.recodeUrnPath(a) : "" : a ? d.recodePath(a) : "/";
        this.build(!b);
        return this
    };
    e.path = e.pathname;
    e.href = function(a, b) {
        var c;
        if (void 0 === a) return this.toString();
        this._string = "";
        this._parts = d._parts();
        var f = a instanceof d,
            e = "object" === typeof a && (a.hostname || a.path || a.pathname);
        a.nodeName && (e = d.getDomAttribute(a), a = a[e] || "", e = !1);
        !f && e && void 0 !== a.pathname && (a = a.toString());
        if ("string" === typeof a || a instanceof String) this._parts = d.parse(String(a), this._parts);
        else if (f || e)
            for (c in f = f ? a._parts :
                a, f) q.call(this._parts, c) && (this._parts[c] = f[c]);
        else throw new TypeError("invalid input");
        this.build(!b);
        return this
    };
    e.is = function(a) {
        var b = !1,
            c = !1,
            f = !1,
            e = !1,
            k = !1,
            l = !1,
            h = !1,
            m = !this._parts.urn;
        this._parts.hostname && (m = !1, c = d.ip4_expression.test(this._parts.hostname), f = d.ip6_expression.test(this._parts.hostname), b = c || f, k = (e = !b) && u && u.has(this._parts.hostname), l = e && d.idn_expression.test(this._parts.hostname), h = e && d.punycode_expression.test(this._parts.hostname));
        switch (a.toLowerCase()) {
            case "relative":
                return m;
            case "absolute":
                return !m;
            case "domain":
            case "name":
                return e;
            case "sld":
                return k;
            case "ip":
                return b;
            case "ip4":
            case "ipv4":
            case "inet4":
                return c;
            case "ip6":
            case "ipv6":
            case "inet6":
                return f;
            case "idn":
                return l;
            case "url":
                return !this._parts.urn;
            case "urn":
                return !!this._parts.urn;
            case "punycode":
                return h
        }
        return null
    };
    var I = e.protocol,
        J = e.port,
        K = e.hostname;
    e.protocol = function(a, b) {
        if (void 0 !== a && a && (a = a.replace(/:(\/\/)?$/, ""), !a.match(d.protocol_expression))) throw new TypeError('Protocol "' + a + "\" contains characters other than [A-Z0-9.+-] or doesn't start with [A-Z]");
        return I.call(this, a, b)
    };
    e.scheme = e.protocol;
    e.port = function(a, b) {
        if (this._parts.urn) return void 0 === a ? "" : this;
        if (void 0 !== a && (0 === a && (a = null), a && (a += "", ":" === a.charAt(0) && (a = a.substring(1)), a.match(/[^0-9]/)))) throw new TypeError('Port "' + a + '" contains characters other than [0-9]');
        return J.call(this, a, b)
    };
    e.hostname = function(a, b) {
        if (this._parts.urn) return void 0 === a ? "" : this;
        if (void 0 !== a) {
            var c = {};
            if ("/" !== d.parseHost(a, c)) throw new TypeError('Hostname "' + a + '" contains characters other than [A-Z0-9.-]');
            a = c.hostname
        }
        return K.call(this, a, b)
    };
    e.origin = function(a, b) {
        if (this._parts.urn) return void 0 === a ? "" : this;
        if (void 0 === a) {
            var c = this.protocol();
            return this.authority() ? (c ? c + "://" : "") + this.authority() : ""
        }
        c = d(a);
        this.protocol(c.protocol()).authority(c.authority()).build(!b);
        return this
    };
    e.host = function(a, b) {
        if (this._parts.urn) return void 0 === a ? "" : this;
        if (void 0 === a) return this._parts.hostname ? d.buildHost(this._parts) : "";
        if ("/" !== d.parseHost(a, this._parts)) throw new TypeError('Hostname "' + a + '" contains characters other than [A-Z0-9.-]');
        this.build(!b);
        return this
    };
    e.authority = function(a, b) {
        if (this._parts.urn) return void 0 === a ? "" : this;
        if (void 0 === a) return this._parts.hostname ? d.buildAuthority(this._parts) : "";
        if ("/" !== d.parseAuthority(a, this._parts)) throw new TypeError('Hostname "' + a + '" contains characters other than [A-Z0-9.-]');
        this.build(!b);
        return this
    };
    e.userinfo = function(a, b) {
        if (this._parts.urn) return void 0 === a ? "" : this;
        if (void 0 === a) {
            if (!this._parts.username) return "";
            var c = d.buildUserinfo(this._parts);
            return c.substring(0, c.length -
                1)
        }
        "@" !== a[a.length - 1] && (a += "@");
        d.parseUserinfo(a, this._parts);
        this.build(!b);
        return this
    };
    e.resource = function(a, b) {
        var c;
        if (void 0 === a) return this.path() + this.search() + this.hash();
        c = d.parse(a);
        this._parts.path = c.path;
        this._parts.query = c.query;
        this._parts.fragment = c.fragment;
        this.build(!b);
        return this
    };
    e.subdomain = function(a, b) {
        if (this._parts.urn) return void 0 === a ? "" : this;
        if (void 0 === a) {
            if (!this._parts.hostname || this.is("IP")) return "";
            var c = this._parts.hostname.length - this.domain().length - 1;
            return this._parts.hostname.substring(0,
                c) || ""
        }
        c = this._parts.hostname.length - this.domain().length;
        c = this._parts.hostname.substring(0, c);
        c = new RegExp("^" + r(c));
        a && "." !== a.charAt(a.length - 1) && (a += ".");
        a && d.ensureValidHostname(a);
        this._parts.hostname = this._parts.hostname.replace(c, a);
        this.build(!b);
        return this
    };
    e.domain = function(a, b) {
        if (this._parts.urn) return void 0 === a ? "" : this;
        "boolean" === typeof a && (b = a, a = void 0);
        if (void 0 === a) {
            if (!this._parts.hostname || this.is("IP")) return "";
            var c = this._parts.hostname.match(/\./g);
            if (c && 2 > c.length) return this._parts.hostname;
            c = this._parts.hostname.length - this.tld(b).length - 1;
            c = this._parts.hostname.lastIndexOf(".", c - 1) + 1;
            return this._parts.hostname.substring(c) || ""
        }
        if (!a) throw new TypeError("cannot set domain empty");
        d.ensureValidHostname(a);
        !this._parts.hostname || this.is("IP") ? this._parts.hostname = a : (c = new RegExp(r(this.domain()) + "$"), this._parts.hostname = this._parts.hostname.replace(c, a));
        this.build(!b);
        return this
    };
    e.tld = function(a, b) {
        if (this._parts.urn) return void 0 === a ? "" : this;
        "boolean" === typeof a && (b = a, a = void 0);
        if (void 0 === a) {
            if (!this._parts.hostname || this.is("IP")) return "";
            var c = this._parts.hostname.lastIndexOf("."),
                c = this._parts.hostname.substring(c + 1);
            return !0 !== b && u && u.list[c.toLowerCase()] ? u.get(this._parts.hostname) || c : c
        }
        if (a)
            if (a.match(/[^a-zA-Z0-9-]/))
                if (u && u.is(a)) c = new RegExp(r(this.tld()) + "$"), this._parts.hostname = this._parts.hostname.replace(c, a);
                else throw new TypeError('TLD "' + a + '" contains characters other than [A-Z0-9]');
        else {
            if (!this._parts.hostname || this.is("IP")) throw new ReferenceError("cannot set TLD on non-domain host");
            c = new RegExp(r(this.tld()) + "$");
            this._parts.hostname = this._parts.hostname.replace(c, a)
        } else throw new TypeError("cannot set TLD empty");
        this.build(!b);
        return this
    };
    e.directory = function(a, b) {
        if (this._parts.urn) return void 0 === a ? "" : this;
        if (void 0 === a || !0 === a) {
            if (!this._parts.path && !this._parts.hostname) return "";
            if ("/" === this._parts.path) return "/";
            var c = this._parts.path.length - this.filename().length - 1,
                c = this._parts.path.substring(0, c) || (this._parts.hostname ? "/" : "");
            return a ? d.decodePath(c) : c
        }
        c = this._parts.path.length -
            this.filename().length;
        c = this._parts.path.substring(0, c);
        c = new RegExp("^" + r(c));
        this.is("relative") || (a || (a = "/"), "/" !== a.charAt(0) && (a = "/" + a));
        a && "/" !== a.charAt(a.length - 1) && (a += "/");
        a = d.recodePath(a);
        this._parts.path = this._parts.path.replace(c, a);
        this.build(!b);
        return this
    };
    e.filename = function(a, b) {
        if (this._parts.urn) return void 0 === a ? "" : this;
        if (void 0 === a || !0 === a) {
            if (!this._parts.path || "/" === this._parts.path) return "";
            var c = this._parts.path.lastIndexOf("/"),
                c = this._parts.path.substring(c + 1);
            return a ?
                d.decodePathSegment(c) : c
        }
        c = !1;
        "/" === a.charAt(0) && (a = a.substring(1));
        a.match(/\.?\//) && (c = !0);
        var f = new RegExp(r(this.filename()) + "$");
        a = d.recodePath(a);
        this._parts.path = this._parts.path.replace(f, a);
        c ? this.normalizePath(b) : this.build(!b);
        return this
    };
    e.suffix = function(a, b) {
        if (this._parts.urn) return void 0 === a ? "" : this;
        if (void 0 === a || !0 === a) {
            if (!this._parts.path || "/" === this._parts.path) return "";
            var c = this.filename(),
                f = c.lastIndexOf(".");
            if (-1 === f) return "";
            c = c.substring(f + 1);
            c = /^[a-z0-9%]+$/i.test(c) ?
                c : "";
            return a ? d.decodePathSegment(c) : c
        }
        "." === a.charAt(0) && (a = a.substring(1));
        if (c = this.suffix()) f = a ? new RegExp(r(c) + "$") : new RegExp(r("." + c) + "$");
        else {
            if (!a) return this;
            this._parts.path += "." + d.recodePath(a)
        }
        f && (a = d.recodePath(a), this._parts.path = this._parts.path.replace(f, a));
        this.build(!b);
        return this
    };
    e.segment = function(a, b, c) {
        var d = this._parts.urn ? ":" : "/",
            e = this.path(),
            k = "/" === e.substring(0, 1),
            e = e.split(d);
        void 0 !== a && "number" !== typeof a && (c = b, b = a, a = void 0);
        if (void 0 !== a && "number" !== typeof a) throw Error('Bad segment "' +
            a + '", must be 0-based integer');
        k && e.shift();
        0 > a && (a = Math.max(e.length + a, 0));
        if (void 0 === b) return void 0 === a ? e : e[a];
        if (null === a || void 0 === e[a])
            if (h(b)) {
                e = [];
                a = 0;
                for (var l = b.length; a < l; a++)
                    if (b[a].length || e.length && e[e.length - 1].length) e.length && !e[e.length - 1].length && e.pop(), e.push(A(b[a]))
            } else {
                if (b || "string" === typeof b) b = A(b), "" === e[e.length - 1] ? e[e.length - 1] = b : e.push(b)
            }
        else b ? e[a] = A(b) : e.splice(a, 1);
        k && e.unshift("");
        return this.path(e.join(d), c)
    };
    e.segmentCoded = function(a, b, c) {
        var e, g;
        "number" !==
        typeof a && (c = b, b = a, a = void 0);
        if (void 0 === b) {
            a = this.segment(a, b, c);
            if (h(a))
                for (e = 0, g = a.length; e < g; e++) a[e] = d.decode(a[e]);
            else a = void 0 !== a ? d.decode(a) : void 0;
            return a
        }
        if (h(b))
            for (e = 0, g = b.length; e < g; e++) b[e] = d.encode(b[e]);
        else b = "string" === typeof b || b instanceof String ? d.encode(b) : b;
        return this.segment(a, b, c)
    };
    var L = e.query;
    e.query = function(a, b) {
        if (!0 === a) return d.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
        if ("function" === typeof a) {
            var c = d.parseQuery(this._parts.query, this._parts.escapeQuerySpace),
                e = a.call(this, c);
            this._parts.query = d.buildQuery(e || c, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
            this.build(!b);
            return this
        }
        return void 0 !== a && "string" !== typeof a ? (this._parts.query = d.buildQuery(a, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace), this.build(!b), this) : L.call(this, a, b)
    };
    e.setQuery = function(a, b, c) {
        var e = d.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
        if ("string" === typeof a || a instanceof String) e[a] = void 0 !== b ? b : null;
        else if ("object" ===
            typeof a)
            for (var g in a) q.call(a, g) && (e[g] = a[g]);
        else throw new TypeError("URI.addQuery() accepts an object, string as the name parameter");
        this._parts.query = d.buildQuery(e, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
        "string" !== typeof a && (c = b);
        this.build(!c);
        return this
    };
    e.addQuery = function(a, b, c) {
        var e = d.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
        d.addQuery(e, a, void 0 === b ? null : b);
        this._parts.query = d.buildQuery(e, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
        "string" !== typeof a && (c = b);
        this.build(!c);
        return this
    };
    e.removeQuery = function(a, b, c) {
        var e = d.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
        d.removeQuery(e, a, b);
        this._parts.query = d.buildQuery(e, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
        "string" !== typeof a && (c = b);
        this.build(!c);
        return this
    };
    e.hasQuery = function(a, b, c) {
        var e = d.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
        return d.hasQuery(e, a, b, c)
    };
    e.setSearch = e.setQuery;
    e.addSearch = e.addQuery;
    e.removeSearch =
        e.removeQuery;
    e.hasSearch = e.hasQuery;
    e.normalize = function() {
        return this._parts.urn ? this.normalizeProtocol(!1).normalizePath(!1).normalizeQuery(!1).normalizeFragment(!1).build() : this.normalizeProtocol(!1).normalizeHostname(!1).normalizePort(!1).normalizePath(!1).normalizeQuery(!1).normalizeFragment(!1).build()
    };
    e.normalizeProtocol = function(a) {
        "string" === typeof this._parts.protocol && (this._parts.protocol = this._parts.protocol.toLowerCase(), this.build(!a));
        return this
    };
    e.normalizeHostname = function(a) {
        this._parts.hostname &&
            (this.is("IDN") && p ? this._parts.hostname = p.toASCII(this._parts.hostname) : this.is("IPv6") && w && (this._parts.hostname = w.best(this._parts.hostname)), this._parts.hostname = this._parts.hostname.toLowerCase(), this.build(!a));
        return this
    };
    e.normalizePort = function(a) {
        "string" === typeof this._parts.protocol && this._parts.port === d.defaultPorts[this._parts.protocol] && (this._parts.port = null, this.build(!a));
        return this
    };
    e.normalizePath = function(a) {
        var b = this._parts.path;
        if (!b) return this;
        if (this._parts.urn) return this._parts.path =
            d.recodeUrnPath(this._parts.path), this.build(!a), this;
        if ("/" === this._parts.path) return this;
        var b = d.recodePath(b),
            c, e = "",
            g, k;
        "/" !== b.charAt(0) && (c = !0, b = "/" + b);
        if ("/.." === b.slice(-3) || "/." === b.slice(-2)) b += "/";
        b = b.replace(/(\/(\.\/)+)|(\/\.$)/g, "/").replace(/\/{2,}/g, "/");
        c && (e = b.substring(1).match(/^(\.\.\/)+/) || "") && (e = e[0]);
        for (;;) {
            g = b.search(/\/\.\.(\/|$)/);
            if (-1 === g) break;
            else if (0 === g) {
                b = b.substring(3);
                continue
            }
            k = b.substring(0, g).lastIndexOf("/"); - 1 === k && (k = g);
            b = b.substring(0, k) + b.substring(g +
                3)
        }
        c && this.is("relative") && (b = e + b.substring(1));
        this._parts.path = b;
        this.build(!a);
        return this
    };
    e.normalizePathname = e.normalizePath;
    e.normalizeQuery = function(a) {
        "string" === typeof this._parts.query && (this._parts.query.length ? this.query(d.parseQuery(this._parts.query, this._parts.escapeQuerySpace)) : this._parts.query = null, this.build(!a));
        return this
    };
    e.normalizeFragment = function(a) {
        this._parts.fragment || (this._parts.fragment = null, this.build(!a));
        return this
    };
    e.normalizeSearch = e.normalizeQuery;
    e.normalizeHash =
        e.normalizeFragment;
    e.iso8859 = function() {
        var a = d.encode,
            b = d.decode;
        d.encode = escape;
        d.decode = decodeURIComponent;
        try {
            this.normalize()
        } finally {
            d.encode = a, d.decode = b
        }
        return this
    };
    e.unicode = function() {
        var a = d.encode,
            b = d.decode;
        d.encode = B;
        d.decode = unescape;
        try {
            this.normalize()
        } finally {
            d.encode = a, d.decode = b
        }
        return this
    };
    e.readable = function() {
        var a = this.clone();
        a.username("").password("").normalize();
        var b = "";
        a._parts.protocol && (b += a._parts.protocol + "://");
        a._parts.hostname && (a.is("punycode") && p ? (b += p.toUnicode(a._parts.hostname),
            a._parts.port && (b += ":" + a._parts.port)) : b += a.host());
        a._parts.hostname && a._parts.path && "/" !== a._parts.path.charAt(0) && (b += "/");
        b += a.path(!0);
        if (a._parts.query) {
            for (var c = "", e = 0, g = a._parts.query.split("&"), k = g.length; e < k; e++) {
                var h = (g[e] || "").split("="),
                    c = c + ("&" + d.decodeQuery(h[0], this._parts.escapeQuerySpace).replace(/&/g, "%26"));
                void 0 !== h[1] && (c += "=" + d.decodeQuery(h[1], this._parts.escapeQuerySpace).replace(/&/g, "%26"))
            }
            b += "?" + c.substring(1)
        }
        return b += d.decodeQuery(a.hash(), !0)
    };
    e.absoluteTo = function(a) {
        var b =
            this.clone(),
            c = ["protocol", "username", "password", "hostname", "port"],
            e, g;
        if (this._parts.urn) throw Error("URNs do not have any generally defined hierarchical components");
        a instanceof d || (a = new d(a));
        b._parts.protocol || (b._parts.protocol = a._parts.protocol);
        if (this._parts.hostname) return b;
        for (e = 0; g = c[e]; e++) b._parts[g] = a._parts[g];
        b._parts.path ? ".." === b._parts.path.substring(-2) && (b._parts.path += "/") : (b._parts.path = a._parts.path, b._parts.query || (b._parts.query = a._parts.query));
        "/" !== b.path().charAt(0) &&
            (c = (c = a.directory()) ? c : 0 === a.path().indexOf("/") ? "/" : "", b._parts.path = (c ? c + "/" : "") + b._parts.path, b.normalizePath());
        b.build();
        return b
    };
    e.relativeTo = function(a) {
        var b = this.clone().normalize(),
            c, e, g;
        if (b._parts.urn) throw Error("URNs do not have any generally defined hierarchical components");
        a = (new d(a)).normalize();
        c = b._parts;
        e = a._parts;
        g = b.path();
        a = a.path();
        if ("/" !== g.charAt(0)) throw Error("URI is already relative");
        if ("/" !== a.charAt(0)) throw Error("Cannot calculate a URI relative to another relative URI");
        c.protocol === e.protocol && (c.protocol = null);
        if (c.username === e.username && c.password === e.password && null === c.protocol && null === c.username && null === c.password && c.hostname === e.hostname && c.port === e.port) c.hostname = null, c.port = null;
        else return b.build();
        if (g === a) return c.path = "", b.build();
        g = d.commonPath(g, a);
        if (!g) return b.build();
        e = e.path.substring(g.length).replace(/[^\/]*$/, "").replace(/.*?\//g, "../");
        c.path = e + c.path.substring(g.length) || "./";
        return b.build()
    };
    e.equals = function(a) {
        var b = this.clone();
        a = new d(a);
        var c = {},
            e = {},
            g = {},
            k;
        b.normalize();
        a.normalize();
        if (b.toString() === a.toString()) return !0;
        c = b.query();
        e = a.query();
        b.query("");
        a.query("");
        if (b.toString() !== a.toString() || c.length !== e.length) return !1;
        c = d.parseQuery(c, this._parts.escapeQuerySpace);
        e = d.parseQuery(e, this._parts.escapeQuerySpace);
        for (k in c)
            if (q.call(c, k)) {
                if (!h(c[k])) {
                    if (c[k] !== e[k]) return !1
                } else if (!E(c[k], e[k])) return !1;
                g[k] = !0
            }
        for (k in e)
            if (q.call(e, k) && !g[k]) return !1;
        return !0
    };
    e.duplicateQueryParameters = function(a) {
        this._parts.duplicateQueryParameters = !!a;
        return this
    };
    e.escapeQuerySpace = function(a) {
        this._parts.escapeQuerySpace = !!a;
        return this
    };
    return d
});

//__ES4__

(function() { var $window = this; var window = $window.parent || $window; var global = window; var document = window.document; var $es4 = window.$es4 || (window.$es4 = {}); var _ = window._; var $ = window.$; var alert = window.alert; 

//flash.utils.flash_proxy
$es4.$$package('flash.utils').flash_proxy = $es4.$$namespace('http://www.sweetrush.com/flash/proxy', true);
//flash.utils.flash_proxy


//flash.display.Shader
$es4.$$package('flash.display').Shader = function () { throw new Error('Use of unimplemented class: Shader'); }
//flash.display.Shader


//flash.accessibility.AccessibilityProperties
$es4.$$package('flash.accessibility').AccessibilityProperties = (function ()
{
	//imports
	var DisplayObject;

	//class initializer
	AccessibilityProperties.$$cinit = (function ()
	{
		AccessibilityProperties.$$cinit = undefined;

		//initialize imports
		DisplayObject = $es4.$$['flash.display'].DisplayObject;
	});

	function AccessibilityProperties()
	{
		//initialize class if not initialized
		if (AccessibilityProperties.$$cinit !== undefined) AccessibilityProperties.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof AccessibilityProperties) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], AccessibilityProperties) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('$_description', $$thisp, String);
		$es4.$$public_property('forceSimple', $$thisp, Boolean);
		$es4.$$private_property('$_name', $$thisp, String);
		$es4.$$public_property('noAutoLabeling', $$thisp, Boolean);
		$es4.$$public_property('shortcut', $$thisp, String);
		$es4.$$public_property('silent', $$thisp, Boolean);
		$es4.$$private_property('$_owner', $$thisp, DisplayObject);

		//initializer
		$es4.$$iinit($$thisp, (function ()
		{
			//initialize properties
			$es4.$$set($$this, $$this, $$thisp, '$_description', '', '=');
			$es4.$$set($$this, $$this, $$thisp, '$_name', '', '=');
			$es4.$$set($$this, $$this, $$thisp, 'shortcut', '', '=');
		}));

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//method
		$es4.$$public_function('$_setOwner', $$thisp, (function ($$$$owner)
		{
			//set default parameter values
			var owner = $es4.$$coerce($$$$owner, DisplayObject);

			$es4.$$set($$thisp, $$this, $$thisp, '$_owner', owner, '=');
			$es4.$$call($$this, $$this, $$thisp, '$_applyProperties', [$es4.$$get($es4.$$call($$thisp, $$this, $$thisp, '$_owner', '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope', '$_domView')]);
		}));

		//method
		$es4.$$public_function('$_applyProperties', $$thisp, (function ($$$$object)
		{
			//set default parameter values
			var object = $es4.$$coerce($$$$object, Object);

			$es4.$$call(object, $$this, $$thisp, 'setAttribute', ['title', $es4.$$get($$thisp, $$this, $$thisp, '$_name')]);
			$es4.$$call(object, $$this, $$thisp, 'setAttribute', ['data-description', $es4.$$get($$thisp, $$this, $$thisp, '$_description')]);
		}));

		//accessor
		$es4.$$public_accessor('name', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '$_name');
		}), (function ($$$$name)
		{
			//set default parameter values
			var name = $es4.$$coerce($$$$name, String);

			$es4.$$set($$thisp, $$this, $$thisp, '$_name', name, '=');
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_owner'))
			{
				var scope = $es4.$$get($es4.$$call($$thisp, $$this, $$thisp, '$_owner', '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope');
				$es4.$$call(scope, $$this, $$thisp, '$_domView', 'setAttribute', ['title', name]);
			}
		}));

		//accessor
		$es4.$$public_accessor('description', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '$_description');
		}), (function ($$$$description)
		{
			//set default parameter values
			var description = $es4.$$coerce($$$$description, String);

			$es4.$$set($$thisp, $$this, $$thisp, '$_description', description, '=');
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_owner'))
			{
				var scope = $es4.$$get($es4.$$call($$thisp, $$this, $$thisp, '$_owner', '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope');
				$es4.$$call(scope, $$this, $$thisp, '$_domView', 'setAttribute', ['data-description', description]);
			}
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(AccessibilityProperties, null, 'flash.accessibility::AccessibilityProperties');
})();
//flash.accessibility.AccessibilityProperties


//flash.events.UncaughtErrorEvent
$es4.$$package('flash.events').UncaughtErrorEvent = function () { throw new Error('Use of unimplemented class: UncaughtErrorEvent'); }
//flash.events.UncaughtErrorEvent


//flash.text.TextDisplayMode
$es4.$$package('flash.text').TextDisplayMode = function () { throw new Error('Use of unimplemented class: TextDisplayMode'); }
//flash.text.TextDisplayMode


//flash.system.System
$es4.$$package('flash.system').System = (function ()
{
	//imports
	var IME;

	//class initializer
	System.$$cinit = (function ()
	{
		System.$$cinit = undefined;

		//initialize imports
		IME = $es4.$$['flash.system'].IME;
	});

	//method
	$es4.$$public_function('disposeXML', System, (function ($$$$node)
	{
		if (System.$$cinit !== undefined) System.$$cinit();

		//set default parameter values
		var node = $es4.$$coerce($$$$node, XML);

		throw $es4.$$primitive(new (Error)('System: attempted call to an unimplemented function "disposeXML"'));
	}));

	//method
	$es4.$$public_function('exit', System, (function ($$$$code)
	{
		if (System.$$cinit !== undefined) System.$$cinit();

		//set default parameter values
		var code = $es4.$$coerce($$$$code, uint);

		throw $es4.$$primitive(new (Error)('System: attempted call to an unimplemented function "exit"'));
	}));

	//method
	$es4.$$public_function('gc', System, (function ()
	{
		if (System.$$cinit !== undefined) System.$$cinit();

		throw $es4.$$primitive(new (Error)('System: attempted call to an unimplemented function "gc"'));
	}));

	//method
	$es4.$$public_function('pause', System, (function ()
	{
		if (System.$$cinit !== undefined) System.$$cinit();

		throw $es4.$$primitive(new (Error)('System: attempted call to an unimplemented function "pause"'));
	}));

	//method
	$es4.$$public_function('pauseForGCIfCollectionImminent', System, (function ($$$$imminence)
	{
		if (System.$$cinit !== undefined) System.$$cinit();

		//set default parameter values
		var imminence = (0 > arguments.length - 1) ? 0.75 : $es4.$$coerce($$$$imminence, Number);

		throw $es4.$$primitive(new (Error)('System: attempted call to an unimplemented function "pauseForGCIfCollectionImminent"'));
	}));

	//method
	$es4.$$public_function('resume', System, (function ()
	{
		if (System.$$cinit !== undefined) System.$$cinit();

		throw $es4.$$primitive(new (Error)('System: attempted call to an unimplemented function "resume"'));
	}));

	//method
	$es4.$$public_function('setClipboard', System, (function ($$$$string)
	{
		if (System.$$cinit !== undefined) System.$$cinit();

		//set default parameter values
		var string = $es4.$$coerce($$$$string, String);

		if ($es4.$$get(window, null, null, 'mobile'))
		{
			$es4.$$call(window, null, null, 'prompt', ['Press and hold over highlighted text, and then press copy.', string]);
		}
		else
		{
			$es4.$$call(window, null, null, 'prompt', ['Press Ctrl+C or Cmd+C, and then click OK.', string]);
		}
	}));

	//accessor
	$es4.$$public_accessor('freeMemory', System, (function ()
	{
		if (System.$$cinit !== undefined) System.$$cinit();

		throw $es4.$$primitive(new (Error)('System: attempted call to an unimplemented function "freeMemory"'));
	}), null);

	//accessor
	$es4.$$public_accessor('ime', System, (function ()
	{
		if (System.$$cinit !== undefined) System.$$cinit();

		throw $es4.$$primitive(new (Error)('System: attempted call to an unimplemented function "ime"'));
	}), null);

	//accessor
	$es4.$$public_accessor('privateMemory', System, (function ()
	{
		if (System.$$cinit !== undefined) System.$$cinit();

		throw $es4.$$primitive(new (Error)('System: attempted call to an unimplemented function "privateMemory"'));
	}), null);

	//accessor
	$es4.$$public_accessor('processCPUUsage', System, (function ()
	{
		if (System.$$cinit !== undefined) System.$$cinit();

		throw $es4.$$primitive(new (Error)('System: attempted call to an unimplemented function "processCPUUsage"'));
	}), null);

	//accessor
	$es4.$$public_accessor('totalMemory', System, (function ()
	{
		if (System.$$cinit !== undefined) System.$$cinit();

		throw $es4.$$primitive(new (Error)('System: attempted call to an unimplemented function "totalMemory"'));
	}), null);

	//accessor
	$es4.$$public_accessor('totalMemoryNumber', System, (function ()
	{
		if (System.$$cinit !== undefined) System.$$cinit();

		throw $es4.$$primitive(new (Error)('System: attempted call to an unimplemented function "totalMemoryNumber"'));
	}), null);

	//accessor
	$es4.$$public_accessor('useCodePage', System, (function ()
	{
		if (System.$$cinit !== undefined) System.$$cinit();

		throw $es4.$$primitive(new (Error)('System: attempted call to an unimplemented function "useCodePage"'));
	}), (function ($$$$value)
	{
		if (System.$$cinit !== undefined) System.$$cinit();

		//set default parameter values
		var value = $es4.$$coerce($$$$value, Boolean);

		throw $es4.$$primitive(new (Error)('System: attempted call to an unimplemented function "useCodePage"'));
	}));

	//accessor
	$es4.$$public_accessor('vmVersion', System, (function ()
	{
		if (System.$$cinit !== undefined) System.$$cinit();

		throw $es4.$$primitive(new (Error)('System: attempted call to an unimplemented function "vmVersion"'));
	}), null);

	function System()
	{
		//initialize class if not initialized
		if (System.$$cinit !== undefined) System.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof System) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], System) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('System: attempted call to an unimplemented constructor'));
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(System, null, 'flash.system::System');
})();
//flash.system.System


//flash.events.TransformGestureEvent
$es4.$$package('flash.events').TransformGestureEvent = function () { throw new Error('Use of unimplemented class: TransformGestureEvent'); }
//flash.events.TransformGestureEvent


//flash.net.NetGroup
$es4.$$package('flash.net').NetGroup = function () { throw new Error('Use of unimplemented class: NetGroup'); }
//flash.net.NetGroup


//flash.text.engine.GraphicElement
$es4.$$package('flash.text.engine').GraphicElement = function () { throw new Error('Use of unimplemented class: GraphicElement'); }
//flash.text.engine.GraphicElement


//flash.errors.EOFError
$es4.$$package('flash.errors').EOFError = function () { throw new Error('Use of unimplemented class: EOFError'); }
//flash.errors.EOFError


//flash.display.GraphicsStroke
$es4.$$package('flash.display').GraphicsStroke = function () { throw new Error('Use of unimplemented class: GraphicsStroke'); }
//flash.display.GraphicsStroke


//flash.display3D.IndexBuffer3D
$es4.$$package('flash.display3D').IndexBuffer3D = function () { throw new Error('Use of unimplemented class: IndexBuffer3D'); }
//flash.display3D.IndexBuffer3D


//flash.filters.BevelFilter
$es4.$$package('flash.filters').BevelFilter = function () { throw new Error('Use of unimplemented class: BevelFilter'); }
//flash.filters.BevelFilter


//flash.system.SystemUpdaterType
$es4.$$package('flash.system').SystemUpdaterType = function () { throw new Error('Use of unimplemented class: SystemUpdaterType'); }
//flash.system.SystemUpdaterType


//flash.display.GraphicsShaderFill
$es4.$$package('flash.display').GraphicsShaderFill = function () { throw new Error('Use of unimplemented class: GraphicsShaderFill'); }
//flash.display.GraphicsShaderFill


//flash.net.drm.DRMVoucher
$es4.$$package('flash.net.drm').DRMVoucher = function () { throw new Error('Use of unimplemented class: DRMVoucher'); }
//flash.net.drm.DRMVoucher


//flash.net.URLVariables
$es4.$$package('flash.net').URLVariables = (function ()
{
	//class initializer
	URLVariables.$$cinit = (function ()
	{
		URLVariables.$$cinit = undefined;

	});

	function URLVariables()
	{
		//initialize class if not initialized
		if (URLVariables.$$cinit !== undefined) URLVariables.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof URLVariables) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], URLVariables) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$source)
		{
			//set default parameter values
			var source = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$source, String);

		}));

		//method
		$es4.$$public_function('decode', $$thisp, (function ($$$$source)
		{
			//set default parameter values
			var source = $es4.$$coerce($$$$source, String);

			throw $es4.$$primitive(new (Error)('URLVariables: attempted call to an unimplemented function "decode"'));
		}));

		//method
		$es4.$$public_function('toString', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('URLVariables: attempted call to an unimplemented function "toString"'));
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(URLVariables, null, 'flash.net::URLVariables');
})();
//flash.net.URLVariables


//flash.events.EventDispatcher
$es4.$$package('flash.events').EventDispatcher = (function ()
{
	//imports
	var DisplayObject;
	var Stage;
	var Event;
	var IEventDispatcher;
	var EventPhase;

	//class initializer
	EventDispatcher.$$cinit = (function ()
	{
		EventDispatcher.$$cinit = undefined;

		//initialize imports
		DisplayObject = $es4.$$['flash.display'].DisplayObject;
		Stage = $es4.$$['flash.display'].Stage;
		Event = $es4.$$['flash.events'].Event;
		IEventDispatcher = $es4.$$['flash.events'].IEventDispatcher;
		EventPhase = $es4.$$['flash.events'].EventPhase;
	});

	//method
	$es4.$$private_function('$_processListeners', EventDispatcher, (function ($$$$event, $$$$listeners)
	{
		if (EventDispatcher.$$cinit !== undefined) EventDispatcher.$$cinit();

		//set default parameter values
		var event = $es4.$$coerce($$$$event, Event);
		var listeners = $es4.$$coerce($$$$listeners, Array);

		listeners = $es4.$$call(listeners, null, null, 'slice', $es4.$$EMPTY_ARRAY);
		var listenersLength = $es4.$$get(listeners, null, null, 'length');
		var properties = $es4.$$call(event, null, null, '$__properties', $es4.$$EMPTY_ARRAY);
		for (var i = 0; i < listenersLength; i++)
		{
			if ($es4.$$call(listeners, null, null, i, 'method', [event]) === false)
			{
				$es4.$$call(properties, null, null, 'TLScope', 'stopPropagation', $es4.$$EMPTY_ARRAY);
				$es4.$$call(properties, null, null, 'TLScope', 'preventDefault', $es4.$$EMPTY_ARRAY);
			}
			if ($es4.$$get(properties, null, null, 'EventScope', '$_immediatePropagationStopped'))
			{
				break;
			}
		}
	}));

	function EventDispatcher()
	{
		//initialize class if not initialized
		if (EventDispatcher.$$cinit !== undefined) EventDispatcher.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof EventDispatcher) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], EventDispatcher) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('$_properties', $$thisp);

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$target)
		{
			//set default parameter values
			var target = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$target, IEventDispatcher);

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties') === undefined)
			{
				$es4.$$call($$this, $$this, $$thisp, '$__properties', [{}]);
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'EventDispatcherScope', '$_target', target || $$this, '=');
		}));

		//method
		$es4.$$public_function('$__properties', $$thisp, (function ($$$$object)
		{
			//set default parameter values
			var object = (0 > arguments.length - 1) ? null : $$$$object;

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties') === undefined)
			{
				$es4.$$set(object, $$this, $$thisp, 'EventDispatcherScope', {$_listeners:{}}, '=');
				$es4.$$set(object, $$this, $$thisp, 'TLScope', $$this, '=');
				return $es4.$$set($$thisp, $$this, $$thisp, '$_properties', object, '=');
			}
			return $es4.$$get($$thisp, $$this, $$thisp, '$_properties');
		}));

		//method
		$es4.$$public_function('addEventListener', $$thisp, (function ($$$$type, $$$$listener, $$$$useCapture, $$$$priority, $$$$useWeakReference)
		{
			//set default parameter values
			var type = $es4.$$coerce($$$$type, String);
			var listener = $es4.$$coerce($$$$listener, Function);
			var useCapture = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$useCapture, Boolean);
			var priority = (3 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$priority, int);
			var useWeakReference = (4 > arguments.length - 1) ? false : $es4.$$coerce($$$$useWeakReference, Boolean);

			if (useWeakReference)
			{
				trace('Warning: useWeakReference not supported in EventDispatacher addEventListener');
			}
			if (useCapture)
			{
				trace('Warning: useCapture not supported in EventDispatacher addEventListener');
			}
			if (type == $es4.$$get(Event, $$this, $$thisp, 'ENTER_FRAME'))
			{
				$es4.$$call(Stage, $$this, $$thisp, '$__addEnterFrameListener', [$$this, listener]);
				return;
			}
			var listenersByType = $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'EventDispatcherScope', '$_listeners');
			var eventObj = {type:type, method:listener, useCapture:useCapture, priority:priority, useWeakReference:useWeakReference};
			if (!(type in listenersByType))
			{
				$es4.$$set(listenersByType, $$this, $$thisp, type, [eventObj], '=');
			}
			else
			{
				var listeners = $es4.$$coerce($es4.$$get(listenersByType, $$this, $$thisp, type), Array);
				for (var i = $es4.$$coerce($es4.$$get(listeners, $$this, $$thisp, 'length'), int); i--;)
				{
					if (listener == $es4.$$get(listeners, $$this, $$thisp, i, 'method'))
					{
						return;
					}
				}
				$es4.$$call(listenersByType, $$this, $$thisp, type, 'push', [eventObj]);
			}
			$es4.$$call(listenersByType, $$this, $$thisp, type, 'sort', [eventCompare]);

			function eventCompare($$$$item1, $$$$item2) 
			{
				//set default parameter values
				var item1 = $es4.$$coerce($$$$item1, Object);
				var item2 = $es4.$$coerce($$$$item2, Object);

				if ($es4.$$get(item1, $$this, $$thisp, 'priority') > $es4.$$get(item2, $$this, $$thisp, 'priority'))
				{
					return -1;
				}
				else if ($es4.$$get(item1, $$this, $$thisp, 'priority') < $es4.$$get(item2, $$this, $$thisp, 'priority'))
				{
					return 1;
				}
				else
				{
					return 0;
				}
			}
;
		}));

		//method
		$es4.$$public_function('dispatchEvent', $$thisp, (function ($$$$event)
		{
			//set default parameter values
			var event = $es4.$$coerce($$$$event, Event);

			var properties = $es4.$$get($es4.$$call(event, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'TLScope');
			var listeners = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'EventDispatcherScope', '$_listeners', $es4.$$get(event, $$this, $$thisp, 'type')), Array);
			var target = $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'EventDispatcherScope', '$_target');
			var bubble = $es4.$$coerce($es4.$$get(properties, $$this, $$thisp, 'bubbles') && $es4.$$is($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'EventDispatcherScope', '$_target'), DisplayObject), Boolean);
			if (!bubble && !listeners)
			{
				return $es4.$$coerce(!$es4.$$call(properties, $$this, $$thisp, 'isDefaultPrevented', $es4.$$EMPTY_ARRAY), Boolean);
			}
			var parents = null;
			if (bubble)
			{
				parents = [];
				var currentParent = $es4.$$coerce($es4.$$get(target, $$this, $$thisp, 'parent'), DisplayObject);
				while (currentParent)
				{
					$es4.$$call(parents, $$this, $$thisp, 'push', [currentParent]);
					currentParent = $es4.$$get(currentParent, $$this, $$thisp, 'parent');
				}
			}
			properties = $es4.$$get($es4.$$call(event, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'EventScope');
			if (listeners && !$es4.$$get(properties, $$this, $$thisp, '$_propagationStopped') && !$es4.$$get(properties, $$this, $$thisp, '$_immediatePropagationStopped'))
			{
				event = $es4.$$coerce($es4.$$call(properties, $$this, $$thisp, '$_withTarget', [event, target]), Event);
				properties = $es4.$$get($es4.$$call(event, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'EventScope');
				$es4.$$set(properties, $$this, $$thisp, '$_eventPhase', $es4.$$get(EventPhase, $$this, $$thisp, 'AT_TARGET'), '=');
				$es4.$$set(properties, $$this, $$thisp, '$_currentTarget', $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'EventDispatcherScope', '$_target'), '=');
				$es4.$$call(EventDispatcher, $$this, $$thisp, '$_processListeners', [event, listeners]);
			}
			if (bubble && !$es4.$$get(properties, $$this, $$thisp, '$_propagationStopped') && !$es4.$$get(properties, $$this, $$thisp, '$_immediatePropagationStopped'))
			{
				var index = 0;
				var parentsLength = $es4.$$get(parents, $$this, $$thisp, 'length');
				while (parentsLength > index)
				{
					var currentTarget = $es4.$$get(parents, $$this, $$thisp, index);
					var currentBubbleListeners = $es4.$$coerce($es4.$$get($es4.$$call(currentTarget, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'EventDispatcherScope', '$_listeners', $es4.$$get(event, $$this, $$thisp, 'type')), Array);
					if (currentBubbleListeners && $es4.$$get(currentBubbleListeners, $$this, $$thisp, 'length'))
					{
						event = $es4.$$coerce($es4.$$call(properties, $$this, $$thisp, '$_withTarget', [event, target]), Event);
						properties = $es4.$$get($es4.$$call(event, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'EventScope');
						$es4.$$set(properties, $$this, $$thisp, '$_eventPhase', $es4.$$get(EventPhase, $$this, $$thisp, 'BUBBLING_PHASE'), '=');
						$es4.$$set($es4.$$call(event, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'EventScope', '$_currentTarget', currentTarget, '=');
						$es4.$$call(EventDispatcher, $$this, $$thisp, '$_processListeners', [event, currentBubbleListeners]);
						if ($es4.$$get(properties, $$this, $$thisp, '$_propagationStopped') || $es4.$$get(properties, $$this, $$thisp, '$_immediatePropagationStopped'))
						{
							break;
						}
					}
					index++;
				}
			}
			properties = $es4.$$get($es4.$$call(event, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'TLScope');
			return $es4.$$coerce(!$es4.$$call(properties, $$this, $$thisp, 'isDefaultPrevented', $es4.$$EMPTY_ARRAY), Boolean);
		}));

		//method
		$es4.$$public_function('hasEventListener', $$thisp, (function ($$$$type)
		{
			//set default parameter values
			var type = $es4.$$coerce($$$$type, String);

			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'EventDispatcherScope', '$_listeners', type), Boolean);
		}));

		//method
		$es4.$$public_function('removeEventListener', $$thisp, (function ($$$$type, $$$$listener, $$$$useCapture)
		{
			//set default parameter values
			var type = $es4.$$coerce($$$$type, String);
			var listener = $es4.$$coerce($$$$listener, Function);
			var useCapture = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$useCapture, Boolean);

			if (useCapture)
			{
				trace('Warning: useCapture not supported in EventDispatacher removeEventListener');
			}
			if (type == $es4.$$get(Event, $$this, $$thisp, 'ENTER_FRAME'))
			{
				$es4.$$call(Stage, $$this, $$thisp, '$__removeEnterFrameListener', [$$this, listener]);
				return;
			}
			var listenersByType = $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'EventDispatcherScope', '$_listeners');
			var listeners = $es4.$$coerce($es4.$$get(listenersByType, $$this, $$thisp, type), Array);
			if (!listeners)
			{
				return;
			}
			for (var i = $es4.$$get(listeners, $$this, $$thisp, 'length'); i--;)
			{
				if ($es4.$$get(listeners, $$this, $$thisp, i, 'method') != listener)
				{
					continue;
				}
				if ($es4.$$get(listeners, $$this, $$thisp, 'length') == 1)
				{
					$es4.$$delete(listenersByType, $$this, $$thisp, type);
				}
				else
				{
					$es4.$$call(listeners, $$this, $$thisp, 'splice', [i, 1]);
				}
			}
		}));

		//method
		$es4.$$public_function('willTrigger', $$thisp, (function ($$$$type)
		{
			//set default parameter values
			var type = $es4.$$coerce($$$$type, String);

			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'EventDispatcherScope', '$_listeners', type), Boolean);
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(EventDispatcher, {IMPLEMENTS:['flash.events.IEventDispatcher']}, 'flash.events::EventDispatcher');
})();
//flash.events.EventDispatcher


//flash.display3D.Context3DClearMask
$es4.$$package('flash.display3D').Context3DClearMask = function () { throw new Error('Use of unimplemented class: Context3DClearMask'); }
//flash.display3D.Context3DClearMask


//flash.display.ShaderPrecision
$es4.$$package('flash.display').ShaderPrecision = function () { throw new Error('Use of unimplemented class: ShaderPrecision'); }
//flash.display.ShaderPrecision


//flash.media.SoundLoaderContext
$es4.$$package('flash.media').SoundLoaderContext = function () { throw new Error('Use of unimplemented class: SoundLoaderContext'); }
//flash.media.SoundLoaderContext


//flash.display.JointStyle
$es4.$$package('flash.display').JointStyle = function () { throw new Error('Use of unimplemented class: JointStyle'); }
//flash.display.JointStyle


//flash.system.TouchscreenType
$es4.$$package('flash.system').TouchscreenType = function () { throw new Error('Use of unimplemented class: TouchscreenType'); }
//flash.system.TouchscreenType


//flash.net.NetStreamPlayTransitions
$es4.$$package('flash.net').NetStreamPlayTransitions = function () { throw new Error('Use of unimplemented class: NetStreamPlayTransitions'); }
//flash.net.NetStreamPlayTransitions


//flash.text.engine.FontDescription
$es4.$$package('flash.text.engine').FontDescription = function () { throw new Error('Use of unimplemented class: FontDescription'); }
//flash.text.engine.FontDescription


//flash.globalization.DateTimeFormatter
$es4.$$package('flash.globalization').DateTimeFormatter = function () { throw new Error('Use of unimplemented class: DateTimeFormatter'); }
//flash.globalization.DateTimeFormatter


//flash.text.engine.ContentElement
$es4.$$package('flash.text.engine').ContentElement = function () { throw new Error('Use of unimplemented class: ContentElement'); }
//flash.text.engine.ContentElement


//flash.ui.Mouse
$es4.$$package('flash.ui').Mouse = (function ()
{
	//imports
	var MouseCursorData;
	var MouseCursor;

	//properties
	$es4.$$private_property('_cursor', Mouse, String);

	//class initializer
	Mouse.$$cinit = (function ()
	{
		Mouse.$$cinit = undefined;

		//initialize imports
		MouseCursorData = $es4.$$['flash.ui'].MouseCursorData;
		MouseCursor = $es4.$$['flash.ui'].MouseCursor;

		//initialize properties
		Mouse._cursor = $es4.$$get(MouseCursor, null, null, 'AUTO');
	});

	//method
	$es4.$$public_function('hide', Mouse, (function ()
	{
		if (Mouse.$$cinit !== undefined) Mouse.$$cinit();

		throw $es4.$$primitive(new (Error)('Mouse: attempted call to an unimplemented function "hide"'));
	}));

	//method
	$es4.$$public_function('registerCursor', Mouse, (function ($$$$name, $$$$cursor)
	{
		if (Mouse.$$cinit !== undefined) Mouse.$$cinit();

		//set default parameter values
		var name = $es4.$$coerce($$$$name, String);
		var cursor = $es4.$$coerce($$$$cursor, MouseCursorData);

		throw $es4.$$primitive(new (Error)('Mouse: attempted call to an unimplemented function "registerCursor"'));
	}));

	//method
	$es4.$$public_function('show', Mouse, (function ()
	{
		if (Mouse.$$cinit !== undefined) Mouse.$$cinit();

		throw $es4.$$primitive(new (Error)('Mouse: attempted call to an unimplemented function "show"'));
	}));

	//method
	$es4.$$public_function('unregisterCursor', Mouse, (function ($$$$name)
	{
		if (Mouse.$$cinit !== undefined) Mouse.$$cinit();

		//set default parameter values
		var name = $es4.$$coerce($$$$name, String);

		throw $es4.$$primitive(new (Error)('Mouse: attempted call to an unimplemented function "unregisterCursor"'));
	}));

	//accessor
	$es4.$$public_accessor('cursor', Mouse, (function ()
	{
		if (Mouse.$$cinit !== undefined) Mouse.$$cinit();

		return $es4.$$get(Mouse, null, null, '_cursor');
	}), (function ($$$$value)
	{
		if (Mouse.$$cinit !== undefined) Mouse.$$cinit();

		//set default parameter values
		var value = $es4.$$coerce($$$$value, String);

		if ($es4.$$get(Mouse, null, null, '_cursor') !== $es4.$$get(MouseCursor, null, null, 'AUTO'))
		{
			$es4.$$call(document, null, null, 'body', 'classList', 'remove', [$es4.$$get(Mouse, null, null, '_cursor')]);
		}
		$es4.$$set(Mouse, null, null, '_cursor', value, '=');
		if (value === $es4.$$get(MouseCursor, null, null, 'AUTO'))
		{
			return;
		}
		$es4.$$call(document, null, null, 'body', 'classList', 'add', [value]);
	}));

	//accessor
	$es4.$$public_accessor('supportsCursor', Mouse, (function ()
	{
		if (Mouse.$$cinit !== undefined) Mouse.$$cinit();

		throw $es4.$$primitive(new (Error)('Mouse: attempted call to an unimplemented function "supportsCursor"'));
	}), null);

	//accessor
	$es4.$$public_accessor('supportsNativeCursor', Mouse, (function ()
	{
		if (Mouse.$$cinit !== undefined) Mouse.$$cinit();

		throw $es4.$$primitive(new (Error)('Mouse: attempted call to an unimplemented function "supportsNativeCursor"'));
	}), null);

	function Mouse()
	{
		//initialize class if not initialized
		if (Mouse.$$cinit !== undefined) Mouse.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof Mouse) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Mouse) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Mouse: attempted call to an unimplemented constructor'));
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(Mouse, null, 'flash.ui::Mouse');
})();
//flash.ui.Mouse


//flash.events.AsyncErrorEvent
$es4.$$package('flash.events').AsyncErrorEvent = (function ()
{
	//imports
	var Event;
	var AsyncErrorEvent;
	var ErrorEvent;

	//properties
	AsyncErrorEvent.ASYNC_ERROR = "asyncError";

	//class initializer
	AsyncErrorEvent.$$cinit = (function ()
	{
		AsyncErrorEvent.$$cinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;
		ErrorEvent = $es4.$$['flash.events'].ErrorEvent;
	});

	function AsyncErrorEvent()
	{
		//initialize class if not initialized
		if (AsyncErrorEvent.$$cinit !== undefined) AsyncErrorEvent.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof AsyncErrorEvent) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], AsyncErrorEvent) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$public_property('error', $$thisp, Error);

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$type, $$$$bubbles, $$$$cancelable, $$$$text, $$$$error)
		{
			//set default parameter values
			var type = $es4.$$coerce($$$$type, String);
			var bubbles = (1 > arguments.length - 1) ? false : $es4.$$coerce($$$$bubbles, Boolean);
			var cancelable = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$cancelable, Boolean);
			var text = (3 > arguments.length - 1) ? "" : $es4.$$coerce($$$$text, String);
			var error = (4 > arguments.length - 1) ? null : $es4.$$coerce($$$$error, Error);

			$es4.$$super($$thisp).$$z(type, bubbles, cancelable, text, (error) ? $es4.$$get(error, $$this, $$thisp, 'errorID') : 0);
			$es4.$$set($$this, $$this, $$thisp, 'error', error, '=');
		}));

		//method
		$es4.$$public_function('clone', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$primitive(new (AsyncErrorEvent)($es4.$$get($$this, $$this, $$thisp, 'type'), $es4.$$get($$this, $$this, $$thisp, 'bubbles'), $es4.$$get($$this, $$this, $$thisp, 'cancelable'), $es4.$$get($$this, $$this, $$thisp, 'text'), $es4.$$get($$this, $$this, $$thisp, 'error'))), Event);
		}));

		//method
		$es4.$$public_function('toString', $$thisp, (function ()
		{
			return $es4.$$call($$this, $$this, $$thisp, 'formatToString', ['AsyncErrorEvent', 'type', 'bubbles', 'cancelable', 'text', 'error']);
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(AsyncErrorEvent, {EXTENDS:'flash.events.ErrorEvent'}, 'flash.events::AsyncErrorEvent');
})();
//flash.events.AsyncErrorEvent


//flash.sampler.Accelerometer
$es4.$$package('flash.sampler').Accelerometer = function () { throw new Error('Use of unimplemented class: Accelerometer'); }
//flash.sampler.Accelerometer


//flash.events.SoftKeyboardTrigger
$es4.$$package('flash.events').SoftKeyboardTrigger = function () { throw new Error('Use of unimplemented class: SoftKeyboardTrigger'); }
//flash.events.SoftKeyboardTrigger


//flash.ui.ContextMenu
$es4.$$package('flash.ui').ContextMenu = function () { throw new Error('Use of unimplemented class: ContextMenu'); }
//flash.ui.ContextMenu


//flash.display.GraphicsEndFill
$es4.$$package('flash.display').GraphicsEndFill = function () { throw new Error('Use of unimplemented class: GraphicsEndFill'); }
//flash.display.GraphicsEndFill


//flash.display3D.Context3DCompareMode
$es4.$$package('flash.display3D').Context3DCompareMode = (function ()
{
	//class initializer
	Context3DCompareMode.$$cinit = (function ()
	{
		Context3DCompareMode.$$cinit = undefined;

	});

	function Context3DCompareMode()
	{
		//initialize class if not initialized
		if (Context3DCompareMode.$$cinit !== undefined) Context3DCompareMode.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof Context3DCompareMode) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Context3DCompareMode) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(Context3DCompareMode, null, 'flash.display3D::Context3DCompareMode');
})();
//flash.display3D.Context3DCompareMode


//flash.display3D.Context3DBlendFactor
$es4.$$package('flash.display3D').Context3DBlendFactor = function () { throw new Error('Use of unimplemented class: Context3DBlendFactor'); }
//flash.display3D.Context3DBlendFactor


//flash.text.engine.EastAsianJustifier
$es4.$$package('flash.text.engine').EastAsianJustifier = function () { throw new Error('Use of unimplemented class: EastAsianJustifier'); }
//flash.text.engine.EastAsianJustifier


//flash.display3D.Context3DStencilAction
$es4.$$package('flash.display3D').Context3DStencilAction = function () { throw new Error('Use of unimplemented class: Context3DStencilAction'); }
//flash.display3D.Context3DStencilAction


//flash.security.X509Certificate
$es4.$$package('flash.security').X509Certificate = function () { throw new Error('Use of unimplemented class: X509Certificate'); }
//flash.security.X509Certificate


//flash.display.TriangleCulling
$es4.$$package('flash.display').TriangleCulling = function () { throw new Error('Use of unimplemented class: TriangleCulling'); }
//flash.display.TriangleCulling


//flash.media.Sound
$es4.$$package('flash.media').Sound = (function ()
{
	//imports
	var Event;
	var EventDispatcher;
	var ProgressEvent;
	var ID3Info;
	var SoundChannel;
	var SoundLoaderContext;
	var SoundTransform;
	var URLRequest;
	var ByteArray;
	var Browser;

	//class initializer
	Sound.$$cinit = (function ()
	{
		Sound.$$cinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;
		EventDispatcher = $es4.$$['flash.events'].EventDispatcher;
		ProgressEvent = $es4.$$['flash.events'].ProgressEvent;
		ID3Info = $es4.$$['flash.media'].ID3Info;
		SoundChannel = $es4.$$['flash.media'].SoundChannel;
		SoundLoaderContext = $es4.$$['flash.media'].SoundLoaderContext;
		SoundTransform = $es4.$$['flash.media'].SoundTransform;
		URLRequest = $es4.$$['flash.net'].URLRequest;
		ByteArray = $es4.$$['flash.utils'].ByteArray;
		Browser = $es4.$$['browser'].Browser;
	});

	function Sound()
	{
		//initialize class if not initialized
		if (Sound.$$cinit !== undefined) Sound.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof Sound) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Sound) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$protected_property('$_xmlHttpRequest', $$thisp, Object);
		$es4.$$protected_property('$_stream', $$thisp, URLRequest);
		$es4.$$protected_property('$_bytesLoaded', $$thisp, uint);
		$es4.$$protected_property('$_bytesTotal', $$thisp, int);
		$es4.$$protected_property('$_duration', $$thisp, Number);
		$es4.$$public_property('$__soundChannel', $$thisp, SoundChannel);
		$es4.$$public_property('$__audioContext', $$thisp, Object);
		$es4.$$public_property('$__audioSourceBuffer', $$thisp, Object);
		$es4.$$public_property('$__base64String', $$thisp, String);
		$es4.$$public_property('$__waitForAudioSourceBuffer', $$thisp);

		//initializer
		$es4.$$iinit($$thisp, (function ()
		{
			//initialize properties
			$es4.$$set($$this, $$this, $$thisp, '$_bytesLoaded', 0, '=');
			$es4.$$set($$this, $$this, $$thisp, '$_bytesTotal', 0, '=');
			$es4.$$set($$this, $$this, $$thisp, '$_duration', 0, '=');
			$es4.$$set($$this, $$this, $$thisp, '$__waitForAudioSourceBuffer', false, '=');
		}));

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$stream, $$$$context)
		{
			//set default parameter values
			var stream = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$stream, URLRequest);
			var context = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$context, SoundLoaderContext);

			$es4.$$super($$thisp).$$z();
			if (stream)
			{
				$es4.$$call($$this, $$this, $$thisp, 'load', [stream, context]);
			}
		}));

		//method
		$es4.$$public_function('load', $$thisp, (function ($$$$stream, $$$$context)
		{
			//set default parameter values
			var stream = $es4.$$coerce($$$$stream, URLRequest);
			var context = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$context, SoundLoaderContext);

			if (!stream || !$es4.$$get(stream, $$this, $$thisp, 'url'))
			{
				throw $es4.$$primitive(new (TypeError)('stream or stream.url is null'));
			}
			if ($es4.$$get($$this, $$this, $$thisp, '$_xmlHttpRequest'))
			{
				throw $es4.$$primitive(new (Error)('Sound: load in progress'));
			}
			$es4.$$set($$this, $$this, $$thisp, '$_stream', stream, '=');
			var onLoad = $es4.$$coerce(function ($$$$event) 
			{
				//set default parameter values
				var event = $es4.$$coerce($$$$event, Object);

				if (!$es4.$$get($$this, $$this, $$thisp, '$_xmlHttpRequest'))
				{
					return;
				}
				trace('sound loaded');
				var arrayBuffer = $es4.$$get($$this, $$this, $$thisp, '$_xmlHttpRequest', 'response');
				$es4.$$set($$this, $$this, $$thisp, '$_xmlHttpRequest', 'onprogress', null, '=');
				$es4.$$set($$this, $$this, $$thisp, '$_xmlHttpRequest', 'onload', null, '=');
				$es4.$$set($$this, $$this, $$thisp, '$_xmlHttpRequest', null, '=');
				if ($es4.$$get(window, $$this, $$thisp, 'AudioContext') !== undefined || $es4.$$get(window, $$this, $$thisp, 'webkitAudioContext') !== undefined)
				{
					var audioContext = $es4.$$call(Browser, $$this, $$thisp, 'getNewAudioContext', $es4.$$EMPTY_ARRAY);
					if (audioContext)
					{
						trace('audio context found');
						$es4.$$set($$this, $$this, $$thisp, '$__audioContext', audioContext, '=');
						$es4.$$call(audioContext, $$this, $$thisp, 'decodeAudioData', [arrayBuffer, $es4.$$get($$thisp, $$this, $$thisp, 'onDecodeAudioDataSuccess'), $es4.$$get($$thisp, $$this, $$thisp, 'onDecodeAudioDataFailure')]);
						return;
					}
				}
				$es4.$$call($$thisp, $$this, $$thisp, 'calculateDuration', [arrayBuffer]);
				$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (Event)($es4.$$get(Event, $$this, $$thisp, 'COMPLETE')))]);
			}
, Function);
			var onProgress = $es4.$$coerce(function ($$$$event) 
			{
				//set default parameter values
				var event = $es4.$$coerce($$$$event, Object);

				if (!$es4.$$get(event, $$this, $$thisp, 'lengthComputable'))
				{
					return;
				}
				$es4.$$set($$this, $$this, $$thisp, '$_bytesLoaded', $es4.$$get(event, $$this, $$thisp, 'loaded'), '=');
				$es4.$$set($$this, $$this, $$thisp, '$_bytesTotal', $es4.$$get(event, $$this, $$thisp, 'total'), '=');
				$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (ProgressEvent)($es4.$$get(ProgressEvent, $$this, $$thisp, 'PROGRESS'), false, false, $es4.$$get($$this, $$this, $$thisp, '$_bytesLoaded'), $es4.$$get($$this, $$this, $$thisp, '$_bytesTotal')))]);
			}
, Function);
			trace('loading sound');
			$es4.$$set($$this, $$this, $$thisp, '$_xmlHttpRequest', $es4.$$call(Browser, $$this, $$thisp, 'getNewXMLHttpRequest', $es4.$$EMPTY_ARRAY), '=');
			$es4.$$set($$this, $$this, $$thisp, '$_xmlHttpRequest', 'onload', onLoad, '=');
			$es4.$$set($$this, $$this, $$thisp, '$_xmlHttpRequest', 'onprogress', onProgress, '=');
			$es4.$$call($$this, $$this, $$thisp, '$_xmlHttpRequest', 'open', ['GET', $es4.$$get(stream, $$this, $$thisp, 'url'), true]);
			$es4.$$set($$this, $$this, $$thisp, '$_xmlHttpRequest', 'responseType', 'arraybuffer', '=');
			$es4.$$call($$this, $$this, $$thisp, '$_xmlHttpRequest', 'overrideMimeType', ['text/plain; charset=x-user-defined']);
			$es4.$$call($$this, $$this, $$thisp, '$_xmlHttpRequest', 'send', [null]);
		}));

		//method
		$es4.$$private_function('calculateDuration', $$thisp, (function ($$$$arrayBuffer)
		{
			//set default parameter values
			var arrayBuffer = $es4.$$coerce($$$$arrayBuffer, Object);

			var bytes = $es4.$$call(Browser, $$this, $$thisp, 'getNewUint8Array', [arrayBuffer]);
			var bytesOffset = 0;
			if ($es4.$$get(bytes, $$this, $$thisp, 0) == 73 && $es4.$$get(bytes, $$this, $$thisp, 1) == 68 && $es4.$$get(bytes, $$this, $$thisp, 2) == 51)
			{
				if ($es4.$$get(bytes, $$this, $$thisp, 3) != 3)
				{
					throw $es4.$$primitive(new (Error)('invalid mp3 id3 major format, expected 3, got: ' + $es4.$$get(bytes, $$this, $$thisp, 3)));
				}
				bytesOffset = $es4.$$coerce(($es4.$$get(bytes, $$this, $$thisp, 6) * 2097152 + $es4.$$get(bytes, $$this, $$thisp, 7) * 16384 + $es4.$$get(bytes, $$this, $$thisp, 8) * 128 + $es4.$$get(bytes, $$this, $$thisp, 9)) + 10, int);
			}
			var preFrameSyncBytesOffset = bytesOffset;
			var byte2 = $es4.$$coerce($es4.$$get(bytes, $$this, $$thisp, bytesOffset + 1), int);
			if ($es4.$$get(bytes, $$this, $$thisp, bytesOffset++) != 255)
			{
				throw $es4.$$primitive(new (Error)('invalid mp3 format. please use cbr mp3s, only'));
			}
			var version = $es4.$$coerce(($es4.$$get(bytes, $$this, $$thisp, bytesOffset) & 24) >> 3, int);
			var layer = $es4.$$coerce(($es4.$$get(bytes, $$this, $$thisp, bytesOffset) & 6) >> 1, int);
			bytesOffset++;
			var bitrateIndex = $es4.$$coerce($es4.$$get(bytes, $$this, $$thisp, bytesOffset) >> 4, int);
			var bitrateLookupTable = [0, 0, 0, 0, 0, 32, 32, 32, 32, 8, 64, 48, 40, 48, 16, 96, 56, 48, 56, 24, 128, 64, 56, 64, 32, 160, 80, 64, 80, 40, 192, 96, 80, 96, 48, 224, 112, 96, 112, 56, 256, 128, 112, 128, 64, 288, 160, 128, 144, 80, 320, 192, 160, 160, 96, 352, 224, 192, 176, 112, 384, 256, 224, 192, 128, 416, 320, 256, 224, 144, 448, 384, 320, 256, 160, 0, 0, 0, 0, 0];
			var row = (bitrateIndex * 5);
			var column = 0;
			if (version == 3 && layer == 3)
			{
				column = 0;
			}
			else if (version == 3 && layer == 2)
			{
				column = 1;
			}
			else if (version == 3 && layer == 1)
			{
				column = 2;
			}
			else if ((version == 2 || version == 0) && layer == 3)
			{
				column = 3;
			}
			else if ((version == 2 || version == 0) && (layer == 2 || layer == 1))
			{
				column = 4;
			}
			else
			{
				throw $es4.$$primitive(new (Error)('invalid mp3 given'));
			}
			if (!$es4.$$get(bitrateLookupTable, $$this, $$thisp, row + column))
			{
				throw $es4.$$primitive(new (Error)('invalid mp3 given'));
			}
			var bitrate = $es4.$$coerce($es4.$$get(bitrateLookupTable, $$this, $$thisp, row + column), int);
			var samplerateIndex = $es4.$$coerce(($es4.$$get(bytes, $$this, $$thisp, bytesOffset) & 12) >> 2, int);
			var samplerateLookupTable = [44100, 22050, 11025, 48000, 24000, 12000, 32000, 16000, 8000, 0, 0, 0];
			row = (samplerateIndex * 3);
			if (version == 3)
			{
				column = 0;
			}
			else if (version == 2)
			{
				column = 1;
			}
			else if (version == 0)
			{
				column = 2;
			}
			else
			{
				throw $es4.$$primitive(new (Error)('invalid mp3 given'));
			}
			if (!$es4.$$get(samplerateLookupTable, $$this, $$thisp, row + column))
			{
				throw $es4.$$primitive(new (Error)('invalid mp3 given'));
			}
			var samplerate = $es4.$$coerce($es4.$$get(samplerateLookupTable, $$this, $$thisp, row + column), int);
			var framesamplesLookupTable = [0, 576, 1152, 384, 0, 0, 0, 0, 0, 576, 1152, 384, 0, 1152, 1152, 384];
			var framesamples = $es4.$$coerce($es4.$$get(framesamplesLookupTable, $$this, $$thisp, (version * 4) + layer), int);
			var slotSizeLookupTable = [0, 1, 1, 4];
			var baseFrameSize = $es4.$$coerce($es4.$$call(Math, $$this, $$thisp, 'floor', [(((framesamples / 8) * (bitrate * 1000)) / samplerate)]), int);
			bytesOffset = preFrameSyncBytesOffset;
			var byteOffset = bytesOffset;
			var frames = 0;
			while ($es4.$$get(bytes, $$this, $$thisp, byteOffset) == 255 && $es4.$$get(bytes, $$this, $$thisp, byteOffset + 1) == byte2)
			{
				frames++;
				var pad = $es4.$$coerce(($es4.$$get(bytes, $$this, $$thisp, byteOffset + 2) & 2) >> 1, int);
				var frameSize = $es4.$$coerce(baseFrameSize + ((pad) ? $es4.$$get(slotSizeLookupTable, $$this, $$thisp, layer) : 0), int);
				byteOffset += frameSize;
			}
			$es4.$$set($$this, $$this, $$thisp, '$_duration', ((framesamples / samplerate) * 1000) * (frames - 1), '=');
			trace('reported audio duration: ' + $es4.$$get($$this, $$this, $$thisp, '$_duration'));
		}));

		//method
		$es4.$$private_function('onDecodeAudioDataSuccess', $$thisp, (function ($$$$buffer)
		{
			//set default parameter values
			var buffer = $$$$buffer;

			trace('audio context decode data success');
			$es4.$$set($$this, $$this, $$thisp, '$__audioSourceBuffer', buffer, '=');
			$es4.$$set($$this, $$this, $$thisp, '$_duration', $es4.$$get(buffer, $$this, $$thisp, 'duration') * 1000, '=');
			$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (Event)($es4.$$get(Event, $$this, $$thisp, 'COMPLETE')))]);
		}));

		//method
		$es4.$$private_function('onDecodeAudioDataFailure', $$thisp, (function ($$$$error)
		{
			//set default parameter values
			var error = $$$$error;

			trace("error (decodeAudioData): " + error);
			$es4.$$set($$this, $$this, $$thisp, '$__audioContext', null, '=');
			$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (Event)($es4.$$get(Event, $$this, $$thisp, 'COMPLETE')))]);
		}));

		//method
		$es4.$$public_function('play', $$thisp, (function ($$$$startTime, $$$$loops, $$$$sndTransform)
		{
			//set default parameter values
			var startTime = (0 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$startTime, Number);
			var loops = (1 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$loops, int);
			var sndTransform = (2 > arguments.length - 1) ? null : $es4.$$coerce($$$$sndTransform, SoundTransform);

			if (!$es4.$$get($$this, $$this, $$thisp, '$_duration'))
			{
				throw $es4.$$primitive(new (Error)('Sound not loaded'));
			}
			return $es4.$$call(SoundChannel, $$this, $$thisp, '$__getNewSoundChannel', [$$this, startTime, loops, sndTransform]);
		}));

		//method
		$es4.$$public_function('close', $$thisp, (function ()
		{
			var soundChannel = $es4.$$get($$this, $$this, $$thisp, '$__soundChannel');
			if (soundChannel)
			{
				$es4.$$call(soundChannel, $$this, $$thisp, 'stop', $es4.$$EMPTY_ARRAY);
			}
			$es4.$$set($$this, $$this, $$thisp, '$__audioContext', null, '=');
		}));

		//method
		$es4.$$public_function('extract', $$thisp, (function ($$$$target, $$$$length, $$$$startPosition)
		{
			//set default parameter values
			var target = $es4.$$coerce($$$$target, ByteArray);
			var length = $es4.$$coerce($$$$length, Number);
			var startPosition = (2 > arguments.length - 1) ? -1 : $es4.$$coerce($$$$startPosition, Number);

			throw $es4.$$primitive(new (Error)('Sound: attempted call to an unimplemented function "extract"'));
		}));

		//method
		$es4.$$public_function('loadCompressedDataFromByteArray', $$thisp, (function ($$$$byteArray, $$$$bytesLength)
		{
			//set default parameter values
			var byteArray = $es4.$$coerce($$$$byteArray, ByteArray);
			var bytesLength = $es4.$$coerce($$$$bytesLength, uint);

			var arrayBuffer = $es4.$$call(byteArray, $$this, $$thisp, '$__getArrayBuffer', $es4.$$EMPTY_ARRAY);
			if ($es4.$$get(window, $$this, $$thisp, 'AudioContext') !== undefined || $es4.$$get(window, $$this, $$thisp, 'webkitAudioContext') !== undefined)
			{
				var audioContext = $es4.$$call(Browser, $$this, $$thisp, 'getNewAudioContext', $es4.$$EMPTY_ARRAY);
				if (audioContext)
				{
					$es4.$$set($$this, $$this, $$thisp, '$__waitForAudioSourceBuffer', true, '=');
					$es4.$$set($$this, $$this, $$thisp, '$__audioContext', audioContext, '=');
					$es4.$$call(audioContext, $$this, $$thisp, 'decodeAudioData', [arrayBuffer, function ($$$$buffer) 
{
				//set default parameter values
				var buffer = $$$$buffer;

	$es4.$$set($$this, $$this, $$thisp, '$__audioSourceBuffer', buffer, '=');
	$es4.$$set($$this, $$this, $$thisp, '$_duration', $es4.$$get(buffer, $$this, $$thisp, 'duration') * 1000, '=');
	var callback = null;
	if ($es4.$$is($es4.$$get($$this, $$this, $$thisp, '$__waitForAudioSourceBuffer'), Function))
	{
		callback = $es4.$$coerce($es4.$$get($$this, $$this, $$thisp, '$__waitForAudioSourceBuffer'), Function);
	}
	$es4.$$set($$this, $$this, $$thisp, '$__waitForAudioSourceBuffer', false, '=');
	if (callback !== null)
	{
		callback();
	}
}
, function ($$$$error) 
{
				//set default parameter values
				var error = $$$$error;

	trace("error decoding Audio Data: " + error);
}
]);
					return;
				}
			}
			$es4.$$call($$thisp, $$this, $$thisp, 'calculateDuration', [arrayBuffer]);
			var bytes = $es4.$$call(Browser, $$this, $$thisp, 'getNewUint8Array', [arrayBuffer]);
			var binary = '';
			var length = $es4.$$coerce($es4.$$get(bytes, $$this, $$thisp, 'byteLength'), Number);
			if (length != bytesLength)
			{
				throw $es4.$$primitive(new (Error)('Sound: loadCompressedDataFromByteArray does not support a bytesLength value that differs from the ByteArray length at this time'));
			}
			for (var i = 0; i < length; i++)
			{
				binary += $es4.$$call(String, $$this, $$thisp, 'fromCharCode', [$es4.$$get(bytes, $$this, $$thisp, i)]);
			}
			$es4.$$set($$this, $$this, $$thisp, '$__base64String', 'data:audio/mp3;base64,' + $es4.$$call(window, $$this, $$thisp, 'btoa', [binary]), '=');
		}));

		//method
		$es4.$$public_function('loadPCMFromByteArray', $$thisp, (function ($$$$bytes, $$$$samples, $$$$format, $$$$stereo, $$$$sampleRate)
		{
			//set default parameter values
			var bytes = $es4.$$coerce($$$$bytes, ByteArray);
			var samples = $es4.$$coerce($$$$samples, uint);
			var format = (2 > arguments.length - 1) ? "float" : $es4.$$coerce($$$$format, String);
			var stereo = (3 > arguments.length - 1) ? true : $es4.$$coerce($$$$stereo, Boolean);
			var sampleRate = (4 > arguments.length - 1) ? 44100 : $es4.$$coerce($$$$sampleRate, Number);

			throw $es4.$$primitive(new (Error)('Sound: attempted call to an unimplemented function "loadPCMFromByteArray"'));
		}));

		//accessor
		$es4.$$public_accessor('bytesLoaded', $$thisp, (function ()
		{
			return $es4.$$get($$this, $$this, $$thisp, '$_bytesLoaded');
		}), null);

		//accessor
		$es4.$$public_accessor('bytesTotal', $$thisp, (function ()
		{
			return $es4.$$get($$this, $$this, $$thisp, '$_bytesTotal');
		}), null);

		//accessor
		$es4.$$public_accessor('url', $$thisp, (function ()
		{
			return $es4.$$get($$this, $$this, $$thisp, '$_stream', 'url');
		}), null);

		//accessor
		$es4.$$public_accessor('id3', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Sound: attempted call to an unimplemented function "id3"'));
		}), null);

		//accessor
		$es4.$$public_accessor('isBuffering', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Sound: attempted call to an unimplemented function "isBuffering"'));
		}), null);

		//accessor
		$es4.$$public_accessor('isURLInaccessible', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Sound: attempted call to an unimplemented function "isURLInaccessible"'));
		}), null);

		//accessor
		$es4.$$public_accessor('length', $$thisp, (function ()
		{
			return $es4.$$get($$this, $$this, $$thisp, '$_duration');
		}), null);

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(Sound, {EXTENDS:'flash.events.EventDispatcher'}, 'flash.media::Sound');
})();
//flash.media.Sound


//flash.text.engine.RenderingMode
$es4.$$package('flash.text.engine').RenderingMode = function () { throw new Error('Use of unimplemented class: RenderingMode'); }
//flash.text.engine.RenderingMode


//flash.system.SecurityPanel
$es4.$$package('flash.system').SecurityPanel = function () { throw new Error('Use of unimplemented class: SecurityPanel'); }
//flash.system.SecurityPanel


//flash.geom.PerspectiveProjection
$es4.$$package('flash.geom').PerspectiveProjection = function () { throw new Error('Use of unimplemented class: PerspectiveProjection'); }
//flash.geom.PerspectiveProjection


//flash.display.SWFVersion
$es4.$$package('flash.display').SWFVersion = function () { throw new Error('Use of unimplemented class: SWFVersion'); }
//flash.display.SWFVersion


//flash.events.SecurityErrorEvent
$es4.$$package('flash.events').SecurityErrorEvent = (function ()
{
	//imports
	var Event;
	var SecurityErrorEvent;
	var ErrorEvent;

	//properties
	SecurityErrorEvent.SECURITY_ERROR = "securityError";

	//class initializer
	SecurityErrorEvent.$$cinit = (function ()
	{
		SecurityErrorEvent.$$cinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;
		ErrorEvent = $es4.$$['flash.events'].ErrorEvent;
	});

	function SecurityErrorEvent()
	{
		//initialize class if not initialized
		if (SecurityErrorEvent.$$cinit !== undefined) SecurityErrorEvent.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof SecurityErrorEvent) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], SecurityErrorEvent) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$type, $$$$bubbles, $$$$cancelable, $$$$text, $$$$id)
		{
			//set default parameter values
			var type = $es4.$$coerce($$$$type, String);
			var bubbles = (1 > arguments.length - 1) ? false : $es4.$$coerce($$$$bubbles, Boolean);
			var cancelable = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$cancelable, Boolean);
			var text = (3 > arguments.length - 1) ? "" : $es4.$$coerce($$$$text, String);
			var id = (4 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$id, int);

			$es4.$$super($$thisp).$$z(type, bubbles, cancelable, text, id);
		}));

		//method
		$es4.$$public_function('clone', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$primitive(new (SecurityErrorEvent)($es4.$$get($$this, $$this, $$thisp, 'type'), $es4.$$get($$this, $$this, $$thisp, 'bubbles'), $es4.$$get($$this, $$this, $$thisp, 'cancelable'), $es4.$$get($$this, $$this, $$thisp, 'text'), $es4.$$get($$this, $$this, $$thisp, 'errorID'))), Event);
		}));

		//method
		$es4.$$public_function('toString', $$thisp, (function ()
		{
			return $es4.$$call($$this, $$this, $$thisp, 'formatToString', ['SecurityErrorEvent', 'bubbles', 'cancelable', 'text', 'errorID']);
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(SecurityErrorEvent, {EXTENDS:'flash.events.ErrorEvent'}, 'flash.events::SecurityErrorEvent');
})();
//flash.events.SecurityErrorEvent


//flash.events.TimerEvent
$es4.$$package('flash.events').TimerEvent = (function ()
{
	//imports
	var TimerEvent;
	var Event;

	//properties
	TimerEvent.TIMER = "timer";
	TimerEvent.TIMER_COMPLETE = "timerComplete";

	//class initializer
	TimerEvent.$$cinit = (function ()
	{
		TimerEvent.$$cinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;
	});

	function TimerEvent()
	{
		//initialize class if not initialized
		if (TimerEvent.$$cinit !== undefined) TimerEvent.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof TimerEvent) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], TimerEvent) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$type, $$$$bubbles, $$$$cancelable)
		{
			//set default parameter values
			var type = $es4.$$coerce($$$$type, String);
			var bubbles = (1 > arguments.length - 1) ? false : $es4.$$coerce($$$$bubbles, Boolean);
			var cancelable = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$cancelable, Boolean);

			$es4.$$super($$thisp).$$z(type, bubbles, cancelable);
		}));

		//method
		$es4.$$public_function('clone', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$primitive(new (TimerEvent)($es4.$$get($$this, $$this, $$thisp, 'type'), $es4.$$get($$this, $$this, $$thisp, 'bubbles'), $es4.$$get($$this, $$this, $$thisp, 'cancelable'))), Event);
		}));

		//method
		$es4.$$public_function('toString', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('TimerEvent: attempted call to an unimplemented function "toString"'));
		}));

		//method
		$es4.$$public_function('updateAfterEvent', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('TimerEvent: attempted call to an unimplemented function "updateAfterEvent"'));
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(TimerEvent, {EXTENDS:'flash.events.Event'}, 'flash.events::TimerEvent');
})();
//flash.events.TimerEvent


//flash.text.engine.ElementFormat
$es4.$$package('flash.text.engine').ElementFormat = function () { throw new Error('Use of unimplemented class: ElementFormat'); }
//flash.text.engine.ElementFormat


//flash.utils.Timer
$es4.$$package('flash.utils').Timer = (function ()
{
	//imports
	var EventDispatcher;
	var TimerEvent;

	//class initializer
	Timer.$$cinit = (function ()
	{
		Timer.$$cinit = undefined;

		//initialize imports
		EventDispatcher = $es4.$$['flash.events'].EventDispatcher;
		TimerEvent = $es4.$$['flash.events'].TimerEvent;
	});

	function Timer()
	{
		//initialize class if not initialized
		if (Timer.$$cinit !== undefined) Timer.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof Timer) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Timer) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('timer', $$thisp, Object);
		$es4.$$private_property('_delay', $$thisp, Number);
		$es4.$$private_property('_repeatCount', $$thisp, int);
		$es4.$$private_property('_currentCount', $$thisp, int);

		//initializer
		$es4.$$iinit($$thisp, (function ()
		{
			//initialize properties
			$es4.$$set($$this, $$this, $$thisp, 'timer', null, '=');
			$es4.$$set($$this, $$this, $$thisp, '_currentCount', 0, '=');
		}));

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$delay, $$$$repeatCount)
		{
			//set default parameter values
			var delay = $es4.$$coerce($$$$delay, Number);
			var repeatCount = (1 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$repeatCount, int);

			$es4.$$super($$thisp).$$z();

			$es4.$$set($$thisp, $$this, $$thisp, '_delay', delay, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_repeatCount', repeatCount, '=');
		}));

		//method
		$es4.$$public_function('reset', $$thisp, (function ()
		{
			$es4.$$call($$this, $$this, $$thisp, 'stop', $es4.$$EMPTY_ARRAY);
			$es4.$$set($$thisp, $$this, $$thisp, '_currentCount', 0, '=');
		}));

		//method
		$es4.$$public_function('start', $$thisp, (function ()
		{
			if ($es4.$$get($$thisp, $$this, $$thisp, 'timer'))
			{
				return;
			}
			$es4.$$set($$thisp, $$this, $$thisp, 'timer', $es4.$$call(window, $$this, $$thisp, 'setInterval', [$es4.$$get($$thisp, $$this, $$thisp, 'tick'), $es4.$$get($$thisp, $$this, $$thisp, '_delay')]), '=');
		}));

		//method
		$es4.$$public_function('stop', $$thisp, (function ()
		{
			if (!$es4.$$get($$thisp, $$this, $$thisp, 'timer'))
			{
				return;
			}
			$es4.$$call(window, $$this, $$thisp, 'clearInterval', [$es4.$$get($$thisp, $$this, $$thisp, 'timer')]);
			$es4.$$set($$thisp, $$this, $$thisp, 'timer', null, '=');
		}));

		//method
		$es4.$$private_function('tick', $$thisp, (function ()
		{
			if (!$es4.$$get($$thisp, $$this, $$thisp, 'timer'))
			{
				return;
			}
			$es4.$$set($$thisp, $$this, $$thisp, '_currentCount', 'prefix', '++');
			try
			{
				$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (TimerEvent)($es4.$$get(TimerEvent, $$this, $$thisp, 'TIMER')))]);
			}
			catch (e)
			{
				trace("ERROR", e);
			}
			$es4.$$call($$thisp, $$this, $$thisp, 'checkComplete', $es4.$$EMPTY_ARRAY);
		}));

		//method
		$es4.$$private_function('checkComplete', $$thisp, (function ()
		{
			if ($es4.$$get($$thisp, $$this, $$thisp, '_repeatCount') > 0 && $es4.$$get($$thisp, $$this, $$thisp, '_currentCount') >= $es4.$$get($$thisp, $$this, $$thisp, '_repeatCount'))
			{
				$es4.$$call($$this, $$this, $$thisp, 'stop', $es4.$$EMPTY_ARRAY);
				$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (TimerEvent)($es4.$$get(TimerEvent, $$this, $$thisp, 'TIMER_COMPLETE')))]);
			}
		}));

		//accessor
		$es4.$$public_accessor('currentCount', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_currentCount');
		}), null);

		//accessor
		$es4.$$public_accessor('delay', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_delay');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			$es4.$$set($$thisp, $$this, $$thisp, '_delay', value, '=');
			if ($es4.$$get($$thisp, $$this, $$thisp, 'timer'))
			{
				$es4.$$call($$this, $$this, $$thisp, 'stop', $es4.$$EMPTY_ARRAY);
				$es4.$$call($$this, $$this, $$thisp, 'start', $es4.$$EMPTY_ARRAY);
			}
		}));

		//accessor
		$es4.$$public_accessor('repeatCount', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_repeatCount');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, int);

			$es4.$$set($$thisp, $$this, $$thisp, '_repeatCount', value, '=');
			$es4.$$call($$thisp, $$this, $$thisp, 'checkComplete', $es4.$$EMPTY_ARRAY);
		}));

		//accessor
		$es4.$$public_accessor('running', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, 'timer') != null, Boolean);
		}), null);

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(Timer, {EXTENDS:'flash.events.EventDispatcher'}, 'flash.utils::Timer');
})();
//flash.utils.Timer


//flash.globalization.CollatorMode
$es4.$$package('flash.globalization').CollatorMode = function () { throw new Error('Use of unimplemented class: CollatorMode'); }
//flash.globalization.CollatorMode


//flash.net.ObjectEncoding
$es4.$$package('flash.net').ObjectEncoding = (function ()
{
	//imports
	var IDynamicPropertyWriter;

	//properties
	ObjectEncoding.AMF0 = 0;
	ObjectEncoding.AMF3 = 3;
	ObjectEncoding.DEFAULT = 3;

	//class initializer
	ObjectEncoding.$$cinit = (function ()
	{
		ObjectEncoding.$$cinit = undefined;

		//initialize imports
		IDynamicPropertyWriter = $es4.$$['flash.net'].IDynamicPropertyWriter;
	});

	//accessor
	$es4.$$public_accessor('dynamicPropertyWriter', ObjectEncoding, (function ()
	{
		if (ObjectEncoding.$$cinit !== undefined) ObjectEncoding.$$cinit();

		throw $es4.$$primitive(new (Error)('ObjectEncoding: attempted call to an unimplemented function "dynamicPropertyWriter"'));
	}), (function ($$$$object)
	{
		if (ObjectEncoding.$$cinit !== undefined) ObjectEncoding.$$cinit();

		//set default parameter values
		var object = $es4.$$coerce($$$$object, IDynamicPropertyWriter);

		throw $es4.$$primitive(new (Error)('ObjectEncoding: attempted call to an unimplemented function "dynamicPropertyWriter"'));
	}));

	function ObjectEncoding()
	{
		//initialize class if not initialized
		if (ObjectEncoding.$$cinit !== undefined) ObjectEncoding.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof ObjectEncoding) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], ObjectEncoding) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('ObjectEncoding: attempted call to an unimplemented constructor'));
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(ObjectEncoding, null, 'flash.net::ObjectEncoding');
})();
//flash.net.ObjectEncoding


//flash.security.CertificateStatus
$es4.$$package('flash.security').CertificateStatus = function () { throw new Error('Use of unimplemented class: CertificateStatus'); }
//flash.security.CertificateStatus


//flash.display.DisplayObjectContainer
$es4.$$package('flash.display').DisplayObjectContainer = (function ()
{
	//imports
	var Event;
	var Point;
	var TextSnapshot;
	var DisplayObjectContainer;
	var InteractiveObject;
	var DisplayObject;

	//class initializer
	DisplayObjectContainer.$$cinit = (function ()
	{
		DisplayObjectContainer.$$cinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;
		Point = $es4.$$['flash.geom'].Point;
		TextSnapshot = $es4.$$['flash.text'].TextSnapshot;
		InteractiveObject = $es4.$$['flash.display'].InteractiveObject;
		DisplayObject = $es4.$$['flash.display'].DisplayObject;
	});

	//method
	$es4.$$private_function('$_internalAddChildAt', DisplayObjectContainer, (function ($$$$displayObjectContainer, $$$$child, $$$$index, $$$$dispatchEvents)
	{
		if (DisplayObjectContainer.$$cinit !== undefined) DisplayObjectContainer.$$cinit();

		//set default parameter values
		var displayObjectContainer = $es4.$$coerce($$$$displayObjectContainer, $es4.$$['flash.display'].DisplayObjectContainer);
		var child = $es4.$$coerce($$$$child, DisplayObject);
		var index = $es4.$$coerce($$$$index, int);
		var dispatchEvents = (3 > arguments.length - 1) ? true : $es4.$$coerce($$$$dispatchEvents, Boolean);

		if (child === null)
		{
			throw $es4.$$primitive(new (Error)('attempting to add null child to display list'));
		}
		var childProperties = $es4.$$call(child, null, null, '$__properties', $es4.$$EMPTY_ARRAY);
		var properties = $es4.$$call(displayObjectContainer, null, null, '$__properties', $es4.$$EMPTY_ARRAY);
		var children = $es4.$$coerce($es4.$$get(properties, null, null, 'DisplayObjectContainerScope', '$_children'), Array);
		var originalIndex = $es4.$$call(children, null, null, 'indexOf', [child]);
		var childWasOnStage = $es4.$$coerce($es4.$$get(childProperties, null, null, 'TLScope', 'stage') != null, Boolean);
		var hasChild = $es4.$$coerce(originalIndex != -1, Boolean);
		var parent;
		if (hasChild)
		{
			if (index > originalIndex)
			{
				index--;
			}
			$es4.$$call(DisplayObjectContainer, null, null, '$_internalRemoveChild', [displayObjectContainer, child, false, true]);
		}
		else
		{
			parent = $es4.$$get(childProperties, null, null, 'TLScope', 'parent');
			if (parent)
			{
				$es4.$$call($es4.$$call(parent, null, null, '$__properties', $es4.$$EMPTY_ARRAY), null, null, 'DisplayObjectContainerScope', '$_internalRemoveChild', [parent, child, true, true]);
			}
		}
		var childrenLength = $es4.$$get(children, null, null, 'length');
		if (index > childrenLength)
		{
			throw $es4.$$primitive(new (RangeError)('out of range index provided'));
		}
		if (index == childrenLength)
		{
			$es4.$$call(properties, null, null, 'DisplayObjectScope', '$_domView', 'appendChild', [$es4.$$get(childProperties, null, null, 'DisplayObjectScope', '$_domView')]);
		}
		else
		{
			var displayObject = $es4.$$get(children, null, null, index);
			$es4.$$call(properties, null, null, 'DisplayObjectScope', '$_domView', 'insertBefore', [$es4.$$get(childProperties, null, null, 'DisplayObjectScope', '$_domView'), $es4.$$get($es4.$$call(displayObject, null, null, '$__properties', $es4.$$EMPTY_ARRAY), null, null, 'DisplayObjectScope', '$_domView')]);
		}
		$es4.$$call(children, null, null, 'splice', [index, 0, child]);
		if ($es4.$$get(childProperties, null, null, 'DisplayObjectScope', '$_height') !== 0 || $es4.$$get(childProperties, null, null, 'DisplayObjectScope', '$_width') !== 0 || $es4.$$get(childProperties, null, null, 'DisplayObjectScope', '$_scrollRect') !== null)
		{
			$es4.$$call(childProperties, null, null, 'DisplayObjectScope', '$_notifyParentOfBoundsChange', $es4.$$EMPTY_ARRAY);
		}
		if (!hasChild && dispatchEvents)
		{
			$es4.$$call(childProperties, null, null, 'TLScope', 'dispatchEvent', [$es4.$$primitive(new (Event)($es4.$$get(Event, null, null, 'ADDED'), true))]);
		}
		if (!childWasOnStage && $es4.$$get(properties, null, null, 'TLScope', 'stage'))
		{
			if (!$es4.$$get(childProperties, null, null, 'DisplayObjectScope', '$_root'))
			{
				parent = child;
				var found = false;
				while (parent)
				{
					var parentProperties = $es4.$$call(parent, null, null, '$__properties', $es4.$$EMPTY_ARRAY);
					if ($es4.$$get(parentProperties, null, null, 'DisplayObjectScope', '$_isRoot'))
					{
						found = true;
						$es4.$$set(parentProperties, null, null, 'DisplayObjectScope', '$_root', parent, '=');
						break;
					}
					parent = $es4.$$get(parentProperties, null, null, 'TLScope', 'parent');
				}
				if (!found)
				{
					throw $es4.$$primitive(new (Error)('no root found'));
				}
			}
			if (dispatchEvents)
			{
				notifyAddedToStage(child);
			}
		}

		function notifyAddedToStage($$$$child) 
		{
			//set default parameter values
			var child = $$$$child;

			var childProperties = $es4.$$call(child, null, null, '$__properties', $es4.$$EMPTY_ARRAY);
			if ($es4.$$get(childProperties, null, null, 'EventDispatcherScope', '$_listeners', $es4.$$get(Event, null, null, 'ADDED_TO_STAGE')))
			{
				$es4.$$call(childProperties, null, null, 'TLScope', 'dispatchEvent', [$es4.$$primitive(new (Event)($es4.$$get(Event, null, null, 'ADDED_TO_STAGE')))]);
			}
			var displayObjectContainer = $es4.$$as(child, DisplayObjectContainer);
			if (displayObjectContainer == null)
			{
				return;
			}
			var children = $es4.$$coerce($es4.$$get(childProperties, null, null, 'DisplayObjectContainerScope', '$_children'), Array);
			var childrenLength = $es4.$$get(children, null, null, 'length');
			for (var i = 0; i < childrenLength; i++)
			{
				notifyAddedToStage($es4.$$get(children, null, null, i));
			}
		}
;

		return child;
	}));

	//method
	$es4.$$private_function('$_internalRemoveChild', DisplayObjectContainer, (function ($$$$displayObjectContainer, $$$$child, $$$$dispatchRemovedEvent, $$$$beingAdded)
	{
		if (DisplayObjectContainer.$$cinit !== undefined) DisplayObjectContainer.$$cinit();

		//set default parameter values
		var displayObjectContainer = $es4.$$coerce($$$$displayObjectContainer, $es4.$$['flash.display'].DisplayObjectContainer);
		var child = $es4.$$coerce($$$$child, DisplayObject);
		var dispatchRemovedEvent = (2 > arguments.length - 1) ? true : $es4.$$coerce($$$$dispatchRemovedEvent, Boolean);
		var beingAdded = (3 > arguments.length - 1) ? false : $es4.$$coerce($$$$beingAdded, Boolean);

		if (child === null)
		{
			throw $es4.$$primitive(new (Error)('attempting to remove null child from display list'));
		}
		var properties = $es4.$$call(displayObjectContainer, null, null, '$__properties', $es4.$$EMPTY_ARRAY);
		var childProperties = $es4.$$call(child, null, null, '$__properties', $es4.$$EMPTY_ARRAY);
		if ($es4.$$get(childProperties, null, null, 'DisplayObjectScope', '$_domView', 'parentNode') != $es4.$$get(properties, null, null, 'DisplayObjectScope', '$_domView'))
		{
			throw $es4.$$primitive(new (ArgumentError)('Error removing child from parent that is not a child of parent'));
		}
		var children = $es4.$$coerce($es4.$$get(properties, null, null, 'DisplayObjectContainerScope', '$_children'), Array);
		if (dispatchRemovedEvent)
		{
			$es4.$$call(childProperties, null, null, 'TLScope', 'dispatchEvent', [$es4.$$primitive(new (Event)($es4.$$get(Event, null, null, 'REMOVED'), true))]);
		}
		if ($es4.$$get(properties, null, null, 'TLScope', 'stage') && !beingAdded)
		{
			notifyRemovedFromStage(child);
		}
		$es4.$$call(properties, null, null, 'DisplayObjectScope', '$_domView', 'removeChild', [$es4.$$get(childProperties, null, null, 'DisplayObjectScope', '$_domView')]);
		$es4.$$call(children, null, null, 'splice', [$es4.$$call(children, null, null, 'indexOf', [child]), 1]);
		$es4.$$call(properties, null, null, 'DisplayObjectScope', '$_onChildBoundsChange', [$es4.$$get(childProperties, null, null, 'DisplayObjectScope', '$_id'), null]);

		function notifyRemovedFromStage($$$$child) 
		{
			//set default parameter values
			var child = $$$$child;

			var childProperties = $es4.$$call(child, null, null, '$__properties', $es4.$$EMPTY_ARRAY);
			if ($es4.$$get(childProperties, null, null, 'EventDispatcherScope', '$_listeners', $es4.$$get(Event, null, null, 'REMOVED_FROM_STAGE')))
			{
				$es4.$$call(childProperties, null, null, 'TLScope', 'dispatchEvent', [$es4.$$primitive(new (Event)($es4.$$get(Event, null, null, 'REMOVED_FROM_STAGE')))]);
			}
			var displayObjectContainer = $es4.$$as(child, DisplayObjectContainer);
			if (displayObjectContainer == null)
			{
				return;
			}
			var children = $es4.$$coerce($es4.$$get(childProperties, null, null, 'DisplayObjectContainerScope', '$_children'), Array);
			var childrenLength = $es4.$$get(children, null, null, 'length');
			for (var i = 0; i < childrenLength; i++)
			{
				notifyRemovedFromStage($es4.$$get(children, null, null, i));
			}
		}
;

		return child;
	}));

	function DisplayObjectContainer()
	{
		//initialize class if not initialized
		if (DisplayObjectContainer.$$cinit !== undefined) DisplayObjectContainer.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof DisplayObjectContainer) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], DisplayObjectContainer) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('$_properties', $$thisp);

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties') === undefined)
			{
				$es4.$$call($$this, $$this, $$thisp, '$__properties', [{}]);
			}
			$es4.$$super($$thisp).$$z();
		}));

		//method
		$es4.$$internal_function('$__addDomGraphicsView', $$thisp, (function ($$$$domGraphicsView)
		{
			//set default parameter values
			var domGraphicsView = $es4.$$coerce($$$$domGraphicsView, Object);

			var properties = $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope');
			var domView = $es4.$$get(properties, $$this, $$thisp, '$_domView');
			if ($es4.$$get(domView, $$this, $$thisp, 'childElementCount'))
			{
				$es4.$$call(domView, $$this, $$thisp, 'insertBefore', [domGraphicsView, $es4.$$get(domView, $$this, $$thisp, 'childNodes', 0)]);
			}
			else
			{
				$es4.$$call(domView, $$this, $$thisp, 'appendChild', [domGraphicsView]);
			}
			return $es4.$$set(properties, $$this, $$thisp, '$_domGraphicsView', domGraphicsView, '=');
		}));

		//method
		$es4.$$public_function('$__properties', $$thisp, (function ($$$$object)
		{
			//set default parameter values
			var object = (0 > arguments.length - 1) ? null : $$$$object;

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties') === undefined)
			{
				object = $es4.$$call($es4.$$super($$thisp), $$this, $$thisp, '$__properties', [object]);
				$es4.$$set(object, $$this, $$thisp, 'DisplayObjectContainerScope', {$_children:[], $_mouseChildren:true, $_internalAddChildAt:$es4.$$get(DisplayObjectContainer, $$this, $$thisp, '$_internalAddChildAt'), $_internalRemoveChild:$es4.$$get(DisplayObjectContainer, $$this, $$thisp, '$_internalRemoveChild')}, '=');
				$es4.$$set(object, $$this, $$thisp, 'TLScope', $$this, '=');
				return $es4.$$set($$thisp, $$this, $$thisp, '$_properties', object, '=');
			}
			return $es4.$$get($$thisp, $$this, $$thisp, '$_properties');
		}));

		//method
		$es4.$$public_function('$__notify', $$thisp, (function ($$$$name, $$$$args)
		{
			//set default parameter values
			var name = $es4.$$coerce($$$$name, String);
			var args = $$$$args;

			var children = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectContainerScope', '$_children'), Array);
			for (var i = $es4.$$coerce($es4.$$get(children, $$this, $$thisp, 'length'), int); i--;)
			{
				$es4.$$call(children, $$this, $$thisp, i, '$__notify', [name, args]);
			}
			$es4.$$call($es4.$$super($$thisp), $$this, $$thisp, '$__notify', [name, args]);
		}));

		//method
		$es4.$$public_function('addChild', $$thisp, (function ($$$$child)
		{
			//set default parameter values
			var child = $es4.$$coerce($$$$child, DisplayObject);

			return $es4.$$call(DisplayObjectContainer, $$this, $$thisp, '$_internalAddChildAt', [$$this, child, $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectContainerScope', '$_children', 'length')]);
		}));

		//method
		$es4.$$public_function('addChildAt', $$thisp, (function ($$$$child, $$$$index)
		{
			//set default parameter values
			var child = $es4.$$coerce($$$$child, DisplayObject);
			var index = $es4.$$coerce($$$$index, int);

			return $es4.$$call(DisplayObjectContainer, $$this, $$thisp, '$_internalAddChildAt', [$$this, child, index]);
		}));

		//method
		$es4.$$public_function('getChildAt', $$thisp, (function ($$$$index)
		{
			//set default parameter values
			var index = $es4.$$coerce($$$$index, int);

			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectContainerScope', '$_children', index), DisplayObject);
		}));

		//method
		$es4.$$public_function('getChildByName', $$thisp, (function ($$$$name)
		{
			//set default parameter values
			var name = $es4.$$coerce($$$$name, String);

			var children = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectContainerScope', '$_children'), Array);
			var childrenLength = $es4.$$get(children, $$this, $$thisp, 'length');
			for (var i = 0; i < childrenLength; i++)
			{
				if (name == $es4.$$get(children, $$this, $$thisp, i, 'name'))
				{
					return $es4.$$coerce($es4.$$get(children, $$this, $$thisp, i), DisplayObject);
				}
			}
			throw $es4.$$primitive(new (ArgumentError)('getChildByName, Child is not a child of this DisplayObjectContainer'));
		}));

		//method
		$es4.$$public_function('getChildIndex', $$thisp, (function ($$$$child)
		{
			//set default parameter values
			var child = $es4.$$coerce($$$$child, DisplayObject);

			var index = $es4.$$coerce($es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectContainerScope', '$_children', 'indexOf', [child]), int);
			if (index == -1)
			{
				throw $es4.$$primitive(new (ArgumentError)('getChildIndex, Child is not a child of this DisplayObjectContainer'));
			}
			return index;
		}));

		//method
		$es4.$$public_function('contains', $$thisp, (function ($$$$child)
		{
			//set default parameter values
			var child = $es4.$$coerce($$$$child, DisplayObject);

			if (child === $$this)
			{
				return true;
			}
			return containsInner($$this);

			function containsInner($$$$parent) 
			{
				//set default parameter values
				var parent = $es4.$$coerce($$$$parent, $es4.$$['flash.display'].DisplayObjectContainer);

				var displayObjectScope = $es4.$$get($es4.$$call(parent, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectContainerScope');
				var numChildren = $es4.$$coerce($es4.$$get(displayObjectScope, $$this, $$thisp, '$_children', 'length'), uint);
				for (var i = $es4.$$coerce(numChildren, int); i--;)
				{
					var innerChild = $es4.$$coerce($es4.$$get(displayObjectScope, $$this, $$thisp, '$_children', i), DisplayObject);
					if (child === innerChild)
					{
						return true;
					}
					var innerParent = $es4.$$as(innerChild, DisplayObjectContainer);
					if (innerParent)
					{
						var value = containsInner(innerParent);
						if (value)
						{
							return true;
						}
					}
				}
				return false;
			}
;
		}));

		//method
		$es4.$$public_function('removeChild', $$thisp, (function ($$$$child)
		{
			//set default parameter values
			var child = $es4.$$coerce($$$$child, DisplayObject);

			return $es4.$$call(DisplayObjectContainer, $$this, $$thisp, '$_internalRemoveChild', [$$this, child]);
		}));

		//method
		$es4.$$public_function('removeChildAt', $$thisp, (function ($$$$index)
		{
			//set default parameter values
			var index = $es4.$$coerce($$$$index, int);

			return $es4.$$call(DisplayObjectContainer, $$this, $$thisp, '$_internalRemoveChild', [$$this, $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectContainerScope', '$_children', index)]);
		}));

		//method
		$es4.$$public_function('removeChildren', $$thisp, (function ($$$$beginIndex, $$$$endIndex)
		{
			//set default parameter values
			var beginIndex = (0 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$beginIndex, int);
			var endIndex = (1 > arguments.length - 1) ? 0x7fffffff : $es4.$$coerce($$$$endIndex, int);

			var children = $es4.$$coerce($es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectContainerScope', '$_children', 'slice', [beginIndex, endIndex]), Array);
			var length = $es4.$$get(children, $$this, $$thisp, 'length');
			for (var i = 0; i < length; i++)
			{
				$es4.$$call(DisplayObjectContainer, $$this, $$thisp, '$_internalRemoveChild', [$$this, $es4.$$get(children, $$this, $$thisp, i)]);
			}
		}));

		//method
		$es4.$$public_function('setChildIndex', $$thisp, (function ($$$$child, $$$$index)
		{
			//set default parameter values
			var child = $es4.$$coerce($$$$child, DisplayObject);
			var index = $es4.$$coerce($$$$index, int);

			var children = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectContainerScope', '$_children'), Array);
			var currentIndex = $es4.$$call(children, $$this, $$thisp, 'indexOf', [child]);
			if (currentIndex == -1)
			{
				throw $es4.$$primitive(new (ArgumentError)('not a child of parent'));
			}
			if (index >= $es4.$$get(children, $$this, $$thisp, 'length'))
			{
				throw $es4.$$primitive(new (RangeError)('out of range index provided'));
			}
			if (currentIndex == index)
			{
				return;
			}
			if (index == ($es4.$$get(children, $$this, $$thisp, 'length') - 1))
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'appendChild', [$es4.$$get($es4.$$call(child, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope', '$_domView')]);
			}
			else
			{
				var displayObject = $es4.$$get(children, $$this, $$thisp, index);
				$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'insertBefore', [$es4.$$get($es4.$$call(child, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope', '$_domView'), $es4.$$get($es4.$$call(displayObject, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope', '$_domView')]);
			}
			$es4.$$call(children, $$this, $$thisp, 'splice', [currentIndex, 1]);
			$es4.$$call(children, $$this, $$thisp, 'splice', [index, 0, child]);
		}));

		//method
		$es4.$$public_function('swapChildren', $$thisp, (function ($$$$child1, $$$$child2)
		{
			//set default parameter values
			var child1 = $es4.$$coerce($$$$child1, DisplayObject);
			var child2 = $es4.$$coerce($$$$child2, DisplayObject);

			throw $es4.$$primitive(new (Error)('DisplayObjectContainer: attempted call to an unimplemented function "swapChildren"'));
		}));

		//method
		$es4.$$public_function('swapChildrenAt', $$thisp, (function ($$$$index1, $$$$index2)
		{
			//set default parameter values
			var index1 = $es4.$$coerce($$$$index1, int);
			var index2 = $es4.$$coerce($$$$index2, int);

			throw $es4.$$primitive(new (Error)('DisplayObjectContainer: attempted call to an unimplemented function "swapChildrenAt"'));
		}));

		//method
		$es4.$$public_function('areInaccessibleObjectsUnderPoint', $$thisp, (function ($$$$point)
		{
			//set default parameter values
			var point = $es4.$$coerce($$$$point, Point);

			throw $es4.$$primitive(new (Error)('DisplayObjectContainer: attempted call to an unimplemented function "areInaccessibleObjectsUnderPoint"'));
		}));

		//method
		$es4.$$public_function('getObjectsUnderPoint', $$thisp, (function ($$$$point)
		{
			//set default parameter values
			var point = $es4.$$coerce($$$$point, Point);

			var win = window;
			var displayObjectScope;
			var pscope = null;
			var x = NaN;
			var y = NaN;
			var width = NaN;
			var height = NaN;
			var visible = false;
			var graphicsDomView;
			var add = true;
			displayObjectScope = $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope');
			pscope = $es4.$$get(displayObjectScope, $$this, $$thisp, 'pscope');
			visible = $es4.$$coerce($es4.$$call($es4.$$call(win, $$this, $$thisp, '$$getDescriptor', [pscope, 'visible']), $$this, $$thisp, 'get', 'call', [$$this]), Boolean);
			if (!visible)
			{
				return [];
			}
			x = $es4.$$coerce($es4.$$call($es4.$$call(win, $$this, $$thisp, '$$getDescriptor', [pscope, 'x']), $$this, $$thisp, 'get', 'call', [$$this]), Number);
			if ($es4.$$get(point, $$this, $$thisp, 'x') < x)
			{
				add = false;
			}
			else
			{
				width = $es4.$$coerce($es4.$$call($es4.$$call(win, $$this, $$thisp, '$$getDescriptor', [pscope, 'width']), $$this, $$thisp, 'get', 'call', [$$this]), Number);
				if ($es4.$$get(point, $$this, $$thisp, 'x') > x + width)
				{
					return [];
				}
			}
			y = $es4.$$coerce($es4.$$call($es4.$$call(win, $$this, $$thisp, '$$getDescriptor', [pscope, 'y']), $$this, $$thisp, 'get', 'call', [$$this]), Number);
			if ($es4.$$get(point, $$this, $$thisp, 'y') < y)
			{
				add = false;
			}
			else
			{
				height = $es4.$$coerce($es4.$$call($es4.$$call(win, $$this, $$thisp, '$$getDescriptor', [pscope, 'height']), $$this, $$thisp, 'get', 'call', [$$this]), Number);
				if ($es4.$$get(point, $$this, $$thisp, 'y') > y + height)
				{
					return [];
				}
			}
			graphicsDomView = $es4.$$get(displayObjectScope, $$this, $$thisp, '$_domGraphicsView');
			var children = (add && graphicsDomView && ($es4.$$get(graphicsDomView, $$this, $$thisp, 'width') || $es4.$$get(graphicsDomView, $$this, $$thisp, 'height'))) ? [$$this] : [];
			getChildrenAtPoint($$this);

			function getChildrenAtPoint($$$$parent) 
			{
				//set default parameter values
				var parent = $es4.$$coerce($$$$parent, $es4.$$['flash.display'].DisplayObjectContainer);

				var innerPoint = $es4.$$call(parent, $$this, $$thisp, 'globalToLocal', [point]);
				var displayObjectScope;
				var pscope = null;
				var x = NaN;
				var y = NaN;
				var width = NaN;
				var height = NaN;
				var visible = false;
				var graphicsDomView;
				var add = false;
				var numChildren = $es4.$$coerce($es4.$$get(parent, $$this, $$thisp, 'numChildren'), uint);
				for (var i = 0; i < numChildren; i++)
				{
					var child = $es4.$$call(parent, $$this, $$thisp, 'getChildAt', [i]);
					displayObjectScope = $es4.$$get($es4.$$call(child, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope');
					pscope = $es4.$$get(displayObjectScope, $$this, $$thisp, 'pscope');
					add = true;
					visible = $es4.$$coerce($es4.$$call($es4.$$call(win, $$this, $$thisp, '$$getDescriptor', [pscope, 'visible']), $$this, $$thisp, 'get', 'call', [child]), Boolean);
					if (!visible)
					{
						continue;
					}
					x = $es4.$$coerce($es4.$$call($es4.$$call(win, $$this, $$thisp, '$$getDescriptor', [pscope, 'x']), $$this, $$thisp, 'get', 'call', [child]), Number);
					if ($es4.$$get(innerPoint, $$this, $$thisp, 'x') < x)
					{
						add = false;
					}
					else
					{
						width = $es4.$$coerce($es4.$$call($es4.$$call(win, $$this, $$thisp, '$$getDescriptor', [pscope, 'width']), $$this, $$thisp, 'get', 'call', [child]), Number);
						if ($es4.$$get(innerPoint, $$this, $$thisp, 'x') > x + width)
						{
							continue;
						}
					}
					y = $es4.$$coerce($es4.$$call($es4.$$call(win, $$this, $$thisp, '$$getDescriptor', [pscope, 'y']), $$this, $$thisp, 'get', 'call', [child]), Number);
					if ($es4.$$get(innerPoint, $$this, $$thisp, 'y') < y)
					{
						add = false;
					}
					else
					{
						height = $es4.$$coerce($es4.$$call($es4.$$call(win, $$this, $$thisp, '$$getDescriptor', [pscope, 'height']), $$this, $$thisp, 'get', 'call', [child]), Number);
						if ($es4.$$get(innerPoint, $$this, $$thisp, 'y') > y + height)
						{
							continue;
						}
					}
					var innerParent = $es4.$$as(child, DisplayObjectContainer);
					if (innerParent)
					{
						graphicsDomView = $es4.$$get(displayObjectScope, $$this, $$thisp, '$_domGraphicsView');
						if (add && graphicsDomView && ($es4.$$get(graphicsDomView, $$this, $$thisp, 'width') || $es4.$$get(graphicsDomView, $$this, $$thisp, 'height')))
						{
							$es4.$$call(children, $$this, $$thisp, 'push', [child]);
						}
						getChildrenAtPoint(innerParent);
					}
					else if (add)
					{
						$es4.$$call(children, $$this, $$thisp, 'push', [child]);
					}
				}
			}
;

			return children;
		}));

		//accessor
		$es4.$$public_accessor('numChildren', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectContainerScope', '$_children', 'length'), int);
		}), null);

		//accessor
		$es4.$$public_accessor('mouseChildren', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectContainerScope', '$_mouseChildren'), Boolean);
		}), (function ($$$$enable)
		{
			//set default parameter values
			var enable = $es4.$$coerce($$$$enable, Boolean);

			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectContainerScope', '$_mouseChildren', enable, '=');
		}));

		//accessor
		$es4.$$public_accessor('tabChildren', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('DisplayObjectContainer: attempted call to an unimplemented function "tabChildren"'));
		}), (function ($$$$enable)
		{
			//set default parameter values
			var enable = $es4.$$coerce($$$$enable, Boolean);

			throw $es4.$$primitive(new (Error)('DisplayObjectContainer: attempted call to an unimplemented function "tabChildren"'));
		}));

		//accessor
		$es4.$$public_accessor('textSnapshot', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('DisplayObjectContainer: attempted call to an unimplemented function "textSnapshot"'));
		}), null);

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(DisplayObjectContainer, {EXTENDS:'flash.display.InteractiveObject'}, 'flash.display::DisplayObjectContainer');
})();
//flash.display.DisplayObjectContainer


//flash.ui.ContextMenuItem
$es4.$$package('flash.ui').ContextMenuItem = function () { throw new Error('Use of unimplemented class: ContextMenuItem'); }
//flash.ui.ContextMenuItem


//flash.text.engine.BreakOpportunity
$es4.$$package('flash.text.engine').BreakOpportunity = function () { throw new Error('Use of unimplemented class: BreakOpportunity'); }
//flash.text.engine.BreakOpportunity


//flash.display.CapsStyle
$es4.$$package('flash.display').CapsStyle = (function ()
{
	//properties
	CapsStyle.NONE = "none";
	CapsStyle.ROUND = "round";
	CapsStyle.SQUARE = "square";

	//class initializer
	CapsStyle.$$cinit = (function ()
	{
		CapsStyle.$$cinit = undefined;

	});

	function CapsStyle()
	{
		//initialize class if not initialized
		if (CapsStyle.$$cinit !== undefined) CapsStyle.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof CapsStyle) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], CapsStyle) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(CapsStyle, null, 'flash.display::CapsStyle');
})();
//flash.display.CapsStyle


//flash.events.IOErrorEvent
$es4.$$package('flash.events').IOErrorEvent = (function ()
{
	//imports
	var Event;
	var IOErrorEvent;
	var ErrorEvent;

	//properties
	IOErrorEvent.DISK_ERROR = "diskError";
	IOErrorEvent.IO_ERROR = "ioError";
	IOErrorEvent.NETWORK_ERROR = "networkError";
	IOErrorEvent.VERIFY_ERROR = "verifyError";

	//class initializer
	IOErrorEvent.$$cinit = (function ()
	{
		IOErrorEvent.$$cinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;
		ErrorEvent = $es4.$$['flash.events'].ErrorEvent;
	});

	function IOErrorEvent()
	{
		//initialize class if not initialized
		if (IOErrorEvent.$$cinit !== undefined) IOErrorEvent.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof IOErrorEvent) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], IOErrorEvent) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$type, $$$$bubbles, $$$$cancelable, $$$$text, $$$$id)
		{
			//set default parameter values
			var type = $es4.$$coerce($$$$type, String);
			var bubbles = (1 > arguments.length - 1) ? false : $es4.$$coerce($$$$bubbles, Boolean);
			var cancelable = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$cancelable, Boolean);
			var text = (3 > arguments.length - 1) ? "" : $es4.$$coerce($$$$text, String);
			var id = (4 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$id, int);

			$es4.$$super($$thisp).$$z(type, bubbles, cancelable, text, id);
		}));

		//method
		$es4.$$public_function('clone', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$primitive(new (IOErrorEvent)($es4.$$get($$this, $$this, $$thisp, 'type'), $es4.$$get($$this, $$this, $$thisp, 'bubbles'), $es4.$$get($$this, $$this, $$thisp, 'cancelable'), $es4.$$get($$this, $$this, $$thisp, 'text'), $es4.$$get($$this, $$this, $$thisp, 'errorID'))), Event);
		}));

		//method
		$es4.$$public_function('toString', $$thisp, (function ()
		{
			return $es4.$$call($$this, $$this, $$thisp, 'formatToString', ['IOErrorEvent', 'bubbles', 'cancelable', 'text', 'errorID']);
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(IOErrorEvent, {EXTENDS:'flash.events.ErrorEvent'}, 'flash.events::IOErrorEvent');
})();
//flash.events.IOErrorEvent


//flash.text.TextFormatAlign
$es4.$$package('flash.text').TextFormatAlign = (function ()
{
	//properties
	TextFormatAlign.CENTER = "center";
	TextFormatAlign.END = "end";
	TextFormatAlign.JUSTIFY = "justify";
	TextFormatAlign.LEFT = "left";
	TextFormatAlign.RIGHT = "right";
	TextFormatAlign.START = "start";

	//class initializer
	TextFormatAlign.$$cinit = (function ()
	{
		TextFormatAlign.$$cinit = undefined;

	});

	function TextFormatAlign()
	{
		//initialize class if not initialized
		if (TextFormatAlign.$$cinit !== undefined) TextFormatAlign.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof TextFormatAlign) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], TextFormatAlign) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(TextFormatAlign, null, 'flash.text::TextFormatAlign');
})();
//flash.text.TextFormatAlign


//flash.net.URLRequestMethod
$es4.$$package('flash.net').URLRequestMethod = (function ()
{
	//properties
	URLRequestMethod.DELETE = "DELETE";
	URLRequestMethod.GET = "GET";
	URLRequestMethod.HEAD = "HEAD";
	URLRequestMethod.OPTIONS = "OPTIONS";
	URLRequestMethod.POST = "POST";
	URLRequestMethod.PUT = "PUT";

	//class initializer
	URLRequestMethod.$$cinit = (function ()
	{
		URLRequestMethod.$$cinit = undefined;

	});

	function URLRequestMethod()
	{
		//initialize class if not initialized
		if (URLRequestMethod.$$cinit !== undefined) URLRequestMethod.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof URLRequestMethod) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], URLRequestMethod) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(URLRequestMethod, null, 'flash.net::URLRequestMethod');
})();
//flash.net.URLRequestMethod


//flash.display.ShaderParameter
$es4.$$package('flash.display').ShaderParameter = function () { throw new Error('Use of unimplemented class: ShaderParameter'); }
//flash.display.ShaderParameter


//flash.media.SoundChannel
$es4.$$package('flash.media').SoundChannel = (function ()
{
	//imports
	var Event;
	var EventDispatcher;
	var Sound;
	var SoundTransform;
	var Browser;
	var clearTimeout;
	var setTimeout;
	var SoundChannel;

	//class initializer
	SoundChannel.$$cinit = (function ()
	{
		SoundChannel.$$cinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;
		EventDispatcher = $es4.$$['flash.events'].EventDispatcher;
		Sound = $es4.$$['flash.media'].Sound;
		SoundTransform = $es4.$$['flash.media'].SoundTransform;
		Browser = $es4.$$['browser'].Browser;
		clearTimeout = $es4.$$['flash.utils'].clearTimeout;
		setTimeout = $es4.$$['flash.utils'].setTimeout;
	});

	//method
	$es4.$$internal_function('$__getNewSoundChannel', SoundChannel, (function ($$$$sound, $$$$startTime, $$$$loops, $$$$sndTransform)
	{
		if (SoundChannel.$$cinit !== undefined) SoundChannel.$$cinit();

		//set default parameter values
		var sound = $es4.$$coerce($$$$sound, Sound);
		var startTime = $es4.$$coerce($$$$startTime, Number);
		var loops = $es4.$$coerce($$$$loops, int);
		var sndTransform = $es4.$$coerce($$$$sndTransform, SoundTransform);

		trace('getting new sound channel');
		var soundChannel = null;
		var source = null;
		if ($es4.$$get(sound, null, null, '$__audioContext') && !$es4.$$get(sound, null, null, '$__base64String'))
		{
			trace('new sound channel via audio context');
			soundChannel = $es4.$$coerce(($es4.$$get(sound, null, null, '$__soundChannel')) ? $es4.$$get(sound, null, null, '$__soundChannel') : $es4.$$primitive(new (SoundChannel)()), $es4.$$['flash.media'].SoundChannel);
			if (sndTransform)
			{
				$es4.$$set(soundChannel, null, null, '$__soundTransform', sndTransform, '=');
			}
			$es4.$$set(soundChannel, null, null, '$__sound', sound, '=');
			$es4.$$set(soundChannel, null, null, '$__loops', loops, '=');
			$es4.$$set(sound, null, null, '$__soundChannel', soundChannel, '=');
			if ($es4.$$get(soundChannel, null, null, '$__source'))
			{
				trace('soundChannel.$__source exists');
				clearTimeout($es4.$$get(soundChannel, null, null, '$_timeoutID'));
				$es4.$$call(soundChannel, null, null, '$__source', 'removeEventListener', ['ended', $es4.$$get(soundChannel, null, null, '$_onEnded')]);
				$es4.$$call(soundChannel, null, null, '$__source', 'stop', [0]);
				$es4.$$call(soundChannel, null, null, '$__gainNode', 'disconnect', $es4.$$EMPTY_ARRAY);
				$es4.$$call(soundChannel, null, null, '$__source', 'disconnect', $es4.$$EMPTY_ARRAY);
			}
			var callback = $es4.$$coerce(function () 
			{
				source = $es4.$$call(sound, null, null, '$__audioContext', 'createBufferSource', $es4.$$EMPTY_ARRAY);
				$es4.$$set(source, null, null, 'buffer', $es4.$$get(sound, null, null, '$__audioSourceBuffer'), '=');
				var gainNode = $es4.$$set(soundChannel, null, null, '$__gainNode', $es4.$$call(sound, null, null, '$__audioContext', 'createGain', $es4.$$EMPTY_ARRAY), '=');
				$es4.$$call(source, null, null, 'connect', [gainNode]);
				$es4.$$call(gainNode, null, null, 'connect', [$es4.$$get(sound, null, null, '$__audioContext', 'destination')]);
				$es4.$$set(gainNode, null, null, 'gain', 'value', $es4.$$get(soundChannel, null, null, '$__soundTransform', 'volume'), '=');
				trace('sample rates: ' + $es4.$$get(sound, null, null, '$__audioContext', 'sampleRate') + ', ' + $es4.$$get(source, null, null, 'buffer', 'sampleRate'));
				trace('duration: ' + $es4.$$get(source, null, null, 'buffer', 'duration'));
				var time = $es4.$$call(Math, null, null, 'max', [0, $es4.$$call(Math, null, null, 'min', [$es4.$$get(source, null, null, 'buffer', 'duration') - .001, (startTime - 1) / 1000])]);
				trace('time: ' + time);
				trace('audio context current time: ' + $es4.$$get(sound, null, null, '$__audioContext', 'currentTime'));
				$es4.$$set(soundChannel, null, null, '$__sourceStartTime', $es4.$$get(sound, null, null, '$__audioContext', 'currentTime'), '=');
				$es4.$$set(soundChannel, null, null, '$__sourceOffsetTime', time, '=');
				$es4.$$set(soundChannel, null, null, '$__sourcePauseTime', 0, '=');
				$es4.$$set(soundChannel, null, null, '$__source', source, '=');
				$es4.$$set(soundChannel, null, null, '$_timeoutID', setTimeout($es4.$$get(soundChannel, null, null, '$_onEndedTimeout'), $es4.$$get(sound, null, null, 'length') - startTime), '=');
				$es4.$$call(source, null, null, 'addEventListener', ['ended', $es4.$$get(soundChannel, null, null, '$_onEnded')]);
				$es4.$$call(source, null, null, 'start', [0, time]);
			}
, Function);
			if ($es4.$$get(sound, null, null, '$__waitForAudioSourceBuffer'))
			{
				$es4.$$set(sound, null, null, '$__waitForAudioSourceBuffer', callback, '=');
				return soundChannel;
			}
			callback();
			return soundChannel;
		}
		trace('no AudioContext support. Using standard Audio');
		if ($es4.$$get(sound, null, null, '$__soundChannel'))
		{
			soundChannel = $es4.$$get(sound, null, null, '$__soundChannel');
			if (sndTransform)
			{
				$es4.$$set(soundChannel, null, null, '$__soundTransform', sndTransform, '=');
			}
			$es4.$$set(soundChannel, null, null, '$__audio', 'currentTime', startTime / 1000, '=');
			$es4.$$call(soundChannel, null, null, '$__audio', 'play', $es4.$$EMPTY_ARRAY);
			$es4.$$set(soundChannel, null, null, '$__audio', 'volume', $es4.$$get(soundChannel, null, null, '$__soundTransform', 'volume'), '=');
			return soundChannel;
		}
		if (startTime)
		{
			trace('SoundChannel: startTime in sound.play is not supported on first call');
		}
		soundChannel = $es4.$$coerce($es4.$$primitive(new (SoundChannel)()), $es4.$$['flash.media'].SoundChannel);
		if (sndTransform)
		{
			$es4.$$set(soundChannel, null, null, '$__soundTransform', sndTransform, '=');
		}
		$es4.$$set(sound, null, null, '$__soundChannel', soundChannel, '=');
		$es4.$$set(soundChannel, null, null, '$__sound', sound, '=');
		$es4.$$set(soundChannel, null, null, '$__audio', $es4.$$call(Browser, null, null, 'getNewAudio', $es4.$$EMPTY_ARRAY), '=');
		$es4.$$set(soundChannel, null, null, '$__audio', 'src', ($es4.$$get(sound, null, null, '$__base64String')) ? $es4.$$get(sound, null, null, '$__base64String') : $es4.$$get(sound, null, null, 'url'), '=');
		$es4.$$call(soundChannel, null, null, '$__audio', 'load', $es4.$$EMPTY_ARRAY);
		$es4.$$call(soundChannel, null, null, '$__audio', 'addEventListener', ['ended', $es4.$$get(soundChannel, null, null, '$_onEnded')]);
		$es4.$$call(soundChannel, null, null, '$__audio', 'play', $es4.$$EMPTY_ARRAY);
		$es4.$$set(soundChannel, null, null, '$__audio', 'volume', $es4.$$get(soundChannel, null, null, '$__soundTransform', 'volume'), '=');
		return soundChannel;
	}));

	function SoundChannel()
	{
		//initialize class if not initialized
		if (SoundChannel.$$cinit !== undefined) SoundChannel.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof SoundChannel) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], SoundChannel) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$protected_property('$__gainNode', $$thisp, Object);
		$es4.$$protected_property('$__audio', $$thisp, Object);
		$es4.$$protected_property('$__sound', $$thisp, Sound);
		$es4.$$public_property('$__source', $$thisp, Object);
		$es4.$$protected_property('$__sourceStartTime', $$thisp, Number);
		$es4.$$protected_property('$__sourcePauseTime', $$thisp, Number);
		$es4.$$protected_property('$__sourceOffsetTime', $$thisp, Number);
		$es4.$$protected_property('$__loops', $$thisp, int);
		$es4.$$protected_property('$__soundTransform', $$thisp, SoundTransform);
		$es4.$$protected_property('$_timeoutID', $$thisp, Number);

		//initializer
		$es4.$$iinit($$thisp, (function ()
		{
			//initialize properties
			$es4.$$set($$this, $$this, $$thisp, '$__sourceStartTime', 0, '=');
			$es4.$$set($$this, $$this, $$thisp, '$__sourcePauseTime', 0, '=');
			$es4.$$set($$this, $$this, $$thisp, '$__sourceOffsetTime', 0, '=');
			$es4.$$set($$this, $$this, $$thisp, '$__loops', 0, '=');
			$es4.$$set($$this, $$this, $$thisp, '$__soundTransform', $es4.$$primitive(new (SoundTransform)()), '=');
		}));

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
			$es4.$$super($$thisp).$$z();
		}));

		//method
		$es4.$$public_function('$_onEndedTimeout', $$thisp, (function ($$$$event)
		{
			//set default parameter values
			var event = $$$$event;

			if (!$es4.$$get($$this, $$this, $$thisp, '$__source'))
			{
				return;
			}
			if ($es4.$$get($$this, $$this, $$thisp, 'position') < $es4.$$get($$this, $$this, $$thisp, '$__sound', 'length'))
			{
				$es4.$$set($$this, $$this, $$thisp, '$_timeoutID', setTimeout($es4.$$get($$this, $$this, $$thisp, '$_onEndedTimeout'), 500), '=');
				return;
			}
			trace('soundChannel setTimeout ended');
			$es4.$$call($$this, $$this, $$thisp, '$_onEnded', [null]);
		}));

		//method
		$es4.$$public_function('$_onEnded', $$thisp, (function ($$$$event)
		{
			//set default parameter values
			var event = $$$$event;

			trace('on ended called');
			if (!isNaN($es4.$$get($$this, $$this, $$thisp, '$_timeoutID')))
			{
				clearTimeout($es4.$$get($$this, $$this, $$thisp, '$_timeoutID'));
			}
			if ($es4.$$get($$this, $$this, $$thisp, '$__source'))
			{
				$es4.$$call($$this, $$this, $$thisp, '$__source', 'removeEventListener', ['ended', $es4.$$get($$this, $$this, $$thisp, '$_onEnded')]);
			}
			$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (Event)($es4.$$get(Event, $$this, $$thisp, 'SOUND_COMPLETE')))]);
		}));

		//method
		$es4.$$public_function('stop', $$thisp, (function ()
		{
			if ($es4.$$get($$this, $$this, $$thisp, '$__sound') && $es4.$$get($$this, $$this, $$thisp, '$__sound', '$__audioContext'))
			{
				if ($es4.$$get($$this, $$this, $$thisp, '$__source'))
				{
					clearTimeout($es4.$$get($$this, $$this, $$thisp, '$_timeoutID'));
					$es4.$$call($$this, $$this, $$thisp, '$__source', 'removeEventListener', ['ended', $es4.$$get($$this, $$this, $$thisp, '$_onEnded')]);
					$es4.$$set($$this, $$this, $$thisp, '$__sourcePauseTime', $es4.$$get($$this, $$this, $$thisp, 'position'), '=');
					$es4.$$call($$this, $$this, $$thisp, '$__source', 'stop', [0]);
					$es4.$$call($$this, $$this, $$thisp, '$__gainNode', 'disconnect', $es4.$$EMPTY_ARRAY);
					$es4.$$call($$this, $$this, $$thisp, '$__source', 'disconnect', $es4.$$EMPTY_ARRAY);
					$es4.$$set($$this, $$this, $$thisp, '$__source', null, '=');
				}
				return;
			}
			if ($es4.$$get($$this, $$this, $$thisp, '$__audio'))
			{
				$es4.$$call($$this, $$this, $$thisp, '$__audio', 'pause', $es4.$$EMPTY_ARRAY);
			}
		}));

		//accessor
		$es4.$$public_accessor('leftPeak', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('SoundChannel: attempted call to an unimplemented function "leftPeak"'));
		}), null);

		//accessor
		$es4.$$public_accessor('position', $$thisp, (function ()
		{
			if ($es4.$$get($$this, $$this, $$thisp, '$__sound') && $es4.$$get($$this, $$this, $$thisp, '$__sound', '$__audioContext'))
			{
				var position = $es4.$$coerce((($es4.$$get($$this, $$this, $$thisp, '$__source')) ? ($es4.$$get($$this, $$this, $$thisp, '$__sound', '$__audioContext', 'currentTime') + $es4.$$get($$this, $$this, $$thisp, '$__sourceOffsetTime')) - $es4.$$get($$this, $$this, $$thisp, '$__sourceStartTime') : $es4.$$get($$this, $$this, $$thisp, '$__sourcePauseTime')) * 1000, Number);
				return (position > $es4.$$get($$this, $$this, $$thisp, '$__sound', 'length')) ? $es4.$$get($$this, $$this, $$thisp, '$__sound', 'length') : position;
			}
			return $es4.$$coerce(($es4.$$get($$this, $$this, $$thisp, '$__audio')) ? $es4.$$get($$this, $$this, $$thisp, '$__audio', 'currentTime') * 1000 : 0, Number);
		}), null);

		//accessor
		$es4.$$public_accessor('rightPeak', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('SoundChannel: attempted call to an unimplemented function "rightPeak"'));
		}), null);

		//accessor
		$es4.$$public_accessor('soundTransform', $$thisp, (function ()
		{
			return $es4.$$get($$this, $$this, $$thisp, '$__soundTransform');
		}), (function ($$$$soundTransform)
		{
			//set default parameter values
			var soundTransform = $es4.$$coerce($$$$soundTransform, SoundTransform);

			$es4.$$set($$this, $$this, $$thisp, '$__soundTransform', soundTransform, '=');
			if ($es4.$$get($$this, $$this, $$thisp, '$__sound') && $es4.$$get($$this, $$this, $$thisp, '$__sound', '$__audioContext'))
			{
				$es4.$$set($$this, $$this, $$thisp, '$__gainNode', 'gain', 'value', $es4.$$get(soundTransform, $$this, $$thisp, 'volume'), '=');
				return;
			}
			if ($es4.$$get($$this, $$this, $$thisp, '$__audio'))
			{
				$es4.$$set($$this, $$this, $$thisp, '$__audio', 'volume', $es4.$$get(soundTransform, $$this, $$thisp, 'volume'), '=');
			}
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(SoundChannel, {EXTENDS:'flash.events.EventDispatcher'}, 'flash.media::SoundChannel');
})();
//flash.media.SoundChannel


//flash.display.LoaderInfo
$es4.$$package('flash.display').LoaderInfo = (function ()
{
	//imports
	var EventDispatcher;
	var UncaughtErrorEvents;
	var ApplicationDomain;
	var ByteArray;
	var Browser;
	var SWFVersion;
	var ActionScriptVersion;

	//class initializer
	LoaderInfo.$$cinit = (function ()
	{
		LoaderInfo.$$cinit = undefined;

		//initialize imports
		EventDispatcher = $es4.$$['flash.events'].EventDispatcher;
		UncaughtErrorEvents = $es4.$$['flash.events'].UncaughtErrorEvents;
		ApplicationDomain = $es4.$$['flash.system'].ApplicationDomain;
		ByteArray = $es4.$$['flash.utils'].ByteArray;
		Browser = $es4.$$['browser'].Browser;
		SWFVersion = $es4.$$['flash.display'].SWFVersion;
		ActionScriptVersion = $es4.$$['flash.display'].ActionScriptVersion;
	});

	//method
	$es4.$$public_function('getLoaderInfoByDefinition', LoaderInfo, (function ($$$$object)
	{
		if (LoaderInfo.$$cinit !== undefined) LoaderInfo.$$cinit();

		//set default parameter values
		var object = $es4.$$coerce($$$$object, Object);

		throw $es4.$$primitive(new (Error)('LoaderInfo: attempted call to an unimplemented function "getLoaderInfoByDefinition"'));
	}));

	function LoaderInfo()
	{
		//initialize class if not initialized
		if (LoaderInfo.$$cinit !== undefined) LoaderInfo.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof LoaderInfo) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], LoaderInfo) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('$_properties', $$thisp);

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties') === undefined)
			{
				$es4.$$call($$this, $$this, $$thisp, '$__properties', [{}]);
			}
			$es4.$$super($$thisp).$$z();
		}));

		//method
		$es4.$$public_function('$__properties', $$thisp, (function ($$$$object)
		{
			//set default parameter values
			var object = (0 > arguments.length - 1) ? null : $$$$object;

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties') === undefined)
			{
				object = $es4.$$call($es4.$$super($$thisp), $$this, $$thisp, '$__properties', [object]);
				$es4.$$set(object, $$this, $$thisp, 'LoaderInfoScope', {$_parameters:{}, $_contentType:null, $_url:null, $_bytesTotal:null, $_bytesLoaded:null, $_loader:null}, '=');
				$es4.$$set(object, $$this, $$thisp, 'TLScope', $$this, '=');
				return $es4.$$set($$thisp, $$this, $$thisp, '$_properties', object, '=');
			}
			return $es4.$$get($$thisp, $$this, $$thisp, '$_properties');
		}));

		//accessor
		$es4.$$public_accessor('actionScriptVersion', $$thisp, (function ()
		{
			if ($es4.$$get($$this, $$this, $$thisp, 'contentType') == 'application/x-shockwave-flash')
			{
				return $es4.$$get(ActionScriptVersion, $$this, $$thisp, 'ACTIONSCRIPT3');
			}
			throw $es4.$$primitive(new (Error)('Incorrect contentType or not enough info available to retrieve actionScriptVersion'));
		}), null);

		//accessor
		$es4.$$public_accessor('bytesLoaded', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'LoaderInfoScope', '$_bytesLoaded'), uint);
		}), null);

		//accessor
		$es4.$$public_accessor('bytesTotal', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'LoaderInfoScope', '$_bytesTotal'), uint);
		}), null);

		//accessor
		$es4.$$public_accessor('content', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'LoaderInfoScope', '$_loader', 'content'), DisplayObject);
		}), null);

		//accessor
		$es4.$$public_accessor('contentType', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'LoaderInfoScope', '$_contentType'), String);
		}), null);

		//accessor
		$es4.$$public_accessor('loader', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'LoaderInfoScope', '$_loader'), Loader);
		}), null);

		//accessor
		$es4.$$public_accessor('swfVersion', $$thisp, (function ()
		{
			if ($es4.$$get($$this, $$this, $$thisp, 'contentType') == 'application/x-shockwave-flash')
			{
				return $es4.$$get(SWFVersion, $$this, $$thisp, 'FLASH9');
			}
			throw $es4.$$primitive(new (Error)('Incorrect contentType or not enough info available to retrieve swfVersion'));
		}), null);

		//accessor
		$es4.$$public_accessor('url', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'LoaderInfoScope', '$_url'), String);
		}), null);

		//accessor
		$es4.$$public_accessor('width', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('LoaderInfo: attempted call to an unimplemented function "width"'));
		}), null);

		//accessor
		$es4.$$public_accessor('uncaughtErrorEvents', $$thisp, (function ()
		{
			return $es4.$$primitive(new (UncaughtErrorEvents)());
		}), null);

		//accessor
		$es4.$$public_accessor('loaderURL', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('LoaderInfo: attempted call to an unimplemented function "loaderURL"'));
		}), null);

		//accessor
		$es4.$$public_accessor('parameters', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'LoaderInfoScope', '$_parameters');
		}), null);

		//accessor
		$es4.$$public_accessor('parentAllowsChild', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('LoaderInfo: attempted call to an unimplemented function "parentAllowsChild"'));
		}), null);

		//accessor
		$es4.$$public_accessor('sameDomain', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('LoaderInfo: attempted call to an unimplemented function "sameDomain"'));
		}), null);

		//accessor
		$es4.$$public_accessor('sharedEvents', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('LoaderInfo: attempted call to an unimplemented function "sharedEvents"'));
		}), null);

		//accessor
		$es4.$$public_accessor('frameRate', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('LoaderInfo: attempted call to an unimplemented function "frameRate"'));
		}), null);

		//accessor
		$es4.$$public_accessor('height', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('LoaderInfo: attempted call to an unimplemented function "height"'));
		}), null);

		//accessor
		$es4.$$public_accessor('isURLInaccessible', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('LoaderInfo: attempted call to an unimplemented function "isURLInaccessible"'));
		}), null);

		//accessor
		$es4.$$public_accessor('applicationDomain', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'LoaderInfoScope', '$_loader', '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'LoaderScope', '$_loaderContext', 'applicationDomain'), ApplicationDomain);
		}), null);

		//accessor
		$es4.$$public_accessor('bytes', $$thisp, (function ()
		{
			return $es4.$$call(Browser, $$this, $$thisp, 'getByteArray', [$es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'LoaderInfoScope', '$_url')]);
		}), null);

		//accessor
		$es4.$$public_accessor('childAllowsParent', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('LoaderInfo: attempted call to an unimplemented function "childAllowsParent"'));
		}), null);

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(LoaderInfo, {EXTENDS:'flash.events.EventDispatcher'}, 'flash.display::LoaderInfo');
})();
//flash.display.LoaderInfo


//flash.display3D.Context3DTextureFilter
$es4.$$package('flash.display3D').Context3DTextureFilter = function () { throw new Error('Use of unimplemented class: Context3DTextureFilter'); }
//flash.display3D.Context3DTextureFilter


//flash.system.IMEConversionMode
$es4.$$package('flash.system').IMEConversionMode = function () { throw new Error('Use of unimplemented class: IMEConversionMode'); }
//flash.system.IMEConversionMode


//flash.errors.InvalidSWFError
$es4.$$package('flash.errors').InvalidSWFError = function () { throw new Error('Use of unimplemented class: InvalidSWFError'); }
//flash.errors.InvalidSWFError


//flash.events.MouseEvent
$es4.$$package('flash.events').MouseEvent = (function ()
{
	//imports
	var InteractiveObject;
	var Event;
	var Point;
	var MouseEvent;

	//properties
	MouseEvent.CLICK = "click";
	MouseEvent.CONTEXT_MENU = "contextMenu";
	MouseEvent.DOUBLE_CLICK = "doubleClick";
	MouseEvent.MIDDLE_CLICK = "middleClick";
	MouseEvent.MIDDLE_MOUSE_DOWN = "middleMouseDown";
	MouseEvent.MIDDLE_MOUSE_UP = "middleMouseUp";
	MouseEvent.MOUSE_DOWN = "mouseDown";
	MouseEvent.MOUSE_MOVE = "mouseMove";
	MouseEvent.MOUSE_OUT = "mouseOut";
	MouseEvent.MOUSE_OVER = "mouseOver";
	MouseEvent.MOUSE_UP = "mouseUp";
	MouseEvent.MOUSE_WHEEL = "mouseWheel";
	MouseEvent.RELEASE_OUTSIDE = "releaseOutside";
	MouseEvent.RIGHT_CLICK = "rightClick";
	MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
	MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
	MouseEvent.ROLL_OUT = "rollOut";
	MouseEvent.ROLL_OVER = "rollOver";

	//class initializer
	MouseEvent.$$cinit = (function ()
	{
		MouseEvent.$$cinit = undefined;

		//initialize imports
		InteractiveObject = $es4.$$['flash.display'].InteractiveObject;
		Event = $es4.$$['flash.events'].Event;
		Point = $es4.$$['flash.geom'].Point;
	});

	function MouseEvent()
	{
		//initialize class if not initialized
		if (MouseEvent.$$cinit !== undefined) MouseEvent.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof MouseEvent) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], MouseEvent) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('_relatedObject', $$thisp, InteractiveObject);
		$es4.$$private_property('_ctrlKey', $$thisp, Boolean);
		$es4.$$private_property('_delta', $$thisp, int);
		$es4.$$private_property('_buttonDown', $$thisp, Boolean);
		$es4.$$private_property('_shiftKey', $$thisp, Boolean);
		$es4.$$private_property('_altKey', $$thisp, Boolean);
		$es4.$$internal_property('$__localPoint', $$thisp, Point);
		$es4.$$public_property('$__stagePoint', $$thisp, Point);

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$type, $$$$bubbles, $$$$cancelable, $$$$localX, $$$$localY, $$$$relatedObject, $$$$ctrlKey, $$$$altKey, $$$$shiftKey, $$$$buttonDown, $$$$delta)
		{
			//set default parameter values
			var type = $es4.$$coerce($$$$type, String);
			var bubbles = (1 > arguments.length - 1) ? true : $es4.$$coerce($$$$bubbles, Boolean);
			var cancelable = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$cancelable, Boolean);
			var localX = (3 > arguments.length - 1) ? null : $es4.$$coerce($$$$localX, Number);
			var localY = (4 > arguments.length - 1) ? null : $es4.$$coerce($$$$localY, Number);
			var relatedObject = (5 > arguments.length - 1) ? null : $es4.$$coerce($$$$relatedObject, InteractiveObject);
			var ctrlKey = (6 > arguments.length - 1) ? false : $es4.$$coerce($$$$ctrlKey, Boolean);
			var altKey = (7 > arguments.length - 1) ? false : $es4.$$coerce($$$$altKey, Boolean);
			var shiftKey = (8 > arguments.length - 1) ? false : $es4.$$coerce($$$$shiftKey, Boolean);
			var buttonDown = (9 > arguments.length - 1) ? false : $es4.$$coerce($$$$buttonDown, Boolean);
			var delta = (10 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$delta, int);

			$es4.$$super($$thisp).$$z(type, bubbles, cancelable);
			$es4.$$set($$this, $$this, $$thisp, '$__localPoint', (isNaN(localX) || isNaN(localY)) ? null : $es4.$$primitive(new (Point)(localX, localY)), '=');
			$es4.$$set($$this, $$this, $$thisp, 'relatedObject', relatedObject, '=');
			$es4.$$set($$this, $$this, $$thisp, 'ctrlKey', ctrlKey, '=');
			$es4.$$set($$this, $$this, $$thisp, 'altKey', altKey, '=');
			$es4.$$set($$this, $$this, $$thisp, 'shiftKey', shiftKey, '=');
			$es4.$$set($$this, $$this, $$thisp, 'buttonDown', buttonDown, '=');
			$es4.$$set($$this, $$this, $$thisp, 'delta', delta, '=');
		}));

		//method
		$es4.$$public_function('clone', $$thisp, (function ()
		{
			var mouseEvent = $es4.$$coerce($es4.$$primitive(new (MouseEvent)($es4.$$get($$this, $$this, $$thisp, 'type'), $es4.$$get($$this, $$this, $$thisp, 'bubbles'), $es4.$$get($$this, $$this, $$thisp, 'cancelable'), NaN, NaN, $es4.$$get($$this, $$this, $$thisp, 'relatedObject'), $es4.$$get($$this, $$this, $$thisp, 'ctrlKey'), $es4.$$get($$this, $$this, $$thisp, 'altKey'), $es4.$$get($$this, $$this, $$thisp, 'shiftKey'), $es4.$$get($$this, $$this, $$thisp, 'buttonDown'), $es4.$$get($$this, $$this, $$thisp, 'delta'))), $es4.$$['flash.events'].MouseEvent);
			$es4.$$set(mouseEvent, $$this, $$thisp, '$__localPoint', $es4.$$get($$this, $$this, $$thisp, '$__localPoint'), '=');
			$es4.$$set(mouseEvent, $$this, $$thisp, '$__stagePoint', $es4.$$get($$this, $$this, $$thisp, '$__stagePoint'), '=');
			return mouseEvent;
		}));

		//method
		$es4.$$public_function('toString', $$thisp, (function ()
		{
			return $es4.$$call($$this, $$this, $$thisp, 'formatToString', ["MouseEvent", "type", "bubbles", "cancelable", "localX", "localY", "stageX", "stageY", "relatedObject", "ctrlKey", "altKey", "shiftKey", "buttonDown", "delta"]);
		}));

		//method
		$es4.$$public_function('updateAfterEvent', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('MouseEvent: attempted call to an unimplemented function "updateAfterEvent"'));
		}));

		//accessor
		$es4.$$public_accessor('altKey', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_altKey');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			$es4.$$set($$thisp, $$this, $$thisp, '_altKey', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('buttonDown', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_buttonDown');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			$es4.$$set($$thisp, $$this, $$thisp, '_buttonDown', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('ctrlKey', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_ctrlKey');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			$es4.$$set($$thisp, $$this, $$thisp, '_ctrlKey', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('delta', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_delta');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, int);

			$es4.$$set($$thisp, $$this, $$thisp, '_delta', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('isRelatedObjectInaccessible', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('MouseEvent: attempted call to an unimplemented function "isRelatedObjectInaccessible"'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			throw $es4.$$primitive(new (Error)('MouseEvent: attempted call to an unimplemented function "isRelatedObjectInaccessible"'));
		}));

		//accessor
		$es4.$$public_accessor('localX', $$thisp, (function ()
		{
			if (!$es4.$$get($$this, $$this, $$thisp, '$__localPoint'))
			{
				if (!$es4.$$get($$this, $$this, $$thisp, 'target'))
				{
					return NaN;
				}
				$es4.$$set($$this, $$this, $$thisp, '$__localPoint', $es4.$$call($$this, $$this, $$thisp, 'target', 'globalToLocal', [$es4.$$get($$this, $$this, $$thisp, '$__stagePoint')]), '=');
			}
			return $es4.$$get($$this, $$this, $$thisp, '$__localPoint', 'x');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			if (!$es4.$$get($$this, $$this, $$thisp, '$__localPoint'))
			{
				$es4.$$set($$this, $$this, $$thisp, '$__localPoint', $es4.$$primitive(new (Point)(value, 0)), '=');
			}
			else
			{
				$es4.$$set($$this, $$this, $$thisp, '$__localPoint', 'x', value, '=');
			}
			$es4.$$set($$this, $$this, $$thisp, '$__stagePoint', null, '=');
		}));

		//accessor
		$es4.$$public_accessor('localY', $$thisp, (function ()
		{
			if (!$es4.$$get($$this, $$this, $$thisp, '$__localPoint'))
			{
				if (!$es4.$$get($$this, $$this, $$thisp, 'target'))
				{
					return NaN;
				}
				$es4.$$set($$this, $$this, $$thisp, '$__localPoint', $es4.$$call($$this, $$this, $$thisp, 'target', 'globalToLocal', [$es4.$$get($$this, $$this, $$thisp, '$__stagePoint')]), '=');
			}
			return $es4.$$get($$this, $$this, $$thisp, '$__localPoint', 'y');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			if (!$es4.$$get($$this, $$this, $$thisp, '$__localPoint'))
			{
				$es4.$$set($$this, $$this, $$thisp, '$__localPoint', $es4.$$primitive(new (Point)(0, value)), '=');
			}
			else
			{
				$es4.$$set($$this, $$this, $$thisp, '$__localPoint', 'y', value, '=');
			}
			$es4.$$set($$this, $$this, $$thisp, '$__stagePoint', null, '=');
		}));

		//accessor
		$es4.$$public_accessor('movementX', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('MouseEvent: attempted call to an unimplemented function "movementX"'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			throw $es4.$$primitive(new (Error)('MouseEvent: attempted call to an unimplemented function "movementX"'));
		}));

		//accessor
		$es4.$$public_accessor('movementY', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('MouseEvent: attempted call to an unimplemented function "movementY"'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			throw $es4.$$primitive(new (Error)('MouseEvent: attempted call to an unimplemented function "movementY"'));
		}));

		//accessor
		$es4.$$public_accessor('relatedObject', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_relatedObject');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, InteractiveObject);

			$es4.$$set($$thisp, $$this, $$thisp, '_relatedObject', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('shiftKey', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_shiftKey');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			$es4.$$set($$thisp, $$this, $$thisp, '_shiftKey', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('stageX', $$thisp, (function ()
		{
			if (!$es4.$$get($$this, $$this, $$thisp, '$__stagePoint'))
			{
				if (!$es4.$$get($$this, $$this, $$thisp, 'target'))
				{
					return NaN;
				}
				$es4.$$set($$this, $$this, $$thisp, '$__stagePoint', $es4.$$call($$this, $$this, $$thisp, 'target', 'localToGlobal', [$es4.$$get($$this, $$this, $$thisp, '$__localPoint')]), '=');
			}
			return $es4.$$get($$this, $$this, $$thisp, '$__stagePoint', 'x');
		}), null);

		//accessor
		$es4.$$public_accessor('stageY', $$thisp, (function ()
		{
			if (!$es4.$$get($$this, $$this, $$thisp, '$__stagePoint'))
			{
				if (!$es4.$$get($$this, $$this, $$thisp, 'target'))
				{
					return NaN;
				}
				$es4.$$set($$this, $$this, $$thisp, '$__stagePoint', $es4.$$call($$this, $$this, $$thisp, 'target', 'localToGlobal', [$es4.$$get($$this, $$this, $$thisp, '$__localPoint')]), '=');
			}
			return $es4.$$get($$this, $$this, $$thisp, '$__stagePoint', 'y');
		}), null);

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(MouseEvent, {EXTENDS:'flash.events.Event'}, 'flash.events::MouseEvent');
})();
//flash.events.MouseEvent


//flash.events.SoftKeyboardEvent
$es4.$$package('flash.events').SoftKeyboardEvent = function () { throw new Error('Use of unimplemented class: SoftKeyboardEvent'); }
//flash.events.SoftKeyboardEvent


//flash.globalization.LastOperationStatus
$es4.$$package('flash.globalization').LastOperationStatus = function () { throw new Error('Use of unimplemented class: LastOperationStatus'); }
//flash.globalization.LastOperationStatus


//flash.net.drm.DRMManager
$es4.$$package('flash.net.drm').DRMManager = function () { throw new Error('Use of unimplemented class: DRMManager'); }
//flash.net.drm.DRMManager


//flash.text.engine.Kerning
$es4.$$package('flash.text.engine').Kerning = function () { throw new Error('Use of unimplemented class: Kerning'); }
//flash.text.engine.Kerning


//flash.desktop.ClipboardTransferMode
$es4.$$package('flash.desktop').ClipboardTransferMode = function () { throw new Error('Use of unimplemented class: ClipboardTransferMode'); }
//flash.desktop.ClipboardTransferMode


//flash.events.GesturePhase
$es4.$$package('flash.events').GesturePhase = function () { throw new Error('Use of unimplemented class: GesturePhase'); }
//flash.events.GesturePhase


//flash.geom.Matrix
$es4.$$package('flash.geom').Matrix = (function ()
{
	//imports
	var Point;
	var Vector3D;
	var Matrix;

	//properties
	$es4.$$public_property('MAGIC_GRADIENT_FACTOR', Matrix, Number);

	//class initializer
	Matrix.$$cinit = (function ()
	{
		Matrix.$$cinit = undefined;

		//initialize imports
		Point = $es4.$$['flash.geom'].Point;
		Vector3D = $es4.$$['flash.geom'].Vector3D;

		//initialize properties
		Matrix.MAGIC_GRADIENT_FACTOR = 16384 / 10;
	});

	function Matrix()
	{
		//initialize class if not initialized
		if (Matrix.$$cinit !== undefined) Matrix.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof Matrix) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Matrix) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$public_property('a', $$thisp, Number);
		$es4.$$public_property('b', $$thisp, Number);
		$es4.$$public_property('c', $$thisp, Number);
		$es4.$$public_property('d', $$thisp, Number);
		$es4.$$public_property('tx', $$thisp, Number);
		$es4.$$public_property('ty', $$thisp, Number);

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$a, $$$$b, $$$$c, $$$$d, $$$$tx, $$$$ty)
		{
			//set default parameter values
			var a = (0 > arguments.length - 1) ? 1 : $es4.$$coerce($$$$a, Number);
			var b = (1 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$b, Number);
			var c = (2 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$c, Number);
			var d = (3 > arguments.length - 1) ? 1 : $es4.$$coerce($$$$d, Number);
			var tx = (4 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$tx, Number);
			var ty = (5 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$ty, Number);

			$es4.$$set($$this, $$this, $$thisp, 'a', a, '=');
			$es4.$$set($$this, $$this, $$thisp, 'b', b, '=');
			$es4.$$set($$this, $$this, $$thisp, 'c', c, '=');
			$es4.$$set($$this, $$this, $$thisp, 'd', d, '=');
			$es4.$$set($$this, $$this, $$thisp, 'tx', tx, '=');
			$es4.$$set($$this, $$this, $$thisp, 'ty', ty, '=');
		}));

		//method
		$es4.$$public_function('clone', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$primitive(new (Matrix)($es4.$$get($$this, $$this, $$thisp, 'a'), $es4.$$get($$this, $$this, $$thisp, 'b'), $es4.$$get($$this, $$this, $$thisp, 'c'), $es4.$$get($$this, $$this, $$thisp, 'd'), $es4.$$get($$this, $$this, $$thisp, 'tx'), $es4.$$get($$this, $$this, $$thisp, 'ty'))), $es4.$$['flash.geom'].Matrix);
		}));

		//method
		$es4.$$public_function('concat', $$thisp, (function ($$$$m)
		{
			//set default parameter values
			var m = $es4.$$coerce($$$$m, $es4.$$['flash.geom'].Matrix);

			var a = $es4.$$coerce($es4.$$get($$this, $$this, $$thisp, 'a'), Number);
			var b = $es4.$$coerce($es4.$$get($$this, $$this, $$thisp, 'b'), Number);
			var c = $es4.$$coerce($es4.$$get($$this, $$this, $$thisp, 'c'), Number);
			var d = $es4.$$coerce($es4.$$get($$this, $$this, $$thisp, 'd'), Number);
			var tx = $es4.$$coerce($es4.$$get($$this, $$this, $$thisp, 'tx'), Number);
			var ty = $es4.$$coerce($es4.$$get($$this, $$this, $$thisp, 'ty'), Number);
			$es4.$$set($$this, $$this, $$thisp, 'a', $es4.$$get(m, $$this, $$thisp, 'a') * a + $es4.$$get(m, $$this, $$thisp, 'c') * b, '=');
			$es4.$$set($$this, $$this, $$thisp, 'b', $es4.$$get(m, $$this, $$thisp, 'b') * a + $es4.$$get(m, $$this, $$thisp, 'd') * b, '=');
			$es4.$$set($$this, $$this, $$thisp, 'c', $es4.$$get(m, $$this, $$thisp, 'a') * c + $es4.$$get(m, $$this, $$thisp, 'c') * d, '=');
			$es4.$$set($$this, $$this, $$thisp, 'd', $es4.$$get(m, $$this, $$thisp, 'b') * c + $es4.$$get(m, $$this, $$thisp, 'd') * d, '=');
			$es4.$$set($$this, $$this, $$thisp, 'tx', $es4.$$get(m, $$this, $$thisp, 'a') * tx + $es4.$$get(m, $$this, $$thisp, 'c') * ty + $es4.$$get(m, $$this, $$thisp, 'tx'), '=');
			$es4.$$set($$this, $$this, $$thisp, 'ty', $es4.$$get(m, $$this, $$thisp, 'b') * tx + $es4.$$get(m, $$this, $$thisp, 'd') * ty + $es4.$$get(m, $$this, $$thisp, 'ty'), '=');
		}));

		//method
		$es4.$$public_function('copyColumnFrom', $$thisp, (function ($$$$column, $$$$vector3D)
		{
			//set default parameter values
			var column = $es4.$$coerce($$$$column, uint);
			var vector3D = $es4.$$coerce($$$$vector3D, Vector3D);

			throw $es4.$$primitive(new (Error)('Matrix: attempted call to an unimplemented function "copyColumnFrom"'));
		}));

		//method
		$es4.$$public_function('copyColumnTo', $$thisp, (function ($$$$column, $$$$vector3D)
		{
			//set default parameter values
			var column = $es4.$$coerce($$$$column, uint);
			var vector3D = $es4.$$coerce($$$$vector3D, Vector3D);

			throw $es4.$$primitive(new (Error)('Matrix: attempted call to an unimplemented function "copyColumnTo"'));
		}));

		//method
		$es4.$$public_function('copyFrom', $$thisp, (function ($$$$sourceMatrix)
		{
			//set default parameter values
			var sourceMatrix = $es4.$$coerce($$$$sourceMatrix, $es4.$$['flash.geom'].Matrix);

			throw $es4.$$primitive(new (Error)('Matrix: attempted call to an unimplemented function "copyFrom"'));
		}));

		//method
		$es4.$$public_function('copyRowFrom', $$thisp, (function ($$$$row, $$$$vector3D)
		{
			//set default parameter values
			var row = $es4.$$coerce($$$$row, uint);
			var vector3D = $es4.$$coerce($$$$vector3D, Vector3D);

			throw $es4.$$primitive(new (Error)('Matrix: attempted call to an unimplemented function "copyRowFrom"'));
		}));

		//method
		$es4.$$public_function('copyRowTo', $$thisp, (function ($$$$row, $$$$vector3D)
		{
			//set default parameter values
			var row = $es4.$$coerce($$$$row, uint);
			var vector3D = $es4.$$coerce($$$$vector3D, Vector3D);

			throw $es4.$$primitive(new (Error)('Matrix: attempted call to an unimplemented function "copyRowTo"'));
		}));

		//method
		$es4.$$public_function('createBox', $$thisp, (function ($$$$scaleX, $$$$scaleY, $$$$rotation, $$$$tx, $$$$ty)
		{
			//set default parameter values
			var scaleX = $es4.$$coerce($$$$scaleX, Number);
			var scaleY = $es4.$$coerce($$$$scaleY, Number);
			var rotation = (2 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$rotation, Number);
			var tx = (3 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$tx, Number);
			var ty = (4 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$ty, Number);

			if (rotation === 0)
			{
				$es4.$$set($$this, $$this, $$thisp, 'a', $es4.$$set($$this, $$this, $$thisp, 'd', 1, '='), '=');
				$es4.$$set($$this, $$this, $$thisp, 'b', $es4.$$set($$this, $$this, $$thisp, 'c', 0, '='), '=');
			}
			else
			{
				$es4.$$set($$this, $$this, $$thisp, 'a', $es4.$$call(Math, $$this, $$thisp, 'cos', [rotation]), '=');
				$es4.$$set($$this, $$this, $$thisp, 'b', $es4.$$call(Math, $$this, $$thisp, 'sin', [rotation]), '=');
				$es4.$$set($$this, $$this, $$thisp, 'c', -$es4.$$get($$this, $$this, $$thisp, 'b'), '=');
				$es4.$$set($$this, $$this, $$thisp, 'd', $es4.$$get($$this, $$this, $$thisp, 'a'), '=');
			}
			if (scaleX !== 1)
			{
				$es4.$$set($$this, $$this, $$thisp, 'a', scaleX, '*=');
				$es4.$$set($$this, $$this, $$thisp, 'c', scaleX, '*=');
			}
			if (scaleY !== 1)
			{
				$es4.$$set($$this, $$this, $$thisp, 'b', scaleY, '*=');
				$es4.$$set($$this, $$this, $$thisp, 'd', scaleY, '*=');
			}
			$es4.$$set($$this, $$this, $$thisp, 'tx', tx, '=');
			$es4.$$set($$this, $$this, $$thisp, 'ty', ty, '=');
		}));

		//method
		$es4.$$public_function('createGradientBox', $$thisp, (function ($$$$width, $$$$height, $$$$rotation, $$$$tx, $$$$ty)
		{
			//set default parameter values
			var width = $es4.$$coerce($$$$width, Number);
			var height = $es4.$$coerce($$$$height, Number);
			var rotation = (2 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$rotation, Number);
			var tx = (3 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$tx, Number);
			var ty = (4 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$ty, Number);

			$es4.$$call($$this, $$this, $$thisp, 'createBox', [width / $es4.$$get(Matrix, $$this, $$thisp, 'MAGIC_GRADIENT_FACTOR'), height / $es4.$$get(Matrix, $$this, $$thisp, 'MAGIC_GRADIENT_FACTOR'), rotation, tx + width / 2, ty + height / 2]);
		}));

		//method
		$es4.$$public_function('deltaTransformPoint', $$thisp, (function ($$$$point)
		{
			//set default parameter values
			var point = $es4.$$coerce($$$$point, Point);

			return $es4.$$primitive(new (Point)($es4.$$get($$this, $$this, $$thisp, 'a') * $es4.$$get(point, $$this, $$thisp, 'x') + $es4.$$get($$this, $$this, $$thisp, 'c') * $es4.$$get(point, $$this, $$thisp, 'y'), $es4.$$get($$this, $$this, $$thisp, 'b') * $es4.$$get(point, $$this, $$thisp, 'x') + $es4.$$get($$this, $$this, $$thisp, 'd') * $es4.$$get(point, $$this, $$thisp, 'y')));
		}));

		//method
		$es4.$$public_function('$__deltaTransformPoint', $$thisp, (function ($$$$x, $$$$y)
		{
			//set default parameter values
			var x = $es4.$$coerce($$$$x, Number);
			var y = $es4.$$coerce($$$$y, Number);

			return [$es4.$$get($$this, $$this, $$thisp, 'a') * x + $es4.$$get($$this, $$this, $$thisp, 'c') * y, $es4.$$get($$this, $$this, $$thisp, 'b') * x + $es4.$$get($$this, $$this, $$thisp, 'd') * y];
		}));

		//method
		$es4.$$public_function('identity', $$thisp, (function ()
		{
			$es4.$$set($$this, $$this, $$thisp, 'a', $es4.$$set($$this, $$this, $$thisp, 'd', 1, '='), '=');
			$es4.$$set($$this, $$this, $$thisp, 'b', $es4.$$set($$this, $$this, $$thisp, 'c', $es4.$$set($$this, $$this, $$thisp, 'tx', $es4.$$set($$this, $$this, $$thisp, 'ty', 0, '='), '='), '='), '=');
		}));

		//method
		$es4.$$public_function('invert', $$thisp, (function ()
		{
			var a = $es4.$$coerce($es4.$$get($$this, $$this, $$thisp, 'a'), Number);
			var b = $es4.$$coerce($es4.$$get($$this, $$this, $$thisp, 'b'), Number);
			var c = $es4.$$coerce($es4.$$get($$this, $$this, $$thisp, 'c'), Number);
			var d = $es4.$$coerce($es4.$$get($$this, $$this, $$thisp, 'd'), Number);
			var tx = $es4.$$coerce($es4.$$get($$this, $$this, $$thisp, 'tx'), Number);
			var ty = $es4.$$coerce($es4.$$get($$this, $$this, $$thisp, 'ty'), Number);
			var det = a * d - c * b;
			$es4.$$set($$this, $$this, $$thisp, 'a', d / det, '=');
			$es4.$$set($$this, $$this, $$thisp, 'b', -b / det, '=');
			$es4.$$set($$this, $$this, $$thisp, 'c', -c / det, '=');
			$es4.$$set($$this, $$this, $$thisp, 'd', a / det, '=');
			$es4.$$set($$this, $$this, $$thisp, 'tx', -($es4.$$get($$this, $$this, $$thisp, 'a') * tx + $es4.$$get($$this, $$this, $$thisp, 'c') * ty), '=');
			$es4.$$set($$this, $$this, $$thisp, 'ty', -($es4.$$get($$this, $$this, $$thisp, 'b') * tx + $es4.$$get($$this, $$this, $$thisp, 'd') * ty), '=');
		}));

		//method
		$es4.$$public_function('rotate', $$thisp, (function ($$$$angle)
		{
			//set default parameter values
			var angle = $es4.$$coerce($$$$angle, Number);

			if (angle != 0)
			{
				var cos = $es4.$$call(Math, $$this, $$thisp, 'cos', [angle]);
				var sin = $es4.$$call(Math, $$this, $$thisp, 'sin', [angle]);
				var a = $es4.$$coerce($es4.$$get($$this, $$this, $$thisp, 'a'), Number);
				var b = $es4.$$coerce($es4.$$get($$this, $$this, $$thisp, 'b'), Number);
				var c = $es4.$$coerce($es4.$$get($$this, $$this, $$thisp, 'c'), Number);
				var d = $es4.$$coerce($es4.$$get($$this, $$this, $$thisp, 'd'), Number);
				var tx = $es4.$$coerce($es4.$$get($$this, $$this, $$thisp, 'tx'), Number);
				var ty = $es4.$$coerce($es4.$$get($$this, $$this, $$thisp, 'ty'), Number);
				$es4.$$set($$this, $$this, $$thisp, 'a', a * cos - b * sin, '=');
				$es4.$$set($$this, $$this, $$thisp, 'b', a * sin + b * cos, '=');
				$es4.$$set($$this, $$this, $$thisp, 'c', c * cos - d * sin, '=');
				$es4.$$set($$this, $$this, $$thisp, 'd', c * sin + d * cos, '=');
				$es4.$$set($$this, $$this, $$thisp, 'tx', tx * cos - ty * sin, '=');
				$es4.$$set($$this, $$this, $$thisp, 'ty', tx * sin + ty * cos, '=');
			}
		}));

		//method
		$es4.$$public_function('$__rotate', $$thisp, (function ($$$$angle)
		{
			//set default parameter values
			var angle = $es4.$$coerce($$$$angle, Number);

			if (angle != 0)
			{
				var cos = $es4.$$call(Math, $$this, $$thisp, 'cos', [angle]);
				var sin = $es4.$$call(Math, $$this, $$thisp, 'sin', [angle]);
				var a = $es4.$$coerce($es4.$$get($$this, $$this, $$thisp, 'a'), Number);
				var b = $es4.$$coerce($es4.$$get($$this, $$this, $$thisp, 'b'), Number);
				var c = $es4.$$coerce($es4.$$get($$this, $$this, $$thisp, 'c'), Number);
				var d = $es4.$$coerce($es4.$$get($$this, $$this, $$thisp, 'd'), Number);
				$es4.$$set($$this, $$this, $$thisp, 'a', a * cos - b * sin, '=');
				$es4.$$set($$this, $$this, $$thisp, 'b', a * sin + b * cos, '=');
				$es4.$$set($$this, $$this, $$thisp, 'c', c * cos - d * sin, '=');
				$es4.$$set($$this, $$this, $$thisp, 'd', c * sin + d * cos, '=');
			}
		}));

		//method
		$es4.$$public_function('scale', $$thisp, (function ($$$$sx, $$$$sy)
		{
			//set default parameter values
			var sx = $es4.$$coerce($$$$sx, Number);
			var sy = $es4.$$coerce($$$$sy, Number);

			if (sx !== 1)
			{
				$es4.$$set($$this, $$this, $$thisp, 'a', sx, '*=');
				$es4.$$set($$this, $$this, $$thisp, 'c', sx, '*=');
				$es4.$$set($$this, $$this, $$thisp, 'tx', sx, '*=');
			}
			if (sy !== 1)
			{
				$es4.$$set($$this, $$this, $$thisp, 'b', sy, '*=');
				$es4.$$set($$this, $$this, $$thisp, 'd', sy, '*=');
				$es4.$$set($$this, $$this, $$thisp, 'ty', sy, '*=');
			}
		}));

		//method
		$es4.$$public_function('$__scale', $$thisp, (function ($$$$sx, $$$$sy)
		{
			//set default parameter values
			var sx = $es4.$$coerce($$$$sx, Number);
			var sy = $es4.$$coerce($$$$sy, Number);

			if (sx !== 1)
			{
				$es4.$$set($$this, $$this, $$thisp, 'a', sx, '*=');
				$es4.$$set($$this, $$this, $$thisp, 'c', sx, '*=');
			}
			if (sy !== 1)
			{
				$es4.$$set($$this, $$this, $$thisp, 'b', sy, '*=');
				$es4.$$set($$this, $$this, $$thisp, 'd', sy, '*=');
			}
		}));

		//method
		$es4.$$public_function('setTo', $$thisp, (function ($$$$aa, $$$$ba, $$$$ca, $$$$da, $$$$txa, $$$$tya)
		{
			//set default parameter values
			var aa = $es4.$$coerce($$$$aa, Number);
			var ba = $es4.$$coerce($$$$ba, Number);
			var ca = $es4.$$coerce($$$$ca, Number);
			var da = $es4.$$coerce($$$$da, Number);
			var txa = $es4.$$coerce($$$$txa, Number);
			var tya = $es4.$$coerce($$$$tya, Number);

			$es4.$$set($$this, $$this, $$thisp, 'a', $es4.$$get($$this, $$this, $$thisp, 'a'), '=');
			$es4.$$set($$this, $$this, $$thisp, 'b', $es4.$$get($$this, $$this, $$thisp, 'b'), '=');
			$es4.$$set($$this, $$this, $$thisp, 'c', $es4.$$get($$this, $$this, $$thisp, 'c'), '=');
			$es4.$$set($$this, $$this, $$thisp, 'd', $es4.$$get($$this, $$this, $$thisp, 'd'), '=');
			$es4.$$set($$this, $$this, $$thisp, 'tx', $es4.$$get($$this, $$this, $$thisp, 'tx'), '=');
			$es4.$$set($$this, $$this, $$thisp, 'ty', $es4.$$get($$this, $$this, $$thisp, 'ty'), '=');
		}));

		//method
		$es4.$$public_function('toString', $$thisp, (function ()
		{
			return "(" + $es4.$$call(["a=" + $es4.$$get($$this, $$this, $$thisp, 'a'), "b=" + $es4.$$get($$this, $$this, $$thisp, 'b'), "c=" + $es4.$$get($$this, $$this, $$thisp, 'c'), "d=" + $es4.$$get($$this, $$this, $$thisp, 'd'), "tx=" + $es4.$$get($$this, $$this, $$thisp, 'tx'), "ty=" + $es4.$$get($$this, $$this, $$thisp, 'ty')], $$this, $$thisp, 'join', [", "]) + ")";
		}));

		//method
		$es4.$$public_function('transformPoint', $$thisp, (function ($$$$point)
		{
			//set default parameter values
			var point = $es4.$$coerce($$$$point, Point);

			return $es4.$$primitive(new (Point)($es4.$$get($$this, $$this, $$thisp, 'a') * $es4.$$get(point, $$this, $$thisp, 'x') + $es4.$$get($$this, $$this, $$thisp, 'c') * $es4.$$get(point, $$this, $$thisp, 'y') + $es4.$$get($$this, $$this, $$thisp, 'tx'), $es4.$$get($$this, $$this, $$thisp, 'b') * $es4.$$get(point, $$this, $$thisp, 'x') + $es4.$$get($$this, $$this, $$thisp, 'd') * $es4.$$get(point, $$this, $$thisp, 'y') + $es4.$$get($$this, $$this, $$thisp, 'ty')));
		}));

		//method
		$es4.$$public_function('$__transformPoint', $$thisp, (function ($$$$x, $$$$y)
		{
			//set default parameter values
			var x = $es4.$$coerce($$$$x, Number);
			var y = $es4.$$coerce($$$$y, Number);

			return [$es4.$$get($$this, $$this, $$thisp, 'a') * x + $es4.$$get($$this, $$this, $$thisp, 'c') * y + $es4.$$get($$this, $$this, $$thisp, 'tx'), $es4.$$get($$this, $$this, $$thisp, 'b') * x + $es4.$$get($$this, $$this, $$thisp, 'd') * y + $es4.$$get($$this, $$this, $$thisp, 'ty')];
		}));

		//method
		$es4.$$public_function('translate', $$thisp, (function ($$$$dx, $$$$dy)
		{
			//set default parameter values
			var dx = $es4.$$coerce($$$$dx, Number);
			var dy = $es4.$$coerce($$$$dy, Number);

			$es4.$$set($$this, $$this, $$thisp, 'tx', dx, '+=');
			$es4.$$set($$this, $$this, $$thisp, 'ty', dy, '+=');
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(Matrix, null, 'flash.geom::Matrix');
})();
//flash.geom.Matrix


//flash.text.engine.TabStop
$es4.$$package('flash.text.engine').TabStop = function () { throw new Error('Use of unimplemented class: TabStop'); }
//flash.text.engine.TabStop


//flash.net.NetStreamMulticastInfo
$es4.$$package('flash.net').NetStreamMulticastInfo = function () { throw new Error('Use of unimplemented class: NetStreamMulticastInfo'); }
//flash.net.NetStreamMulticastInfo


//flash.text.engine.FontMetrics
$es4.$$package('flash.text.engine').FontMetrics = function () { throw new Error('Use of unimplemented class: FontMetrics'); }
//flash.text.engine.FontMetrics


//flash.ui.MouseCursor
$es4.$$package('flash.ui').MouseCursor = (function ()
{
	//properties
	MouseCursor.ARROW = "arrow";
	MouseCursor.AUTO = "auto";
	MouseCursor.BUTTON = "button";
	MouseCursor.HAND = "hand";
	MouseCursor.IBEAM = "ibeam";

	//class initializer
	MouseCursor.$$cinit = (function ()
	{
		MouseCursor.$$cinit = undefined;

	});

	function MouseCursor()
	{
		//initialize class if not initialized
		if (MouseCursor.$$cinit !== undefined) MouseCursor.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof MouseCursor) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], MouseCursor) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(MouseCursor, null, 'flash.ui::MouseCursor');
})();
//flash.ui.MouseCursor


//flash.events.ActivityEvent
$es4.$$package('flash.events').ActivityEvent = function () { throw new Error('Use of unimplemented class: ActivityEvent'); }
//flash.events.ActivityEvent


//flash.display.GraphicsPath
$es4.$$package('flash.display').GraphicsPath = function () { throw new Error('Use of unimplemented class: GraphicsPath'); }
//flash.display.GraphicsPath


//flash.events.DRMStatusEvent
$es4.$$package('flash.events').DRMStatusEvent = function () { throw new Error('Use of unimplemented class: DRMStatusEvent'); }
//flash.events.DRMStatusEvent


//flash.net.GroupSpecifier
$es4.$$package('flash.net').GroupSpecifier = function () { throw new Error('Use of unimplemented class: GroupSpecifier'); }
//flash.net.GroupSpecifier


//flash.events.KeyboardEvent
$es4.$$package('flash.events').KeyboardEvent = (function ()
{
	//imports
	var Event;
	var KeyboardEvent;

	//properties
	KeyboardEvent.KEY_DOWN = "keyDown";
	KeyboardEvent.KEY_UP = "keyUp";

	//class initializer
	KeyboardEvent.$$cinit = (function ()
	{
		KeyboardEvent.$$cinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;
	});

	function KeyboardEvent()
	{
		//initialize class if not initialized
		if (KeyboardEvent.$$cinit !== undefined) KeyboardEvent.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof KeyboardEvent) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], KeyboardEvent) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('_charCode', $$thisp, uint);
		$es4.$$private_property('_keyCode', $$thisp, uint);
		$es4.$$private_property('_keyLocation', $$thisp, uint);
		$es4.$$private_property('_ctrlKey', $$thisp, Boolean);
		$es4.$$private_property('_altKey', $$thisp, Boolean);
		$es4.$$private_property('_shiftKey', $$thisp, Boolean);

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$type, $$$$bubbles, $$$$cancelable, $$$$charCodeValue, $$$$keyCodeValue, $$$$keyLocationValue, $$$$ctrlKeyValue, $$$$altKeyValue, $$$$shiftKeyValue)
		{
			//set default parameter values
			var type = $es4.$$coerce($$$$type, String);
			var bubbles = (1 > arguments.length - 1) ? true : $es4.$$coerce($$$$bubbles, Boolean);
			var cancelable = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$cancelable, Boolean);
			var charCodeValue = (3 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$charCodeValue, uint);
			var keyCodeValue = (4 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$keyCodeValue, uint);
			var keyLocationValue = (5 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$keyLocationValue, uint);
			var ctrlKeyValue = (6 > arguments.length - 1) ? false : $es4.$$coerce($$$$ctrlKeyValue, Boolean);
			var altKeyValue = (7 > arguments.length - 1) ? false : $es4.$$coerce($$$$altKeyValue, Boolean);
			var shiftKeyValue = (8 > arguments.length - 1) ? false : $es4.$$coerce($$$$shiftKeyValue, Boolean);

			$es4.$$super($$thisp).$$z(type, bubbles, cancelable);
			$es4.$$set($$thisp, $$this, $$thisp, '_charCode', charCodeValue, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_keyCode', keyCodeValue, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_keyLocation', keyLocationValue, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_ctrlKey', ctrlKeyValue, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_altKey', altKeyValue, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_shiftKey', shiftKeyValue, '=');
		}));

		//method
		$es4.$$public_function('clone', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$primitive(new (KeyboardEvent)($es4.$$get($$this, $$this, $$thisp, 'type'), $es4.$$get($$this, $$this, $$thisp, 'bubbles'), $es4.$$get($$this, $$this, $$thisp, 'cancelable'), $es4.$$get($$thisp, $$this, $$thisp, '_charCode'), $es4.$$get($$thisp, $$this, $$thisp, '_keyCode'), $es4.$$get($$thisp, $$this, $$thisp, '_keyLocation'), $es4.$$get($$thisp, $$this, $$thisp, '_ctrlKey'), $es4.$$get($$thisp, $$this, $$thisp, '_altKey'), $es4.$$get($$thisp, $$this, $$thisp, '_shiftKey'))), Event);
		}));

		//method
		$es4.$$public_function('toString', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('KeyboardEvent: attempted call to an unimplemented function "toString"'));
		}));

		//method
		$es4.$$public_function('updateAfterEvent', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('KeyboardEvent: attempted call to an unimplemented function "updateAfterEvent"'));
		}));

		//accessor
		$es4.$$public_accessor('altKey', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_altKey');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			$es4.$$set($$thisp, $$this, $$thisp, '_altKey', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('charCode', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_charCode');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, uint);

			$es4.$$set($$thisp, $$this, $$thisp, '_charCode', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('ctrlKey', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_ctrlKey');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			$es4.$$set($$thisp, $$this, $$thisp, '_ctrlKey', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('keyCode', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_keyCode');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, uint);

			$es4.$$set($$thisp, $$this, $$thisp, '_keyCode', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('keyLocation', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_keyLocation');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, uint);

			$es4.$$set($$thisp, $$this, $$thisp, '_keyLocation', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('shiftKey', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_shiftKey');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			$es4.$$set($$thisp, $$this, $$thisp, '_shiftKey', $es4.$$get($$this, $$this, $$thisp, 'shiftKey'), '=');
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(KeyboardEvent, {EXTENDS:'flash.events.Event'}, 'flash.events::KeyboardEvent');
})();
//flash.events.KeyboardEvent


//flash.utils.Proxy
$es4.$$package('flash.utils').Proxy = (function ()
{
	//imports
	var flash_proxy;

	//class initializer
	Proxy.$$cinit = (function ()
	{
		Proxy.$$cinit = undefined;

		//initialize imports
		flash_proxy = $es4.$$['flash.utils'].flash_proxy;
	});

	function Proxy()
	{
		//initialize class if not initialized
		if (Proxy.$$cinit !== undefined) Proxy.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof Proxy) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Proxy) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('$$isProxy', $$thisp, Boolean);
		$es4.$$private_property('$keys', $$thisp, Array);
		$es4.$$private_property('$values', $$thisp, Array);

		//initializer
		$es4.$$iinit($$thisp, (function ()
		{
			//initialize properties
			$es4.$$set($$this, $$this, $$thisp, '$$isProxy', true, '=');
			$es4.$$set($$this, $$this, $$thisp, '$keys', [], '=');
			$es4.$$set($$this, $$this, $$thisp, '$values', [], '=');
		}));

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//custom namespace method
		$es4.$$cnamespace_function('deleteProperty', $$this, $$thisp, $['flash.utils'].flash_proxy, (function ($$$$name)
		{
			//set default parameter values
			var name = $$$$name;

			for (var i = 0; i < $es4.$$get($$thisp, $$this, $$thisp, '$keys', 'length'); i++)
			{
				if ($es4.$$get($$thisp, $$this, $$thisp, '$keys', i) == name)
				{
					break;
				}
			}
			if (i == $es4.$$get($$thisp, $$this, $$thisp, '$keys', 'length'))
			{
				return false;
			}
			$es4.$$call($$thisp, $$this, $$thisp, '$keys', 'splice', [i, 1]);
			$es4.$$call($$thisp, $$this, $$thisp, '$values', 'splice', [i, 1]);
			return true;
		}));

		//custom namespace method
		$es4.$$cnamespace_function('getProperty', $$this, $$thisp, $['flash.utils'].flash_proxy, (function ($$$$name)
		{
			//set default parameter values
			var name = $$$$name;

			for (var i = 0; i < $es4.$$get($$thisp, $$this, $$thisp, '$keys', 'length'); i++)
			{
				if ($es4.$$get($$thisp, $$this, $$thisp, '$keys', i) == name)
				{
					break;
				}
			}
			if (i == $es4.$$get($$thisp, $$this, $$thisp, '$keys', 'length'))
			{
				return undefined;
			}
			return $es4.$$get($$thisp, $$this, $$thisp, '$values', i);
		}));

		//custom namespace method
		$es4.$$cnamespace_function('setProperty', $$this, $$thisp, $['flash.utils'].flash_proxy, (function ($$$$name, $$$$value)
		{
			//set default parameter values
			var name = $$$$name;
			var value = $$$$value;

			for (var i = 0; i < $es4.$$get($$thisp, $$this, $$thisp, '$keys', 'length'); i++)
			{
				if ($es4.$$get($$thisp, $$this, $$thisp, '$keys', i) == name)
				{
					break;
				}
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$keys', i, name, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$values', i, value, '=');
		}));

		//custom namespace method
		$es4.$$cnamespace_function('hasProperty', $$this, $$thisp, $['flash.utils'].flash_proxy, (function ($$$$name)
		{
			//set default parameter values
			var name = $$$$name;

			for (var i = 0; i < $es4.$$get($$thisp, $$this, $$thisp, '$keys', 'length'); i++)
			{
				if ($es4.$$get($$thisp, $$this, $$thisp, '$keys', i) == name)
				{
					return true;
				}
			}
			return false;
		}));

		//custom namespace method
		$es4.$$cnamespace_function('nextName', $$this, $$thisp, $['flash.utils'].flash_proxy, (function ($$$$index)
		{
			//set default parameter values
			var index = $es4.$$coerce($$$$index, int);

			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$keys', index - 1), String);
		}));

		//custom namespace method
		$es4.$$cnamespace_function('nextNameIndex', $$this, $$thisp, $['flash.utils'].flash_proxy, (function ($$$$index)
		{
			//set default parameter values
			var index = $es4.$$coerce($$$$index, int);

			return (index < $es4.$$get($$thisp, $$this, $$thisp, '$keys', 'length')) ? index + 1 : 0;
		}));

		//custom namespace method
		$es4.$$cnamespace_function('nextValue', $$this, $$thisp, $['flash.utils'].flash_proxy, (function ($$$$index)
		{
			//set default parameter values
			var index = $es4.$$coerce($$$$index, int);

			return $es4.$$get($$thisp, $$this, $$thisp, '$values', index - 1);
		}));

		//custom namespace method
		$es4.$$cnamespace_function('callProperty', $$this, $$thisp, $['flash.utils'].flash_proxy, (function ($$$$name, $$$$rest)
		{
			//set default parameter values
			var name = $$$$name;
			for (var $$i = 1, $$length = arguments.length, rest = new Array($$length - 1); $$i < $$length; $$i += 1) rest[$$i - 1] = arguments[$$i];

			for (var i = 0; i < $es4.$$get($$thisp, $$this, $$thisp, '$keys', 'length'); i++)
			{
				if ($es4.$$get($$thisp, $$this, $$thisp, '$keys', i) == name)
				{
					break;
				}
			}
			if (i == $es4.$$get($$thisp, $$this, $$thisp, '$keys', 'length'))
			{
				throw $es4.$$primitive(new (Error)('property not found'));
			}
			return $es4.$$call($$thisp, $$this, $$thisp, '$values', i, 'apply', [$$this, rest]);
		}));

		//custom namespace method
		$es4.$$cnamespace_function('getDescendants', $$this, $$thisp, $['flash.utils'].flash_proxy, (function ($$$$name)
		{
			//set default parameter values
			var name = $$$$name;

			throw $es4.$$primitive(new (Error)('Proxy: not implemented'));
		}));

		//custom namespace method
		$es4.$$cnamespace_function('isAttribute', $$this, $$thisp, $['flash.utils'].flash_proxy, (function ($$$$name)
		{
			//set default parameter values
			var name = $$$$name;

			throw $es4.$$primitive(new (Error)('Proxy: not implemented'));
		}));

		//method
		$es4.$$private_function('$$get', $$thisp, (function ($$$$key)
		{
			//set default parameter values
			var key = $$$$key;

			return $es4.$$call($es4.$$get($$this, $$this, $$thisp).$$namespace($$this.flash_proxy), $$this, $$thisp, 'getProperty', [key]);
		}));

		//method
		$es4.$$private_function('$$set', $$thisp, (function ($$$$key, $$$$value)
		{
			//set default parameter values
			var key = $$$$key;
			var value = $$$$value;

			$es4.$$call($es4.$$get($$this, $$this, $$thisp).$$namespace($$this.flash_proxy), $$this, $$thisp, 'setProperty', [key, value]);
			return value;
		}));

		//method
		$es4.$$private_function('$$call', $$thisp, (function ($$$$name, $$$$args)
		{
			//set default parameter values
			var name = $$$$name;
			var args = $es4.$$coerce($$$$args, Array);

			$es4.$$call(args, $$this, $$thisp, 'unshift', [name]);
			return $es4.$$call($es4.$$get($$this, $$this, $$thisp).$$namespace($$this.flash_proxy), $$this, $$thisp, 'callProperty', 'apply', [$$this, args]);
		}));

		//method
		$es4.$$private_function('$$delete', $$thisp, (function ($$$$key)
		{
			//set default parameter values
			var key = $$$$key;

			return $es4.$$call($es4.$$get($$this, $$this, $$thisp).$$namespace($$this.flash_proxy), $$this, $$thisp, 'deleteProperty', [key]);
		}));

		//method
		$es4.$$private_function('$$nextName', $$thisp, (function ($$$$index)
		{
			//set default parameter values
			var index = $es4.$$coerce($$$$index, int);

			return $es4.$$call($es4.$$get($$this, $$this, $$thisp).$$namespace($$this.flash_proxy), $$this, $$thisp, 'nextName', [index]);
		}));

		//method
		$es4.$$private_function('$$nextNameIndex', $$thisp, (function ($$$$index)
		{
			//set default parameter values
			var index = $es4.$$coerce($$$$index, int);

			return $es4.$$call($es4.$$get($$this, $$this, $$thisp).$$namespace($$this.flash_proxy), $$this, $$thisp, 'nextNameIndex', [index]);
		}));

		//method
		$es4.$$private_function('$$nextValue', $$thisp, (function ($$$$index)
		{
			//set default parameter values
			var index = $es4.$$coerce($$$$index, int);

			return $es4.$$call($es4.$$get($$this, $$this, $$thisp).$$namespace($$this.flash_proxy), $$this, $$thisp, 'nextValue', [index]);
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(Proxy, null, 'flash.utils::Proxy');
})();
//flash.utils.Proxy


//flash.text.engine.CFFHinting
$es4.$$package('flash.text.engine').CFFHinting = function () { throw new Error('Use of unimplemented class: CFFHinting'); }
//flash.text.engine.CFFHinting


//flash.geom.Transform
$es4.$$package('flash.geom').Transform = (function ()
{
	//imports
	var DisplayObject;
	var ColorTransform;
	var Matrix;
	var Matrix3D;
	var PerspectiveProjection;
	var Rectangle;

	//class initializer
	Transform.$$cinit = (function ()
	{
		Transform.$$cinit = undefined;

		//initialize imports
		DisplayObject = $es4.$$['flash.display'].DisplayObject;
		ColorTransform = $es4.$$['flash.geom'].ColorTransform;
		Matrix = $es4.$$['flash.geom'].Matrix;
		Matrix3D = $es4.$$['flash.geom'].Matrix3D;
		PerspectiveProjection = $es4.$$['flash.geom'].PerspectiveProjection;
		Rectangle = $es4.$$['flash.geom'].Rectangle;
	});

	function Transform()
	{
		//initialize class if not initialized
		if (Transform.$$cinit !== undefined) Transform.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof Transform) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Transform) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('_displayObject', $$thisp, DisplayObject);

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$displayObject)
		{
			//set default parameter values
			var displayObject = $es4.$$coerce($$$$displayObject, DisplayObject);

			$es4.$$set($$thisp, $$this, $$thisp, '_displayObject', displayObject, '=');
		}));

		//method
		$es4.$$public_function('getRelativeMatrix3D', $$thisp, (function ($$$$relativeTo)
		{
			//set default parameter values
			var relativeTo = $es4.$$coerce($$$$relativeTo, DisplayObject);

			throw $es4.$$primitive(new (Error)('Transform: attempted call to an unimplemented function "getRelativeMatrix3D"'));
		}));

		//accessor
		$es4.$$public_accessor('colorTransform', $$thisp, (function ()
		{
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, ColorTransform);

		}));

		//accessor
		$es4.$$public_accessor('concatenatedColorTransform', $$thisp, (function ()
		{
		}), null);

		//accessor
		$es4.$$public_accessor('concatenatedMatrix', $$thisp, (function ()
		{
			var concMatrix = $es4.$$coerce($es4.$$get($es4.$$call($$thisp, $$this, $$thisp, '_displayObject', '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope', '$_matrix'), Matrix);
			var currentDO = $es4.$$get($$thisp, $$this, $$thisp, '_displayObject', 'parent');
			while (currentDO)
			{
				$es4.$$call(concMatrix, $$this, $$thisp, 'concat', [$es4.$$get(currentDO, $$this, $$thisp, 'transform', 'matrix')]);
				currentDO = $es4.$$get(currentDO, $$this, $$thisp, 'parent');
			}
			return concMatrix;
		}), null);

		//accessor
		$es4.$$public_accessor('matrix', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$call($es4.$$call($$thisp, $$this, $$thisp, '_displayObject', '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope', '$_matrix', 'clone', $es4.$$EMPTY_ARRAY), Matrix);
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Matrix);

		}));

		//accessor
		$es4.$$public_accessor('matrix3D', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Transform: attempted call to an unimplemented function "matrix3D"'));
		}), (function ($$$$m)
		{
			//set default parameter values
			var m = $es4.$$coerce($$$$m, Matrix3D);

			throw $es4.$$primitive(new (Error)('Transform: attempted call to an unimplemented function "matrix3D"'));
		}));

		//accessor
		$es4.$$public_accessor('perspectiveProjection', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Transform: attempted call to an unimplemented function "perspectiveProjection"'));
		}), (function ($$$$pm)
		{
			//set default parameter values
			var pm = $es4.$$coerce($$$$pm, PerspectiveProjection);

			throw $es4.$$primitive(new (Error)('Transform: attempted call to an unimplemented function "perspectiveProjection"'));
		}));

		//accessor
		$es4.$$public_accessor('pixelBounds', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Transform: attempted call to an unimplemented function "pixelBounds"'));
		}), null);

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(Transform, null, 'flash.geom::Transform');
})();
//flash.geom.Transform


//flash.system.ApplicationDomain
$es4.$$package('flash.system').ApplicationDomain = (function ()
{
	//imports
	var Stage;
	var ByteArray;
	var getDefinitionByName;
	var ApplicationDomain;

	//class initializer
	ApplicationDomain.$$cinit = (function ()
	{
		ApplicationDomain.$$cinit = undefined;

		//initialize imports
		Stage = $es4.$$['flash.display'].Stage;
		ByteArray = $es4.$$['flash.utils'].ByteArray;
		getDefinitionByName = $es4.$$['flash.utils'].getDefinitionByName;
	});

	//accessor
	$es4.$$public_accessor('currentDomain', ApplicationDomain, (function ()
	{
		if (ApplicationDomain.$$cinit !== undefined) ApplicationDomain.$$cinit();

		return $es4.$$get(Stage, null, null, '$__stageReference', 'loaderInfo', 'applicationDomain');
	}), null);

	//accessor
	$es4.$$public_accessor('MIN_DOMAIN_MEMORY_LENGTH', ApplicationDomain, (function ()
	{
		if (ApplicationDomain.$$cinit !== undefined) ApplicationDomain.$$cinit();

		throw $es4.$$primitive(new (Error)('ApplicationDomain: attempted call to an unimplemented function "MIN_DOMAIN_MEMORY_LENGTH"'));
	}), null);

	function ApplicationDomain()
	{
		//initialize class if not initialized
		if (ApplicationDomain.$$cinit !== undefined) ApplicationDomain.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof ApplicationDomain) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], ApplicationDomain) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$public_property('$__definitions', $$thisp, Object);

		//initializer
		$es4.$$iinit($$thisp, (function ()
		{
			//initialize properties
			$es4.$$set($$this, $$this, $$thisp, '$__definitions', {}, '=');
		}));

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$parentDomain)
		{
			//set default parameter values
			var parentDomain = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$parentDomain, $es4.$$['flash.system'].ApplicationDomain);

		}));

		//method
		$es4.$$public_function('getDefinition', $$thisp, (function ($$$$name)
		{
			//set default parameter values
			var name = $es4.$$coerce($$$$name, String);

			var definitions = $es4.$$get($$this, $$this, $$thisp, '$__definitions');
			if ($es4.$$get(definitions, $$this, $$thisp, name) !== undefined)
			{
				return $es4.$$get(definitions, $$this, $$thisp, name);
			}
			return $es4.$$call($es4.$$['flash.utils'], $$this, $$thisp, 'getDefinitionByName', [name]);
		}));

		//method
		$es4.$$public_function('hasDefinition', $$thisp, (function ($$$$name)
		{
			//set default parameter values
			var name = $es4.$$coerce($$$$name, String);

			throw $es4.$$primitive(new (Error)('ApplicationDomain: attempted call to an unimplemented function "hasDefinition"'));
		}));

		//accessor
		$es4.$$public_accessor('domainMemory', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('ApplicationDomain: attempted call to an unimplemented function "domainMemory"'));
		}), (function ($$$$mem)
		{
			//set default parameter values
			var mem = $es4.$$coerce($$$$mem, ByteArray);

			throw $es4.$$primitive(new (Error)('ApplicationDomain: attempted call to an unimplemented function "domainMemory"'));
		}));

		//accessor
		$es4.$$public_accessor('parentDomain', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('ApplicationDomain: attempted call to an unimplemented function "parentDomain"'));
		}), null);

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(ApplicationDomain, null, 'flash.system::ApplicationDomain');
})();
//flash.system.ApplicationDomain


//flash.events.IMEEvent
$es4.$$package('flash.events').IMEEvent = function () { throw new Error('Use of unimplemented class: IMEEvent'); }
//flash.events.IMEEvent


//flash.net.NetStreamAppendBytesAction
$es4.$$package('flash.net').NetStreamAppendBytesAction = function () { throw new Error('Use of unimplemented class: NetStreamAppendBytesAction'); }
//flash.net.NetStreamAppendBytesAction


//flash.text.GridFitType
$es4.$$package('flash.text').GridFitType = function () { throw new Error('Use of unimplemented class: GridFitType'); }
//flash.text.GridFitType


//flash.net.NetGroupReplicationStrategy
$es4.$$package('flash.net').NetGroupReplicationStrategy = function () { throw new Error('Use of unimplemented class: NetGroupReplicationStrategy'); }
//flash.net.NetGroupReplicationStrategy


//flash.display.ColorCorrection
$es4.$$package('flash.display').ColorCorrection = (function ()
{
	//properties
	ColorCorrection.DEFAULT = "default";
	ColorCorrection.OFF = "off";
	ColorCorrection.ON = "on";

	//class initializer
	ColorCorrection.$$cinit = (function ()
	{
		ColorCorrection.$$cinit = undefined;

	});

	function ColorCorrection()
	{
		//initialize class if not initialized
		if (ColorCorrection.$$cinit !== undefined) ColorCorrection.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof ColorCorrection) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], ColorCorrection) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(ColorCorrection, null, 'flash.display::ColorCorrection');
})();
//flash.display.ColorCorrection


//flash.sensors.Accelerometer
$es4.$$package('flash.sensors').Accelerometer = function () { throw new Error('Use of unimplemented class: Accelerometer'); }
//flash.sensors.Accelerometer


//flash.display.GraphicsBitmapFill
$es4.$$package('flash.display').GraphicsBitmapFill = function () { throw new Error('Use of unimplemented class: GraphicsBitmapFill'); }
//flash.display.GraphicsBitmapFill


//flash.text.TextFieldType
$es4.$$package('flash.text').TextFieldType = (function ()
{
	//properties
	TextFieldType.DYNAMIC = "dynamic";
	TextFieldType.INPUT = "input";

	//class initializer
	TextFieldType.$$cinit = (function ()
	{
		TextFieldType.$$cinit = undefined;

	});

	function TextFieldType()
	{
		//initialize class if not initialized
		if (TextFieldType.$$cinit !== undefined) TextFieldType.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof TextFieldType) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], TextFieldType) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(TextFieldType, null, 'flash.text::TextFieldType');
})();
//flash.text.TextFieldType


//flash.text.engine.TextElement
$es4.$$package('flash.text.engine').TextElement = function () { throw new Error('Use of unimplemented class: TextElement'); }
//flash.text.engine.TextElement


//flash.accessibility.AccessibilityImplementation
$es4.$$package('flash.accessibility').AccessibilityImplementation = function () { throw new Error('Use of unimplemented class: AccessibilityImplementation'); }
//flash.accessibility.AccessibilityImplementation


//flash.display.BlendMode
$es4.$$package('flash.display').BlendMode = function () { throw new Error('Use of unimplemented class: BlendMode'); }
//flash.display.BlendMode


//flash.ui.ContextMenuClipboardItems
$es4.$$package('flash.ui').ContextMenuClipboardItems = function () { throw new Error('Use of unimplemented class: ContextMenuClipboardItems'); }
//flash.ui.ContextMenuClipboardItems


//flash.net.NetGroupReceiveMode
$es4.$$package('flash.net').NetGroupReceiveMode = function () { throw new Error('Use of unimplemented class: NetGroupReceiveMode'); }
//flash.net.NetGroupReceiveMode


//flash.events.ErrorEvent
$es4.$$package('flash.events').ErrorEvent = (function ()
{
	//imports
	var ErrorEvent;
	var Event;
	var TextEvent;

	//properties
	ErrorEvent.ERROR = 'error';

	//class initializer
	ErrorEvent.$$cinit = (function ()
	{
		ErrorEvent.$$cinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;
		TextEvent = $es4.$$['flash.events'].TextEvent;
	});

	function ErrorEvent()
	{
		//initialize class if not initialized
		if (ErrorEvent.$$cinit !== undefined) ErrorEvent.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof ErrorEvent) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], ErrorEvent) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('_errorID', $$thisp, int);

		//initializer
		$es4.$$iinit($$thisp, (function ()
		{
			//initialize properties
			$es4.$$set($$this, $$this, $$thisp, '_errorID', 0, '=');
		}));

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$type, $$$$bubbles, $$$$cancelable, $$$$text, $$$$id)
		{
			//set default parameter values
			var type = $es4.$$coerce($$$$type, String);
			var bubbles = (1 > arguments.length - 1) ? false : $es4.$$coerce($$$$bubbles, Boolean);
			var cancelable = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$cancelable, Boolean);
			var text = (3 > arguments.length - 1) ? "" : $es4.$$coerce($$$$text, String);
			var id = (4 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$id, int);

			$es4.$$super($$thisp).$$z(type, bubbles, cancelable, text);
			$es4.$$set($$thisp, $$this, $$thisp, '_errorID', id, '=');
		}));

		//method
		$es4.$$public_function('clone', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$primitive(new (ErrorEvent)($es4.$$get($$this, $$this, $$thisp, 'type'), $es4.$$get($$this, $$this, $$thisp, 'bubbles'), $es4.$$get($$this, $$this, $$thisp, 'cancelable'), $es4.$$get($$this, $$this, $$thisp, 'text'), $es4.$$get($$this, $$this, $$thisp, 'errorID'))), Event);
		}));

		//method
		$es4.$$public_function('toString', $$thisp, (function ()
		{
			return $es4.$$call($$this, $$this, $$thisp, 'formatToString', ['ErrorEvent', 'bubbles', 'cancelable', 'text', 'errorID']);
		}));

		//accessor
		$es4.$$public_accessor('errorID', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_errorID');
		}), null);

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(ErrorEvent, {EXTENDS:'flash.events.TextEvent'}, 'flash.events::ErrorEvent');
})();
//flash.events.ErrorEvent


//flash.globalization.DateTimeNameStyle
$es4.$$package('flash.globalization').DateTimeNameStyle = function () { throw new Error('Use of unimplemented class: DateTimeNameStyle'); }
//flash.globalization.DateTimeNameStyle


//flash.display.StageScaleMode
$es4.$$package('flash.display').StageScaleMode = (function ()
{
	//properties
	StageScaleMode.EXACT_FIT = "exactFit";
	StageScaleMode.NO_BORDER = "noBorder";
	StageScaleMode.NO_SCALE = "noScale";
	StageScaleMode.SHOW_ALL = "showAll";

	//class initializer
	StageScaleMode.$$cinit = (function ()
	{
		StageScaleMode.$$cinit = undefined;

	});

	function StageScaleMode()
	{
		//initialize class if not initialized
		if (StageScaleMode.$$cinit !== undefined) StageScaleMode.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof StageScaleMode) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], StageScaleMode) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(StageScaleMode, null, 'flash.display::StageScaleMode');
})();
//flash.display.StageScaleMode


//flash.text.TextColorType
$es4.$$package('flash.text').TextColorType = function () { throw new Error('Use of unimplemented class: TextColorType'); }
//flash.text.TextColorType


//flash.display.Bitmap
$es4.$$package('flash.display').Bitmap = (function ()
{
	//imports
	var Bitmap;
	var BitmapData;
	var DisplayObject;

	//class initializer
	Bitmap.$$cinit = (function ()
	{
		Bitmap.$$cinit = undefined;

		//initialize imports
		BitmapData = $es4.$$['flash.display'].BitmapData;
		DisplayObject = $es4.$$['flash.display'].DisplayObject;
	});

	function Bitmap()
	{
		//initialize class if not initialized
		if (Bitmap.$$cinit !== undefined) Bitmap.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof Bitmap) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Bitmap) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('$_properties', $$thisp);

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$bitmapData, $$$$pixelSnapping, $$$$smoothing)
		{
			//set default parameter values
			var bitmapData = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$bitmapData, BitmapData);
			var pixelSnapping = (1 > arguments.length - 1) ? 'auto' : $es4.$$coerce($$$$pixelSnapping, String);
			var smoothing = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$smoothing, Boolean);

			var properties = $es4.$$get($$thisp, $$this, $$thisp, '$_properties') || $es4.$$call($$this, $$this, $$thisp, '$__properties', [{}]);
			$es4.$$super($$thisp).$$z();
			$es4.$$set(properties, $$this, $$thisp, 'BitmapScope', '$_pixelSnapping', pixelSnapping, '=');
			$es4.$$set(properties, $$this, $$thisp, 'BitmapScope', '$_smoothing', smoothing, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'style', 'pointerEvents', 'inherit', '=');
			if (bitmapData !== null)
			{
				$es4.$$call($$thisp, $$this, $$thisp, 'setBitmapData', [bitmapData]);
			}
		}));

		//method
		$es4.$$public_function('$__properties', $$thisp, (function ($$$$object)
		{
			//set default parameter values
			var object = (0 > arguments.length - 1) ? null : $$$$object;

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties') === undefined)
			{
				object = $es4.$$call($es4.$$super($$thisp), $$this, $$thisp, '$__properties', [object]);
				var pscope = $es4.$$call($es4, $$this, $$thisp, '$$getOwnScope', [$$this, Bitmap]);
				$es4.$$set(object, $$this, $$thisp, 'BitmapScope', {pscope:pscope}, '=');
				$es4.$$set(object, $$this, $$thisp, 'TLScope', $$this, '=');
				return $es4.$$set($$thisp, $$this, $$thisp, '$_properties', object, '=');
			}
			return $es4.$$get($$thisp, $$this, $$thisp, '$_properties');
		}));

		//method
		$es4.$$protected_function('$__createDomView', $$thisp, (function ()
		{
			var canvas = $es4.$$call(document, $$this, $$thisp, 'createElement', ['canvas']);
			$es4.$$call(canvas, $$this, $$thisp, 'setAttribute', ['tabindex', -1]);
			return canvas;
		}));

		//method
		$es4.$$private_function('setBitmapData', $$thisp, (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, BitmapData);

			var properties = $es4.$$get($$thisp, $$this, $$thisp, '$_properties');
			var canvas = $es4.$$get(properties, $$this, $$thisp, 'DisplayObjectScope', '$_domView');
			var bitmapDataProperties;
			if (value === null)
			{
				var bitmapData = $es4.$$coerce($es4.$$get(properties, $$this, $$thisp, 'BitmapScope', '$_bitmapData'), BitmapData);
				if (bitmapData)
				{
					bitmapDataProperties = $es4.$$call(bitmapData, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY);
					$es4.$$set(bitmapDataProperties, $$this, $$thisp, 'BitmapDataScope', '$_canvas', null, '=');
					$es4.$$call(bitmapDataProperties, $$this, $$thisp, 'BitmapDataScope', '$_createOrGetCanvas', [bitmapData]);
				}
				$es4.$$set(properties, $$this, $$thisp, 'BitmapScope', '$_bitmapData', null, '=');
				$es4.$$call($es4.$$call(canvas, $$this, $$thisp, 'getContext', ['2d']), $$this, $$thisp, 'clearRect', [0, 0, $es4.$$get(canvas, $$this, $$thisp, 'width'), $es4.$$get(canvas, $$this, $$thisp, 'height')]);
				$es4.$$set(canvas, $$this, $$thisp, 'width', 0, '=');
				$es4.$$set(canvas, $$this, $$thisp, 'height', 0, '=');
				$es4.$$call(properties, $$this, $$thisp, 'DisplayObjectScope', '$_setExplicitBounds', [0, 0]);
				return;
			}
			bitmapDataProperties = $es4.$$call(value, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY);
			$es4.$$set(canvas, $$this, $$thisp, 'width', $es4.$$get(bitmapDataProperties, $$this, $$thisp, 'BitmapDataScope', '$_width'), '=');
			$es4.$$set(canvas, $$this, $$thisp, 'height', $es4.$$get(bitmapDataProperties, $$this, $$thisp, 'BitmapDataScope', '$_height'), '=');
			$es4.$$call($es4.$$call(canvas, $$this, $$thisp, 'getContext', ['2d']), $$this, $$thisp, 'drawImage', [$es4.$$call(bitmapDataProperties, $$this, $$thisp, 'BitmapDataScope', '$_createOrGetCanvas', [value]), 0, 0]);
			$es4.$$set(bitmapDataProperties, $$this, $$thisp, 'BitmapDataScope', '$_canvas', canvas, '=');
			$es4.$$set(properties, $$this, $$thisp, 'BitmapScope', '$_bitmapData', value, '=');
			$es4.$$call(properties, $$this, $$thisp, 'DisplayObjectScope', '$_setExplicitBounds', [$es4.$$get(canvas, $$this, $$thisp, 'width'), $es4.$$get(canvas, $$this, $$thisp, 'height')]);
		}));

		//accessor
		$es4.$$public_accessor('bitmapData', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'BitmapScope', '$_bitmapData'), BitmapData);
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, BitmapData);

			$es4.$$call($$thisp, $$this, $$thisp, 'setBitmapData', [value]);
		}));

		//accessor
		$es4.$$public_accessor('pixelSnapping', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'BitmapScope', '$_pixelSnapping'), String);
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'BitmapScope', '$_pixelSnapping', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('smoothing', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'BitmapScope', '$_smoothing'), Boolean);
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'BitmapScope', '$_smoothing', value, '=');
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(Bitmap, {EXTENDS:'flash.display.DisplayObject'}, 'flash.display::Bitmap');
})();
//flash.display.Bitmap


//flash.display3D.Context3DVertexBufferFormat
$es4.$$package('flash.display3D').Context3DVertexBufferFormat = function () { throw new Error('Use of unimplemented class: Context3DVertexBufferFormat'); }
//flash.display3D.Context3DVertexBufferFormat


//flash.printing.PrintJobOptions
$es4.$$package('flash.printing').PrintJobOptions = (function ()
{
	//class initializer
	PrintJobOptions.$$cinit = (function ()
	{
		PrintJobOptions.$$cinit = undefined;

	});

	function PrintJobOptions()
	{
		//initialize class if not initialized
		if (PrintJobOptions.$$cinit !== undefined) PrintJobOptions.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof PrintJobOptions) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], PrintJobOptions) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$public_property('printAsBitmap', $$thisp, Boolean);

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$printAsBitmap)
		{
			//set default parameter values
			var printAsBitmap = (0 > arguments.length - 1) ? false : $es4.$$coerce($$$$printAsBitmap, Boolean);

		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(PrintJobOptions, null, 'flash.printing::PrintJobOptions');
})();
//flash.printing.PrintJobOptions


//flash.desktop.ClipboardFormats
$es4.$$package('flash.desktop').ClipboardFormats = function () { throw new Error('Use of unimplemented class: ClipboardFormats'); }
//flash.desktop.ClipboardFormats


//flash.display3D.Context3DRenderMode
$es4.$$package('flash.display3D').Context3DRenderMode = function () { throw new Error('Use of unimplemented class: Context3DRenderMode'); }
//flash.display3D.Context3DRenderMode


//flash.media.SoundCodec
$es4.$$package('flash.media').SoundCodec = (function ()
{
	//properties
	SoundCodec.NELLYMOSER = "NellyMoser";
	$es4.$$public_property('PCMA', SoundCodec, String);
	$es4.$$public_property('PCMU', SoundCodec, String);
	SoundCodec.SPEEX = "Speex";

	//class initializer
	SoundCodec.$$cinit = (function ()
	{
		SoundCodec.$$cinit = undefined;

	});

	function SoundCodec()
	{
		//initialize class if not initialized
		if (SoundCodec.$$cinit !== undefined) SoundCodec.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof SoundCodec) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], SoundCodec) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(SoundCodec, null, 'flash.media::SoundCodec');
})();
//flash.media.SoundCodec


//flash.display.BitmapData
$es4.$$package('flash.display').BitmapData = (function ()
{
	//imports
	var BitmapFilter;
	var ColorTransform;
	var Matrix;
	var Point;
	var Rectangle;
	var ByteArray;
	var IBitmapDrawable;
	var Bitmap;
	var BitmapData;
	var DisplayObject;

	//class initializer
	BitmapData.$$cinit = (function ()
	{
		BitmapData.$$cinit = undefined;

		//initialize imports
		BitmapFilter = $es4.$$['flash.filters'].BitmapFilter;
		ColorTransform = $es4.$$['flash.geom'].ColorTransform;
		Matrix = $es4.$$['flash.geom'].Matrix;
		Point = $es4.$$['flash.geom'].Point;
		Rectangle = $es4.$$['flash.geom'].Rectangle;
		ByteArray = $es4.$$['flash.utils'].ByteArray;
		IBitmapDrawable = $es4.$$['flash.display'].IBitmapDrawable;
		Bitmap = $es4.$$['flash.display'].Bitmap;
		DisplayObject = $es4.$$['flash.display'].DisplayObject;
	});

	//method
	$es4.$$private_function('$_createOrGetCanvas', BitmapData, (function ($$$$bitmapData)
	{
		if (BitmapData.$$cinit !== undefined) BitmapData.$$cinit();

		//set default parameter values
		var bitmapData = $es4.$$coerce($$$$bitmapData, $es4.$$['flash.display'].BitmapData);

		var properties = $es4.$$get($es4.$$call(bitmapData, null, null, '$__properties', $es4.$$EMPTY_ARRAY), null, null, 'BitmapDataScope');
		if (!$es4.$$get(properties, null, null, '$_canvas'))
		{
			var canvas = $es4.$$call(document, null, null, 'createElement', ['canvas']);
			$es4.$$set(canvas, null, null, 'width', $es4.$$get(properties, null, null, '$_width'), '=');
			$es4.$$set(canvas, null, null, 'height', $es4.$$get(properties, null, null, '$_height'), '=');
			var context = $es4.$$call(canvas, null, null, 'getContext', ['2d']);
			$es4.$$call(context, null, null, 'rect', [0, 0, $es4.$$get(properties, null, null, '$_width'), $es4.$$get(properties, null, null, '$_height')]);
			var argb = $es4.$$coerce($es4.$$get(properties, null, null, '$_fillColor'), uint);
			var alpha = $es4.$$coerce(argb >> 24, int);
			var red = $es4.$$coerce(argb >> 16 & 0xff, int);
			var green = $es4.$$coerce(argb >> 8 & 0xff, int);
			var blue = $es4.$$coerce(argb & 0xff, int);
			$es4.$$set(context, null, null, 'fillStyle', 'rgba(' + red + ', ' + green + ', ' + blue + ', ' + alpha + ')', '=');
			$es4.$$call(context, null, null, 'fill', $es4.$$EMPTY_ARRAY);
			$es4.$$set(properties, null, null, '$_canvas', canvas, '=');
		}
		return $es4.$$get(properties, null, null, '$_canvas');
	}));

	function BitmapData()
	{
		//initialize class if not initialized
		if (BitmapData.$$cinit !== undefined) BitmapData.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof BitmapData) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], BitmapData) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('$_properties', $$thisp);

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$width, $$$$height, $$$$transparent, $$$$fillColor)
		{
			//set default parameter values
			var width = $es4.$$coerce($$$$width, int);
			var height = $es4.$$coerce($$$$height, int);
			var transparent = (2 > arguments.length - 1) ? true : $es4.$$coerce($$$$transparent, Boolean);
			var fillColor = (3 > arguments.length - 1) ? 0xFFFFFFFF : $es4.$$coerce($$$$fillColor, uint);

			var properties = $es4.$$get($$thisp, $$this, $$thisp, '$_properties') || $es4.$$call($$this, $$this, $$thisp, '$__properties', [{}]);
			$es4.$$set(properties, $$this, $$thisp, 'BitmapDataScope', '$_width', width, '=');
			$es4.$$set(properties, $$this, $$thisp, 'BitmapDataScope', '$_height', height, '=');
			$es4.$$set(properties, $$this, $$thisp, 'BitmapDataScope', '$_transparent', transparent, '=');
			$es4.$$set(properties, $$this, $$thisp, 'BitmapDataScope', '$_fillColor', fillColor, '=');
		}));

		//method
		$es4.$$public_function('$__properties', $$thisp, (function ($$$$object)
		{
			//set default parameter values
			var object = (0 > arguments.length - 1) ? null : $$$$object;

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties') === undefined)
			{
				$es4.$$set(object, $$this, $$thisp, 'BitmapDataScope', {$_createOrGetCanvas:$es4.$$get(BitmapData, $$this, $$thisp, '$_createOrGetCanvas')}, '=');
				$es4.$$set(object, $$this, $$thisp, 'TLScope', $$this, '=');
				return $es4.$$set($$thisp, $$this, $$thisp, '$_properties', object, '=');
			}
			return $es4.$$get($$thisp, $$this, $$thisp, '$_properties');
		}));

		//method
		$es4.$$public_function('applyFilter', $$thisp, (function ($$$$sourceBitmapData, $$$$sourceRect, $$$$destPoint, $$$$filter)
		{
			//set default parameter values
			var sourceBitmapData = $es4.$$coerce($$$$sourceBitmapData, $es4.$$['flash.display'].BitmapData);
			var sourceRect = $es4.$$coerce($$$$sourceRect, Rectangle);
			var destPoint = $es4.$$coerce($$$$destPoint, Point);
			var filter = $es4.$$coerce($$$$filter, BitmapFilter);

			throw $es4.$$primitive(new (Error)('BitmapData: attempted call to an unimplemented function "applyFilter"'));
		}));

		//method
		$es4.$$public_function('clone', $$thisp, (function ()
		{
			var bitmapData = $es4.$$coerce($es4.$$primitive(new (BitmapData)($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'BitmapDataScope', '$_width'), $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'BitmapDataScope', '$_height'), $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'BitmapDataScope', '$_transparent'), $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'BitmapDataScope', '$_fillColor'))), $es4.$$['flash.display'].BitmapData);
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'BitmapDataScope', '$_canvas'))
			{
				var canvas = $es4.$$call(document, $$this, $$thisp, 'createElement', ['canvas']);
				$es4.$$set(canvas, $$this, $$thisp, 'width', $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'BitmapDataScope', '$_width'), '=');
				$es4.$$set(canvas, $$this, $$thisp, 'height', $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'BitmapDataScope', '$_height'), '=');
				$es4.$$call($es4.$$call(canvas, $$this, $$thisp, 'getContext', ['2d']), $$this, $$thisp, 'drawImage', [$es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'BitmapDataScope', '$_canvas'), 0, 0]);
				$es4.$$set($es4.$$call(bitmapData, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'BitmapDataScope', '$_canvas', canvas, '=');
			}
			return bitmapData;
		}));

		//method
		$es4.$$public_function('colorTransform', $$thisp, (function ($$$$rect, $$$$colorTransform)
		{
			//set default parameter values
			var rect = $es4.$$coerce($$$$rect, Rectangle);
			var colorTransform = $es4.$$coerce($$$$colorTransform, ColorTransform);

			throw $es4.$$primitive(new (Error)('BitmapData: attempted call to an unimplemented function "colorTransform"'));
		}));

		//method
		$es4.$$public_function('compare', $$thisp, (function ($$$$otherBitmapData)
		{
			//set default parameter values
			var otherBitmapData = $es4.$$coerce($$$$otherBitmapData, $es4.$$['flash.display'].BitmapData);

			throw $es4.$$primitive(new (Error)('BitmapData: attempted call to an unimplemented function "compare"'));
		}));

		//method
		$es4.$$public_function('copyChannel', $$thisp, (function ($$$$sourceBitmapData, $$$$sourceRect, $$$$destPoint, $$$$sourceChannel, $$$$destChannel)
		{
			//set default parameter values
			var sourceBitmapData = $es4.$$coerce($$$$sourceBitmapData, $es4.$$['flash.display'].BitmapData);
			var sourceRect = $es4.$$coerce($$$$sourceRect, Rectangle);
			var destPoint = $es4.$$coerce($$$$destPoint, Point);
			var sourceChannel = $es4.$$coerce($$$$sourceChannel, uint);
			var destChannel = $es4.$$coerce($$$$destChannel, uint);

			throw $es4.$$primitive(new (Error)('BitmapData: attempted call to an unimplemented function "copyChannel"'));
		}));

		//method
		$es4.$$public_function('copyPixels', $$thisp, (function ($$$$sourceBitmapData, $$$$sourceRect, $$$$destPoint, $$$$alphaBitmapData, $$$$alphaPoint, $$$$mergeAlpha)
		{
			//set default parameter values
			var sourceBitmapData = $es4.$$coerce($$$$sourceBitmapData, $es4.$$['flash.display'].BitmapData);
			var sourceRect = $es4.$$coerce($$$$sourceRect, Rectangle);
			var destPoint = $es4.$$coerce($$$$destPoint, Point);
			var alphaBitmapData = (3 > arguments.length - 1) ? null : $es4.$$coerce($$$$alphaBitmapData, $es4.$$['flash.display'].BitmapData);
			var alphaPoint = (4 > arguments.length - 1) ? null : $es4.$$coerce($$$$alphaPoint, Point);
			var mergeAlpha = (5 > arguments.length - 1) ? false : $es4.$$coerce($$$$mergeAlpha, Boolean);

			throw $es4.$$primitive(new (Error)('BitmapData: attempted call to an unimplemented function "copyPixels"'));
		}));

		//method
		$es4.$$public_function('dispose', $$thisp, (function ()
		{
		}));

		//method
		$es4.$$public_function('draw', $$thisp, (function ($$$$source, $$$$matrix, $$$$colorTransform, $$$$blendMode, $$$$clipRect, $$$$smoothing)
		{
			//set default parameter values
			var source = $es4.$$coerce($$$$source, IBitmapDrawable);
			var matrix = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$matrix, Matrix);
			var colorTransform = (2 > arguments.length - 1) ? null : $es4.$$coerce($$$$colorTransform, ColorTransform);
			var blendMode = (3 > arguments.length - 1) ? null : $es4.$$coerce($$$$blendMode, String);
			var clipRect = (4 > arguments.length - 1) ? null : $es4.$$coerce($$$$clipRect, Rectangle);
			var smoothing = (5 > arguments.length - 1) ? false : $es4.$$coerce($$$$smoothing, Boolean);

			var sourceCanvas;
			if ($es4.$$is(source, Bitmap))
			{
				sourceCanvas = $es4.$$get($es4.$$call(($es4.$$as(source, DisplayObject)), $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope', '$_domView');
			}
			else if ($es4.$$is(source, DisplayObject))
			{
				sourceCanvas = $es4.$$call($es4.$$call(($es4.$$as(source, DisplayObject)), $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope', '$_toCanvas', $es4.$$EMPTY_ARRAY);
			}
			else if (($es4.$$is(source, BitmapData)))
			{
				sourceCanvas = $es4.$$call(BitmapData, $$this, $$thisp, '$_createOrGetCanvas', [$es4.$$as(source, BitmapData)]);
			}
			else
			{
				throw $es4.$$primitive(new (Error)('bitmapdata draw implementation only supports a ibitmapdrawable source of type bitmapdata'));
			}
			if (!matrix)
			{
				matrix = $es4.$$primitive(new (Matrix)());
				$es4.$$call(matrix, $$this, $$thisp, 'identity', $es4.$$EMPTY_ARRAY);
			}
			if (!clipRect)
			{
				clipRect = $es4.$$primitive(new (Rectangle)(0, 0, $es4.$$get(sourceCanvas, $$this, $$thisp, 'width'), $es4.$$get(sourceCanvas, $$this, $$thisp, 'height')));
			}
			var canvas = $es4.$$call(BitmapData, $$this, $$thisp, '$_createOrGetCanvas', [$$this]);
			var context = $es4.$$call(canvas, $$this, $$thisp, 'getContext', ['2d']);
			$es4.$$call(context, $$this, $$thisp, 'save', $es4.$$EMPTY_ARRAY);
			$es4.$$set(context, $$this, $$thisp, 'imageSmoothingEnabled', smoothing, '=');
			$es4.$$set(context, $$this, $$thisp, 'mozImageSmoothingEnabled', smoothing, '=');
			$es4.$$call(context, $$this, $$thisp, 'beginPath', $es4.$$EMPTY_ARRAY);
			$es4.$$call(context, $$this, $$thisp, 'rect', [$es4.$$get(clipRect, $$this, $$thisp, 'x'), $es4.$$get(clipRect, $$this, $$thisp, 'y'), $es4.$$get(clipRect, $$this, $$thisp, 'width'), $es4.$$get(clipRect, $$this, $$thisp, 'height')]);
			$es4.$$call(context, $$this, $$thisp, 'clip', $es4.$$EMPTY_ARRAY);
			$es4.$$call(context, $$this, $$thisp, 'setTransform', [$es4.$$get(matrix, $$this, $$thisp, 'a'), $es4.$$get(matrix, $$this, $$thisp, 'b'), $es4.$$get(matrix, $$this, $$thisp, 'c'), $es4.$$get(matrix, $$this, $$thisp, 'd'), $es4.$$get(matrix, $$this, $$thisp, 'tx'), $es4.$$get(matrix, $$this, $$thisp, 'ty')]);
			$es4.$$call(context, $$this, $$thisp, 'drawImage', [sourceCanvas, 0, 0]);
			$es4.$$call(context, $$this, $$thisp, 'closePath', $es4.$$EMPTY_ARRAY);
			$es4.$$call(context, $$this, $$thisp, 'restore', $es4.$$EMPTY_ARRAY);
		}));

		//method
		$es4.$$public_function('fillRect', $$thisp, (function ($$$$rect, $$$$argb)
		{
			//set default parameter values
			var rect = $es4.$$coerce($$$$rect, Rectangle);
			var argb = $es4.$$coerce($$$$argb, uint);

			var canvas = $es4.$$call(BitmapData, $$this, $$thisp, '$_createOrGetCanvas', [$$this]);
			var context = $es4.$$call(canvas, $$this, $$thisp, 'getContext', ['2d']);
			var alpha = $es4.$$coerce(argb >> 24, int);
			var red = $es4.$$coerce(argb >> 16 & 0xff, int);
			var green = $es4.$$coerce(argb >> 8 & 0xff, int);
			var blue = $es4.$$coerce(argb & 0xff, int);
			$es4.$$set(context, $$this, $$thisp, 'fillStyle', 'rgba(' + red + ', ' + green + ', ' + blue + ', ' + alpha + ')', '=');
			$es4.$$call(context, $$this, $$thisp, 'clearRect', [$es4.$$get(rect, $$this, $$thisp, 'x'), $es4.$$get(rect, $$this, $$thisp, 'y'), $es4.$$get(rect, $$this, $$thisp, 'width'), $es4.$$get(rect, $$this, $$thisp, 'height')]);
			$es4.$$call(context, $$this, $$thisp, 'fillRect', [$es4.$$get(rect, $$this, $$thisp, 'x'), $es4.$$get(rect, $$this, $$thisp, 'y'), $es4.$$get(rect, $$this, $$thisp, 'width'), $es4.$$get(rect, $$this, $$thisp, 'height')]);
		}));

		//method
		$es4.$$public_function('floodFill', $$thisp, (function ($$$$x, $$$$y, $$$$color)
		{
			//set default parameter values
			var x = $es4.$$coerce($$$$x, int);
			var y = $es4.$$coerce($$$$y, int);
			var color = $es4.$$coerce($$$$color, uint);

			throw $es4.$$primitive(new (Error)('BitmapData: attempted call to an unimplemented function "floodFill"'));
		}));

		//method
		$es4.$$public_function('generateFilterRect', $$thisp, (function ($$$$sourceRect, $$$$filter)
		{
			//set default parameter values
			var sourceRect = $es4.$$coerce($$$$sourceRect, Rectangle);
			var filter = $es4.$$coerce($$$$filter, BitmapFilter);

			throw $es4.$$primitive(new (Error)('BitmapData: attempted call to an unimplemented function "generateFilterRect"'));
		}));

		//method
		$es4.$$public_function('getColorBoundsRect', $$thisp, (function ($$$$mask, $$$$color, $$$$findColor)
		{
			//set default parameter values
			var mask = $es4.$$coerce($$$$mask, uint);
			var color = $es4.$$coerce($$$$color, uint);
			var findColor = (2 > arguments.length - 1) ? true : $es4.$$coerce($$$$findColor, Boolean);

			throw $es4.$$primitive(new (Error)('BitmapData: attempted call to an unimplemented function "getColorBoundsRect"'));
		}));

		//method
		$es4.$$public_function('getPixel', $$thisp, (function ($$$$x, $$$$y)
		{
			//set default parameter values
			var x = $es4.$$coerce($$$$x, int);
			var y = $es4.$$coerce($$$$y, int);

			throw $es4.$$primitive(new (Error)('BitmapData: attempted call to an unimplemented function "getPixel"'));
		}));

		//method
		$es4.$$public_function('getPixel32', $$thisp, (function ($$$$x, $$$$y)
		{
			//set default parameter values
			var x = $es4.$$coerce($$$$x, int);
			var y = $es4.$$coerce($$$$y, int);

			throw $es4.$$primitive(new (Error)('BitmapData: attempted call to an unimplemented function "getPixel32"'));
		}));

		//method
		$es4.$$public_function('getPixels', $$thisp, (function ($$$$rect)
		{
			//set default parameter values
			var rect = $es4.$$coerce($$$$rect, Rectangle);

			throw $es4.$$primitive(new (Error)('BitmapData: attempted call to an unimplemented function "getPixels"'));
		}));

		//method
		$es4.$$public_function('getVector', $$thisp, (function ($$$$rect)
		{
			//set default parameter values
			var rect = $es4.$$coerce($$$$rect, Rectangle);

			throw $es4.$$primitive(new (Error)('BitmapData: attempted call to an unimplemented function "getVector"'));
		}));

		//method
		$es4.$$public_function('histogram', $$thisp, (function ($$$$hRect)
		{
			//set default parameter values
			var hRect = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$hRect, Rectangle);

			throw $es4.$$primitive(new (Error)('BitmapData: attempted call to an unimplemented function "histogram"'));
		}));

		//method
		$es4.$$public_function('hitTest', $$thisp, (function ($$$$firstPoint, $$$$firstAlphaThreshold, $$$$secondObject, $$$$secondBitmapDataPoint, $$$$secondAlphaThreshold)
		{
			//set default parameter values
			var firstPoint = $es4.$$coerce($$$$firstPoint, Point);
			var firstAlphaThreshold = $es4.$$coerce($$$$firstAlphaThreshold, uint);
			var secondObject = $es4.$$coerce($$$$secondObject, Object);
			var secondBitmapDataPoint = (3 > arguments.length - 1) ? null : $es4.$$coerce($$$$secondBitmapDataPoint, Point);
			var secondAlphaThreshold = (4 > arguments.length - 1) ? 1 : $es4.$$coerce($$$$secondAlphaThreshold, uint);

			throw $es4.$$primitive(new (Error)('BitmapData: attempted call to an unimplemented function "hitTest"'));
		}));

		//method
		$es4.$$public_function('lock', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('BitmapData: attempted call to an unimplemented function "lock"'));
		}));

		//method
		$es4.$$public_function('merge', $$thisp, (function ($$$$sourceBitmapData, $$$$sourceRect, $$$$destPoint, $$$$redMultiplier, $$$$greenMultiplier, $$$$blueMultiplier, $$$$alphaMultiplier)
		{
			//set default parameter values
			var sourceBitmapData = $es4.$$coerce($$$$sourceBitmapData, $es4.$$['flash.display'].BitmapData);
			var sourceRect = $es4.$$coerce($$$$sourceRect, Rectangle);
			var destPoint = $es4.$$coerce($$$$destPoint, Point);
			var redMultiplier = $es4.$$coerce($$$$redMultiplier, uint);
			var greenMultiplier = $es4.$$coerce($$$$greenMultiplier, uint);
			var blueMultiplier = $es4.$$coerce($$$$blueMultiplier, uint);
			var alphaMultiplier = $es4.$$coerce($$$$alphaMultiplier, uint);

			throw $es4.$$primitive(new (Error)('BitmapData: attempted call to an unimplemented function "merge"'));
		}));

		//method
		$es4.$$public_function('noise', $$thisp, (function ($$$$randomSeed, $$$$low, $$$$high, $$$$channelOptions, $$$$grayScale)
		{
			//set default parameter values
			var randomSeed = $es4.$$coerce($$$$randomSeed, int);
			var low = (1 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$low, uint);
			var high = (2 > arguments.length - 1) ? 255 : $es4.$$coerce($$$$high, uint);
			var channelOptions = (3 > arguments.length - 1) ? 7 : $es4.$$coerce($$$$channelOptions, uint);
			var grayScale = (4 > arguments.length - 1) ? false : $es4.$$coerce($$$$grayScale, Boolean);

			throw $es4.$$primitive(new (Error)('BitmapData: attempted call to an unimplemented function "noise"'));
		}));

		//method
		$es4.$$public_function('paletteMap', $$thisp, (function ($$$$sourceBitmapData, $$$$sourceRect, $$$$destPoint, $$$$redArray, $$$$greenArray, $$$$blueArray, $$$$alphaArray)
		{
			//set default parameter values
			var sourceBitmapData = $es4.$$coerce($$$$sourceBitmapData, $es4.$$['flash.display'].BitmapData);
			var sourceRect = $es4.$$coerce($$$$sourceRect, Rectangle);
			var destPoint = $es4.$$coerce($$$$destPoint, Point);
			var redArray = (3 > arguments.length - 1) ? null : $es4.$$coerce($$$$redArray, Array);
			var greenArray = (4 > arguments.length - 1) ? null : $es4.$$coerce($$$$greenArray, Array);
			var blueArray = (5 > arguments.length - 1) ? null : $es4.$$coerce($$$$blueArray, Array);
			var alphaArray = (6 > arguments.length - 1) ? null : $es4.$$coerce($$$$alphaArray, Array);

			throw $es4.$$primitive(new (Error)('BitmapData: attempted call to an unimplemented function "paletteMap"'));
		}));

		//method
		$es4.$$public_function('perlinNoise', $$thisp, (function ($$$$baseX, $$$$baseY, $$$$numOctaves, $$$$randomSeed, $$$$stitch, $$$$fractalNoise, $$$$channelOptions, $$$$grayScale, $$$$offsets)
		{
			//set default parameter values
			var baseX = $es4.$$coerce($$$$baseX, Number);
			var baseY = $es4.$$coerce($$$$baseY, Number);
			var numOctaves = $es4.$$coerce($$$$numOctaves, uint);
			var randomSeed = $es4.$$coerce($$$$randomSeed, int);
			var stitch = $es4.$$coerce($$$$stitch, Boolean);
			var fractalNoise = $es4.$$coerce($$$$fractalNoise, Boolean);
			var channelOptions = (6 > arguments.length - 1) ? 7 : $es4.$$coerce($$$$channelOptions, uint);
			var grayScale = (7 > arguments.length - 1) ? false : $es4.$$coerce($$$$grayScale, Boolean);
			var offsets = (8 > arguments.length - 1) ? null : $es4.$$coerce($$$$offsets, Array);

			throw $es4.$$primitive(new (Error)('BitmapData: attempted call to an unimplemented function "perlinNoise"'));
		}));

		//method
		$es4.$$public_function('pixelDissolve', $$thisp, (function ($$$$sourceBitmapData, $$$$sourceRect, $$$$destPoint, $$$$randomSeed, $$$$numPixels, $$$$fillColor)
		{
			//set default parameter values
			var sourceBitmapData = $es4.$$coerce($$$$sourceBitmapData, $es4.$$['flash.display'].BitmapData);
			var sourceRect = $es4.$$coerce($$$$sourceRect, Rectangle);
			var destPoint = $es4.$$coerce($$$$destPoint, Point);
			var randomSeed = (3 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$randomSeed, int);
			var numPixels = (4 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$numPixels, int);
			var fillColor = (5 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$fillColor, uint);

			throw $es4.$$primitive(new (Error)('BitmapData: attempted call to an unimplemented function "pixelDissolve"'));
		}));

		//method
		$es4.$$public_function('scroll', $$thisp, (function ($$$$x, $$$$y)
		{
			//set default parameter values
			var x = $es4.$$coerce($$$$x, int);
			var y = $es4.$$coerce($$$$y, int);

			throw $es4.$$primitive(new (Error)('BitmapData: attempted call to an unimplemented function "scroll"'));
		}));

		//method
		$es4.$$public_function('setPixel', $$thisp, (function ($$$$x, $$$$y, $$$$color)
		{
			//set default parameter values
			var x = $es4.$$coerce($$$$x, int);
			var y = $es4.$$coerce($$$$y, int);
			var color = $es4.$$coerce($$$$color, uint);

			throw $es4.$$primitive(new (Error)('BitmapData: attempted call to an unimplemented function "setPixel"'));
		}));

		//method
		$es4.$$public_function('setPixel32', $$thisp, (function ($$$$x, $$$$y, $$$$color)
		{
			//set default parameter values
			var x = $es4.$$coerce($$$$x, int);
			var y = $es4.$$coerce($$$$y, int);
			var color = $es4.$$coerce($$$$color, uint);

			throw $es4.$$primitive(new (Error)('BitmapData: attempted call to an unimplemented function "setPixel32"'));
		}));

		//method
		$es4.$$public_function('setPixels', $$thisp, (function ($$$$rect, $$$$inputByteArray)
		{
			//set default parameter values
			var rect = $es4.$$coerce($$$$rect, Rectangle);
			var inputByteArray = $es4.$$coerce($$$$inputByteArray, ByteArray);

			throw $es4.$$primitive(new (Error)('BitmapData: attempted call to an unimplemented function "setPixels"'));
		}));

		//method
		$es4.$$public_function('setVector', $$thisp, (function ($$$$rect, $$$$inputVector)
		{
			//set default parameter values
			var rect = $es4.$$coerce($$$$rect, Rectangle);
			var inputVector = $es4.$$coerce($$$$inputVector, Array);

			throw $es4.$$primitive(new (Error)('BitmapData: attempted call to an unimplemented function "setVector"'));
		}));

		//method
		$es4.$$public_function('threshold', $$thisp, (function ($$$$sourceBitmapData, $$$$sourceRect, $$$$destPoint, $$$$operation, $$$$threshold, $$$$color, $$$$mask, $$$$copySource)
		{
			//set default parameter values
			var sourceBitmapData = $es4.$$coerce($$$$sourceBitmapData, $es4.$$['flash.display'].BitmapData);
			var sourceRect = $es4.$$coerce($$$$sourceRect, Rectangle);
			var destPoint = $es4.$$coerce($$$$destPoint, Point);
			var operation = $es4.$$coerce($$$$operation, String);
			var threshold = $es4.$$coerce($$$$threshold, uint);
			var color = (5 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$color, uint);
			var mask = (6 > arguments.length - 1) ? 4294967295 : $es4.$$coerce($$$$mask, uint);
			var copySource = (7 > arguments.length - 1) ? false : $es4.$$coerce($$$$copySource, Boolean);

			throw $es4.$$primitive(new (Error)('BitmapData: attempted call to an unimplemented function "threshold"'));
		}));

		//method
		$es4.$$public_function('unlock', $$thisp, (function ($$$$changeRect)
		{
			//set default parameter values
			var changeRect = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$changeRect, Rectangle);

			throw $es4.$$primitive(new (Error)('BitmapData: attempted call to an unimplemented function "unlock"'));
		}));

		//accessor
		$es4.$$public_accessor('height', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'BitmapDataScope', '$_height'), int);
		}), null);

		//accessor
		$es4.$$public_accessor('rect', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('BitmapData: attempted call to an unimplemented function "rect"'));
		}), null);

		//accessor
		$es4.$$public_accessor('transparent', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'BitmapDataScope', '$_transparent'), Boolean);
		}), null);

		//accessor
		$es4.$$public_accessor('width', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'BitmapDataScope', '$_width'), int);
		}), null);

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(BitmapData, {IMPLEMENTS:['flash.display.IBitmapDrawable']}, 'flash.display::BitmapData');
})();
//flash.display.BitmapData


//flash.filters.DropShadowFilter
$es4.$$package('flash.filters').DropShadowFilter = function () { throw new Error('Use of unimplemented class: DropShadowFilter'); }
//flash.filters.DropShadowFilter


//flash.text.engine.LineJustification
$es4.$$package('flash.text.engine').LineJustification = function () { throw new Error('Use of unimplemented class: LineJustification'); }
//flash.text.engine.LineJustification


//flash.filters.DisplacementMapFilter
$es4.$$package('flash.filters').DisplacementMapFilter = function () { throw new Error('Use of unimplemented class: DisplacementMapFilter'); }
//flash.filters.DisplacementMapFilter


//flash.text.engine.FontLookup
$es4.$$package('flash.text.engine').FontLookup = function () { throw new Error('Use of unimplemented class: FontLookup'); }
//flash.text.engine.FontLookup


//flash.text.TextFieldAutoSize
$es4.$$package('flash.text').TextFieldAutoSize = (function ()
{
	//properties
	TextFieldAutoSize.CENTER = "center";
	TextFieldAutoSize.LEFT = "left";
	TextFieldAutoSize.NONE = "none";
	TextFieldAutoSize.RIGHT = "right";

	//class initializer
	TextFieldAutoSize.$$cinit = (function ()
	{
		TextFieldAutoSize.$$cinit = undefined;

	});

	function TextFieldAutoSize()
	{
		//initialize class if not initialized
		if (TextFieldAutoSize.$$cinit !== undefined) TextFieldAutoSize.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof TextFieldAutoSize) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], TextFieldAutoSize) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(TextFieldAutoSize, null, 'flash.text::TextFieldAutoSize');
})();
//flash.text.TextFieldAutoSize


//flash.display.ShaderData
$es4.$$package('flash.display').ShaderData = function () { throw new Error('Use of unimplemented class: ShaderData'); }
//flash.display.ShaderData


//flash.events.DataEvent
$es4.$$package('flash.events').DataEvent = function () { throw new Error('Use of unimplemented class: DataEvent'); }
//flash.events.DataEvent


//flash.filters.GradientBevelFilter
$es4.$$package('flash.filters').GradientBevelFilter = function () { throw new Error('Use of unimplemented class: GradientBevelFilter'); }
//flash.filters.GradientBevelFilter


//flash.events.DRMErrorEvent
$es4.$$package('flash.events').DRMErrorEvent = function () { throw new Error('Use of unimplemented class: DRMErrorEvent'); }
//flash.events.DRMErrorEvent


//XML
$es4.$$package('').XML = (function ()
{
	//imports
	var XMLDocument;
	var XMLNode;
	var XMLNodeType;
	var Browser;

	//properties
	$es4.$$private_property('$_ignoreComments', XML, Boolean);
	$es4.$$private_property('$_ignoreProcessingInstructions', XML, Boolean);
	$es4.$$private_property('$_ignoreWhitespace', XML, Boolean);
	$es4.$$private_property('$_prettyIndent', XML, int);
	$es4.$$private_property('$_prettyPrinting', XML, Boolean);

	//class initializer
	XML.$$cinit = (function ()
	{
		XML.$$cinit = undefined;

		//initialize imports
		XMLDocument = $es4.$$['flash.xml'].XMLDocument;
		XMLNode = $es4.$$['flash.xml'].XMLNode;
		XMLNodeType = $es4.$$['flash.xml'].XMLNodeType;
		Browser = $es4.$$['browser'].Browser;

		//initialize properties
		XML.$_ignoreComments = true;
		XML.$_ignoreProcessingInstructions = true;
		XML.$_ignoreWhitespace = true;
		XML.$_prettyIndent = 2;
		XML.$_prettyPrinting = true;
	});

	//method
	$es4.$$public_function('defaultSettings', XML, (function ()
	{
		if (XML.$$cinit !== undefined) XML.$$cinit();

		throw $es4.$$primitive(new (Error)('XML: attempted call to an unimplemented function "defaultSettings"'));
	}));

	//method
	$es4.$$public_function('setSettings', XML, (function ()
	{
		if (XML.$$cinit !== undefined) XML.$$cinit();

		throw $es4.$$primitive(new (Error)('XML: attempted call to an unimplemented function "setSettings"'));
	}));

	//method
	$es4.$$public_function('settings', XML, (function ()
	{
		if (XML.$$cinit !== undefined) XML.$$cinit();

		throw $es4.$$primitive(new (Error)('XML: attempted call to an unimplemented function "settings"'));
	}));

	//accessor
	$es4.$$public_accessor('ignoreComments', XML, (function ()
	{
		if (XML.$$cinit !== undefined) XML.$$cinit();

		return $es4.$$get(XML, null, null, '$_ignoreComments');
	}), (function ($$$$value)
	{
		if (XML.$$cinit !== undefined) XML.$$cinit();

		//set default parameter values
		var value = $es4.$$coerce($$$$value, Boolean);

		throw $es4.$$primitive(new (Error)('XML: attempted call to an unimplemented function "ignoreComments"'));
	}));

	//accessor
	$es4.$$public_accessor('ignoreProcessingInstructions', XML, (function ()
	{
		if (XML.$$cinit !== undefined) XML.$$cinit();

		return $es4.$$get(XML, null, null, '$_ignoreProcessingInstructions');
	}), (function ($$$$value)
	{
		if (XML.$$cinit !== undefined) XML.$$cinit();

		//set default parameter values
		var value = $es4.$$coerce($$$$value, Boolean);

		throw $es4.$$primitive(new (Error)('XML: attempted call to an unimplemented function "ignoreProcessingInstructions"'));
	}));

	//accessor
	$es4.$$public_accessor('ignoreWhitespace', XML, (function ()
	{
		if (XML.$$cinit !== undefined) XML.$$cinit();

		return $es4.$$get(XML, null, null, '$_ignoreWhitespace');
	}), (function ($$$$value)
	{
		if (XML.$$cinit !== undefined) XML.$$cinit();

		//set default parameter values
		var value = $es4.$$coerce($$$$value, Boolean);

		$es4.$$set(XML, null, null, '$_ignoreWhitespace', value, '=');
	}));

	//accessor
	$es4.$$public_accessor('prettyIndent', XML, (function ()
	{
		if (XML.$$cinit !== undefined) XML.$$cinit();

		return $es4.$$get(XML, null, null, '$_prettyIndent');
	}), (function ($$$$value)
	{
		if (XML.$$cinit !== undefined) XML.$$cinit();

		//set default parameter values
		var value = $es4.$$coerce($$$$value, int);

		throw $es4.$$primitive(new (Error)('XML: attempted call to an unimplemented function "prettyIndent"'));
	}));

	//accessor
	$es4.$$public_accessor('prettyPrinting', XML, (function ()
	{
		if (XML.$$cinit !== undefined) XML.$$cinit();

		return $es4.$$get(XML, null, null, '$_prettyPrinting');
	}), (function ($$$$value)
	{
		if (XML.$$cinit !== undefined) XML.$$cinit();

		//set default parameter values
		var value = $es4.$$coerce($$$$value, Boolean);

		throw $es4.$$primitive(new (Error)('XML: attempted call to an unimplemented function "prettyPrinting"'));
	}));

	function XML()
	{
		//initialize class if not initialized
		if (XML.$$cinit !== undefined) XML.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof XML) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], XML) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('$$isProxy', $$thisp, Boolean);
		$es4.$$private_property('$_name', $$thisp, Object);
		$es4.$$private_property('$_localName', $$thisp, Object);
		$es4.$$private_property('$_parent', $$thisp, Object);
		$es4.$$private_property('$_children', $$thisp, XMLList);
		$es4.$$private_property('$_attributes', $$thisp, XMLList);
		$es4.$$private_property('$_nodeKind', $$thisp, String);
		$es4.$$private_property('$_cdata', $$thisp, Boolean);
		$es4.$$private_property('$_string', $$thisp, String);
		$es4.$$private_property('$_stringInvalidated', $$thisp, Boolean);
		$es4.$$private_property('$_xmlString', $$thisp, String);
		$es4.$$private_property('$_xmlStringInvalidated', $$thisp, Boolean);
		$es4.$$private_property('$_xmlNode', $$thisp, XMLNode);

		//initializer
		$es4.$$iinit($$thisp, (function ()
		{
			//initialize properties
			$es4.$$set($$this, $$this, $$thisp, '$$isProxy', true, '=');
		}));

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$object)
		{
			//set default parameter values
			var object = $es4.$$coerce($$$$object, Object);

			var nodeKind;
			if ($es4.$$is(object, XML))
			{
				nodeKind = $es4.$$call(object, $$this, $$thisp, 'nodeKind', $es4.$$EMPTY_ARRAY);
				if (nodeKind == 'attribute')
				{
					object = '<' + $es4.$$call(object, $$this, $$thisp, 'name', $es4.$$EMPTY_ARRAY) + '>' + $es4.$$call(object, $$this, $$thisp, 'toXMLString', $es4.$$EMPTY_ARRAY) + '</' + $es4.$$call(object, $$this, $$thisp, 'name', $es4.$$EMPTY_ARRAY) + '>';
				}
				else
				{
					object = $es4.$$call(object, $$this, $$thisp, 'toXMLString', $es4.$$EMPTY_ARRAY);
				}
			}
			else if ($es4.$$is(object, XMLNode))
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_xmlNode', $es4.$$as(object, XMLNode), '=');
			}
			else if (object == null)
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_xmlNode', $es4.$$primitive(new (XMLNode)($es4.$$get(XMLNodeType, $$this, $$thisp, 'TEXT_NODE'), '')), '=');
			}
			var xmlDocument;
			if ($es4.$$is(object, String))
			{
				xmlDocument = $es4.$$primitive(new (XMLDocument)());
				$es4.$$set(xmlDocument, $$this, $$thisp, 'ignoreWhite', $es4.$$get(XML, $$this, $$thisp, 'ignoreWhitespace'), '=');
				$es4.$$call(xmlDocument, $$this, $$thisp, 'parseXML', [$es4.$$as(object, String)]);
				if ($es4.$$get(xmlDocument, $$this, $$thisp, 'childNodes', 'length') != 1)
				{
					throw $es4.$$primitive(new (TypeError)('XML: The markup in the document following the root element must be well-formed.'));
				}
				$es4.$$set($$thisp, $$this, $$thisp, '$_xmlNode', $es4.$$get(xmlDocument, $$this, $$thisp, 'firstChild'), '=');
			}
			if (!$es4.$$get($$thisp, $$this, $$thisp, '$_xmlNode'))
			{
				throw $es4.$$primitive(new (Error)('unknown XML value given in XML constructor'));
			}
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_xmlNode', 'nodeType') == $es4.$$get(XMLNodeType, $$this, $$thisp, 'ELEMENT_NODE'))
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_name', $es4.$$get($$thisp, $$this, $$thisp, '$_xmlNode', 'nodeName'), '=');
				$es4.$$set($$thisp, $$this, $$thisp, '$_localName', $es4.$$get($$thisp, $$this, $$thisp, '$_xmlNode', 'localName'), '=');
			}
			else
			{
				if ($es4.$$get($$thisp, $$this, $$thisp, '$_xmlNode', 'nodeType') == $es4.$$get(XMLNodeType, $$this, $$thisp, 'CDATA_NODE'))
				{
					$es4.$$set($$thisp, $$this, $$thisp, '$_cdata', true, '=');
				}
				if ($es4.$$is(object, XMLNode))
				{
					$es4.$$set($$thisp, $$this, $$thisp, '$_string', $es4.$$set($$thisp, $$this, $$thisp, '$_xmlString', $es4.$$call(($es4.$$as(object, XMLNode)), $$this, $$thisp, 'toString', [true]), '='), '=');
				}
				else
				{
					$es4.$$set($$thisp, $$this, $$thisp, '$_string', $es4.$$set($$thisp, $$this, $$thisp, '$_xmlString', $es4.$$call(object, $$this, $$thisp, 'toString', $es4.$$EMPTY_ARRAY), '='), '=');
				}
				nodeKind = 'text';
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_nodeKind', (nodeKind) ? nodeKind : 'element', '=');
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_nodeKind') != 'text')
			{
				$es4.$$call($$this, $$this, $$thisp, '$__invalidateString', $es4.$$EMPTY_ARRAY);
			}
		}));

		//method
		function lazyInitialized()
		{
			if (!$es4.$$get($$thisp, $$this, $$thisp, '$_xmlNode'))
			{
				throw $es4.$$primitive(new (Error)('XML: already initialized'));
			}
			var xmlNode = $es4.$$get($$thisp, $$this, $$thisp, '$_xmlNode');
			$es4.$$set($$thisp, $$this, $$thisp, '$_xmlNode', null, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_attributes', $es4.$$primitive(new (XMLList)()), '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_attributes', '$__parent', $$this, '=');
			var attributes = $es4.$$get(xmlNode, $$this, $$thisp, 'attributes');
			for (var $$i0 = (attributes || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i0 != 0; $$i0 = attributes.$$nextNameIndex($$i0))
			{
				var property = $es4.$$coerce(attributes.$$nextName($$i0), String);

				var attribute = '<' + property + '>' + $es4.$$get(attributes, $$this, $$thisp, property) + '</' + property + '>';
				var attributeXML = $es4.$$coerce($es4.$$primitive(new (XML)(attribute)), XML);
				$es4.$$set(attributeXML, $$this, $$thisp, '$__nodeKind', 'attribute', '=');
				$es4.$$set($$thisp, $$this, $$thisp, '$_attributes', $es4.$$call($$thisp, $$this, $$thisp, '$_attributes', 'length', $es4.$$EMPTY_ARRAY), attributeXML, '=');
			}
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_cdata') || ($es4.$$get($$thisp, $$this, $$thisp, '$_nodeKind') == 'attribute' && !$es4.$$get(xmlNode, $$this, $$thisp, 'childNodes', 'length')))
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_children', $es4.$$primitive(new (XMLList)([''])), '=');
			}
			else
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_children', $es4.$$primitive(new (XMLList)($es4.$$get(xmlNode, $$this, $$thisp, 'childNodes'))), '=');
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_children', '$__parent', $$this, '=');
		}

		//method
		$es4.$$internal_function('$__invalidateString', $$thisp, (function ()
		{
			$es4.$$set($$thisp, $$this, $$thisp, '$_stringInvalidated', true, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_xmlStringInvalidated', true, '=');
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_parent'))
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_parent', '$__invalidateString', $es4.$$EMPTY_ARRAY);
			}
		}));

		//method
		$es4.$$public_function('appendChild', $$thisp, (function ($$$$child)
		{
			//set default parameter values
			var child = $es4.$$coerce($$$$child, Object);

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_nodeKind') != 'element')
			{
				return $es4.$$coerce($$this, XML);
			}
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_xmlNode'))
			{
				lazyInitialized();
			}
			if ($es4.$$is(child, XMLList))
			{
				$es4.$$set(child, $$this, $$thisp, '$__parent', $$this, '=');
				for (var $$i1 = (child || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i1 != 0; $$i1 = child.$$nextNameIndex($$i1))
				{
					var xml = $es4.$$coerce(child.$$nextValue($$i1), XML);

					$es4.$$call($$this, $$this, $$thisp, 'appendChild', [xml]);
				}
			}
			else if ($es4.$$is(child, XML))
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_children', $es4.$$call($$thisp, $$this, $$thisp, '$_children', 'length', $es4.$$EMPTY_ARRAY), child, '=');
			}
			else if ($es4.$$is(child, String))
			{
				return $es4.$$call($$this, $$this, $$thisp, 'appendChild', [$es4.$$primitive(new (XML)($es4.$$call($es4.$$call($es4.$$call($es4.$$call(child, $$this, $$thisp, 'replace', [/&/g, '&amp;']), $$this, $$thisp, 'replace', [/</g, '&lt;']), $$this, $$thisp, 'replace', [/>/g, '&gt;']), $$this, $$thisp, 'replace', [/"/g, '&quot;'])))]);
			}
			return $es4.$$coerce($$this, XML);
		}));

		//method
		$es4.$$public_function('attribute', $$thisp, (function ($$$$attributeName)
		{
			//set default parameter values
			var attributeName = $$$$attributeName;

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_xmlNode'))
			{
				lazyInitialized();
			}
			attributeName = $es4.$$call(attributeName, $$this, $$thisp, 'toString', $es4.$$EMPTY_ARRAY);
			var xmlList = $es4.$$coerce($es4.$$primitive(new (XMLList)()), XMLList);
			$es4.$$set(xmlList, $$this, $$thisp, '$__parent', $$this, '=');
			for (var $$i2 = ($es4.$$get($$thisp, $$this, $$thisp, '$_attributes') || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i2 != 0; $$i2 = $es4.$$get($$thisp, $$this, $$thisp, '$_attributes').$$nextNameIndex($$i2))
			{
				var xml = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_attributes').$$nextValue($$i2), XML);

				if ($es4.$$call(xml, $$this, $$thisp, 'name', $es4.$$EMPTY_ARRAY) == attributeName)
				{
					$es4.$$set(xmlList, $$this, $$thisp, 0, xml, '=');
					break;
				}
			}
			return xmlList;
		}));

		//method
		$es4.$$public_function('attributes', $$thisp, (function ()
		{
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_xmlNode'))
			{
				lazyInitialized();
			}
			return $es4.$$get($$thisp, $$this, $$thisp, '$_attributes');
		}));

		//method
		$es4.$$public_function('child', $$thisp, (function ($$$$propertyName)
		{
			//set default parameter values
			var propertyName = $es4.$$coerce($$$$propertyName, Object);

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_xmlNode'))
			{
				lazyInitialized();
			}
			var xmlList = $es4.$$coerce($es4.$$primitive(new (XMLList)()), XMLList);
			$es4.$$set(xmlList, $$this, $$thisp, '$__parent', $$this, '=');
			for (var $$i3 = ($es4.$$get($$thisp, $$this, $$thisp, '$_children') || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i3 != 0; $$i3 = $es4.$$get($$thisp, $$this, $$thisp, '$_children').$$nextNameIndex($$i3))
			{
				var xml = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_children').$$nextValue($$i3), XML);

				if (propertyName == null || $es4.$$call(xml, $$this, $$thisp, 'name', $es4.$$EMPTY_ARRAY) == propertyName)
				{
					$es4.$$set(xmlList, $$this, $$thisp, $es4.$$call(xmlList, $$this, $$thisp, 'length', $es4.$$EMPTY_ARRAY), xml, '=');
				}
			}
			return xmlList;
		}));

		//method
		$es4.$$public_function('childIndex', $$thisp, (function ()
		{
			if (!$es4.$$get($$thisp, $$this, $$thisp, '$_parent'))
			{
				return -1;
			}
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_xmlNode'))
			{
				lazyInitialized();
			}
			var index = 0;
			var xmlList = $es4.$$coerce(($es4.$$get($$thisp, $$this, $$thisp, '$_nodeKind') == 'attribute') ? $es4.$$call($$thisp, $$this, $$thisp, '$_parent', 'attributes', $es4.$$EMPTY_ARRAY) : $es4.$$call($$thisp, $$this, $$thisp, '$_parent', 'children', $es4.$$EMPTY_ARRAY), XMLList);
			for (var $$i4 = (xmlList || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i4 != 0; $$i4 = xmlList.$$nextNameIndex($$i4))
			{
				var xml = $es4.$$coerce(xmlList.$$nextValue($$i4), XML);

				if (xml == $$this)
				{
					return index;
				}
				index++;
			}
			return -1;
		}));

		//method
		$es4.$$public_function('children', $$thisp, (function ()
		{
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_xmlNode'))
			{
				lazyInitialized();
			}
			return $es4.$$get($$thisp, $$this, $$thisp, '$_children');
		}));

		//method
		$es4.$$public_function('contains', $$thisp, (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, XML);

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_xmlNode'))
			{
				lazyInitialized();
			}
			var valueString = $es4.$$call(value, $$this, $$thisp, 'toXMLString', $es4.$$EMPTY_ARRAY);
			for (var $$i5 = ($es4.$$get($$thisp, $$this, $$thisp, '$_children') || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i5 != 0; $$i5 = $es4.$$get($$thisp, $$this, $$thisp, '$_children').$$nextNameIndex($$i5))
			{
				var xml = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_children').$$nextValue($$i5), XML);

				if ($es4.$$call(xml, $$this, $$thisp, 'toXMLString', $es4.$$EMPTY_ARRAY) == valueString)
				{
					return true;
				}
			}
			return false;
		}));

		//method
		$es4.$$public_function('copy', $$thisp, (function ()
		{
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_xmlNode'))
			{
				lazyInitialized();
			}
			return $es4.$$coerce($es4.$$primitive(new (XML)($$this)), XML);
		}));

		//method
		$es4.$$public_function('descendants', $$thisp, (function ($$$$name)
		{
			//set default parameter values
			var name = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$name, Object);

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_xmlNode'))
			{
				lazyInitialized();
			}
			var xmlList = $es4.$$coerce($es4.$$primitive(new (XMLList)()), XMLList);
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_nodeKind') != 'element')
			{
				return xmlList;
			}
			for (var $$i6 = ($es4.$$get($$thisp, $$this, $$thisp, '$_children') || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i6 != 0; $$i6 = $es4.$$get($$thisp, $$this, $$thisp, '$_children').$$nextNameIndex($$i6))
			{
				var xml = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_children').$$nextValue($$i6), XML);

				if ($es4.$$call(xml, $$this, $$thisp, 'nodeKind', $es4.$$EMPTY_ARRAY) != 'element')
				{
					if (name == null)
					{
						$es4.$$set(xmlList, $$this, $$thisp, $es4.$$call(xmlList, $$this, $$thisp, 'length', $es4.$$EMPTY_ARRAY), xml, '=');
					}
					continue;
				}
				if (name == null || $es4.$$call(name, $$this, $$thisp, 'toString', $es4.$$EMPTY_ARRAY) == $es4.$$call(xml, $$this, $$thisp, 'name', $es4.$$EMPTY_ARRAY))
				{
					$es4.$$set(xmlList, $$this, $$thisp, $es4.$$call(xmlList, $$this, $$thisp, 'length', $es4.$$EMPTY_ARRAY), xml, '=');
				}
				$es4.$$call(xmlList, $$this, $$thisp, '$__merge', [$es4.$$call(xml, $$this, $$thisp, 'descendants', [name])]);
			}
			return xmlList;
		}));

		//method
		$es4.$$public_function('elements', $$thisp, (function ($$$$name)
		{
			//set default parameter values
			var name = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$name, Object);

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_xmlNode'))
			{
				lazyInitialized();
			}
			var xmlList = $es4.$$coerce($es4.$$primitive(new (XMLList)()), XMLList);
			$es4.$$set(xmlList, $$this, $$thisp, '$__parent', $$this, '=');
			for (var $$i7 = ($es4.$$get($$thisp, $$this, $$thisp, '$_children') || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i7 != 0; $$i7 = $es4.$$get($$thisp, $$this, $$thisp, '$_children').$$nextNameIndex($$i7))
			{
				var xml = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_children').$$nextValue($$i7), XML);

				if ($es4.$$call(xml, $$this, $$thisp, 'nodeKind', $es4.$$EMPTY_ARRAY) == 'element')
				{
					$es4.$$set(xmlList, $$this, $$thisp, $es4.$$call(xmlList, $$this, $$thisp, 'length', $es4.$$EMPTY_ARRAY), xml, '=');
				}
			}
			return xmlList;
		}));

		//method
		$es4.$$public_function('insertChildAfter', $$thisp, (function ($$$$child1, $$$$child2)
		{
			//set default parameter values
			var child1 = $es4.$$coerce($$$$child1, Object);
			var child2 = $es4.$$coerce($$$$child2, Object);

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_nodeKind') != 'element')
			{
				return $$this;
			}
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_xmlNode'))
			{
				lazyInitialized();
			}
			return $es4.$$call($$thisp, $$this, $$thisp, '$_children', '$__insertChildAfter', [child1, child2]);
		}));

		//method
		$es4.$$public_function('insertChildBefore', $$thisp, (function ($$$$child1, $$$$child2)
		{
			//set default parameter values
			var child1 = $es4.$$coerce($$$$child1, Object);
			var child2 = $es4.$$coerce($$$$child2, Object);

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_nodeKind') != 'element')
			{
				return $$this;
			}
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_xmlNode'))
			{
				lazyInitialized();
			}
			return $es4.$$call($$thisp, $$this, $$thisp, '$_children', '$__insertChildBefore', [child1, child2]);
		}));

		//method
		$es4.$$public_function('prependChild', $$thisp, (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_nodeKind') != 'element')
			{
				return $es4.$$coerce($$this, XML);
			}
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_xmlNode'))
			{
				lazyInitialized();
			}
			return $es4.$$coerce($es4.$$call($$thisp, $$this, $$thisp, '$_children', '$__prepend', [value]), XML);
		}));

		//method
		$es4.$$public_function('replace', $$thisp, (function ($$$$propertyName, $$$$value)
		{
			//set default parameter values
			var propertyName = $es4.$$coerce($$$$propertyName, Object);
			var value = $es4.$$coerce($$$$value, XML);

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_nodeKind') != 'element')
			{
				return $es4.$$coerce($$this, XML);
			}
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_xmlNode'))
			{
				lazyInitialized();
			}
			return $es4.$$call($$thisp, $$this, $$thisp, '$_children', '$__replace', [$es4.$$call($$this, $$this, $$thisp, 'child', [propertyName]), value]);
		}));

		//method
		$es4.$$public_function('length', $$thisp, (function ()
		{
			return 1;
		}));

		//method
		$es4.$$public_function('localName', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '$_localName');
		}));

		//method
		$es4.$$public_function('name', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '$_name');
		}));

		//method
		$es4.$$public_function('nodeKind', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '$_nodeKind');
		}));

		//method
		$es4.$$public_function('parent', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '$_parent');
		}));

		//method
		$es4.$$public_function('setChildren', $$thisp, (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_xmlNode'))
			{
				lazyInitialized();
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_children', '$__parent', null, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_children', $es4.$$primitive(new (XMLList)(value)), '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_children', '$__parent', $$this, '=');
			return $es4.$$coerce($$this, XML);
		}));

		//method
		$es4.$$public_function('setLocalName', $$thisp, (function ($$$$name)
		{
			//set default parameter values
			var name = $es4.$$coerce($$$$name, String);

			$es4.$$set($$thisp, $$this, $$thisp, '$_localName', name, '=');
			$es4.$$call($$this, $$this, $$thisp, '$__invalidateString', $es4.$$EMPTY_ARRAY);
		}));

		//method
		$es4.$$public_function('setName', $$thisp, (function ($$$$name)
		{
			//set default parameter values
			var name = $es4.$$coerce($$$$name, String);

			$es4.$$set($$thisp, $$this, $$thisp, '$_name', name, '=');
			$es4.$$call($$this, $$this, $$thisp, '$__invalidateString', $es4.$$EMPTY_ARRAY);
		}));

		//method
		$es4.$$public_function('text', $$thisp, (function ()
		{
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_xmlNode'))
			{
				lazyInitialized();
			}
			var xmlList = $es4.$$coerce($es4.$$primitive(new (XMLList)()), XMLList);
			$es4.$$set(xmlList, $$this, $$thisp, '$__parent', $$this, '=');
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_nodeKind') == 'attribute')
			{
				return xmlList;
			}
			for (var $$i8 = ($es4.$$get($$thisp, $$this, $$thisp, '$_children') || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i8 != 0; $$i8 = $es4.$$get($$thisp, $$this, $$thisp, '$_children').$$nextNameIndex($$i8))
			{
				var xml = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_children').$$nextValue($$i8), XML);

				if ($es4.$$call(xml, $$this, $$thisp, 'nodeKind', $es4.$$EMPTY_ARRAY) == 'text')
				{
					$es4.$$set(xmlList, $$this, $$thisp, $es4.$$call(xmlList, $$this, $$thisp, 'length', $es4.$$EMPTY_ARRAY), xml, '=');
				}
			}
			return xmlList;
		}));

		//method
		$es4.$$public_function('hasOwnProperty', $$thisp, (function ($$$$name)
		{
			//set default parameter values
			var name = $es4.$$coerce($$$$name, String);

			if ($es4.$$call(name, $$this, $$thisp, 'charAt', [0]) == '@')
			{
				return $es4.$$coerce($es4.$$call($es4.$$call($$this, $$this, $$thisp, 'attribute', [$es4.$$call(name, $$this, $$thisp, 'substring', [1])]), $$this, $$thisp, 'length', $es4.$$EMPTY_ARRAY) > 0, Boolean);
			}
			return $es4.$$coerce($es4.$$call($es4.$$call($$this, $$this, $$thisp, 'child', [name]), $$this, $$thisp, 'length', $es4.$$EMPTY_ARRAY) > 0, Boolean);
		}));

		//method
		$es4.$$public_function('propertyIsEnumerable', $$thisp, (function ($$$$name)
		{
			//set default parameter values
			var name = $es4.$$coerce($$$$name, String);

			return $es4.$$coerce(name == '0', Boolean);
		}));

		//method
		$es4.$$public_function('toString', $$thisp, (function ()
		{
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_xmlNode'))
			{
				lazyInitialized();
			}
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_nodeKind') == 'attribute')
			{
				return $es4.$$coerce($es4.$$call($$thisp, $$this, $$thisp, '$_children', 0, 'toString', $es4.$$EMPTY_ARRAY), String);
			}
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_nodeKind') == 'text')
			{
				return $es4.$$get($$thisp, $$this, $$thisp, '$_string');
			}
			if (!$es4.$$get($$thisp, $$this, $$thisp, '$_stringInvalidated'))
			{
				return $es4.$$get($$thisp, $$this, $$thisp, '$_string');
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_stringInvalidated', false, '=');
			if ($es4.$$call($$thisp, $$this, $$thisp, '$_children', 'length', $es4.$$EMPTY_ARRAY) == 0)
			{
				return $es4.$$set($$thisp, $$this, $$thisp, '$_string', '', '=');
			}
			if ($es4.$$call($$thisp, $$this, $$thisp, '$_children', 'length', $es4.$$EMPTY_ARRAY) == 1 && $es4.$$call($$thisp, $$this, $$thisp, '$_children', 0, 'nodeKind', $es4.$$EMPTY_ARRAY) == 'text')
			{
				return $es4.$$coerce($es4.$$set($$thisp, $$this, $$thisp, '$_string', $es4.$$call($$thisp, $$this, $$thisp, '$_children', 0, 'toString', $es4.$$EMPTY_ARRAY), '='), String);
			}
			return $es4.$$set($$thisp, $$this, $$thisp, '$_string', $es4.$$call($$this, $$this, $$thisp, 'toXMLString', $es4.$$EMPTY_ARRAY), '=');
		}));

		//method
		$es4.$$public_function('toXMLString', $$thisp, (function ()
		{
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_xmlNode'))
			{
				lazyInitialized();
			}
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_nodeKind') == 'attribute')
			{
				return $es4.$$coerce($es4.$$call($$thisp, $$this, $$thisp, '$_children', 0, 'toXMLString', $es4.$$EMPTY_ARRAY), String);
			}
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_nodeKind') == 'text')
			{
				if ($es4.$$get($$thisp, $$this, $$thisp, '$_cdata'))
				{
					return '<![CDATA[' + $es4.$$get($$thisp, $$this, $$thisp, '$_xmlString') + ']]>';
				}
				return $es4.$$get($$thisp, $$this, $$thisp, '$_xmlString');
			}
			if (!$es4.$$get($$thisp, $$this, $$thisp, '$_xmlStringInvalidated'))
			{
				return $es4.$$get($$thisp, $$this, $$thisp, '$_xmlString');
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_xmlStringInvalidated', false, '=');
			var xmlString = null;
			var childXML = null;
			if (!$es4.$$call($$thisp, $$this, $$thisp, '$_attributes', 'length', $es4.$$EMPTY_ARRAY))
			{
				if (!$es4.$$call($$thisp, $$this, $$thisp, '$_children', 'length', $es4.$$EMPTY_ARRAY))
				{
					return '<' + $es4.$$get($$thisp, $$this, $$thisp, '$_name') + '/>';
				}
				xmlString = '<' + $es4.$$get($$thisp, $$this, $$thisp, '$_name') + '>';
				for (var $$i9 = ($es4.$$get($$thisp, $$this, $$thisp, '$_children') || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i9 != 0; $$i9 = $es4.$$get($$thisp, $$this, $$thisp, '$_children').$$nextNameIndex($$i9))
				{
					childXML = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_children').$$nextValue($$i9), XML);

					xmlString += $es4.$$call(childXML, $$this, $$thisp, 'toXMLString', $es4.$$EMPTY_ARRAY);
				}
				xmlString += '</' + $es4.$$get($$thisp, $$this, $$thisp, '$_name') + '>';
				return xmlString;
			}
			xmlString = '<a>b</a>';
			var xmlDocument = $es4.$$call(Browser, $$this, $$thisp, 'domParseXML', [xmlString]);
			for (var $$i10 = ($es4.$$get($$thisp, $$this, $$thisp, '$_attributes') || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i10 != 0; $$i10 = $es4.$$get($$thisp, $$this, $$thisp, '$_attributes').$$nextNameIndex($$i10))
			{
				var attributeXML = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_attributes').$$nextValue($$i10), XML);

				$es4.$$call(xmlDocument, $$this, $$thisp, 'documentElement', 'setAttribute', [$es4.$$call(attributeXML, $$this, $$thisp, 'name', $es4.$$EMPTY_ARRAY), $es4.$$call(attributeXML, $$this, $$thisp, 'toXMLString', $es4.$$EMPTY_ARRAY)]);
			}
			xmlString = $es4.$$coerce($es4.$$call($es4.$$call(Browser, $$this, $$thisp, 'getNewXMLSerializer', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'serializeToString', [xmlDocument]), String);
			xmlString = $es4.$$call(xmlString, $$this, $$thisp, 'substring', [2, $es4.$$get(xmlString, $$this, $$thisp, 'length') - 5]);
			if (!$es4.$$call($$thisp, $$this, $$thisp, '$_children', 'length', $es4.$$EMPTY_ARRAY))
			{
				return '<' + $es4.$$get($$thisp, $$this, $$thisp, '$_name') + $es4.$$call(xmlString, $$this, $$thisp, 'substring', [0, $es4.$$get(xmlString, $$this, $$thisp, 'length') - 1]) + '/>';
			}
			for (var $$i11 = ($es4.$$get($$thisp, $$this, $$thisp, '$_children') || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i11 != 0; $$i11 = $es4.$$get($$thisp, $$this, $$thisp, '$_children').$$nextNameIndex($$i11))
			{
				childXML = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_children').$$nextValue($$i11), XML);

				xmlString += $es4.$$call(childXML, $$this, $$thisp, 'toXMLString', $es4.$$EMPTY_ARRAY);
			}
			return $es4.$$set($$thisp, $$this, $$thisp, '$_xmlString', '<' + $es4.$$get($$thisp, $$this, $$thisp, '$_name') + xmlString + '</' + $es4.$$get($$thisp, $$this, $$thisp, '$_name') + '>', '=');
		}));

		//method
		$es4.$$public_function('hasComplexContent', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('XML: attempted call to an unimplemented function "hasComplexContent"'));
		}));

		//method
		$es4.$$public_function('hasSimpleContent', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('XML: attempted call to an unimplemented function "hasSimpleContent"'));
		}));

		//method
		$es4.$$public_function('addNamespace', $$thisp, (function ($$$$ns)
		{
			//set default parameter values
			var ns = $es4.$$coerce($$$$ns, Object);

			throw $es4.$$primitive(new (Error)('XML: attempted call to an unimplemented function "addNamespace"'));
		}));

		//method
		$es4.$$public_function('comments', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('XML: attempted call to an unimplemented function "comments"'));
		}));

		//method
		$es4.$$public_function('inScopeNamespaces', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('XML: attempted call to an unimplemented function "inScopeNamespaces"'));
		}));

		//method
		$es4.$$public_function('namespace', $$thisp, (function ($$$$prefix)
		{
			//set default parameter values
			var prefix = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$prefix, String);

			throw $es4.$$primitive(new (Error)('XML: attempted call to an unimplemented function "namespace"'));
		}));

		//method
		$es4.$$public_function('namespaceDeclarations', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('XML: attempted call to an unimplemented function "namespaceDeclarations"'));
		}));

		//method
		$es4.$$public_function('normalize', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('XML: attempted call to an unimplemented function "normalize"'));
		}));

		//method
		$es4.$$public_function('processingInstructions', $$thisp, (function ($$$$name)
		{
			//set default parameter values
			var name = (0 > arguments.length - 1) ? "*" : $es4.$$coerce($$$$name, String);

			throw $es4.$$primitive(new (Error)('XML: attempted call to an unimplemented function "processingInstructions"'));
		}));

		//method
		$es4.$$public_function('removeNamespace', $$thisp, (function ($$$$ns)
		{
			//set default parameter values
			var ns = $es4.$$coerce($$$$ns, Namespace);

			throw $es4.$$primitive(new (Error)('XML: attempted call to an unimplemented function "removeNamespace"'));
		}));

		//method
		$es4.$$public_function('setNamespace', $$thisp, (function ($$$$ns)
		{
			//set default parameter values
			var ns = $es4.$$coerce($$$$ns, Namespace);

			throw $es4.$$primitive(new (Error)('XML: attempted call to an unimplemented function "setNamespace"'));
		}));

		//method
		$es4.$$public_function('toJSON', $$thisp, (function ($$$$k)
		{
			//set default parameter values
			var k = $es4.$$coerce($$$$k, String);

			throw $es4.$$primitive(new (Error)('XML: attempted call to an unimplemented function "toJSON"'));
		}));

		//method
		$es4.$$private_function('$$get', $$thisp, (function ($$$$key)
		{
			//set default parameter values
			var key = $$$$key;

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_xmlNode'))
			{
				lazyInitialized();
			}
			if (key == '$attributes')
			{
				return $es4.$$get($$thisp, $$this, $$thisp, '$_attributes');
			}
			var index = parseInt(key);
			if (index === 0)
			{
				return $$this;
			}
			if (!isNaN(index))
			{
				return undefined;
			}
			return $es4.$$call($$this, $$this, $$thisp, 'child', [key]);
		}));

		//method
		$es4.$$private_function('$$set', $$thisp, (function ($$$$key, $$$$value)
		{
			//set default parameter values
			var key = $$$$key;
			var value = $$$$value;

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_xmlNode'))
			{
				lazyInitialized();
			}
			var index = parseInt(key);
			var xml = null;
			if (isNaN(index))
			{
				var xmlList = $es4.$$coerce($es4.$$call($$this, $$this, $$thisp, 'child', [key]), XMLList);
				if ($es4.$$call(xmlList, $$this, $$thisp, 'length', $es4.$$EMPTY_ARRAY))
				{
					for (var $$i12 = (xmlList || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i12 != 0; $$i12 = xmlList.$$nextNameIndex($$i12))
					{
						var child = $es4.$$coerce(xmlList.$$nextValue($$i12), XML);

						xml = $es4.$$coerce($es4.$$primitive(new (XML)(value)), XML);
						$es4.$$set(xml, $$this, $$thisp, '$__parent', child, '=');
						$es4.$$call(child, $$this, $$thisp, 'setChildren', [xml]);
					}
					return value;
				}
				xml = $es4.$$coerce($es4.$$primitive(new (XML)('<' + key + '/>')), XML);
				$es4.$$call(xml, $$this, $$thisp, 'appendChild', [value]);
				value = xml;
				index = $es4.$$call($$thisp, $$this, $$thisp, '$_children', 'length', $es4.$$EMPTY_ARRAY);
			}
			else
			{
				throw $es4.$$primitive(new (Error)('XML: Assignment to indexed XML is not allowed: ' + key));
			}
			return $es4.$$set($$thisp, $$this, $$thisp, '$_children', index, value, '=');
		}));

		//method
		$es4.$$private_function('$$call', $$thisp, (function ($$$$name, $$$$args)
		{
			//set default parameter values
			var name = $$$$name;
			var args = $es4.$$coerce($$$$args, Array);

			var string = $es4.$$call($$this, $$this, $$thisp, 'toString', $es4.$$EMPTY_ARRAY);
			return $es4.$$call(string, $$this, $$thisp, name, 'apply', [string, args]);
		}));

		//method
		$es4.$$private_function('$$delete', $$thisp, (function ($$$$key)
		{
			//set default parameter values
			var key = $$$$key;

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_xmlNode'))
			{
				lazyInitialized();
			}
			var index = parseInt(key);
			if (isNaN(index))
			{
				var xmlList = $es4.$$call($$this, $$this, $$thisp, 'child', [key]);
				while ($es4.$$call(xmlList, $$this, $$thisp, 'length', $es4.$$EMPTY_ARRAY))
				{
					$es4.$$delete(xmlList, $$this, $$thisp, 0);
				}
				return true;
			}
			else
			{
				throw $es4.$$primitive(new (Error)('XML: deletion of indexed XML is not allowed: ' + key));
			}
		}));

		//method
		$es4.$$private_function('$$nextName', $$thisp, (function ($$$$index)
		{
			//set default parameter values
			var index = $es4.$$coerce($$$$index, int);

			return null;
		}));

		//method
		$es4.$$private_function('$$nextNameIndex', $$thisp, (function ($$$$index)
		{
			//set default parameter values
			var index = $es4.$$coerce($$$$index, int);

			return 0;
		}));

		//method
		$es4.$$private_function('$$nextValue', $$thisp, (function ($$$$index)
		{
			//set default parameter values
			var index = $es4.$$coerce($$$$index, int);

		}));

		//accessor
		$es4.$$protected_accessor('$__nodeKind', $$thisp, null, (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			$es4.$$set($$thisp, $$this, $$thisp, '$_nodeKind', value, '=');
		}));

		//accessor
		$es4.$$protected_accessor('$__parent', $$thisp, null, (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			if (value)
			{
				$es4.$$call(value, $$this, $$thisp, '$__invalidateString', $es4.$$EMPTY_ARRAY);
			}
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_parent') && !value)
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_parent', '$__invalidateString', $es4.$$EMPTY_ARRAY);
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_parent', value, '=');
		}));

		//accessor
		$es4.$$internal_accessor('$__text', $$thisp, null, (function ($$$$text)
		{
			//set default parameter values
			var text = $es4.$$coerce($$$$text, String);

			$es4.$$set($$thisp, $$this, $$thisp, '$_xmlString', $es4.$$set($$thisp, $$this, $$thisp, '$_string', text, '='), '=');
			$es4.$$call($$this, $$this, $$thisp, '$__invalidateString', $es4.$$EMPTY_ARRAY);
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(XML, null, 'XML');
})();
//XML


//flash.globalization.Collator
$es4.$$package('flash.globalization').Collator = function () { throw new Error('Use of unimplemented class: Collator'); }
//flash.globalization.Collator


//flash.display.DisplayObject
$es4.$$package('flash.display').DisplayObject = (function ()
{
	//imports
	var AccessibilityProperties;
	var enterDebugger;
	var DisplayObjectContainer;
	var IBitmapDrawable;
	var LoaderInfo;
	var Shader;
	var Stage;
	var EventDispatcher;
	var Matrix;
	var Point;
	var Rectangle;
	var Transform;
	var Vector3D;
	var Browser;
	var DisplayObject;

	//properties
	$es4.$$private_property('$_instanceCounter', DisplayObject, int);

	//class initializer
	DisplayObject.$$cinit = (function ()
	{
		DisplayObject.$$cinit = undefined;

		//initialize imports
		AccessibilityProperties = $es4.$$['flash.accessibility'].AccessibilityProperties;
		enterDebugger = $es4.$$['flash.debugger'].enterDebugger;
		DisplayObjectContainer = $es4.$$['flash.display'].DisplayObjectContainer;
		IBitmapDrawable = $es4.$$['flash.display'].IBitmapDrawable;
		LoaderInfo = $es4.$$['flash.display'].LoaderInfo;
		Shader = $es4.$$['flash.display'].Shader;
		Stage = $es4.$$['flash.display'].Stage;
		EventDispatcher = $es4.$$['flash.events'].EventDispatcher;
		Matrix = $es4.$$['flash.geom'].Matrix;
		Point = $es4.$$['flash.geom'].Point;
		Rectangle = $es4.$$['flash.geom'].Rectangle;
		Transform = $es4.$$['flash.geom'].Transform;
		Vector3D = $es4.$$['flash.geom'].Vector3D;
		Browser = $es4.$$['browser'].Browser;

		//initialize properties
		DisplayObject.$_instanceCounter = 0;
	});

	function DisplayObject()
	{
		//initialize class if not initialized
		if (DisplayObject.$$cinit !== undefined) DisplayObject.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof DisplayObject) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], DisplayObject) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('$_previousTransformValues', $$thisp);
		$es4.$$private_property('$_properties', $$thisp);

		//initializer
		$es4.$$iinit($$thisp, (function ()
		{
			//initialize properties
			$es4.$$set($$this, $$this, $$thisp, '$_previousTransformValues', {x:0, y:0, rotation:0, scaleX:1, scaleY:1}, '=');
		}));

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
			var properties = $es4.$$get($$thisp, $$this, $$thisp, '$_properties') || $es4.$$call($$this, $$this, $$thisp, '$__properties', [{}]);
			$es4.$$super($$thisp).$$z();
			var domView = $es4.$$set(properties, $$this, $$thisp, 'DisplayObjectScope', '$_domView', $es4.$$call($$this, $$this, $$thisp, '$__createDomView', $es4.$$EMPTY_ARRAY), '=');
			$es4.$$call(domView, $$this, $$thisp, 'setAttribute', ['name', $es4.$$get(properties, $$this, $$thisp, 'DisplayObjectScope', '$_id')]);
			$es4.$$call(domView, $$this, $$thisp, 'setAttribute', ['data-type', $es4.$$get(Object($$this), $$this, $$thisp, 'constructor', 'name')]);
			$es4.$$call(domView, $$this, $$thisp, 'setAttribute', ['tabindex', -1]);
			$es4.$$call(domView, $$this, $$thisp, 'setAttribute', ['role', 'presentation']);
			$es4.$$set(domView, $$this, $$thisp, 'displayObject', $$this, '=');
			$es4.$$set(domView, $$this, $$thisp, 'style', 'position', 'absolute', '=');
			$es4.$$set(domView, $$this, $$thisp, 'style', 'pointerEvents', 'auto', '=');
			$es4.$$set(domView, $$this, $$thisp, 'style', $es4.$$call(Browser, $$this, $$thisp, 'getTapHighlightColorString', $es4.$$EMPTY_ARRAY), 'rgba(0, 0, 0, 0)', '=');
			$es4.$$set(domView, $$this, $$thisp, 'style', $es4.$$call(Browser, $$this, $$thisp, 'getTransformOriginString', $es4.$$EMPTY_ARRAY), '0% 0%', '=');
		}));

		//method
		$es4.$$protected_function('$__createDomView', $$thisp, (function ()
		{
			return $es4.$$call(document, $$this, $$thisp, 'createElement', ['div']);
		}));

		//method
		$es4.$$internal_function('$__addDomGraphicsView', $$thisp, (function ($$$$domGraphicsView)
		{
			//set default parameter values
			var domGraphicsView = $es4.$$coerce($$$$domGraphicsView, Object);

			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domGraphicsView', domGraphicsView, '=');
			$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'appendChild', [domGraphicsView]);
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', 'accessibilityProperties'))
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', 'accessibilityProperties', '$_applyProperties', [domGraphicsView]);
			}
		}));

		//method
		$es4.$$public_function('$__properties', $$thisp, (function ($$$$object)
		{
			//set default parameter values
			var object = (0 > arguments.length - 1) ? null : $$$$object;

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties') === undefined)
			{
				object = $es4.$$call($es4.$$super($$thisp), $$this, $$thisp, '$__properties', [object]);
				var pscope = $es4.$$call($es4, $$this, $$thisp, '$$getOwnScope', [$$this, DisplayObject]);
				var id = 'instance' + ($es4.$$set(DisplayObject, $$this, $$thisp, '$_instanceCounter', 'postfix', '++'));
				var matrix = $es4.$$primitive(new (Matrix)());
				$es4.$$set(object, $$this, $$thisp, 'DisplayObjectScope', {pscope:pscope, $_id:id, $_sudoScaleX:1, $_sudoScaleY:1, $_sudoRotation:0, $_childBoundsData:{}, $_matrix:matrix, $_scaleX:1, $_scaleY:1, $_rotation:0, $_x:0, $_y:0, $_x1:0, $_y1:0, $_width:0, $_height:0, $_bounds:[0, 0, 0, 0], $_onChildBoundsChange:$es4.$$get($$thisp, $$this, $$thisp, '$_onChildBoundsChange'), $_notifyParentOfBoundsChange:$es4.$$get($$thisp, $$this, $$thisp, '$_notifyParentOfBoundsChange'), $_setExplicitBounds:$es4.$$get($$thisp, $$this, $$thisp, '$_setExplicitBounds'), $_scrollRectXOffset:0, $_scrollRectYOffset:0, $_opacity:1, $_visible:true, $_cacheAsBitmap:false, $_toCanvas:$es4.$$get($$thisp, $$this, $$thisp, '$_toCanvas'), $_scrollRect:null}, '=');
				$es4.$$set(object, $$this, $$thisp, 'TLScope', $$this, '=');
				return $es4.$$set($$thisp, $$this, $$thisp, '$_properties', object, '=');
			}
			return $es4.$$get($$thisp, $$this, $$thisp, '$_properties');
		}));

		//method
		$es4.$$public_function('$__notify', $$thisp, (function ($$$$name, $$$$args)
		{
			//set default parameter values
			var name = $es4.$$coerce($$$$name, String);
			var args = $$$$args;

		}));

		//method
		$es4.$$private_function('$_setExplicitBounds', $$thisp, (function ($$$$width, $$$$height)
		{
			//set default parameter values
			var width = $es4.$$coerce($$$$width, Number);
			var height = $es4.$$coerce($$$$height, Number);

			var scope = $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope');
			$es4.$$set(scope, $$this, $$thisp, '$_width', width, '=');
			$es4.$$set(scope, $$this, $$thisp, '$_height', height, '=');
			$es4.$$call($$thisp, $$this, $$thisp, '$_recalculateBounds', $es4.$$EMPTY_ARRAY);
		}));

		//method
		$es4.$$private_function('$_notifyParentOfBoundsChange', $$thisp, (function ()
		{
			var scope = $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope');
			var domView = $es4.$$get(scope, $$this, $$thisp, '$_domView');
			var parent = $es4.$$get(domView, $$this, $$thisp, 'parentNode') ? $es4.$$get(domView, $$this, $$thisp, 'parentNode', 'displayObject') : null;
			if (!parent)
			{
				return;
			}
			if ($es4.$$get(scope, $$this, $$thisp, '$_visible') === true)
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_transform', $es4.$$EMPTY_ARRAY);
			}
			var parentScope = $es4.$$get($es4.$$call(parent, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope');
			$es4.$$call(parentScope, $$this, $$thisp, '$_onChildBoundsChange', [$es4.$$get(scope, $$this, $$thisp, '$_id'), $es4.$$get(scope, $$this, $$thisp, '$_height') !== 0 || $es4.$$get(scope, $$this, $$thisp, '$_width') !== 0 || $es4.$$get(scope, $$this, $$thisp, '$_scrollRect') !== null ? $es4.$$get(scope, $$this, $$thisp, '$_bounds') : null]);
		}));

		//method
		$es4.$$private_function('$_onChildBoundsChange', $$thisp, (function ($$$$childID, $$$$bounds)
		{
			//set default parameter values
			var childID = $$$$childID;
			var bounds = $$$$bounds;

			var scope = $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope');
			var childBoundsData = $es4.$$get(scope, $$this, $$thisp, '$_childBoundsData');
			if (!bounds)
			{
				$es4.$$delete(childBoundsData, $$this, $$thisp, childID);
			}
			else
			{
				$es4.$$set(childBoundsData, $$this, $$thisp, childID, $es4.$$call(bounds, $$this, $$thisp, 'slice', $es4.$$EMPTY_ARRAY), '=');
			}
			$es4.$$call($$thisp, $$this, $$thisp, '$_recalculateChildBasedBounds', $es4.$$EMPTY_ARRAY);
		}));

		//method
		$es4.$$private_function('$_recalculateChildBasedBounds', $$thisp, (function ()
		{
			var scope = $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope');
			var childBoundsData = $es4.$$get(scope, $$this, $$thisp, '$_childBoundsData');
			var x1 = $es4.$$get(Number, $$this, $$thisp, 'POSITIVE_INFINITY');
			var y1 = $es4.$$get(Number, $$this, $$thisp, 'POSITIVE_INFINITY');
			var x2 = $es4.$$get(Number, $$this, $$thisp, 'NEGATIVE_INFINITY');
			var y2 = $es4.$$get(Number, $$this, $$thisp, 'NEGATIVE_INFINITY');
			var x = 0;
			var y = 0;
			var width = 0;
			var height = 0;
			var abs = $es4.$$get(Math, $$this, $$thisp, 'abs');
			for (var $$i0 = (childBoundsData || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i0 != 0; $$i0 = childBoundsData.$$nextNameIndex($$i0))
			{
				var eachChildID = childBoundsData.$$nextName($$i0);

				var eachBounds = $es4.$$get(childBoundsData, $$this, $$thisp, eachChildID);
				var innerX = $es4.$$get(eachBounds, $$this, $$thisp, 0);
				var innerY = $es4.$$get(eachBounds, $$this, $$thisp, 1);
				if (innerX < x1)
				{
					x1 = innerX;
				}
				if (innerY < y1)
				{
					y1 = innerY;
				}
				if (innerX + $es4.$$get(eachBounds, $$this, $$thisp, 2) > x2)
				{
					x2 = innerX + $es4.$$get(eachBounds, $$this, $$thisp, 2);
				}
				if (innerY + $es4.$$get(eachBounds, $$this, $$thisp, 3) > y2)
				{
					y2 = innerY + $es4.$$get(eachBounds, $$this, $$thisp, 3);
				}
			}
			if (x1 === $es4.$$get(Number, $$this, $$thisp, 'POSITIVE_INFINITY'))
			{
				$es4.$$set(scope, $$this, $$thisp, '$_x1', $es4.$$get(scope, $$this, $$thisp, '$_x'), '=');
				$es4.$$set(scope, $$this, $$thisp, '$_y1', $es4.$$get(scope, $$this, $$thisp, '$_y'), '=');
				$es4.$$call($$thisp, $$this, $$thisp, '$_recalculateBounds', $es4.$$EMPTY_ARRAY);
				return;
			}
			x = x1 + $es4.$$get(scope, $$this, $$thisp, '$_x');
			y = y1 + $es4.$$get(scope, $$this, $$thisp, '$_y');
			width = abs(x2 - x1);
			height = abs(y2 - y1);
			if (height === $es4.$$get(scope, $$this, $$thisp, '$_height') && width === $es4.$$get(scope, $$this, $$thisp, '$_width') && x === $es4.$$get(scope, $$this, $$thisp, '$_x1') && y === $es4.$$get(scope, $$this, $$thisp, '$_y1'))
			{
				return;
			}
			$es4.$$set(scope, $$this, $$thisp, '$_x1', x, '=');
			$es4.$$set(scope, $$this, $$thisp, '$_y1', y, '=');
			$es4.$$set(scope, $$this, $$thisp, '$_height', height, '=');
			$es4.$$set(scope, $$this, $$thisp, '$_width', width, '=');
			if ($es4.$$get(scope, $$this, $$thisp, '$_scrollRect') !== null)
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_notifyParentOfBoundsChange', $es4.$$EMPTY_ARRAY);
				return;
			}
			$es4.$$call($$thisp, $$this, $$thisp, '$_recalculateBounds', $es4.$$EMPTY_ARRAY);
		}));

		//method
		$es4.$$private_function('$_recalculateBounds', $$thisp, (function ()
		{
			var scope = $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope');
			var matrix = $es4.$$get(scope, $$this, $$thisp, '$_matrix');
			var width = $es4.$$get(scope, $$this, $$thisp, '$_scrollRect') !== null ? $es4.$$get(scope, $$this, $$thisp, '$_scrollRect', 'width') : $es4.$$get(scope, $$this, $$thisp, '$_width');
			var height = $es4.$$get(scope, $$this, $$thisp, '$_scrollRect') !== null ? $es4.$$get(scope, $$this, $$thisp, '$_scrollRect', 'height') : $es4.$$get(scope, $$this, $$thisp, '$_height');
			var rotation = $es4.$$get(scope, $$this, $$thisp, '$_rotation');
			var value;
			var bounds = $es4.$$get(scope, $$this, $$thisp, '$_bounds');
			if (rotation)
			{
				var xDiff = $es4.$$coerce($es4.$$get(scope, $$this, $$thisp, '$_x1') - $es4.$$get(scope, $$this, $$thisp, '$_x'), Number);
				var yDiff = $es4.$$coerce($es4.$$get(scope, $$this, $$thisp, '$_y1') - $es4.$$get(scope, $$this, $$thisp, '$_y'), Number);
				var point1 = $es4.$$call(matrix, $$this, $$thisp, '$__transformPoint', [xDiff, yDiff]);
				var point2 = $es4.$$call(matrix, $$this, $$thisp, '$__transformPoint', [xDiff + width, yDiff]);
				var point3 = $es4.$$call(matrix, $$this, $$thisp, '$__transformPoint', [xDiff + width, yDiff + height]);
				var point4 = $es4.$$call(matrix, $$this, $$thisp, '$__transformPoint', [xDiff, yDiff + height]);
				var left = $es4.$$call(Math, $$this, $$thisp, 'min', [$es4.$$get(point1, $$this, $$thisp, 0), $es4.$$get(point2, $$this, $$thisp, 0), $es4.$$get(point3, $$this, $$thisp, 0), $es4.$$get(point4, $$this, $$thisp, 0)]);
				var right = $es4.$$call(Math, $$this, $$thisp, 'max', [$es4.$$get(point1, $$this, $$thisp, 0), $es4.$$get(point2, $$this, $$thisp, 0), $es4.$$get(point3, $$this, $$thisp, 0), $es4.$$get(point4, $$this, $$thisp, 0)]);
				var top = $es4.$$call(Math, $$this, $$thisp, 'min', [$es4.$$get(point1, $$this, $$thisp, 1), $es4.$$get(point2, $$this, $$thisp, 1), $es4.$$get(point3, $$this, $$thisp, 1), $es4.$$get(point4, $$this, $$thisp, 1)]);
				var bottom = $es4.$$call(Math, $$this, $$thisp, 'max', [$es4.$$get(point1, $$this, $$thisp, 1), $es4.$$get(point2, $$this, $$thisp, 1), $es4.$$get(point3, $$this, $$thisp, 1), $es4.$$get(point4, $$this, $$thisp, 1)]);
				var x2 = right - left;
				var y2 = bottom - top;
				$es4.$$set(bounds, $$this, $$thisp, 0, left, '=');
				$es4.$$set(bounds, $$this, $$thisp, 1, top, '=');
				$es4.$$set(bounds, $$this, $$thisp, 2, x2, '=');
				$es4.$$set(bounds, $$this, $$thisp, 3, y2, '=');
			}
			else
			{
				value = $es4.$$get($es4.$$call(matrix, $$this, $$thisp, '$__transformPoint', [$es4.$$get(scope, $$this, $$thisp, '$_x1') - $es4.$$get(scope, $$this, $$thisp, '$_x'), 0]), $$this, $$thisp, 0);
				$es4.$$set(bounds, $$this, $$thisp, 0, value, '=');
				value = $es4.$$get($es4.$$call(matrix, $$this, $$thisp, '$__transformPoint', [0, $es4.$$get(scope, $$this, $$thisp, '$_y1') - $es4.$$get(scope, $$this, $$thisp, '$_y')]), $$this, $$thisp, 1);
				$es4.$$set(bounds, $$this, $$thisp, 1, value, '=');
				value = $es4.$$get($es4.$$call(matrix, $$this, $$thisp, '$__deltaTransformPoint', [width, 0]), $$this, $$thisp, 0);
				$es4.$$set(bounds, $$this, $$thisp, 2, value, '=');
				value = $es4.$$get($es4.$$call(matrix, $$this, $$thisp, '$__deltaTransformPoint', [0, height]), $$this, $$thisp, 1);
				$es4.$$set(bounds, $$this, $$thisp, 3, value, '=');
			}
			$es4.$$call($$thisp, $$this, $$thisp, '$_notifyParentOfBoundsChange', $es4.$$EMPTY_ARRAY);
		}));

		//method
		$es4.$$private_function('$_transform', $$thisp, (function ()
		{
			var properties = $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope');
			var previousTransformValues = $es4.$$get($$thisp, $$this, $$thisp, '$_previousTransformValues');
			var style = $es4.$$get(properties, $$this, $$thisp, '$_domView', 'style');
			var cacheAsBitmap = $es4.$$coerce($es4.$$get(properties, $$this, $$thisp, '$_cacheAsBitmap'), Boolean);
			if (cacheAsBitmap)
			{
				if ($es4.$$get(previousTransformValues, $$this, $$thisp, 'rotation') != $es4.$$get(properties, $$this, $$thisp, '$_rotation') || $es4.$$get(previousTransformValues, $$this, $$thisp, 'scaleX') != $es4.$$get(properties, $$this, $$thisp, '$_scaleX') || $es4.$$get(previousTransformValues, $$this, $$thisp, 'scaleY') != $es4.$$get(properties, $$this, $$thisp, '$_scaleY') || $es4.$$get(previousTransformValues, $$this, $$thisp, 'x') != ($es4.$$get(properties, $$this, $$thisp, '$_x') + $es4.$$get(properties, $$this, $$thisp, '$_scrollRectXOffset')) || $es4.$$get(previousTransformValues, $$this, $$thisp, 'y') != ($es4.$$get(properties, $$this, $$thisp, '$_y') + $es4.$$get(properties, $$this, $$thisp, '$_scrollRectYOffset')))
				{
					$es4.$$set(style, $$this, $$thisp, $es4.$$call(Browser, $$this, $$thisp, 'getTransformString', $es4.$$EMPTY_ARRAY), 'translate3d(' + ($es4.$$get(properties, $$this, $$thisp, '$_x') + $es4.$$get(properties, $$this, $$thisp, '$_scrollRectXOffset')) + 'px, ' + ($es4.$$get(properties, $$this, $$thisp, '$_y') + $es4.$$get(properties, $$this, $$thisp, '$_scrollRectYOffset')) + 'px, 0px) rotate3d(0, 0, 1,' + $es4.$$get(properties, $$this, $$thisp, '$_rotation') + 'deg) scale3d(' + $es4.$$get(properties, $$this, $$thisp, '$_scaleX') + ',' + $es4.$$get(properties, $$this, $$thisp, '$_scaleY') + ', 1)', '=');
					$es4.$$set(previousTransformValues, $$this, $$thisp, 'y', $es4.$$get(properties, $$this, $$thisp, '$_y') + $es4.$$get(properties, $$this, $$thisp, '$_scrollRectYOffset'), '=');
					$es4.$$set(previousTransformValues, $$this, $$thisp, 'x', $es4.$$get(properties, $$this, $$thisp, '$_x') + $es4.$$get(properties, $$this, $$thisp, '$_scrollRectXOffset'), '=');
					$es4.$$set(previousTransformValues, $$this, $$thisp, 'rotation', $es4.$$get(properties, $$this, $$thisp, '$_rotation'), '=');
					$es4.$$set(previousTransformValues, $$this, $$thisp, 'scaleX', $es4.$$get(properties, $$this, $$thisp, '$_scaleX'), '=');
					$es4.$$set(previousTransformValues, $$this, $$thisp, 'scaleY', $es4.$$get(properties, $$this, $$thisp, '$_scaleY'), '=');
				}
				return;
			}
			if ($es4.$$get(previousTransformValues, $$this, $$thisp, 'x') != ($es4.$$get(properties, $$this, $$thisp, '$_x') + $es4.$$get(properties, $$this, $$thisp, '$_scrollRectXOffset')))
			{
				$es4.$$set(style, $$this, $$thisp, 'left', ($es4.$$get(properties, $$this, $$thisp, '$_x') + $es4.$$get(properties, $$this, $$thisp, '$_scrollRectXOffset')) + 'px', '=');
				$es4.$$set(previousTransformValues, $$this, $$thisp, 'x', $es4.$$get(properties, $$this, $$thisp, '$_x') + $es4.$$get(properties, $$this, $$thisp, '$_scrollRectXOffset'), '=');
			}
			if ($es4.$$get(previousTransformValues, $$this, $$thisp, 'y') != ($es4.$$get(properties, $$this, $$thisp, '$_y') + $es4.$$get(properties, $$this, $$thisp, '$_scrollRectYOffset')))
			{
				$es4.$$set(style, $$this, $$thisp, 'top', ($es4.$$get(properties, $$this, $$thisp, '$_y') + $es4.$$get(properties, $$this, $$thisp, '$_scrollRectYOffset')) + 'px', '=');
				$es4.$$set(previousTransformValues, $$this, $$thisp, 'y', $es4.$$get(properties, $$this, $$thisp, '$_y') + $es4.$$get(properties, $$this, $$thisp, '$_scrollRectYOffset'), '=');
			}
			if ($es4.$$get(previousTransformValues, $$this, $$thisp, 'rotation') != $es4.$$get(properties, $$this, $$thisp, '$_rotation') || $es4.$$get(previousTransformValues, $$this, $$thisp, 'scaleX') != $es4.$$get(properties, $$this, $$thisp, '$_scaleX') || $es4.$$get(previousTransformValues, $$this, $$thisp, 'scaleY') != $es4.$$get(properties, $$this, $$thisp, '$_scaleY'))
			{
				$es4.$$set(style, $$this, $$thisp, $es4.$$call(Browser, $$this, $$thisp, 'getTransformString', $es4.$$EMPTY_ARRAY), 'rotate(' + $es4.$$get(properties, $$this, $$thisp, '$_rotation') + 'deg) scale(' + $es4.$$get(properties, $$this, $$thisp, '$_scaleX') + ',' + $es4.$$get(properties, $$this, $$thisp, '$_scaleY') + ')', '=');
				$es4.$$set(previousTransformValues, $$this, $$thisp, 'rotation', $es4.$$get(properties, $$this, $$thisp, '$_rotation'), '=');
				$es4.$$set(previousTransformValues, $$this, $$thisp, 'scaleX', $es4.$$get(properties, $$this, $$thisp, '$_scaleX'), '=');
				$es4.$$set(previousTransformValues, $$this, $$thisp, 'scaleY', $es4.$$get(properties, $$this, $$thisp, '$_scaleY'), '=');
			}
		}));

		//method
		$es4.$$public_function('localToGlobal', $$thisp, (function ($$$$point)
		{
			//set default parameter values
			var point = $es4.$$coerce($$$$point, Point);

			if ($es4.$$is($$this, Stage))
			{
				return $es4.$$call(point, $$this, $$thisp, 'clone', $es4.$$EMPTY_ARRAY);
			}
			var thisScope = $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope');
			var thisBoundsRelativeToParent = $es4.$$get(thisScope, $$this, $$thisp, '$_bounds');
			var current = null;
			var currentScope;
			var width = $es4.$$get(thisScope, $$this, $$thisp, '$_width');
			var height = $es4.$$get(thisScope, $$this, $$thisp, '$_height');
			var value;
			var x1;
			var y1;
			var thisMatrix = $es4.$$coerce($es4.$$call(thisScope, $$this, $$thisp, '$_matrix', 'clone', $es4.$$EMPTY_ARRAY), Matrix);
			current = $es4.$$coerce($es4.$$get(thisScope, $$this, $$thisp, '$_domView', 'parentNode') ? $es4.$$get(thisScope, $$this, $$thisp, '$_domView', 'parentNode', 'displayObject') : null, DisplayObjectContainer);
			while (current !== null)
			{
				currentScope = $es4.$$get($es4.$$call(current, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope');
				$es4.$$call(thisMatrix, $$this, $$thisp, 'concat', [$es4.$$get(currentScope, $$this, $$thisp, '$_matrix')]);
				current = $es4.$$coerce($es4.$$get(currentScope, $$this, $$thisp, '$_domView', 'parentNode') ? $es4.$$get(currentScope, $$this, $$thisp, '$_domView', 'parentNode', 'displayObject') : null, DisplayObjectContainer);
			}
			var xDiff = 0;
			var yDiff = 0;
			var array = $es4.$$call(thisMatrix, $$this, $$thisp, '$__transformPoint', [xDiff + $es4.$$get(point, $$this, $$thisp, 'x'), yDiff + $es4.$$get(point, $$this, $$thisp, 'y')]);
			value = $es4.$$get(array, $$this, $$thisp, 0);
			x1 = ($es4.$$call(Math, $$this, $$thisp, 'round', [($es4.$$call(Math, $$this, $$thisp, 'floor', [$es4.$$call(Math, $$this, $$thisp, 'abs', [value + .00125]) * 1000]) / 1000) * 20]) / 20) * (value > 0 ? 1 : -1);
			value = $es4.$$get(array, $$this, $$thisp, 1);
			y1 = ($es4.$$call(Math, $$this, $$thisp, 'round', [($es4.$$call(Math, $$this, $$thisp, 'floor', [$es4.$$call(Math, $$this, $$thisp, 'abs', [value + .00125]) * 1000]) / 1000) * 20]) / 20) * (value > 0 ? 1 : -1);
			return $es4.$$primitive(new (Point)(x1, y1));
		}));

		//method
		$es4.$$public_function('globalToLocal', $$thisp, (function ($$$$point)
		{
			//set default parameter values
			var point = $es4.$$coerce($$$$point, Point);

			if ($es4.$$is($$this, Stage))
			{
				return $es4.$$call(point, $$this, $$thisp, 'clone', $es4.$$EMPTY_ARRAY);
			}
			var thisScope = $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope');
			var thisBoundsRelativeToParent = $es4.$$get(thisScope, $$this, $$thisp, '$_bounds');
			var current = null;
			var currentScope;
			var width = $es4.$$get(thisScope, $$this, $$thisp, '$_width');
			var height = $es4.$$get(thisScope, $$this, $$thisp, '$_height');
			var value;
			var x1;
			var y1;
			var thisMatrix = $es4.$$coerce($es4.$$call(thisScope, $$this, $$thisp, '$_matrix', 'clone', $es4.$$EMPTY_ARRAY), Matrix);
			current = $es4.$$coerce($es4.$$get(thisScope, $$this, $$thisp, '$_domView', 'parentNode') ? $es4.$$get(thisScope, $$this, $$thisp, '$_domView', 'parentNode', 'displayObject') : null, DisplayObjectContainer);
			while (current !== null)
			{
				currentScope = $es4.$$get($es4.$$call(current, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope');
				$es4.$$call(thisMatrix, $$this, $$thisp, 'concat', [$es4.$$get(currentScope, $$this, $$thisp, '$_matrix')]);
				current = $es4.$$coerce($es4.$$get(currentScope, $$this, $$thisp, '$_domView', 'parentNode') ? $es4.$$get(currentScope, $$this, $$thisp, '$_domView', 'parentNode', 'displayObject') : null, DisplayObjectContainer);
			}
			$es4.$$call(thisMatrix, $$this, $$thisp, 'invert', $es4.$$EMPTY_ARRAY);
			var xDiff = 0;
			var yDiff = 0;
			var array = $es4.$$call(thisMatrix, $$this, $$thisp, '$__transformPoint', [xDiff + $es4.$$get(point, $$this, $$thisp, 'x'), yDiff + $es4.$$get(point, $$this, $$thisp, 'y')]);
			value = $es4.$$get(array, $$this, $$thisp, 0);
			x1 = ($es4.$$call(Math, $$this, $$thisp, 'round', [($es4.$$call(Math, $$this, $$thisp, 'floor', [$es4.$$call(Math, $$this, $$thisp, 'abs', [value + .00125]) * 1000]) / 1000) * 20]) / 20) * (value > 0 ? 1 : -1);
			value = $es4.$$get(array, $$this, $$thisp, 1);
			y1 = ($es4.$$call(Math, $$this, $$thisp, 'round', [($es4.$$call(Math, $$this, $$thisp, 'floor', [$es4.$$call(Math, $$this, $$thisp, 'abs', [value + .00125]) * 1000]) / 1000) * 20]) / 20) * (value > 0 ? 1 : -1);
			return $es4.$$primitive(new (Point)(x1, y1));
		}));

		//method
		$es4.$$public_function('hitTestObject', $$thisp, (function ($$$$obj)
		{
			//set default parameter values
			var obj = $es4.$$coerce($$$$obj, $es4.$$['flash.display'].DisplayObject);

			throw $es4.$$primitive(new (Error)('DisplayObject: attempted call to an unimplemented function "hitTestObject"'));
		}));

		//method
		$es4.$$public_function('hitTestPoint', $$thisp, (function ($$$$x, $$$$y, $$$$shapeFlag)
		{
			//set default parameter values
			var x = $es4.$$coerce($$$$x, Number);
			var y = $es4.$$coerce($$$$y, Number);
			var shapeFlag = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$shapeFlag, Boolean);

			throw $es4.$$primitive(new (Error)('DisplayObject: attempted call to an unimplemented function "hitTestPoint"'));
		}));

		//method
		$es4.$$public_function('getBounds', $$thisp, (function ($$$$targetCoordinateSpace)
		{
			//set default parameter values
			var targetCoordinateSpace = $es4.$$coerce($$$$targetCoordinateSpace, $es4.$$['flash.display'].DisplayObject);

			targetCoordinateSpace = $es4.$$coerce(targetCoordinateSpace || $$this, $es4.$$['flash.display'].DisplayObject);
			var thisScope = $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope');
			var thisBoundsRelativeToParent = $es4.$$get(thisScope, $$this, $$thisp, '$_bounds');
			var targetScope = $es4.$$get($es4.$$call(targetCoordinateSpace, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope');
			var targetBoundsRelativeToParent = $es4.$$get(targetScope, $$this, $$thisp, '$_bounds');
			var x1;
			var y1;
			var x2;
			var y2;
			var width = $es4.$$get(thisScope, $$this, $$thisp, '$_width');
			var height = $es4.$$get(thisScope, $$this, $$thisp, '$_height');
			var value;
			if (targetCoordinateSpace === $$this)
			{
				value = $es4.$$get(thisScope, $$this, $$thisp, '$_x1') - $es4.$$get(thisScope, $$this, $$thisp, '$_x');
				x1 = ($es4.$$call(Math, $$this, $$thisp, 'round', [($es4.$$call(Math, $$this, $$thisp, 'floor', [$es4.$$call(Math, $$this, $$thisp, 'abs', [value + .00125]) * 1000]) / 1000) * 20]) / 20) * (value > 0 ? 1 : -1);
				value = $es4.$$get(thisScope, $$this, $$thisp, '$_y1') - $es4.$$get(thisScope, $$this, $$thisp, '$_y');
				y1 = ($es4.$$call(Math, $$this, $$thisp, 'round', [($es4.$$call(Math, $$this, $$thisp, 'floor', [$es4.$$call(Math, $$this, $$thisp, 'abs', [value + .00125]) * 1000]) / 1000) * 20]) / 20) * (value > 0 ? 1 : -1);
				value = width;
				x2 = ($es4.$$call(Math, $$this, $$thisp, 'round', [($es4.$$call(Math, $$this, $$thisp, 'floor', [$es4.$$call(Math, $$this, $$thisp, 'abs', [value + .00125]) * 1000]) / 1000) * 20]) / 20) * (value > 0 ? 1 : -1);
				value = height;
				y2 = ($es4.$$call(Math, $$this, $$thisp, 'round', [($es4.$$call(Math, $$this, $$thisp, 'floor', [$es4.$$call(Math, $$this, $$thisp, 'abs', [value + .00125]) * 1000]) / 1000) * 20]) / 20) * (value > 0 ? 1 : -1);
				return $es4.$$primitive(new (Rectangle)(x1, y1, x2, y2));
			}
			var current = null;
			var currentScope;
			var matrix = null;
			var thisMatrix = $es4.$$coerce($es4.$$call(thisScope, $$this, $$thisp, '$_matrix', 'clone', $es4.$$EMPTY_ARRAY), Matrix);
			current = $es4.$$coerce($es4.$$get(thisScope, $$this, $$thisp, '$_domView', 'parentNode') ? $es4.$$get(thisScope, $$this, $$thisp, '$_domView', 'parentNode', 'displayObject') : null, DisplayObjectContainer);
			while (current !== null && current !== targetCoordinateSpace)
			{
				currentScope = $es4.$$get($es4.$$call(current, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope');
				$es4.$$call(thisMatrix, $$this, $$thisp, 'concat', [$es4.$$get(currentScope, $$this, $$thisp, '$_matrix')]);
				current = $es4.$$coerce($es4.$$get(currentScope, $$this, $$thisp, '$_domView', 'parentNode') ? $es4.$$get(currentScope, $$this, $$thisp, '$_domView', 'parentNode', 'displayObject') : null, DisplayObjectContainer);
			}
			if (current === targetCoordinateSpace)
			{
				matrix = thisMatrix;
			}
			else
			{
				var targetMatrix = $es4.$$coerce($es4.$$call(targetScope, $$this, $$thisp, '$_matrix', 'clone', $es4.$$EMPTY_ARRAY), Matrix);
				current = $es4.$$coerce($es4.$$get(targetScope, $$this, $$thisp, '$_domView', 'parentNode') ? $es4.$$get(targetScope, $$this, $$thisp, '$_domView', 'parentNode', 'displayObject') : null, DisplayObjectContainer);
				while (current !== null && current !== $$this)
				{
					currentScope = $es4.$$get($es4.$$call(current, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope');
					$es4.$$call(targetMatrix, $$this, $$thisp, 'concat', [$es4.$$get(currentScope, $$this, $$thisp, '$_matrix')]);
					current = $es4.$$coerce($es4.$$get(currentScope, $$this, $$thisp, '$_domView', 'parentNode') ? $es4.$$get(currentScope, $$this, $$thisp, '$_domView', 'parentNode', 'displayObject') : null, DisplayObjectContainer);
				}
				$es4.$$call(targetMatrix, $$this, $$thisp, 'invert', $es4.$$EMPTY_ARRAY);
				if (current === $$this)
				{
					matrix = targetMatrix;
				}
			}
			if (matrix === null)
			{
				$es4.$$call(thisMatrix, $$this, $$thisp, 'concat', [targetMatrix]);
				matrix = thisMatrix;
			}
			var xDiff = $es4.$$coerce($es4.$$get(thisScope, $$this, $$thisp, '$_x1') - $es4.$$get(thisScope, $$this, $$thisp, '$_x'), Number);
			var yDiff = $es4.$$coerce($es4.$$get(thisScope, $$this, $$thisp, '$_y1') - $es4.$$get(thisScope, $$this, $$thisp, '$_y'), Number);
			var point1 = $es4.$$call(matrix, $$this, $$thisp, '$__transformPoint', [xDiff, yDiff]);
			var point2 = $es4.$$call(matrix, $$this, $$thisp, '$__transformPoint', [xDiff + width, yDiff]);
			var point3 = $es4.$$call(matrix, $$this, $$thisp, '$__transformPoint', [xDiff + width, yDiff + height]);
			var point4 = $es4.$$call(matrix, $$this, $$thisp, '$__transformPoint', [xDiff, yDiff + height]);
			var left = $es4.$$call(Math, $$this, $$thisp, 'min', [$es4.$$get(point1, $$this, $$thisp, 0), $es4.$$get(point2, $$this, $$thisp, 0), $es4.$$get(point3, $$this, $$thisp, 0), $es4.$$get(point4, $$this, $$thisp, 0)]);
			var right = $es4.$$call(Math, $$this, $$thisp, 'max', [$es4.$$get(point1, $$this, $$thisp, 0), $es4.$$get(point2, $$this, $$thisp, 0), $es4.$$get(point3, $$this, $$thisp, 0), $es4.$$get(point4, $$this, $$thisp, 0)]);
			var top = $es4.$$call(Math, $$this, $$thisp, 'min', [$es4.$$get(point1, $$this, $$thisp, 1), $es4.$$get(point2, $$this, $$thisp, 1), $es4.$$get(point3, $$this, $$thisp, 1), $es4.$$get(point4, $$this, $$thisp, 1)]);
			var bottom = $es4.$$call(Math, $$this, $$thisp, 'max', [$es4.$$get(point1, $$this, $$thisp, 1), $es4.$$get(point2, $$this, $$thisp, 1), $es4.$$get(point3, $$this, $$thisp, 1), $es4.$$get(point4, $$this, $$thisp, 1)]);
			value = right - left;
			value = ($es4.$$call(Math, $$this, $$thisp, 'round', [($es4.$$call(Math, $$this, $$thisp, 'floor', [$es4.$$call(Math, $$this, $$thisp, 'abs', [value + .00125]) * 1000]) / 1000) * 20]) / 20) * (value > 0 ? 1 : -1);
			var x2 = value;
			value = bottom - top;
			value = ($es4.$$call(Math, $$this, $$thisp, 'round', [($es4.$$call(Math, $$this, $$thisp, 'floor', [$es4.$$call(Math, $$this, $$thisp, 'abs', [value + .00125]) * 1000]) / 1000) * 20]) / 20) * (value > 0 ? 1 : -1);
			var y2 = value;
			value = left;
			value = ($es4.$$call(Math, $$this, $$thisp, 'round', [($es4.$$call(Math, $$this, $$thisp, 'floor', [$es4.$$call(Math, $$this, $$thisp, 'abs', [value + .00125]) * 1000]) / 1000) * 20]) / 20) * (value > 0 ? 1 : -1);
			var x1 = value;
			value = top;
			value = ($es4.$$call(Math, $$this, $$thisp, 'round', [($es4.$$call(Math, $$this, $$thisp, 'floor', [$es4.$$call(Math, $$this, $$thisp, 'abs', [value + .00125]) * 1000]) / 1000) * 20]) / 20) * (value > 0 ? 1 : -1);
			var y1 = value;
			return $es4.$$primitive(new (Rectangle)(x1, y1, x2, y2));
		}));

		//method
		$es4.$$private_function('$_toCanvas', $$thisp, (function ()
		{
			var node = $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView');
			var canvas;
			var bitmapData = null;
			if ($es4.$$get(node, $$this, $$thisp, 'nodeName') == 'CANVAS')
			{
				canvas = $es4.$$call(document, $$this, $$thisp, 'createElement', ['canvas']);
				$es4.$$set(canvas, $$this, $$thisp, 'width', $es4.$$get(node, $$this, $$thisp, 'width'), '=');
				$es4.$$set(canvas, $$this, $$thisp, 'height', $es4.$$get(node, $$this, $$thisp, 'height'), '=');
				$es4.$$call($es4.$$call(canvas, $$this, $$thisp, 'getContext', ['2d']), $$this, $$thisp, 'drawImage', [node, 0, 0]);
				return canvas;
			}
			var clone = $es4.$$call(node, $$this, $$thisp, 'cloneNode', [true]);
			var img;
			var wrap;
			var data = null;
			var bin;
			var childNodesArray = [$es4.$$get(clone, $$this, $$thisp, 'childNodes')];
			while ($es4.$$get(childNodesArray, $$this, $$thisp, 'length'))
			{
				var childNodes = $es4.$$call(childNodesArray, $$this, $$thisp, 'pop', $es4.$$EMPTY_ARRAY);
				for (var i = $es4.$$coerce($es4.$$get(childNodes, $$this, $$thisp, 'length'), int); i--;)
				{
					var child = $es4.$$get(childNodes, $$this, $$thisp, i);
					if ($es4.$$get(child, $$this, $$thisp, 'nodeName') == 'SVG')
					{
						img = $es4.$$call(document, $$this, $$thisp, 'createElement', ['img']);
						$es4.$$set(img, $$this, $$thisp, 'style', 'cssText', $es4.$$get(child, $$this, $$thisp, 'style', 'cssText'), '=');
						$es4.$$call(child, $$this, $$thisp, 'parentNode', 'replaceChild', [img, child]);
						wrap = $es4.$$call(document, $$this, $$thisp, 'createElement', ['div']);
						$es4.$$call(wrap, $$this, $$thisp, 'appendChild', [child]);
						data = $es4.$$coerce($es4.$$get(wrap, $$this, $$thisp, 'innerHTML'), String);
						bin = $es4.$$call(window, $$this, $$thisp, 'btoa', [data]);
						$es4.$$call(img, $$this, $$thisp, 'setAttribute', ['src', 'data:' + 'image/svg+xml;charset=utf-8' + ';base64,' + bin]);
					}
					else if ($es4.$$get(child, $$this, $$thisp, 'nodeName') == 'CANVAS')
					{
						img = $es4.$$call(document, $$this, $$thisp, 'createElement', ['img']);
						$es4.$$set(img, $$this, $$thisp, 'style', 'cssText', $es4.$$get(child, $$this, $$thisp, 'style', 'cssText'), '=');
						$es4.$$call(child, $$this, $$thisp, 'parentNode', 'replaceChild', [img, child]);
					}
					else if ($es4.$$get(child, $$this, $$thisp, 'childNodes'))
					{
						$es4.$$call(childNodesArray, $$this, $$thisp, 'push', [$es4.$$get(child, $$this, $$thisp, 'childNodes')]);
					}
				}
			}
			wrap = $es4.$$call(document, $$this, $$thisp, 'createElement', ['div']);
			$es4.$$call(wrap, $$this, $$thisp, 'appendChild', [clone]);
			var doc = $es4.$$call(document, $$this, $$thisp, 'implementation', 'createHTMLDocument', ['']);
			$es4.$$set(doc, $$this, $$thisp, 'body', 'innerHTML', $es4.$$get(wrap, $$this, $$thisp, 'innerHTML'), '=');
			var wellFormedHTML = $es4.$$call($es4.$$primitive(new ($es4.$$get(window, $$this, $$thisp, 'XMLSerializer'))()), $$this, $$thisp, 'serializeToString', [$es4.$$get(doc, $$this, $$thisp, 'body', 'firstChild')]);
			var width = $es4.$$coerce($es4.$$get($$this, $$this, $$thisp, 'width'), Number);
			var height = $es4.$$coerce($es4.$$get($$this, $$this, $$thisp, 'height'), Number);
			data = '<svg xmlns="http://www.w3.org/2000/svg" width="' + width + '" height="' + height + '"><foreignObject width="' + width + '" height="' + height + '">' + wellFormedHTML + '</foreignObject></svg>';
			bin = $es4.$$call(window, $$this, $$thisp, 'btoa', [data]);
			img = $es4.$$call(document, $$this, $$thisp, 'createElement', ['img']);
			$es4.$$call(img, $$this, $$thisp, 'setAttribute', ['src', 'data:' + 'image/svg+xml;charset=utf-8' + ';base64,' + bin]);
			canvas = $es4.$$call(document, $$this, $$thisp, 'createElement', ['canvas']);
			$es4.$$set(canvas, $$this, $$thisp, 'width', width, '=');
			$es4.$$set(canvas, $$this, $$thisp, 'height', height, '=');
			$es4.$$call($es4.$$call(canvas, $$this, $$thisp, 'getContext', ['2d']), $$this, $$thisp, 'drawImage', [img, 0, 0]);
			return canvas;
		}));

		//method
		$es4.$$public_function('globalToLocal3D', $$thisp, (function ($$$$point)
		{
			//set default parameter values
			var point = $es4.$$coerce($$$$point, Point);

			throw $es4.$$primitive(new (Error)('DisplayObject: attempted call to an unimplemented function "globalToLocal3D"'));
		}));

		//method
		$es4.$$public_function('local3DToGlobal', $$thisp, (function ($$$$point3d)
		{
			//set default parameter values
			var point3d = $es4.$$coerce($$$$point3d, Vector3D);

			throw $es4.$$primitive(new (Error)('DisplayObject: attempted call to an unimplemented function "local3DToGlobal"'));
		}));

		//method
		$es4.$$public_function('getRect', $$thisp, (function ($$$$targetCoordinateSpace)
		{
			//set default parameter values
			var targetCoordinateSpace = $es4.$$coerce($$$$targetCoordinateSpace, $es4.$$['flash.display'].DisplayObject);

			throw $es4.$$primitive(new (Error)('DisplayObject: attempted call to an unimplemented function "getRect"'));
		}));

		//accessor
		$es4.$$public_accessor('x', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_x'), Number);
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			if (isNaN(value))
			{
				value = 0;
			}
			else if ($es4.$$call(Math, $$this, $$thisp, 'abs', [value]) >= 107374182.4)
			{
				value = -107374182.4;
			}
			else
			{
				value = ($es4.$$call(Math, $$this, $$thisp, 'round', [($es4.$$call(Math, $$this, $$thisp, 'floor', [$es4.$$call(Math, $$this, $$thisp, 'abs', [value + .00125]) * 1000]) / 1000) * 20]) / 20) * (value > 0 ? 1 : -1);
			}
			var scope = $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope');
			var matrix = $es4.$$get(scope, $$this, $$thisp, '$_matrix');
			if (value === $es4.$$get(matrix, $$this, $$thisp, 'tx'))
			{
				return;
			}
			$es4.$$call(matrix, $$this, $$thisp, 'translate', [-$es4.$$get(matrix, $$this, $$thisp, 'tx'), 0]);
			$es4.$$call(matrix, $$this, $$thisp, 'translate', [value, 0]);
			$es4.$$set(scope, $$this, $$thisp, '$_x', value, '=');
			$es4.$$call($$thisp, $$this, $$thisp, '$_recalculateChildBasedBounds', $es4.$$EMPTY_ARRAY);
		}));

		//accessor
		$es4.$$public_accessor('y', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_y'), Number);
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			if (isNaN(value))
			{
				value = 0;
			}
			else if ($es4.$$call(Math, $$this, $$thisp, 'abs', [value]) >= 107374182.4)
			{
				value = -107374182.4;
			}
			else
			{
				value = ($es4.$$call(Math, $$this, $$thisp, 'round', [($es4.$$call(Math, $$this, $$thisp, 'floor', [$es4.$$call(Math, $$this, $$thisp, 'abs', [value + .00125]) * 1000]) / 1000) * 20]) / 20) * (value > 0 ? 1 : -1);
			}
			var scope = $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope');
			var matrix = $es4.$$get(scope, $$this, $$thisp, '$_matrix');
			if (value === $es4.$$get(matrix, $$this, $$thisp, 'ty'))
			{
				return;
			}
			$es4.$$call(matrix, $$this, $$thisp, 'translate', [0, -$es4.$$get(matrix, $$this, $$thisp, 'ty')]);
			$es4.$$call(matrix, $$this, $$thisp, 'translate', [0, value]);
			$es4.$$set(scope, $$this, $$thisp, '$_y', value, '=');
			$es4.$$call($$thisp, $$this, $$thisp, '$_recalculateChildBasedBounds', $es4.$$EMPTY_ARRAY);
		}));

		//accessor
		$es4.$$public_accessor('height', $$thisp, (function ()
		{
			var value = $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_bounds', 3);
			return ($es4.$$call(Math, $$this, $$thisp, 'round', [($es4.$$call(Math, $$this, $$thisp, 'floor', [$es4.$$call(Math, $$this, $$thisp, 'abs', [value + .00125]) * 1000]) / 1000) * 20]) / 20) * (value > 0 ? 1 : -1);
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			if (value < 0)
			{
				return;
			}
			var scope = $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope');
			var scaleY = $es4.$$get(scope, $$this, $$thisp, '$_scaleY');
			var matrix = $es4.$$get(scope, $$this, $$thisp, '$_matrix');
			var height = $es4.$$get(scope, $$this, $$thisp, '$_height');
			if (isNaN(value))
			{
				value = 0;
			}
			if (value === 0 || height === 0)
			{
				var scaleX = $es4.$$get(scope, $$this, $$thisp, '$_scaleX');
				if (scaleY !== 0 || scaleX !== 0)
				{
					if (scaleY !== 0)
					{
						$es4.$$call(matrix, $$this, $$thisp, '$__scale', [1, 1 / scaleY]);
					}
					if (scaleX !== 0)
					{
						$es4.$$call(matrix, $$this, $$thisp, '$__scale', [1 / scaleX, 1]);
					}
					$es4.$$set(scope, $$this, $$thisp, '$_sudoScaleX', $es4.$$set(scope, $$this, $$thisp, '$_sudoScaleY', $es4.$$set(scope, $$this, $$thisp, '$_scaleX', $es4.$$set(scope, $$this, $$thisp, '$_scaleY', 0, '='), '='), '='), '=');
					$es4.$$set(scope, $$this, $$thisp, '$_bounds', 2, 0, '=');
					$es4.$$set(scope, $$this, $$thisp, '$_bounds', 3, 0, '=');
					$es4.$$call($$thisp, $$this, $$thisp, '$_notifyParentOfBoundsChange', $es4.$$EMPTY_ARRAY);
				}
				return;
			}
			var desiredYScale = value / height;
			if (desiredYScale === scaleY)
			{
				return;
			}
			if (desiredYScale > 0x8000)
			{
				desiredYScale = 0x8000;
			}
			if (desiredYScale * height > 0x6666660)
			{
				desiredYScale = 0x6666660 / height;
			}
			if (scaleY !== 0)
			{
				$es4.$$call(matrix, $$this, $$thisp, '$__scale', [1, 1 / scaleY]);
			}
			$es4.$$call(matrix, $$this, $$thisp, '$__scale', [1, desiredYScale]);
			$es4.$$set(scope, $$this, $$thisp, '$_sudoScaleY', $es4.$$set(scope, $$this, $$thisp, '$_scaleY', desiredYScale, '='), '=');
			if ($es4.$$get(scope, $$this, $$thisp, '$_rotation'))
			{
				throw $es4.$$primitive(new (Error)('changing the width/height of a rotated object does not appear to function properly in flash. recommend setting object to rotation 0, then resizing, then rotating back to desired position; or, resize via scaleX and scaleY'));
			}
			$es4.$$call($$thisp, $$this, $$thisp, '$_recalculateBounds', $es4.$$EMPTY_ARRAY);
		}));

		//accessor
		$es4.$$public_accessor('width', $$thisp, (function ()
		{
			var value = $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_bounds', 2);
			return ($es4.$$call(Math, $$this, $$thisp, 'round', [($es4.$$call(Math, $$this, $$thisp, 'floor', [$es4.$$call(Math, $$this, $$thisp, 'abs', [value + .00125]) * 1000]) / 1000) * 20]) / 20) * (value > 0 ? 1 : -1);
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			if (value < 0)
			{
				return;
			}
			var scope = $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope');
			var scaleX = $es4.$$get(scope, $$this, $$thisp, '$_scaleX');
			var matrix = $es4.$$get(scope, $$this, $$thisp, '$_matrix');
			var width = $es4.$$get(scope, $$this, $$thisp, '$_width');
			if (isNaN(value))
			{
				value = 0;
			}
			if (value === 0 || width === 0)
			{
				var scaleY = $es4.$$get(scope, $$this, $$thisp, '$_scaleY');
				if (scaleY !== 0 || scaleX !== 0)
				{
					if (scaleY !== 0)
					{
						$es4.$$call(matrix, $$this, $$thisp, '$__scale', [1, 1 / scaleY]);
					}
					if (scaleX !== 0)
					{
						$es4.$$call(matrix, $$this, $$thisp, '$__scale', [1 / scaleX, 1]);
					}
					$es4.$$set(scope, $$this, $$thisp, '$_sudoScaleX', $es4.$$set(scope, $$this, $$thisp, '$_sudoScaleY', $es4.$$set(scope, $$this, $$thisp, '$_scaleX', $es4.$$set(scope, $$this, $$thisp, '$_scaleY', 0, '='), '='), '='), '=');
					$es4.$$set(scope, $$this, $$thisp, '$_bounds', 2, 0, '=');
					$es4.$$set(scope, $$this, $$thisp, '$_bounds', 3, 0, '=');
					$es4.$$call($$thisp, $$this, $$thisp, '$_notifyParentOfBoundsChange', $es4.$$EMPTY_ARRAY);
				}
				return;
			}
			var desiredXScale = value / width;
			if (desiredXScale === scaleX)
			{
				return;
			}
			if (desiredXScale > 0x8000)
			{
				desiredXScale = 0x8000;
			}
			if (desiredXScale * width > 0x6666660)
			{
				desiredXScale = 0x6666660 / width;
			}
			if (scaleX !== 0)
			{
				$es4.$$call(matrix, $$this, $$thisp, '$__scale', [1 / scaleX, 1]);
			}
			$es4.$$call(matrix, $$this, $$thisp, '$__scale', [desiredXScale, 1]);
			$es4.$$set(scope, $$this, $$thisp, '$_sudoScaleX', $es4.$$set(scope, $$this, $$thisp, '$_scaleX', desiredXScale, '='), '=');
			if ($es4.$$get(scope, $$this, $$thisp, '$_rotation'))
			{
				throw $es4.$$primitive(new (Error)('changing the width/height of a rotated object does not appear to function properly in flash. recommend setting object to rotation 0, then resizing, then rotating back to desired position; or, resize via scaleX and scaleY'));
			}
			$es4.$$call($$thisp, $$this, $$thisp, '$_recalculateBounds', $es4.$$EMPTY_ARRAY);
		}));

		//accessor
		$es4.$$public_accessor('scaleX', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_sudoScaleX'), Number);
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var scope = $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope');
			var sudoScaleX = $es4.$$get(scope, $$this, $$thisp, '$_sudoScaleX');
			var scaleX = $es4.$$get(scope, $$this, $$thisp, '$_scaleX');
			var matrix = $es4.$$get(scope, $$this, $$thisp, '$_matrix');
			var width = $es4.$$get(scope, $$this, $$thisp, '$_scrollRect') !== null ? $es4.$$get(scope, $$this, $$thisp, '$_scrollRect', 'width') : $es4.$$get(scope, $$this, $$thisp, '$_width');
			if (value === sudoScaleX)
			{
				return;
			}
			$es4.$$set(scope, $$this, $$thisp, '$_sudoScaleX', value, '=');
			if (isNaN(value))
			{
				value = 0;
			}
			else if ($es4.$$call(Math, $$this, $$thisp, 'abs', [value]) > 0x8000)
			{
				value = 0x8000;
			}
			else if (value < 0)
			{
				value = $es4.$$call(Math, $$this, $$thisp, 'abs', [value]);
			}
			if (value === scaleX)
			{
				return;
			}
			if (value === 0)
			{
				if (scaleX !== 0)
				{
					if (scaleX !== 0)
					{
						$es4.$$call(matrix, $$this, $$thisp, '$__scale', [1 / scaleX, 1]);
					}
					$es4.$$set(scope, $$this, $$thisp, '$_scaleX', 0, '=');
					$es4.$$set(scope, $$this, $$thisp, '$_bounds', 2, 0, '=');
					$es4.$$call($$thisp, $$this, $$thisp, '$_notifyParentOfBoundsChange', $es4.$$EMPTY_ARRAY);
				}
				return;
			}
			if (value * width > 0x6666660)
			{
				value = $es4.$$coerce(0x6666660 / width, Number);
			}
			var rotation = $es4.$$get(scope, $$this, $$thisp, '$_rotation');
			if (rotation !== 0)
			{
				$es4.$$call(matrix, $$this, $$thisp, '$__rotate', [-(rotation * ($es4.$$get(Math, $$this, $$thisp, 'PI') / 180))]);
			}
			if (scaleX !== 0)
			{
				$es4.$$call(matrix, $$this, $$thisp, '$__scale', [1 / scaleX, 1]);
			}
			value = $es4.$$call(Math, $$this, $$thisp, 'floor', [value * 16384]) / 16384;
			$es4.$$call(matrix, $$this, $$thisp, '$__scale', [value, 1]);
			if (rotation !== 0)
			{
				$es4.$$call(matrix, $$this, $$thisp, '$__rotate', [rotation * ($es4.$$get(Math, $$this, $$thisp, 'PI') / 180)]);
			}
			$es4.$$set(scope, $$this, $$thisp, '$_scaleX', value, '=');
			$es4.$$call($$thisp, $$this, $$thisp, '$_recalculateBounds', $es4.$$EMPTY_ARRAY);
		}));

		//accessor
		$es4.$$public_accessor('scaleY', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_sudoScaleY'), Number);
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var scope = $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope');
			var sudoScaleY = $es4.$$get(scope, $$this, $$thisp, '$_sudoScaleY');
			var scaleY = $es4.$$get(scope, $$this, $$thisp, '$_scaleY');
			var matrix = $es4.$$get(scope, $$this, $$thisp, '$_matrix');
			var height = $es4.$$get(scope, $$this, $$thisp, '$_scrollRect') !== null ? $es4.$$get(scope, $$this, $$thisp, '$_scrollRect', 'height') : $es4.$$get(scope, $$this, $$thisp, '$_height');
			if (value === sudoScaleY)
			{
				return;
			}
			$es4.$$set(scope, $$this, $$thisp, '$_sudoScaleY', value, '=');
			if (isNaN(value))
			{
				value = 0;
			}
			else if ($es4.$$call(Math, $$this, $$thisp, 'abs', [value]) > 0x8000)
			{
				value = 0x8000;
			}
			else if (value < 0)
			{
				value = $es4.$$call(Math, $$this, $$thisp, 'abs', [value]);
			}
			if (value === scaleY)
			{
				return;
			}
			if (value === 0)
			{
				if (scaleY !== 0)
				{
					if (scaleY !== 0)
					{
						$es4.$$call(matrix, $$this, $$thisp, '$__scale', [1, 1 / scaleY]);
					}
					$es4.$$set(scope, $$this, $$thisp, '$_scaleY', 0, '=');
					$es4.$$set(scope, $$this, $$thisp, '$_bounds', 3, 0, '=');
					$es4.$$call($$thisp, $$this, $$thisp, '$_notifyParentOfBoundsChange', $es4.$$EMPTY_ARRAY);
				}
				return;
			}
			if (value * height > 0x6666660)
			{
				value = $es4.$$coerce(0x6666660 / height, Number);
			}
			var rotation = $es4.$$get(scope, $$this, $$thisp, '$_rotation');
			if (rotation !== 0)
			{
				$es4.$$call(matrix, $$this, $$thisp, '$__rotate', [-(rotation * ($es4.$$get(Math, $$this, $$thisp, 'PI') / 180))]);
			}
			if (scaleY !== 0)
			{
				$es4.$$call(matrix, $$this, $$thisp, '$__scale', [1, 1 / scaleY]);
			}
			value = $es4.$$call(Math, $$this, $$thisp, 'floor', [value * 16384]) / 16384;
			$es4.$$call(matrix, $$this, $$thisp, '$__scale', [1, value]);
			if (rotation !== 0)
			{
				$es4.$$call(matrix, $$this, $$thisp, '$__rotate', [rotation * ($es4.$$get(Math, $$this, $$thisp, 'PI') / 180)]);
			}
			$es4.$$set(scope, $$this, $$thisp, '$_scaleY', value, '=');
			$es4.$$call($$thisp, $$this, $$thisp, '$_recalculateBounds', $es4.$$EMPTY_ARRAY);
		}));

		//accessor
		$es4.$$public_accessor('rotation', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_sudoRotation'), Number);
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var scope = $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope');
			var sudoRotation = $es4.$$get(scope, $$this, $$thisp, '$_sudoRotation');
			var rotation = $es4.$$get(scope, $$this, $$thisp, '$_rotation');
			var matrix = $es4.$$get(scope, $$this, $$thisp, '$_matrix');
			if (value === sudoRotation || value === rotation)
			{
				return;
			}
			$es4.$$set(scope, $$this, $$thisp, '$_sudoRotation', value, '=');
			if (isNaN(value))
			{
				value = 0;
			}
			else if (!isFinite(value))
			{
				$es4.$$set(scope, $$this, $$thisp, '$_sudoRotation', NaN, '=');
				value = 0;
			}
			else if ($es4.$$call(Math, $$this, $$thisp, 'abs', [value]) > 180)
			{
				if ($es4.$$call(Math, $$this, $$thisp, 'abs', [value]) > 32767)
				{
					throw $es4.$$primitive(new (Error)('cannot set rotation to value greater than 32767 due to flash rotation bug'));
				}
				value = value % 360;
				value = (value + 360) % 360;
				if (value > 180)
				{
					value -= 360;
				}
				$es4.$$set(scope, $$this, $$thisp, '$_sudoRotation', value, '=');
			}
			if ($es4.$$get(scope, $$this, $$thisp, '$_sudoRotation') === sudoRotation || value === rotation)
			{
				return;
			}
			if (rotation !== 0)
			{
				$es4.$$call(matrix, $$this, $$thisp, '$__rotate', [-(rotation * ($es4.$$get(Math, $$this, $$thisp, 'PI') / 180))]);
			}
			$es4.$$call(matrix, $$this, $$thisp, '$__rotate', [(value * ($es4.$$get(Math, $$this, $$thisp, 'PI') / 180))]);
			$es4.$$set(scope, $$this, $$thisp, '$_rotation', value, '=');
			$es4.$$call($$thisp, $$this, $$thisp, '$_recalculateBounds', $es4.$$EMPTY_ARRAY);
		}));

		//accessor
		$es4.$$public_accessor('visible', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_visible'), Boolean);
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var scope = $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope');
			if ($es4.$$get(scope, $$this, $$thisp, '$_visible') === value)
			{
				return;
			}
			if (value === false)
			{
				$es4.$$call($$this, $$this, $$thisp, '$__notify', ['visibleFalse', null]);
			}
			$es4.$$set(scope, $$this, $$thisp, '$_visible', value, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'style', 'visibility', (value === true) ? 'inherit' : 'hidden', '=');
			$es4.$$call($$thisp, $$this, $$thisp, '$_recalculateBounds', $es4.$$EMPTY_ARRAY);
		}));

		//accessor
		$es4.$$public_accessor('scrollRect', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_scrollRect'), Rectangle);
		}), (function ($$$$rectangle)
		{
			//set default parameter values
			var rectangle = $es4.$$coerce($$$$rectangle, Rectangle);

			var properties = $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope');
			var style = $es4.$$get(properties, $$this, $$thisp, '$_domView', 'style');
			if (!rectangle)
			{
				$es4.$$call(style, $$this, $$thisp, 'removeProperty', ['clip']);
				$es4.$$call(style, $$this, $$thisp, 'removeProperty', ['width']);
				$es4.$$call(style, $$this, $$thisp, 'removeProperty', ['height']);
				$es4.$$set(properties, $$this, $$thisp, '$_scrollRectXOffset', 0, '=');
				$es4.$$set(properties, $$this, $$thisp, '$_scrollRectYOffset', 0, '=');
				$es4.$$set(properties, $$this, $$thisp, '$_scrollRect', null, '=');
				$es4.$$call($$thisp, $$this, $$thisp, '$_recalculateBounds', $es4.$$EMPTY_ARRAY);
				return;
			}
			$es4.$$set(style, $$this, $$thisp, 'clip', 'rect(' + int($es4.$$get(rectangle, $$this, $$thisp, 'y')) + 'px ' + int($es4.$$get(rectangle, $$this, $$thisp, 'x') + $es4.$$get(rectangle, $$this, $$thisp, 'width')) + 'px ' + int($es4.$$get(rectangle, $$this, $$thisp, 'y') + $es4.$$get(rectangle, $$this, $$thisp, 'height')) + 'px ' + int($es4.$$get(rectangle, $$this, $$thisp, 'x')) + 'px)', '=');
			$es4.$$set(properties, $$this, $$thisp, '$_scrollRectXOffset', int(-$es4.$$get(rectangle, $$this, $$thisp, 'x')), '=');
			$es4.$$set(properties, $$this, $$thisp, '$_scrollRectYOffset', int(-$es4.$$get(rectangle, $$this, $$thisp, 'y')), '=');
			$es4.$$set(properties, $$this, $$thisp, '$_scrollRect', rectangle, '=');
			$es4.$$set(style, $$this, $$thisp, 'width', $es4.$$get(rectangle, $$this, $$thisp, 'width') + 'px', '=');
			$es4.$$set(style, $$this, $$thisp, 'height', $es4.$$get(rectangle, $$this, $$thisp, 'height') + 'px', '=');
			$es4.$$call($$thisp, $$this, $$thisp, '$_recalculateBounds', $es4.$$EMPTY_ARRAY);
		}));

		//accessor
		$es4.$$public_accessor('transform', $$thisp, (function ()
		{
			return $es4.$$primitive(new (Transform)($$this));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Transform);

			throw $es4.$$primitive(new (Error)('DisplayObject: attempted call to an unimplemented function "transform"'));
		}));

		//accessor
		$es4.$$public_accessor('mask', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('DisplayObject: attempted call to an unimplemented accessor "mask"'));
		}), (function ($$$$displayObject)
		{
			//set default parameter values
			var displayObject = $es4.$$coerce($$$$displayObject, $es4.$$['flash.display'].DisplayObject);

			throw $es4.$$primitive(new (Error)('DisplayObject: attempted call to an unimplemented accessor "mask"'));
		}));

		//accessor
		$es4.$$public_accessor('mouseX', $$thisp, (function ()
		{
			var mouseXPositionRelativeToStage = $es4.$$call(Math, $$this, $$thisp, 'max', [0, $es4.$$get(Stage, $$this, $$thisp, '$__pageX') - $es4.$$get(Stage, $$this, $$thisp, '$__stageLeft')]);
			var mouseYPositionRelativeToStage = $es4.$$call(Math, $$this, $$thisp, 'max', [0, $es4.$$get(Stage, $$this, $$thisp, '$__pageY') - $es4.$$get(Stage, $$this, $$thisp, '$__stageTop')]);
			return $es4.$$get($es4.$$call($$this, $$this, $$thisp, 'globalToLocal', [$es4.$$primitive(new (Point)(mouseXPositionRelativeToStage / $es4.$$get(window, $$this, $$thisp, 'globalScale'), mouseYPositionRelativeToStage / $es4.$$get(window, $$this, $$thisp, 'globalScale')))]), $$this, $$thisp, 'x');
		}), null);

		//accessor
		$es4.$$public_accessor('mouseY', $$thisp, (function ()
		{
			var mouseXPositionRelativeToStage = $es4.$$call(Math, $$this, $$thisp, 'max', [0, $es4.$$get(Stage, $$this, $$thisp, '$__pageX') - $es4.$$get(Stage, $$this, $$thisp, '$__stageLeft')]);
			var mouseYPositionRelativeToStage = $es4.$$call(Math, $$this, $$thisp, 'max', [0, $es4.$$get(Stage, $$this, $$thisp, '$__pageY') - $es4.$$get(Stage, $$this, $$thisp, '$__stageTop')]);
			return $es4.$$get($es4.$$call($$this, $$this, $$thisp, 'globalToLocal', [$es4.$$primitive(new (Point)(mouseXPositionRelativeToStage / $es4.$$get(window, $$this, $$thisp, 'globalScale'), mouseYPositionRelativeToStage / $es4.$$get(window, $$this, $$thisp, 'globalScale')))]), $$this, $$thisp, 'y');
		}), null);

		//accessor
		$es4.$$public_accessor('cacheAsBitmap', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_cacheAsBitmap'), Boolean);
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			var properties = $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope');
			if (value == $es4.$$get(properties, $$this, $$thisp, '$_cacheAsBitmap'))
			{
				return;
			}
			var previousTransformValues = $es4.$$get($$thisp, $$this, $$thisp, '$_previousTransformValues');
			var style = $es4.$$get(properties, $$this, $$thisp, '$_domView', 'style');
			$es4.$$set(properties, $$this, $$thisp, '$_cacheAsBitmap', value, '=');
			if (value)
			{
				$es4.$$set(style, $$this, $$thisp, 'top', $es4.$$set(style, $$this, $$thisp, 'left', '0px', '='), '=');
			}
			$es4.$$set(previousTransformValues, $$this, $$thisp, 'y', NaN, '=');
			$es4.$$set(previousTransformValues, $$this, $$thisp, 'x', NaN, '=');
			$es4.$$set(previousTransformValues, $$this, $$thisp, 'rotation', NaN, '=');
			$es4.$$set(previousTransformValues, $$this, $$thisp, 'scaleX', NaN, '=');
			$es4.$$set(previousTransformValues, $$this, $$thisp, 'scaleY', NaN, '=');
			$es4.$$call($$thisp, $$this, $$thisp, '$_transform', $es4.$$EMPTY_ARRAY);
		}));

		//accessor
		$es4.$$public_accessor('name', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'getAttribute', ['name']), String);
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'setAttribute', ['name', value]);
		}));

		//accessor
		$es4.$$public_accessor('alpha', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_opacity'), Number);
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_opacity', value, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'style', 'opacity', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('parent', $$thisp, (function ()
		{
			var domView = $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView');
			return $es4.$$coerce($es4.$$get(domView, $$this, $$thisp, 'parentNode') ? $es4.$$get(domView, $$this, $$thisp, 'parentNode', 'displayObject') : null, DisplayObjectContainer);
		}), null);

		//accessor
		$es4.$$public_accessor('root', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_root'), $es4.$$['flash.display'].DisplayObject);
		}), null);

		//accessor
		$es4.$$public_accessor('stage', $$thisp, (function ()
		{
			var parent = $es4.$$coerce($$this, $es4.$$['flash.display'].DisplayObject);
			while (parent)
			{
				if ($es4.$$is(parent, Stage))
				{
					return $es4.$$coerce($es4.$$as(parent, Stage), Stage);
				}
				var domView = $es4.$$get($es4.$$call(parent, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope', '$_domView');
				parent = $es4.$$coerce($es4.$$get(domView, $$this, $$thisp, 'parentNode') ? $es4.$$get(domView, $$this, $$thisp, 'parentNode', 'displayObject') : null, $es4.$$['flash.display'].DisplayObject);
			}
			return null;
		}), null);

		//accessor
		$es4.$$public_accessor('loaderInfo', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_loaderInfo'), LoaderInfo);
		}), null);

		//accessor
		$es4.$$public_accessor('blendMode', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('DisplayObject: attempted call to an unimplemented function "blendMode"'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			throw $es4.$$primitive(new (Error)('DisplayObject: attempted call to an unimplemented function "blendMode"'));
		}));

		//accessor
		$es4.$$public_accessor('blendShader', $$thisp, null, (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Shader);

			throw $es4.$$primitive(new (Error)('DisplayObject: attempted call to an unimplemented function "blendShader"'));
		}));

		//accessor
		$es4.$$public_accessor('filters', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('DisplayObject: attempted call to an unimplemented function "filters"'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Array);

			throw $es4.$$primitive(new (Error)('DisplayObject: attempted call to an unimplemented function "filters"'));
		}));

		//accessor
		$es4.$$public_accessor('opaqueBackground', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('DisplayObject: attempted call to an unimplemented function "opaqueBackground"'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			throw $es4.$$primitive(new (Error)('DisplayObject: attempted call to an unimplemented function "opaqueBackground"'));
		}));

		//accessor
		$es4.$$public_accessor('rotationX', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('DisplayObject: attempted call to an unimplemented function "rotationX"'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			throw $es4.$$primitive(new (Error)('DisplayObject: attempted call to an unimplemented function "rotationX"'));
		}));

		//accessor
		$es4.$$public_accessor('rotationY', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('DisplayObject: attempted call to an unimplemented function "rotationY"'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			throw $es4.$$primitive(new (Error)('DisplayObject: attempted call to an unimplemented function "rotationY"'));
		}));

		//accessor
		$es4.$$public_accessor('rotationZ', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('DisplayObject: attempted call to an unimplemented function "rotationZ"'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			throw $es4.$$primitive(new (Error)('DisplayObject: attempted call to an unimplemented function "rotationZ"'));
		}));

		//accessor
		$es4.$$public_accessor('scale9Grid', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('DisplayObject: attempted call to an unimplemented function "scale9Grid"'));
		}), (function ($$$$innerRectangle)
		{
			//set default parameter values
			var innerRectangle = $es4.$$coerce($$$$innerRectangle, Rectangle);

			throw $es4.$$primitive(new (Error)('DisplayObject: attempted call to an unimplemented function "scale9Grid"'));
		}));

		//accessor
		$es4.$$public_accessor('scaleZ', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('DisplayObject: attempted call to an unimplemented function "scaleZ"'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			throw $es4.$$primitive(new (Error)('DisplayObject: attempted call to an unimplemented function "scaleZ"'));
		}));

		//accessor
		$es4.$$public_accessor('z', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('DisplayObject: attempted call to an unimplemented function "z"'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			throw $es4.$$primitive(new (Error)('DisplayObject: attempted call to an unimplemented function "z"'));
		}));

		//accessor
		$es4.$$public_accessor('accessibilityProperties', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', 'accessibilityProperties'), AccessibilityProperties);
		}), (function ($$$$accessibilityProperties)
		{
			//set default parameter values
			var accessibilityProperties = $es4.$$coerce($$$$accessibilityProperties, AccessibilityProperties);

			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', 'accessibilityProperties', accessibilityProperties, '=');
			if (accessibilityProperties)
			{
				$es4.$$call(accessibilityProperties, $$this, $$thisp, '$_setOwner', [$$this]);
			}
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(DisplayObject, {EXTENDS:'flash.events.EventDispatcher', IMPLEMENTS:['flash.display.IBitmapDrawable']}, 'flash.display::DisplayObject');
})();
//flash.display.DisplayObject


//flash.text.ime.CompositionAttributeRange
$es4.$$package('flash.text.ime').CompositionAttributeRange = function () { throw new Error('Use of unimplemented class: CompositionAttributeRange'); }
//flash.text.ime.CompositionAttributeRange


//flash.display.Stage3D
$es4.$$package('flash.display').Stage3D = function () { throw new Error('Use of unimplemented class: Stage3D'); }
//flash.display.Stage3D


//flash.media.VideoStreamSettings
$es4.$$package('flash.media').VideoStreamSettings = function () { throw new Error('Use of unimplemented class: VideoStreamSettings'); }
//flash.media.VideoStreamSettings


//flash.sampler.Sample
$es4.$$package('flash.sampler').Sample = function () { throw new Error('Use of unimplemented class: Sample'); }
//flash.sampler.Sample


//flash.events.ShaderEvent
$es4.$$package('flash.events').ShaderEvent = function () { throw new Error('Use of unimplemented class: ShaderEvent'); }
//flash.events.ShaderEvent


//flash.net.SecureSocket
$es4.$$package('flash.net').SecureSocket = function () { throw new Error('Use of unimplemented class: SecureSocket'); }
//flash.net.SecureSocket


//flash.text.TextRenderer
$es4.$$package('flash.text').TextRenderer = function () { throw new Error('Use of unimplemented class: TextRenderer'); }
//flash.text.TextRenderer


//flash.display.GraphicsGradientFill
$es4.$$package('flash.display').GraphicsGradientFill = function () { throw new Error('Use of unimplemented class: GraphicsGradientFill'); }
//flash.display.GraphicsGradientFill


//flash.display.InteractiveObject
$es4.$$package('flash.display').InteractiveObject = (function ()
{
	//imports
	var AccessibilityImplementation;
	var DisplayObjectContainer;
	var Event;
	var FocusEvent;
	var KeyboardEvent;
	var MouseEvent;
	var Point;
	var ContextMenu;
	var Keyboard;
	var getTimer;
	var InteractiveObject;
	var Stage;
	var DisplayObject;

	//class initializer
	InteractiveObject.$$cinit = (function ()
	{
		InteractiveObject.$$cinit = undefined;

		//initialize imports
		AccessibilityImplementation = $es4.$$['flash.accessibility'].AccessibilityImplementation;
		DisplayObjectContainer = $es4.$$['flash.display'].DisplayObjectContainer;
		Event = $es4.$$['flash.events'].Event;
		FocusEvent = $es4.$$['flash.events'].FocusEvent;
		KeyboardEvent = $es4.$$['flash.events'].KeyboardEvent;
		MouseEvent = $es4.$$['flash.events'].MouseEvent;
		Point = $es4.$$['flash.geom'].Point;
		ContextMenu = $es4.$$['flash.ui'].ContextMenu;
		Keyboard = $es4.$$['flash.ui'].Keyboard;
		getTimer = $es4.$$['flash.utils'].getTimer;
		Stage = $es4.$$['flash.display'].Stage;
		DisplayObject = $es4.$$['flash.display'].DisplayObject;
	});

	//method
	$es4.$$public_function('$_getOriginalInteractiveObjectTarget', InteractiveObject, (function ($$$$target)
	{
		if (InteractiveObject.$$cinit !== undefined) InteractiveObject.$$cinit();

		//set default parameter values
		var target = $$$$target;

		while (target)
		{
			if ($es4.$$get(target, null, null, 'displayObject') && $es4.$$is($es4.$$get(target, null, null, 'displayObject'), InteractiveObject) && $es4.$$call($es4.$$call(target, null, null, 'displayObject', '$__properties', $es4.$$EMPTY_ARRAY), null, null, 'InteractiveObjectScope', '$_isMouseEventDispatchable', $es4.$$EMPTY_ARRAY))
			{
				return $es4.$$as($es4.$$get(target, null, null, 'displayObject'), InteractiveObject);
			}
			target = $es4.$$get(target, null, null, 'parentNode');
		}
		return null;
	}));

	//method
	$es4.$$public_function('getTouch', InteractiveObject, (function ($$$$event)
	{
		if (InteractiveObject.$$cinit !== undefined) InteractiveObject.$$cinit();

		//set default parameter values
		var event = $$$$event;

		if ($es4.$$get(event, null, null, 'touches', 'length'))
		{
			return $es4.$$get(event, null, null, 'touches', 0);
		}
		return $es4.$$get(event, null, null, 'changedTouches', 0);
	}));

	function InteractiveObject()
	{
		//initialize class if not initialized
		if (InteractiveObject.$$cinit !== undefined) InteractiveObject.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof InteractiveObject) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], InteractiveObject) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('$_properties', $$thisp);
		$es4.$$private_property('_window', $$thisp, Object);

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties') === undefined)
			{
				$es4.$$call($$this, $$this, $$thisp, '$__properties', [{}]);
			}
			$es4.$$super($$thisp).$$z();
			var domView = $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView');
			$es4.$$set(domView, $$this, $$thisp, 'style', 'pointerEvents', 'auto', '=');
			var over = false;
			var ref = $es4.$$coerce($$this, $es4.$$['flash.display'].InteractiveObject);
			var win = $es4.$$set($$thisp, $$this, $$thisp, '_window', window, '=');
			var mobile = $es4.$$coerce($es4.$$get(win, $$this, $$thisp, 'mobile'), Boolean);
			var refIsStage = $es4.$$is(ref, Stage);
			var view = (refIsStage) ? $es4.$$get(Stage, $$this, $$thisp, '$__domDocument') : domView;
			var onDOMBodyOut = null;
			var onMouseUp = null;
			var onMouseOut = $es4.$$coerce(function ($$$$event, $$$$forceDispatch) 
			{
				//set default parameter values
				var event = $$$$event;
				var forceDispatch = (1 > arguments.length - 1) ? false : $$$$forceDispatch;

				if (!forceDispatch && (!$es4.$$get($$this, $$this, $$thisp, 'visible') || !$es4.$$call($$thisp, $$this, $$thisp, '$_isMouseEventDispatchable', $es4.$$EMPTY_ARRAY)))
				{
					$es4.$$set(event, $$this, $$thisp, 'originalDisplayObjectTarget', $es4.$$call(InteractiveObject, $$this, $$thisp, '$_getOriginalInteractiveObjectTarget', [$es4.$$get(event, $$this, $$thisp, 'target')]), '=');
					$es4.$$set(event, $$this, $$thisp, 'originalTarget', $es4.$$get(event, $$this, $$thisp, 'target'), '=');
					return;
				}
				over = false;
				if (!mobile)
				{
					$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_onMouseOut', null, '=');
				}
				var clientX = $es4.$$coerce((mobile && $es4.$$get(event, $$this, $$thisp, 'clientX') === undefined) ? $es4.$$get($es4.$$call(InteractiveObject, $$this, $$thisp, 'getTouch', [event]), $$this, $$thisp, 'pageX') : $es4.$$get(event, $$this, $$thisp, 'clientX'), Number);
				var clientY = $es4.$$coerce((mobile && $es4.$$get(event, $$this, $$thisp, 'clientY') === undefined) ? $es4.$$get($es4.$$call(InteractiveObject, $$this, $$thisp, 'getTouch', [event]), $$this, $$thisp, 'pageY') : $es4.$$get(event, $$this, $$thisp, 'clientY'), Number);
				var localPoint = $es4.$$call($$this, $$this, $$thisp, 'globalToLocal', [$es4.$$primitive(new (Point)(clientX, clientY))]);
				var mouseOutEvent = $es4.$$primitive(new (MouseEvent)($es4.$$get(MouseEvent, $$this, $$thisp, 'MOUSE_OUT'), true, true, $es4.$$get(localPoint, $$this, $$thisp, 'x'), $es4.$$get(localPoint, $$this, $$thisp, 'y')));
				$es4.$$set($es4.$$call(mouseOutEvent, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'EventScope', '$_target', $es4.$$get(event, $$this, $$thisp, 'originalDisplayObjectTarget') || ref, '=');
				$es4.$$set($es4.$$call(mouseOutEvent, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'EventScope', '$_originalTarget', $es4.$$get(event, $$this, $$thisp, 'originalTarget') || $es4.$$get(event, $$this, $$thisp, 'target'), '=');
				$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [mouseOutEvent]);
				var mouseRollOutEvent = $es4.$$primitive(new (MouseEvent)($es4.$$get(MouseEvent, $$this, $$thisp, 'ROLL_OUT'), true, true, $es4.$$get(localPoint, $$this, $$thisp, 'x'), $es4.$$get(localPoint, $$this, $$thisp, 'y')));
				$es4.$$set($es4.$$call(mouseRollOutEvent, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'EventScope', '$_target', $es4.$$get(event, $$this, $$thisp, 'originalDisplayObjectTarget') || ref, '=');
				$es4.$$set($es4.$$call(mouseRollOutEvent, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'EventScope', '$_originalTarget', $es4.$$get(event, $$this, $$thisp, 'originalTarget') || $es4.$$get(event, $$this, $$thisp, 'target'), '=');
				$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [mouseRollOutEvent]);
				$es4.$$call(event, $$this, $$thisp, 'stopPropagation', $es4.$$EMPTY_ARRAY);
			}
, Function);
			var onMouseOver = $es4.$$coerce(function ($$$$event, $$$$forceDispatch) 
			{
				//set default parameter values
				var event = $$$$event;
				var forceDispatch = (1 > arguments.length - 1) ? false : $$$$forceDispatch;

				if (!forceDispatch && (!$es4.$$get($$this, $$this, $$thisp, 'visible') || !$es4.$$call($$thisp, $$this, $$thisp, '$_isMouseEventDispatchable', $es4.$$EMPTY_ARRAY)))
				{
					$es4.$$set(event, $$this, $$thisp, 'originalDisplayObjectTarget', $es4.$$call(InteractiveObject, $$this, $$thisp, '$_getOriginalInteractiveObjectTarget', [$es4.$$get(event, $$this, $$thisp, 'target')]), '=');
					$es4.$$set(event, $$this, $$thisp, 'originalTarget', $es4.$$get(event, $$this, $$thisp, 'target'), '=');
					return;
				}
				if (over)
				{
					return;
				}
				over = true;
				if (!mobile)
				{
					$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_onMouseOut', onMouseOut, '=');
				}
				var clientX = $es4.$$coerce((mobile && $es4.$$get(event, $$this, $$thisp, 'clientX') === undefined) ? $es4.$$get($es4.$$call(InteractiveObject, $$this, $$thisp, 'getTouch', [event]), $$this, $$thisp, 'pageX') : $es4.$$get(event, $$this, $$thisp, 'clientX'), Number);
				var clientY = $es4.$$coerce((mobile && $es4.$$get(event, $$this, $$thisp, 'clientY') === undefined) ? $es4.$$get($es4.$$call(InteractiveObject, $$this, $$thisp, 'getTouch', [event]), $$this, $$thisp, 'pageY') : $es4.$$get(event, $$this, $$thisp, 'clientY'), Number);
				var localPoint = $es4.$$call($$this, $$this, $$thisp, 'globalToLocal', [$es4.$$primitive(new (Point)(clientX, clientY))]);
				var mouseOverEvent = $es4.$$primitive(new (MouseEvent)($es4.$$get(MouseEvent, $$this, $$thisp, 'MOUSE_OVER'), true, true, $es4.$$get(localPoint, $$this, $$thisp, 'x'), $es4.$$get(localPoint, $$this, $$thisp, 'y')));
				$es4.$$set($es4.$$call(mouseOverEvent, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'EventScope', '$_target', $es4.$$get(event, $$this, $$thisp, 'originalDisplayObjectTarget') || ref, '=');
				$es4.$$set($es4.$$call(mouseOverEvent, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'EventScope', '$_originalTarget', $es4.$$get(event, $$this, $$thisp, 'originalTarget') || $es4.$$get(event, $$this, $$thisp, 'target'), '=');
				$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [mouseOverEvent]);
				var mouseRollOverEvent = $es4.$$primitive(new (MouseEvent)($es4.$$get(MouseEvent, $$this, $$thisp, 'ROLL_OVER'), true, true, $es4.$$get(localPoint, $$this, $$thisp, 'x'), $es4.$$get(localPoint, $$this, $$thisp, 'y')));
				$es4.$$set($es4.$$call(mouseRollOverEvent, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'EventScope', '$_target', $es4.$$get(event, $$this, $$thisp, 'originalDisplayObjectTarget') || ref, '=');
				$es4.$$set($es4.$$call(mouseRollOverEvent, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'EventScope', '$_originalTarget', $es4.$$get(event, $$this, $$thisp, 'originalTarget') || $es4.$$get(event, $$this, $$thisp, 'target'), '=');
				$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [mouseRollOverEvent]);
				$es4.$$call(event, $$this, $$thisp, 'stopPropagation', $es4.$$EMPTY_ARRAY);
			}
, Function);
			var doubleClickTime = 0;
			var onMouseDown = $es4.$$coerce(function ($$$$event, $$$$forceDispatch) 
			{
				//set default parameter values
				var event = $$$$event;
				var forceDispatch = (1 > arguments.length - 1) ? false : $$$$forceDispatch;

				if (!forceDispatch && (!$es4.$$get($$this, $$this, $$thisp, 'visible') || !$es4.$$call($$thisp, $$this, $$thisp, '$_isMouseEventDispatchable', $es4.$$EMPTY_ARRAY)))
				{
					$es4.$$set(event, $$this, $$thisp, 'originalDisplayObjectTarget', $es4.$$call(InteractiveObject, $$this, $$thisp, '$_getOriginalInteractiveObjectTarget', [$es4.$$get(event, $$this, $$thisp, 'target')]), '=');
					$es4.$$set(event, $$this, $$thisp, 'originalTarget', $es4.$$get(event, $$this, $$thisp, 'target'), '=');
					return;
				}
				if (mobile)
				{
					$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_onMouseUp', onMouseUp, '=');
					onMouseOver(event, true);
				}
				else
				{
					$es4.$$call(win, $$this, $$thisp, 'addEventListener', ['mouseup', onDOMBodyOut, true]);
					$es4.$$call(ref, $$this, $$thisp, 'addEventListener', [$es4.$$get(Event, $$this, $$thisp, 'REMOVED_FROM_STAGE'), onDOMBodyOut]);
				}
				var clientX = $es4.$$coerce((mobile && $es4.$$get(event, $$this, $$thisp, 'clientX') === undefined) ? $es4.$$get($es4.$$call(InteractiveObject, $$this, $$thisp, 'getTouch', [event]), $$this, $$thisp, 'pageX') : $es4.$$get(event, $$this, $$thisp, 'clientX'), Number);
				var clientY = $es4.$$coerce((mobile && $es4.$$get(event, $$this, $$thisp, 'clientY') === undefined) ? $es4.$$get($es4.$$call(InteractiveObject, $$this, $$thisp, 'getTouch', [event]), $$this, $$thisp, 'pageY') : $es4.$$get(event, $$this, $$thisp, 'clientY'), Number);
				var localPoint = $es4.$$call($$this, $$this, $$thisp, 'globalToLocal', [$es4.$$primitive(new (Point)(clientX, clientY))]);
				var mouseDownEvent = $es4.$$primitive(new (MouseEvent)($es4.$$get(MouseEvent, $$this, $$thisp, 'MOUSE_DOWN'), true, true, $es4.$$get(localPoint, $$this, $$thisp, 'x'), $es4.$$get(localPoint, $$this, $$thisp, 'y')));
				$es4.$$set($es4.$$call(mouseDownEvent, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'EventScope', '$_target', $es4.$$get(event, $$this, $$thisp, 'originalDisplayObjectTarget') || ref, '=');
				$es4.$$set($es4.$$call(mouseDownEvent, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'EventScope', '$_originalTarget', $es4.$$get(event, $$this, $$thisp, 'originalTarget') || $es4.$$get(event, $$this, $$thisp, 'target'), '=');
				$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [mouseDownEvent]);
				$es4.$$call(event, $$this, $$thisp, 'stopPropagation', $es4.$$EMPTY_ARRAY);
				if (mobile && ($es4.$$get(event, $$this, $$thisp, 'target', 'nodeName') != 'A' && $es4.$$get(event, $$this, $$thisp, 'target', 'nodeName') != 'TEXTAREA' && !($es4.$$get(event, $$this, $$thisp, 'target', 'contentEditable') === 'true')))
				{
					$es4.$$call(event, $$this, $$thisp, 'preventDefault', $es4.$$EMPTY_ARRAY);
				}
			}
, Function);
			onMouseUp = $es4.$$coerce(function ($$$$event, $$$$forceDispatch) 
{
				//set default parameter values
				var event = $$$$event;
				var forceDispatch = (1 > arguments.length - 1) ? false : $$$$forceDispatch;

	if (!forceDispatch && (!$es4.$$get($$this, $$this, $$thisp, 'visible') || !$es4.$$call($$thisp, $$this, $$thisp, '$_isMouseEventDispatchable', $es4.$$EMPTY_ARRAY)))
	{
		$es4.$$set(event, $$this, $$thisp, 'originalDisplayObjectTarget', $es4.$$call(InteractiveObject, $$this, $$thisp, '$_getOriginalInteractiveObjectTarget', [$es4.$$get(event, $$this, $$thisp, 'target')]), '=');
		$es4.$$set(event, $$this, $$thisp, 'originalTarget', $es4.$$get(event, $$this, $$thisp, 'target'), '=');
		return;
	}
	if (!mobile)
	{
		$es4.$$call(win, $$this, $$thisp, 'removeEventListener', ['mouseup', onDOMBodyOut, true]);
		$es4.$$call(ref, $$this, $$thisp, 'removeEventListener', [$es4.$$get(Event, $$this, $$thisp, 'REMOVED_FROM_STAGE'), onDOMBodyOut]);
		$es4.$$call(ref, $$this, $$thisp, 'removeEventListener', [$es4.$$get(Event, $$this, $$thisp, 'ADDED_TO_STAGE'), onDOMBodyOut]);
	}
	else
	{
		$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_onMouseUp', null, '=');
	}
	var doDoubleClickEvent = false;
	if ($es4.$$get($$this, $$this, $$thisp, 'doubleClickEnabled'))
	{
		doubleClickTime = getTimer() - doubleClickTime;
		if (doubleClickTime < 500)
		{
			doDoubleClickEvent = true;
		}
		else
		{
			doubleClickTime = getTimer();
		}
	}
	var clientX = $es4.$$coerce((mobile && $es4.$$get(event, $$this, $$thisp, 'clientX') === undefined) ? $es4.$$get($es4.$$call(InteractiveObject, $$this, $$thisp, 'getTouch', [event]), $$this, $$thisp, 'pageX') : $es4.$$get(event, $$this, $$thisp, 'clientX'), Number);
	var clientY = $es4.$$coerce((mobile && $es4.$$get(event, $$this, $$thisp, 'clientY') === undefined) ? $es4.$$get($es4.$$call(InteractiveObject, $$this, $$thisp, 'getTouch', [event]), $$this, $$thisp, 'pageY') : $es4.$$get(event, $$this, $$thisp, 'clientY'), Number);
	var localPoint = $es4.$$call($$this, $$this, $$thisp, 'globalToLocal', [$es4.$$primitive(new (Point)(clientX, clientY))]);
	var mouseUpEvent = $es4.$$primitive(new (MouseEvent)($es4.$$get(MouseEvent, $$this, $$thisp, 'MOUSE_UP'), true, true, $es4.$$get(localPoint, $$this, $$thisp, 'x'), $es4.$$get(localPoint, $$this, $$thisp, 'y')));
	$es4.$$set($es4.$$call(mouseUpEvent, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'EventScope', '$_target', $es4.$$get(event, $$this, $$thisp, 'originalDisplayObjectTarget') || ref, '=');
	$es4.$$set($es4.$$call(mouseUpEvent, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'EventScope', '$_originalTarget', $es4.$$get(event, $$this, $$thisp, 'originalTarget') || $es4.$$get(event, $$this, $$thisp, 'target'), '=');
	$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [mouseUpEvent]);
	var mouseClickEvent = $es4.$$primitive(new (MouseEvent)($es4.$$get(MouseEvent, $$this, $$thisp, 'CLICK'), true, true, $es4.$$get(localPoint, $$this, $$thisp, 'x'), $es4.$$get(localPoint, $$this, $$thisp, 'y'), null, $es4.$$get(event, $$this, $$thisp, 'ctrlKey'), $es4.$$get(event, $$this, $$thisp, 'altKey'), $es4.$$get(event, $$this, $$thisp, 'shiftKey')));
	$es4.$$set($es4.$$call(mouseClickEvent, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'EventScope', '$_target', $es4.$$get(event, $$this, $$thisp, 'originalDisplayObjectTarget') || ref, '=');
	$es4.$$set($es4.$$call(mouseClickEvent, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'EventScope', '$_originalTarget', $es4.$$get(event, $$this, $$thisp, 'originalTarget') || $es4.$$get(event, $$this, $$thisp, 'target'), '=');
	$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [mouseClickEvent]);
	if (doDoubleClickEvent)
	{
		var mouseDoubleClickEvent = $es4.$$primitive(new (MouseEvent)($es4.$$get(MouseEvent, $$this, $$thisp, 'DOUBLE_CLICK'), true, true, $es4.$$get(localPoint, $$this, $$thisp, 'x'), $es4.$$get(localPoint, $$this, $$thisp, 'y')));
		$es4.$$set($es4.$$call(mouseDoubleClickEvent, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'EventScope', '$_target', $es4.$$get(event, $$this, $$thisp, 'originalDisplayObjectTarget') || ref, '=');
		$es4.$$set($es4.$$call(mouseDoubleClickEvent, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'EventScope', '$_originalTarget', $es4.$$get(event, $$this, $$thisp, 'originalTarget') || $es4.$$get(event, $$this, $$thisp, 'target'), '=');
		$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [mouseDoubleClickEvent]);
	}
	if (mobile)
	{
		onMouseOut(event, true);
	}
	$es4.$$call(event, $$this, $$thisp, 'stopPropagation', $es4.$$EMPTY_ARRAY);
}
, Function);
			onDOMBodyOut = $es4.$$coerce(function ($$$$event) 
{
				//set default parameter values
				var event = $$$$event;

	if ($es4.$$get(event, $$this, $$thisp, 'type') == 'mouseup' && $es4.$$get(domView, $$this, $$thisp, 'parent'))
	{
		var target = $es4.$$get(event, $$this, $$thisp, 'target');
		while (target)
		{
			if (target == domView)
			{
				return;
			}
			target = $es4.$$get(target, $$this, $$thisp, 'parentNode');
		}
	}
	$es4.$$call(win, $$this, $$thisp, 'removeEventListener', ['mouseup', onDOMBodyOut, true]);
	$es4.$$call(ref, $$this, $$thisp, 'removeEventListener', [$es4.$$get(Event, $$this, $$thisp, 'REMOVED_FROM_STAGE'), onDOMBodyOut]);
	$es4.$$call(ref, $$this, $$thisp, 'removeEventListener', [$es4.$$get(Event, $$this, $$thisp, 'ADDED_TO_STAGE'), onDOMBodyOut]);
	if ($es4.$$get(event, $$this, $$thisp, 'type') == $es4.$$get(Event, $$this, $$thisp, 'ADDED_TO_STAGE'))
	{
		$es4.$$call(win, $$this, $$thisp, 'addEventListener', ['mouseup', onDOMBodyOut, true]);
		$es4.$$call(ref, $$this, $$thisp, 'addEventListener', [$es4.$$get(Event, $$this, $$thisp, 'REMOVED_FROM_STAGE'), onDOMBodyOut]);
		return;
	}
	if ($es4.$$get(event, $$this, $$thisp, 'type') == $es4.$$get(Event, $$this, $$thisp, 'REMOVED_FROM_STAGE'))
	{
		$es4.$$call(ref, $$this, $$thisp, 'addEventListener', [$es4.$$get(Event, $$this, $$thisp, 'ADDED_TO_STAGE'), onDOMBodyOut]);
		return;
	}
	if (over)
	{
		onMouseOut(event);
	}
	onMouseUp(event);
}
, Function);
			if (mobile)
			{
				var onTouchCancel = $es4.$$coerce(function ($$$$event) 
				{
				//set default parameter values
				var event = $$$$event;

					trace('onTouchCancel');
					onMouseUp(event);
				}
, Function);
				$es4.$$call(view, $$this, $$thisp, 'addEventListener', ['touchstart', onMouseDown, false]);
				$es4.$$call(view, $$this, $$thisp, 'addEventListener', ['touchend', onMouseUp, false]);
				$es4.$$call(view, $$this, $$thisp, 'addEventListener', ['touchcancel', onTouchCancel, false]);
			}
			else
			{
				$es4.$$call(view, $$this, $$thisp, 'addEventListener', ['mousedown', onMouseDown, false]);
				$es4.$$call(view, $$this, $$thisp, 'addEventListener', ['mouseup', onMouseUp, false]);
				$es4.$$call(view, $$this, $$thisp, 'addEventListener', ['mouseover', onMouseOver, false]);
				$es4.$$call(view, $$this, $$thisp, 'addEventListener', ['mouseout', onMouseOut, false]);
			}
			if ($es4.$$get(win, $$this, $$thisp, 'ie'))
			{
				$es4.$$call(view, $$this, $$thisp, 'addEventListener', ['focusin', onFocusIn, false]);
				$es4.$$call(view, $$this, $$thisp, 'addEventListener', ['focusout', onFocusOut, false]);
			}
			else
			{
				$es4.$$call(view, $$this, $$thisp, 'addEventListener', ['focus', onFocusIn, false]);
				$es4.$$call(view, $$this, $$thisp, 'addEventListener', ['blur', onFocusOut, false]);
			}

			function onFocusIn($$$$event) 
			{
				//set default parameter values
				var event = $$$$event;

				var lastKeyPressedEvent = $es4.$$get(Stage, $$this, $$thisp, '$__lastKeyPressedObject');
				var keyEvent = lastKeyPressedEvent || event;
				var focusEvent = null;
				if (lastKeyPressedEvent === null)
				{
					focusEvent = $es4.$$primitive(new (FocusEvent)($es4.$$get(FocusEvent, $$this, $$thisp, 'MOUSE_FOCUS_CHANGE'), true, true, ref, $es4.$$get(keyEvent, $$this, $$thisp, 'shiftKey'), $es4.$$get(keyEvent, $$this, $$thisp, 'which') || $es4.$$get(keyEvent, $$this, $$thisp, 'keyCode')));
					$es4.$$set($es4.$$call(focusEvent, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'EventScope', '$_target', $es4.$$get(event, $$this, $$thisp, 'originalDisplayObjectTarget') || ref, '=');
					var success = $es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [focusEvent]);
					if (!success)
					{
						throw $es4.$$primitive(new (Error)('preventDefault not supported on FocusEvent.MOUSE_FOCUS_CHANGE'));
					}
				}
				focusEvent = $es4.$$primitive(new (FocusEvent)($es4.$$get(FocusEvent, $$this, $$thisp, 'FOCUS_IN'), true, false, ref, $es4.$$get(keyEvent, $$this, $$thisp, 'shiftKey'), $es4.$$get(keyEvent, $$this, $$thisp, 'which') || $es4.$$get(keyEvent, $$this, $$thisp, 'keyCode')));
				$es4.$$set($es4.$$call(focusEvent, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'EventScope', '$_target', $es4.$$get(event, $$this, $$thisp, 'originalDisplayObjectTarget') || ref, '=');
				$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [focusEvent]);
				$es4.$$call(event, $$this, $$thisp, 'stopPropagation', $es4.$$EMPTY_ARRAY);
			}
;

			function onFocusOut($$$$event) 
			{
				//set default parameter values
				var event = $$$$event;

				var keyEvent = $es4.$$get(Stage, $$this, $$thisp, '$__lastKeyPressedObject') || event;
				var focusEvent = $es4.$$primitive(new (FocusEvent)($es4.$$get(FocusEvent, $$this, $$thisp, 'FOCUS_OUT'), true, false, ref, $es4.$$get(keyEvent, $$this, $$thisp, 'shiftKey'), $es4.$$get(keyEvent, $$this, $$thisp, 'which') || $es4.$$get(keyEvent, $$this, $$thisp, 'keyCode')));
				$es4.$$set($es4.$$call(focusEvent, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'EventScope', '$_target', $es4.$$get(event, $$this, $$thisp, 'originalDisplayObjectTarget') || ref, '=');
				$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [focusEvent]);
				$es4.$$call(event, $$this, $$thisp, 'stopPropagation', $es4.$$EMPTY_ARRAY);
			}
;

			$es4.$$call(view, $$this, $$thisp, 'addEventListener', ['keyup', onKeyUp, false]);
			$es4.$$call(view, $$this, $$thisp, 'addEventListener', ['keydown', onKeyDown, false]);

			function onKeyUp($$$$event) 
			{
				//set default parameter values
				var event = $$$$event;

				if (!$es4.$$get($$this, $$this, $$thisp, 'visible'))
				{
					$es4.$$set(event, $$this, $$thisp, 'originalDisplayObjectTarget', $es4.$$call(InteractiveObject, $$this, $$thisp, '$_getOriginalInteractiveObjectTarget', [$es4.$$get(event, $$this, $$thisp, 'target')]), '=');
					return;
				}
				var keyboardEvent = $es4.$$primitive(new (KeyboardEvent)($es4.$$get(KeyboardEvent, $$this, $$thisp, 'KEY_UP'), true, false, $es4.$$get(event, $$this, $$thisp, 'charCode') || $es4.$$get(event, $$this, $$thisp, 'keyCode'), $es4.$$get(event, $$this, $$thisp, 'which') || $es4.$$get(event, $$this, $$thisp, 'keyCode'), $es4.$$get(event, $$this, $$thisp, 'location'), $es4.$$get(event, $$this, $$thisp, 'ctrlKey'), $es4.$$get(event, $$this, $$thisp, 'altKey'), $es4.$$get(event, $$this, $$thisp, 'shiftKey')));
				$es4.$$set($es4.$$call(keyboardEvent, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'EventScope', '$_target', $es4.$$get(event, $$this, $$thisp, 'originalDisplayObjectTarget') || ref, '=');
				$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [keyboardEvent]);
				$es4.$$call(event, $$this, $$thisp, 'stopPropagation', $es4.$$EMPTY_ARRAY);
			}
;

			function onKeyDown($$$$event) 
			{
				//set default parameter values
				var event = $$$$event;

				if (!$es4.$$get($$this, $$this, $$thisp, 'visible'))
				{
					$es4.$$set(event, $$this, $$thisp, 'originalDisplayObjectTarget', $es4.$$call(InteractiveObject, $$this, $$thisp, '$_getOriginalInteractiveObjectTarget', [$es4.$$get(event, $$this, $$thisp, 'target')]), '=');
					return;
				}
				var keyCode = $es4.$$get(event, $$this, $$thisp, 'which') || $es4.$$get(event, $$this, $$thisp, 'keyCode');
				var keyboardEvent = $es4.$$primitive(new (KeyboardEvent)($es4.$$get(KeyboardEvent, $$this, $$thisp, 'KEY_DOWN'), true, false, $es4.$$get(event, $$this, $$thisp, 'charCode') || keyCode, keyCode, $es4.$$get(event, $$this, $$thisp, 'location'), $es4.$$get(event, $$this, $$thisp, 'ctrlKey'), $es4.$$get(event, $$this, $$thisp, 'altKey'), $es4.$$get(event, $$this, $$thisp, 'shiftKey')));
				$es4.$$set($es4.$$call(keyboardEvent, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'EventScope', '$_target', $es4.$$get(event, $$this, $$thisp, 'originalDisplayObjectTarget') || ref, '=');
				$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [keyboardEvent]);
				if (keyCode == $es4.$$get(Keyboard, $$this, $$thisp, 'TAB'))
				{
					var focusEvent = $es4.$$primitive(new (FocusEvent)($es4.$$get(FocusEvent, $$this, $$thisp, 'KEY_FOCUS_CHANGE'), true, true, ref, $es4.$$get(event, $$this, $$thisp, 'shiftKey'), keyCode));
					$es4.$$set($es4.$$call(focusEvent, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'EventScope', '$_target', $es4.$$get(event, $$this, $$thisp, 'originalDisplayObjectTarget') || ref, '=');
					var success = $es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [focusEvent]);
					if (!success)
					{
						$es4.$$call(event, $$this, $$thisp, 'preventDefault', $es4.$$EMPTY_ARRAY);
					}
				}
				$es4.$$call(event, $$this, $$thisp, 'stopPropagation', $es4.$$EMPTY_ARRAY);
			}
;
		}));

		//method
		$es4.$$public_function('$__notify', $$thisp, (function ($$$$name, $$$$args)
		{
			//set default parameter values
			var name = $es4.$$coerce($$$$name, String);
			var args = $$$$args;

			if (name === 'visibleFalse' && ($es4.$$get($$thisp, $$this, $$thisp, '_window', 'firefox') || $es4.$$get($$thisp, $$this, $$thisp, '_window', 'ie')))
			{
				var activeElement = $es4.$$get(document, $$this, $$thisp, 'activeElement');
				if (activeElement && $es4.$$get(activeElement, $$this, $$thisp, 'displayObject') == $$this)
				{
					$es4.$$set($$this, $$this, $$thisp, 'stage', 'focus', null, '=');
				}
			}
			$es4.$$call($es4.$$super($$thisp), $$this, $$thisp, '$__notify', [name, args]);
		}));

		//method
		$es4.$$public_function('$__properties', $$thisp, (function ($$$$object)
		{
			//set default parameter values
			var object = (0 > arguments.length - 1) ? null : $$$$object;

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties') === undefined)
			{
				object = $es4.$$call($es4.$$super($$thisp), $$this, $$thisp, '$__properties', [object]);
				$es4.$$set(object, $$this, $$thisp, 'InteractiveObjectScope', {$_mouseEnabled:true, $_tabEnabled:null, $_tabIndex:-1, $_role:'presentation', $_isMouseEventDispatchable:$es4.$$get($$thisp, $$this, $$thisp, '$_isMouseEventDispatchable')}, '=');
				$es4.$$set(object, $$this, $$thisp, 'TLScope', $$this, '=');
				return $es4.$$set($$thisp, $$this, $$thisp, '$_properties', object, '=');
			}
			return $es4.$$get($$thisp, $$this, $$thisp, '$_properties');
		}));

		//method
		$es4.$$private_function('$_isMouseEventDispatchable', $$thisp, (function ()
		{
			if (!$es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_mouseEnabled'))
			{
				return false;
			}
			var parent = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'TLScope', 'parent'), DisplayObjectContainer);
			while ($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_mouseEnabled') && parent)
			{
				var properties = $es4.$$get($es4.$$call(parent, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'TLScope');
				if (!$es4.$$get(properties, $$this, $$thisp, 'mouseChildren'))
				{
					return false;
				}
				parent = $es4.$$coerce($es4.$$get(properties, $$this, $$thisp, 'parent'), DisplayObjectContainer);
			}
			return true;
		}));

		//accessor
		$es4.$$public_accessor('mouseEnabled', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_mouseEnabled'), Boolean);
		}), (function ($$$$enabled)
		{
			//set default parameter values
			var enabled = $es4.$$coerce($$$$enabled, Boolean);

			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_mouseEnabled', enabled, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'style', 'pointerEvents', (enabled) ? 'auto' : 'none', '=');
		}));

		//accessor
		$es4.$$public_accessor('doubleClickEnabled', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_doubleClickEnabled'), Boolean);
		}), (function ($$$$enabled)
		{
			//set default parameter values
			var enabled = $es4.$$coerce($$$$enabled, Boolean);

			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_doubleClickEnabled', enabled, '=');
		}));

		//accessor
		$es4.$$public_accessor('contextMenu', $$thisp, null, (function ($$$$cm)
		{
			//set default parameter values
			var cm = $es4.$$coerce($$$$cm, ContextMenu);

			throw $es4.$$primitive(new (Error)('InteractiveObject: attempted call to an unimplemented function "contextMenu"'));
		}));

		//accessor
		$es4.$$public_accessor('tabEnabled', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_tabEnabled'), Boolean);
		}), (function ($$$$enabled)
		{
			//set default parameter values
			var enabled = $es4.$$coerce($$$$enabled, Boolean);

			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_tabEnabled', enabled, '=');
			if (enabled)
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'setAttribute', ['tabindex', $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_tabIndex')]);
			}
			else
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'setAttribute', ['tabindex', -1]);
			}
			if ($es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'getAttribute', ['role']) != 'presentation')
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_role', $es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'getAttribute', ['role']), '=');
			}
			if (!enabled || $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_tabIndex') == -1)
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'setAttribute', ['role', 'presentation']);
			}
			else
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'setAttribute', ['role', $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_role')]);
			}
		}));

		//accessor
		$es4.$$public_accessor('tabIndex', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_tabIndex'), int);
		}), (function ($$$$index)
		{
			//set default parameter values
			var index = $es4.$$coerce($$$$index, int);

			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_tabIndex', index, '=');
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_tabEnabled') !== false)
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'setAttribute', ['tabindex', index]);
			}
			else
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'setAttribute', ['tabindex', -1]);
			}
			var role = $es4.$$coerce($es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'getAttribute', ['role']), String);
			if (role !== 'presentation')
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_role', $es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'getAttribute', ['role']), '=');
			}
			if (($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_tabEnabled') === false || index === -1) && role !== 'progressbar')
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'setAttribute', ['role', 'presentation']);
			}
			else
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'setAttribute', ['role', $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_role')]);
			}
		}));

		//accessor
		$es4.$$public_accessor('focusRect', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('InteractiveObject: attempted call to an unimplemented function "focusRect"'));
		}), (function ($$$$focusRect)
		{
			//set default parameter values
			var focusRect = $es4.$$coerce($$$$focusRect, Object);

			throw $es4.$$primitive(new (Error)('InteractiveObject: attempted call to an unimplemented function "focusRect"'));
		}));

		//accessor
		$es4.$$public_accessor('accessibilityImplementation', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('InteractiveObject: attempted call to an unimplemented function "accessibilityImplementation"'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, AccessibilityImplementation);

			throw $es4.$$primitive(new (Error)('InteractiveObject: attempted call to an unimplemented function "accessibilityImplementation"'));
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(InteractiveObject, {EXTENDS:'flash.display.DisplayObject'}, 'flash.display::InteractiveObject');
})();
//flash.display.InteractiveObject


//flash.net.NetStreamPlayOptions
$es4.$$package('flash.net').NetStreamPlayOptions = function () { throw new Error('Use of unimplemented class: NetStreamPlayOptions'); }
//flash.net.NetStreamPlayOptions


//XMLList
$es4.$$package('').XMLList = (function ()
{
	//imports
	var XMLDocument;

	//class initializer
	XMLList.$$cinit = (function ()
	{
		XMLList.$$cinit = undefined;

		//initialize imports
		XMLDocument = $es4.$$['flash.xml'].XMLDocument;
	});

	function XMLList()
	{
		//initialize class if not initialized
		if (XMLList.$$cinit !== undefined) XMLList.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof XMLList) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], XMLList) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('$$isProxy', $$thisp, Boolean);
		$es4.$$private_property('$_parent', $$thisp, Object);
		$es4.$$private_property('$_nodes', $$thisp, Array);

		//initializer
		$es4.$$iinit($$thisp, (function ()
		{
			//initialize properties
			$es4.$$set($$this, $$this, $$thisp, '$$isProxy', true, '=');
			$es4.$$set($$this, $$this, $$thisp, '$_nodes', [], '=');
		}));

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$object)
		{
			//set default parameter values
			var object = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$object, Object);

			var xml;
			var i;
			var length;
			if (!object)
			{
			}
			else if ($es4.$$is(object, XMLList))
			{
				for (var $$i0 = (object || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i0 != 0; $$i0 = object.$$nextNameIndex($$i0))
				{
					xml = object.$$nextName($$i0);

					$es4.$$set($$thisp, $$this, $$thisp, '$_nodes', $es4.$$get($$thisp, $$this, $$thisp, '$_nodes', 'length'), xml, '=');
				}
			}
			else if ($es4.$$is(object, XML))
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_nodes', 0, object, '=');
			}
			else if ($es4.$$is(object, Array))
			{
				length = $es4.$$get(object, $$this, $$thisp, 'length');
				for (i = 0; i < length; i++)
				{
					$es4.$$set($$thisp, $$this, $$thisp, '$_nodes', i, $es4.$$primitive(new (XML)($es4.$$get(object, $$this, $$thisp, i))), '=');
				}
			}
			else if ($es4.$$is(object, String))
			{
				var xmlDocument = $es4.$$primitive(new (XMLDocument)());
				$es4.$$set(xmlDocument, $$this, $$thisp, 'ignoreWhite', $es4.$$get(XML, $$this, $$thisp, 'ignoreWhitespace'), '=');
				$es4.$$call(xmlDocument, $$this, $$thisp, 'parseXML', ['<root>' + ($es4.$$as(object, String)) + '</root>']);
				var childNodes = $es4.$$get(xmlDocument, $$this, $$thisp, 'firstChild', 'childNodes');
				length = $es4.$$get(childNodes, $$this, $$thisp, 'length');
				for (i = 0; i < length; i++)
				{
					$es4.$$set($$thisp, $$this, $$thisp, '$_nodes', i, $es4.$$primitive(new (XML)($es4.$$get(childNodes, $$this, $$thisp, i))), '=');
				}
			}
			else
			{
				throw $es4.$$primitive(new (Error)('unknown XMLList value given in XMLList constructor'));
			}
		}));

		//method
		$es4.$$public_function('attribute', $$thisp, (function ($$$$attributeName)
		{
			//set default parameter values
			var attributeName = $$$$attributeName;

			var xmlList = $es4.$$coerce($es4.$$primitive(new (XMLList)()), XMLList);
			$es4.$$set(xmlList, $$this, $$thisp, '$__parent', $es4.$$get($$thisp, $$this, $$thisp, '$_parent'), '=');
			for (var $$i1 = ($es4.$$get($$thisp, $$this, $$thisp, '$_nodes') || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i1 != 0; $$i1 = $es4.$$get($$thisp, $$this, $$thisp, '$_nodes').$$nextNameIndex($$i1))
			{
				var xml = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_nodes').$$nextValue($$i1), XML);

				if ($es4.$$call(xml, $$this, $$thisp, 'nodeKind', $es4.$$EMPTY_ARRAY) != 'element')
				{
					continue;
				}
				$es4.$$call(xmlList, $$this, $$thisp, '$__merge', [$es4.$$call(xml, $$this, $$thisp, 'attribute', [attributeName])]);
			}
			return xmlList;
		}));

		//method
		$es4.$$public_function('attributes', $$thisp, (function ()
		{
			var xmlList = $es4.$$coerce($es4.$$primitive(new (XMLList)()), XMLList);
			$es4.$$set(xmlList, $$this, $$thisp, '$__parent', $es4.$$get($$thisp, $$this, $$thisp, '$_parent'), '=');
			for (var $$i2 = ($es4.$$get($$thisp, $$this, $$thisp, '$_nodes') || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i2 != 0; $$i2 = $es4.$$get($$thisp, $$this, $$thisp, '$_nodes').$$nextNameIndex($$i2))
			{
				var xml = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_nodes').$$nextValue($$i2), XML);

				if ($es4.$$call(xml, $$this, $$thisp, 'nodeKind', $es4.$$EMPTY_ARRAY) != 'element')
				{
					continue;
				}
				$es4.$$call(xmlList, $$this, $$thisp, '$__merge', [$es4.$$call(xml, $$this, $$thisp, 'attributes', $es4.$$EMPTY_ARRAY)]);
			}
			return xmlList;
		}));

		//method
		$es4.$$public_function('child', $$thisp, (function ($$$$propertyName)
		{
			//set default parameter values
			var propertyName = $es4.$$coerce($$$$propertyName, Object);

			var xmlList = $es4.$$coerce($es4.$$primitive(new (XMLList)()), XMLList);
			$es4.$$set(xmlList, $$this, $$thisp, '$__parent', $es4.$$get($$thisp, $$this, $$thisp, '$_parent'), '=');
			for (var $$i3 = ($es4.$$get($$thisp, $$this, $$thisp, '$_nodes') || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i3 != 0; $$i3 = $es4.$$get($$thisp, $$this, $$thisp, '$_nodes').$$nextNameIndex($$i3))
			{
				var xml = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_nodes').$$nextValue($$i3), XML);

				if ($es4.$$call(xml, $$this, $$thisp, 'nodeKind', $es4.$$EMPTY_ARRAY) != 'element')
				{
					continue;
				}
				$es4.$$call(xmlList, $$this, $$thisp, '$__merge', [$es4.$$call(xml, $$this, $$thisp, 'child', [propertyName])]);
			}
			return xmlList;
		}));

		//method
		$es4.$$public_function('children', $$thisp, (function ()
		{
			var xmlList = $es4.$$coerce($es4.$$primitive(new (XMLList)()), XMLList);
			$es4.$$set(xmlList, $$this, $$thisp, '$__parent', $es4.$$get($$thisp, $$this, $$thisp, '$_parent'), '=');
			for (var $$i4 = ($es4.$$get($$thisp, $$this, $$thisp, '$_nodes') || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i4 != 0; $$i4 = $es4.$$get($$thisp, $$this, $$thisp, '$_nodes').$$nextNameIndex($$i4))
			{
				var xml = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_nodes').$$nextValue($$i4), XML);

				if ($es4.$$call(xml, $$this, $$thisp, 'nodeKind', $es4.$$EMPTY_ARRAY) != 'element')
				{
					continue;
				}
				$es4.$$call(xmlList, $$this, $$thisp, '$__merge', [$es4.$$call(xml, $$this, $$thisp, 'children', $es4.$$EMPTY_ARRAY)]);
			}
			return xmlList;
		}));

		//method
		$es4.$$public_function('contains', $$thisp, (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, XML);

			var valueString = $es4.$$call(value, $$this, $$thisp, 'toXMLString', $es4.$$EMPTY_ARRAY);
			for (var $$i5 = ($es4.$$get($$thisp, $$this, $$thisp, '$_nodes') || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i5 != 0; $$i5 = $es4.$$get($$thisp, $$this, $$thisp, '$_nodes').$$nextNameIndex($$i5))
			{
				var xml = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_nodes').$$nextValue($$i5), XML);

				if ($es4.$$call(xml, $$this, $$thisp, 'toXMLString', $es4.$$EMPTY_ARRAY) == valueString)
				{
					return true;
				}
			}
			return false;
		}));

		//method
		$es4.$$public_function('copy', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$primitive(new (XMLList)($$this)), XMLList);
		}));

		//method
		$es4.$$public_function('descendants', $$thisp, (function ($$$$name)
		{
			//set default parameter values
			var name = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$name, Object);

			var xmlList = $es4.$$coerce($es4.$$primitive(new (XMLList)()), XMLList);
			for (var $$i6 = ($es4.$$get($$thisp, $$this, $$thisp, '$_nodes') || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i6 != 0; $$i6 = $es4.$$get($$thisp, $$this, $$thisp, '$_nodes').$$nextNameIndex($$i6))
			{
				var xml = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_nodes').$$nextValue($$i6), XML);

				if ($es4.$$call(xml, $$this, $$thisp, 'nodeKind', $es4.$$EMPTY_ARRAY) != 'element')
				{
					if (name == null)
					{
						$es4.$$set(xmlList, $$this, $$thisp, $es4.$$call(xmlList, $$this, $$thisp, 'length', $es4.$$EMPTY_ARRAY), xml, '=');
					}
					continue;
				}
				if (name == null || $es4.$$call(name, $$this, $$thisp, 'toString', $es4.$$EMPTY_ARRAY) == $es4.$$call(xml, $$this, $$thisp, 'name', $es4.$$EMPTY_ARRAY))
				{
					$es4.$$set(xmlList, $$this, $$thisp, $es4.$$call(xmlList, $$this, $$thisp, 'length', $es4.$$EMPTY_ARRAY), xml, '=');
				}
				$es4.$$call(xmlList, $$this, $$thisp, '$__merge', [$es4.$$call(xml, $$this, $$thisp, 'descendants', [name])]);
			}
			return xmlList;
		}));

		//method
		$es4.$$public_function('elements', $$thisp, (function ($$$$name)
		{
			//set default parameter values
			var name = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$name, Object);

			var xmlList = $es4.$$coerce($es4.$$primitive(new (XMLList)()), XMLList);
			$es4.$$set(xmlList, $$this, $$thisp, '$__parent', $es4.$$get($$thisp, $$this, $$thisp, '$_parent'), '=');
			for (var $$i7 = ($es4.$$get($$thisp, $$this, $$thisp, '$_nodes') || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i7 != 0; $$i7 = $es4.$$get($$thisp, $$this, $$thisp, '$_nodes').$$nextNameIndex($$i7))
			{
				var xml = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_nodes').$$nextValue($$i7), XML);

				if ($es4.$$call(xml, $$this, $$thisp, 'nodeKind', $es4.$$EMPTY_ARRAY) == 'element')
				{
					$es4.$$set(xmlList, $$this, $$thisp, $es4.$$call(xmlList, $$this, $$thisp, 'length', $es4.$$EMPTY_ARRAY), xml, '=');
				}
			}
			return xmlList;
		}));

		//method
		$es4.$$public_function('length', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_nodes', 'length'), int);
		}));

		//method
		$es4.$$public_function('parent', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '$_parent');
		}));

		//method
		$es4.$$public_function('text', $$thisp, (function ()
		{
			var xmlList = $es4.$$coerce($es4.$$primitive(new (XMLList)()), XMLList);
			$es4.$$set(xmlList, $$this, $$thisp, '$__parent', $es4.$$get($$thisp, $$this, $$thisp, '$_parent'), '=');
			for (var $$i8 = ($es4.$$get($$thisp, $$this, $$thisp, '$_nodes') || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i8 != 0; $$i8 = $es4.$$get($$thisp, $$this, $$thisp, '$_nodes').$$nextNameIndex($$i8))
			{
				var xml = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_nodes').$$nextValue($$i8), XML);

				if ($es4.$$call(xml, $$this, $$thisp, 'nodeKind', $es4.$$EMPTY_ARRAY) == 'text')
				{
					$es4.$$set(xmlList, $$this, $$thisp, $es4.$$call(xmlList, $$this, $$thisp, 'length', $es4.$$EMPTY_ARRAY), xml, '=');
				}
			}
			return xmlList;
		}));

		//method
		$es4.$$public_function('hasOwnProperty', $$thisp, (function ($$$$name)
		{
			//set default parameter values
			var name = $es4.$$coerce($$$$name, String);

			var index = parseInt(name);
			if (isNaN(index))
			{
				return false;
			}
			return $es4.$$coerce(index >= 0 && index < $es4.$$get($$thisp, $$this, $$thisp, '$_nodes', 'length'), Boolean);
		}));

		//method
		$es4.$$public_function('propertyIsEnumerable', $$thisp, (function ($$$$name)
		{
			//set default parameter values
			var name = $es4.$$coerce($$$$name, String);

			var index = parseInt(name);
			if (isNaN(index))
			{
				return false;
			}
			return $es4.$$coerce(index >= 0 && index < $es4.$$get($$thisp, $$this, $$thisp, '$_nodes', 'length'), Boolean);
		}));

		//method
		$es4.$$public_function('toString', $$thisp, (function ()
		{
			var string = '';
			for (var $$i9 = ($es4.$$get($$thisp, $$this, $$thisp, '$_nodes') || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i9 != 0; $$i9 = $es4.$$get($$thisp, $$this, $$thisp, '$_nodes').$$nextNameIndex($$i9))
			{
				var childXML = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_nodes').$$nextValue($$i9), XML);

				string += $es4.$$call(childXML, $$this, $$thisp, 'toString', $es4.$$EMPTY_ARRAY);
			}
			return string;
		}));

		//method
		$es4.$$public_function('toXMLString', $$thisp, (function ()
		{
			var xmlString = '';
			for (var $$i10 = ($es4.$$get($$thisp, $$this, $$thisp, '$_nodes') || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i10 != 0; $$i10 = $es4.$$get($$thisp, $$this, $$thisp, '$_nodes').$$nextNameIndex($$i10))
			{
				var childXML = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_nodes').$$nextValue($$i10), XML);

				xmlString += $es4.$$call(childXML, $$this, $$thisp, 'toXMLString', $es4.$$EMPTY_ARRAY);
			}
			return xmlString;
		}));

		//method
		$es4.$$internal_function('$__insertChildAfter', $$thisp, (function ($$$$child1, $$$$child2)
		{
			//set default parameter values
			var child1 = $es4.$$coerce($$$$child1, Object);
			var child2 = $es4.$$coerce($$$$child2, Object);

			if (!$es4.$$get($$thisp, $$this, $$thisp, '$_parent'))
			{
				throw $es4.$$primitive(new (Error)('XMLList parent must be defined'));
			}
			var index = 0;
			if ($es4.$$is(child2, XMLList))
			{
				if (!child1)
				{
					index = 0;
				}
				else
				{
					if ($es4.$$call(child1, $$this, $$thisp, 'parent', $es4.$$EMPTY_ARRAY) != $es4.$$get($$thisp, $$this, $$thisp, '$_parent'))
					{
						return $es4.$$get($$thisp, $$this, $$thisp, '$_parent');
					}
					index = $es4.$$coerce($es4.$$call(child1, $$this, $$thisp, 'childIndex', $es4.$$EMPTY_ARRAY), int);
					if (index == -1)
					{
						return $es4.$$get($$thisp, $$this, $$thisp, '$_parent');
					}
					index++;
				}
				var length = $es4.$$coerce($es4.$$call(child2, $$this, $$thisp, 'length', $es4.$$EMPTY_ARRAY), int);
				for (var i = 0; i < length; i++)
				{
					$es4.$$call($$thisp, $$this, $$thisp, '$_nodes', 'splice', [i + index, 0, $es4.$$get(child2, $$this, $$thisp, i)]);
				}
				$es4.$$call($$thisp, $$this, $$thisp, '$_parent', '$__invalidateString', $es4.$$EMPTY_ARRAY);
				return $es4.$$get($$thisp, $$this, $$thisp, '$_parent');
			}
			if (!($es4.$$is(child2, XML)) || $es4.$$call(child2, $$this, $$thisp, 'parent', $es4.$$EMPTY_ARRAY) != $es4.$$get($$thisp, $$this, $$thisp, '$_parent'))
			{
				child2 = $es4.$$primitive(new (XML)(child2));
				$es4.$$set(child2, $$this, $$thisp, '$__parent', $es4.$$get($$thisp, $$this, $$thisp, '$_parent'), '=');
			}
			if (!child1)
			{
				index = 0;
			}
			else
			{
				if ($es4.$$call(child1, $$this, $$thisp, 'parent', $es4.$$EMPTY_ARRAY) != $es4.$$get($$thisp, $$this, $$thisp, '$_parent'))
				{
					return $es4.$$get($$thisp, $$this, $$thisp, '$_parent');
				}
				index = $es4.$$coerce($es4.$$call(child1, $$this, $$thisp, 'childIndex', $es4.$$EMPTY_ARRAY), int);
				if (index == -1)
				{
					return $es4.$$get($$thisp, $$this, $$thisp, '$_parent');
				}
				index++;
			}
			$es4.$$call($$thisp, $$this, $$thisp, '$_nodes', 'splice', [index, 0, child2]);
			$es4.$$call($$thisp, $$this, $$thisp, '$_parent', '$__invalidateString', $es4.$$EMPTY_ARRAY);
			return $es4.$$get($$thisp, $$this, $$thisp, '$_parent');
		}));

		//method
		$es4.$$internal_function('$__insertChildBefore', $$thisp, (function ($$$$child1, $$$$child2)
		{
			//set default parameter values
			var child1 = $es4.$$coerce($$$$child1, Object);
			var child2 = $es4.$$coerce($$$$child2, Object);

			if (!$es4.$$get($$thisp, $$this, $$thisp, '$_parent'))
			{
				throw $es4.$$primitive(new (Error)('XMLList parent must be defined'));
			}
			var index = 0;
			if ($es4.$$is(child2, XMLList))
			{
				if (!child1)
				{
					index = 0;
				}
				else
				{
					if ($es4.$$call(child1, $$this, $$thisp, 'parent', $es4.$$EMPTY_ARRAY) != $es4.$$get($$thisp, $$this, $$thisp, '$_parent'))
					{
						return $es4.$$get($$thisp, $$this, $$thisp, '$_parent');
					}
					index = $es4.$$coerce($es4.$$call(child1, $$this, $$thisp, 'childIndex', $es4.$$EMPTY_ARRAY), int);
					if (index == -1)
					{
						return $es4.$$get($$thisp, $$this, $$thisp, '$_parent');
					}
					if (index != 0)
					{
						index--;
					}
				}
				var length = $es4.$$coerce($es4.$$call(child2, $$this, $$thisp, 'length', $es4.$$EMPTY_ARRAY), int);
				for (var i = 0; i < length; i++)
				{
					$es4.$$call($$thisp, $$this, $$thisp, '$_nodes', 'splice', [i + index, 0, $es4.$$get(child2, $$this, $$thisp, i)]);
				}
				$es4.$$call($$thisp, $$this, $$thisp, '$_parent', '$__invalidateString', $es4.$$EMPTY_ARRAY);
				return $es4.$$get($$thisp, $$this, $$thisp, '$_parent');
			}
			if (!($es4.$$is(child2, XML)) || $es4.$$call(child2, $$this, $$thisp, 'parent', $es4.$$EMPTY_ARRAY) != $es4.$$get($$thisp, $$this, $$thisp, '$_parent'))
			{
				child2 = $es4.$$primitive(new (XML)(child2));
				$es4.$$set(child2, $$this, $$thisp, '$__parent', $es4.$$get($$thisp, $$this, $$thisp, '$_parent'), '=');
			}
			if (!child1)
			{
				index = 0;
			}
			else
			{
				if ($es4.$$call(child1, $$this, $$thisp, 'parent', $es4.$$EMPTY_ARRAY) != $es4.$$get($$thisp, $$this, $$thisp, '$_parent'))
				{
					return $es4.$$get($$thisp, $$this, $$thisp, '$_parent');
				}
				index = $es4.$$coerce($es4.$$call(child1, $$this, $$thisp, 'childIndex', $es4.$$EMPTY_ARRAY), int);
				if (index == -1)
				{
					return $es4.$$get($$thisp, $$this, $$thisp, '$_parent');
				}
				if (index != 0)
				{
					index--;
				}
			}
			$es4.$$call($$thisp, $$this, $$thisp, '$_nodes', 'splice', [index, 0, child2]);
			$es4.$$call($$thisp, $$this, $$thisp, '$_parent', '$__invalidateString', $es4.$$EMPTY_ARRAY);
			return $es4.$$get($$thisp, $$this, $$thisp, '$_parent');
		}));

		//method
		$es4.$$internal_function('$__prependChild', $$thisp, (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			return $es4.$$coerce($es4.$$call($$this, $$this, $$thisp, '$__insertChildAfter', [null, value]), XML);
		}));

		//method
		$es4.$$internal_function('$__replace', $$thisp, (function ($$$$childList, $$$$value)
		{
			//set default parameter values
			var childList = $es4.$$coerce($$$$childList, XMLList);
			var value = $es4.$$coerce($$$$value, XML);

			for (var $$i11 = (childList || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i11 != 0; $$i11 = childList.$$nextNameIndex($$i11))
			{
				var xml = $es4.$$coerce(childList.$$nextValue($$i11), XML);

				$es4.$$call($$thisp, $$this, $$thisp, '$$set', [$es4.$$call(xml, $$this, $$thisp, 'childIndex', $es4.$$EMPTY_ARRAY), value]);
			}
			return $es4.$$as($es4.$$get($$thisp, $$this, $$thisp, '$_parent'), XML);
		}));

		//method
		$es4.$$internal_function('$__merge', $$thisp, (function ($$$$xmlList)
		{
			//set default parameter values
			var xmlList = $es4.$$coerce($$$$xmlList, XMLList);

			for (var $$i12 = (xmlList || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i12 != 0; $$i12 = xmlList.$$nextNameIndex($$i12))
			{
				var xml = $es4.$$coerce(xmlList.$$nextValue($$i12), XML);

				$es4.$$call($$thisp, $$this, $$thisp, '$_nodes', 'push', [xml]);
			}
		}));

		//method
		$es4.$$public_function('comments', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('XMLList: attempted call to an unimplemented function "comments"'));
		}));

		//method
		$es4.$$public_function('hasComplexContent', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('XMLList: attempted call to an unimplemented function "hasComplexContent"'));
		}));

		//method
		$es4.$$public_function('hasSimpleContent', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('XMLList: attempted call to an unimplemented function "hasSimpleContent"'));
		}));

		//method
		$es4.$$public_function('normalize', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('XMLList: attempted call to an unimplemented function "normalize"'));
		}));

		//method
		$es4.$$public_function('processingInstructions', $$thisp, (function ($$$$name)
		{
			//set default parameter values
			var name = (0 > arguments.length - 1) ? "*" : $es4.$$coerce($$$$name, String);

			throw $es4.$$primitive(new (Error)('XMLList: attempted call to an unimplemented function "processingInstructions"'));
		}));

		//method
		$es4.$$private_function('$$get', $$thisp, (function ($$$$key)
		{
			//set default parameter values
			var key = $$$$key;

			if (key == '$attributes')
			{
				return $es4.$$call($$this, $$this, $$thisp, 'attributes', $es4.$$EMPTY_ARRAY);
			}
			var index = parseInt(key);
			if (isNaN(index))
			{
				if ($es4.$$get($$thisp, $$this, $$thisp, '$_parent') && $es4.$$call($$thisp, $$this, $$thisp, '$_parent', 'attributes', $es4.$$EMPTY_ARRAY) == $$this)
				{
					var attributes = $es4.$$coerce($es4.$$call($$thisp, $$this, $$thisp, '$_parent', 'attribute', [key]), XMLList);
					return ($es4.$$call(attributes, $$this, $$thisp, 'length', $es4.$$EMPTY_ARRAY)) ? $es4.$$get(attributes, $$this, $$thisp, 0) : $es4.$$primitive(new (XMLList)());
				}
				else
				{
					return $es4.$$call($$this, $$this, $$thisp, 'child', [key]);
				}
			}
			return $es4.$$get($$thisp, $$this, $$thisp, '$_nodes', index);
		}));

		//method
		$es4.$$private_function('$$set', $$thisp, (function ($$$$key, $$$$value)
		{
			//set default parameter values
			var key = $$$$key;
			var value = $$$$value;

			var index = parseInt(key);
			var xml = null;
			if (isNaN(index))
			{
				if ($es4.$$get($$thisp, $$this, $$thisp, '$_parent') && $es4.$$call($$thisp, $$this, $$thisp, '$_parent', 'attributes', $es4.$$EMPTY_ARRAY) == $$this)
				{
					var attributes = $es4.$$coerce($es4.$$call($$thisp, $$this, $$thisp, '$_parent', 'attribute', [key]), XMLList);
					if ($es4.$$call(attributes, $$this, $$thisp, 'length', $es4.$$EMPTY_ARRAY))
					{
						$es4.$$set(attributes, $$this, $$thisp, 0, value, '=');
					}
					else
					{
						attributes = $es4.$$coerce($es4.$$call($$thisp, $$this, $$thisp, '$_parent', 'attributes', $es4.$$EMPTY_ARRAY), XMLList);
						xml = $es4.$$coerce($es4.$$primitive(new (XML)('<' + key + '>' + value + '</' + key + '>')), XML);
						$es4.$$set(xml, $$this, $$thisp, '$__nodeKind', 'attribute', '=');
						$es4.$$set(xml, $$this, $$thisp, '$__parent', $es4.$$get($$thisp, $$this, $$thisp, '$_parent'), '=');
						$es4.$$set(attributes, $$this, $$thisp, $es4.$$call(attributes, $$this, $$thisp, 'length', $es4.$$EMPTY_ARRAY), xml, '=');
					}
				}
				else if ($es4.$$get($$thisp, $$this, $$thisp, '$_parent'))
				{
					var children = $es4.$$coerce($es4.$$call($$thisp, $$this, $$thisp, '$_parent', 'child', [key]), XMLList);
					if ($es4.$$call(children, $$this, $$thisp, 'length', $es4.$$EMPTY_ARRAY))
					{
						$es4.$$set(children, $$this, $$thisp, 0, value, '=');
					}
					else
					{
						children = $es4.$$coerce($es4.$$call($$thisp, $$this, $$thisp, '$_parent', 'children', $es4.$$EMPTY_ARRAY), XMLList);
						$es4.$$set(children, $$this, $$thisp, $es4.$$call(children, $$this, $$thisp, 'length', $es4.$$EMPTY_ARRAY), value, '=');
					}
				}
				return value;
			}
			if (index < 0)
			{
				throw $es4.$$primitive(new (Error)('XMLList: index out of range: ' + index));
			}
			if (index > $es4.$$get($$thisp, $$this, $$thisp, '$_nodes', 'length'))
			{
				index = $es4.$$get($$thisp, $$this, $$thisp, '$_nodes', 'length');
			}
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_nodes', index))
			{
				if ($es4.$$call($$thisp, $$this, $$thisp, '$_nodes', index, 'nodeKind', $es4.$$EMPTY_ARRAY) == 'attribute')
				{
					$es4.$$set($es4.$$call($$thisp, $$this, $$thisp, '$_nodes', index, 'children', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 0, '$__text', (value) ? $es4.$$call(value, $$this, $$thisp, 'toString', $es4.$$EMPTY_ARRAY) : '', '=');
					return value;
				}
				else if ($es4.$$call($$thisp, $$this, $$thisp, '$_nodes', index, 'nodeKind', $es4.$$EMPTY_ARRAY) == 'text')
				{
					return value;
				}
				else if ($es4.$$get($$thisp, $$this, $$thisp, '$_parent') && $es4.$$call($$thisp, $$this, $$thisp, '$_parent', 'children', $es4.$$EMPTY_ARRAY) == $$this)
				{
					if ($es4.$$call($es4.$$call($$thisp, $$this, $$thisp, '$_nodes', index, 'children', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'length', $es4.$$EMPTY_ARRAY))
					{
						$es4.$$call($$thisp, $$this, $$thisp, '$_nodes', index, '$__nodes', 'splice', [0]);
					}
					$es4.$$call($$thisp, $$this, $$thisp, '$_nodes', index, 'appendChild', [value]);
					return;
				}
			}
			if ($es4.$$is(value, XMLList))
			{
				for (var $$i13 = (value || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i13 != 0; $$i13 = value.$$nextNameIndex($$i13))
				{
					xml = $es4.$$coerce(value.$$nextValue($$i13), XML);

					$es4.$$call($$thisp, $$this, $$thisp, '$$set', [index++, xml]);
				}
				return;
			}
			else if (!($es4.$$is(value, XML)))
			{
				value = $es4.$$primitive(new (XML)(value));
				$es4.$$set(value, $$this, $$thisp, '$__parent', $es4.$$get($$thisp, $$this, $$thisp, '$_parent'), '=');
			}
			else if (!$es4.$$call(value, $$this, $$thisp, 'parent', $es4.$$EMPTY_ARRAY))
			{
				$es4.$$set(value, $$this, $$thisp, '$__parent', $es4.$$get($$thisp, $$this, $$thisp, '$_parent'), '=');
			}
			else if ($es4.$$call(value, $$this, $$thisp, 'parent', $es4.$$EMPTY_ARRAY) != $es4.$$get($$thisp, $$this, $$thisp, '$_parent') && $es4.$$get($$thisp, $$this, $$thisp, '$_parent'))
			{
				value = $es4.$$primitive(new (XML)(value));
				$es4.$$set(value, $$this, $$thisp, '$__parent', $es4.$$get($$thisp, $$this, $$thisp, '$_parent'), '=');
			}
			else if ($es4.$$get($$thisp, $$this, $$thisp, '$_parent'))
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_parent', '$__invalidateString', $es4.$$EMPTY_ARRAY);
			}
			return $es4.$$set($$thisp, $$this, $$thisp, '$_nodes', index, value, '=');
		}));

		//method
		$es4.$$private_function('$$append', $$thisp, (function ($$$$index, $$$$child2)
		{
			//set default parameter values
			var index = $es4.$$coerce($$$$index, int);
			var child2 = $es4.$$coerce($$$$child2, Object);

			index++;
			if ($es4.$$is(child2, XMLList))
			{
				var length = $es4.$$coerce($es4.$$call(child2, $$this, $$thisp, 'length', $es4.$$EMPTY_ARRAY), int);
				for (var i = 0; i < length; i++)
				{
					$es4.$$call($$thisp, $$this, $$thisp, '$_nodes', 'splice', [i + index, 0, $es4.$$get(child2, $$this, $$thisp, i)]);
				}
				if ($es4.$$get($$thisp, $$this, $$thisp, '$_parent'))
				{
					$es4.$$call($$thisp, $$this, $$thisp, '$_parent', '$__invalidateString', $es4.$$EMPTY_ARRAY);
				}
				return child2;
			}
			if (!($es4.$$is(child2, XML)) || $es4.$$call(child2, $$this, $$thisp, 'parent', $es4.$$EMPTY_ARRAY) != $es4.$$get($$thisp, $$this, $$thisp, '$_parent'))
			{
				child2 = $es4.$$primitive(new (XML)(child2));
				$es4.$$set(child2, $$this, $$thisp, '$__parent', $es4.$$get($$thisp, $$this, $$thisp, '$_parent'), '=');
			}
			$es4.$$call($$thisp, $$this, $$thisp, '$_nodes', 'splice', [index, 0, child2]);
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_parent'))
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_parent', '$__invalidateString', $es4.$$EMPTY_ARRAY);
			}
			return child2;
		}));

		//method
		$es4.$$private_function('$call', $$thisp, (function ($$$$name, $$$$args)
		{
			//set default parameter values
			var name = $$$$name;
			var args = $es4.$$coerce($$$$args, Array);

			throw $es4.$$primitive(new (Error)('XMLList: call not supported'));
		}));

		//method
		$es4.$$private_function('$$delete', $$thisp, (function ($$$$key)
		{
			//set default parameter values
			var key = $$$$key;

			var index = parseInt(key);
			if (isNaN(index))
			{
				if ($es4.$$get($$thisp, $$this, $$thisp, '$_parent') && $es4.$$call($$thisp, $$this, $$thisp, '$_parent', 'attributes', $es4.$$EMPTY_ARRAY) == $$this)
				{
					var attributes = $es4.$$coerce($es4.$$call($$thisp, $$this, $$thisp, '$_parent', 'attribute', [key]), XMLList);
					if ($es4.$$call(attributes, $$this, $$thisp, 'length', $es4.$$EMPTY_ARRAY))
					{
						return $es4.$$coerce($es4.$$delete(attributes, $$this, $$thisp, 0), Boolean);
					}
				}
				return true;
			}
			if (index < 0 || index >= $es4.$$get($$thisp, $$this, $$thisp, '$_nodes', 'length'))
			{
				throw $es4.$$primitive(new (Error)('XMLList: index out of range: ' + index));
			}
			var xml = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_nodes', index), XML);
			if ($es4.$$call(xml, $$this, $$thisp, 'parent', $es4.$$EMPTY_ARRAY))
			{
				if ($es4.$$call(xml, $$this, $$thisp, 'nodeKind', $es4.$$EMPTY_ARRAY) == 'element' && $$this != $es4.$$call($es4.$$call(xml, $$this, $$thisp, 'parent', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'children', $es4.$$EMPTY_ARRAY))
				{
					$es4.$$delete($es4.$$call($es4.$$call(xml, $$this, $$thisp, 'parent', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'children', $es4.$$EMPTY_ARRAY), $$this, $$thisp, $es4.$$call(xml, $$this, $$thisp, 'childIndex', $es4.$$EMPTY_ARRAY));
				}
				else if ($es4.$$call(xml, $$this, $$thisp, 'nodeKind', $es4.$$EMPTY_ARRAY) == 'attribute' && $$this != $es4.$$call($es4.$$call(xml, $$this, $$thisp, 'parent', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'attributes', $es4.$$EMPTY_ARRAY))
				{
					$es4.$$delete($es4.$$call($es4.$$call(xml, $$this, $$thisp, 'parent', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'attributes', $es4.$$EMPTY_ARRAY), $$this, $$thisp, $es4.$$call(xml, $$this, $$thisp, 'childIndex', $es4.$$EMPTY_ARRAY));
				}
			}
			$es4.$$set(xml, $$this, $$thisp, '$__parent', null, '=');
			$es4.$$call($$thisp, $$this, $$thisp, '$_nodes', 'splice', [index, 1]);
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_parent'))
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_parent', '$__invalidateString', $es4.$$EMPTY_ARRAY);
			}
			return true;
		}));

		//method
		$es4.$$private_function('$$nextName', $$thisp, (function ($$$$index)
		{
			//set default parameter values
			var index = $es4.$$coerce($$$$index, int);

			return $es4.$$call(index, $$this, $$thisp, 'toString', $es4.$$EMPTY_ARRAY);
		}));

		//method
		$es4.$$private_function('$$nextNameIndex', $$thisp, (function ($$$$index)
		{
			//set default parameter values
			var index = $es4.$$coerce($$$$index, int);

			return (index < $es4.$$get($$thisp, $$this, $$thisp, '$_nodes', 'length')) ? index + 1 : 0;
		}));

		//method
		$es4.$$private_function('$$nextValue', $$thisp, (function ($$$$index)
		{
			//set default parameter values
			var index = $es4.$$coerce($$$$index, int);

			return $es4.$$get($$thisp, $$this, $$thisp, '$_nodes', index - 1);
		}));

		//accessor
		$es4.$$internal_accessor('$__nodes', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '$_nodes');
		}), null);

		//accessor
		$es4.$$internal_accessor('$__parent', $$thisp, null, (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			$es4.$$set($$thisp, $$this, $$thisp, '$_parent', value, '=');
			for (var $$i14 = ($es4.$$get($$thisp, $$this, $$thisp, '$_nodes') || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i14 != 0; $$i14 = $es4.$$get($$thisp, $$this, $$thisp, '$_nodes').$$nextNameIndex($$i14))
			{
				var xml = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_nodes').$$nextValue($$i14), XML);

				$es4.$$set(xml, $$this, $$thisp, '$__parent', value, '=');
			}
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(XMLList, null, 'XMLList');
})();
//XMLList


//flash.text.StyleSheet
$es4.$$package('flash.text').StyleSheet = (function ()
{
	//imports
	var EventDispatcher;
	var TextFormat;

	//properties
	$es4.$$private_property('_ID', StyleSheet, int);

	//class initializer
	StyleSheet.$$cinit = (function ()
	{
		StyleSheet.$$cinit = undefined;

		//initialize imports
		EventDispatcher = $es4.$$['flash.events'].EventDispatcher;
		TextFormat = $es4.$$['flash.text'].TextFormat;

		//initialize properties
		StyleSheet._ID = 0;
	});

	function StyleSheet()
	{
		//initialize class if not initialized
		if (StyleSheet.$$cinit !== undefined) StyleSheet.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof StyleSheet) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], StyleSheet) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$public_property('$__id', $$thisp);
		$es4.$$private_property('_styleNode', $$thisp);
		$es4.$$private_property('_styles', $$thisp, Object);

		//initializer
		$es4.$$iinit($$thisp, (function ()
		{
			//initialize properties
			$es4.$$set($$this, $$this, $$thisp, '$__id', "__style__" + $es4.$$set(StyleSheet, $$this, $$thisp, '_ID', 'postfix', '++'), '=');
			$es4.$$set($$this, $$this, $$thisp, '_styles', {}, '=');
		}));

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
			$es4.$$super($$thisp).$$z();

			var doc = document;
			var styleNode = $es4.$$call(doc, $$this, $$thisp, 'createElement', ['style']);
			$es4.$$set(styleNode, $$this, $$thisp, 'type', 'text/css', '=');
			$es4.$$call($es4.$$call(doc, $$this, $$thisp, 'getElementsByTagName', ['head']), $$this, $$thisp, 0, 'appendChild', [styleNode]);
			$es4.$$set($$thisp, $$this, $$thisp, '_styleNode', styleNode, '=');
		}));

		//method
		$es4.$$public_function('setStyle', $$thisp, (function ($$$$styleName, $$$$styleObject)
		{
			//set default parameter values
			var styleName = $es4.$$coerce($$$$styleName, String);
			var styleObject = $es4.$$coerce($$$$styleObject, Object);

			throw $es4.$$primitive(new (Error)('StyleSheet: attempted call to an unimplemented function "setStyle"'));
		}));

		//method
		$es4.$$public_function('clear', $$thisp, (function ()
		{
			$es4.$$set($$thisp, $$this, $$thisp, '_styleNode', 'innerHTML', '', '=');
		}));

		//method
		$es4.$$public_function('getStyle', $$thisp, (function ($$$$styleName)
		{
			//set default parameter values
			var styleName = $es4.$$coerce($$$$styleName, String);

			return $es4.$$call(JSON, $$this, $$thisp, 'parse', [$es4.$$call(JSON, $$this, $$thisp, 'stringify', [$es4.$$get($$thisp, $$this, $$thisp, '_styles', styleName)])]);
		}));

		//method
		$es4.$$public_function('parseCSS', $$thisp, (function ($$$$text)
		{
			//set default parameter values
			var text = $$$$text;

			text = $es4.$$call((text || ''), $$this, $$thisp, 'trim', $es4.$$EMPTY_ARRAY);
			if (!$es4.$$get(text, $$this, $$thisp, 'length'))
			{
				return;
			}
			var parts = $es4.$$call(text, $$this, $$thisp, 'split', ['}']);
			var id = $es4.$$get($$this, $$this, $$thisp, '$__id');
			for (var i = $es4.$$get(parts, $$this, $$thisp, 'length'); i--;)
			{
				if (!$es4.$$get(parts, $$this, $$thisp, i, 'length'))
				{
					continue;
				}
				$es4.$$set(parts, $$this, $$thisp, i, ' .' + id + ' ' + $es4.$$get(parts, $$this, $$thisp, i), '=');
			}
			$es4.$$set($$thisp, $$this, $$thisp, '_styleNode', 'innerHTML', $es4.$$call(parts, $$this, $$thisp, 'join', ['}']), '=');
		}));

		//method
		$es4.$$public_function('transform', $$thisp, (function ($$$$formatObject)
		{
			//set default parameter values
			var formatObject = $es4.$$coerce($$$$formatObject, Object);

			throw $es4.$$primitive(new (Error)('StyleSheet: attempted call to an unimplemented function "transform"'));
		}));

		//accessor
		$es4.$$public_accessor('styleNames', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('StyleSheet: attempted call to an unimplemented function "styleNames"'));
		}), null);

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(StyleSheet, {EXTENDS:'flash.events.EventDispatcher'}, 'flash.text::StyleSheet');
})();
//flash.text.StyleSheet


//flash.events.GeolocationEvent
$es4.$$package('flash.events').GeolocationEvent = function () { throw new Error('Use of unimplemented class: GeolocationEvent'); }
//flash.events.GeolocationEvent


//flash.text.engine.TypographicCase
$es4.$$package('flash.text.engine').TypographicCase = function () { throw new Error('Use of unimplemented class: TypographicCase'); }
//flash.text.engine.TypographicCase


//flash.display3D.VertexBuffer3D
$es4.$$package('flash.display3D').VertexBuffer3D = function () { throw new Error('Use of unimplemented class: VertexBuffer3D'); }
//flash.display3D.VertexBuffer3D


//flash.text.TextFormat
$es4.$$package('flash.text').TextFormat = (function ()
{
	//imports
	var TextFormatAlign;

	//class initializer
	TextFormat.$$cinit = (function ()
	{
		TextFormat.$$cinit = undefined;

		//initialize imports
		TextFormatAlign = $es4.$$['flash.text'].TextFormatAlign;
	});

	function TextFormat()
	{
		//initialize class if not initialized
		if (TextFormat.$$cinit !== undefined) TextFormat.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof TextFormat) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], TextFormat) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$public_property('_url', $$thisp, String);
		$es4.$$private_property('_align', $$thisp, String);
		$es4.$$private_property('_blockIndent', $$thisp, Object);
		$es4.$$private_property('_bold', $$thisp, Object);
		$es4.$$private_property('_bullet', $$thisp, Object);
		$es4.$$private_property('_color', $$thisp, Object);
		$es4.$$private_property('_display', $$thisp, String);
		$es4.$$private_property('_indent', $$thisp, Object);
		$es4.$$private_property('_font', $$thisp, String);
		$es4.$$private_property('_italic', $$thisp, Object);
		$es4.$$private_property('_leading', $$thisp, Object);
		$es4.$$private_property('_kerning', $$thisp, Object);
		$es4.$$private_property('_leftMargin', $$thisp, Object);
		$es4.$$private_property('_letterSpacing', $$thisp, Object);
		$es4.$$private_property('_rightMargin', $$thisp, Object);
		$es4.$$private_property('_size', $$thisp, Object);
		$es4.$$private_property('_tabStops', $$thisp, Array);
		$es4.$$private_property('_target', $$thisp, String);
		$es4.$$private_property('_underline', $$thisp, Object);

		//initializer
		$es4.$$iinit($$thisp, (function ()
		{
			//initialize properties
			$es4.$$set($$this, $$this, $$thisp, '_align', $es4.$$get(TextFormatAlign, $$this, $$thisp, 'LEFT'), '=');
		}));

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$font, $$$$size, $$$$color, $$$$bold, $$$$italic, $$$$underline, $$$$url, $$$$target, $$$$align, $$$$leftMargin, $$$$rightMargin, $$$$indent, $$$$leading)
		{
			//set default parameter values
			var font = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$font, String);
			var size = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$size, Object);
			var color = (2 > arguments.length - 1) ? null : $es4.$$coerce($$$$color, Object);
			var bold = (3 > arguments.length - 1) ? null : $es4.$$coerce($$$$bold, Object);
			var italic = (4 > arguments.length - 1) ? null : $es4.$$coerce($$$$italic, Object);
			var underline = (5 > arguments.length - 1) ? null : $es4.$$coerce($$$$underline, Object);
			var url = (6 > arguments.length - 1) ? null : $es4.$$coerce($$$$url, String);
			var target = (7 > arguments.length - 1) ? null : $es4.$$coerce($$$$target, String);
			var align = (8 > arguments.length - 1) ? null : $es4.$$coerce($$$$align, String);
			var leftMargin = (9 > arguments.length - 1) ? null : $es4.$$coerce($$$$leftMargin, Object);
			var rightMargin = (10 > arguments.length - 1) ? null : $es4.$$coerce($$$$rightMargin, Object);
			var indent = (11 > arguments.length - 1) ? null : $es4.$$coerce($$$$indent, Object);
			var leading = (12 > arguments.length - 1) ? null : $es4.$$coerce($$$$leading, Object);

			$es4.$$set($$thisp, $$this, $$thisp, '_font', font, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_size', size, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_color', color, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_bold', bold, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_italic', italic, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_underline', underline, '=');
			$es4.$$set($$this, $$this, $$thisp, '_url', url, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_target', target, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_align', align, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_leftMargin', leftMargin, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_rightMargin', rightMargin, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_indent', indent, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_leading', leading, '=');
		}));

		//accessor
		$es4.$$public_accessor('align', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_align');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			$es4.$$set($$thisp, $$this, $$thisp, '_align', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('blockIndent', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_blockIndent');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			$es4.$$set($$thisp, $$this, $$thisp, '_blockIndent', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('bold', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_bold');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			$es4.$$set($$thisp, $$this, $$thisp, '_bold', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('bullet', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_bullet');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			$es4.$$set($$thisp, $$this, $$thisp, '_bullet', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('color', $$thisp, (function ()
		{
			return ($es4.$$get($$thisp, $$this, $$thisp, '_color') == null) ? null : Number($es4.$$get($$thisp, $$this, $$thisp, '_color'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			$es4.$$set($$thisp, $$this, $$thisp, '_color', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('display', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_display');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			$es4.$$set($$thisp, $$this, $$thisp, '_display', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('font', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_font');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			$es4.$$set($$thisp, $$this, $$thisp, '_font', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('indent', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_indent');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			$es4.$$set($$thisp, $$this, $$thisp, '_indent', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('italic', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_italic');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			$es4.$$set($$thisp, $$this, $$thisp, '_italic', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('kerning', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_kerning');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			$es4.$$set($$thisp, $$this, $$thisp, '_kerning', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('leading', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_leading');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			$es4.$$set($$thisp, $$this, $$thisp, '_leading', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('leftMargin', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_leftMargin');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			$es4.$$set($$thisp, $$this, $$thisp, '_leftMargin', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('letterSpacing', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_letterSpacing');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			$es4.$$set($$thisp, $$this, $$thisp, '_letterSpacing', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('rightMargin', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_rightMargin');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			$es4.$$set($$thisp, $$this, $$thisp, '_rightMargin', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('size', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_size');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			$es4.$$set($$thisp, $$this, $$thisp, '_size', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('tabStops', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_tabStops');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Array);

			$es4.$$set($$thisp, $$this, $$thisp, '_tabStops', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('target', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_target');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			$es4.$$set($$thisp, $$this, $$thisp, '_target', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('underline', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_underline');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			$es4.$$set($$thisp, $$this, $$thisp, '_underline', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('url', $$thisp, (function ()
		{
			return $es4.$$get($$this, $$this, $$thisp, '_url');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			$es4.$$set($$this, $$this, $$thisp, '_url', value, '=');
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(TextFormat, null, 'flash.text::TextFormat');
})();
//flash.text.TextFormat


//flash.events.UncaughtErrorEvents
$es4.$$package('flash.events').UncaughtErrorEvents = (function ()
{
	//imports
	var EventDispatcher;

	//class initializer
	UncaughtErrorEvents.$$cinit = (function ()
	{
		UncaughtErrorEvents.$$cinit = undefined;

		//initialize imports
		EventDispatcher = $es4.$$['flash.events'].EventDispatcher;
	});

	function UncaughtErrorEvents()
	{
		//initialize class if not initialized
		if (UncaughtErrorEvents.$$cinit !== undefined) UncaughtErrorEvents.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof UncaughtErrorEvents) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], UncaughtErrorEvents) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
			$es4.$$super($$thisp).$$z();
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(UncaughtErrorEvents, {EXTENDS:'flash.events.EventDispatcher'}, 'flash.events::UncaughtErrorEvents');
})();
//flash.events.UncaughtErrorEvents


//flash.display.NativeMenu
$es4.$$package('flash.display').NativeMenu = function () { throw new Error('Use of unimplemented class: NativeMenu'); }
//flash.display.NativeMenu


//flash.external.ExternalInterface
$es4.$$package('flash.external').ExternalInterface = (function ()
{
	//imports
	var Player;

	//class initializer
	ExternalInterface.$$cinit = (function ()
	{
		ExternalInterface.$$cinit = undefined;

		//initialize imports
		Player = $es4.$$['player'].Player;
	});

	//method
	$es4.$$public_function('addCallback', ExternalInterface, (function ($$$$functionName, $$$$closure)
	{
		if (ExternalInterface.$$cinit !== undefined) ExternalInterface.$$cinit();

		//set default parameter values
		var functionName = $es4.$$coerce($$$$functionName, String);
		var closure = $es4.$$coerce($$$$closure, Function);

		$es4.$$set($es4.$$call(Player, null, null, 'getCallObject', $es4.$$EMPTY_ARRAY), null, null, functionName, closure, '=');
	}));

	//method
	$es4.$$public_function('call', ExternalInterface, (function ($$$$functionName, $$$$rest)
	{
		if (ExternalInterface.$$cinit !== undefined) ExternalInterface.$$cinit();

		//set default parameter values
		var functionName = $es4.$$coerce($$$$functionName, String);
		for (var $$i = 1, $$length = arguments.length, rest = new Array($$length - 1); $$i < $$length; $$i += 1) rest[$$i - 1] = arguments[$$i];

		var scope = window;
		var properties = $es4.$$call(functionName, null, null, 'split', ['.']);
		for (var i = 0; i < $es4.$$get(properties, null, null, 'length') - 1; i++)
		{
			scope = $es4.$$get(scope, null, null, $es4.$$get(properties, null, null, i));
			if ($es4.$$typeof(scope) === "undefined" || scope === null)
			{
				throw $es4.$$primitive(new (Error)('undefined scope in External Interface call method'));
			}
		}
		var fn = $es4.$$get(scope, null, null, $es4.$$get(properties, null, null, $es4.$$get(properties, null, null, 'length') - 1));
		return $es4.$$typeof(fn) === 'function' ? $es4.$$call(Function(fn), null, null, 'apply', [scope, rest]) : null;
	}));

	//accessor
	$es4.$$public_accessor('marshallExceptions', ExternalInterface, (function ()
	{
		if (ExternalInterface.$$cinit !== undefined) ExternalInterface.$$cinit();

		return false;
	}), (function ($$$$value)
	{
		if (ExternalInterface.$$cinit !== undefined) ExternalInterface.$$cinit();

		//set default parameter values
		var value = $es4.$$coerce($$$$value, Boolean);

		if (!value)
		{
			return;
		}
		throw $es4.$$primitive(new (Error)('ExternalInterface.marshallExceptions is not supported.'));
	}));

	//accessor
	$es4.$$public_accessor('available', ExternalInterface, (function ()
	{
		if (ExternalInterface.$$cinit !== undefined) ExternalInterface.$$cinit();

		return true;
	}), null);

	//accessor
	$es4.$$public_accessor('objectID', ExternalInterface, (function ()
	{
		if (ExternalInterface.$$cinit !== undefined) ExternalInterface.$$cinit();

		return $es4.$$call(Player, null, null, 'getDomStageContainerID', $es4.$$EMPTY_ARRAY);
	}), null);

	function ExternalInterface()
	{
		//initialize class if not initialized
		if (ExternalInterface.$$cinit !== undefined) ExternalInterface.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof ExternalInterface) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], ExternalInterface) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(ExternalInterface, null, 'flash.external::ExternalInterface');
})();
//flash.external.ExternalInterface


//flash.text.CSMSettings
$es4.$$package('flash.text').CSMSettings = function () { throw new Error('Use of unimplemented class: CSMSettings'); }
//flash.text.CSMSettings


//flash.display.Shape
$es4.$$package('flash.display').Shape = (function ()
{
	//imports
	var Graphics;
	var DisplayObject;

	//class initializer
	Shape.$$cinit = (function ()
	{
		Shape.$$cinit = undefined;

		//initialize imports
		Graphics = $es4.$$['flash.display'].Graphics;
		DisplayObject = $es4.$$['flash.display'].DisplayObject;
	});

	function Shape()
	{
		//initialize class if not initialized
		if (Shape.$$cinit !== undefined) Shape.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof Shape) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Shape) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('$_properties', $$thisp);

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties') === undefined)
			{
				$es4.$$call($$this, $$this, $$thisp, '$__properties', [{}]);
			}
			$es4.$$super($$thisp).$$z();
		}));

		//method
		$es4.$$public_function('$__properties', $$thisp, (function ($$$$object)
		{
			//set default parameter values
			var object = (0 > arguments.length - 1) ? null : $$$$object;

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties') === undefined)
			{
				object = $es4.$$call($es4.$$super($$thisp), $$this, $$thisp, '$__properties', [object]);
				$es4.$$set(object, $$this, $$thisp, 'ShapeScope', {}, '=');
				return $es4.$$set($$thisp, $$this, $$thisp, '$_properties', object, '=');
			}
			return $es4.$$get($$thisp, $$this, $$thisp, '$_properties');
		}));

		//accessor
		$es4.$$public_accessor('graphics', $$thisp, (function ()
		{
			return $es4.$$coerce(($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ShapeScope', '$_graphics')) ? $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ShapeScope', '$_graphics') : $es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ShapeScope', '$_graphics', $es4.$$primitive(new (Graphics)($$this)), '='), Graphics);
		}), null);

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(Shape, {EXTENDS:'flash.display.DisplayObject'}, 'flash.display::Shape');
})();
//flash.display.Shape


//flash.text.FontType
$es4.$$package('flash.text').FontType = (function ()
{
	//properties
	FontType.DEVICE = "device";
	FontType.EMBEDDED = "embedded";
	FontType.EMBEDDED_CFF = "embeddedCFF";

	//class initializer
	FontType.$$cinit = (function ()
	{
		FontType.$$cinit = undefined;

	});

	function FontType()
	{
		//initialize class if not initialized
		if (FontType.$$cinit !== undefined) FontType.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof FontType) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], FontType) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(FontType, null, 'flash.text::FontType');
})();
//flash.text.FontType


//flash.system.JPEGLoaderContext
$es4.$$package('flash.system').JPEGLoaderContext = function () { throw new Error('Use of unimplemented class: JPEGLoaderContext'); }
//flash.system.JPEGLoaderContext


//flash.display.ShaderInput
$es4.$$package('flash.display').ShaderInput = function () { throw new Error('Use of unimplemented class: ShaderInput'); }
//flash.display.ShaderInput


//flash.display.MorphShape
$es4.$$package('flash.display').MorphShape = function () { throw new Error('Use of unimplemented class: MorphShape'); }
//flash.display.MorphShape


//flash.net.FileReferenceList
$es4.$$package('flash.net').FileReferenceList = function () { throw new Error('Use of unimplemented class: FileReferenceList'); }
//flash.net.FileReferenceList


//flash.display.StageQuality
$es4.$$package('flash.display').StageQuality = (function ()
{
	//properties
	StageQuality.BEST = "best";
	StageQuality.HIGH = "high";
	StageQuality.LOW = "low";
	StageQuality.MEDIUM = "medium";

	//class initializer
	StageQuality.$$cinit = (function ()
	{
		StageQuality.$$cinit = undefined;

	});

	function StageQuality()
	{
		//initialize class if not initialized
		if (StageQuality.$$cinit !== undefined) StageQuality.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof StageQuality) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], StageQuality) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(StageQuality, null, 'flash.display::StageQuality');
})();
//flash.display.StageQuality


//flash.display.Sprite
$es4.$$package('flash.display').Sprite = (function ()
{
	//imports
	var DisplayObject;
	var Graphics;
	var MouseEvent;
	var Point;
	var Rectangle;
	var SoundTransform;
	var DisplayObjectContainer;
	var Sprite;

	//properties
	$es4.$$private_property('$_dragging', Sprite, 'flash.display.Sprite');
	$es4.$$private_property('$_lockCenter', Sprite, Boolean);
	$es4.$$private_property('$_bounds', Sprite, 'flash.geom.Rectangle');
	$es4.$$private_property('$_dragPoint', Sprite, 'flash.geom.Point');

	//class initializer
	Sprite.$$cinit = (function ()
	{
		Sprite.$$cinit = undefined;

		//initialize imports
		DisplayObject = $es4.$$['flash.display'].DisplayObject;
		Graphics = $es4.$$['flash.display'].Graphics;
		MouseEvent = $es4.$$['flash.events'].MouseEvent;
		Point = $es4.$$['flash.geom'].Point;
		Rectangle = $es4.$$['flash.geom'].Rectangle;
		SoundTransform = $es4.$$['flash.media'].SoundTransform;
		DisplayObjectContainer = $es4.$$['flash.display'].DisplayObjectContainer;
	});

	//method
	$es4.$$private_function('$_onMouseMove', Sprite, (function ($$$$mouseEvent)
	{
		if (Sprite.$$cinit !== undefined) Sprite.$$cinit();

		//set default parameter values
		var mouseEvent = $$$$mouseEvent;

		var sprite = $es4.$$get(Sprite, null, null, '$_dragging');
		var x = NaN;
		var y = NaN;
		if ($es4.$$get(Sprite, null, null, '$_lockCenter'))
		{
			x = $es4.$$coerce($es4.$$get($es4.$$call($es4.$$call(sprite, null, null, '$__properties', $es4.$$EMPTY_ARRAY), null, null, 'TLScope', 'parent', '$__properties', $es4.$$EMPTY_ARRAY), null, null, 'TLScope', 'mouseX'), Number);
			y = $es4.$$coerce($es4.$$get($es4.$$call($es4.$$call(sprite, null, null, '$__properties', $es4.$$EMPTY_ARRAY), null, null, 'TLScope', 'parent', '$__properties', $es4.$$EMPTY_ARRAY), null, null, 'TLScope', 'mouseY'), Number);
		}
		else
		{
			x = $es4.$$coerce($es4.$$get($es4.$$call($es4.$$call(sprite, null, null, '$__properties', $es4.$$EMPTY_ARRAY), null, null, 'TLScope', 'parent', '$__properties', $es4.$$EMPTY_ARRAY), null, null, 'TLScope', 'mouseX') - $es4.$$get(Sprite, null, null, '$_dragPoint', 'x'), Number);
			y = $es4.$$coerce($es4.$$get($es4.$$call($es4.$$call(sprite, null, null, '$__properties', $es4.$$EMPTY_ARRAY), null, null, 'TLScope', 'parent', '$__properties', $es4.$$EMPTY_ARRAY), null, null, 'TLScope', 'mouseY') - $es4.$$get(Sprite, null, null, '$_dragPoint', 'y'), Number);
		}
		if ($es4.$$get(Sprite, null, null, '$_bounds'))
		{
			var bounds = $es4.$$get(Sprite, null, null, '$_bounds');
			x = $es4.$$call(Math, null, null, 'max', [$es4.$$call(Math, null, null, 'min', [x, $es4.$$get(bounds, null, null, 'width') + $es4.$$get(bounds, null, null, 'x')]), $es4.$$get(bounds, null, null, 'x')]);
			y = $es4.$$call(Math, null, null, 'max', [$es4.$$call(Math, null, null, 'min', [y, $es4.$$get(bounds, null, null, 'height') + $es4.$$get(bounds, null, null, 'y')]), $es4.$$get(bounds, null, null, 'y')]);
		}
		$es4.$$set($es4.$$call(sprite, null, null, '$__properties', $es4.$$EMPTY_ARRAY), null, null, 'TLScope', 'x', x, '=');
		$es4.$$set($es4.$$call(sprite, null, null, '$__properties', $es4.$$EMPTY_ARRAY), null, null, 'TLScope', 'y', y, '=');
	}));

	function Sprite()
	{
		//initialize class if not initialized
		if (Sprite.$$cinit !== undefined) Sprite.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof Sprite) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Sprite) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('$_properties', $$thisp);

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties') === undefined)
			{
				$es4.$$call($$this, $$this, $$thisp, '$__properties', [{}]);
			}
			$es4.$$super($$thisp).$$z();
		}));

		//method
		$es4.$$public_function('$__properties', $$thisp, (function ($$$$object)
		{
			//set default parameter values
			var object = (0 > arguments.length - 1) ? null : $$$$object;

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties') === undefined)
			{
				object = $es4.$$call($es4.$$super($$thisp), $$this, $$thisp, '$__properties', [object]);
				$es4.$$set(object, $$this, $$thisp, 'SpriteScope', {$_useHandCursor:true, $_buttonMode:false}, '=');
				$es4.$$set(object, $$this, $$thisp, 'TLScope', $$this, '=');
				return $es4.$$set($$thisp, $$this, $$thisp, '$_properties', object, '=');
			}
			return $es4.$$get($$thisp, $$this, $$thisp, '$_properties');
		}));

		//method
		$es4.$$public_function('startDrag', $$thisp, (function ($$$$lockCenter, $$$$bounds)
		{
			//set default parameter values
			var lockCenter = (0 > arguments.length - 1) ? false : $es4.$$coerce($$$$lockCenter, Boolean);
			var bounds = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$bounds, Rectangle);

			if ($es4.$$get(Sprite, $$this, $$thisp, '$_dragging'))
			{
				$es4.$$call($$this, $$this, $$thisp, 'stopDrag', $es4.$$EMPTY_ARRAY);
			}
			$es4.$$set(Sprite, $$this, $$thisp, '$_dragging', $$this, '=');
			$es4.$$set(Sprite, $$this, $$thisp, '$_lockCenter', lockCenter, '=');
			$es4.$$set(Sprite, $$this, $$thisp, '$_bounds', bounds, '=');
			$es4.$$set(Sprite, $$this, $$thisp, '$_dragPoint', $es4.$$primitive(new (Point)($es4.$$get($$this, $$this, $$thisp, 'mouseX'), $es4.$$get($$this, $$this, $$thisp, 'mouseY'))), '=');
			$es4.$$call($$this, $$this, $$thisp, 'stage', 'addEventListener', [$es4.$$get(MouseEvent, $$this, $$thisp, 'MOUSE_MOVE'), $es4.$$get(Sprite, $$this, $$thisp, '$_onMouseMove')]);
		}));

		//method
		$es4.$$public_function('startTouchDrag', $$thisp, (function ($$$$touchPointID, $$$$lockCenter, $$$$bounds)
		{
			//set default parameter values
			var touchPointID = $es4.$$coerce($$$$touchPointID, int);
			var lockCenter = (1 > arguments.length - 1) ? false : $es4.$$coerce($$$$lockCenter, Boolean);
			var bounds = (2 > arguments.length - 1) ? null : $es4.$$coerce($$$$bounds, Rectangle);

			throw $es4.$$primitive(new (Error)('Sprite: attempted call to an unimplemented function "startTouchDrag"'));
		}));

		//method
		$es4.$$public_function('stopDrag', $$thisp, (function ()
		{
			if (!$es4.$$get(Sprite, $$this, $$thisp, '$_dragging'))
			{
				return;
			}
			$es4.$$call($$this, $$this, $$thisp, 'stage', 'removeEventListener', [$es4.$$get(MouseEvent, $$this, $$thisp, 'MOUSE_MOVE'), $es4.$$get(Sprite, $$this, $$thisp, '$_onMouseMove')]);
			$es4.$$set(Sprite, $$this, $$thisp, '$_dragging', null, '=');
			$es4.$$set(Sprite, $$this, $$thisp, '$_bounds', null, '=');
			$es4.$$set(Sprite, $$this, $$thisp, '$_dragPoint', null, '=');
		}));

		//method
		$es4.$$public_function('stopTouchDrag', $$thisp, (function ($$$$touchPointID)
		{
			//set default parameter values
			var touchPointID = $es4.$$coerce($$$$touchPointID, int);

			throw $es4.$$primitive(new (Error)('Sprite: attempted call to an unimplemented function "stopTouchDrag"'));
		}));

		//accessor
		$es4.$$public_accessor('graphics', $$thisp, (function ()
		{
			return $es4.$$coerce(($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SpriteScope', '$_graphics')) ? $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SpriteScope', '$_graphics') : $es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'SpriteScope', '$_graphics', $es4.$$primitive(new (Graphics)($$this)), '='), Graphics);
		}), null);

		//accessor
		$es4.$$public_accessor('buttonMode', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SpriteScope', '$_buttonMode'), Boolean);
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'SpriteScope', '$_buttonMode', value, '=');
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SpriteScope', '$_buttonMode') && $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SpriteScope', '$_useHandCursor'))
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'style', 'cursor', 'pointer', '=');
			}
			else
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'style', 'cursor', 'auto', '=');
			}
			var enabled = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_tabEnabled'), Boolean);
			if (enabled || $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SpriteScope', '$_buttonMode'))
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'setAttribute', ['tabindex', $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_tabIndex')]);
			}
			else
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'setAttribute', ['tabindex', -1]);
			}
			if ($es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'getAttribute', ['role']) != 'presentation')
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_role', $es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'getAttribute', ['role']), '=');
			}
			if ((!enabled && !$es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SpriteScope', '$_buttonMode')) || $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_tabIndex') == -1)
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'setAttribute', ['role', 'presentation']);
			}
			else
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'setAttribute', ['role', $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_role')]);
			}
		}));

		//accessor
		$es4.$$public_accessor('tabEnabled', $$thisp, (function ()
		{
			return $es4.$$super($$thisp).tabEnabled;
		}), (function ($$$$enabled)
		{
			//set default parameter values
			var enabled = $es4.$$coerce($$$$enabled, Boolean);

			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_tabEnabled', enabled, '=');
			if (enabled || $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SpriteScope', '$_buttonMode'))
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'setAttribute', ['tabindex', $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_tabIndex')]);
			}
			else
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'setAttribute', ['tabindex', -1]);
			}
			if ($es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'getAttribute', ['role']) != 'presentation')
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_role', $es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'getAttribute', ['role']), '=');
			}
			if ((!enabled && !$es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SpriteScope', '$_buttonMode')) || $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_tabIndex') == -1)
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'setAttribute', ['role', 'presentation']);
			}
			else
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'setAttribute', ['role', $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_role')]);
			}
		}));

		//accessor
		$es4.$$public_accessor('mouseEnabled', $$thisp, (function ()
		{
			return $es4.$$super($$thisp).mouseEnabled;
		}), (function ($$$$enabled)
		{
			//set default parameter values
			var enabled = $es4.$$coerce($$$$enabled, Boolean);

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domGraphicsView'))
			{
				var childNodes = $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domGraphicsView', 'childNodes');
				for (var i = $es4.$$coerce($es4.$$get(childNodes, $$this, $$thisp, 'length'), int); i--;)
				{
					$es4.$$set(childNodes, $$this, $$thisp, i, 'style', 'pointerEvents', (enabled) ? 'visible' : 'none', '=');
				}
			}
			$es4.$$set($es4.$$super($$thisp), $$this, $$thisp, 'mouseEnabled', enabled, '=');
		}));

		//accessor
		$es4.$$public_accessor('dropTarget', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Sprite: attempted call to an unimplemented function "dropTarget"'));
		}), null);

		//accessor
		$es4.$$public_accessor('hitArea', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Sprite: attempted call to an unimplemented function "hitArea"'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, $es4.$$['flash.display'].Sprite);

			throw $es4.$$primitive(new (Error)('Sprite: attempted call to an unimplemented function "hitArea"'));
		}));

		//accessor
		$es4.$$public_accessor('soundTransform', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Sprite: attempted call to an unimplemented function "soundTransform"'));
		}), (function ($$$$sndTransform)
		{
			//set default parameter values
			var sndTransform = $es4.$$coerce($$$$sndTransform, SoundTransform);

			throw $es4.$$primitive(new (Error)('Sprite: attempted call to an unimplemented function "soundTransform"'));
		}));

		//accessor
		$es4.$$public_accessor('useHandCursor', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SpriteScope', '$_useHandCursor'), Boolean);
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'SpriteScope', '$_useHandCursor', value, '=');
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SpriteScope', '$_buttonMode') && $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SpriteScope', '$_useHandCursor'))
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'style', 'cursor', 'pointer', '=');
			}
			else
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'style', 'cursor', 'auto', '=');
			}
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(Sprite, {EXTENDS:'flash.display.DisplayObjectContainer'}, 'flash.display::Sprite');
})();
//flash.display.Sprite


//flash.net.NetGroupInfo
$es4.$$package('flash.net').NetGroupInfo = function () { throw new Error('Use of unimplemented class: NetGroupInfo'); }
//flash.net.NetGroupInfo


//flash.geom.Vector3D
$es4.$$package('flash.geom').Vector3D = function () { throw new Error('Use of unimplemented class: Vector3D'); }
//flash.geom.Vector3D


//flash.display.ShaderJob
$es4.$$package('flash.display').ShaderJob = function () { throw new Error('Use of unimplemented class: ShaderJob'); }
//flash.display.ShaderJob


//flash.desktop.Clipboard
$es4.$$package('flash.desktop').Clipboard = function () { throw new Error('Use of unimplemented class: Clipboard'); }
//flash.desktop.Clipboard


//flash.filters.BitmapFilterQuality
$es4.$$package('flash.filters').BitmapFilterQuality = function () { throw new Error('Use of unimplemented class: BitmapFilterQuality'); }
//flash.filters.BitmapFilterQuality


//flash.display.Graphics
$es4.$$package('flash.display').Graphics = (function ()
{
	//imports
	var BitmapData;
	var DisplayObject;
	var IGraphicsData;
	var Shader;
	var Matrix;
	var Browser;
	var CapsStyle;
	var InteractiveObject;
	var Graphics;
	var Stage;

	//properties
	$es4.$$private_property('$_uniqueIDCounter', Graphics, Number);
	$es4.$$private_property('$_objects', Graphics, Array);

	//class initializer
	Graphics.$$cinit = (function ()
	{
		Graphics.$$cinit = undefined;

		//initialize imports
		BitmapData = $es4.$$['flash.display'].BitmapData;
		DisplayObject = $es4.$$['flash.display'].DisplayObject;
		IGraphicsData = $es4.$$['flash.display'].IGraphicsData;
		Shader = $es4.$$['flash.display'].Shader;
		Matrix = $es4.$$['flash.geom'].Matrix;
		Browser = $es4.$$['browser'].Browser;
		CapsStyle = $es4.$$['flash.display'].CapsStyle;
		InteractiveObject = $es4.$$['flash.display'].InteractiveObject;
		Stage = $es4.$$['flash.display'].Stage;

		//initialize properties
		Graphics.$_uniqueIDCounter = 0;
	});

	//method
	$es4.$$private_function('$_convertToColorString', Graphics, (function ($$$$color)
	{
		if (Graphics.$$cinit !== undefined) Graphics.$$cinit();

		//set default parameter values
		var color = $es4.$$coerce($$$$color, uint);

		var colorString = $es4.$$call(color, null, null, 'toString', [16]);
		while ($es4.$$get(colorString, null, null, 'length') < 6)
		{
			colorString = '0' + colorString;
		}
		return '#' + colorString;
	}));

	function Graphics()
	{
		//initialize class if not initialized
		if (Graphics.$$cinit !== undefined) Graphics.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof Graphics) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Graphics) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('$_displayObject', $$thisp, DisplayObject);
		$es4.$$private_property('$_domGraphicsView', $$thisp, Object);
		$es4.$$private_property('$_fillType', $$thisp, String);
		$es4.$$private_property('$_fillColor', $$thisp, uint);
		$es4.$$private_property('$_fillAlpha', $$thisp, Number);
		$es4.$$private_property('$_fillBitmapData', $$thisp, String);
		$es4.$$private_property('$_strokeThickness', $$thisp, Number);
		$es4.$$private_property('$_strokeColor', $$thisp, uint);
		$es4.$$private_property('$_strokeAlpha', $$thisp, Number);
		$es4.$$private_property('$_strokePixelHinting', $$thisp, Boolean);
		$es4.$$private_property('$_strokeScaleMode', $$thisp, String);
		$es4.$$private_property('$_strokeCaps', $$thisp, String);
		$es4.$$private_property('$_strokeJoints', $$thisp, String);
		$es4.$$private_property('$_strokeMiterLimit', $$thisp, Number);
		$es4.$$private_property('$_domPathView', $$thisp, Object);
		$es4.$$private_property('$_maxWidth', $$thisp, Number);
		$es4.$$private_property('$_maxHeight', $$thisp, Number);
		$es4.$$private_property('$_maxNegX', $$thisp, Number);
		$es4.$$private_property('$_maxNegY', $$thisp, Number);

		//initializer
		$es4.$$iinit($$thisp, (function ()
		{
			//initialize properties
			$es4.$$set($$this, $$this, $$thisp, '$_fillType', '', '=');
			$es4.$$set($$this, $$this, $$thisp, '$_strokeThickness', 0, '=');
			$es4.$$set($$this, $$this, $$thisp, '$_maxWidth', 0, '=');
			$es4.$$set($$this, $$this, $$thisp, '$_maxHeight', 0, '=');
			$es4.$$set($$this, $$this, $$thisp, '$_maxNegX', 0, '=');
			$es4.$$set($$this, $$this, $$thisp, '$_maxNegY', 0, '=');
		}));

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$displayObject)
		{
			//set default parameter values
			var displayObject = $es4.$$coerce($$$$displayObject, DisplayObject);

			$es4.$$set($$thisp, $$this, $$thisp, '$_displayObject', displayObject, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_domGraphicsView', $es4.$$call(document, $$this, $$thisp, 'createElementNS', ['http://www.w3.org/2000/svg', 'svg']), '=');
			$es4.$$call($$thisp, $$this, $$thisp, '$_displayObject', '$__addDomGraphicsView', [$es4.$$get($$thisp, $$this, $$thisp, '$_domGraphicsView')]);
			$es4.$$call($$thisp, $$this, $$thisp, '$_domGraphicsView', 'setAttribute', ['version', '1.1']);
			$es4.$$call($$thisp, $$this, $$thisp, '$_domGraphicsView', 'setAttribute', ['tabindex', '-1']);
			$es4.$$call($$thisp, $$this, $$thisp, '$_domGraphicsView', 'setAttribute', ['focusable', false]);
			$es4.$$set($$thisp, $$this, $$thisp, '$_domGraphicsView', 'style', 'display', 'block', '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_domGraphicsView', 'style', 'position', 'absolute', '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_domGraphicsView', 'style', 'pointerEvents', 'none', '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_domGraphicsView', 'style', $es4.$$call(Browser, $$this, $$thisp, 'getTransformOriginString', $es4.$$EMPTY_ARRAY), '0% 0%', '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_domGraphicsView', 'style', $es4.$$call(Browser, $$this, $$thisp, 'getTransformString', $es4.$$EMPTY_ARRAY), 'translateZ(0)', '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_domGraphicsView', 'style', $es4.$$call(Browser, $$this, $$thisp, 'getBackfaceVisibilityString', $es4.$$EMPTY_ARRAY), 'hidden', '=');
		}));

		//method
		$es4.$$private_function('$_doFillAndLine', $$thisp, (function ($$$$element)
		{
			//set default parameter values
			var element = $es4.$$coerce($$$$element, Object);

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_fillType') == 'beginFill')
			{
				$es4.$$call(element, $$this, $$thisp, 'setAttribute', ['fill', $es4.$$call(Graphics, $$this, $$thisp, '$_convertToColorString', [$es4.$$get($$thisp, $$this, $$thisp, '$_fillColor')])]);
				$es4.$$call(element, $$this, $$thisp, 'setAttribute', ['fill-opacity', $es4.$$get($$thisp, $$this, $$thisp, '$_fillAlpha')]);
			}
			else if ($es4.$$get($$thisp, $$this, $$thisp, '$_fillType') == 'beginBitmapFill')
			{
				$es4.$$call(element, $$this, $$thisp, 'setAttribute', ['fill', 'url(#' + $es4.$$get($$thisp, $$this, $$thisp, '$_fillBitmapData') + ')']);
			}
			else
			{
				$es4.$$call(element, $$this, $$thisp, 'setAttribute', ['fill-opacity', 0]);
			}
			if (!$es4.$$call(element, $$this, $$thisp, 'getAttribute', ['shape-rendering']))
			{
				$es4.$$call(element, $$this, $$thisp, 'setAttribute', ['shape-rendering', ($es4.$$get(window, $$this, $$thisp, 'mobile')) ? 'optimizeSpeed' : 'auto']);
			}
			var interactiveObject = $es4.$$as($es4.$$get($$thisp, $$this, $$thisp, '$_displayObject'), InteractiveObject);
			$es4.$$set(element, $$this, $$thisp, 'style', 'pointerEvents', (interactiveObject && $es4.$$get($es4.$$call(interactiveObject, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'InteractiveObjectScope', '$_mouseEnabled')) ? 'visible' : 'none', '=');
			if (!$es4.$$get($$thisp, $$this, $$thisp, '$_strokeThickness'))
			{
				return;
			}
			$es4.$$call(element, $$this, $$thisp, 'setAttribute', ['stroke-width', $es4.$$get($$thisp, $$this, $$thisp, '$_strokeThickness')]);
			$es4.$$call(element, $$this, $$thisp, 'setAttribute', ['stroke', $es4.$$call(Graphics, $$this, $$thisp, '$_convertToColorString', [$es4.$$get($$thisp, $$this, $$thisp, '$_strokeColor')])]);
			$es4.$$call(element, $$this, $$thisp, 'setAttribute', ['stroke-opacity', $es4.$$get($$thisp, $$this, $$thisp, '$_strokeAlpha')]);
			$es4.$$call(element, $$this, $$thisp, 'setAttribute', ['stroke-miterlimit', $es4.$$get($$thisp, $$this, $$thisp, '$_strokeMiterLimit')]);
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_strokeCaps') == $es4.$$get(CapsStyle, $$this, $$thisp, 'SQUARE'))
			{
				$es4.$$call(element, $$this, $$thisp, 'setAttribute', ['stroke-linecap', 'square']);
			}
			else if ($es4.$$get($$thisp, $$this, $$thisp, '$_strokeCaps') == $es4.$$get(CapsStyle, $$this, $$thisp, 'NONE'))
			{
				$es4.$$call(element, $$this, $$thisp, 'setAttribute', ['stroke-linecap', 'butt']);
			}
			else
			{
				$es4.$$call(element, $$this, $$thisp, 'setAttribute', ['stroke-linecap', 'round']);
			}
		}));

		//method
		$es4.$$public_function('beginFill', $$thisp, (function ($$$$color, $$$$alpha)
		{
			//set default parameter values
			var color = $es4.$$coerce($$$$color, uint);
			var alpha = (1 > arguments.length - 1) ? 1 : $es4.$$coerce($$$$alpha, Number);

			$es4.$$set($$thisp, $$this, $$thisp, '$_fillType', 'beginFill', '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_fillColor', color, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_fillAlpha', alpha, '=');
		}));

		//method
		$es4.$$public_function('drawRect', $$thisp, (function ($$$$x, $$$$y, $$$$width, $$$$height)
		{
			//set default parameter values
			var x = $es4.$$coerce($$$$x, Number);
			var y = $es4.$$coerce($$$$y, Number);
			var width = $es4.$$coerce($$$$width, Number);
			var height = $es4.$$coerce($$$$height, Number);

			var rect = $es4.$$call(document, $$this, $$thisp, 'createElementNS', ['http://www.w3.org/2000/svg', 'rect']);
			$es4.$$call(rect, $$this, $$thisp, 'setAttribute', ['x', x + 'px']);
			$es4.$$call(rect, $$this, $$thisp, 'setAttribute', ['y', y + 'px']);
			$es4.$$call(rect, $$this, $$thisp, 'setAttribute', ['width', width + 'px']);
			$es4.$$call(rect, $$this, $$thisp, 'setAttribute', ['height', height + 'px']);
			$es4.$$call($$thisp, $$this, $$thisp, '$_doFillAndLine', [rect]);
			$es4.$$call($$thisp, $$this, $$thisp, '$_domGraphicsView', 'appendChild', [rect]);
			var val;
			val = width + x + ($es4.$$get($$thisp, $$this, $$thisp, '$_strokeThickness') / 2);
			if (val > $es4.$$get($$thisp, $$this, $$thisp, '$_maxWidth'))
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_maxWidth', val, '=');
			}
			val = height + y + ($es4.$$get($$thisp, $$this, $$thisp, '$_strokeThickness') / 2);
			if (val > $es4.$$get($$thisp, $$this, $$thisp, '$_maxHeight'))
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_maxHeight', val, '=');
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_domGraphicsView', 'style', 'width', $es4.$$get($$thisp, $$this, $$thisp, '$_maxWidth') + 'px', '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_domGraphicsView', 'style', 'height', $es4.$$get($$thisp, $$this, $$thisp, '$_maxHeight') + 'px', '=');
			var scope = $es4.$$get($es4.$$call($$thisp, $$this, $$thisp, '$_displayObject', '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope');
			$es4.$$call(scope, $$this, $$thisp, '$_onChildBoundsChange', ['graphics_' + $es4.$$get(scope, $$this, $$thisp, '$_id'), ($es4.$$get($$thisp, $$this, $$thisp, '$_maxWidth') !== 0 || $es4.$$get($$thisp, $$this, $$thisp, '$_maxHeight') !== 0) ? [$es4.$$get($$thisp, $$this, $$thisp, '$_maxNegX'), $es4.$$get($$thisp, $$this, $$thisp, '$_maxNegY'), $es4.$$get($$thisp, $$this, $$thisp, '$_maxWidth'), $es4.$$get($$thisp, $$this, $$thisp, '$_maxHeight')] : null]);
		}));

		//method
		$es4.$$public_function('drawCircle', $$thisp, (function ($$$$x, $$$$y, $$$$radius)
		{
			//set default parameter values
			var x = $es4.$$coerce($$$$x, Number);
			var y = $es4.$$coerce($$$$y, Number);
			var radius = $es4.$$coerce($$$$radius, Number);

			var circle = $es4.$$call(document, $$this, $$thisp, 'createElementNS', ['http://www.w3.org/2000/svg', 'circle']);
			$es4.$$call(circle, $$this, $$thisp, 'setAttribute', ['cx', x]);
			$es4.$$call(circle, $$this, $$thisp, 'setAttribute', ['cy', y]);
			$es4.$$call(circle, $$this, $$thisp, 'setAttribute', ['r', radius]);
			$es4.$$call($$thisp, $$this, $$thisp, '$_doFillAndLine', [circle]);
			$es4.$$call($$thisp, $$this, $$thisp, '$_domGraphicsView', 'appendChild', [circle]);
			var minX = x - radius;
			var minY = y - radius;
			var maxX = radius + x;
			var maxY = radius + y;
			var xTransform = NaN;
			var yTransform = NaN;
			if (minX < $es4.$$get($$thisp, $$this, $$thisp, '$_maxNegX'))
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_maxNegX', xTransform = minX, '=');
			}
			if (minY < $es4.$$get($$thisp, $$this, $$thisp, '$_maxNegY'))
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_maxNegY', yTransform = minY, '=');
			}
			if (!isNaN(xTransform) || !isNaN(yTransform))
			{
				$es4.$$set(circle, $$this, $$thisp, 'style', $es4.$$call(Browser, $$this, $$thisp, 'getTransformString', $es4.$$EMPTY_ARRAY), 'translate3d(' + -($es4.$$get($$thisp, $$this, $$thisp, '$_maxNegX')) + 'px, ' + -($es4.$$get($$thisp, $$this, $$thisp, '$_maxNegY')) + 'px, 0px)', '=');
				$es4.$$set($$thisp, $$this, $$thisp, '$_domGraphicsView', 'style', $es4.$$call(Browser, $$this, $$thisp, 'getTransformString', $es4.$$EMPTY_ARRAY), 'translate3d(' + $es4.$$get($$thisp, $$this, $$thisp, '$_maxNegX') + 'px, ' + $es4.$$get($$thisp, $$this, $$thisp, '$_maxNegY') + 'px, 0px)', '=');
			}
			if (maxX + ($es4.$$get($$thisp, $$this, $$thisp, '$_strokeThickness') / 2) > $es4.$$get($$thisp, $$this, $$thisp, '$_maxWidth'))
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_maxWidth', maxX + ($es4.$$get($$thisp, $$this, $$thisp, '$_strokeThickness') / 2), '=');
			}
			if (maxY + ($es4.$$get($$thisp, $$this, $$thisp, '$_strokeThickness') / 2) > $es4.$$get($$thisp, $$this, $$thisp, '$_maxHeight'))
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_maxHeight', maxY + ($es4.$$get($$thisp, $$this, $$thisp, '$_strokeThickness') / 2), '=');
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_domGraphicsView', 'style', 'width', ($es4.$$get($$thisp, $$this, $$thisp, '$_maxWidth') + -($es4.$$get($$thisp, $$this, $$thisp, '$_maxNegX'))) + 'px', '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_domGraphicsView', 'style', 'height', ($es4.$$get($$thisp, $$this, $$thisp, '$_maxHeight') + -($es4.$$get($$thisp, $$this, $$thisp, '$_maxNegY'))) + 'px', '=');
			var scope = $es4.$$get($es4.$$call($$thisp, $$this, $$thisp, '$_displayObject', '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope');
			$es4.$$call(scope, $$this, $$thisp, '$_onChildBoundsChange', ['graphics_' + $es4.$$get(scope, $$this, $$thisp, '$_id'), ($es4.$$get($$thisp, $$this, $$thisp, '$_maxWidth') !== 0 || $es4.$$get($$thisp, $$this, $$thisp, '$_maxHeight') !== 0) ? [$es4.$$get($$thisp, $$this, $$thisp, '$_maxNegX'), $es4.$$get($$thisp, $$this, $$thisp, '$_maxNegY'), $es4.$$get($$thisp, $$this, $$thisp, '$_maxWidth'), $es4.$$get($$thisp, $$this, $$thisp, '$_maxHeight')] : null]);
		}));

		//method
		$es4.$$public_function('drawEllipse', $$thisp, (function ($$$$x, $$$$y, $$$$width, $$$$height)
		{
			//set default parameter values
			var x = $es4.$$coerce($$$$x, Number);
			var y = $es4.$$coerce($$$$y, Number);
			var width = $es4.$$coerce($$$$width, Number);
			var height = $es4.$$coerce($$$$height, Number);

			var ellipse = $es4.$$call(document, $$this, $$thisp, 'createElementNS', ['http://www.w3.org/2000/svg', 'ellipse']);
			$es4.$$call(ellipse, $$this, $$thisp, 'setAttribute', ['cx', x + (width / 2)]);
			$es4.$$call(ellipse, $$this, $$thisp, 'setAttribute', ['cy', y + (height / 2)]);
			$es4.$$call(ellipse, $$this, $$thisp, 'setAttribute', ['rx', width / 2]);
			$es4.$$call(ellipse, $$this, $$thisp, 'setAttribute', ['ry', height / 2]);
			$es4.$$call($$thisp, $$this, $$thisp, '$_doFillAndLine', [ellipse]);
			$es4.$$call($$thisp, $$this, $$thisp, '$_domGraphicsView', 'appendChild', [ellipse]);
			if (width + x + ($es4.$$get($$thisp, $$this, $$thisp, '$_strokeThickness') / 2) > $es4.$$get($$thisp, $$this, $$thisp, '$_maxWidth'))
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_maxWidth', width + x + ($es4.$$get($$thisp, $$this, $$thisp, '$_strokeThickness') / 2), '=');
			}
			if (height + y + ($es4.$$get($$thisp, $$this, $$thisp, '$_strokeThickness') / 2) > $es4.$$get($$thisp, $$this, $$thisp, '$_maxHeight'))
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_maxHeight', height + y + ($es4.$$get($$thisp, $$this, $$thisp, '$_strokeThickness') / 2), '=');
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_domGraphicsView', 'style', 'width', $es4.$$get($$thisp, $$this, $$thisp, '$_maxWidth') + 'px', '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_domGraphicsView', 'style', 'height', $es4.$$get($$thisp, $$this, $$thisp, '$_maxHeight') + 'px', '=');
			var scope = $es4.$$get($es4.$$call($$thisp, $$this, $$thisp, '$_displayObject', '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope');
			$es4.$$call(scope, $$this, $$thisp, '$_onChildBoundsChange', ['graphics_' + $es4.$$get(scope, $$this, $$thisp, '$_id'), ($es4.$$get($$thisp, $$this, $$thisp, '$_maxWidth') !== 0 || $es4.$$get($$thisp, $$this, $$thisp, '$_maxHeight') !== 0) ? [$es4.$$get($$thisp, $$this, $$thisp, '$_maxNegX'), $es4.$$get($$thisp, $$this, $$thisp, '$_maxNegY'), $es4.$$get($$thisp, $$this, $$thisp, '$_maxWidth'), $es4.$$get($$thisp, $$this, $$thisp, '$_maxHeight')] : null]);
		}));

		//method
		$es4.$$public_function('drawRoundRect', $$thisp, (function ($$$$x, $$$$y, $$$$width, $$$$height, $$$$ellipseWidth, $$$$ellipseHeight)
		{
			//set default parameter values
			var x = $es4.$$coerce($$$$x, Number);
			var y = $es4.$$coerce($$$$y, Number);
			var width = $es4.$$coerce($$$$width, Number);
			var height = $es4.$$coerce($$$$height, Number);
			var ellipseWidth = $es4.$$coerce($$$$ellipseWidth, Number);
			var ellipseHeight = (5 > arguments.length - 1) ? NaN : $es4.$$coerce($$$$ellipseHeight, Number);

			if (isNaN(ellipseHeight))
			{
				ellipseHeight = ellipseWidth;
			}
			var rect = $es4.$$call(document, $$this, $$thisp, 'createElementNS', ['http://www.w3.org/2000/svg', 'rect']);
			$es4.$$call(rect, $$this, $$thisp, 'setAttribute', ['x', x]);
			$es4.$$call(rect, $$this, $$thisp, 'setAttribute', ['y', y]);
			$es4.$$call(rect, $$this, $$thisp, 'setAttribute', ['width', width]);
			$es4.$$call(rect, $$this, $$thisp, 'setAttribute', ['height', height]);
			$es4.$$call(rect, $$this, $$thisp, 'setAttribute', ['rx', ellipseWidth / 2]);
			$es4.$$call(rect, $$this, $$thisp, 'setAttribute', ['ry', ellipseHeight / 2]);
			$es4.$$call($$thisp, $$this, $$thisp, '$_doFillAndLine', [rect]);
			$es4.$$call($$thisp, $$this, $$thisp, '$_domGraphicsView', 'appendChild', [rect]);
			if (width + x + ($es4.$$get($$thisp, $$this, $$thisp, '$_strokeThickness') / 2) > $es4.$$get($$thisp, $$this, $$thisp, '$_maxWidth'))
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_maxWidth', width + x + ($es4.$$get($$thisp, $$this, $$thisp, '$_strokeThickness') / 2), '=');
			}
			if (height + y + ($es4.$$get($$thisp, $$this, $$thisp, '$_strokeThickness') / 2) > $es4.$$get($$thisp, $$this, $$thisp, '$_maxHeight'))
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_maxHeight', height + y + ($es4.$$get($$thisp, $$this, $$thisp, '$_strokeThickness') / 2), '=');
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_domGraphicsView', 'style', 'width', $es4.$$get($$thisp, $$this, $$thisp, '$_maxWidth') + 'px', '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_domGraphicsView', 'style', 'height', $es4.$$get($$thisp, $$this, $$thisp, '$_maxHeight') + 'px', '=');
			var scope = $es4.$$get($es4.$$call($$thisp, $$this, $$thisp, '$_displayObject', '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope');
			$es4.$$call(scope, $$this, $$thisp, '$_onChildBoundsChange', ['graphics_' + $es4.$$get(scope, $$this, $$thisp, '$_id'), ($es4.$$get($$thisp, $$this, $$thisp, '$_maxWidth') !== 0 || $es4.$$get($$thisp, $$this, $$thisp, '$_maxHeight') !== 0) ? [$es4.$$get($$thisp, $$this, $$thisp, '$_maxNegX'), $es4.$$get($$thisp, $$this, $$thisp, '$_maxNegY'), $es4.$$get($$thisp, $$this, $$thisp, '$_maxWidth'), $es4.$$get($$thisp, $$this, $$thisp, '$_maxHeight')] : null]);
		}));

		//method
		$es4.$$public_function('drawRoundRectComplex', $$thisp, (function ($$$$x, $$$$y, $$$$width, $$$$height, $$$$topLeftRadius, $$$$topRightRadius, $$$$bottomLeftRadius, $$$$bottomRightRadius)
		{
			//set default parameter values
			var x = $es4.$$coerce($$$$x, Number);
			var y = $es4.$$coerce($$$$y, Number);
			var width = $es4.$$coerce($$$$width, Number);
			var height = $es4.$$coerce($$$$height, Number);
			var topLeftRadius = $es4.$$coerce($$$$topLeftRadius, Number);
			var topRightRadius = $es4.$$coerce($$$$topRightRadius, Number);
			var bottomLeftRadius = $es4.$$coerce($$$$bottomLeftRadius, Number);
			var bottomRightRadius = $es4.$$coerce($$$$bottomRightRadius, Number);

			throw $es4.$$primitive(new (Error)('Graphics: attempted call to an unimplemented function "drawRoundRectComplex"'));
		}));

		//method
		$es4.$$public_function('clear', $$thisp, (function ()
		{
			$es4.$$set($$thisp, $$this, $$thisp, '$_fillType', '', '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_fillColor', 0, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_fillAlpha', 0, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_fillBitmapData', null, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_strokeThickness', 0, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_strokeColor', 0, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_strokeAlpha', 0, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_strokePixelHinting', false, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_strokeScaleMode', '', '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_strokeCaps', '', '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_strokeJoints', '', '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_strokeMiterLimit', 0, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_maxNegX', $es4.$$set($$thisp, $$this, $$thisp, '$_maxNegY', 0, '='), '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_maxWidth', $es4.$$set($$thisp, $$this, $$thisp, '$_maxHeight', 0, '='), '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_domGraphicsView', 'style', 'width', '0px', '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_domGraphicsView', 'style', 'height', '0px', '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_domGraphicsView', 'style', 'transform', 'translate3d(0px, 0px, 0px)', '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_domPathView', null, '=');
			var scope = $es4.$$get($es4.$$call($$thisp, $$this, $$thisp, '$_displayObject', '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope');
			$es4.$$call(scope, $$this, $$thisp, '$_onChildBoundsChange', ['graphics_' + $es4.$$get(scope, $$this, $$thisp, '$_id'), null]);
			var interactiveObject = $es4.$$as($es4.$$get($$thisp, $$this, $$thisp, '$_displayObject'), InteractiveObject);
			var childNode;
			var i;
			if (interactiveObject)
			{
				if ($es4.$$get(window, $$this, $$thisp, 'mobile'))
				{
					if ($es4.$$get($es4.$$call(interactiveObject, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'InteractiveObjectScope', '$_onMouseUp') && !$es4.$$get(Graphics, $$this, $$thisp, '$_objects'))
					{
						$es4.$$set(Graphics, $$this, $$thisp, '$_objects', [], '=');
					}
					else if (!$es4.$$get($es4.$$call(interactiveObject, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'InteractiveObjectScope', '$_onMouseUp') && $es4.$$get(Graphics, $$this, $$thisp, '$_objects'))
					{
						for (i = $es4.$$get(Graphics, $$this, $$thisp, '$_objects', 'length'); i--;)
						{
							var object = $es4.$$get(Graphics, $$this, $$thisp, '$_objects', i);
							$es4.$$call(object, $$this, $$thisp, 'removeEventListener', ['touchend', $es4.$$get($$thisp, $$this, $$thisp, 'onMouseUp'), false]);
							$es4.$$call(object, $$this, $$thisp, 'removeEventListener', ['touchmove', $es4.$$get($$thisp, $$this, $$thisp, 'onMouseMove'), false]);
						}
						$es4.$$set(Graphics, $$this, $$thisp, '$_objects', null, '=');
					}
					while ($es4.$$get($$thisp, $$this, $$thisp, '$_domGraphicsView', 'childElementCount'))
					{
						childNode = $es4.$$get($$thisp, $$this, $$thisp, '$_domGraphicsView', 'childNodes', 0);
						if ($es4.$$get(Graphics, $$this, $$thisp, '$_objects'))
						{
							$es4.$$call(Graphics, $$this, $$thisp, '$_objects', 'push', [childNode]);
							$es4.$$call(childNode, $$this, $$thisp, 'addEventListener', ['touchend', $es4.$$get($$thisp, $$this, $$thisp, 'onMouseUp'), false]);
							$es4.$$call(childNode, $$this, $$thisp, 'addEventListener', ['touchmove', $es4.$$get($$thisp, $$this, $$thisp, 'onMouseMove'), false]);
						}
						$es4.$$call($$thisp, $$this, $$thisp, '$_domGraphicsView', 'removeChild', [childNode]);
					}
				}
				else
				{
					if ($es4.$$get($es4.$$call(interactiveObject, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'InteractiveObjectScope', '$_onMouseOut') && !$es4.$$get(Graphics, $$this, $$thisp, '$_objects'))
					{
						$es4.$$set(Graphics, $$this, $$thisp, '$_objects', [], '=');
					}
					else if (!$es4.$$get($es4.$$call(interactiveObject, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'InteractiveObjectScope', '$_onMouseOut') && $es4.$$get(Graphics, $$this, $$thisp, '$_objects'))
					{
						for (i = $es4.$$get(Graphics, $$this, $$thisp, '$_objects', 'length'); i--;)
						{
							$es4.$$call(Graphics, $$this, $$thisp, '$_objects', i, 'removeEventListener', ['mouseout', $es4.$$get($$thisp, $$this, $$thisp, 'onMouseOut'), false]);
						}
						for (i = $es4.$$get(Graphics, $$this, $$thisp, '$_objects', 'length'); i--;)
						{
							if ($es4.$$get(Graphics, $$this, $$thisp, '$_objects', i, 'parentNode'))
							{
								$es4.$$call(Graphics, $$this, $$thisp, '$_objects', i, 'parentNode', 'removeChild', [$es4.$$get(Graphics, $$this, $$thisp, '$_objects', i)]);
							}
						}
						$es4.$$set(Graphics, $$this, $$thisp, '$_objects', null, '=');
					}
					for (i = $es4.$$get($$thisp, $$this, $$thisp, '$_domGraphicsView', 'childElementCount'); i--;)
					{
						childNode = $es4.$$get($$thisp, $$this, $$thisp, '$_domGraphicsView', 'childNodes', i);
						if ($es4.$$get(Graphics, $$this, $$thisp, '$_objects'))
						{
							$es4.$$call(Graphics, $$this, $$thisp, '$_objects', 'push', [childNode]);
							$es4.$$call(childNode, $$this, $$thisp, 'addEventListener', ['mouseout', $es4.$$get($$thisp, $$this, $$thisp, 'onMouseOut'), false]);
							$es4.$$call(childNode, $$this, $$thisp, 'addEventListener', ['mouseup', $es4.$$get($$thisp, $$this, $$thisp, 'onMouseOut'), false]);
						}
						$es4.$$set(childNode, $$this, $$thisp, 'style', 'opacity', 0, '=');
					}
				}
			}
			else
			{
				for (i = $es4.$$get($$thisp, $$this, $$thisp, '$_domGraphicsView', 'childElementCount'); i--;)
				{
					childNode = $es4.$$get($$thisp, $$this, $$thisp, '$_domGraphicsView', 'childNodes', i);
					$es4.$$call($$thisp, $$this, $$thisp, '$_domGraphicsView', 'removeChild', [childNode]);
				}
			}
		}));

		//method
		$es4.$$private_function('onMouseUp', $$thisp, (function ($$$$event)
		{
			//set default parameter values
			var event = $es4.$$coerce($$$$event, Object);

			if (!$es4.$$get(Graphics, $$this, $$thisp, '$_objects'))
			{
				return;
			}
			for (var i = $es4.$$get(Graphics, $$this, $$thisp, '$_objects', 'length'); i--;)
			{
				var object = $es4.$$get(Graphics, $$this, $$thisp, '$_objects', i);
				$es4.$$call(object, $$this, $$thisp, 'removeEventListener', ['touchend', $es4.$$get($$thisp, $$this, $$thisp, 'onMouseUp'), false]);
				$es4.$$call(object, $$this, $$thisp, 'removeEventListener', ['touchmove', $es4.$$get($$thisp, $$this, $$thisp, 'onMouseMove'), false]);
			}
			$es4.$$set(Graphics, $$this, $$thisp, '$_objects', null, '=');
			$es4.$$call($es4.$$call(($es4.$$as($es4.$$get($$thisp, $$this, $$thisp, '$_displayObject'), InteractiveObject)), $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'InteractiveObjectScope', '$_onMouseUp', [event]);
		}));

		//method
		$es4.$$private_function('onMouseMove', $$thisp, (function ($$$$event)
		{
			//set default parameter values
			var event = $es4.$$coerce($$$$event, Object);

			var interactiveObject = $es4.$$as($es4.$$get($$thisp, $$this, $$thisp, '$_displayObject'), InteractiveObject);
			var stage = $es4.$$get(interactiveObject, $$this, $$thisp, 'stage');
			if (stage)
			{
				$es4.$$set(Stage, $$this, $$thisp, '$__pageX', $es4.$$get(event, $$this, $$thisp, 'touches', 0, 'pageX'), '=');
				$es4.$$set(Stage, $$this, $$thisp, '$__pageY', $es4.$$get(event, $$this, $$thisp, 'touches', 0, 'pageY'), '=');
				$es4.$$call($es4.$$call(stage, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'InteractiveObjectScope', '$_onMouseMove', [event]);
			}
		}));

		//method
		$es4.$$private_function('onMouseOut', $$thisp, (function ($$$$event)
		{
			//set default parameter values
			var event = $es4.$$coerce($$$$event, Object);

			if (!$es4.$$get(Graphics, $$this, $$thisp, '$_objects'))
			{
				return;
			}
			var i;
			for (i = $es4.$$get(Graphics, $$this, $$thisp, '$_objects', 'length'); i--;)
			{
				$es4.$$call(Graphics, $$this, $$thisp, '$_objects', i, 'removeEventListener', ['mouseout', $es4.$$get($$thisp, $$this, $$thisp, 'onMouseOut'), false]);
				$es4.$$call(Graphics, $$this, $$thisp, '$_objects', i, 'removeEventListener', ['mouseup', $es4.$$get($$thisp, $$this, $$thisp, 'onMouseOut'), false]);
			}
			for (i = $es4.$$get(Graphics, $$this, $$thisp, '$_objects', 'length'); i--;)
			{
				if ($es4.$$get(Graphics, $$this, $$thisp, '$_objects', i, 'parentNode'))
				{
					$es4.$$call(Graphics, $$this, $$thisp, '$_objects', i, 'parentNode', 'removeChild', [$es4.$$get(Graphics, $$this, $$thisp, '$_objects', i)]);
				}
			}
			$es4.$$set(Graphics, $$this, $$thisp, '$_objects', null, '=');
			var onMouseOut = $es4.$$coerce($es4.$$get($es4.$$call(($es4.$$as($es4.$$get($$thisp, $$this, $$thisp, '$_displayObject'), InteractiveObject)), $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'InteractiveObjectScope', '$_onMouseOut'), Function);
			if (onMouseOut != null)
			{
				onMouseOut(event);
			}
		}));

		//method
		$es4.$$public_function('endFill', $$thisp, (function ()
		{
		}));

		//method
		$es4.$$public_function('lineStyle', $$thisp, (function ($$$$thickness, $$$$color, $$$$alpha, $$$$pixelHinting, $$$$scaleMode, $$$$caps, $$$$joints, $$$$miterLimit)
		{
			//set default parameter values
			var thickness = (0 > arguments.length - 1) ? NaN : $es4.$$coerce($$$$thickness, Number);
			var color = (1 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$color, uint);
			var alpha = (2 > arguments.length - 1) ? 1 : $es4.$$coerce($$$$alpha, Number);
			var pixelHinting = (3 > arguments.length - 1) ? false : $es4.$$coerce($$$$pixelHinting, Boolean);
			var scaleMode = (4 > arguments.length - 1) ? "normal" : $es4.$$coerce($$$$scaleMode, String);
			var caps = (5 > arguments.length - 1) ? null : $es4.$$coerce($$$$caps, String);
			var joints = (6 > arguments.length - 1) ? null : $es4.$$coerce($$$$joints, String);
			var miterLimit = (7 > arguments.length - 1) ? 3 : $es4.$$coerce($$$$miterLimit, Number);

			$es4.$$set($$thisp, $$this, $$thisp, '$_strokeThickness', thickness, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_strokeColor', color, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_strokeAlpha', alpha, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_strokePixelHinting', pixelHinting, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_strokeScaleMode', scaleMode, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_strokeCaps', caps, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_strokeJoints', joints, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_strokeMiterLimit', miterLimit, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_domPathView', $es4.$$call(document, $$this, $$thisp, 'createElementNS', ['http://www.w3.org/2000/svg', 'path']), '=');
			$es4.$$call($$thisp, $$this, $$thisp, '$_domGraphicsView', 'appendChild', [$es4.$$get($$thisp, $$this, $$thisp, '$_domPathView')]);
		}));

		//method
		$es4.$$public_function('moveTo', $$thisp, (function ($$$$x, $$$$y)
		{
			//set default parameter values
			var x = $es4.$$coerce($$$$x, Number);
			var y = $es4.$$coerce($$$$y, Number);

			if (!$es4.$$get($$thisp, $$this, $$thisp, '$_domPathView'))
			{
				$es4.$$call($$this, $$this, $$thisp, 'lineStyle', [0]);
			}
			var d = $es4.$$coerce(($es4.$$call($$thisp, $$this, $$thisp, '$_domPathView', 'getAttribute', ['d'])) ? $es4.$$call($$thisp, $$this, $$thisp, '$_domPathView', 'getAttribute', ['d']) : '', String);
			$es4.$$call($$thisp, $$this, $$thisp, '$_domPathView', 'setAttribute', ['d', d + ' M ' + x + ',' + y]);
			$es4.$$call($$thisp, $$this, $$thisp, '$_doFillAndLine', [$es4.$$get($$thisp, $$this, $$thisp, '$_domPathView')]);
		}));

		//method
		$es4.$$public_function('lineTo', $$thisp, (function ($$$$x, $$$$y)
		{
			//set default parameter values
			var x = $es4.$$coerce($$$$x, Number);
			var y = $es4.$$coerce($$$$y, Number);

			var d = $es4.$$coerce(($es4.$$call($$thisp, $$this, $$thisp, '$_domPathView', 'getAttribute', ['d'])) ? $es4.$$call($$thisp, $$this, $$thisp, '$_domPathView', 'getAttribute', ['d']) : '', String);
			$es4.$$call($$thisp, $$this, $$thisp, '$_domPathView', 'setAttribute', ['d', d + ' L ' + x + ',' + y]);
			$es4.$$call($$thisp, $$this, $$thisp, '$_doFillAndLine', [$es4.$$get($$thisp, $$this, $$thisp, '$_domPathView')]);
			var xTransform = NaN;
			var yTransform = NaN;
			if (x < $es4.$$get($$thisp, $$this, $$thisp, '$_maxNegX'))
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_maxNegX', xTransform = x, '=');
			}
			if (y < $es4.$$get($$thisp, $$this, $$thisp, '$_maxNegY'))
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_maxNegY', yTransform = y, '=');
			}
			if (!isNaN(xTransform) || !isNaN(yTransform))
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_domPathView', 'style', $es4.$$call(Browser, $$this, $$thisp, 'getTransformString', $es4.$$EMPTY_ARRAY), 'translate3d(' + -($es4.$$get($$thisp, $$this, $$thisp, '$_maxNegX')) + 'px, ' + -($es4.$$get($$thisp, $$this, $$thisp, '$_maxNegY')) + 'px, 0px)', '=');
				$es4.$$set($$thisp, $$this, $$thisp, '$_domGraphicsView', 'style', $es4.$$call(Browser, $$this, $$thisp, 'getTransformString', $es4.$$EMPTY_ARRAY), 'translate3d(' + $es4.$$get($$thisp, $$this, $$thisp, '$_maxNegX') + 'px, ' + $es4.$$get($$thisp, $$this, $$thisp, '$_maxNegY') + 'px, 0px)', '=');
			}
			if (x < 0)
			{
				x = 0;
			}
			if (y < 0)
			{
				y = 0;
			}
			if (x + ($es4.$$get($$thisp, $$this, $$thisp, '$_strokeThickness') / 2) > $es4.$$get($$thisp, $$this, $$thisp, '$_maxWidth'))
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_maxWidth', x + ($es4.$$get($$thisp, $$this, $$thisp, '$_strokeThickness') / 2), '=');
			}
			if (y + ($es4.$$get($$thisp, $$this, $$thisp, '$_strokeThickness') / 2) > $es4.$$get($$thisp, $$this, $$thisp, '$_maxHeight'))
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_maxHeight', y + ($es4.$$get($$thisp, $$this, $$thisp, '$_strokeThickness') / 2), '=');
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_domGraphicsView', 'style', 'width', ($es4.$$get($$thisp, $$this, $$thisp, '$_maxWidth') + -($es4.$$get($$thisp, $$this, $$thisp, '$_maxNegX'))) + 'px', '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_domGraphicsView', 'style', 'height', ($es4.$$get($$thisp, $$this, $$thisp, '$_maxHeight') + -($es4.$$get($$thisp, $$this, $$thisp, '$_maxNegY'))) + 'px', '=');
			var scope = $es4.$$get($es4.$$call($$thisp, $$this, $$thisp, '$_displayObject', '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope');
			$es4.$$call(scope, $$this, $$thisp, '$_onChildBoundsChange', ['graphics_' + $es4.$$get(scope, $$this, $$thisp, '$_id'), ($es4.$$get($$thisp, $$this, $$thisp, '$_maxWidth') !== 0 || $es4.$$get($$thisp, $$this, $$thisp, '$_maxHeight') !== 0) ? [$es4.$$get($$thisp, $$this, $$thisp, '$_maxNegX'), $es4.$$get($$thisp, $$this, $$thisp, '$_maxNegY'), $es4.$$get($$thisp, $$this, $$thisp, '$_maxWidth'), $es4.$$get($$thisp, $$this, $$thisp, '$_maxHeight')] : null]);
		}));

		//method
		$es4.$$public_function('curveTo', $$thisp, (function ($$$$controlX, $$$$controlY, $$$$anchorX, $$$$anchorY)
		{
			//set default parameter values
			var controlX = $es4.$$coerce($$$$controlX, Number);
			var controlY = $es4.$$coerce($$$$controlY, Number);
			var anchorX = $es4.$$coerce($$$$anchorX, Number);
			var anchorY = $es4.$$coerce($$$$anchorY, Number);

			var d = $es4.$$coerce(($es4.$$call($$thisp, $$this, $$thisp, '$_domPathView', 'getAttribute', ['d'])) ? $es4.$$call($$thisp, $$this, $$thisp, '$_domPathView', 'getAttribute', ['d']) : '', String);
			$es4.$$call($$thisp, $$this, $$thisp, '$_domPathView', 'setAttribute', ['d', d + ' Q ' + controlX + ',' + controlY + ', ' + anchorX + ',' + anchorY]);
			$es4.$$call($$thisp, $$this, $$thisp, '$_doFillAndLine', [$es4.$$get($$thisp, $$this, $$thisp, '$_domPathView')]);
		}));

		//method
		$es4.$$public_function('beginBitmapFill', $$thisp, (function ($$$$bitmapData, $$$$matrix, $$$$repeat, $$$$smooth)
		{
			//set default parameter values
			var bitmapData = $es4.$$coerce($$$$bitmapData, BitmapData);
			var matrix = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$matrix, Matrix);
			var repeat = (2 > arguments.length - 1) ? true : $es4.$$coerce($$$$repeat, Boolean);
			var smooth = (3 > arguments.length - 1) ? false : $es4.$$coerce($$$$smooth, Boolean);

			$es4.$$set($$thisp, $$this, $$thisp, '$_fillType', 'beginBitmapFill', '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_fillBitmapData', '__' + ($es4.$$set(Graphics, $$this, $$thisp, '$_uniqueIDCounter', 'postfix', '++')) + '_GraphicsID__', '=');
			var defs = $es4.$$call(document, $$this, $$thisp, 'createElementNS', ['http://www.w3.org/2000/svg', 'defs']);
			var pattern = $es4.$$call(document, $$this, $$thisp, 'createElementNS', ['http://www.w3.org/2000/svg', 'pattern']);
			var image = $es4.$$call(document, $$this, $$thisp, 'createElementNS', ['http://www.w3.org/2000/svg', 'image']);
			$es4.$$call(pattern, $$this, $$thisp, 'setAttribute', ['id', $es4.$$get($$thisp, $$this, $$thisp, '$_fillBitmapData')]);
			$es4.$$call(pattern, $$this, $$thisp, 'setAttribute', ['patternUnits', 'userSpaceOnUse']);
			$es4.$$call(pattern, $$this, $$thisp, 'setAttribute', ['width', $es4.$$get(bitmapData, $$this, $$thisp, 'width')]);
			$es4.$$call(pattern, $$this, $$thisp, 'setAttribute', ['height', $es4.$$get(bitmapData, $$this, $$thisp, 'height')]);
			var canvas = $es4.$$call($es4.$$call(bitmapData, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'BitmapDataScope', '$_createOrGetCanvas', [bitmapData]);
			var dataURL = $es4.$$coerce($es4.$$call(canvas, $$this, $$thisp, 'toDataURL', $es4.$$EMPTY_ARRAY), String);
			$es4.$$call(image, $$this, $$thisp, 'setAttributeNS', ['http://www.w3.org/1999/xlink', 'href', dataURL]);
			$es4.$$call(image, $$this, $$thisp, 'setAttribute', ['x', 0]);
			$es4.$$call(image, $$this, $$thisp, 'setAttribute', ['y', 0]);
			$es4.$$call(image, $$this, $$thisp, 'setAttribute', ['width', $es4.$$get(bitmapData, $$this, $$thisp, 'width')]);
			$es4.$$call(image, $$this, $$thisp, 'setAttribute', ['height', $es4.$$get(bitmapData, $$this, $$thisp, 'height')]);
			$es4.$$call(pattern, $$this, $$thisp, 'appendChild', [image]);
			$es4.$$call(defs, $$this, $$thisp, 'appendChild', [pattern]);
			$es4.$$call($$thisp, $$this, $$thisp, '$_domGraphicsView', 'appendChild', [defs]);
			var scope = $es4.$$get($es4.$$call($$thisp, $$this, $$thisp, '$_displayObject', '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope');
			$es4.$$call(scope, $$this, $$thisp, '$_onChildBoundsChange', ['graphics_' + $es4.$$get(scope, $$this, $$thisp, '$_id'), ($es4.$$get($$thisp, $$this, $$thisp, '$_maxWidth') !== 0 || $es4.$$get($$thisp, $$this, $$thisp, '$_maxHeight') !== 0) ? [$es4.$$get($$thisp, $$this, $$thisp, '$_maxNegX'), $es4.$$get($$thisp, $$this, $$thisp, '$_maxNegY'), $es4.$$get($$thisp, $$this, $$thisp, '$_maxWidth'), $es4.$$get($$thisp, $$this, $$thisp, '$_maxHeight')] : null]);
		}));

		//method
		$es4.$$public_function('beginGradientFill', $$thisp, (function ($$$$type, $$$$colors, $$$$alphas, $$$$ratios, $$$$matrix, $$$$spreadMethod, $$$$interpolationMethod, $$$$focalPointRatio)
		{
			//set default parameter values
			var type = $es4.$$coerce($$$$type, String);
			var colors = $es4.$$coerce($$$$colors, Array);
			var alphas = $es4.$$coerce($$$$alphas, Array);
			var ratios = $es4.$$coerce($$$$ratios, Array);
			var matrix = (4 > arguments.length - 1) ? null : $es4.$$coerce($$$$matrix, Matrix);
			var spreadMethod = (5 > arguments.length - 1) ? "pad" : $es4.$$coerce($$$$spreadMethod, String);
			var interpolationMethod = (6 > arguments.length - 1) ? "rgb" : $es4.$$coerce($$$$interpolationMethod, String);
			var focalPointRatio = (7 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$focalPointRatio, Number);

			throw $es4.$$primitive(new (Error)('Graphics: attempted call to an unimplemented function "beginGradientFill"'));
		}));

		//method
		$es4.$$public_function('beginShaderFill', $$thisp, (function ($$$$shader, $$$$matrix)
		{
			//set default parameter values
			var shader = $es4.$$coerce($$$$shader, Shader);
			var matrix = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$matrix, Matrix);

			throw $es4.$$primitive(new (Error)('Graphics: attempted call to an unimplemented function "beginShaderFill"'));
		}));

		//method
		$es4.$$public_function('copyFrom', $$thisp, (function ($$$$sourceGraphics)
		{
			//set default parameter values
			var sourceGraphics = $es4.$$coerce($$$$sourceGraphics, $es4.$$['flash.display'].Graphics);

			throw $es4.$$primitive(new (Error)('Graphics: attempted call to an unimplemented function "copyFrom"'));
		}));

		//method
		$es4.$$public_function('drawGraphicsData', $$thisp, (function ($$$$graphicsData)
		{
			//set default parameter values
			var graphicsData = $es4.$$coerce($$$$graphicsData, Array);

			throw $es4.$$primitive(new (Error)('Graphics: attempted call to an unimplemented function "drawGraphicsData"'));
		}));

		//method
		$es4.$$public_function('drawPath', $$thisp, (function ($$$$commands, $$$$data, $$$$winding)
		{
			//set default parameter values
			var commands = $es4.$$coerce($$$$commands, Array);
			var data = $es4.$$coerce($$$$data, Array);
			var winding = (2 > arguments.length - 1) ? "evenOdd" : $es4.$$coerce($$$$winding, String);

			throw $es4.$$primitive(new (Error)('Graphics: attempted call to an unimplemented function "drawPath"'));
		}));

		//method
		$es4.$$public_function('drawTriangles', $$thisp, (function ($$$$vertices, $$$$indices, $$$$uvtData, $$$$culling)
		{
			//set default parameter values
			var vertices = $es4.$$coerce($$$$vertices, Array);
			var indices = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$indices, Array);
			var uvtData = (2 > arguments.length - 1) ? null : $es4.$$coerce($$$$uvtData, Array);
			var culling = (3 > arguments.length - 1) ? "none" : $es4.$$coerce($$$$culling, String);

			throw $es4.$$primitive(new (Error)('Graphics: attempted call to an unimplemented function "drawTriangles"'));
		}));

		//method
		$es4.$$public_function('lineBitmapStyle', $$thisp, (function ($$$$bitmap, $$$$matrix, $$$$repeat, $$$$smooth)
		{
			//set default parameter values
			var bitmap = $es4.$$coerce($$$$bitmap, BitmapData);
			var matrix = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$matrix, Matrix);
			var repeat = (2 > arguments.length - 1) ? true : $es4.$$coerce($$$$repeat, Boolean);
			var smooth = (3 > arguments.length - 1) ? false : $es4.$$coerce($$$$smooth, Boolean);

			throw $es4.$$primitive(new (Error)('Graphics: attempted call to an unimplemented function "lineBitmapStyle"'));
		}));

		//method
		$es4.$$public_function('lineGradientStyle', $$thisp, (function ($$$$type, $$$$colors, $$$$alphas, $$$$ratios, $$$$matrix, $$$$spreadMethod, $$$$interpolationMethod, $$$$focalPointRatio)
		{
			//set default parameter values
			var type = $es4.$$coerce($$$$type, String);
			var colors = $es4.$$coerce($$$$colors, Array);
			var alphas = $es4.$$coerce($$$$alphas, Array);
			var ratios = $es4.$$coerce($$$$ratios, Array);
			var matrix = (4 > arguments.length - 1) ? null : $es4.$$coerce($$$$matrix, Matrix);
			var spreadMethod = (5 > arguments.length - 1) ? "pad" : $es4.$$coerce($$$$spreadMethod, String);
			var interpolationMethod = (6 > arguments.length - 1) ? "rgb" : $es4.$$coerce($$$$interpolationMethod, String);
			var focalPointRatio = (7 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$focalPointRatio, Number);

			throw $es4.$$primitive(new (Error)('Graphics: attempted call to an unimplemented function "lineGradientStyle"'));
		}));

		//method
		$es4.$$public_function('lineShaderStyle', $$thisp, (function ($$$$shader, $$$$matrix)
		{
			//set default parameter values
			var shader = $es4.$$coerce($$$$shader, Shader);
			var matrix = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$matrix, Matrix);

			throw $es4.$$primitive(new (Error)('Graphics: attempted call to an unimplemented function "lineShaderStyle"'));
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(Graphics, null, 'flash.display::Graphics');
})();
//flash.display.Graphics


//flash.events.GestureEvent
$es4.$$package('flash.events').GestureEvent = function () { throw new Error('Use of unimplemented class: GestureEvent'); }
//flash.events.GestureEvent


//flash.display.SpreadMethod
$es4.$$package('flash.display').SpreadMethod = function () { throw new Error('Use of unimplemented class: SpreadMethod'); }
//flash.display.SpreadMethod


//flash.text.TextLineMetrics
$es4.$$package('flash.text').TextLineMetrics = function () { throw new Error('Use of unimplemented class: TextLineMetrics'); }
//flash.text.TextLineMetrics


//flash.globalization.NationalDigitsType
$es4.$$package('flash.globalization').NationalDigitsType = function () { throw new Error('Use of unimplemented class: NationalDigitsType'); }
//flash.globalization.NationalDigitsType


//flash.text.engine.GroupElement
$es4.$$package('flash.text.engine').GroupElement = function () { throw new Error('Use of unimplemented class: GroupElement'); }
//flash.text.engine.GroupElement


//flash.text.FontStyle
$es4.$$package('flash.text').FontStyle = (function ()
{
	//properties
	FontStyle.BOLD = "bold";
	FontStyle.BOLD_ITALIC = "boldItalic";
	FontStyle.ITALIC = "italic";
	FontStyle.REGULAR = "regular";

	//class initializer
	FontStyle.$$cinit = (function ()
	{
		FontStyle.$$cinit = undefined;

	});

	function FontStyle()
	{
		//initialize class if not initialized
		if (FontStyle.$$cinit !== undefined) FontStyle.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof FontStyle) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], FontStyle) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(FontStyle, null, 'flash.text::FontStyle');
})();
//flash.text.FontStyle


//flash.globalization.LocaleID
$es4.$$package('flash.globalization').LocaleID = function () { throw new Error('Use of unimplemented class: LocaleID'); }
//flash.globalization.LocaleID


//flash.text.engine.TextLineCreationResult
$es4.$$package('flash.text.engine').TextLineCreationResult = function () { throw new Error('Use of unimplemented class: TextLineCreationResult'); }
//flash.text.engine.TextLineCreationResult


//flash.text.AntiAliasType
$es4.$$package('flash.text').AntiAliasType = (function ()
{
	//properties
	AntiAliasType.ADVANCED = "advanced";
	AntiAliasType.NORMAL = "normal";

	//class initializer
	AntiAliasType.$$cinit = (function ()
	{
		AntiAliasType.$$cinit = undefined;

	});

	function AntiAliasType()
	{
		//initialize class if not initialized
		if (AntiAliasType.$$cinit !== undefined) AntiAliasType.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof AntiAliasType) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], AntiAliasType) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(AntiAliasType, null, 'flash.text::AntiAliasType');
})();
//flash.text.AntiAliasType


//flash.utils.CompressionAlgorithm
$es4.$$package('flash.utils').CompressionAlgorithm = function () { throw new Error('Use of unimplemented class: CompressionAlgorithm'); }
//flash.utils.CompressionAlgorithm


//browser.Browser
$es4.$$package('browser').Browser = (function ()
{
	//imports
	var Sprite;
	var ByteArray;
	var Browser;

	//properties
	$es4.$$private_property('$_transformOriginString', Browser, String);
	$es4.$$private_property('$_transformString', Browser, String);
	$es4.$$private_property('$_backfaceVisibilityString', Browser, String);

	//class initializer
	Browser.$$cinit = (function ()
	{
		Browser.$$cinit = undefined;

		//initialize imports
		Sprite = $es4.$$['flash.display'].Sprite;
		ByteArray = $es4.$$['flash.utils'].ByteArray;
	});

	//method
	$es4.$$public_function('doEval', Browser, (function ($$$$js)
	{
		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		//set default parameter values
		var js = $es4.$$coerce($$$$js, String);

		var object = ($es4.$$get(window, null, null, 'execScript')) ? $es4.$$call(window, null, null, 'execScript', [js]) : $es4.$$call(window, null, null, 'eval', 'call', [window, js]);
		if (object)
		{
			$es4.$$call($es4, null, null, '$$construct', [object, []]);
		}
		else
		{
			object = $es4.$$primitive(new (Sprite)());
		}
		return $es4.$$coerce(object, Sprite);
	}));

	//method
	$es4.$$public_function('getWindow', Browser, (function ()
	{
		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		return window;
	}));

	//method
	$es4.$$public_function('domParseXML', Browser, (function ($$$$textValue)
	{
		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		//set default parameter values
		var textValue = $es4.$$coerce($$$$textValue, String);

		return $es4.$$call($es4.$$primitive(new ($es4.$$get(window, null, null, 'DOMParser'))()), null, null, 'parseFromString', [textValue, 'text/xml']);
	}));

	//method
	$es4.$$public_function('getNewAudio', Browser, (function ()
	{
		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		if ($es4.$$get(window, null, null, 'audios') && $es4.$$get(window, null, null, 'audios', 'length'))
		{
			return $es4.$$call(window, null, null, 'audios', 'pop', $es4.$$EMPTY_ARRAY);
		}
		return $es4.$$call(document, null, null, 'createElement', ['audio']);
	}));

	//method
	$es4.$$public_function('getNewAudioContext', Browser, (function ()
	{
		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		var audioContext;
		if ($es4.$$get(window, null, null, 'audioContexts') && $es4.$$get(window, null, null, 'audioContexts', 'length'))
		{
			audioContext = $es4.$$get(window, null, null, 'audioContexts', 0);
		}
		else if (!$es4.$$get(window, null, null, 'mobile'))
		{
			$es4.$$set(window, null, null, 'audioContexts', [], '=');
			try
			{
				audioContext = $es4.$$set(window, null, null, 'audioContexts', 0, $es4.$$primitive(new (($es4.$$get(window, null, null, 'webkitAudioContext') !== undefined ? $es4.$$get(window, null, null, 'webkitAudioContext') : $es4.$$get(window, null, null, 'AudioContext')))()), '=');
			}
			catch (error)
			{
				trace('failed to create audio context: ' + error);
			}
		}
		if (audioContext && $es4.$$get(audioContext, null, null, 'state') !== undefined && $es4.$$get(audioContext, null, null, 'state') != 'running' && $es4.$$get(window, null, null, 'mobile'))
		{
			trace('invalid audioContext state: ' + $es4.$$get(audioContext, null, null, 'state'));
			if ($es4.$$get(audioContext, null, null, 'close') !== undefined)
			{
				$es4.$$call(audioContext, null, null, 'close', $es4.$$EMPTY_ARRAY);
			}
			$es4.$$set(window, null, null, 'audioContexts', [], '=');
			return null;
		}
		return audioContext;
	}));

	//method
	$es4.$$public_function('getNewVideo', Browser, (function ()
	{
		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		if ($es4.$$get(window, null, null, 'videos') && $es4.$$get(window, null, null, 'videos', 'length'))
		{
			return $es4.$$call(window, null, null, 'videos', 'pop', $es4.$$EMPTY_ARRAY);
		}
		var video = $es4.$$call(document, null, null, 'createElement', ['video']);
		$es4.$$call(video, null, null, 'setAttribute', ['webkit-playsinline', '']);
		$es4.$$call(video, null, null, 'setAttribute', ['preload', 'auto']);
		$es4.$$set(video, null, null, 'style', 'objectFit', $es4.$$set(video, null, null, 'style', 'imageFit', 'fill', '='), '=');
		return video;
	}));

	//method
	$es4.$$public_function('getDisplayObjectElement', Browser, (function ($$$$displayObject)
	{
		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		//set default parameter values
		var displayObject = $$$$displayObject;

		return $es4.$$get($es4.$$call(displayObject, null, null, '$__properties', $es4.$$EMPTY_ARRAY), null, null, 'DisplayObjectScope', '$_domView');
	}));

	//method
	$es4.$$public_function('getNewUint8Array', Browser, (function ($$$$value)
	{
		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		//set default parameter values
		var value = $$$$value;

		return $es4.$$primitive(new ($es4.$$get(window, null, null, 'Uint8Array'))(value));
	}));

	//method
	$es4.$$public_function('getTransformOriginString', Browser, (function ()
	{
		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		if ($es4.$$get(Browser, null, null, '$_transformOriginString'))
		{
			return $es4.$$get(Browser, null, null, '$_transformOriginString');
		}
		var transformString = null;
		if ($es4.$$get(document, null, null, 'body', 'style', 'transformOrigin') !== undefined)
		{
			transformString = 'transformOrigin';
		}
		else if ($es4.$$get(document, null, null, 'body', 'style', 'webkitTransformOrigin') !== undefined)
		{
			transformString = 'webkitTransformOrigin';
		}
		else if ($es4.$$get(document, null, null, 'body', 'style', 'mozTransformOrigin') !== undefined)
		{
			transformString = 'mozTransformOrigin';
		}
		else if ($es4.$$get(document, null, null, 'body', 'style', 'msTransformOrigin') !== undefined)
		{
			transformString = 'msTransformOrigin';
		}
		else if ($es4.$$get(document, null, null, 'body', 'style', 'oTransformOrigin') !== undefined)
		{
			transformString = 'oTransformOrigin';
		}
		return $es4.$$set(Browser, null, null, '$_transformOriginString', transformString, '=');
	}));

	//method
	$es4.$$public_function('getTransformString', Browser, (function ()
	{
		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		if ($es4.$$get(Browser, null, null, '$_transformString'))
		{
			return $es4.$$get(Browser, null, null, '$_transformString');
		}
		var transformString = null;
		if ($es4.$$get(document, null, null, 'body', 'style', 'transform') !== undefined)
		{
			transformString = 'transform';
		}
		else if ($es4.$$get(document, null, null, 'body', 'style', 'webkitTransform') !== undefined)
		{
			transformString = 'webkitTransform';
		}
		else if ($es4.$$get(document, null, null, 'body', 'style', 'mozTransform') !== undefined)
		{
			transformString = 'mozTransform';
		}
		else if ($es4.$$get(document, null, null, 'body', 'style', 'msTransform') !== undefined)
		{
			transformString = 'msTransform';
		}
		else if ($es4.$$get(document, null, null, 'body', 'style', 'oTransform') !== undefined)
		{
			transformString = 'oTransform';
		}
		return $es4.$$set(Browser, null, null, '$_transformString', transformString, '=');
	}));

	//method
	$es4.$$public_function('getBackfaceVisibilityString', Browser, (function ()
	{
		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		if ($es4.$$get(Browser, null, null, '$_backfaceVisibilityString'))
		{
			return $es4.$$get(Browser, null, null, '$_backfaceVisibilityString');
		}
		var backfaceVisibilityString = null;
		if ($es4.$$get(document, null, null, 'body', 'style', 'backfaceVisibility') !== undefined)
		{
			backfaceVisibilityString = 'backfaceVisibility';
		}
		else if ($es4.$$get(document, null, null, 'body', 'style', 'webkitBackfaceVisibility') !== undefined)
		{
			backfaceVisibilityString = 'webkitBackfaceVisibility';
		}
		return $es4.$$set(Browser, null, null, '$_backfaceVisibilityString', backfaceVisibilityString, '=');
	}));

	//method
	$es4.$$public_function('getTapHighlightColorString', Browser, (function ()
	{
		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		return 'webkitTapHighlightColor';
	}));

	//method
	$es4.$$public_function('getNewXMLSerializer', Browser, (function ()
	{
		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		return $es4.$$primitive(new ($es4.$$get(window, null, null, 'XMLSerializer'))());
	}));

	//method
	$es4.$$public_function('getNewXMLHttpRequest', Browser, (function ()
	{
		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		return $es4.$$primitive(new ($es4.$$get(window, null, null, 'XMLHttpRequest'))());
	}));

	//method
	$es4.$$public_function('getLWF', Browser, (function ()
	{
		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		if ($es4.$$get(window, null, null, 'LWF'))
		{
			return $es4.$$get(window, null, null, 'LWF');
		}
		var xmlHttpRequest = $es4.$$call(Browser, null, null, 'getNewXMLHttpRequest', $es4.$$EMPTY_ARRAY);
		$es4.$$call(xmlHttpRequest, null, null, 'open', ['GET', 'js/transcompiler/player/lwf/lwf.min.js', false]);
		$es4.$$call(xmlHttpRequest, null, null, 'overrideMimeType', ['text/javascript']);
		$es4.$$call(xmlHttpRequest, null, null, 'send', [null]);
		var js = $es4.$$coerce($es4.$$get(xmlHttpRequest, null, null, 'responseText'), String);
		($es4.$$get(window, null, null, 'execScript')) ? $es4.$$call(window, null, null, 'execScript', [js]) : $es4.$$call(window, null, null, 'eval', 'call', [window, js]);
		return $es4.$$get(window, null, null, 'LWF');
	}));

	//method
	$es4.$$public_function('getFlashWebGL', Browser, (function ()
	{
		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		if ($es4.$$get(window, null, null, 'flwebgl'))
		{
			return $es4.$$get(window, null, null, 'flwebgl');
		}
		var xmlHttpRequest = $es4.$$call(Browser, null, null, 'getNewXMLHttpRequest', $es4.$$EMPTY_ARRAY);
		$es4.$$call(xmlHttpRequest, null, null, 'open', ['GET', 'js/transcompiler/player/flwebgl/flwebgl-0.2.min.js', false]);
		$es4.$$call(xmlHttpRequest, null, null, 'overrideMimeType', ['text/javascript']);
		$es4.$$call(xmlHttpRequest, null, null, 'send', [null]);
		var js = $es4.$$coerce($es4.$$get(xmlHttpRequest, null, null, 'responseText'), String);
		($es4.$$get(window, null, null, 'execScript')) ? $es4.$$call(window, null, null, 'execScript', [js]) : $es4.$$call(window, null, null, 'eval', 'call', [window, js]);
		return $es4.$$get(window, null, null, 'flwebgl');
	}));

	//method
	$es4.$$public_function('getByteArray', Browser, (function ($$$$url)
	{
		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		//set default parameter values
		var url = $es4.$$coerce($$$$url, String);

		var xmlHttpRequest = $es4.$$call(Browser, null, null, 'getNewXMLHttpRequest', $es4.$$EMPTY_ARRAY);
		$es4.$$call(xmlHttpRequest, null, null, 'open', ['GET', url, false]);
		$es4.$$set(xmlHttpRequest, null, null, 'responseType', 'arraybuffer', '=');
		$es4.$$call(xmlHttpRequest, null, null, 'send', [null]);
		var byteArray = $es4.$$primitive(new (ByteArray)());
		$es4.$$get(byteArray, null, null, '$__setArrayBuffer')($es4.$$get(xmlHttpRequest, null, null, 'response'));
		return byteArray;
	}));

	//method
	$es4.$$public_function('convertArrayBufferToBase64String', Browser, (function ($$$$arrayBuffer)
	{		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		//set default parameter values
		var arrayBuffer = $$$$arrayBuffer;

	}), String);

	function Browser()
	{
		//initialize class if not initialized
		if (Browser.$$cinit !== undefined) Browser.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof Browser) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Browser) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(Browser, null, 'browser::Browser');
})();
//browser.Browser


//flash.filters.GradientGlowFilter
$es4.$$package('flash.filters').GradientGlowFilter = function () { throw new Error('Use of unimplemented class: GradientGlowFilter'); }
//flash.filters.GradientGlowFilter


//flash.display.MovieClip
$es4.$$package('flash.display').MovieClip = (function ()
{
	//imports
	var Scene;
	var Player;
	var Sprite;

	//class initializer
	MovieClip.$$cinit = (function ()
	{
		MovieClip.$$cinit = undefined;

		//initialize imports
		Scene = $es4.$$['flash.display'].Scene;
		Player = $es4.$$['player'].Player;
		Sprite = $es4.$$['flash.display'].Sprite;
	});

	function MovieClip()
	{
		//initialize class if not initialized
		if (MovieClip.$$cinit !== undefined) MovieClip.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof MovieClip) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], MovieClip) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('$_properties', $$thisp);
		$es4.$$private_property('$_lwf', $$thisp);
		$es4.$$private_property('$_player', $$thisp);
		$es4.$$private_property('$_stage', $$thisp);

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties') === undefined)
			{
				$es4.$$call($$this, $$this, $$thisp, '$__properties', [{}]);
			}
			$es4.$$super($$thisp).$$z();
		}));

		//method
		$es4.$$public_function('$__properties', $$thisp, (function ($$$$object)
		{
			//set default parameter values
			var object = (0 > arguments.length - 1) ? null : $$$$object;

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties') === undefined)
			{
				object = $es4.$$call($es4.$$super($$thisp), $$this, $$thisp, '$__properties', [object]);
				$es4.$$set(object, $$this, $$thisp, 'MovieClipScope', {$_setupLWF:$es4.$$get($$thisp, $$this, $$thisp, '$_setupLWF'), $_setupFLWebGL:$es4.$$get($$thisp, $$this, $$thisp, '$_setupFLWebGL')}, '=');
				$es4.$$set(object, $$this, $$thisp, 'TLScope', $$this, '=');
				return $es4.$$set($$thisp, $$this, $$thisp, '$_properties', object, '=');
			}
			return $es4.$$get($$thisp, $$this, $$thisp, '$_properties');
		}));

		//method
		$es4.$$protected_function('$__createDomView', $$thisp, (function ()
		{
			return $es4.$$call(document, $$this, $$thisp, 'createElement', ['canvas']);
		}));

		//method
		$es4.$$private_function('$_setupLWF', $$thisp, (function ()
		{
			$es4.$$set($$thisp, $$this, $$thisp, '$_lwf', $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'lwf'), '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_stage', $es4.$$get($$thisp, $$this, $$thisp, '$_lwf', 'rootMovie'), '=');
		}));

		//method
		$es4.$$private_function('$_setupFLWebGL', $$thisp, (function ()
		{
			$es4.$$set($$thisp, $$this, $$thisp, '$_player', $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'player'), '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_stage', $es4.$$call($$thisp, $$this, $$thisp, '$_player', 'getStage', $es4.$$EMPTY_ARRAY), '=');
		}));

		//method
		$es4.$$public_function('$__notify', $$thisp, (function ($$$$name, $$$$args)
		{
			//set default parameter values
			var name = $es4.$$coerce($$$$name, String);
			var args = $$$$args;

			if (name === 'enterFrame')
			{
				if ($es4.$$get($$thisp, $$this, $$thisp, '$_lwf'))
				{
					var lwf = $es4.$$get($$thisp, $$this, $$thisp, '$_lwf');
					$es4.$$call(lwf, $$this, $$thisp, 'exec', [args * .001]);
					$es4.$$call(lwf, $$this, $$thisp, 'render', $es4.$$EMPTY_ARRAY);
				}
				else if ($es4.$$get($$thisp, $$this, $$thisp, '$_player'))
				{
					$es4.$$call($$thisp, $$this, $$thisp, '$_player', 'update', $es4.$$EMPTY_ARRAY);
				}
			}
			$es4.$$call($es4.$$super($$thisp), $$this, $$thisp, '$__notify', [name, args]);
		}));

		//method
		$es4.$$public_function('addFrameScript', $$thisp, (function ($$$$rest)
		{
			//set default parameter values
			for (var $$i = 0, $$length = arguments.length, rest = new Array($$length - 0); $$i < $$length; $$i += 1) rest[$$i - 0] = arguments[$$i];

			throw $es4.$$primitive(new (Error)('MovieClip: attempted call to an unimplemented function "addFrameScript"'));
		}));

		//method
		$es4.$$public_function('gotoAndPlay', $$thisp, (function ($$$$frame, $$$$scene)
		{
			//set default parameter values
			var frame = $es4.$$coerce($$$$frame, Object);
			var scene = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$scene, String);

			$es4.$$call($$thisp, $$this, $$thisp, '$_stage', 'gotoAndPlay', [frame]);
		}));

		//method
		$es4.$$public_function('gotoAndStop', $$thisp, (function ($$$$frame, $$$$scene)
		{
			//set default parameter values
			var frame = $es4.$$coerce($$$$frame, Object);
			var scene = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$scene, String);

			$es4.$$call($$thisp, $$this, $$thisp, '$_stage', 'gotoAndStop', [frame]);
		}));

		//method
		$es4.$$public_function('nextFrame', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('MovieClip: attempted call to an unimplemented function "nextFrame"'));
		}));

		//method
		$es4.$$public_function('nextScene', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('MovieClip: attempted call to an unimplemented function "nextScene"'));
		}));

		//method
		$es4.$$public_function('play', $$thisp, (function ()
		{
			$es4.$$call($$thisp, $$this, $$thisp, '$_stage', 'play', $es4.$$EMPTY_ARRAY);
		}));

		//method
		$es4.$$public_function('prevFrame', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('MovieClip: attempted call to an unimplemented function "prevFrame"'));
		}));

		//method
		$es4.$$public_function('prevScene', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('MovieClip: attempted call to an unimplemented function "prevScene"'));
		}));

		//method
		$es4.$$public_function('stop', $$thisp, (function ()
		{
			$es4.$$call($$thisp, $$this, $$thisp, '$_stage', 'stop', $es4.$$EMPTY_ARRAY);
		}));

		//accessor
		$es4.$$public_accessor('currentFrame', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_stage', 'currentFrame'), int);
		}), null);

		//accessor
		$es4.$$public_accessor('currentFrameLabel', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('MovieClip: attempted call to an unimplemented function "currentFrameLabel"'));
		}), null);

		//accessor
		$es4.$$public_accessor('currentLabel', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('MovieClip: attempted call to an unimplemented function "currentLabel"'));
		}), null);

		//accessor
		$es4.$$public_accessor('currentLabels', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('MovieClip: attempted call to an unimplemented function "currentLabels"'));
		}), null);

		//accessor
		$es4.$$public_accessor('currentScene', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('MovieClip: attempted call to an unimplemented function "currentScene"'));
		}), null);

		//accessor
		$es4.$$public_accessor('enabled', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('MovieClip: attempted call to an unimplemented function "enabled"'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			throw $es4.$$primitive(new (Error)('MovieClip: attempted call to an unimplemented function "enabled"'));
		}));

		//accessor
		$es4.$$public_accessor('framesLoaded', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('MovieClip: attempted call to an unimplemented function "framesLoaded"'));
		}), null);

		//accessor
		$es4.$$public_accessor('scenes', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('MovieClip: attempted call to an unimplemented function "scenes"'));
		}), null);

		//accessor
		$es4.$$public_accessor('totalFrames', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_stage', 'totalFrames'), int);
		}), null);

		//accessor
		$es4.$$public_accessor('trackAsMenu', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('MovieClip: attempted call to an unimplemented function "trackAsMenu"'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			throw $es4.$$primitive(new (Error)('MovieClip: attempted call to an unimplemented function "trackAsMenu"'));
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(MovieClip, {EXTENDS:'flash.display.Sprite'}, 'flash.display::MovieClip');
})();
//flash.display.MovieClip


//flash.media.MicrophoneEnhancedOptions
$es4.$$package('flash.media').MicrophoneEnhancedOptions = function () { throw new Error('Use of unimplemented class: MicrophoneEnhancedOptions'); }
//flash.media.MicrophoneEnhancedOptions


//flash.ui.KeyLocation
$es4.$$package('flash.ui').KeyLocation = function () { throw new Error('Use of unimplemented class: KeyLocation'); }
//flash.ui.KeyLocation


//flash.text.engine.FontPosture
$es4.$$package('flash.text.engine').FontPosture = function () { throw new Error('Use of unimplemented class: FontPosture'); }
//flash.text.engine.FontPosture


//flash.display.StageAlign
$es4.$$package('flash.display').StageAlign = (function ()
{
	//properties
	StageAlign.BOTTOM = "B";
	StageAlign.BOTTOM_LEFT = "BL";
	StageAlign.BOTTOM_RIGHT = "BR";
	StageAlign.LEFT = "L";
	StageAlign.RIGHT = "R";
	StageAlign.TOP = "T";
	StageAlign.TOP_LEFT = "TL";
	StageAlign.TOP_RIGHT = "TR";

	//class initializer
	StageAlign.$$cinit = (function ()
	{
		StageAlign.$$cinit = undefined;

	});

	function StageAlign()
	{
		//initialize class if not initialized
		if (StageAlign.$$cinit !== undefined) StageAlign.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof StageAlign) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], StageAlign) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(StageAlign, null, 'flash.display::StageAlign');
})();
//flash.display.StageAlign


//flash.text.engine.DigitWidth
$es4.$$package('flash.text.engine').DigitWidth = function () { throw new Error('Use of unimplemented class: DigitWidth'); }
//flash.text.engine.DigitWidth


//flash.globalization.DateTimeStyle
$es4.$$package('flash.globalization').DateTimeStyle = function () { throw new Error('Use of unimplemented class: DateTimeStyle'); }
//flash.globalization.DateTimeStyle


//flash.events.TouchEvent
$es4.$$package('flash.events').TouchEvent = function () { throw new Error('Use of unimplemented class: TouchEvent'); }
//flash.events.TouchEvent


//flash.net.NetConnection
$es4.$$package('flash.net').NetConnection = (function ()
{
	//imports
	var EventDispatcher;
	var Responder;

	//class initializer
	NetConnection.$$cinit = (function ()
	{
		NetConnection.$$cinit = undefined;

		//initialize imports
		EventDispatcher = $es4.$$['flash.events'].EventDispatcher;
		Responder = $es4.$$['flash.net'].Responder;
	});

	//accessor
	$es4.$$public_accessor('defaultObjectEncoding', NetConnection, (function ()
	{
		if (NetConnection.$$cinit !== undefined) NetConnection.$$cinit();

		throw $es4.$$primitive(new (Error)('NetConnection: attempted call to an unimplemented function "defaultObjectEncoding"'));
	}), (function ($$$$version)
	{
		if (NetConnection.$$cinit !== undefined) NetConnection.$$cinit();

		//set default parameter values
		var version = $es4.$$coerce($$$$version, uint);

		throw $es4.$$primitive(new (Error)('NetConnection: attempted call to an unimplemented function "defaultObjectEncoding"'));
	}));

	function NetConnection()
	{
		//initialize class if not initialized
		if (NetConnection.$$cinit !== undefined) NetConnection.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof NetConnection) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], NetConnection) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
			$es4.$$super($$thisp).$$z();
		}));

		//method
		$es4.$$public_function('connect', $$thisp, (function ($$$$command, $$$$rest)
		{
			//set default parameter values
			var command = $es4.$$coerce($$$$command, String);
			for (var $$i = 1, $$length = arguments.length, rest = new Array($$length - 1); $$i < $$length; $$i += 1) rest[$$i - 1] = arguments[$$i];

		}));

		//method
		$es4.$$public_function('addHeader', $$thisp, (function ($$$$operation, $$$$mustUnderstand, $$$$param)
		{
			//set default parameter values
			var operation = $es4.$$coerce($$$$operation, String);
			var mustUnderstand = (1 > arguments.length - 1) ? false : $es4.$$coerce($$$$mustUnderstand, Boolean);
			var param = (2 > arguments.length - 1) ? null : $es4.$$coerce($$$$param, Object);

			throw $es4.$$primitive(new (Error)('NetConnection: attempted call to an unimplemented function "addHeader"'));
		}));

		//method
		$es4.$$public_function('call', $$thisp, (function ($$$$command, $$$$responder, $$$$rest)
		{
			//set default parameter values
			var command = $es4.$$coerce($$$$command, String);
			var responder = $es4.$$coerce($$$$responder, Responder);
			for (var $$i = 2, $$length = arguments.length, rest = new Array($$length - 2); $$i < $$length; $$i += 1) rest[$$i - 2] = arguments[$$i];

			throw $es4.$$primitive(new (Error)('NetConnection: attempted call to an unimplemented function "call"'));
		}));

		//method
		$es4.$$public_function('close', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetConnection: attempted call to an unimplemented function "close"'));
		}));

		//accessor
		$es4.$$public_accessor('client', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetConnection: attempted call to an unimplemented function "client"'));
		}), (function ($$$$object)
		{
			//set default parameter values
			var object = $es4.$$coerce($$$$object, Object);

			throw $es4.$$primitive(new (Error)('NetConnection: attempted call to an unimplemented function "client"'));
		}));

		//accessor
		$es4.$$public_accessor('connected', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetConnection: attempted call to an unimplemented function "connected"'));
		}), null);

		//accessor
		$es4.$$public_accessor('connectedProxyType', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetConnection: attempted call to an unimplemented function "connectedProxyType"'));
		}), null);

		//accessor
		$es4.$$public_accessor('farID', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetConnection: attempted call to an unimplemented function "farID"'));
		}), null);

		//accessor
		$es4.$$public_accessor('farNonce', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetConnection: attempted call to an unimplemented function "farNonce"'));
		}), null);

		//accessor
		$es4.$$public_accessor('maxPeerConnections', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetConnection: attempted call to an unimplemented function "maxPeerConnections"'));
		}), (function ($$$$maxPeers)
		{
			//set default parameter values
			var maxPeers = $es4.$$coerce($$$$maxPeers, uint);

			throw $es4.$$primitive(new (Error)('NetConnection: attempted call to an unimplemented function "maxPeerConnections"'));
		}));

		//accessor
		$es4.$$public_accessor('nearID', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetConnection: attempted call to an unimplemented function "nearID"'));
		}), null);

		//accessor
		$es4.$$public_accessor('nearNonce', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetConnection: attempted call to an unimplemented function "nearNonce"'));
		}), null);

		//accessor
		$es4.$$public_accessor('objectEncoding', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetConnection: attempted call to an unimplemented function "objectEncoding"'));
		}), (function ($$$$version)
		{
			//set default parameter values
			var version = $es4.$$coerce($$$$version, uint);

			throw $es4.$$primitive(new (Error)('NetConnection: attempted call to an unimplemented function "objectEncoding"'));
		}));

		//accessor
		$es4.$$public_accessor('protocol', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetConnection: attempted call to an unimplemented function "protocol"'));
		}), null);

		//accessor
		$es4.$$public_accessor('proxyType', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetConnection: attempted call to an unimplemented function "proxyType"'));
		}), (function ($$$$ptype)
		{
			//set default parameter values
			var ptype = $es4.$$coerce($$$$ptype, String);

			throw $es4.$$primitive(new (Error)('NetConnection: attempted call to an unimplemented function "proxyType"'));
		}));

		//accessor
		$es4.$$public_accessor('unconnectedPeerStreams', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetConnection: attempted call to an unimplemented function "unconnectedPeerStreams"'));
		}), null);

		//accessor
		$es4.$$public_accessor('uri', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetConnection: attempted call to an unimplemented function "uri"'));
		}), null);

		//accessor
		$es4.$$public_accessor('usingTLS', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetConnection: attempted call to an unimplemented function "usingTLS"'));
		}), null);

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(NetConnection, {EXTENDS:'flash.events.EventDispatcher'}, 'flash.net::NetConnection');
})();
//flash.net.NetConnection


//flash.net.URLLoaderDataFormat
$es4.$$package('flash.net').URLLoaderDataFormat = (function ()
{
	//properties
	URLLoaderDataFormat.BINARY = "binary";
	URLLoaderDataFormat.TEXT = "text";
	URLLoaderDataFormat.VARIABLES = "variables";

	//class initializer
	URLLoaderDataFormat.$$cinit = (function ()
	{
		URLLoaderDataFormat.$$cinit = undefined;

	});

	function URLLoaderDataFormat()
	{
		//initialize class if not initialized
		if (URLLoaderDataFormat.$$cinit !== undefined) URLLoaderDataFormat.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof URLLoaderDataFormat) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], URLLoaderDataFormat) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(URLLoaderDataFormat, null, 'flash.net::URLLoaderDataFormat');
})();
//flash.net.URLLoaderDataFormat


//flash.events.EventPhase
$es4.$$package('flash.events').EventPhase = (function ()
{
	//properties
	EventPhase.AT_TARGET = 2;
	EventPhase.BUBBLING_PHASE = 3;
	EventPhase.CAPTURING_PHASE = 1;

	//class initializer
	EventPhase.$$cinit = (function ()
	{
		EventPhase.$$cinit = undefined;

	});

	function EventPhase()
	{
		//initialize class if not initialized
		if (EventPhase.$$cinit !== undefined) EventPhase.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof EventPhase) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], EventPhase) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(EventPhase, null, 'flash.events::EventPhase');
})();
//flash.events.EventPhase


//flash.events.AccelerometerEvent
$es4.$$package('flash.events').AccelerometerEvent = function () { throw new Error('Use of unimplemented class: AccelerometerEvent'); }
//flash.events.AccelerometerEvent


//flash.ui.MultitouchInputMode
$es4.$$package('flash.ui').MultitouchInputMode = function () { throw new Error('Use of unimplemented class: MultitouchInputMode'); }
//flash.ui.MultitouchInputMode


//flash.media.Camera
$es4.$$package('flash.media').Camera = function () { throw new Error('Use of unimplemented class: Camera'); }
//flash.media.Camera


//flash.text.engine.TextJustifier
$es4.$$package('flash.text.engine').TextJustifier = function () { throw new Error('Use of unimplemented class: TextJustifier'); }
//flash.text.engine.TextJustifier


//flash.globalization.CurrencyFormatter
$es4.$$package('flash.globalization').CurrencyFormatter = function () { throw new Error('Use of unimplemented class: CurrencyFormatter'); }
//flash.globalization.CurrencyFormatter


//flash.display.GradientType
$es4.$$package('flash.display').GradientType = function () { throw new Error('Use of unimplemented class: GradientType'); }
//flash.display.GradientType


//flash.text.StaticText
$es4.$$package('flash.text').StaticText = function () { throw new Error('Use of unimplemented class: StaticText'); }
//flash.text.StaticText


//flash.net.drm.DRMContentData
$es4.$$package('flash.net.drm').DRMContentData = function () { throw new Error('Use of unimplemented class: DRMContentData'); }
//flash.net.drm.DRMContentData


//flash.text.engine.TextLine
$es4.$$package('flash.text.engine').TextLine = function () { throw new Error('Use of unimplemented class: TextLine'); }
//flash.text.engine.TextLine


//flash.errors.StackOverflowError
$es4.$$package('flash.errors').StackOverflowError = function () { throw new Error('Use of unimplemented class: StackOverflowError'); }
//flash.errors.StackOverflowError


//flash.display.Stage
$es4.$$package('flash.display').Stage = (function ()
{
	//imports
	var Event;
	var MouseEvent;
	var Point;
	var Rectangle;
	var ApplicationDomain;
	var LoaderContext;
	var Player;
	var DisplayObjectContainer;
	var InteractiveObject;
	var Sprite;
	var Stage;
	var Loader;

	//properties
	$es4.$$private_property('$_enterFrameListeners', Stage, Array);
	$es4.$$public_property('$__domDocument', Stage, Object);
	$es4.$$public_property('$__stageReference', Stage, 'flash.display.Stage');
	$es4.$$public_property('$__stageLeft', Stage, Number);
	$es4.$$public_property('$__stageTop', Stage, Number);
	$es4.$$public_property('$__pageX', Stage, Number);
	$es4.$$public_property('$__pageY', Stage, Number);
	$es4.$$public_property('$__lastKeyPressedObject', Stage, Object);
	$es4.$$private_property('$__lastMouseMoveEvent', Stage);
	$es4.$$private_property('$_last', Stage);

	//class initializer
	Stage.$$cinit = (function ()
	{
		Stage.$$cinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;
		MouseEvent = $es4.$$['flash.events'].MouseEvent;
		Point = $es4.$$['flash.geom'].Point;
		Rectangle = $es4.$$['flash.geom'].Rectangle;
		ApplicationDomain = $es4.$$['flash.system'].ApplicationDomain;
		LoaderContext = $es4.$$['flash.system'].LoaderContext;
		Player = $es4.$$['player'].Player;
		DisplayObjectContainer = $es4.$$['flash.display'].DisplayObjectContainer;
		InteractiveObject = $es4.$$['flash.display'].InteractiveObject;
		Sprite = $es4.$$['flash.display'].Sprite;
		Loader = $es4.$$['flash.display'].Loader;

		//initialize properties
		Stage.$_enterFrameListeners = [];
		Stage.$_last = 0;
	});

	//method
	$es4.$$public_function('$__init', Stage, (function ($$$$domDocument)
	{
		if (Stage.$$cinit !== undefined) Stage.$$cinit();

		//set default parameter values
		var domDocument = $$$$domDocument;

		$es4.$$set(Stage, null, null, '$__domDocument', domDocument, '=');
		var stage = $es4.$$coerce($es4.$$primitive(new (Stage)()), $es4.$$['flash.display'].Stage);
		var loader = $es4.$$coerce($es4.$$primitive(new (Loader)()), Loader);
		var properties = $es4.$$get($es4.$$call(loader, null, null, '$__properties', $es4.$$EMPTY_ARRAY), null, null, 'LoaderScope');
		$es4.$$set(properties, null, null, '$_loaderContext', $es4.$$primitive(new (LoaderContext)(false, null)), '=');
		$es4.$$set($es4.$$call(stage, null, null, '$__properties', $es4.$$EMPTY_ARRAY), null, null, 'DisplayObjectScope', '$_loaderInfo', $es4.$$get(properties, null, null, '$_contentLoaderInfo'), '=');
		return stage;
	}));

	//method
	$es4.$$public_function('$__addEnterFrameListener', Stage, (function ($$$$listener, $$$$func)
	{
		if (Stage.$$cinit !== undefined) Stage.$$cinit();

		//set default parameter values
		var listener = $es4.$$coerce($$$$listener, Object);
		var func = $es4.$$coerce($$$$func, Function);

		$es4.$$call(Stage, null, null, '$_enterFrameListeners', 'push', [{listener:listener, func:func}]);
	}));

	//method
	$es4.$$public_function('$__removeEnterFrameListener', Stage, (function ($$$$listener, $$$$func)
	{
		if (Stage.$$cinit !== undefined) Stage.$$cinit();

		//set default parameter values
		var listener = $es4.$$coerce($$$$listener, Object);
		var func = $es4.$$coerce($$$$func, Function);

		for (var i = $es4.$$get(Stage, null, null, '$_enterFrameListeners', 'length'); i--;)
		{
			if ($es4.$$get(Stage, null, null, '$_enterFrameListeners', i, 'listener') != listener || $es4.$$get(Stage, null, null, '$_enterFrameListeners', i, 'func') != func)
			{
				continue;
			}
			$es4.$$call(Stage, null, null, '$_enterFrameListeners', 'splice', [i, 1]);
		}
	}));

	function Stage()
	{
		//initialize class if not initialized
		if (Stage.$$cinit !== undefined) Stage.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof Stage) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Stage) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('$_stageFocusRectStyle', $$thisp, Object);
		$es4.$$private_property('$_properties', $$thisp);

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties') === undefined)
			{
				$es4.$$call($$this, $$this, $$thisp, '$__properties', [{}]);
			}
			$es4.$$super($$thisp).$$z();
			$es4.$$call(Stage, $$this, $$thisp, '$__domDocument', 'appendChild', [$es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView')]);
			$es4.$$call($$this, $$this, $$thisp, '$__onResize', $es4.$$EMPTY_ARRAY);
			$es4.$$set(Stage, $$this, $$thisp, '$__stageReference', $$this, '=');
			var mobile = $es4.$$coerce($es4.$$get(window, $$this, $$thisp, 'mobile'), Boolean);
			if (mobile)
			{
				$es4.$$call(document, $$this, $$thisp, 'body', 'addEventListener', ['touchstart', function ($$$$event) 
{
				//set default parameter values
				var event = $$$$event;

	var target = $es4.$$get(event, $$this, $$thisp, 'target');
	if ($es4.$$get(target, $$this, $$thisp, 'nodeName') != 'A' && $es4.$$get(target, $$this, $$thisp, 'nodeName') != 'TEXTAREA' && !($es4.$$get(target, $$this, $$thisp, 'contentEditable') === 'true'))
	{
		$es4.$$call(event, $$this, $$thisp, 'preventDefault', $es4.$$EMPTY_ARRAY);
	}
	$es4.$$set(Stage, $$this, $$thisp, '$__pageX', $es4.$$get(event, $$this, $$thisp, 'touches', 0, 'pageX'), '=');
	$es4.$$set(Stage, $$this, $$thisp, '$__pageY', $es4.$$get(event, $$this, $$thisp, 'touches', 0, 'pageY'), '=');
}
, true]);
				$es4.$$call(document, $$this, $$thisp, 'body', 'addEventListener', ['touchmove', function ($$$$event) 
{
				//set default parameter values
				var event = $$$$event;

	var target = $es4.$$get(event, $$this, $$thisp, 'target');
	if ($es4.$$get(target, $$this, $$thisp, 'nodeName') != 'A' && $es4.$$get(target, $$this, $$thisp, 'nodeName') != 'TEXTAREA' && !($es4.$$get(target, $$this, $$thisp, 'contentEditable') === 'true'))
	{
		$es4.$$call(event, $$this, $$thisp, 'preventDefault', $es4.$$EMPTY_ARRAY);
	}
	$es4.$$set(Stage, $$this, $$thisp, '$__pageX', $es4.$$get(event, $$this, $$thisp, 'touches', 0, 'pageX'), '=');
	$es4.$$set(Stage, $$this, $$thisp, '$__pageY', $es4.$$get(event, $$this, $$thisp, 'touches', 0, 'pageY'), '=');
}
, true]);
			}
			else
			{
				$es4.$$call(document, $$this, $$thisp, 'body', 'addEventListener', ['mousemove', function ($$$$event) 
{
				//set default parameter values
				var event = $$$$event;

	$es4.$$set(Stage, $$this, $$thisp, '$__pageX', $es4.$$get(event, $$this, $$thisp, 'pageX'), '=');
	$es4.$$set(Stage, $$this, $$thisp, '$__pageY', $es4.$$get(event, $$this, $$thisp, 'pageY'), '=');
}
, true]);
				$es4.$$call(document, $$this, $$thisp, 'body', 'addEventListener', ['mousedown', function ($$$$event) 
{
				//set default parameter values
				var event = $$$$event;

	$es4.$$set(Stage, $$this, $$thisp, '$__lastKeyPressedObject', null, '=');
}
, true]);
				$es4.$$call(document, $$this, $$thisp, 'body', 'addEventListener', ['keydown', function ($$$$event) 
{
				//set default parameter values
				var event = $$$$event;

	$es4.$$set(Stage, $$this, $$thisp, '$__lastKeyPressedObject', {which:$es4.$$get(event, $$this, $$thisp, 'which'), keyCode:$es4.$$get(event, $$this, $$thisp, 'keyCode'), shiftKey:$es4.$$get(event, $$this, $$thisp, 'shiftKey')}, '=');
}
, true]);
			}
			var doMouseMove = false;
			var requestAnimationFrame = $es4.$$coerce($es4.$$get(window, $$this, $$thisp, 'requestAnimationFrame'), Function);
			var view = $es4.$$get(Stage, $$this, $$thisp, '$__domDocument');
			var onMouseMove = $es4.$$coerce(function ($$$$event) 
			{
				//set default parameter values
				var event = $$$$event;

				$es4.$$set(Stage, $$this, $$thisp, '$__lastMouseMoveEvent', event, '=');
				$es4.$$call(event, $$this, $$thisp, 'stopPropagation', $es4.$$EMPTY_ARRAY);
			}
, Function);
			var onMouseWheel = $es4.$$coerce(function ($$$$event) 
			{
				//set default parameter values
				var event = $$$$event;

				if (!$es4.$$call($$this, $$this, $$thisp, 'hasEventListener', [$es4.$$get(MouseEvent, $$this, $$thisp, 'MOUSE_WHEEL')]))
				{
					$es4.$$call(event, $$this, $$thisp, 'stopPropagation', $es4.$$EMPTY_ARRAY);
					return;
				}
				var mouseMoveEvent = $es4.$$primitive(new (MouseEvent)($es4.$$get(MouseEvent, $$this, $$thisp, 'MOUSE_WHEEL'), false, false, null, null, null, false, false, false, false, -$es4.$$get(event, $$this, $$thisp, 'deltaY')));
				$es4.$$set($es4.$$call(mouseMoveEvent, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'EventScope', '$_target', $es4.$$call(InteractiveObject, $$this, $$thisp, '$_getOriginalInteractiveObjectTarget', [$es4.$$get(event, $$this, $$thisp, 'target')]), '=');
				$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [mouseMoveEvent]);
				$es4.$$call(event, $$this, $$thisp, 'stopPropagation', $es4.$$EMPTY_ARRAY);
			}
, Function);
			if (mobile)
			{
				$es4.$$call(view, $$this, $$thisp, 'addEventListener', ['touchmove', onMouseMove, false]);
				$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_onMouseMove', onMouseMove, '=');
			}
			else
			{
				$es4.$$call(view, $$this, $$thisp, 'addEventListener', ['mousemove', onMouseMove, true]);
			}
			$es4.$$call(view, $$this, $$thisp, 'addEventListener', ['wheel', onMouseWheel, false]);
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_isRoot', true, '=');
		}));

		//method
		$es4.$$public_function('$__properties', $$thisp, (function ($$$$object)
		{
			//set default parameter values
			var object = (0 > arguments.length - 1) ? null : $$$$object;

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties') === undefined)
			{
				object = $es4.$$call($es4.$$super($$thisp), $$this, $$thisp, '$__properties', [object]);
				$es4.$$set(object, $$this, $$thisp, 'StageScope', {$_color:0xffffff, $_align:'', $_scaleMode:'', $_stageFocusRect:true}, '=');
				$es4.$$set(object, $$this, $$thisp, 'TLScope', $$this, '=');
				return $es4.$$set($$thisp, $$this, $$thisp, '$_properties', object, '=');
			}
			return $es4.$$get($$thisp, $$this, $$thisp, '$_properties');
		}));

		//method
		$es4.$$public_function('$__onResize', $$thisp, (function ()
		{
			var boundingClientRect = $es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'getBoundingClientRect', $es4.$$EMPTY_ARRAY);
			$es4.$$set(Stage, $$this, $$thisp, '$__stageTop', $es4.$$get(boundingClientRect, $$this, $$thisp, 'top'), '=');
			$es4.$$set(Stage, $$this, $$thisp, '$__stageLeft', $es4.$$get(boundingClientRect, $$this, $$thisp, 'left'), '=');
			$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'TLScope', 'dispatchEvent', [$es4.$$primitive(new (Event)($es4.$$get(Event, $$this, $$thisp, 'RESIZE')))]);
		}));

		//method
		$es4.$$public_function('$__internalAddChild', $$thisp, (function ($$$$child)
		{
			//set default parameter values
			var child = $es4.$$coerce($$$$child, Sprite);

			var loader = $es4.$$coerce($es4.$$primitive(new (Loader)()), Loader);
			var properties = $es4.$$get($es4.$$call(loader, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'LoaderScope');
			$es4.$$set(properties, $$this, $$thisp, '$_loaderContext', $es4.$$primitive(new (LoaderContext)(false, $es4.$$get(ApplicationDomain, $$this, $$thisp, 'currentDomain'))), '=');
			$es4.$$set($es4.$$call(child, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope', '$_loaderInfo', $es4.$$get(properties, $$this, $$thisp, '$_contentLoaderInfo'), '=');
			$es4.$$set($es4.$$call(child, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope', '$_isRoot', true, '=');
			$es4.$$call($$this, $$this, $$thisp, 'addChild', [child]);
		}));

		//method
		$es4.$$public_function('$__notify', $$thisp, (function ($$$$name, $$$$args)
		{
			//set default parameter values
			var name = $es4.$$coerce($$$$name, String);
			var args = $$$$args;

			var event;
			if (name === 'enterFrame')
			{
				if ($es4.$$get(Stage, $$this, $$thisp, '$__lastMouseMoveEvent'))
				{
					if ($es4.$$get(Stage, $$this, $$thisp, '$_last') < 1)
					{
						$es4.$$set(Stage, $$this, $$thisp, '$_last', 1, '=');
						return;
					}
					$es4.$$set(Stage, $$this, $$thisp, '$_last', 0, '=');
					var mobile = $es4.$$coerce($es4.$$get(window, $$this, $$thisp, 'mobile'), Boolean);
					event = $es4.$$get(Stage, $$this, $$thisp, '$__lastMouseMoveEvent');
					$es4.$$set(Stage, $$this, $$thisp, '$__lastMouseMoveEvent', null, '=');
					if (!$es4.$$call($$this, $$this, $$thisp, 'hasEventListener', [$es4.$$get(MouseEvent, $$this, $$thisp, 'MOUSE_MOVE')]))
					{
						return;
					}
					var clientX = $es4.$$coerce((mobile && $es4.$$get(event, $$this, $$thisp, 'clientX') === undefined) ? $es4.$$get($es4.$$call(InteractiveObject, $$this, $$thisp, 'getTouch', [event]), $$this, $$thisp, 'pageX') : $es4.$$get(event, $$this, $$thisp, 'clientX'), Number);
					var clientY = $es4.$$coerce((mobile && $es4.$$get(event, $$this, $$thisp, 'clientY') === undefined) ? $es4.$$get($es4.$$call(InteractiveObject, $$this, $$thisp, 'getTouch', [event]), $$this, $$thisp, 'pageY') : $es4.$$get(event, $$this, $$thisp, 'clientY'), Number);
					var localPoint = $es4.$$call($$this, $$this, $$thisp, 'globalToLocal', [$es4.$$primitive(new (Point)(clientX, clientY))]);
					var mouseMoveEvent = $es4.$$primitive(new (MouseEvent)($es4.$$get(MouseEvent, $$this, $$thisp, 'MOUSE_MOVE'), false, false, $es4.$$get(localPoint, $$this, $$thisp, 'x'), $es4.$$get(localPoint, $$this, $$thisp, 'y')));
					$es4.$$set($es4.$$call(mouseMoveEvent, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'EventScope', '$_target', $es4.$$call(InteractiveObject, $$this, $$thisp, '$_getOriginalInteractiveObjectTarget', [$es4.$$get(event, $$this, $$thisp, 'target')]), '=');
					$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [mouseMoveEvent]);
				}
				for (var i = $es4.$$get(Stage, $$this, $$thisp, '$_enterFrameListeners', 'length'); i--;)
				{
					event = $es4.$$primitive(new (Event)($es4.$$get(Event, $$this, $$thisp, 'ENTER_FRAME')));
					$es4.$$call(Stage, $$this, $$thisp, '$_enterFrameListeners', i, 'func', [$es4.$$call($es4.$$call(event, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'EventScope', '$_withTarget', [event, $es4.$$get(Stage, $$this, $$thisp, '$_enterFrameListeners', i, 'listener')])]);
				}
			}
			$es4.$$call($es4.$$super($$thisp), $$this, $$thisp, '$__notify', [name, args]);
		}));

		//method
		$es4.$$public_function('invalidate', $$thisp, (function ()
		{
			$es4.$$call(document, $$this, $$thisp, 'body', 'removeChild', [$es4.$$call(document, $$this, $$thisp, 'body', 'appendChild', [$es4.$$call(document, $$this, $$thisp, 'createElement', ['style'])])]);
		}));

		//method
		$es4.$$public_function('isFocusInaccessible', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Stage: attempted call to an unimplemented function "isFocusInaccessible"'));
		}));

		//accessor
		$es4.$$public_accessor('color', $$thisp, (function ()
		{
			return parseInt($es4.$$call($es4.$$call(Stage, $$this, $$thisp, '$__domDocument', 'style', 'background', 'split', ['#']), $$this, $$thisp, 'pop', $es4.$$EMPTY_ARRAY), 16);
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, uint);

			$es4.$$set(Stage, $$this, $$thisp, '$__domDocument', 'style', 'background', $es4.$$call(value, $$this, $$thisp, 'toString', [16]), '=');
		}));

		//accessor
		$es4.$$public_accessor('frameRate', $$thisp, (function ()
		{
			return $es4.$$call(Player, $$this, $$thisp, 'getFrameRate', $es4.$$EMPTY_ARRAY);
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			$es4.$$call(Player, $$this, $$thisp, 'setFrameRate', [value]);
		}));

		//accessor
		$es4.$$public_accessor('align', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'StageScope', '$_align'), String);
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'StageScope', '$_align', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('colorCorrection', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Stage: attempted call to an unimplemented function "colorCorrection"'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			throw $es4.$$primitive(new (Error)('Stage: attempted call to an unimplemented function "colorCorrection"'));
		}));

		//accessor
		$es4.$$public_accessor('colorCorrectionSupport', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Stage: attempted call to an unimplemented function "colorCorrectionSupport"'));
		}), null);

		//accessor
		$es4.$$public_accessor('displayState', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Stage: attempted call to an unimplemented function "displayState"'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			throw $es4.$$primitive(new (Error)('Stage: attempted call to an unimplemented function "displayState"'));
		}));

		//accessor
		$es4.$$public_accessor('focus', $$thisp, (function ()
		{
			var element = $es4.$$get(document, $$this, $$thisp, 'activeElement');
			if (!element || $es4.$$get(element, $$this, $$thisp, 'displayObject') === undefined)
			{
				return null;
			}
			return $es4.$$coerce($es4.$$get(element, $$this, $$thisp, 'displayObject'), InteractiveObject);
		}), (function ($$$$newFocus)
		{
			//set default parameter values
			var newFocus = $es4.$$coerce($$$$newFocus, InteractiveObject);

			$es4.$$set(Stage, $$this, $$thisp, '$__lastKeyPressedObject', null, '=');
			if (newFocus == null)
			{
				if ($es4.$$get(document, $$this, $$thisp, 'activeElement'))
				{
					if ($es4.$$get(document, $$this, $$thisp, 'activeElement', 'blur') !== undefined)
					{
						$es4.$$call(document, $$this, $$thisp, 'activeElement', 'blur', $es4.$$EMPTY_ARRAY);
					}
				}
				else
				{
					$es4.$$call(window, $$this, $$thisp, 'focus', $es4.$$EMPTY_ARRAY);
				}
				return;
			}
			$es4.$$call($es4.$$call(newFocus, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope', '$_domView', 'focus', $es4.$$EMPTY_ARRAY);
		}));

		//accessor
		$es4.$$public_accessor('fullScreenHeight', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get(window, $$this, $$thisp, 'screen', 'height'), uint);
		}), null);

		//accessor
		$es4.$$public_accessor('fullScreenSourceRect', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Stage: attempted call to an unimplemented function "fullScreenSourceRect"'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Rectangle);

			throw $es4.$$primitive(new (Error)('Stage: attempted call to an unimplemented function "fullScreenSourceRect"'));
		}));

		//accessor
		$es4.$$public_accessor('fullScreenWidth', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get(window, $$this, $$thisp, 'screen', 'width'), uint);
		}), null);

		//accessor
		$es4.$$public_accessor('quality', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Stage: attempted call to an unimplemented function "quality"'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			throw $es4.$$primitive(new (Error)('Stage: attempted call to an unimplemented function "quality"'));
		}));

		//accessor
		$es4.$$public_accessor('scaleMode', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'StageScope', '$_scaleMode'), String);
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'StageScope', '$_scaleMode', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('showDefaultContextMenu', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Stage: attempted call to an unimplemented function "showDefaultContextMenu"'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			throw $es4.$$primitive(new (Error)('Stage: attempted call to an unimplemented function "showDefaultContextMenu"'));
		}));

		//accessor
		$es4.$$public_accessor('stageFocusRect', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'StageScope', '$_stageFocusRect'), Boolean);
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			if (value == $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'StageScope', '$_stageFocusRect'))
			{
				return;
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'StageScope', '$_stageFocusRect', value, '=');
			if (!value)
			{
				var css = '*:focus { outline: none; }';
				var style = $es4.$$call(document, $$this, $$thisp, 'createElement', ['style']);
				$es4.$$set(style, $$this, $$thisp, 'type', 'text/css', '=');
				if ($es4.$$get(style, $$this, $$thisp, 'styleSheet'))
				{
					$es4.$$set(style, $$this, $$thisp, 'styleSheet', 'cssText', css, '=');
				}
				else
				{
					$es4.$$call(style, $$this, $$thisp, 'appendChild', [$es4.$$call(document, $$this, $$thisp, 'createTextNode', [css])]);
				}
				$es4.$$call($es4.$$call(document, $$this, $$thisp, 'getElementsByTagName', ['head']), $$this, $$thisp, 0, 'appendChild', [style]);
				$es4.$$set($$thisp, $$this, $$thisp, '$_stageFocusRectStyle', style, '=');
			}
			else
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_stageFocusRectStyle', 'parentNode', 'removeChild', [$es4.$$get($$thisp, $$this, $$thisp, '$_stageFocusRectStyle')]);
				$es4.$$set($$thisp, $$this, $$thisp, '$_stageFocusRectStyle', null, '=');
			}
		}));

		//accessor
		$es4.$$public_accessor('stageHeight', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get(Stage, $$this, $$thisp, '$__domDocument', 'offsetHeight'), int);
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, int);

			$es4.$$set(Stage, $$this, $$thisp, '$__domDocument', 'style', 'height', value + 'px', '=');
		}));

		//accessor
		$es4.$$public_accessor('stageWidth', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get(Stage, $$this, $$thisp, '$__domDocument', 'offsetWidth'), int);
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, int);

			$es4.$$set(Stage, $$this, $$thisp, '$__domDocument', 'style', 'width', value + 'px', '=');
		}));

		//accessor
		$es4.$$public_accessor('wmodeGPU', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Stage: attempted call to an unimplemented function "wmodeGPU"'));
		}), null);

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(Stage, {EXTENDS:'flash.display.DisplayObjectContainer'}, 'flash.display::Stage');
})();
//flash.display.Stage


//flash.filters.BitmapFilter
$es4.$$package('flash.filters').BitmapFilter = function () { throw new Error('Use of unimplemented class: BitmapFilter'); }
//flash.filters.BitmapFilter


//flash.display.ColorCorrectionSupport
$es4.$$package('flash.display').ColorCorrectionSupport = (function ()
{
	//properties
	ColorCorrectionSupport.DEFAULT_OFF = "defaultOff";
	ColorCorrectionSupport.DEFAULT_ON = "defaultOn";
	ColorCorrectionSupport.UNSUPPORTED = "unsupported";

	//class initializer
	ColorCorrectionSupport.$$cinit = (function ()
	{
		ColorCorrectionSupport.$$cinit = undefined;

	});

	function ColorCorrectionSupport()
	{
		//initialize class if not initialized
		if (ColorCorrectionSupport.$$cinit !== undefined) ColorCorrectionSupport.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof ColorCorrectionSupport) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], ColorCorrectionSupport) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(ColorCorrectionSupport, null, 'flash.display::ColorCorrectionSupport');
})();
//flash.display.ColorCorrectionSupport


//flash.events.SampleDataEvent
$es4.$$package('flash.events').SampleDataEvent = (function ()
{
	//imports
	var Event;
	var ByteArray;

	//properties
	SampleDataEvent.SAMPLE_DATA = "sampleData";

	//class initializer
	SampleDataEvent.$$cinit = (function ()
	{
		SampleDataEvent.$$cinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;
		ByteArray = $es4.$$['flash.utils'].ByteArray;
	});

	function SampleDataEvent()
	{
		//initialize class if not initialized
		if (SampleDataEvent.$$cinit !== undefined) SampleDataEvent.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof SampleDataEvent) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], SampleDataEvent) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('_data', $$thisp, ByteArray);

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$type, $$$$bubbles, $$$$cancelable, $$$$theposition, $$$$thedata)
		{
			//set default parameter values
			var type = $es4.$$coerce($$$$type, String);
			var bubbles = (1 > arguments.length - 1) ? false : $es4.$$coerce($$$$bubbles, Boolean);
			var cancelable = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$cancelable, Boolean);
			var theposition = (3 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$theposition, Number);
			var thedata = (4 > arguments.length - 1) ? null : $es4.$$coerce($$$$thedata, ByteArray);

			$es4.$$super($$thisp).$$z(type, bubbles, cancelable);
			$es4.$$set($$thisp, $$this, $$thisp, '_data', thedata, '=');
		}));

		//method
		$es4.$$public_function('clone', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('SampleDataEvent: attempted call to an unimplemented function "clone"'));
		}));

		//method
		$es4.$$public_function('toString', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('SampleDataEvent: attempted call to an unimplemented function "toString"'));
		}));

		//accessor
		$es4.$$public_accessor('data', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_data');
		}), (function ($$$$thedata)
		{
			//set default parameter values
			var thedata = $es4.$$coerce($$$$thedata, ByteArray);

			throw $es4.$$primitive(new (Error)('SampleDataEvent: attempted call to an unimplemented function "data"'));
		}));

		//accessor
		$es4.$$public_accessor('position', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('SampleDataEvent: attempted call to an unimplemented function "position"'));
		}), (function ($$$$theposition)
		{
			//set default parameter values
			var theposition = $es4.$$coerce($$$$theposition, Number);

			throw $es4.$$primitive(new (Error)('SampleDataEvent: attempted call to an unimplemented function "position"'));
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(SampleDataEvent, {EXTENDS:'flash.events.Event'}, 'flash.events::SampleDataEvent');
})();
//flash.events.SampleDataEvent


//flash.net.URLRequestHeader
$es4.$$package('flash.net').URLRequestHeader = function () { throw new Error('Use of unimplemented class: URLRequestHeader'); }
//flash.net.URLRequestHeader


//flash.display3D.Context3DMipFilter
$es4.$$package('flash.display3D').Context3DMipFilter = function () { throw new Error('Use of unimplemented class: Context3DMipFilter'); }
//flash.display3D.Context3DMipFilter


//flash.filters.BitmapFilterType
$es4.$$package('flash.filters').BitmapFilterType = function () { throw new Error('Use of unimplemented class: BitmapFilterType'); }
//flash.filters.BitmapFilterType


//flash.display.AVM1Movie
$es4.$$package('flash.display').AVM1Movie = function () { throw new Error('Use of unimplemented class: AVM1Movie'); }
//flash.display.AVM1Movie


//flash.net.drm.DRMPlaybackTimeWindow
$es4.$$package('flash.net.drm').DRMPlaybackTimeWindow = function () { throw new Error('Use of unimplemented class: DRMPlaybackTimeWindow'); }
//flash.net.drm.DRMPlaybackTimeWindow


//flash.events.VideoEvent
$es4.$$package('flash.events').VideoEvent = function () { throw new Error('Use of unimplemented class: VideoEvent'); }
//flash.events.VideoEvent


//flash.globalization.StringTools
$es4.$$package('flash.globalization').StringTools = function () { throw new Error('Use of unimplemented class: StringTools'); }
//flash.globalization.StringTools


//flash.text.engine.DigitCase
$es4.$$package('flash.text.engine').DigitCase = function () { throw new Error('Use of unimplemented class: DigitCase'); }
//flash.text.engine.DigitCase


//flash.text.engine.SpaceJustifier
$es4.$$package('flash.text.engine').SpaceJustifier = function () { throw new Error('Use of unimplemented class: SpaceJustifier'); }
//flash.text.engine.SpaceJustifier


//flash.printing.PrintJobOrientation
$es4.$$package('flash.printing').PrintJobOrientation = (function ()
{
	//properties
	PrintJobOrientation.LANDSCAPE = "landscape";
	PrintJobOrientation.PORTRAIT = "portrait";

	//class initializer
	PrintJobOrientation.$$cinit = (function ()
	{
		PrintJobOrientation.$$cinit = undefined;

	});

	function PrintJobOrientation()
	{
		//initialize class if not initialized
		if (PrintJobOrientation.$$cinit !== undefined) PrintJobOrientation.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof PrintJobOrientation) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], PrintJobOrientation) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(PrintJobOrientation, null, 'flash.printing::PrintJobOrientation');
})();
//flash.printing.PrintJobOrientation


//flash.display3D.Context3DProfile
$es4.$$package('flash.display3D').Context3DProfile = function () { throw new Error('Use of unimplemented class: Context3DProfile'); }
//flash.display3D.Context3DProfile


//flash.filters.DisplacementMapFilterMode
$es4.$$package('flash.filters').DisplacementMapFilterMode = function () { throw new Error('Use of unimplemented class: DisplacementMapFilterMode'); }
//flash.filters.DisplacementMapFilterMode


//flash.net.FileFilter
$es4.$$package('flash.net').FileFilter = function () { throw new Error('Use of unimplemented class: FileFilter'); }
//flash.net.FileFilter


//flash.events.ContextMenuEvent
$es4.$$package('flash.events').ContextMenuEvent = function () { throw new Error('Use of unimplemented class: ContextMenuEvent'); }
//flash.events.ContextMenuEvent


//flash.globalization.DateTimeNameContext
$es4.$$package('flash.globalization').DateTimeNameContext = function () { throw new Error('Use of unimplemented class: DateTimeNameContext'); }
//flash.globalization.DateTimeNameContext


//flash.display.ActionScriptVersion
$es4.$$package('flash.display').ActionScriptVersion = function () { throw new Error('Use of unimplemented class: ActionScriptVersion'); }
//flash.display.ActionScriptVersion


//flash.media.VideoStatus
$es4.$$package('flash.media').VideoStatus = (function ()
{
	//properties
	VideoStatus.ACCELERATED = "accelerated";
	VideoStatus.SOFTWARE = "software";
	VideoStatus.UNAVAILABLE = "unavailable";

	//class initializer
	VideoStatus.$$cinit = (function ()
	{
		VideoStatus.$$cinit = undefined;

	});

	function VideoStatus()
	{
		//initialize class if not initialized
		if (VideoStatus.$$cinit !== undefined) VideoStatus.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof VideoStatus) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], VideoStatus) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(VideoStatus, null, 'flash.media::VideoStatus');
})();
//flash.media.VideoStatus


//flash.errors.IOError
$es4.$$package('flash.errors').IOError = (function ()
{
	//class initializer
	IOError.$$cinit = (function ()
	{
		IOError.$$cinit = undefined;

	});

	function IOError()
	{
		//initialize class if not initialized
		if (IOError.$$cinit !== undefined) IOError.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof IOError) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], IOError) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$message, $$$$id)
		{
			//set default parameter values
			var message = (0 > arguments.length - 1) ? "" : $es4.$$coerce($$$$message, String);
			var id = (1 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$id, int);

			$es4.$$super($$thisp).$$z();
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(IOError, {EXTENDS:'Error'}, 'flash.errors::IOError');
})();
//flash.errors.IOError


//flash.utils.Dictionary
$es4.$$package('flash.utils').Dictionary = (function ()
{
	//class initializer
	Dictionary.$$cinit = (function ()
	{
		Dictionary.$$cinit = undefined;

	});

	function Dictionary()
	{
		//initialize class if not initialized
		if (Dictionary.$$cinit !== undefined) Dictionary.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof Dictionary) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Dictionary) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('$$isProxy', $$thisp, Boolean);
		$es4.$$private_property('$map', $$thisp);
		$es4.$$private_property('$keys', $$thisp, Array);
		$es4.$$private_property('$values', $$thisp, Array);

		//initializer
		$es4.$$iinit($$thisp, (function ()
		{
			//initialize properties
			$es4.$$set($$this, $$this, $$thisp, '$$isProxy', true, '=');
			$es4.$$set($$this, $$this, $$thisp, '$map', $es4.$$primitive(new ($es4.$$get(global, $$this, $$thisp, 'Map'))()), '=');
			$es4.$$set($$this, $$this, $$thisp, '$keys', [], '=');
			$es4.$$set($$this, $$this, $$thisp, '$values', [], '=');
		}));

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$weakKeys)
		{
			//set default parameter values
			var weakKeys = (0 > arguments.length - 1) ? false : $es4.$$coerce($$$$weakKeys, Boolean);

			if (weakKeys)
			{
				trace('Warning: Dictionary: does not support weakKeys at this time');
			}
		}));

		//method
		$es4.$$public_function('toJSON', $$thisp, (function ($$$$k)
		{
			//set default parameter values
			var k = $es4.$$coerce($$$$k, String);

			throw $es4.$$primitive(new (Error)('Dictionary: does not support toJSON at this time'));
		}));

		//method
		$es4.$$private_function('$$get', $$thisp, (function ($$$$key)
		{
			//set default parameter values
			var key = $$$$key;

			if (!$es4.$$call($$thisp, $$this, $$thisp, '$map', 'has', [key]))
			{
				return undefined;
			}
			return $es4.$$get($es4.$$call($$thisp, $$this, $$thisp, '$map', 'get', [key]), $$this, $$thisp, 'value');
		}));

		//method
		$es4.$$private_function('$$set', $$thisp, (function ($$$$key, $$$$value)
		{
			//set default parameter values
			var key = $$$$key;
			var value = $$$$value;

			$es4.$$call($$thisp, $$this, $$thisp, '$map', 'set', [key, {index:$es4.$$get($$thisp, $$this, $$thisp, '$values', 'length'), value:value}]);
			$es4.$$call($$thisp, $$this, $$thisp, '$keys', 'push', [key]);
			$es4.$$call($$thisp, $$this, $$thisp, '$values', 'push', [value]);
		}));

		//method
		$es4.$$private_function('$$call', $$thisp, (function ($$$$name, $$$$args)
		{
			//set default parameter values
			var name = $$$$name;
			var args = $es4.$$coerce($$$$args, Array);

			return $es4.$$call($es4.$$call($$thisp, $$this, $$thisp, '$map', 'get', [name]), $$this, $$thisp, 'value', 'apply', [$$this, args]);
		}));

		//method
		$es4.$$private_function('$$delete', $$thisp, (function ($$$$key)
		{
			//set default parameter values
			var key = $$$$key;

			if ($es4.$$call($$thisp, $$this, $$thisp, '$map', 'has', [key]))
			{
				var value = $es4.$$call($$thisp, $$this, $$thisp, '$map', 'get', [key]);
				$es4.$$call($$thisp, $$this, $$thisp, '$values', 'splice', [$es4.$$get(value, $$this, $$thisp, 'index'), 1]);
				$es4.$$call($$thisp, $$this, $$thisp, '$keys', 'splice', [$es4.$$get(value, $$this, $$thisp, 'index'), 1]);
			}
			return $es4.$$coerce($es4.$$call($$thisp, $$this, $$thisp, '$map', 'delete', [key]), Boolean);
		}));

		//method
		$es4.$$private_function('$$nextName', $$thisp, (function ($$$$index)
		{
			//set default parameter values
			var index = $es4.$$coerce($$$$index, int);

			return $es4.$$get($$thisp, $$this, $$thisp, '$keys', index - 1);
		}));

		//method
		$es4.$$private_function('$$nextNameIndex', $$thisp, (function ($$$$index)
		{
			//set default parameter values
			var index = $es4.$$coerce($$$$index, int);

			return (index < $es4.$$get($$thisp, $$this, $$thisp, '$values', 'length')) ? index + 1 : 0;
		}));

		//method
		$es4.$$private_function('$$nextValue', $$thisp, (function ($$$$index)
		{
			//set default parameter values
			var index = $es4.$$coerce($$$$index, int);

			return $es4.$$get($$thisp, $$this, $$thisp, '$values', index - 1);
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(Dictionary, null, 'flash.utils::Dictionary');
})();
//flash.utils.Dictionary


//flash.globalization.CurrencyParseResult
$es4.$$package('flash.globalization').CurrencyParseResult = function () { throw new Error('Use of unimplemented class: CurrencyParseResult'); }
//flash.globalization.CurrencyParseResult


//flash.net.Socket
$es4.$$package('flash.net').Socket = (function ()
{
	//imports
	var IOError;
	var Event;
	var EventDispatcher;
	var IOErrorEvent;
	var ProgressEvent;
	var SecurityErrorEvent;
	var ByteArray;
	var Endian;
	var IDataInput;
	var IDataOutput;
	var clearInterval;
	var getTimer;
	var setInterval;
	var ObjectEncoding;

	//class initializer
	Socket.$$cinit = (function ()
	{
		Socket.$$cinit = undefined;

		//initialize imports
		IOError = $es4.$$['flash.errors'].IOError;
		Event = $es4.$$['flash.events'].Event;
		EventDispatcher = $es4.$$['flash.events'].EventDispatcher;
		IOErrorEvent = $es4.$$['flash.events'].IOErrorEvent;
		ProgressEvent = $es4.$$['flash.events'].ProgressEvent;
		SecurityErrorEvent = $es4.$$['flash.events'].SecurityErrorEvent;
		ByteArray = $es4.$$['flash.utils'].ByteArray;
		Endian = $es4.$$['flash.utils'].Endian;
		IDataInput = $es4.$$['flash.utils'].IDataInput;
		IDataOutput = $es4.$$['flash.utils'].IDataOutput;
		clearInterval = $es4.$$['flash.utils'].clearInterval;
		getTimer = $es4.$$['flash.utils'].getTimer;
		setInterval = $es4.$$['flash.utils'].setInterval;
		ObjectEncoding = $es4.$$['flash.net'].ObjectEncoding;
	});

	function Socket()
	{
		//initialize class if not initialized
		if (Socket.$$cinit !== undefined) Socket.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof Socket) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Socket) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('_socket', $$thisp, Object);
		$es4.$$private_property('_writeByteArray', $$thisp, ByteArray);
		$es4.$$private_property('_readByteArray', $$thisp, ByteArray);
		$es4.$$private_property('_endian', $$thisp, String);
		$es4.$$private_property('_connected', $$thisp, Boolean);
		$es4.$$private_property('_connectStartTime', $$thisp, int);
		$es4.$$private_property('_timeout', $$thisp, Number);
		$es4.$$private_property('_intervalID', $$thisp, uint);

		//initializer
		$es4.$$iinit($$thisp, (function ()
		{
			//initialize properties
			$es4.$$set($$this, $$this, $$thisp, '_endian', $es4.$$get(Endian, $$this, $$thisp, 'BIG_ENDIAN'), '=');
			$es4.$$set($$this, $$this, $$thisp, '_connected', false, '=');
			$es4.$$set($$this, $$this, $$thisp, '_timeout', 20000, '=');
		}));

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$host, $$$$port)
		{
			//set default parameter values
			var host = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$host, String);
			var port = (1 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$port, int);

			$es4.$$super($$thisp).$$z();

			if (host !== null)
			{
				$es4.$$call($$this, $$this, $$thisp, 'connect', [host, port]);
			}
		}));

		//method
		$es4.$$public_function('connect', $$thisp, (function ($$$$host, $$$$port)
		{
			//set default parameter values
			var host = $es4.$$coerce($$$$host, String);
			var port = $es4.$$coerce($$$$port, int);

			if ($es4.$$get($$thisp, $$this, $$thisp, '_socket'))
			{
				throw $es4.$$primitive(new (Error)('socket connect already called'));
			}
			if ($es4.$$get($$thisp, $$this, $$thisp, '_intervalID'))
			{
				throw $es4.$$primitive(new (Error)('failed to close interval'));
			}
			$es4.$$set($$thisp, $$this, $$thisp, '_writeByteArray', $es4.$$primitive(new (ByteArray)()), '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_writeByteArray', 'endian', $es4.$$get($$thisp, $$this, $$thisp, '_endian'), '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_readByteArray', $es4.$$primitive(new (ByteArray)()), '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_readByteArray', 'endian', $es4.$$get($$thisp, $$this, $$thisp, '_endian'), '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_connectStartTime', getTimer(), '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_intervalID', setInterval($es4.$$get($$thisp, $$this, $$thisp, 'updateProgress'), 50), '=');
			var uri = $es4.$$call(window, $$this, $$thisp, 'URI', [host]);
			$es4.$$call(uri, $$this, $$thisp, 'port', [port]);
			if (!$es4.$$call(uri, $$this, $$thisp, 'protocol', $es4.$$EMPTY_ARRAY) || $es4.$$call(uri, $$this, $$thisp, 'protocol', $es4.$$EMPTY_ARRAY) === 'http')
			{
				$es4.$$call(uri, $$this, $$thisp, 'protocol', ['ws']);
			}
			if ($es4.$$call(uri, $$this, $$thisp, 'protocol', $es4.$$EMPTY_ARRAY) === 'https')
			{
				$es4.$$call(uri, $$this, $$thisp, 'protocol', ['wss']);
			}
			$es4.$$set($$thisp, $$this, $$thisp, '_socket', $es4.$$primitive(new ($es4.$$get(window, $$this, $$thisp, 'WebSocket'))($es4.$$call(uri, $$this, $$thisp, 'toString', $es4.$$EMPTY_ARRAY))), '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_socket', 'binaryType', 'arraybuffer', '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_socket', 'onopen', function ($$$$event) 
{
				//set default parameter values
				var event = $es4.$$coerce($$$$event, Object);

	$es4.$$set($$thisp, $$this, $$thisp, '_socket', 'onopen', null, '=');
	clearInterval($es4.$$get($$thisp, $$this, $$thisp, '_intervalID'));
	$es4.$$set($$thisp, $$this, $$thisp, '_intervalID', 0, '=');
	$es4.$$set($$thisp, $$this, $$thisp, '_connected', true, '=');
	$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (Event)($es4.$$get(Event, $$this, $$thisp, 'CONNECT')))]);
}
, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_socket', 'onerror', function ($$$$event) 
{
				//set default parameter values
				var event = $es4.$$coerce($$$$event, Object);

	if ($es4.$$get($$thisp, $$this, $$thisp, '_connected'))
	{
		$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (SecurityErrorEvent)($es4.$$get(SecurityErrorEvent, $$this, $$thisp, 'SECURITY_ERROR'), false, false, "SOCKET could not connect to server."))]);
	}
	else
	{
		$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (IOErrorEvent)($es4.$$get(IOErrorEvent, $$this, $$thisp, 'IO_ERROR'), false, false, "SOCKET trouble sending and or receiving data."))]);
	}
}
, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_socket', 'onmessage', function ($$$$event) 
{
				//set default parameter values
				var event = $es4.$$coerce($$$$event, Object);

	var byteArray = $es4.$$primitive(new (ByteArray)());
	$es4.$$call(byteArray, $$this, $$thisp, '$__setArrayBuffer', [$es4.$$get(event, $$this, $$thisp, 'data')]);
	var readByteArray = $es4.$$primitive(new (ByteArray)());
	$es4.$$call(readByteArray, $$this, $$thisp, 'writeBytes', [$es4.$$get($$thisp, $$this, $$thisp, '_readByteArray'), $es4.$$get($$thisp, $$this, $$thisp, '_readByteArray', 'position')]);
	$es4.$$call(readByteArray, $$this, $$thisp, 'writeBytes', [byteArray]);
	$es4.$$set(readByteArray, $$this, $$thisp, 'position', 0, '=');
	$es4.$$set($$thisp, $$this, $$thisp, '_readByteArray', readByteArray, '=');
	$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (ProgressEvent)($es4.$$get(ProgressEvent, $$this, $$thisp, 'SOCKET_DATA'), false, false, $es4.$$get(byteArray, $$this, $$thisp, 'bytesAvailable')))]);
}
, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_socket', 'onclose', function ($$$$event) 
{
				//set default parameter values
				var event = $es4.$$coerce($$$$event, Object);

	$es4.$$call($$this, $$this, $$thisp, 'close', $es4.$$EMPTY_ARRAY);
	$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (Event)($es4.$$get(Event, $$this, $$thisp, 'CLOSE')))]);
}
, '=');
		}));

		//method
		$es4.$$public_function('flush', $$thisp, (function ()
		{
			if (!$es4.$$get($$thisp, $$this, $$thisp, '_connected'))
			{
				throw $es4.$$primitive(new (IOError)('Socket not open'));
			}
			var arrayBuffer = $es4.$$call($$thisp, $$this, $$thisp, '_writeByteArray', '$__getArrayBuffer', $es4.$$EMPTY_ARRAY);
			$es4.$$set($$thisp, $$this, $$thisp, '_writeByteArray', $es4.$$primitive(new (ByteArray)()), '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_writeByteArray', 'endian', $es4.$$get($$thisp, $$this, $$thisp, '_endian'), '=');
			$es4.$$call($$thisp, $$this, $$thisp, '_socket', 'send', [arrayBuffer]);
		}));

		//method
		$es4.$$private_function('updateProgress', $$thisp, (function ()
		{
			if (!$es4.$$get($$thisp, $$this, $$thisp, '_socket'))
			{
				throw $es4.$$primitive(new (Error)('no socket'));
			}
			if ($es4.$$get($$thisp, $$this, $$thisp, '_connected'))
			{
				throw $es4.$$primitive(new (Error)('connected'));
			}
			var diff = getTimer() - $es4.$$get($$thisp, $$this, $$thisp, '_connectStartTime');
			if ($es4.$$get($$thisp, $$this, $$thisp, '_timeout') > diff)
			{
				return;
			}
			$es4.$$call($$this, $$this, $$thisp, 'close', $es4.$$EMPTY_ARRAY);
			throw $es4.$$primitive(new (IOError)('SOCKET connect timeout'));
		}));

		//method
		$es4.$$public_function('close', $$thisp, (function ()
		{
			if (!$es4.$$get($$thisp, $$this, $$thisp, '_socket'))
			{
				throw $es4.$$primitive(new (IOError)('socket was not open'));
			}
			$es4.$$set($$thisp, $$this, $$thisp, '_connected', false, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_writeByteArray', null, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_readByteArray', null, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_connectStartTime', 0, '=');
			if ($es4.$$get($$thisp, $$this, $$thisp, '_intervalID'))
			{
				clearInterval($es4.$$get($$thisp, $$this, $$thisp, '_intervalID'));
				$es4.$$set($$thisp, $$this, $$thisp, '_intervalID', 0, '=');
			}
			$es4.$$set($$thisp, $$this, $$thisp, '_socket', 'onopen', null, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_socket', 'onerror', null, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_socket', 'onmessage', null, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_socket', 'onclose', null, '=');
			$es4.$$call($$thisp, $$this, $$thisp, '_socket', 'close', $es4.$$EMPTY_ARRAY);
			$es4.$$set($$thisp, $$this, $$thisp, '_socket', null, '=');
		}));

		//method
		$es4.$$public_function('readBoolean', $$thisp, (function ()
		{
			return $es4.$$call($$thisp, $$this, $$thisp, '_readByteArray', 'readBoolean', $es4.$$EMPTY_ARRAY);
		}));

		//method
		$es4.$$public_function('readByte', $$thisp, (function ()
		{
			return $es4.$$call($$thisp, $$this, $$thisp, '_readByteArray', 'readByte', $es4.$$EMPTY_ARRAY);
		}));

		//method
		$es4.$$public_function('readBytes', $$thisp, (function ($$$$bytes, $$$$offset, $$$$length)
		{
			//set default parameter values
			var bytes = $es4.$$coerce($$$$bytes, ByteArray);
			var offset = (1 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$offset, uint);
			var length = (2 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$length, uint);

			return $es4.$$call($$thisp, $$this, $$thisp, '_readByteArray', 'readBytes', [bytes, offset, length]);
		}));

		//method
		$es4.$$public_function('readDouble', $$thisp, (function ()
		{
			return $es4.$$call($$thisp, $$this, $$thisp, '_readByteArray', 'readDouble', $es4.$$EMPTY_ARRAY);
		}));

		//method
		$es4.$$public_function('readFloat', $$thisp, (function ()
		{
			return $es4.$$call($$thisp, $$this, $$thisp, '_readByteArray', 'readFloat', $es4.$$EMPTY_ARRAY);
		}));

		//method
		$es4.$$public_function('readInt', $$thisp, (function ()
		{
			return $es4.$$call($$thisp, $$this, $$thisp, '_readByteArray', 'readInt', $es4.$$EMPTY_ARRAY);
		}));

		//method
		$es4.$$public_function('readMultiByte', $$thisp, (function ($$$$length, $$$$charSet)
		{
			//set default parameter values
			var length = $es4.$$coerce($$$$length, uint);
			var charSet = $es4.$$coerce($$$$charSet, String);

			return $es4.$$call($$thisp, $$this, $$thisp, '_readByteArray', 'readMultiByte', [length, charSet]);
		}));

		//method
		$es4.$$public_function('readObject', $$thisp, (function ()
		{
			return $es4.$$call($$thisp, $$this, $$thisp, '_readByteArray', 'readObject', $es4.$$EMPTY_ARRAY);
		}));

		//method
		$es4.$$public_function('readShort', $$thisp, (function ()
		{
			return $es4.$$call($$thisp, $$this, $$thisp, '_readByteArray', 'readShort', $es4.$$EMPTY_ARRAY);
		}));

		//method
		$es4.$$public_function('readUnsignedByte', $$thisp, (function ()
		{
			return $es4.$$call($$thisp, $$this, $$thisp, '_readByteArray', 'readUnsignedByte', $es4.$$EMPTY_ARRAY);
		}));

		//method
		$es4.$$public_function('readUnsignedInt', $$thisp, (function ()
		{
			return $es4.$$call($$thisp, $$this, $$thisp, '_readByteArray', 'readUnsignedInt', $es4.$$EMPTY_ARRAY);
		}));

		//method
		$es4.$$public_function('readUnsignedShort', $$thisp, (function ()
		{
			return $es4.$$call($$thisp, $$this, $$thisp, '_readByteArray', 'readUnsignedShort', $es4.$$EMPTY_ARRAY);
		}));

		//method
		$es4.$$public_function('readUTF', $$thisp, (function ()
		{
			return $es4.$$call($$thisp, $$this, $$thisp, '_readByteArray', 'readUTF', $es4.$$EMPTY_ARRAY);
		}));

		//method
		$es4.$$public_function('readUTFBytes', $$thisp, (function ($$$$length)
		{
			//set default parameter values
			var length = $es4.$$coerce($$$$length, uint);

			return $es4.$$call($$thisp, $$this, $$thisp, '_readByteArray', 'readUTFBytes', [length]);
		}));

		//method
		$es4.$$public_function('writeBoolean', $$thisp, (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			$es4.$$call($$thisp, $$this, $$thisp, '_writeByteArray', 'writeBoolean', [value]);
		}));

		//method
		$es4.$$public_function('writeByte', $$thisp, (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, int);

			$es4.$$call($$thisp, $$this, $$thisp, '_writeByteArray', 'writeByte', [value]);
		}));

		//method
		$es4.$$public_function('writeBytes', $$thisp, (function ($$$$bytes, $$$$offset, $$$$length)
		{
			//set default parameter values
			var bytes = $es4.$$coerce($$$$bytes, ByteArray);
			var offset = (1 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$offset, uint);
			var length = (2 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$length, uint);

			$es4.$$call($$thisp, $$this, $$thisp, '_writeByteArray', 'writeBytes', [bytes, offset, length]);
		}));

		//method
		$es4.$$public_function('writeDouble', $$thisp, (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			$es4.$$call($$thisp, $$this, $$thisp, '_writeByteArray', 'writeDouble', [value]);
		}));

		//method
		$es4.$$public_function('writeFloat', $$thisp, (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			$es4.$$call($$thisp, $$this, $$thisp, '_writeByteArray', 'writeFloat', [value]);
		}));

		//method
		$es4.$$public_function('writeInt', $$thisp, (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, int);

			$es4.$$call($$thisp, $$this, $$thisp, '_writeByteArray', 'writeInt', [value]);
		}));

		//method
		$es4.$$public_function('writeMultiByte', $$thisp, (function ($$$$value, $$$$charSet)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);
			var charSet = $es4.$$coerce($$$$charSet, String);

			$es4.$$call($$thisp, $$this, $$thisp, '_writeByteArray', 'writeMultiByte', [value, charSet]);
		}));

		//method
		$es4.$$public_function('writeObject', $$thisp, (function ($$$$object)
		{
			//set default parameter values
			var object = $$$$object;

			$es4.$$call($$thisp, $$this, $$thisp, '_writeByteArray', 'writeObject', [object]);
		}));

		//method
		$es4.$$public_function('writeShort', $$thisp, (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, int);

			$es4.$$call($$thisp, $$this, $$thisp, '_writeByteArray', 'writeShort', [value]);
		}));

		//method
		$es4.$$public_function('writeUnsignedInt', $$thisp, (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, uint);

			$es4.$$call($$thisp, $$this, $$thisp, '_writeByteArray', 'writeUnsignedInt', [value]);
		}));

		//method
		$es4.$$public_function('writeUTF', $$thisp, (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			$es4.$$call($$thisp, $$this, $$thisp, '_writeByteArray', 'writeUTF', [value]);
		}));

		//method
		$es4.$$public_function('writeUTFBytes', $$thisp, (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			$es4.$$call($$thisp, $$this, $$thisp, '_writeByteArray', 'writeUTFBytes', [value]);
		}));

		//accessor
		$es4.$$public_accessor('bytesAvailable', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_readByteArray', 'bytesAvailable');
		}), null);

		//accessor
		$es4.$$public_accessor('bytesPending', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_writeByteArray', 'bytesAvailable');
		}), null);

		//accessor
		$es4.$$public_accessor('connected', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_connected');
		}), null);

		//accessor
		$es4.$$public_accessor('endian', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_endian');
		}), (function ($$$$type)
		{
			//set default parameter values
			var type = $es4.$$coerce($$$$type, String);

			if ($es4.$$get($$thisp, $$this, $$thisp, '_socket'))
			{
				$es4.$$set($$thisp, $$this, $$thisp, '_writeByteArray', 'endian', type, '=');
				$es4.$$set($$thisp, $$this, $$thisp, '_readByteArray', 'endian', type, '=');
			}
			$es4.$$set($$thisp, $$this, $$thisp, '_endian', type, '=');
		}));

		//accessor
		$es4.$$public_accessor('objectEncoding', $$thisp, (function ()
		{
			return $es4.$$get(ObjectEncoding, $$this, $$thisp, 'AMF3');
		}), (function ($$$$version)
		{
			//set default parameter values
			var version = $es4.$$coerce($$$$version, uint);

			if (version != $es4.$$get(ObjectEncoding, $$this, $$thisp, 'AMF3'))
			{
				throw $es4.$$primitive(new (Error)('desired object encoding not supported at this time'));
			}
		}));

		//accessor
		$es4.$$public_accessor('timeout', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '_timeout'), uint);
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, uint);

			$es4.$$set($$thisp, $$this, $$thisp, '_timeout', value, '=');
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(Socket, {EXTENDS:'flash.events.EventDispatcher', IMPLEMENTS:['flash.utils.IDataInput', 'flash.utils.IDataOutput']}, 'flash.net::Socket');
})();
//flash.net.Socket


//flash.net.NetGroupSendResult
$es4.$$package('flash.net').NetGroupSendResult = function () { throw new Error('Use of unimplemented class: NetGroupSendResult'); }
//flash.net.NetGroupSendResult


//flash.display.StageDisplayState
$es4.$$package('flash.display').StageDisplayState = (function ()
{
	//properties
	StageDisplayState.FULL_SCREEN = "fullScreen";
	StageDisplayState.FULL_SCREEN_INTERACTIVE = "fullScreenInteractive";
	StageDisplayState.NORMAL = "normal";

	//class initializer
	StageDisplayState.$$cinit = (function ()
	{
		StageDisplayState.$$cinit = undefined;

	});

	function StageDisplayState()
	{
		//initialize class if not initialized
		if (StageDisplayState.$$cinit !== undefined) StageDisplayState.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof StageDisplayState) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], StageDisplayState) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(StageDisplayState, null, 'flash.display::StageDisplayState');
})();
//flash.display.StageDisplayState


//flash.text.engine.TextLineValidity
$es4.$$package('flash.text.engine').TextLineValidity = function () { throw new Error('Use of unimplemented class: TextLineValidity'); }
//flash.text.engine.TextLineValidity


//flash.events.NetStatusEvent
$es4.$$package('flash.events').NetStatusEvent = (function ()
{
	//imports
	var Event;
	var NetStatusEvent;

	//properties
	NetStatusEvent.NET_STATUS = "netStatus";

	//class initializer
	NetStatusEvent.$$cinit = (function ()
	{
		NetStatusEvent.$$cinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;
	});

	function NetStatusEvent()
	{
		//initialize class if not initialized
		if (NetStatusEvent.$$cinit !== undefined) NetStatusEvent.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof NetStatusEvent) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], NetStatusEvent) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('$_info', $$thisp, Object);

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$type, $$$$bubbles, $$$$cancelable, $$$$info)
		{
			//set default parameter values
			var type = $es4.$$coerce($$$$type, String);
			var bubbles = (1 > arguments.length - 1) ? false : $es4.$$coerce($$$$bubbles, Boolean);
			var cancelable = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$cancelable, Boolean);
			var info = (3 > arguments.length - 1) ? null : $es4.$$coerce($$$$info, Object);

			$es4.$$super($$thisp).$$z(type, bubbles, cancelable);
			$es4.$$set($$thisp, $$this, $$thisp, '$_info', info, '=');
		}));

		//method
		$es4.$$public_function('clone', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$primitive(new (NetStatusEvent)($es4.$$get($$this, $$this, $$thisp, 'type'), $es4.$$get($$this, $$this, $$thisp, 'bubbles'), $es4.$$get($$this, $$this, $$thisp, 'cancelable'), $es4.$$get($$thisp, $$this, $$thisp, '$_info'))), Event);
		}));

		//method
		$es4.$$public_function('toString', $$thisp, (function ()
		{
			return $es4.$$call($$this, $$this, $$thisp, 'formatToString', ['NetStatusEvent', 'type', 'bubbles', 'cancelable', 'info']);
		}));

		//accessor
		$es4.$$public_accessor('info', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '$_info');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			$es4.$$set($$thisp, $$this, $$thisp, '$_info', value, '=');
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(NetStatusEvent, {EXTENDS:'flash.events.Event'}, 'flash.events::NetStatusEvent');
})();
//flash.events.NetStatusEvent


//flash.display.LineScaleMode
$es4.$$package('flash.display').LineScaleMode = function () { throw new Error('Use of unimplemented class: LineScaleMode'); }
//flash.display.LineScaleMode


//flash.sampler.StackFrame
$es4.$$package('flash.sampler').StackFrame = function () { throw new Error('Use of unimplemented class: StackFrame'); }
//flash.sampler.StackFrame


//flash.text.engine.TextBaseline
$es4.$$package('flash.text.engine').TextBaseline = function () { throw new Error('Use of unimplemented class: TextBaseline'); }
//flash.text.engine.TextBaseline


//fl.controls.ScrollBarDirection
$es4.$$package('fl.controls').ScrollBarDirection = (function ()
{
	//properties
	ScrollBarDirection.VERTICAL = "vertical";
	ScrollBarDirection.HORIZONTAL = "horizontal";

	//class initializer
	ScrollBarDirection.$$cinit = (function ()
	{
		ScrollBarDirection.$$cinit = undefined;

	});

	function ScrollBarDirection()
	{
		//initialize class if not initialized
		if (ScrollBarDirection.$$cinit !== undefined) ScrollBarDirection.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof ScrollBarDirection) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], ScrollBarDirection) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(ScrollBarDirection, null, 'fl.controls::ScrollBarDirection');
})();
//fl.controls.ScrollBarDirection


//flash.display.PixelSnapping
$es4.$$package('flash.display').PixelSnapping = (function ()
{
	//properties
	PixelSnapping.ALWAYS = "always";
	PixelSnapping.AUTO = "auto";
	PixelSnapping.NEVER = "never";

	//class initializer
	PixelSnapping.$$cinit = (function ()
	{
		PixelSnapping.$$cinit = undefined;

	});

	function PixelSnapping()
	{
		//initialize class if not initialized
		if (PixelSnapping.$$cinit !== undefined) PixelSnapping.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof PixelSnapping) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], PixelSnapping) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(PixelSnapping, null, 'flash.display::PixelSnapping');
})();
//flash.display.PixelSnapping


//flash.display.ShaderParameterType
$es4.$$package('flash.display').ShaderParameterType = function () { throw new Error('Use of unimplemented class: ShaderParameterType'); }
//flash.display.ShaderParameterType


//flash.system.Security
$es4.$$package('flash.system').Security = function () { throw new Error('Use of unimplemented class: Security'); }
//flash.system.Security


//flash.text.Font
$es4.$$package('flash.text').Font = (function ()
{
	//class initializer
	Font.$$cinit = (function ()
	{
		Font.$$cinit = undefined;

	});

	//method
	$es4.$$public_function('enumerateFonts', Font, (function ($$$$enumerateDeviceFonts)
	{
		if (Font.$$cinit !== undefined) Font.$$cinit();

		//set default parameter values
		var enumerateDeviceFonts = (0 > arguments.length - 1) ? false : $es4.$$coerce($$$$enumerateDeviceFonts, Boolean);

		return [];
	}));

	//method
	$es4.$$public_function('registerFont', Font, (function ($$$$font)
	{
		if (Font.$$cinit !== undefined) Font.$$cinit();

		//set default parameter values
		var font = $$$$font;

	}));

	function Font()
	{
		//initialize class if not initialized
		if (Font.$$cinit !== undefined) Font.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof Font) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Font) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Font: attempted call to an unimplemented constructor'));
		}));

		//method
		$es4.$$public_function('hasGlyphs', $$thisp, (function ($$$$str)
		{
			//set default parameter values
			var str = $es4.$$coerce($$$$str, String);

			throw $es4.$$primitive(new (Error)('Font: attempted call to an unimplemented function "hasGlyphs"'));
		}));

		//accessor
		$es4.$$public_accessor('fontName', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Font: attempted call to an unimplemented function "fontName"'));
		}), null);

		//accessor
		$es4.$$public_accessor('fontStyle', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Font: attempted call to an unimplemented function "fontStyle"'));
		}), null);

		//accessor
		$es4.$$public_accessor('fontType', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Font: attempted call to an unimplemented function "fontType"'));
		}), null);

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(Font, null, 'flash.text::Font');
})();
//flash.text.Font


//flash.xml.XMLDocument
$es4.$$package('flash.xml').XMLDocument = (function ()
{
	//imports
	var XMLNode;
	var Browser;
	var XMLNodeType;

	//properties
	$es4.$$private_property('$_regex2', XMLDocument, RegExp);
	$es4.$$private_property('$_regex3', XMLDocument, RegExp);

	//class initializer
	XMLDocument.$$cinit = (function ()
	{
		XMLDocument.$$cinit = undefined;

		//initialize imports
		XMLNode = $es4.$$['flash.xml'].XMLNode;
		Browser = $es4.$$['browser'].Browser;
		XMLNodeType = $es4.$$['flash.xml'].XMLNodeType;

		//initialize properties
		XMLDocument.$_regex2 = /<!--[\s\S]*?-->/g;
		XMLDocument.$_regex3 = /\S/;
	});

	//method
	$es4.$$private_function('trim', XMLDocument, (function ($$$$string)
	{
		if (XMLDocument.$$cinit !== undefined) XMLDocument.$$cinit();

		//set default parameter values
		var string = $$$$string;

		if (!string)
		{
			return '';
		}
		return $es4.$$coerce($es4.$$call(string, null, null, 'trim', $es4.$$EMPTY_ARRAY), String);
	}));

	function XMLDocument()
	{
		//initialize class if not initialized
		if (XMLDocument.$$cinit !== undefined) XMLDocument.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof XMLDocument) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], XMLDocument) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('$_source', $$thisp, String);
		$es4.$$public_property('docTypeDecl', $$thisp, Object);
		$es4.$$public_property('idMap', $$thisp, Object);
		$es4.$$public_property('ignoreWhite', $$thisp, Boolean);
		$es4.$$public_property('xmlDecl', $$thisp, Object);

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$source)
		{
			//set default parameter values
			var source = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$source, String);

			if (source)
			{
				$es4.$$call($$this, $$this, $$thisp, 'parseXML', [source]);
			}
			$es4.$$super($$thisp).$$z($es4.$$get(XMLNodeType, $$this, $$thisp, 'ELEMENT_NODE'), source);
		}));

		//method
		$es4.$$public_function('createElement', $$thisp, (function ($$$$name)
		{
			//set default parameter values
			var name = $es4.$$coerce($$$$name, String);

			throw $es4.$$primitive(new (Error)('XMLDocument: attempted call to an unimplemented function "createElement"'));
		}));

		//method
		$es4.$$public_function('createTextNode', $$thisp, (function ($$$$text)
		{
			//set default parameter values
			var text = $es4.$$coerce($$$$text, String);

			throw $es4.$$primitive(new (Error)('XMLDocument: attempted call to an unimplemented function "createTextNode"'));
		}));

		//method
		$es4.$$public_function('parseXML', $$thisp, (function ($$$$source)
		{
			//set default parameter values
			var source = $es4.$$coerce($$$$source, String);

			$es4.$$set($$thisp, $$this, $$thisp, '$_source', source = $es4.$$call(XMLDocument, $$this, $$thisp, 'trim', [$es4.$$call(source, $$this, $$thisp, 'replace', [$es4.$$get(XMLDocument, $$this, $$thisp, '$_regex2'), ''])]), '=');
			var xmlDoc = null;
			var node = null;
			if ($es4.$$call(source, $$this, $$thisp, 'charAt', [0]) !== '<')
			{
				if ($es4.$$call(source, $$this, $$thisp, 'indexOf', ['<![CDATA[']) === 0)
				{
					node = $es4.$$primitive(new (XMLNode)($es4.$$get(XMLNodeType, $$this, $$thisp, 'CDATA_NODE'), source));
				}
				else
				{
					node = $es4.$$primitive(new (XMLNode)($es4.$$get(XMLNodeType, $$this, $$thisp, 'TEXT_NODE'), source));
				}
				$es4.$$set($$this, $$this, $$thisp, '$__childNodes', [node], '=');
				$es4.$$set($$this, $$this, $$thisp, 'firstChild', $es4.$$set($$this, $$this, $$thisp, 'lastChild', node, '='), '=');
				return;
			}
			xmlDoc = $es4.$$call(Browser, $$this, $$thisp, 'domParseXML', [source]);
			node = $es4.$$primitive(new (XMLNode)($es4.$$get(XMLNodeType, $$this, $$thisp, 'ELEMENT_NODE'), $es4.$$get(xmlDoc, $$this, $$thisp, 'documentElement', 'nodevalue')));
			$es4.$$set($$this, $$this, $$thisp, '$__childNodes', [node], '=');
			$es4.$$set($$this, $$this, $$thisp, 'firstChild', $es4.$$set($$this, $$this, $$thisp, 'lastChild', node, '='), '=');
			$es4.$$call($$thisp, $$this, $$thisp, '$_parseRecursiveXML', [node, $es4.$$get(xmlDoc, $$this, $$thisp, 'documentElement')]);
		}));

		//method
		$es4.$$private_function('$_parseRecursiveXML', $$thisp, (function ($$$$node, $$$$domObject)
		{
			//set default parameter values
			var node = $$$$node;
			var domObject = $$$$domObject;

			$es4.$$set(node, $$this, $$thisp, '$__prefix', $es4.$$get(domObject, $$this, $$thisp, 'prefix'), '=');
			$es4.$$set(node, $$this, $$thisp, 'nodeName', $es4.$$get(domObject, $$this, $$thisp, 'nodeName'), '=');
			$es4.$$set(node, $$this, $$thisp, '$__localName', $es4.$$get(domObject, $$this, $$thisp, 'localName'), '=');
			var hasError = false;
			if ($es4.$$get(domObject, $$this, $$thisp, 'nodeName') == 'parsererror')
			{
				$es4.$$set(domObject, $$this, $$thisp, 'nodeName', null, '=');
				$es4.$$set(node, $$this, $$thisp, 'nodeType', $es4.$$get(XMLNodeType, $$this, $$thisp, 'TEXT_NODE'), '=');
				hasError = true;
			}
			if ($es4.$$get(node, $$this, $$thisp, 'nodeName') == "#cdata-section")
			{
				$es4.$$set(node, $$this, $$thisp, 'nodeName', null, '=');
			}
			$es4.$$set(node, $$this, $$thisp, 'nodeValue', $es4.$$get(domObject, $$this, $$thisp, 'nodeValue'), '=');
			if (hasError)
			{
				return;
			}
			var domObjectAttributes = $es4.$$get(domObject, $$this, $$thisp, 'attributes');
			if (domObjectAttributes && $es4.$$get(domObjectAttributes, $$this, $$thisp, 'length'))
			{
				var attributes = $es4.$$get(node, $$this, $$thisp, 'attributes');
				for (var i = $es4.$$coerce($es4.$$get(domObjectAttributes, $$this, $$thisp, 'length'), int); i--;)
				{
					$es4.$$set(attributes, $$this, $$thisp, $es4.$$get(domObjectAttributes, $$this, $$thisp, i, 'nodeName'), $es4.$$get(domObjectAttributes, $$this, $$thisp, i, 'value'), '=');
				}
			}
			var ignoreWhite = $es4.$$get($$this, $$this, $$thisp, 'ignoreWhite');
			var domObjectChildNodes = $es4.$$get(domObject, $$this, $$thisp, 'childNodes');
			if (domObjectChildNodes && $es4.$$get(domObjectChildNodes, $$this, $$thisp, 'length'))
			{
				var childNodes = $es4.$$get(node, $$this, $$thisp, '$__childNodes');
				for (i = $es4.$$coerce($es4.$$get(domObjectChildNodes, $$this, $$thisp, 'length'), int); i--;)
				{
					var innerNode = $es4.$$get(domObjectChildNodes, $$this, $$thisp, i);
					if ($es4.$$get(innerNode, $$this, $$thisp, 'nodeName') == 'parsererror')
					{
						continue;
					}
					if (ignoreWhite)
					{
						if ($es4.$$get(innerNode, $$this, $$thisp, 'nodeType') == $es4.$$get(XMLNodeType, $$this, $$thisp, 'ELEMENT_NODE'))
						{
							$es4.$$set(innerNode, $$this, $$thisp, 'nodeValue', ($es4.$$get(innerNode, $$this, $$thisp, 'nodeValue')) ? $es4.$$call(XMLDocument, $$this, $$thisp, 'trim', [$es4.$$get(innerNode, $$this, $$thisp, 'nodeValue')]) : '', '=');
						}
						else if ($es4.$$get(innerNode, $$this, $$thisp, 'nodeType') == $es4.$$get(XMLNodeType, $$this, $$thisp, 'TEXT_NODE') && !($es4.$$call(($es4.$$get(XMLDocument, $$this, $$thisp, '$_regex3')), $$this, $$thisp, 'test', [$es4.$$get(innerNode, $$this, $$thisp, 'nodeValue')])))
						{
							continue;
						}
					}
					innerNode = $es4.$$primitive(new (XMLNode)($es4.$$get(innerNode, $$this, $$thisp, 'nodeType'), $es4.$$get(innerNode, $$this, $$thisp, 'nodeValue')));
					$es4.$$set(innerNode, $$this, $$thisp, 'parentNode', node, '=');
					$es4.$$call($$thisp, $$this, $$thisp, '$_parseRecursiveXML', [innerNode, $es4.$$get(domObject, $$this, $$thisp, 'childNodes', i)]);
					$es4.$$call(childNodes, $$this, $$thisp, 'unshift', [innerNode]);
				}
				$es4.$$set(node, $$this, $$thisp, 'firstChild', $es4.$$get(childNodes, $$this, $$thisp, 0), '=');
				$es4.$$set(node, $$this, $$thisp, 'lastChild', $es4.$$get(childNodes, $$this, $$thisp, $es4.$$get(childNodes, $$this, $$thisp, 'length') - 1), '=');
			}
		}));

		//method
		$es4.$$public_function('toString', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '$_source');
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(XMLDocument, {EXTENDS:'flash.xml.XMLNode'}, 'flash.xml::XMLDocument');
})();
//flash.xml.XMLDocument


//flash.net.SharedObjectFlushStatus
$es4.$$package('flash.net').SharedObjectFlushStatus = (function ()
{
	//properties
	SharedObjectFlushStatus.FLUSHED = "flushed";
	SharedObjectFlushStatus.PENDING = "pending";

	//class initializer
	SharedObjectFlushStatus.$$cinit = (function ()
	{
		SharedObjectFlushStatus.$$cinit = undefined;

	});

	function SharedObjectFlushStatus()
	{
		//initialize class if not initialized
		if (SharedObjectFlushStatus.$$cinit !== undefined) SharedObjectFlushStatus.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof SharedObjectFlushStatus) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], SharedObjectFlushStatus) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(SharedObjectFlushStatus, null, 'flash.net::SharedObjectFlushStatus');
})();
//flash.net.SharedObjectFlushStatus


//flash.media.SoundTransform
$es4.$$package('flash.media').SoundTransform = (function ()
{
	//class initializer
	SoundTransform.$$cinit = (function ()
	{
		SoundTransform.$$cinit = undefined;

	});

	function SoundTransform()
	{
		//initialize class if not initialized
		if (SoundTransform.$$cinit !== undefined) SoundTransform.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof SoundTransform) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], SoundTransform) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('$_volume', $$thisp, Number);
		$es4.$$private_property('$_panning', $$thisp, Number);

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$volume, $$$$panning)
		{
			//set default parameter values
			var volume = (0 > arguments.length - 1) ? 1 : $es4.$$coerce($$$$volume, Number);
			var panning = (1 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$panning, Number);

			$es4.$$set($$thisp, $$this, $$thisp, '$_volume', volume, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_panning', panning, '=');
		}));

		//accessor
		$es4.$$public_accessor('leftToLeft', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('SoundTransform: attempted call to an unimplemented function "leftToLeft"'));
		}), (function ($$$$leftToLeft)
		{
			//set default parameter values
			var leftToLeft = $es4.$$coerce($$$$leftToLeft, Number);

			throw $es4.$$primitive(new (Error)('SoundTransform: attempted call to an unimplemented function "leftToLeft"'));
		}));

		//accessor
		$es4.$$public_accessor('leftToRight', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('SoundTransform: attempted call to an unimplemented function "leftToRight"'));
		}), (function ($$$$leftToRight)
		{
			//set default parameter values
			var leftToRight = $es4.$$coerce($$$$leftToRight, Number);

			throw $es4.$$primitive(new (Error)('SoundTransform: attempted call to an unimplemented function "leftToRight"'));
		}));

		//accessor
		$es4.$$public_accessor('pan', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('SoundTransform: attempted call to an unimplemented function "pan"'));
		}), (function ($$$$panning)
		{
			//set default parameter values
			var panning = $es4.$$coerce($$$$panning, Number);

			throw $es4.$$primitive(new (Error)('SoundTransform: attempted call to an unimplemented function "pan"'));
		}));

		//accessor
		$es4.$$public_accessor('rightToLeft', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('SoundTransform: attempted call to an unimplemented function "rightToLeft"'));
		}), (function ($$$$rightToLeft)
		{
			//set default parameter values
			var rightToLeft = $es4.$$coerce($$$$rightToLeft, Number);

			throw $es4.$$primitive(new (Error)('SoundTransform: attempted call to an unimplemented function "rightToLeft"'));
		}));

		//accessor
		$es4.$$public_accessor('rightToRight', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('SoundTransform: attempted call to an unimplemented function "rightToRight"'));
		}), (function ($$$$rightToRight)
		{
			//set default parameter values
			var rightToRight = $es4.$$coerce($$$$rightToRight, Number);

			throw $es4.$$primitive(new (Error)('SoundTransform: attempted call to an unimplemented function "rightToRight"'));
		}));

		//accessor
		$es4.$$public_accessor('volume', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '$_volume');
		}), (function ($$$$volume)
		{
			//set default parameter values
			var volume = $es4.$$coerce($$$$volume, Number);

			$es4.$$set($$thisp, $$this, $$thisp, '$_volume', volume, '=');
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(SoundTransform, null, 'flash.media::SoundTransform');
})();
//flash.media.SoundTransform


//flash.display3D.Context3DTriangleFace
$es4.$$package('flash.display3D').Context3DTriangleFace = function () { throw new Error('Use of unimplemented class: Context3DTriangleFace'); }
//flash.display3D.Context3DTriangleFace


//flash.printing.PrintJob
$es4.$$package('flash.printing').PrintJob = (function ()
{
	//imports
	var Sprite;
	var EventDispatcher;
	var Rectangle;
	var PrintJobOptions;

	//class initializer
	PrintJob.$$cinit = (function ()
	{
		PrintJob.$$cinit = undefined;

		//initialize imports
		Sprite = $es4.$$['flash.display'].Sprite;
		EventDispatcher = $es4.$$['flash.events'].EventDispatcher;
		Rectangle = $es4.$$['flash.geom'].Rectangle;
		PrintJobOptions = $es4.$$['flash.printing'].PrintJobOptions;
	});

	//accessor
	$es4.$$public_accessor('isSupported', PrintJob, (function ()
	{
		if (PrintJob.$$cinit !== undefined) PrintJob.$$cinit();

		return true;
	}), null);

	function PrintJob()
	{
		//initialize class if not initialized
		if (PrintJob.$$cinit !== undefined) PrintJob.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof PrintJob) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], PrintJob) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('$_pages', $$thisp, Array);

		//initializer
		$es4.$$iinit($$thisp, (function ()
		{
			//initialize properties
			$es4.$$set($$this, $$this, $$thisp, '$_pages', [], '=');
		}));

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
			$es4.$$super($$thisp).$$z();
		}));

		//method
		$es4.$$public_function('addPage', $$thisp, (function ($$$$sprite, $$$$printArea, $$$$options, $$$$frameNum)
		{
			//set default parameter values
			var sprite = $es4.$$coerce($$$$sprite, Sprite);
			var printArea = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$printArea, Rectangle);
			var options = (2 > arguments.length - 1) ? null : $es4.$$coerce($$$$options, PrintJobOptions);
			var frameNum = (3 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$frameNum, int);

			$es4.$$call($$thisp, $$this, $$thisp, '$_pages', 'push', [{sprite:sprite, printArea:printArea, options:options, frameNum:frameNum}]);
		}));

		//method
		$es4.$$public_function('send', $$thisp, (function ()
		{
			for (var i = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_pages', 'length'), int); i--;)
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_pages', i, 'sprite', '$__domView', 'classList', 'add', ['printable']);
			}
			$es4.$$call(window, $$this, $$thisp, 'print', $es4.$$EMPTY_ARRAY);
		}));

		//method
		$es4.$$public_function('start', $$thisp, (function ()
		{
			var nodes = $es4.$$call(window, $$this, $$thisp, 'document', 'querySelectorAll', ['.printable']);
			for (var i = $es4.$$coerce($es4.$$get(nodes, $$this, $$thisp, 'length'), Number); i--;)
			{
				$es4.$$call(nodes, $$this, $$thisp, i, 'classList', 'remove', ['printable']);
			}
			return true;
		}));

		//accessor
		$es4.$$public_accessor('orientation', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('PrintJob: attempted call to an unimplemented function "orientation"'));
		}), null);

		//accessor
		$es4.$$public_accessor('pageHeight', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('PrintJob: attempted call to an unimplemented function "pageHeight"'));
		}), null);

		//accessor
		$es4.$$public_accessor('pageWidth', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('PrintJob: attempted call to an unimplemented function "pageWidth"'));
		}), null);

		//accessor
		$es4.$$public_accessor('paperHeight', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('PrintJob: attempted call to an unimplemented function "paperHeight"'));
		}), null);

		//accessor
		$es4.$$public_accessor('paperWidth', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('PrintJob: attempted call to an unimplemented function "paperWidth"'));
		}), null);

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(PrintJob, {EXTENDS:'flash.events.EventDispatcher'}, 'flash.printing::PrintJob');
})();
//flash.printing.PrintJob


//flash.events.StageVideoAvailabilityEvent
$es4.$$package('flash.events').StageVideoAvailabilityEvent = function () { throw new Error('Use of unimplemented class: StageVideoAvailabilityEvent'); }
//flash.events.StageVideoAvailabilityEvent


//flash.geom.Orientation3D
$es4.$$package('flash.geom').Orientation3D = function () { throw new Error('Use of unimplemented class: Orientation3D'); }
//flash.geom.Orientation3D


//player.Player
$es4.$$package('player').Player = (function ()
{
	//imports
	var Stage;

	//properties
	$es4.$$private_property('$_domStageContainerID', Player, String);
	$es4.$$private_property('$_frameRate', Player);
	$es4.$$private_property('$_callObject', Player, Object);
	$es4.$$private_property('$_stage', Player, 'flash.display.Stage');
	$es4.$$private_property('$_uid', Player);

	//class initializer
	Player.$$cinit = (function ()
	{
		Player.$$cinit = undefined;

		//initialize imports
		Stage = $es4.$$['flash.display'].Stage;

		//initialize properties
		Player.$_uid = 0;
	});

	//method
	$es4.$$public_function('$__init', Player, (function ($$$$domStageContainerID, $$$$frameRate, $$$$callObject)
	{
		if (Player.$$cinit !== undefined) Player.$$cinit();

		//set default parameter values
		var domStageContainerID = $es4.$$coerce($$$$domStageContainerID, String);
		var frameRate = (1 > arguments.length - 1) ? 7 : $es4.$$coerce($$$$frameRate, int);
		var callObject = (2 > arguments.length - 1) ? null : $es4.$$coerce($$$$callObject, Object);

		$es4.$$set(Player, null, null, '$_domStageContainerID', domStageContainerID, '=');
		$es4.$$set(Player, null, null, '$_frameRate', frameRate, '=');
		$es4.$$set(Player, null, null, '$_callObject', callObject, '=');
	}));

	//method
	$es4.$$public_function('$__getStage', Player, (function ()
	{
		if (Player.$$cinit !== undefined) Player.$$cinit();

		if ($es4.$$get(Player, null, null, '$_stage'))
		{
			return $es4.$$get(Player, null, null, '$_stage');
		}
		var domStageContainer = $es4.$$call(document, null, null, 'getElementById', [$es4.$$get(Player, null, null, '$_domStageContainerID')]);
		var stage = $es4.$$get(Stage, null, null, '$__init')(domStageContainer);
		var setTimeout = $es4.$$coerce($es4.$$get(window, null, null, 'setTimeout'), Function);
		var requestAnimationFrame = $es4.$$coerce($es4.$$get(window, null, null, 'requestAnimationFrame'), Function);
		var beginTime = $es4.$$call($es4.$$primitive(new (Date)()), null, null, 'getTime', $es4.$$EMPTY_ARRAY);
		$es4.$$call(document, null, null, 'addEventListener', ['visibilitychange', onVisibilityChange, false]);

		function onVisibilityChange($$$$event) 
		{
			//set default parameter values
			var event = $$$$event;

			$es4.$$call(stage, null, null, '$__notify', ['visibilityChange', $es4.$$get(document, null, null, 'hidden')]);
			if (!$es4.$$get(window, null, null, 'audioContexts'))
			{
				return;
			}
			for (var i = $es4.$$coerce($es4.$$get(window, null, null, 'audioContexts', 'length'), int); i--;)
			{
				var audioContext = $es4.$$get(window, null, null, 'audioContexts', i);
				try
				{
					if ($es4.$$get(document, null, null, 'hidden'))
					{
						$es4.$$call(audioContext, null, null, 'suspend', $es4.$$EMPTY_ARRAY);
					}
					else
					{
						$es4.$$call(audioContext, null, null, 'resume', $es4.$$EMPTY_ARRAY);
					}
				}
				catch (error)
				{
				}
			}
		}
;

		render();

		function render() 
		{
			setTimeout(onTimeout, 1000 / $es4.$$get(Player, null, null, '$_frameRate'));
			var endTime = $es4.$$call($es4.$$primitive(new (Date)()), null, null, 'getTime', $es4.$$EMPTY_ARRAY);
			var timeElapsed = endTime - beginTime;
			beginTime = endTime;
			$es4.$$call(stage, null, null, '$__notify', ['enterFrame', timeElapsed]);
		}
;

		function onTimeout() 
		{
			if (requestAnimationFrame != null)
			{
				requestAnimationFrame(render);
			}
			else
			{
				render();
			}
		}
;

		return $es4.$$coerce($es4.$$set(Player, null, null, '$_stage', stage, '='), Stage);
	}));

	//method
	$es4.$$public_function('getFrameRate', Player, (function ()
	{
		if (Player.$$cinit !== undefined) Player.$$cinit();

		return $es4.$$coerce($es4.$$get(Player, null, null, '$_frameRate'), int);
	}));

	//method
	$es4.$$public_function('setFrameRate', Player, (function ($$$$frameRate)
	{
		if (Player.$$cinit !== undefined) Player.$$cinit();

		//set default parameter values
		var frameRate = $es4.$$coerce($$$$frameRate, int);

		$es4.$$set(Player, null, null, '$_frameRate', frameRate, '=');
	}));

	//method
	$es4.$$public_function('getUniqueID', Player, (function ($$$$prefix)
	{
		if (Player.$$cinit !== undefined) Player.$$cinit();

		//set default parameter values
		var prefix = (0 > arguments.length - 1) ? 'uid' : $es4.$$coerce($$$$prefix, String);

		return prefix + '_' + $es4.$$set(Player, null, null, '$_uid', 'postfix', '++');
	}));

	//method
	$es4.$$public_function('getDomStageContainerID', Player, (function ()
	{
		if (Player.$$cinit !== undefined) Player.$$cinit();

		return $es4.$$get(Player, null, null, '$_domStageContainerID');
	}));

	//method
	$es4.$$public_function('getCallObject', Player, (function ()
	{
		if (Player.$$cinit !== undefined) Player.$$cinit();

		return $es4.$$get(Player, null, null, '$_callObject');
	}));

	function Player()
	{
		//initialize class if not initialized
		if (Player.$$cinit !== undefined) Player.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof Player) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Player) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(Player, null, 'player::Player');
})();
//player.Player


//flash.system.SystemUpdater
$es4.$$package('flash.system').SystemUpdater = function () { throw new Error('Use of unimplemented class: SystemUpdater'); }
//flash.system.SystemUpdater


//flash.geom.Rectangle
$es4.$$package('flash.geom').Rectangle = (function ()
{
	//imports
	var Point;
	var Rectangle;

	//class initializer
	Rectangle.$$cinit = (function ()
	{
		Rectangle.$$cinit = undefined;

		//initialize imports
		Point = $es4.$$['flash.geom'].Point;
	});

	function Rectangle()
	{
		//initialize class if not initialized
		if (Rectangle.$$cinit !== undefined) Rectangle.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof Rectangle) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Rectangle) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$public_property('height', $$thisp, Number);
		$es4.$$public_property('width', $$thisp, Number);
		$es4.$$public_property('x', $$thisp, Number);
		$es4.$$public_property('y', $$thisp, Number);

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$x, $$$$y, $$$$width, $$$$height)
		{
			//set default parameter values
			var x = (0 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$x, Number);
			var y = (1 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$y, Number);
			var width = (2 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$width, Number);
			var height = (3 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$height, Number);

			$es4.$$set($$this, $$this, $$thisp, 'x', x, '=');
			$es4.$$set($$this, $$this, $$thisp, 'y', y, '=');
			$es4.$$set($$this, $$this, $$thisp, 'width', width, '=');
			$es4.$$set($$this, $$this, $$thisp, 'height', height, '=');
		}));

		//method
		$es4.$$public_function('clone', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$primitive(new (Rectangle)($es4.$$get($$this, $$this, $$thisp, 'x'), $es4.$$get($$this, $$this, $$thisp, 'y'), $es4.$$get($$this, $$this, $$thisp, 'width'), $es4.$$get($$this, $$this, $$thisp, 'height'))), $es4.$$['flash.geom'].Rectangle);
		}));

		//method
		$es4.$$public_function('contains', $$thisp, (function ($$$$x, $$$$y)
		{
			//set default parameter values
			var x = $es4.$$coerce($$$$x, Number);
			var y = $es4.$$coerce($$$$y, Number);

			return $es4.$$coerce($es4.$$get($$this, $$this, $$thisp, 'x') <= x && x <= $es4.$$get($$this, $$this, $$thisp, 'right') && $es4.$$get($$this, $$this, $$thisp, 'y') <= y && y <= $es4.$$get($$this, $$this, $$thisp, 'bottom'), Boolean);
		}));

		//method
		$es4.$$public_function('containsPoint', $$thisp, (function ($$$$point)
		{
			//set default parameter values
			var point = $es4.$$coerce($$$$point, Point);

			return $es4.$$call($$this, $$this, $$thisp, 'contains', [$es4.$$get(point, $$this, $$thisp, 'x'), $es4.$$get(point, $$this, $$thisp, 'y')]);
		}));

		//method
		$es4.$$public_function('containsRect', $$thisp, (function ($$$$rect)
		{
			//set default parameter values
			var rect = $es4.$$coerce($$$$rect, $es4.$$['flash.geom'].Rectangle);

			return $es4.$$call($$this, $$this, $$thisp, 'containsPoint', [$es4.$$get(rect, $$this, $$thisp, 'topLeft')]) && $es4.$$call($$this, $$this, $$thisp, 'containsPoint', [$es4.$$get(rect, $$this, $$thisp, 'bottomRight')]);
		}));

		//method
		$es4.$$public_function('copyFrom', $$thisp, (function ($$$$sourceRect)
		{
			//set default parameter values
			var sourceRect = $es4.$$coerce($$$$sourceRect, $es4.$$['flash.geom'].Rectangle);

			throw $es4.$$primitive(new (Error)('Rectangle: attempted call to an unimplemented function "copyFrom"'));
		}));

		//method
		$es4.$$public_function('equals', $$thisp, (function ($$$$toCompare)
		{
			//set default parameter values
			var toCompare = $es4.$$coerce($$$$toCompare, $es4.$$['flash.geom'].Rectangle);

			return $es4.$$coerce($es4.$$get($$this, $$this, $$thisp, 'x') == $es4.$$get(toCompare, $$this, $$thisp, 'x') && $es4.$$get($$this, $$this, $$thisp, 'y') == $es4.$$get(toCompare, $$this, $$thisp, 'y') && $es4.$$get($$this, $$this, $$thisp, 'width') == $es4.$$get(toCompare, $$this, $$thisp, 'width') && $es4.$$get($$this, $$this, $$thisp, 'height') == $es4.$$get(toCompare, $$this, $$thisp, 'height'), Boolean);
		}));

		//method
		$es4.$$public_function('inflate', $$thisp, (function ($$$$dx, $$$$dy)
		{
			//set default parameter values
			var dx = $es4.$$coerce($$$$dx, Number);
			var dy = $es4.$$coerce($$$$dy, Number);

			$es4.$$set($$this, $$this, $$thisp, 'x', dx, '-=');
			$es4.$$set($$this, $$this, $$thisp, 'y', dy, '-=');
			$es4.$$set($$this, $$this, $$thisp, 'width', (dx * 2), '+=');
			$es4.$$set($$this, $$this, $$thisp, 'height', (dy * 2), '+=');
		}));

		//method
		$es4.$$public_function('inflatePoint', $$thisp, (function ($$$$point)
		{
			//set default parameter values
			var point = $es4.$$coerce($$$$point, Point);

			$es4.$$call($$this, $$this, $$thisp, 'inflate', [$es4.$$get(point, $$this, $$thisp, 'x'), $es4.$$get(point, $$this, $$thisp, 'y')]);
		}));

		//method
		$es4.$$public_function('intersection', $$thisp, (function ($$$$toIntersect)
		{
			//set default parameter values
			var toIntersect = $es4.$$coerce($$$$toIntersect, $es4.$$['flash.geom'].Rectangle);

			var x = $es4.$$call(Math, $$this, $$thisp, 'max', [$es4.$$get($$this, $$this, $$thisp, 'x'), $es4.$$get(toIntersect, $$this, $$thisp, 'x')]);
			var right = $es4.$$call(Math, $$this, $$thisp, 'min', [$es4.$$get($$this, $$this, $$thisp, 'right'), $es4.$$get(toIntersect, $$this, $$thisp, 'right')]);
			if (x <= right)
			{
				var y = $es4.$$call(Math, $$this, $$thisp, 'max', [$es4.$$get($$this, $$this, $$thisp, 'y'), $es4.$$get(toIntersect, $$this, $$thisp, 'y')]);
				var bottom = $es4.$$call(Math, $$this, $$thisp, 'min', [$es4.$$get($$this, $$this, $$thisp, 'bottom'), $es4.$$get(toIntersect, $$this, $$thisp, 'bottom')]);
				if (y <= bottom)
				{
					return $es4.$$coerce($es4.$$primitive(new (Rectangle)(x, y, right - x, bottom - y)), $es4.$$['flash.geom'].Rectangle);
				}
			}
			return $es4.$$coerce($es4.$$primitive(new (Rectangle)()), $es4.$$['flash.geom'].Rectangle);
		}));

		//method
		$es4.$$public_function('intersects', $$thisp, (function ($$$$toIntersect)
		{
			//set default parameter values
			var toIntersect = $es4.$$coerce($$$$toIntersect, $es4.$$['flash.geom'].Rectangle);

			return $es4.$$coerce($es4.$$call(Math, $$this, $$thisp, 'max', [$es4.$$get($$this, $$this, $$thisp, 'x'), $es4.$$get(toIntersect, $$this, $$thisp, 'x')]) <= $es4.$$call(Math, $$this, $$thisp, 'min', [$es4.$$get($$this, $$this, $$thisp, 'right'), $es4.$$get(toIntersect, $$this, $$thisp, 'right')]) && $es4.$$call(Math, $$this, $$thisp, 'max', [$es4.$$get($$this, $$this, $$thisp, 'y'), $es4.$$get(toIntersect, $$this, $$thisp, 'y')]) <= $es4.$$call(Math, $$this, $$thisp, 'min', [$es4.$$get($$this, $$this, $$thisp, 'bottom'), $es4.$$get(toIntersect, $$this, $$thisp, 'bottom')]), Boolean);
		}));

		//method
		$es4.$$public_function('isEmpty', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$this, $$this, $$thisp, 'x') == 0 && $es4.$$get($$this, $$this, $$thisp, 'y') == 0 && $es4.$$get($$this, $$this, $$thisp, 'width') == 0 && $es4.$$get($$this, $$this, $$thisp, 'height') == 0, Boolean);
		}));

		//method
		$es4.$$public_function('offset', $$thisp, (function ($$$$dx, $$$$dy)
		{
			//set default parameter values
			var dx = $es4.$$coerce($$$$dx, Number);
			var dy = $es4.$$coerce($$$$dy, Number);

			$es4.$$set($$this, $$this, $$thisp, 'x', dx, '+=');
			$es4.$$set($$this, $$this, $$thisp, 'y', dy, '+=');
		}));

		//method
		$es4.$$public_function('offsetPoint', $$thisp, (function ($$$$point)
		{
			//set default parameter values
			var point = $es4.$$coerce($$$$point, Point);

			$es4.$$call($$this, $$this, $$thisp, 'offset', [$es4.$$get(point, $$this, $$thisp, 'x'), $es4.$$get(point, $$this, $$thisp, 'y')]);
		}));

		//method
		$es4.$$public_function('setEmpty', $$thisp, (function ()
		{
			$es4.$$set($$this, $$this, $$thisp, 'x', $es4.$$set($$this, $$this, $$thisp, 'y', $es4.$$set($$this, $$this, $$thisp, 'width', $es4.$$set($$this, $$this, $$thisp, 'height', 0, '='), '='), '='), '=');
		}));

		//method
		$es4.$$public_function('setTo', $$thisp, (function ($$$$xa, $$$$ya, $$$$widtha, $$$$heighta)
		{
			//set default parameter values
			var xa = $es4.$$coerce($$$$xa, Number);
			var ya = $es4.$$coerce($$$$ya, Number);
			var widtha = $es4.$$coerce($$$$widtha, Number);
			var heighta = $es4.$$coerce($$$$heighta, Number);

			throw $es4.$$primitive(new (Error)('Rectangle: attempted call to an unimplemented function "setTo"'));
		}));

		//method
		$es4.$$public_function('toString', $$thisp, (function ()
		{
			return '(x=' + $es4.$$get($$this, $$this, $$thisp, 'x') + ', y=' + $es4.$$get($$this, $$this, $$thisp, 'y') + ', w=' + $es4.$$get($$this, $$this, $$thisp, 'width') + ', h=' + $es4.$$get($$this, $$this, $$thisp, 'height') + ')';
		}));

		//method
		$es4.$$public_function('union', $$thisp, (function ($$$$toUnion)
		{
			//set default parameter values
			var toUnion = $es4.$$coerce($$$$toUnion, $es4.$$['flash.geom'].Rectangle);

			if ($es4.$$get(toUnion, $$this, $$thisp, 'width') === 0 || $es4.$$get(toUnion, $$this, $$thisp, 'height') === 0)
			{
				return $es4.$$call($$this, $$this, $$thisp, 'clone', $es4.$$EMPTY_ARRAY);
			}
			if ($es4.$$get($$this, $$this, $$thisp, 'width') === 0 || $es4.$$get($$this, $$this, $$thisp, 'height') === 0)
			{
				return $es4.$$call(toUnion, $$this, $$thisp, 'clone', $es4.$$EMPTY_ARRAY);
			}
			var x = $es4.$$call(Math, $$this, $$thisp, 'min', [$es4.$$get($$this, $$this, $$thisp, 'x'), $es4.$$get(toUnion, $$this, $$thisp, 'x')]);
			var y = $es4.$$call(Math, $$this, $$thisp, 'min', [$es4.$$get($$this, $$this, $$thisp, 'y'), $es4.$$get(toUnion, $$this, $$thisp, 'y')]);
			return $es4.$$coerce($es4.$$primitive(new (Rectangle)(x, y, $es4.$$call(Math, $$this, $$thisp, 'max', [$es4.$$get($$this, $$this, $$thisp, 'right'), $es4.$$get(toUnion, $$this, $$thisp, 'right')]) - x, $es4.$$call(Math, $$this, $$thisp, 'max', [$es4.$$get($$this, $$this, $$thisp, 'bottom'), $es4.$$get(toUnion, $$this, $$thisp, 'bottom')]) - y)), $es4.$$['flash.geom'].Rectangle);
		}));

		//accessor
		$es4.$$public_accessor('bottom', $$thisp, (function ()
		{
			return $es4.$$get($$this, $$this, $$thisp, 'y') + $es4.$$get($$this, $$this, $$thisp, 'height');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			$es4.$$set($$this, $$this, $$thisp, 'height', $es4.$$call(Math, $$this, $$thisp, 'max', [value - $es4.$$get($$this, $$this, $$thisp, 'y'), 0]), '=');
		}));

		//accessor
		$es4.$$public_accessor('bottomRight', $$thisp, (function ()
		{
			return $es4.$$primitive(new (Point)($es4.$$get($$this, $$this, $$thisp, 'right'), $es4.$$get($$this, $$this, $$thisp, 'bottom')));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Point);

			$es4.$$set($$this, $$this, $$thisp, 'right', $es4.$$get(value, $$this, $$thisp, 'x'), '=');
			$es4.$$set($$this, $$this, $$thisp, 'bottom', $es4.$$get(value, $$this, $$thisp, 'y'), '=');
		}));

		//accessor
		$es4.$$public_accessor('left', $$thisp, (function ()
		{
			return $es4.$$get($$this, $$this, $$thisp, 'x');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			$es4.$$set($$this, $$this, $$thisp, 'width', $es4.$$get($$this, $$this, $$thisp, 'x') - value, '+=');
			$es4.$$set($$this, $$this, $$thisp, 'x', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('right', $$thisp, (function ()
		{
			return $es4.$$get($$this, $$this, $$thisp, 'x') + $es4.$$get($$this, $$this, $$thisp, 'width');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			$es4.$$set($$this, $$this, $$thisp, 'width', value - $es4.$$get($$this, $$this, $$thisp, 'x'), '=');
		}));

		//accessor
		$es4.$$public_accessor('size', $$thisp, (function ()
		{
			return $es4.$$primitive(new (Point)($es4.$$get($$this, $$this, $$thisp, 'width'), $es4.$$get($$this, $$this, $$thisp, 'height')));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Point);

			$es4.$$set($$this, $$this, $$thisp, 'width', $es4.$$get(value, $$this, $$thisp, 'x'), '=');
			$es4.$$set($$this, $$this, $$thisp, 'height', $es4.$$get(value, $$this, $$thisp, 'y'), '=');
		}));

		//accessor
		$es4.$$public_accessor('top', $$thisp, (function ()
		{
			return $es4.$$get($$this, $$this, $$thisp, 'y');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			$es4.$$set($$this, $$this, $$thisp, 'height', $es4.$$get($$this, $$this, $$thisp, 'y') - value, '+=');
			$es4.$$set($$this, $$this, $$thisp, 'y', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('topLeft', $$thisp, (function ()
		{
			return $es4.$$primitive(new (Point)($es4.$$get($$this, $$this, $$thisp, 'x'), $es4.$$get($$this, $$this, $$thisp, 'y')));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Point);

			$es4.$$set($$this, $$this, $$thisp, 'left', $es4.$$get(value, $$this, $$thisp, 'x'), '=');
			$es4.$$set($$this, $$this, $$thisp, 'top', $es4.$$get(value, $$this, $$thisp, 'y'), '=');
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(Rectangle, null, 'flash.geom::Rectangle');
})();
//flash.geom.Rectangle


//flash.events.DRMAuthenticationCompleteEvent
$es4.$$package('flash.events').DRMAuthenticationCompleteEvent = function () { throw new Error('Use of unimplemented class: DRMAuthenticationCompleteEvent'); }
//flash.events.DRMAuthenticationCompleteEvent


//flash.display3D.Context3D
$es4.$$package('flash.display3D').Context3D = function () { throw new Error('Use of unimplemented class: Context3D'); }
//flash.display3D.Context3D


//flash.text.engine.TabAlignment
$es4.$$package('flash.text.engine').TabAlignment = function () { throw new Error('Use of unimplemented class: TabAlignment'); }
//flash.text.engine.TabAlignment


//flash.events.SyncEvent
$es4.$$package('flash.events').SyncEvent = function () { throw new Error('Use of unimplemented class: SyncEvent'); }
//flash.events.SyncEvent


//flash.text.engine.LigatureLevel
$es4.$$package('flash.text.engine').LigatureLevel = function () { throw new Error('Use of unimplemented class: LigatureLevel'); }
//flash.text.engine.LigatureLevel


//flash.display.GraphicsTrianglePath
$es4.$$package('flash.display').GraphicsTrianglePath = function () { throw new Error('Use of unimplemented class: GraphicsTrianglePath'); }
//flash.display.GraphicsTrianglePath


//flash.geom.Matrix3D
$es4.$$package('flash.geom').Matrix3D = function () { throw new Error('Use of unimplemented class: Matrix3D'); }
//flash.geom.Matrix3D


//flash.errors.ScriptTimeoutError
$es4.$$package('flash.errors').ScriptTimeoutError = function () { throw new Error('Use of unimplemented class: ScriptTimeoutError'); }
//flash.errors.ScriptTimeoutError


//flash.text.engine.FontWeight
$es4.$$package('flash.text.engine').FontWeight = function () { throw new Error('Use of unimplemented class: FontWeight'); }
//flash.text.engine.FontWeight


//flash.system.LoaderContext
$es4.$$package('flash.system').LoaderContext = (function ()
{
	//imports
	var DisplayObjectContainer;
	var ApplicationDomain;
	var SecurityDomain;

	//class initializer
	LoaderContext.$$cinit = (function ()
	{
		LoaderContext.$$cinit = undefined;

		//initialize imports
		DisplayObjectContainer = $es4.$$['flash.display'].DisplayObjectContainer;
		ApplicationDomain = $es4.$$['flash.system'].ApplicationDomain;
		SecurityDomain = $es4.$$['flash.system'].SecurityDomain;
	});

	function LoaderContext()
	{
		//initialize class if not initialized
		if (LoaderContext.$$cinit !== undefined) LoaderContext.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof LoaderContext) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], LoaderContext) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$public_property('allowCodeImport', $$thisp, Boolean);
		$es4.$$public_property('applicationDomain', $$thisp, ApplicationDomain);
		$es4.$$public_property('checkPolicyFile', $$thisp, Boolean);
		$es4.$$public_property('imageDecodingPolicy', $$thisp, String);
		$es4.$$public_property('parameters', $$thisp, Object);
		$es4.$$public_property('requestedContentParent', $$thisp, DisplayObjectContainer);
		$es4.$$public_property('securityDomain', $$thisp, SecurityDomain);

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$checkPolicyFile, $$$$applicationDomain, $$$$securityDomain)
		{
			//set default parameter values
			var checkPolicyFile = (0 > arguments.length - 1) ? false : $es4.$$coerce($$$$checkPolicyFile, Boolean);
			var applicationDomain = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$applicationDomain, ApplicationDomain);
			var securityDomain = (2 > arguments.length - 1) ? null : $es4.$$coerce($$$$securityDomain, SecurityDomain);

			$es4.$$set($$this, $$this, $$thisp, 'applicationDomain', applicationDomain || $es4.$$primitive(new (ApplicationDomain)()), '=');
		}));

		//accessor
		$es4.$$public_accessor('allowLoadBytesCodeExecution', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('LoaderContext: attempted call to an unimplemented function "allowLoadBytesCodeExecution"'));
		}), (function ($$$$allow)
		{
			//set default parameter values
			var allow = $es4.$$coerce($$$$allow, Boolean);

			throw $es4.$$primitive(new (Error)('LoaderContext: attempted call to an unimplemented function "allowLoadBytesCodeExecution"'));
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(LoaderContext, null, 'flash.system::LoaderContext');
})();
//flash.system.LoaderContext


//flash.display.InterpolationMethod
$es4.$$package('flash.display').InterpolationMethod = function () { throw new Error('Use of unimplemented class: InterpolationMethod'); }
//flash.display.InterpolationMethod


//flash.net.SharedObject
$es4.$$package('flash.net').SharedObject = (function ()
{
	//imports
	var EventDispatcher;
	var NetConnection;
	var SharedObject;

	//properties
	$es4.$$protected_property('$_dataAssociations', SharedObject, Object);

	//class initializer
	SharedObject.$$cinit = (function ()
	{
		SharedObject.$$cinit = undefined;

		//initialize imports
		EventDispatcher = $es4.$$['flash.events'].EventDispatcher;
		NetConnection = $es4.$$['flash.net'].NetConnection;

		//initialize properties
		SharedObject.$_dataAssociations = {};
	});

	//method
	$es4.$$public_function('deleteAll', SharedObject, (function ($$$$url)
	{
		if (SharedObject.$$cinit !== undefined) SharedObject.$$cinit();

		//set default parameter values
		var url = $es4.$$coerce($$$$url, String);

		throw $es4.$$primitive(new (Error)('SharedObject: attempted call to an unimplemented function "deleteAll"'));
	}));

	//method
	$es4.$$public_function('getDiskUsage', SharedObject, (function ($$$$url)
	{
		if (SharedObject.$$cinit !== undefined) SharedObject.$$cinit();

		//set default parameter values
		var url = $es4.$$coerce($$$$url, String);

		throw $es4.$$primitive(new (Error)('SharedObject: attempted call to an unimplemented function "getDiskUsage"'));
	}));

	//method
	$es4.$$public_function('getLocal', SharedObject, (function ($$$$name, $$$$localPath, $$$$secure)
	{
		if (SharedObject.$$cinit !== undefined) SharedObject.$$cinit();

		//set default parameter values
		var name = $es4.$$coerce($$$$name, String);
		var localPath = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$localPath, String);
		var secure = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$secure, Boolean);

		return $es4.$$coerce($es4.$$primitive(new (SharedObject)(name, localPath, secure)), $es4.$$['flash.net'].SharedObject);
	}));

	//method
	$es4.$$public_function('getRemote', SharedObject, (function ($$$$name, $$$$remotePath, $$$$persistence, $$$$secure)
	{
		if (SharedObject.$$cinit !== undefined) SharedObject.$$cinit();

		//set default parameter values
		var name = $es4.$$coerce($$$$name, String);
		var remotePath = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$remotePath, String);
		var persistence = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$persistence, Object);
		var secure = (3 > arguments.length - 1) ? false : $es4.$$coerce($$$$secure, Boolean);

		throw $es4.$$primitive(new (Error)('SharedObject: attempted call to an unimplemented function "getRemote"'));
	}));

	//method
	$es4.$$protected_function('$_setCookie', SharedObject, (function ($$$$cookie_name, $$$$cookie_value, $$$$extendDays)
	{
		if (SharedObject.$$cinit !== undefined) SharedObject.$$cinit();

		//set default parameter values
		var cookie_name = $es4.$$coerce($$$$cookie_name, String);
		var cookie_value = $es4.$$coerce($$$$cookie_value, String);
		var extendDays = (2 > arguments.length - 1) ? -1 : $es4.$$coerce($$$$extendDays, int);

		var exdate = $es4.$$coerce($es4.$$primitive(new (Date)()), Date);
		$es4.$$call(exdate, null, null, 'setDate', [$es4.$$call(exdate, null, null, 'getDate', $es4.$$EMPTY_ARRAY) + extendDays]);
		var c_value = escape(cookie_value) + ((extendDays == -1) ? "" : "; expires=" + $es4.$$call(exdate, null, null, 'toUTCString', $es4.$$EMPTY_ARRAY));
		return $es4.$$coerce($es4.$$set(document, null, null, 'cookie', cookie_name + "=" + c_value, '='), String);
	}));

	//method
	$es4.$$protected_function('$_deleteCookie', SharedObject, (function ($$$$name)
	{
		if (SharedObject.$$cinit !== undefined) SharedObject.$$cinit();

		//set default parameter values
		var name = $es4.$$coerce($$$$name, String);

		$es4.$$set(document, null, null, 'cookie', name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;', '=');
	}));

	//method
	$es4.$$protected_function('$_getCookie', SharedObject, (function ($$$$name)
	{
		if (SharedObject.$$cinit !== undefined) SharedObject.$$cinit();

		//set default parameter values
		var name = $es4.$$coerce($$$$name, String);

		var nameEQ = name + "=";
		var ca = $es4.$$coerce($es4.$$call(document, null, null, 'cookie', 'split', [';']), Array);
		for (var i = 0; i < $es4.$$get(ca, null, null, 'length'); i++)
		{
			var c = $es4.$$coerce($es4.$$get(ca, null, null, i), String);
			while ($es4.$$call(c, null, null, 'charAt', [0]) == ' ')
			{
				c = $es4.$$call(c, null, null, 'substring', [1, $es4.$$get(c, null, null, 'length')]);
			}
			if ($es4.$$call(c, null, null, 'indexOf', [nameEQ]) == 0)
			{
				return unescape($es4.$$call(c, null, null, 'substring', [$es4.$$get(nameEQ, null, null, 'length'), $es4.$$get(c, null, null, 'length')]));
			}
		}
		return null;
	}));

	//accessor
	$es4.$$public_accessor('defaultObjectEncoding', SharedObject, (function ()
	{
		if (SharedObject.$$cinit !== undefined) SharedObject.$$cinit();

		throw $es4.$$primitive(new (Error)('SharedObject: attempted call to an unimplemented function "defaultObjectEncoding"'));
	}), (function ($$$$version)
	{
		if (SharedObject.$$cinit !== undefined) SharedObject.$$cinit();

		//set default parameter values
		var version = $es4.$$coerce($$$$version, uint);

		throw $es4.$$primitive(new (Error)('SharedObject: attempted call to an unimplemented function "defaultObjectEncoding"'));
	}));

	function SharedObject()
	{
		//initialize class if not initialized
		if (SharedObject.$$cinit !== undefined) SharedObject.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof SharedObject) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], SharedObject) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$protected_property('$_name', $$thisp, String);
		$es4.$$protected_property('$_localPath', $$thisp, String);
		$es4.$$protected_property('$_secure', $$thisp, Boolean);
		$es4.$$protected_property('$_data', $$thisp, Object);

		//initializer
		$es4.$$iinit($$thisp, (function ()
		{
			//initialize properties
			$es4.$$set($$this, $$this, $$thisp, '$_data', {}, '=');
		}));

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$name, $$$$localPath, $$$$secure)
		{
			//set default parameter values
			var name = (0 > arguments.length - 1) ? "" : $es4.$$coerce($$$$name, String);
			var localPath = (1 > arguments.length - 1) ? "" : $es4.$$coerce($$$$localPath, String);
			var secure = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$secure, Boolean);

			$es4.$$super($$thisp).$$z();

			$es4.$$set($$this, $$this, $$thisp, '$_name', name, '=');
			$es4.$$set($$this, $$this, $$thisp, '$_localPath', localPath != null ? localPath : "", '=');
			$es4.$$set($$this, $$this, $$thisp, '$_secure', secure, '=');
			if ($es4.$$get(SharedObject, $$this, $$thisp, '$_dataAssociations', name + "___" + $es4.$$get($$this, $$this, $$thisp, '$_localPath')))
			{
				$es4.$$set($$this, $$this, $$thisp, '$_data', $es4.$$get(SharedObject, $$this, $$thisp, '$_dataAssociations', name + "___" + $es4.$$get($$this, $$this, $$thisp, '$_localPath')), '=');
				return;
			}
			var cookie = $es4.$$call(SharedObject, $$this, $$thisp, '$_getCookie', [name + "___" + $es4.$$get($$this, $$this, $$thisp, '$_localPath')]);
			if (cookie != null)
			{
				$es4.$$set($$this, $$this, $$thisp, '$_data', $es4.$$call(JSON, $$this, $$thisp, 'parse', [cookie]), '=');
			}
			else
			{
				$es4.$$set($$this, $$this, $$thisp, '$_data', {}, '=');
			}
			$es4.$$set(SharedObject, $$this, $$thisp, '$_dataAssociations', name + "___" + $es4.$$get($$this, $$this, $$thisp, '$_localPath'), $es4.$$get($$this, $$this, $$thisp, '$_data'), '=');
		}));

		//method
		$es4.$$public_function('clear', $$thisp, (function ()
		{
			for (var $$i0 = ($es4.$$get($$this, $$this, $$thisp, '$_data') || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i0 != 0; $$i0 = $es4.$$get($$this, $$this, $$thisp, '$_data').$$nextNameIndex($$i0))
			{
				var prop = $es4.$$get($$this, $$this, $$thisp, '$_data').$$nextName($$i0);

				$es4.$$delete($$this, $$this, $$thisp, '$_data', prop);
			}
			$es4.$$call(SharedObject, $$this, $$thisp, '$_deleteCookie', [$es4.$$get($$this, $$this, $$thisp, '$_name') + "___" + $es4.$$get($$this, $$this, $$thisp, '$_localPath')]);
		}));

		//method
		$es4.$$public_function('close', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('SharedObject: attempted call to an unimplemented function "close"'));
		}));

		//method
		$es4.$$public_function('connect', $$thisp, (function ($$$$myConnection, $$$$params)
		{
			//set default parameter values
			var myConnection = $es4.$$coerce($$$$myConnection, NetConnection);
			var params = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$params, String);

			throw $es4.$$primitive(new (Error)('SharedObject: attempted call to an unimplemented function "connect"'));
		}));

		//method
		$es4.$$public_function('flush', $$thisp, (function ($$$$minDiskSpace)
		{
			//set default parameter values
			var minDiskSpace = (0 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$minDiskSpace, int);

			return $es4.$$call(SharedObject, $$this, $$thisp, '$_setCookie', [$es4.$$get($$this, $$this, $$thisp, '$_name') + "___" + $es4.$$get($$this, $$this, $$thisp, '$_localPath'), $es4.$$call(JSON, $$this, $$thisp, 'stringify', [$es4.$$get($$this, $$this, $$thisp, '$_data')]), 99999]);
		}));

		//method
		$es4.$$public_function('send', $$thisp, (function ($$$$rest)
		{
			//set default parameter values
			for (var $$i = 0, $$length = arguments.length, rest = new Array($$length - 0); $$i < $$length; $$i += 1) rest[$$i - 0] = arguments[$$i];

			throw $es4.$$primitive(new (Error)('SharedObject: attempted call to an unimplemented function "send"'));
		}));

		//method
		$es4.$$public_function('setDirty', $$thisp, (function ($$$$propertyName)
		{
			//set default parameter values
			var propertyName = $es4.$$coerce($$$$propertyName, String);

			throw $es4.$$primitive(new (Error)('SharedObject: attempted call to an unimplemented function "setDirty"'));
		}));

		//method
		$es4.$$public_function('setProperty', $$thisp, (function ($$$$propertyName, $$$$value)
		{
			//set default parameter values
			var propertyName = $es4.$$coerce($$$$propertyName, String);
			var value = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$value, Object);

			throw $es4.$$primitive(new (Error)('SharedObject: attempted call to an unimplemented function "setProperty"'));
		}));

		//accessor
		$es4.$$public_accessor('client', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('SharedObject: attempted call to an unimplemented function "client"'));
		}), (function ($$$$object)
		{
			//set default parameter values
			var object = $es4.$$coerce($$$$object, Object);

			throw $es4.$$primitive(new (Error)('SharedObject: attempted call to an unimplemented function "client"'));
		}));

		//accessor
		$es4.$$public_accessor('data', $$thisp, (function ()
		{
			return $es4.$$get($$this, $$this, $$thisp, '$_data');
		}), null);

		//accessor
		$es4.$$public_accessor('fps', $$thisp, null, (function ($$$$updatesPerSecond)
		{
			//set default parameter values
			var updatesPerSecond = $es4.$$coerce($$$$updatesPerSecond, Number);

			throw $es4.$$primitive(new (Error)('SharedObject: attempted call to an unimplemented function "fps"'));
		}));

		//accessor
		$es4.$$public_accessor('objectEncoding', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('SharedObject: attempted call to an unimplemented function "objectEncoding"'));
		}), (function ($$$$version)
		{
			//set default parameter values
			var version = $es4.$$coerce($$$$version, uint);

			throw $es4.$$primitive(new (Error)('SharedObject: attempted call to an unimplemented function "objectEncoding"'));
		}));

		//accessor
		$es4.$$public_accessor('size', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('SharedObject: attempted call to an unimplemented function "size"'));
		}), null);

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(SharedObject, {EXTENDS:'flash.events.EventDispatcher'}, 'flash.net::SharedObject');
})();
//flash.net.SharedObject


//flash.text.engine.TextRotation
$es4.$$package('flash.text.engine').TextRotation = function () { throw new Error('Use of unimplemented class: TextRotation'); }
//flash.text.engine.TextRotation


//flash.display3D.Context3DBufferUsage
$es4.$$package('flash.display3D').Context3DBufferUsage = function () { throw new Error('Use of unimplemented class: Context3DBufferUsage'); }
//flash.display3D.Context3DBufferUsage


//flash.events.Event
$es4.$$package('flash.events').Event = (function ()
{
	//imports
	var Event;

	//properties
	Event.ACTIVATE = "activate";
	Event.ADDED = "added";
	Event.ADDED_TO_STAGE = "addedToStage";
	Event.CANCEL = "cancel";
	Event.CHANGE = "change";
	Event.CLEAR = "clear";
	Event.CLOSE = "close";
	Event.COMPLETE = "complete";
	Event.CONNECT = "connect";
	Event.COPY = "copy";
	Event.CUT = "cut";
	Event.DEACTIVATE = "deactivate";
	Event.ENTER_FRAME = "enterFrame";
	Event.EXIT_FRAME = "exitFrame";
	Event.FRAME_CONSTRUCTED = "frameConstructed";
	Event.FULLSCREEN = "fullScreen";
	Event.ID3 = "id3";
	Event.INIT = "init";
	Event.MOUSE_LEAVE = "mouseLeave";
	Event.OPEN = "open";
	Event.PASTE = "paste";
	Event.REMOVED = "removed";
	Event.REMOVED_FROM_STAGE = "removedFromStage";
	Event.RENDER = "render";
	Event.RESIZE = "resize";
	Event.SCROLL = "scroll";
	Event.SELECT = "select";
	Event.SELECT_ALL = "selectAll";
	Event.SOUND_COMPLETE = "soundComplete";
	Event.TAB_CHILDREN_CHANGE = "tabChildrenChange";
	Event.TAB_ENABLED_CHANGE = "tabEnabledChange";
	Event.TAB_INDEX_CHANGE = "tabIndexChange";
	Event.TEXT_INTERACTION_MODE_CHANGE = "textInteractionModeChange";
	Event.UNLOAD = "unload";

	//class initializer
	Event.$$cinit = (function ()
	{
		Event.$$cinit = undefined;

		//initialize imports
	});

	//method
	$es4.$$private_function('$_withTarget', Event, (function ($$$$event, $$$$target)
	{
		if (Event.$$cinit !== undefined) Event.$$cinit();

		//set default parameter values
		var event = $es4.$$coerce($$$$event, $es4.$$['flash.events'].Event);
		var target = $es4.$$coerce($$$$target, Object);

		var properties = $es4.$$call(event, null, null, '$__properties', $es4.$$EMPTY_ARRAY);
		event = $es4.$$get(properties, null, null, 'EventScope', '$_target') ? $es4.$$call(event, null, null, 'clone', $es4.$$EMPTY_ARRAY) : event;
		$es4.$$set($es4.$$call(event, null, null, '$__properties', $es4.$$EMPTY_ARRAY), null, null, 'EventScope', '$_target', target, '=');
		return event;
	}));

	function Event()
	{
		//initialize class if not initialized
		if (Event.$$cinit !== undefined) Event.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof Event) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Event) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('$_properties', $$thisp);

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$type, $$$$bubbles, $$$$cancelable)
		{
			//set default parameter values
			var type = $es4.$$coerce($$$$type, String);
			var bubbles = (1 > arguments.length - 1) ? false : $es4.$$coerce($$$$bubbles, Boolean);
			var cancelable = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$cancelable, Boolean);

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties') === undefined)
			{
				$es4.$$call($$this, $$this, $$thisp, '$__properties', [{}]);
			}
			var properties = $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'EventScope');
			$es4.$$set(properties, $$this, $$thisp, '$_type', type, '=');
			$es4.$$set(properties, $$this, $$thisp, '$_bubbles', bubbles, '=');
			$es4.$$set(properties, $$this, $$thisp, '$_cancelable', cancelable, '=');
		}));

		//method
		$es4.$$public_function('$__properties', $$thisp, (function ($$$$object)
		{
			//set default parameter values
			var object = (0 > arguments.length - 1) ? null : $$$$object;

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties') === undefined)
			{
				$es4.$$set(object, $$this, $$thisp, 'EventScope', {$_target:null, $_currentTarget:null, $_eventPhase:null, $_withTarget:$es4.$$get(Event, $$this, $$thisp, '$_withTarget'), $_originalTarget:null}, '=');
				$es4.$$set(object, $$this, $$thisp, 'TLScope', $$this, '=');
				return $es4.$$set($$thisp, $$this, $$thisp, '$_properties', object, '=');
			}
			return $es4.$$get($$thisp, $$this, $$thisp, '$_properties');
		}));

		//method
		$es4.$$public_function('clone', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$primitive(new (Event)($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'EventScope', '$_type'), $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'EventScope', '$_bubbles'), $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'EventScope', '$_cancelable'))), $es4.$$['flash.events'].Event);
		}));

		//method
		$es4.$$public_function('formatToString', $$thisp, (function ($$$$className, $$$$args)
		{
			//set default parameter values
			var className = $es4.$$coerce($$$$className, String);
			for (var $$i = 1, $$length = arguments.length, args = new Array($$length - 1); $$i < $$length; $$i += 1) args[$$i - 1] = arguments[$$i];

			var str = '[' + className;
			for (var i = 0; i < $es4.$$get(args, $$this, $$thisp, 'length'); i++)
			{
				str += ' ' + $es4.$$get(args, $$this, $$thisp, i) + '="' + $es4.$$get($$this, $$this, $$thisp, $es4.$$get(args, $$this, $$thisp, i)) + '"';
			}
			str += ']';
			return str;
		}));

		//method
		$es4.$$public_function('isDefaultPrevented', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'EventScope', '$_defaultPrevented'), Boolean);
		}));

		//method
		$es4.$$public_function('preventDefault', $$thisp, (function ()
		{
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'EventScope', '$_cancelable'))
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'EventScope', '$_defaultPrevented', true, '=');
			}
		}));

		//method
		$es4.$$public_function('stopImmediatePropagation', $$thisp, (function ()
		{
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'EventScope', '$_immediatePropagationStopped', true, '=');
		}));

		//method
		$es4.$$public_function('stopPropagation', $$thisp, (function ()
		{
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'EventScope', '$_propagationStopped', true, '=');
		}));

		//method
		$es4.$$public_function('toString', $$thisp, (function ()
		{
			return $es4.$$call($$this, $$this, $$thisp, 'formatToString', ['Event', 'type', 'bubbles', 'cancelable']);
		}));

		//accessor
		$es4.$$public_accessor('bubbles', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'EventScope', '$_bubbles'), Boolean);
		}), null);

		//accessor
		$es4.$$public_accessor('cancelable', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'EventScope', '$_cancelable'), Boolean);
		}), null);

		//accessor
		$es4.$$public_accessor('currentTarget', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'EventScope', '$_currentTarget');
		}), null);

		//accessor
		$es4.$$public_accessor('eventPhase', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'EventScope', '$_eventPhase'), uint);
		}), null);

		//accessor
		$es4.$$public_accessor('target', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'EventScope', '$_target');
		}), null);

		//accessor
		$es4.$$public_accessor('type', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'EventScope', '$_type'), String);
		}), null);

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(Event, null, 'flash.events::Event');
})();
//flash.events.Event


//flash.utils.ByteArray
$es4.$$package('flash.utils').ByteArray = (function ()
{
	//imports
	var ObjectEncoding;
	var IDataInput;
	var IDataOutput;
	var ByteArray;
	var Endian;

	//properties
	ByteArray.BYTES_GROW_SIZE = 1024;

	//class initializer
	ByteArray.$$cinit = (function ()
	{
		ByteArray.$$cinit = undefined;

		//initialize imports
		ObjectEncoding = $es4.$$['flash.net'].ObjectEncoding;
		IDataInput = $es4.$$['flash.utils'].IDataInput;
		IDataOutput = $es4.$$['flash.utils'].IDataOutput;
		Endian = $es4.$$['flash.utils'].Endian;
	});

	//accessor
	$es4.$$public_accessor('defaultObjectEncoding', ByteArray, (function ()
	{
		if (ByteArray.$$cinit !== undefined) ByteArray.$$cinit();

		return $es4.$$get(ObjectEncoding, null, null, 'AMF3');
	}), (function ($$$$version)
	{
		if (ByteArray.$$cinit !== undefined) ByteArray.$$cinit();

		//set default parameter values
		var version = $es4.$$coerce($$$$version, uint);

		if (version != $es4.$$get(ObjectEncoding, null, null, 'AMF3'))
		{
			throw $es4.$$primitive(new (Error)('ByteArray: desired object encoding not supported at this time'));
		}
	}));

	function ByteArray()
	{
		//initialize class if not initialized
		if (ByteArray.$$cinit !== undefined) ByteArray.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof ByteArray) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], ByteArray) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('$_properties', $$thisp);

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties') === undefined)
			{
				$es4.$$call($$this, $$this, $$thisp, '$__properties', [{}]);
			}
		}));

		//method
		$es4.$$public_function('$__properties', $$thisp, (function ($$$$object)
		{
			//set default parameter values
			var object = (0 > arguments.length - 1) ? null : $$$$object;

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties') === undefined)
			{
				var arrayBuffer = $es4.$$primitive(new ($es4.$$get(window, $$this, $$thisp, 'ArrayBuffer'))());
				var dataView = $es4.$$primitive(new ($es4.$$get(window, $$this, $$thisp, 'DataView'))(arrayBuffer));
				$es4.$$set(object, $$this, $$thisp, 'ByteArrayScope', {$_arrayBuffer:arrayBuffer, $_dataView:dataView, $_bytePosition:0, $_byteLength:0, $_endian:$es4.$$get(Endian, $$this, $$thisp, 'BIG_ENDIAN'), $_growSize:$es4.$$get(ByteArray, $$this, $$thisp, 'BYTES_GROW_SIZE')}, '=');
				$es4.$$set(object, $$this, $$thisp, 'TLScope', $$this, '=');
				return $es4.$$set($$thisp, $$this, $$thisp, '$_properties', object, '=');
			}
			return $es4.$$get($$thisp, $$this, $$thisp, '$_properties');
		}));

		//method
		$es4.$$public_function('$__getArrayBuffer', $$thisp, (function ()
		{
			return $es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_arrayBuffer', 'slice', [0, $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_byteLength')]);
		}));

		//method
		$es4.$$public_function('$__setArrayBuffer', $$thisp, (function ($$$$arrayBuffer)
		{
			//set default parameter values
			var arrayBuffer = $$$$arrayBuffer;

			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_arrayBuffer', arrayBuffer, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_dataView', $es4.$$primitive(new ($es4.$$get(window, $$this, $$thisp, 'DataView'))(arrayBuffer)), '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_byteLength', $es4.$$get(arrayBuffer, $$this, $$thisp, 'byteLength'), '=');
		}));

		//method
		$es4.$$public_function('clear', $$thisp, (function ()
		{
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_arrayBuffer', null, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_dataView', null, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition', 0, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_byteLength', 0, '=');
		}));

		//method
		$es4.$$public_function('readBoolean', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$call($$this, $$this, $$thisp, 'readByte', $es4.$$EMPTY_ARRAY) !== 0, Boolean);
		}));

		//method
		$es4.$$public_function('readByte', $$thisp, (function ()
		{
			var value = $es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_dataView', 'getInt8', [$es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition')]);
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition', 1, '+=');
			return $es4.$$coerce(value, int);
		}));

		//method
		$es4.$$public_function('readBytes', $$thisp, (function ($$$$writeTo, $$$$offset, $$$$length)
		{
			//set default parameter values
			var writeTo = $es4.$$coerce($$$$writeTo, $es4.$$['flash.utils'].ByteArray);
			var offset = (1 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$offset, uint);
			var length = (2 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$length, uint);

			var position = $es4.$$get(writeTo, $$this, $$thisp, 'position');
			var bytesAvailable = $es4.$$coerce($es4.$$get($$this, $$this, $$thisp, 'bytesAvailable'), uint);
			$es4.$$call(writeTo, $$this, $$thisp, 'writeBytes', [$$this, $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition'), length]);
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition', bytesAvailable, '+=');
			$es4.$$set(writeTo, $$this, $$thisp, 'position', position, '=');
		}));

		//method
		$es4.$$public_function('readDouble', $$thisp, (function ()
		{
			var value = $es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_dataView', 'getFloat64', [$es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition'), $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_endian') != $es4.$$get(Endian, $$this, $$thisp, 'BIG_ENDIAN')]);
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition', 8, '+=');
			return $es4.$$coerce(value, Number);
		}));

		//method
		$es4.$$public_function('readFloat', $$thisp, (function ()
		{
			var value = $es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_dataView', 'getFloat32', [$es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition'), $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_endian') != $es4.$$get(Endian, $$this, $$thisp, 'BIG_ENDIAN')]);
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition', 4, '+=');
			return $es4.$$coerce(value, Number);
		}));

		//method
		$es4.$$public_function('readInt', $$thisp, (function ()
		{
			var value = $es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_dataView', 'getInt32', [$es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition'), $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_endian') != $es4.$$get(Endian, $$this, $$thisp, 'BIG_ENDIAN')]);
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition', 4, '+=');
			return $es4.$$coerce(value, int);
		}));

		//method
		$es4.$$public_function('readMultiByte', $$thisp, (function ($$$$length, $$$$charSet)
		{
			//set default parameter values
			var length = $es4.$$coerce($$$$length, uint);
			var charSet = $es4.$$coerce($$$$charSet, String);

			if (charSet !== 'iso-8859-1' && charSet != 'utf-8')
			{
				throw $es4.$$primitive(new (Error)('ByteArray: your selected charSet is not supported at this time, use: "iso-8859-1" or "utf-8"'));
			}
			if (charSet === 'utf-8')
			{
				return $es4.$$call($$this, $$this, $$thisp, 'readUTFBytes', [length]);
			}
			var value = $es4.$$call(String, $$this, $$thisp, 'fromCharCode', 'apply', [null, $es4.$$primitive(new ($es4.$$get(window, $$this, $$thisp, 'Uint8Array'))($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_arrayBuffer'), $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition'), length))]);
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition', length, '+=');
			return $es4.$$coerce(value, String);
		}));

		//method
		$es4.$$public_function('readShort', $$thisp, (function ()
		{
			var value = $es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_dataView', 'getInt16', [$es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition'), $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_endian') != $es4.$$get(Endian, $$this, $$thisp, 'BIG_ENDIAN')]);
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition', 2, '+=');
			return $es4.$$coerce(value, int);
		}));

		//method
		$es4.$$public_function('readUnsignedByte', $$thisp, (function ()
		{
			var value = $es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_dataView', 'getUint8', [$es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition'), $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_endian') != $es4.$$get(Endian, $$this, $$thisp, 'BIG_ENDIAN')]);
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition', 1, '+=');
			return $es4.$$coerce(value, uint);
		}));

		//method
		$es4.$$public_function('readUnsignedInt', $$thisp, (function ()
		{
			var value = $es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_dataView', 'getUint32', [$es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition'), $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_endian') != $es4.$$get(Endian, $$this, $$thisp, 'BIG_ENDIAN')]);
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition', 4, '+=');
			return $es4.$$coerce(value, uint);
		}));

		//method
		$es4.$$public_function('readUnsignedShort', $$thisp, (function ()
		{
			var value = $es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_dataView', 'getUint16', [$es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition'), $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_endian') != $es4.$$get(Endian, $$this, $$thisp, 'BIG_ENDIAN')]);
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition', 2, '+=');
			return $es4.$$coerce(value, uint);
		}));

		//method
		$es4.$$public_function('readUTF', $$thisp, (function ()
		{
			var length = $es4.$$call($$this, $$this, $$thisp, 'readUnsignedShort', $es4.$$EMPTY_ARRAY);
			return $es4.$$call($$this, $$this, $$thisp, 'readUTFBytes', [length]);
		}));

		//method
		$es4.$$public_function('readUTFBytes', $$thisp, (function ($$$$length)
		{
			//set default parameter values
			var length = $es4.$$coerce($$$$length, uint);

			if (length == 0)
			{
				return '';
			}
			var string = '';
			var index = 0;
			var bytes = $es4.$$primitive(new ($es4.$$get(window, $$this, $$thisp, 'Uint8Array'))($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_arrayBuffer'), $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition'), length));
			if ($es4.$$get(bytes, $$this, $$thisp, 'length') >= 3 && $es4.$$get(bytes, $$this, $$thisp, 0) === 0xEF && $es4.$$get(bytes, $$this, $$thisp, 1) === 0xBB && $es4.$$get(bytes, $$this, $$thisp, 2) === 0xBF)
			{
				index = 3;
			}
			var byte1 = 0;
			var byte2 = 0;
			var byte3 = 0;
			var byte4 = 0;
			while (index < $es4.$$get(bytes, $$this, $$thisp, 'length'))
			{
				byte1 = $es4.$$coerce($es4.$$get(bytes, $$this, $$thisp, index), int);
				if (byte1 < 0x80)
				{
					string += $es4.$$call(String, $$this, $$thisp, 'fromCharCode', [byte1]);
					index++;
					continue;
				}
				if (byte1 > 0xBF && byte1 < 0xE0)
				{
					if (index + 1 >= $es4.$$get(bytes, $$this, $$thisp, 'length'))
					{
						throw "UTF-8 Decode failed. Two byte character was truncated.";
					}
					byte2 = $es4.$$coerce($es4.$$get(bytes, $$this, $$thisp, index + 1), int);
					string += $es4.$$call(String, $$this, $$thisp, 'fromCharCode', [((byte1 & 31) << 6) | (byte2 & 63)]);
					index += 2;
					continue;
				}
				if (byte1 > 0xDF && byte1 < 0xF0)
				{
					if (index + 2 >= $es4.$$get(bytes, $$this, $$thisp, 'length'))
					{
						throw "UTF-8 Decode failed. Multi byte character was truncated.";
					}
					byte2 = $es4.$$coerce($es4.$$get(bytes, $$this, $$thisp, index + 1), int);
					byte3 = $es4.$$coerce($es4.$$get(bytes, $$this, $$thisp, index + 2), int);
					string += $es4.$$call(String, $$this, $$thisp, 'fromCharCode', [((byte1 & 15) << 12) | ((byte2 & 63) << 6) | (byte3 & 63)]);
					index += 3;
					continue;
				}
				var charCode = ((byte1 & 0x07) << 18 | ($es4.$$get(bytes, $$this, $$thisp, index + 1) & 0x3F) << 12 | ($es4.$$get(bytes, $$this, $$thisp, index + 2) & 0x3F) << 6 | $es4.$$get(bytes, $$this, $$thisp, index + 3) & 0x3F) - 0x010000;
				string += $es4.$$call(String, $$this, $$thisp, 'fromCharCode', [charCode >> 10 | 0xD800, charCode & 0x03FF | 0xDC00]);
				index += 4;
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition', length, '+=');
			return string;
		}));

		//method
		$es4.$$public_function('writeBoolean', $$thisp, (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			$es4.$$call($$this, $$this, $$thisp, 'writeByte', [int(value)]);
		}));

		//method
		$es4.$$public_function('writeByte', $$thisp, (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, int);

			var bytePosition = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition'), uint);
			var newBytePosition = $es4.$$coerce(bytePosition + 1, uint);
			if (newBytePosition > $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_byteLength'))
			{
				if (newBytePosition > $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_arrayBuffer', 'byteLength'))
				{
					$es4.$$set($$this, $$this, $$thisp, 'length', newBytePosition, '=');
				}
				else
				{
					$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_byteLength', newBytePosition, '=');
				}
			}
			$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_dataView', 'setInt8', [bytePosition, value]);
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition', 1, '+=');
		}));

		//method
		$es4.$$private_function('writeUnsignedByte', $$thisp, (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, int);

			var bytePosition = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition'), uint);
			var newBytePosition = $es4.$$coerce(bytePosition + 1, uint);
			if (newBytePosition > $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_byteLength'))
			{
				if (newBytePosition > $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_arrayBuffer', 'byteLength'))
				{
					$es4.$$set($$this, $$this, $$thisp, 'length', newBytePosition, '=');
				}
				else
				{
					$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_byteLength', newBytePosition, '=');
				}
			}
			$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_dataView', 'setUint8', [bytePosition, value]);
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition', 1, '+=');
		}));

		//method
		$es4.$$public_function('writeBytes', $$thisp, (function ($$$$readFrom, $$$$offset, $$$$length)
		{
			//set default parameter values
			var readFrom = $es4.$$coerce($$$$readFrom, $es4.$$['flash.utils'].ByteArray);
			var offset = (1 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$offset, uint);
			var length = (2 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$length, uint);

			if (length == 0)
			{
				length = $es4.$$get(readFrom, $$this, $$thisp, 'length') - offset;
			}
			var bytePosition = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition'), uint);
			var newBytePosition = bytePosition + length;
			var arrayBuffer = $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_arrayBuffer');
			if (newBytePosition > $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_byteLength'))
			{
				if (newBytePosition > $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_arrayBuffer', 'byteLength'))
				{
					var oldArrayBuffer = arrayBuffer;
					arrayBuffer = $es4.$$primitive(new ($es4.$$get(window, $$this, $$thisp, 'ArrayBuffer'))(newBytePosition + ($es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_growSize', ($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_growSize') * 2), '='))));
					$es4.$$call($es4.$$primitive(new ($es4.$$get(window, $$this, $$thisp, 'Uint8Array'))(arrayBuffer)), $$this, $$thisp, 'set', [$es4.$$primitive(new ($es4.$$get(window, $$this, $$thisp, 'Uint8Array'))(oldArrayBuffer))]);
				}
				$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_byteLength', newBytePosition, '=');
			}
			$es4.$$call($es4.$$primitive(new ($es4.$$get(window, $$this, $$thisp, 'Uint8Array'))(arrayBuffer)), $$this, $$thisp, 'set', [$es4.$$primitive(new ($es4.$$get(window, $$this, $$thisp, 'Uint8Array'))($es4.$$call($es4.$$call(readFrom, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'ByteArrayScope', '$_arrayBuffer', 'slice', [offset, offset + length]))), bytePosition]);
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_dataView', $es4.$$primitive(new ($es4.$$get(window, $$this, $$thisp, 'DataView'))(arrayBuffer)), '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_arrayBuffer', arrayBuffer, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition', newBytePosition, '=');
		}));

		//method
		$es4.$$public_function('writeDouble', $$thisp, (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var bytePosition = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition'), uint);
			var newBytePosition = $es4.$$coerce(bytePosition + 8, uint);
			if (newBytePosition > $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_byteLength'))
			{
				if (newBytePosition > $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_arrayBuffer', 'byteLength'))
				{
					$es4.$$set($$this, $$this, $$thisp, 'length', newBytePosition, '=');
				}
				else
				{
					$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_byteLength', newBytePosition, '=');
				}
			}
			$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_dataView', 'setFloat64', [bytePosition, value, $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_endian') != $es4.$$get(Endian, $$this, $$thisp, 'BIG_ENDIAN')]);
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition', 8, '+=');
		}));

		//method
		$es4.$$public_function('writeFloat', $$thisp, (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var bytePosition = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition'), uint);
			var newBytePosition = $es4.$$coerce(bytePosition + 4, uint);
			if (newBytePosition > $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_byteLength'))
			{
				if (newBytePosition > $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_arrayBuffer', 'byteLength'))
				{
					$es4.$$set($$this, $$this, $$thisp, 'length', newBytePosition, '=');
				}
				else
				{
					$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_byteLength', newBytePosition, '=');
				}
			}
			$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_dataView', 'setFloat32', [bytePosition, value, $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_endian') != $es4.$$get(Endian, $$this, $$thisp, 'BIG_ENDIAN')]);
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition', 4, '+=');
		}));

		//method
		$es4.$$public_function('writeInt', $$thisp, (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, int);

			var bytePosition = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition'), uint);
			var newBytePosition = $es4.$$coerce(bytePosition + 4, uint);
			if (newBytePosition > $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_byteLength'))
			{
				if (newBytePosition > $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_arrayBuffer', 'byteLength'))
				{
					$es4.$$set($$this, $$this, $$thisp, 'length', newBytePosition, '=');
				}
				else
				{
					$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_byteLength', newBytePosition, '=');
				}
			}
			$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_dataView', 'setInt32', [bytePosition, value, $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_endian') != $es4.$$get(Endian, $$this, $$thisp, 'BIG_ENDIAN')]);
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition', 4, '+=');
		}));

		//method
		$es4.$$public_function('writeMultiByte', $$thisp, (function ($$$$string, $$$$charSet)
		{
			//set default parameter values
			var string = $es4.$$coerce($$$$string, String);
			var charSet = $es4.$$coerce($$$$charSet, String);

			if (charSet !== 'iso-8859-1' && charSet !== 'utf-8')
			{
				throw $es4.$$primitive(new (Error)('ByteArray: your selected charSet is not supported at this time, use: "iso-8859-1" or "utf-8"'));
			}
			if (charSet == 'utf-8')
			{
				$es4.$$call($$thisp, $$this, $$thisp, 'internalWriteUTFBytes', [string]);
				return;
			}
			var index = 0;
			while (index < $es4.$$get(string, $$this, $$thisp, 'length'))
			{
				var charCode = $es4.$$coerce($es4.$$call(string, $$this, $$thisp, 'charCodeAt', [index++]), uint);
				$es4.$$call($$thisp, $$this, $$thisp, 'writeUnsignedByte', [charCode]);
			}
		}));

		//method
		$es4.$$public_function('writeShort', $$thisp, (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, int);

			var bytePosition = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition'), uint);
			var newBytePosition = $es4.$$coerce(bytePosition + 2, uint);
			if (newBytePosition > $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_byteLength'))
			{
				if (newBytePosition > $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_arrayBuffer', 'byteLength'))
				{
					$es4.$$set($$this, $$this, $$thisp, 'length', newBytePosition, '=');
				}
				else
				{
					$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_byteLength', newBytePosition, '=');
				}
			}
			$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_dataView', 'setInt16', [bytePosition, value, $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_endian') != $es4.$$get(Endian, $$this, $$thisp, 'BIG_ENDIAN')]);
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition', 2, '+=');
		}));

		//method
		$es4.$$private_function('writeUnsignedShort', $$thisp, (function ($$$$value, $$$$endian)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, int);
			var endian = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$endian, String);

			if (!endian)
			{
				endian = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_endian'), String);
			}
			var bytePosition = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition'), uint);
			var newBytePosition = $es4.$$coerce(bytePosition + 2, uint);
			if (newBytePosition > $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_byteLength'))
			{
				if (newBytePosition > $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_arrayBuffer', 'byteLength'))
				{
					$es4.$$set($$this, $$this, $$thisp, 'length', newBytePosition, '=');
				}
				else
				{
					$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_byteLength', newBytePosition, '=');
				}
			}
			$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_dataView', 'setUint16', [bytePosition, value, endian != $es4.$$get(Endian, $$this, $$thisp, 'BIG_ENDIAN')]);
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition', 2, '+=');
		}));

		//method
		$es4.$$public_function('writeUnsignedInt', $$thisp, (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, uint);

			var bytePosition = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition'), uint);
			var newBytePosition = $es4.$$coerce(bytePosition + 4, uint);
			if (newBytePosition > $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_byteLength'))
			{
				if (newBytePosition > $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_arrayBuffer', 'byteLength'))
				{
					$es4.$$set($$this, $$this, $$thisp, 'length', newBytePosition, '=');
				}
				else
				{
					$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_byteLength', newBytePosition, '=');
				}
			}
			$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_dataView', 'setUint32', [bytePosition, value, $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_endian') != $es4.$$get(Endian, $$this, $$thisp, 'BIG_ENDIAN')]);
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition', 4, '+=');
		}));

		//method
		$es4.$$public_function('writeUTF', $$thisp, (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			var bytePosition = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition'), uint);
			var newBytePosition = $es4.$$coerce(bytePosition + 2, uint);
			if (newBytePosition > $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_byteLength'))
			{
				if (newBytePosition > $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_arrayBuffer', 'byteLength'))
				{
					$es4.$$set($$this, $$this, $$thisp, 'length', newBytePosition, '=');
				}
				else
				{
					$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_byteLength', newBytePosition, '=');
				}
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition', 2, '+=');
			var length = $es4.$$call($$thisp, $$this, $$thisp, 'internalWriteUTFBytes', [value]);
			$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_dataView', 'setUint16', [bytePosition, length, $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_endian') != $es4.$$get(Endian, $$this, $$thisp, 'BIG_ENDIAN')]);
		}));

		//method
		$es4.$$private_function('internalWriteUTFBytes', $$thisp, (function ($$$$string)
		{
			//set default parameter values
			var string = $es4.$$coerce($$$$string, String);

			var utf8 = [];
			for (var i = 0; i < $es4.$$get(string, $$this, $$thisp, 'length'); i++)
			{
				var charcode = $es4.$$call(string, $$this, $$thisp, 'charCodeAt', [i]);
				if (charcode < 0x80)
				{
					$es4.$$call(utf8, $$this, $$thisp, 'push', [charcode]);
				}
				else if (charcode < 0x800)
				{
					$es4.$$call(utf8, $$this, $$thisp, 'push', [0xc0 | (charcode >> 6), 0x80 | (charcode & 0x3f)]);
				}
				else if (charcode < 0xd800 || charcode >= 0xe000)
				{
					$es4.$$call(utf8, $$this, $$thisp, 'push', [0xe0 | (charcode >> 12), 0x80 | ((charcode >> 6) & 0x3f), 0x80 | (charcode & 0x3f)]);
				}
				else
				{
					i++;
					charcode = 0x10000 + (((charcode & 0x3ff) << 10) | ($es4.$$call(string, $$this, $$thisp, 'charCodeAt', [i]) & 0x3ff));
					$es4.$$call(utf8, $$this, $$thisp, 'push', [0xf0 | (charcode >> 18), 0x80 | ((charcode >> 12) & 0x3f), 0x80 | ((charcode >> 6) & 0x3f), 0x80 | (charcode & 0x3f)]);
				}
			}
			var index = 0;
			var bytesLength = $es4.$$get(utf8, $$this, $$thisp, 'length');
			while (index < bytesLength)
			{
				$es4.$$call($$thisp, $$this, $$thisp, 'writeUnsignedByte', [$es4.$$get(utf8, $$this, $$thisp, index)]);
				index++;
			}
			return bytesLength;
		}));

		//method
		$es4.$$public_function('writeUTFBytes', $$thisp, (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			$es4.$$call($$thisp, $$this, $$thisp, 'internalWriteUTFBytes', [value]);
		}));

		//method
		$es4.$$public_function('writeObject', $$thisp, (function ($$$$object)
		{
			//set default parameter values
			var object = $$$$object;

			throw $es4.$$primitive(new (Error)('ByteArray: attempted call to an unimplemented function "writeObject"'));
		}));

		//method
		$es4.$$public_function('readObject', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('ByteArray: attempted call to an unimplemented function "readObject"'));
		}));

		//method
		$es4.$$public_function('toString', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('ByteArray: attempted call to an unimplemented function "toString"'));
		}));

		//method
		$es4.$$public_function('compress', $$thisp, (function ($$$$algorithm)
		{
			//set default parameter values
			var algorithm = (0 > arguments.length - 1) ? "zlib" : $es4.$$coerce($$$$algorithm, String);

			throw $es4.$$primitive(new (Error)('ByteArray: attempted call to an unimplemented function "compress"'));
		}));

		//method
		$es4.$$public_function('deflate', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('ByteArray: attempted call to an unimplemented function "deflate"'));
		}));

		//method
		$es4.$$public_function('inflate', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('ByteArray: attempted call to an unimplemented function "inflate"'));
		}));

		//method
		$es4.$$public_function('uncompress', $$thisp, (function ($$$$algorithm)
		{
			//set default parameter values
			var algorithm = (0 > arguments.length - 1) ? "zlib" : $es4.$$coerce($$$$algorithm, String);

			throw $es4.$$primitive(new (Error)('ByteArray: attempted call to an unimplemented function "uncompress"'));
		}));

		//accessor
		$es4.$$public_accessor('bytesAvailable', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_byteLength') - $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition'), uint);
		}), null);

		//accessor
		$es4.$$public_accessor('endian', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_endian'), String);
		}), (function ($$$$type)
		{
			//set default parameter values
			var type = $es4.$$coerce($$$$type, String);

			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_endian', type, '=');
		}));

		//accessor
		$es4.$$public_accessor('length', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_byteLength'), uint);
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, uint);

			if (value == $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_byteLength'))
			{
				return;
			}
			var arrayBuffer;
			if (value < $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_byteLength'))
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_growSize', $es4.$$get(ByteArray, $$this, $$thisp, 'BYTES_GROW_SIZE'), '=');
				$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_byteLength', value, '=');
				if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition') > value)
				{
					$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition', value, '=');
				}
				return;
			}
			if (value > $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_arrayBuffer', 'byteLength'))
			{
				arrayBuffer = $es4.$$primitive(new ($es4.$$get(window, $$this, $$thisp, 'ArrayBuffer'))(value + ($es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_growSize', ($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_growSize') * 2), '='))));
				$es4.$$call($es4.$$primitive(new ($es4.$$get(window, $$this, $$thisp, 'Uint8Array'))(arrayBuffer)), $$this, $$thisp, 'set', [$es4.$$primitive(new ($es4.$$get(window, $$this, $$thisp, 'Uint8Array'))($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_arrayBuffer')))]);
				$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_dataView', $es4.$$primitive(new ($es4.$$get(window, $$this, $$thisp, 'DataView'))(arrayBuffer)), '=');
				$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_arrayBuffer', arrayBuffer, '=');
				$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_byteLength', value, '=');
			}
		}));

		//accessor
		$es4.$$public_accessor('position', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition'), uint);
		}), (function ($$$$offset)
		{
			//set default parameter values
			var offset = $es4.$$coerce($$$$offset, uint);

			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'ByteArrayScope', '$_bytePosition', offset, '=');
		}));

		//accessor
		$es4.$$public_accessor('objectEncoding', $$thisp, (function ()
		{
			return $es4.$$get(ObjectEncoding, $$this, $$thisp, 'AMF3');
		}), (function ($$$$version)
		{
			//set default parameter values
			var version = $es4.$$coerce($$$$version, uint);

			if (version != $es4.$$get(ObjectEncoding, $$this, $$thisp, 'AMF3'))
			{
				throw $es4.$$primitive(new (Error)('ByteArray: desired object encoding not supported at this time'));
			}
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(ByteArray, {IMPLEMENTS:['flash.utils.IDataInput', 'flash.utils.IDataOutput']}, 'flash.utils::ByteArray');
})();
//flash.utils.ByteArray


//flash.display.SimpleButton
$es4.$$package('flash.display').SimpleButton = (function ()
{
	//imports
	var DisplayObject;
	var Event;
	var MouseEvent;
	var SoundTransform;
	var InteractiveObject;
	var Stage;

	//properties
	SimpleButton.MOUSE_BOUNDS_STATE_OUT = 1;
	SimpleButton.MOUSE_BOUNDS_STATE_OVER = 2;
	SimpleButton.MOUSE_PRESS_STATE_DOWN = 3;
	SimpleButton.MOUSE_PRESS_STATE_UP = 4;

	//class initializer
	SimpleButton.$$cinit = (function ()
	{
		SimpleButton.$$cinit = undefined;

		//initialize imports
		DisplayObject = $es4.$$['flash.display'].DisplayObject;
		Event = $es4.$$['flash.events'].Event;
		MouseEvent = $es4.$$['flash.events'].MouseEvent;
		SoundTransform = $es4.$$['flash.media'].SoundTransform;
		InteractiveObject = $es4.$$['flash.display'].InteractiveObject;
		Stage = $es4.$$['flash.display'].Stage;
	});

	function SimpleButton()
	{
		//initialize class if not initialized
		if (SimpleButton.$$cinit !== undefined) SimpleButton.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof SimpleButton) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], SimpleButton) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('$_properties', $$thisp);
		$es4.$$private_property('_mouseBoundsState', $$thisp, int);
		$es4.$$private_property('_mousePressState', $$thisp, int);
		$es4.$$private_property('_stage', $$thisp, Stage);

		//initializer
		$es4.$$iinit($$thisp, (function ()
		{
			//initialize properties
			$es4.$$set($$this, $$this, $$thisp, '_mouseBoundsState', $es4.$$get(SimpleButton, $$this, $$thisp, 'MOUSE_BOUNDS_STATE_OUT'), '=');
			$es4.$$set($$this, $$this, $$thisp, '_mousePressState', $es4.$$get(SimpleButton, $$this, $$thisp, 'MOUSE_PRESS_STATE_UP'), '=');
		}));

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$upState, $$$$overState, $$$$downState, $$$$hitTestState)
		{
			//set default parameter values
			var upState = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$upState, DisplayObject);
			var overState = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$overState, DisplayObject);
			var downState = (2 > arguments.length - 1) ? null : $es4.$$coerce($$$$downState, DisplayObject);
			var hitTestState = (3 > arguments.length - 1) ? null : $es4.$$coerce($$$$hitTestState, DisplayObject);

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties') === undefined)
			{
				$es4.$$call($$this, $$this, $$thisp, '$__properties', [{}]);
			}
			$es4.$$super($$thisp).$$z();
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_tabEnabled', true, '=');
			$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'setAttribute', ['role', $es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_role', 'button', '=')]);
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'style', 'cursor', 'pointer', '=');
			$es4.$$call($$this, $$this, $$thisp, 'addEventListener', [$es4.$$get(Event, $$this, $$thisp, 'REMOVED_FROM_STAGE'), $es4.$$get($$thisp, $$this, $$thisp, '$onRemovedFromStage')]);
		}));

		//method
		$es4.$$private_function('$onRemovedFromStage', $$thisp, (function ($$$$event)
		{
			//set default parameter values
			var event = $es4.$$coerce($$$$event, Event);

			if ($es4.$$get($$thisp, $$this, $$thisp, '_stage'))
			{
				$es4.$$call($$thisp, $$this, $$thisp, '_stage', 'removeEventListener', [$es4.$$get(MouseEvent, $$this, $$thisp, 'MOUSE_UP'), $es4.$$get($$thisp, $$this, $$thisp, '$onUpEvent')]);
				$es4.$$set($$thisp, $$this, $$thisp, '_stage', null, '=');
			}
			$es4.$$set($$thisp, $$this, $$thisp, '_mouseBoundsState', $es4.$$get(SimpleButton, $$this, $$thisp, 'MOUSE_BOUNDS_STATE_OUT'), '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_mousePressState', $es4.$$get(SimpleButton, $$this, $$thisp, 'MOUSE_PRESS_STATE_UP'), '=');
		}));

		//method
		$es4.$$public_function('$__properties', $$thisp, (function ($$$$object)
		{
			//set default parameter values
			var object = (0 > arguments.length - 1) ? null : $$$$object;

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties') === undefined)
			{
				object = $es4.$$call($es4.$$super($$thisp), $$this, $$thisp, '$__properties', [object]);
				$es4.$$set(object, $$this, $$thisp, 'SimpleButtonScope', {$_upState:null, $_overState:null, $_downState:null, $_hitTestState:null, $_enabled:true, $_useHandCursor:true, $_currentState:null}, '=');
				$es4.$$set(object, $$this, $$thisp, 'TLScope', $$this, '=');
				return $es4.$$set($$thisp, $$this, $$thisp, '$_properties', object, '=');
			}
			return $es4.$$get($$thisp, $$this, $$thisp, '$_properties');
		}));

		//method
		$es4.$$public_function('dispatchEvent', $$thisp, (function ($$$$event)
		{
			//set default parameter values
			var event = $es4.$$coerce($$$$event, Event);

			if (!($es4.$$is(event, MouseEvent)) || !$es4.$$get($es4.$$call(event, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'EventScope', '$_originalTarget'))
			{
				return $es4.$$coerce($es4.$$call($es4.$$super($$thisp), $$this, $$thisp, 'dispatchEvent', [event]), Boolean);
			}
			if (!$es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_hitTestState'))
			{
				return false;
			}
			var domView = $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView');
			var parent = $es4.$$get($es4.$$call(event, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'EventScope', '$_originalTarget');
			var hitTest = $es4.$$get($es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_hitTestState', '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope', '$_domView');
			var found = $es4.$$coerce(parent == hitTest, Boolean);
			while (parent != $es4.$$get(document, $$this, $$thisp, 'body') && parent != domView)
			{
				if (parent == hitTest)
				{
					found = true;
					break;
				}
				parent = $es4.$$get(parent, $$this, $$thisp, 'parentNode');
			}
			if (found)
			{
				var type = $es4.$$get(event, $$this, $$thisp, 'type');
				if (type == $es4.$$get(MouseEvent, $$this, $$thisp, 'CLICK'))
				{
					return $es4.$$call($$thisp, $$this, $$thisp, '$onClickEvent', [$es4.$$as(event, MouseEvent)]);
				}
				if (type == $es4.$$get(MouseEvent, $$this, $$thisp, 'MOUSE_OUT'))
				{
					return $es4.$$call($$thisp, $$this, $$thisp, '$onOutEvent', [$es4.$$as(event, MouseEvent)]);
				}
				if (type == $es4.$$get(MouseEvent, $$this, $$thisp, 'MOUSE_OVER'))
				{
					return $es4.$$call($$thisp, $$this, $$thisp, '$onOverEvent', [$es4.$$as(event, MouseEvent)]);
				}
				if (type == $es4.$$get(MouseEvent, $$this, $$thisp, 'MOUSE_DOWN'))
				{
					return $es4.$$call($$thisp, $$this, $$thisp, '$onDownEvent', [$es4.$$as(event, MouseEvent)]);
				}
				if (type == $es4.$$get(MouseEvent, $$this, $$thisp, 'MOUSE_UP'))
				{
					return $es4.$$call($$thisp, $$this, $$thisp, '$onUpEvent', [$es4.$$as(event, MouseEvent)]);
				}
				else
				{
					return false;
				}
			}
			if ($es4.$$get(event, $$this, $$thisp, 'type') == $es4.$$get(MouseEvent, $$this, $$thisp, 'CLICK'))
			{
				return false;
			}
			return $es4.$$coerce($es4.$$call($es4.$$super($$thisp), $$this, $$thisp, 'dispatchEvent', [event]), Boolean);
		}));

		//method
		$es4.$$private_function('$_refreshVisualState', $$thisp, (function ()
		{
			var currentState = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_currentState'), DisplayObject);
			var upState = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_upState'), DisplayObject);
			var downState = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_downState'), DisplayObject);
			var overState = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_overState'), DisplayObject);
			var hitTestState = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_hitTestState'), DisplayObject);
			var state = null;
			if ($es4.$$get($$thisp, $$this, $$thisp, '_mousePressState') == $es4.$$get(SimpleButton, $$this, $$thisp, 'MOUSE_PRESS_STATE_DOWN'))
			{
				state = downState || currentState || overState || upState;
			}
			else if ($es4.$$get($$thisp, $$this, $$thisp, '_mouseBoundsState') == $es4.$$get(SimpleButton, $$this, $$thisp, 'MOUSE_BOUNDS_STATE_OVER'))
			{
				state = overState || currentState || upState;
			}
			else
			{
				state = upState || currentState;
			}
			if (state == null || state == currentState)
			{
				return;
			}
			if (currentState && currentState != $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_hitTestState'))
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'removeChild', [$es4.$$get($es4.$$call(currentState, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope', '$_domView')]);
			}
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'firstChild'))
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'insertBefore', [$es4.$$get($es4.$$call(state, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope', '$_domView'), $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'firstChild')]);
			}
			else
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'appendChild', [$es4.$$get($es4.$$call(state, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope', '$_domView')]);
			}
			if (hitTestState)
			{
				if (state != hitTestState)
				{
					$es4.$$set($es4.$$call(hitTestState, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope', '$_domView', 'style', 'opacity', 0, '=');
				}
				else
				{
					$es4.$$set($es4.$$call(hitTestState, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope', '$_domView', 'style', 'opacity', $es4.$$get($es4.$$call(hitTestState, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope', '$_opacity'), '=');
				}
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_currentState', state, '=');
		}));

		//method
		$es4.$$private_function('$onClickEvent', $$thisp, (function ($$$$event)
		{
			//set default parameter values
			var event = $es4.$$coerce($$$$event, MouseEvent);

			$es4.$$call(event, $$this, $$thisp, 'stopImmediatePropagation', $es4.$$EMPTY_ARRAY);
			if (!$es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_enabled') || !$es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_mouseEnabled'))
			{
				return false;
			}
			event = $es4.$$coerce($es4.$$as($es4.$$call(event, $$this, $$thisp, 'clone', $es4.$$EMPTY_ARRAY), MouseEvent), MouseEvent);
			$es4.$$call($es4.$$call(event, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'EventScope', '$_withTarget', [event, $$this]);
			return $es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [event]);
		}));

		//method
		$es4.$$private_function('$onOverEvent', $$thisp, (function ($$$$event)
		{
			//set default parameter values
			var event = $es4.$$coerce($$$$event, MouseEvent);

			$es4.$$set($$thisp, $$this, $$thisp, '_mouseBoundsState', $es4.$$get(SimpleButton, $$this, $$thisp, 'MOUSE_BOUNDS_STATE_OVER'), '=');
			$es4.$$call(event, $$this, $$thisp, 'stopImmediatePropagation', $es4.$$EMPTY_ARRAY);
			if (!$es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_enabled') || !$es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_mouseEnabled'))
			{
				return false;
			}
			$es4.$$call($$thisp, $$this, $$thisp, '$_refreshVisualState', $es4.$$EMPTY_ARRAY);
			event = $es4.$$coerce($es4.$$as($es4.$$call(event, $$this, $$thisp, 'clone', $es4.$$EMPTY_ARRAY), MouseEvent), MouseEvent);
			$es4.$$call($es4.$$call(event, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'EventScope', '$_withTarget', [event, $$this]);
			return $es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [event]);
		}));

		//method
		$es4.$$private_function('$onOutEvent', $$thisp, (function ($$$$event)
		{
			//set default parameter values
			var event = $es4.$$coerce($$$$event, MouseEvent);

			$es4.$$set($$thisp, $$this, $$thisp, '_mouseBoundsState', $es4.$$get(SimpleButton, $$this, $$thisp, 'MOUSE_BOUNDS_STATE_OUT'), '=');
			$es4.$$call(event, $$this, $$thisp, 'stopImmediatePropagation', $es4.$$EMPTY_ARRAY);
			if (!$es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_enabled') || !$es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_mouseEnabled'))
			{
				return false;
			}
			$es4.$$call($$thisp, $$this, $$thisp, '$_refreshVisualState', $es4.$$EMPTY_ARRAY);
			event = $es4.$$coerce($es4.$$as($es4.$$call(event, $$this, $$thisp, 'clone', $es4.$$EMPTY_ARRAY), MouseEvent), MouseEvent);
			$es4.$$call($es4.$$call(event, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'EventScope', '$_withTarget', [event, $$this]);
			return $es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [event]);
		}));

		//method
		$es4.$$private_function('$onDownEvent', $$thisp, (function ($$$$event)
		{
			//set default parameter values
			var event = $es4.$$coerce($$$$event, MouseEvent);

			$es4.$$set($$thisp, $$this, $$thisp, '_mousePressState', $es4.$$get(SimpleButton, $$this, $$thisp, 'MOUSE_PRESS_STATE_DOWN'), '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_stage', $es4.$$get(event, $$this, $$thisp, 'target', 'stage'), '=');
			$es4.$$call($$thisp, $$this, $$thisp, '_stage', 'addEventListener', [$es4.$$get(MouseEvent, $$this, $$thisp, 'MOUSE_UP'), $es4.$$get($$thisp, $$this, $$thisp, '$onUpEvent')]);
			$es4.$$call(event, $$this, $$thisp, 'stopImmediatePropagation', $es4.$$EMPTY_ARRAY);
			if (!$es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_enabled') || !$es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_mouseEnabled'))
			{
				return false;
			}
			$es4.$$call($$thisp, $$this, $$thisp, '$_refreshVisualState', $es4.$$EMPTY_ARRAY);
			event = $es4.$$coerce($es4.$$as($es4.$$call(event, $$this, $$thisp, 'clone', $es4.$$EMPTY_ARRAY), MouseEvent), MouseEvent);
			$es4.$$call($es4.$$call(event, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'EventScope', '$_withTarget', [event, $$this]);
			return $es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [event]);
		}));

		//method
		$es4.$$private_function('$onUpEvent', $$thisp, (function ($$$$event)
		{
			//set default parameter values
			var event = $es4.$$coerce($$$$event, MouseEvent);

			$es4.$$set($$thisp, $$this, $$thisp, '_mousePressState', $es4.$$get(SimpleButton, $$this, $$thisp, 'MOUSE_PRESS_STATE_UP'), '=');
			if ($es4.$$get($$thisp, $$this, $$thisp, '_stage'))
			{
				$es4.$$call($$thisp, $$this, $$thisp, '_stage', 'removeEventListener', [$es4.$$get(MouseEvent, $$this, $$thisp, 'MOUSE_UP'), $es4.$$get($$thisp, $$this, $$thisp, '$onUpEvent')]);
				$es4.$$set($$thisp, $$this, $$thisp, '_stage', null, '=');
			}
			$es4.$$call(event, $$this, $$thisp, 'stopImmediatePropagation', $es4.$$EMPTY_ARRAY);
			if (!$es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_enabled') || !$es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_mouseEnabled'))
			{
				return false;
			}
			$es4.$$call($$thisp, $$this, $$thisp, '$_refreshVisualState', $es4.$$EMPTY_ARRAY);
			event = $es4.$$coerce($es4.$$as($es4.$$call(event, $$this, $$thisp, 'clone', $es4.$$EMPTY_ARRAY), MouseEvent), MouseEvent);
			$es4.$$call($es4.$$call(event, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'EventScope', '$_withTarget', [event, $$this]);
			return $es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [event]);
		}));

		//accessor
		$es4.$$public_accessor('downState', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_downState'), DisplayObject);
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, DisplayObject);

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_downState'))
			{
				var oldState = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_downState'), DisplayObject);
				if (oldState != $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_upState') && oldState != $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_overState') && $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_currentState') == oldState)
				{
					$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_currentState', null, '=');
					if (oldState != $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_hitTestState'))
					{
						$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'removeChild', [$es4.$$get($es4.$$call(oldState, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope', '$_domView')]);
					}
				}
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_downState', value, '=');
			$es4.$$call($$thisp, $$this, $$thisp, '$_refreshVisualState', $es4.$$EMPTY_ARRAY);
		}));

		//accessor
		$es4.$$public_accessor('enabled', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_enabled'), Boolean);
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_enabled', value, '=');
			$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'setAttribute', ['aria-disabled', !value]);
			if (value && $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_useHandCursor'))
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'style', 'cursor', 'pointer', '=');
			}
			else
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'style', 'cursor', 'auto', '=');
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'style', 'pointerEvents', (value) ? 'auto' : 'none', '=');
		}));

		//accessor
		$es4.$$public_accessor('hitTestState', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_hitTestState'), DisplayObject);
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, DisplayObject);

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_hitTestState'))
			{
				var oldHitTestState = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_hitTestState'), DisplayObject);
				if (oldHitTestState != $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_upState') && oldHitTestState != $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_overState') && oldHitTestState != $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_downState'))
				{
					$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'removeChild', [$es4.$$get($es4.$$call(oldHitTestState, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope', '$_domView')]);
				}
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_hitTestState', value, '=');
			if (value && value != $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_upState') && value != $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_overState') && value != $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_downState'))
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'appendChild', [$es4.$$get($es4.$$call(value, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope', '$_domView')]);
			}
			$es4.$$call($$thisp, $$this, $$thisp, '$_refreshVisualState', $es4.$$EMPTY_ARRAY);
		}));

		//accessor
		$es4.$$public_accessor('overState', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_overState'), DisplayObject);
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, DisplayObject);

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_overState'))
			{
				var oldState = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_overState'), DisplayObject);
				if (oldState != $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_upState') && oldState != $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_downState') && $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_currentState') == oldState)
				{
					$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_currentState', null, '=');
					if (oldState != $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_hitTestState'))
					{
						$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'removeChild', [$es4.$$get($es4.$$call(oldState, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope', '$_domView')]);
					}
				}
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_overState', value, '=');
			$es4.$$call($$thisp, $$this, $$thisp, '$_refreshVisualState', $es4.$$EMPTY_ARRAY);
		}));

		//accessor
		$es4.$$public_accessor('soundTransform', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('SimpleButton: attempted call to an unimplemented function "soundTransform"'));
		}), (function ($$$$sndTransform)
		{
			//set default parameter values
			var sndTransform = $es4.$$coerce($$$$sndTransform, SoundTransform);

			throw $es4.$$primitive(new (Error)('SimpleButton: attempted call to an unimplemented function "soundTransform"'));
		}));

		//accessor
		$es4.$$public_accessor('trackAsMenu', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('SimpleButton: attempted call to an unimplemented function "trackAsMenu"'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			throw $es4.$$primitive(new (Error)('SimpleButton: attempted call to an unimplemented function "trackAsMenu"'));
		}));

		//accessor
		$es4.$$public_accessor('upState', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_upState'), DisplayObject);
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, DisplayObject);

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_upState'))
			{
				var oldState = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_upState'), DisplayObject);
				if (oldState != $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_downState') && oldState != $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_overState') && $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_currentState') == oldState)
				{
					$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_currentState', null, '=');
					if (oldState != $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_hitTestState'))
					{
						$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'removeChild', [$es4.$$get($es4.$$call(oldState, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope', '$_domView')]);
					}
				}
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_upState', value, '=');
			$es4.$$call($$thisp, $$this, $$thisp, '$_refreshVisualState', $es4.$$EMPTY_ARRAY);
		}));

		//accessor
		$es4.$$public_accessor('useHandCursor', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_useHandCursor'), Boolean);
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'SimpleButtonScope', '$_useHandCursor', value, '=');
			if (value)
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'style', 'cursor', 'pointer', '=');
			}
			else
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'style', 'cursor', 'auto', '=');
			}
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(SimpleButton, {EXTENDS:'flash.display.InteractiveObject'}, 'flash.display::SimpleButton');
})();
//flash.display.SimpleButton


//flash.system.SecurityDomain
$es4.$$package('flash.system').SecurityDomain = (function ()
{
	//imports
	var SecurityDomain;

	//class initializer
	SecurityDomain.$$cinit = (function ()
	{
		SecurityDomain.$$cinit = undefined;

		//initialize imports
	});

	//accessor
	$es4.$$public_accessor('currentDomain', SecurityDomain, (function ()
	{
		if (SecurityDomain.$$cinit !== undefined) SecurityDomain.$$cinit();

		return $es4.$$coerce($es4.$$primitive(new (SecurityDomain)()), $es4.$$['flash.system'].SecurityDomain);
	}), null);

	function SecurityDomain()
	{
		//initialize class if not initialized
		if (SecurityDomain.$$cinit !== undefined) SecurityDomain.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof SecurityDomain) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], SecurityDomain) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(SecurityDomain, null, 'flash.system::SecurityDomain');
})();
//flash.system.SecurityDomain


//flash.net.URLRequest
$es4.$$package('flash.net').URLRequest = (function ()
{
	//imports
	var URLRequestMethod;

	//class initializer
	URLRequest.$$cinit = (function ()
	{
		URLRequest.$$cinit = undefined;

		//initialize imports
		URLRequestMethod = $es4.$$['flash.net'].URLRequestMethod;
	});

	function URLRequest()
	{
		//initialize class if not initialized
		if (URLRequest.$$cinit !== undefined) URLRequest.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof URLRequest) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], URLRequest) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('_method', $$thisp, String);
		$es4.$$private_property('_url', $$thisp, String);
		$es4.$$private_property('_requestHeaders', $$thisp, Array);
		$es4.$$private_property('_digest', $$thisp, String);
		$es4.$$private_property('_data', $$thisp, Object);
		$es4.$$private_property('_contentType', $$thisp, String);

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$url)
		{
			//set default parameter values
			var url = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$url, String);

			$es4.$$set($$thisp, $$this, $$thisp, '_method', $es4.$$get(URLRequestMethod, $$this, $$thisp, 'GET'), '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_url', url, '=');
		}));

		//accessor
		$es4.$$public_accessor('contentType', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_contentType');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			$es4.$$set($$thisp, $$this, $$thisp, '_contentType', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('data', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_data');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			$es4.$$set($$thisp, $$this, $$thisp, '_data', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('digest', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_digest');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			$es4.$$set($$thisp, $$this, $$thisp, '_digest', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('method', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_method');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			$es4.$$set($$thisp, $$this, $$thisp, '_method', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('requestHeaders', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_requestHeaders');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Array);

			$es4.$$set($$thisp, $$this, $$thisp, '_requestHeaders', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('url', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_url');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			$es4.$$set($$thisp, $$this, $$thisp, '_url', value, '=');
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(URLRequest, null, 'flash.net::URLRequest');
})();
//flash.net.URLRequest


//flash.display.GraphicsPathWinding
$es4.$$package('flash.display').GraphicsPathWinding = function () { throw new Error('Use of unimplemented class: GraphicsPathWinding'); }
//flash.display.GraphicsPathWinding


//flash.display.Loader
$es4.$$package('flash.display').Loader = (function ()
{
	//imports
	var Event;
	var IOErrorEvent;
	var ProgressEvent;
	var UncaughtErrorEvents;
	var URLLoader;
	var URLRequest;
	var LoaderContext;
	var ByteArray;
	var setTimeout;
	var Browser;
	var DisplayObjectContainer;
	var LoaderInfo;
	var Bitmap;
	var BitmapData;
	var MovieClip;
	var DisplayObject;

	//class initializer
	Loader.$$cinit = (function ()
	{
		Loader.$$cinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;
		IOErrorEvent = $es4.$$['flash.events'].IOErrorEvent;
		ProgressEvent = $es4.$$['flash.events'].ProgressEvent;
		UncaughtErrorEvents = $es4.$$['flash.events'].UncaughtErrorEvents;
		URLLoader = $es4.$$['flash.net'].URLLoader;
		URLRequest = $es4.$$['flash.net'].URLRequest;
		LoaderContext = $es4.$$['flash.system'].LoaderContext;
		ByteArray = $es4.$$['flash.utils'].ByteArray;
		setTimeout = $es4.$$['flash.utils'].setTimeout;
		Browser = $es4.$$['browser'].Browser;
		DisplayObjectContainer = $es4.$$['flash.display'].DisplayObjectContainer;
		LoaderInfo = $es4.$$['flash.display'].LoaderInfo;
		Bitmap = $es4.$$['flash.display'].Bitmap;
		BitmapData = $es4.$$['flash.display'].BitmapData;
		MovieClip = $es4.$$['flash.display'].MovieClip;
		DisplayObject = $es4.$$['flash.display'].DisplayObject;
	});

	function Loader()
	{
		//initialize class if not initialized
		if (Loader.$$cinit !== undefined) Loader.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof Loader) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Loader) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('$_properties', $$thisp);

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties') === undefined)
			{
				$es4.$$call($$this, $$this, $$thisp, '$__properties', [{}]);
			}
			$es4.$$super($$thisp).$$z();
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'LoaderScope', '$_contentLoaderInfo', $es4.$$primitive(new (LoaderInfo)()), '=');
			$es4.$$set($es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'LoaderScope', '$_contentLoaderInfo', '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'LoaderInfoScope', '$_loader', $$this, '=');
		}));

		//method
		$es4.$$public_function('$__properties', $$thisp, (function ($$$$object)
		{
			//set default parameter values
			var object = (0 > arguments.length - 1) ? null : $$$$object;

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties') === undefined)
			{
				object = $es4.$$call($es4.$$super($$thisp), $$this, $$thisp, '$__properties', [object]);
				$es4.$$set(object, $$this, $$thisp, 'LoaderScope', {$_content:null, $_contentLoaderInfo:null, $_font:null, $_lwf:null, $_srcset:null, $_urlLoader:null, $_loaderContext:null}, '=');
				$es4.$$set(object, $$this, $$thisp, 'TLScope', $$this, '=');
				return $es4.$$set($$thisp, $$this, $$thisp, '$_properties', object, '=');
			}
			return $es4.$$get($$thisp, $$this, $$thisp, '$_properties');
		}));

		//method
		$es4.$$public_function('load', $$thisp, (function ($$$$request, $$$$context)
		{
			//set default parameter values
			var request = $es4.$$coerce($$$$request, URLRequest);
			var context = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$context, LoaderContext);

			var a;
			var parts = null;
			var url = $es4.$$get(request, $$this, $$thisp, 'url');
			var content;
			var urlLoader;
			var contentLoaderInfo = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'LoaderScope', '$_contentLoaderInfo'), LoaderInfo);
			$es4.$$set($es4.$$call(contentLoaderInfo, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'LoaderInfoScope', '$_url', url, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'LoaderScope', '$_loaderContext', context = (context || $es4.$$primitive(new (LoaderContext)())), '=');
			var suffix = $es4.$$coerce($es4.$$get($es4.$$call($es4.$$call($es4.$$call($es4.$$call(url, $$this, $$thisp, 'split', ['.']), $$this, $$thisp, 'pop', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'toLowerCase', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'split', ['?']), $$this, $$thisp, 0), String);
			var onLoad = null;
			var onProgress = null;
			var onComplete = null;
			switch (suffix)
			{
				case 'fgl':
					a = $es4.$$call(document, $$this, $$thisp, 'createElement', ['a']);
					$es4.$$set(a, $$this, $$thisp, 'href', url, '=');
					var sinSuffix = $es4.$$coerce($es4.$$call(a, $$this, $$thisp, 'href', 'substr', [0, $es4.$$call(a, $$this, $$thisp, 'href', 'lastIndexOf', ['.'])]), String);
					var json;
					var atlasList = [];
					var flwebgl = $es4.$$call(Browser, $$this, $$thisp, 'getFlashWebGL', $es4.$$EMPTY_ARRAY);
					var player;
					var canvas;
					var onLoaded = $es4.$$coerce(function () 
					{
						$es4.$$call(player, $$this, $$thisp, 'play', $es4.$$EMPTY_ARRAY);
						$es4.$$set(canvas, $$this, $$thisp, 'player', player, '=');
						$es4.$$call($es4.$$call(content, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'MovieClipScope', '$_setupFLWebGL', $es4.$$EMPTY_ARRAY);
						$es4.$$set($es4.$$call(content, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope', '$_loaderInfo', contentLoaderInfo, '=');
						$es4.$$call($$this, $$this, $$thisp, 'addChild', [content]);
						$es4.$$call(contentLoaderInfo, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (Event)($es4.$$get(Event, $$this, $$thisp, 'INIT')))]);
						$es4.$$call(contentLoaderInfo, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (Event)($es4.$$get(Event, $$this, $$thisp, 'COMPLETE')))]);
					}
, Function);
					var create = $es4.$$coerce(function () 
					{
						content = $es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'LoaderScope', '$_content', $es4.$$primitive(new (MovieClip)()), '=');
						canvas = $es4.$$get($es4.$$call(content, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope', '$_domView');
						player = $es4.$$primitive(new ($es4.$$get(flwebgl, $$this, $$thisp, 'Player'))());
						var textureAtlasList = [];
						for (var i = 0; i < $es4.$$get(atlasList, $$this, $$thisp, 'length'); i++)
						{
							$es4.$$call(textureAtlasList, $$this, $$thisp, 'push', [$es4.$$primitive(new ($es4.$$get(flwebgl, $$this, $$thisp, 'TextureAtlas'))($es4.$$get(atlasList, $$this, $$thisp, i, 'json'), $es4.$$get(atlasList, $$this, $$thisp, i, 'image')))]);
						}
						var result = $es4.$$call(player, $$this, $$thisp, 'init', [canvas, json, textureAtlasList, onLoaded]);
						if (result === $es4.$$get(flwebgl, $$this, $$thisp, 'Player', 'E_CONTEXT_CREATION_FAILED') || result === $es4.$$get(flwebgl, $$this, $$thisp, 'Player', 'E_REQUIRED_EXTENSION_NOT_PRESENT'))
						{
							throw $es4.$$primitive(new (Error)(result));
						}
						var width = $es4.$$call(player, $$this, $$thisp, 'getStageWidth', $es4.$$EMPTY_ARRAY);
						var height = $es4.$$call(player, $$this, $$thisp, 'getStageHeight', $es4.$$EMPTY_ARRAY);
						$es4.$$set(canvas, $$this, $$thisp, 'width', width, '=');
						$es4.$$set(canvas, $$this, $$thisp, 'height', height, '=');
						$es4.$$call(player, $$this, $$thisp, 'setViewport', [$es4.$$primitive(new ($es4.$$get(flwebgl, $$this, $$thisp, 'geom', 'Rect'))(0, 0, width, height))]);
					}
, Function);
					var loadJSONAtlas = $es4.$$coerce(function () 
					{
						var xmlHttpRequest = $es4.$$call(Browser, $$this, $$thisp, 'getNewXMLHttpRequest', $es4.$$EMPTY_ARRAY);
						$es4.$$call(xmlHttpRequest, $$this, $$thisp, 'open', ['GET', sinSuffix + '_atlas.json', true]);
						$es4.$$call(xmlHttpRequest, $$this, $$thisp, 'overrideMimeType', ['text/plain']);
						$es4.$$set(xmlHttpRequest, $$this, $$thisp, 'onload', function () 
{
	$es4.$$set(xmlHttpRequest, $$this, $$thisp, 'onload', undefined, '=');
	$es4.$$call(atlasList, $$this, $$thisp, 'push', [{json:$es4.$$call(JSON, $$this, $$thisp, 'parse', [$es4.$$get(xmlHttpRequest, $$this, $$thisp, 'responseText')]), image:sinSuffix + '_atlas.png'}]);
	create();
}
, '=');
						$es4.$$call(xmlHttpRequest, $$this, $$thisp, 'send', [null]);
					}
, Function);
					var loadJSON = $es4.$$coerce(function () 
					{
						var xmlHttpRequest = $es4.$$call(Browser, $$this, $$thisp, 'getNewXMLHttpRequest', $es4.$$EMPTY_ARRAY);
						$es4.$$call(xmlHttpRequest, $$this, $$thisp, 'open', ['GET', sinSuffix + '.json', true]);
						$es4.$$call(xmlHttpRequest, $$this, $$thisp, 'overrideMimeType', ['text/plain']);
						$es4.$$set(xmlHttpRequest, $$this, $$thisp, 'onload', function () 
{
	$es4.$$set(xmlHttpRequest, $$this, $$thisp, 'onload', undefined, '=');
	json = $es4.$$call(JSON, $$this, $$thisp, 'parse', [$es4.$$get(xmlHttpRequest, $$this, $$thisp, 'responseText')]);
	loadJSONAtlas();
}
, '=');
						$es4.$$call(xmlHttpRequest, $$this, $$thisp, 'send', [null]);
					}
, Function);
					var xmlHttpRequest = $es4.$$call(Browser, $$this, $$thisp, 'getNewXMLHttpRequest', $es4.$$EMPTY_ARRAY);
					$es4.$$call(xmlHttpRequest, $$this, $$thisp, 'open', ['GET', sinSuffix + '_actions.js', true]);
					$es4.$$call(xmlHttpRequest, $$this, $$thisp, 'overrideMimeType', ['text/javascript']);
					$es4.$$set(xmlHttpRequest, $$this, $$thisp, 'onload', function () 
{
	$es4.$$set(xmlHttpRequest, $$this, $$thisp, 'onload', undefined, '=');
	$es4.$$call(Browser, $$this, $$thisp, 'doEval', [$es4.$$get(xmlHttpRequest, $$this, $$thisp, 'responseText')]);
	loadJSON();
}
, '=');
					$es4.$$call(xmlHttpRequest, $$this, $$thisp, 'send', [null]);
					return;
				case 'js':
				case 'swf':
					$es4.$$set($es4.$$call(contentLoaderInfo, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'LoaderInfoScope', '$_contentType', 'application/x-shockwave-flash', '=');
					if ($es4.$$get(contentLoaderInfo, $$this, $$thisp, 'parameters', 'font'))
					{
						a = $es4.$$call(document, $$this, $$thisp, 'createElement', ['a']);
						$es4.$$set(a, $$this, $$thisp, 'href', url, '=');
						parts = $es4.$$coerce($es4.$$call(a, $$this, $$thisp, 'pathname', 'split', ['.']), Array);
						$es4.$$set(parts, $$this, $$thisp, $es4.$$get(parts, $$this, $$thisp, 'length') - 1, 'ttf', '=');
						$es4.$$set(a, $$this, $$thisp, 'pathname', $es4.$$call(parts, $$this, $$thisp, 'join', ['.']), '=');
						var fontName = $es4.$$coerce($es4.$$call($es4.$$call($es4.$$call($es4.$$call(a, $$this, $$thisp, 'pathname', 'split', ['/']), $$this, $$thisp, 'pop', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'split', ['.']), $$this, $$thisp, 'shift', $es4.$$EMPTY_ARRAY), String);
						var onFontLoaded = $es4.$$coerce(function () 
						{
							var FontClass = {'$$isclass':true, name:fontName};
							$es4.$$set(FontClass, $$this, $$thisp, fontName, FontClass, '=');
							$es4.$$set(context, $$this, $$thisp, 'applicationDomain', '$__definitions', fontName, FontClass, '=');
							$es4.$$call(contentLoaderInfo, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (Event)($es4.$$get(Event, $$this, $$thisp, 'INIT')))]);
							$es4.$$call(contentLoaderInfo, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (Event)($es4.$$get(Event, $$this, $$thisp, 'COMPLETE')))]);
						}
, Function);
						var src = null;
						var regex = /^(?:\/|[a-z]+:\/\/)/;
						if ($es4.$$call(regex, $$this, $$thisp, 'test', [url]))
						{
							src = $es4.$$coerce($es4.$$get(a, $$this, $$thisp, 'href'), String);
						}
						else
						{
							var location = $es4.$$get(window, $$this, $$thisp, 'location');
							parts = $es4.$$coerce($es4.$$call(location, $$this, $$thisp, 'pathname', 'split', ['/']), Array);
							$es4.$$call(parts, $$this, $$thisp, 'pop', $es4.$$EMPTY_ARRAY);
							var slocation = $es4.$$call(parts, $$this, $$thisp, 'join', ['/']);
							src = $es4.$$coerce(($es4.$$call(a, $$this, $$thisp, 'pathname', 'indexOf', [slocation]) == -1) ? ($es4.$$get(location, $$this, $$thisp, 'pathname') + '/../' + $es4.$$get(a, $$this, $$thisp, 'pathname') + $es4.$$get(a, $$this, $$thisp, 'search') + $es4.$$get(a, $$this, $$thisp, 'hash')) : $es4.$$get(a, $$this, $$thisp, 'href'), String);
						}
						var element = $es4.$$call(document, $$this, $$thisp, 'createElement', ['style']);
						$es4.$$call(element, $$this, $$thisp, 'setAttribute', ['type', 'text/css']);
						$es4.$$set(element, $$this, $$thisp, 'innerHTML', "@font-face {font-family: '" + fontName + "'; src: url('" + src + "') format('truetype');}", '=');
						$es4.$$call(document, $$this, $$thisp, 'head', 'appendChild', [element]);
						setTimeout(onFontLoaded, 1);
						return;
					}
					else
					{
						a = $es4.$$call(document, $$this, $$thisp, 'createElement', ['a']);
						$es4.$$set(a, $$this, $$thisp, 'href', url, '=');
						parts = $es4.$$coerce($es4.$$call(a, $$this, $$thisp, 'pathname', 'split', ['.']), Array);
						if ($es4.$$call($es4.$$call(parts, $$this, $$thisp, 'pop', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'toLowerCase', $es4.$$EMPTY_ARRAY) != 'js')
						{
							content = $es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'LoaderScope', '$_content', $es4.$$primitive(new (MovieClip)()), '=');
							canvas = $es4.$$get($es4.$$call(content, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope', '$_domView');
							$es4.$$set(canvas, $$this, $$thisp, 'width', 0, '=');
							$es4.$$set(canvas, $$this, $$thisp, 'height', 0, '=');
							$es4.$$call($es4.$$call(Browser, $$this, $$thisp, 'getLWF', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'useCanvasRenderer', $es4.$$EMPTY_ARRAY);
							var sinSuffix = $es4.$$coerce($es4.$$call(a, $$this, $$thisp, 'href', 'substr', [0, $es4.$$call(a, $$this, $$thisp, 'href', 'lastIndexOf', ['.'])]), String);
							var fileName = $es4.$$coerce($es4.$$call($es4.$$call(sinSuffix, $$this, $$thisp, 'split', ['/']), $$this, $$thisp, 'pop', $es4.$$EMPTY_ARRAY), String);
							var lwfURL = fileName + '.lwf';
							var prefix = sinSuffix + '.lwf/';
							onLoad = $es4.$$coerce(function ($$$$lwf) 
{
				//set default parameter values
				var lwf = $es4.$$coerce($$$$lwf, Object);

	$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'LoaderScope', '$_lwf', lwf, '=');
	$es4.$$set(canvas, $$this, $$thisp, 'lwf', lwf, '=');
	$es4.$$call($es4.$$call(content, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'MovieClipScope', '$_setupLWF', $es4.$$EMPTY_ARRAY);
	$es4.$$set($es4.$$call(content, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'DisplayObjectScope', '$_loaderInfo', contentLoaderInfo, '=');
	$es4.$$call($$this, $$this, $$thisp, 'addChild', [content]);
	$es4.$$call(contentLoaderInfo, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (Event)($es4.$$get(Event, $$this, $$thisp, 'INIT')))]);
	$es4.$$call(contentLoaderInfo, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (Event)($es4.$$get(Event, $$this, $$thisp, 'COMPLETE')))]);
}
, Function);
							onProgress = $es4.$$coerce(function ($$$$loaded, $$$$total) 
{
				//set default parameter values
				var loaded = $es4.$$coerce($$$$loaded, uint);
				var total = $es4.$$coerce($$$$total, uint);

	var properties = $es4.$$get($es4.$$call(contentLoaderInfo, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'LoaderInfoScope');
	$es4.$$set(properties, $$this, $$thisp, '$_bytesLoaded', loaded, '=');
	$es4.$$set(properties, $$this, $$thisp, '$_bytesTotal', total, '=');
	$es4.$$call(contentLoaderInfo, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (ProgressEvent)($es4.$$get(ProgressEvent, $$this, $$thisp, 'PROGRESS'), false, false, loaded, total))]);
}
, Function);
							var cache = $es4.$$call($es4.$$call(Browser, $$this, $$thisp, 'getLWF', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'ResourceCache', 'get', $es4.$$EMPTY_ARRAY);
							$es4.$$call(cache, $$this, $$thisp, 'loadLWF', [{lwf:lwfURL, prefix:prefix, stage:canvas, onload:onLoad, onprogress:onProgress}]);
						}
						else
						{
							onComplete = $es4.$$coerce(function ($$$$event) 
{
				//set default parameter values
				var event = $es4.$$coerce($$$$event, Event);

	$es4.$$call(urlLoader, $$this, $$thisp, 'removeEventListener', [$es4.$$get(Event, $$this, $$thisp, 'COMPLETE'), onComplete]);
	content = $es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'LoaderScope', '$_content', $es4.$$as($es4.$$call(Browser, $$this, $$thisp, 'doEval', [$es4.$$get(urlLoader, $$this, $$thisp, 'data')]), DisplayObject), '=');
	$es4.$$call($$this, $$this, $$thisp, 'addChild', [content]);
	$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'LoaderScope', '$_urlLoader', null, '=');
	$es4.$$call(contentLoaderInfo, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (Event)($es4.$$get(Event, $$this, $$thisp, 'INIT')))]);
	$es4.$$call(contentLoaderInfo, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (Event)($es4.$$get(Event, $$this, $$thisp, 'COMPLETE')))]);
}
, Function);
							urlLoader = $es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'LoaderScope', '$_urlLoader', $es4.$$primitive(new (URLLoader)()), '=');
							$es4.$$call(urlLoader, $$this, $$thisp, 'addEventListener', [$es4.$$get(Event, $$this, $$thisp, 'COMPLETE'), onComplete]);
							$es4.$$call(urlLoader, $$this, $$thisp, 'load', [request]);
						}
					}
					return;
				case 'jpg':
				case 'jpeg':
				case 'gif':
				case 'png':
				case 'xpng':
					var contentType = null;
					switch (suffix)
					{
						case 'jpg':
						case 'jpeg':
							contentType = 'image/jpeg';
							break;
						case 'gif':
							contentType = 'image/gif';
							break;
						case 'png':
						case 'xpng':
							contentType = 'image/png';
							break;
					}
					$es4.$$set($es4.$$call(contentLoaderInfo, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'LoaderInfoScope', '$_contentType', contentType, '=');
					var img = $es4.$$call(document, $$this, $$thisp, 'createElement', ['img']);
					$es4.$$set(img, $$this, $$thisp, 'onerror', function ($$$$event) 
{
				//set default parameter values
				var event = $es4.$$coerce($$$$event, Object);

	$es4.$$set(img, $$this, $$thisp, 'onload', $es4.$$set(img, $$this, $$thisp, 'onerror', null, '='), '=');
	$es4.$$call(contentLoaderInfo, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (IOErrorEvent)($es4.$$get(IOErrorEvent, $$this, $$thisp, 'IO_ERROR'), false, false, $es4.$$get(event, $$this, $$thisp, 'error')))]);
}
, '=');
					$es4.$$set(img, $$this, $$thisp, 'onload', function ($$$$event) 
{
				//set default parameter values
				var event = $es4.$$coerce($$$$event, Object);

	$es4.$$set(img, $$this, $$thisp, 'onerror', $es4.$$set(img, $$this, $$thisp, 'onload', null, '='), '=');
	content = $es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'LoaderScope', '$_content', $es4.$$primitive(new (Bitmap)()), '=');
	var properties = $es4.$$call(content, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY);
	var canvas = $es4.$$get(properties, $$this, $$thisp, 'DisplayObjectScope', '$_domView');
	$es4.$$set(canvas, $$this, $$thisp, 'width', $es4.$$get(img, $$this, $$thisp, 'naturalWidth'), '=');
	$es4.$$set(canvas, $$this, $$thisp, 'height', $es4.$$get(img, $$this, $$thisp, 'naturalHeight'), '=');
	$es4.$$call($es4.$$call(canvas, $$this, $$thisp, 'getContext', ['2d']), $$this, $$thisp, 'drawImage', [img, 0, 0]);
	var bitmapData = $es4.$$coerce($es4.$$primitive(new (BitmapData)($es4.$$get(canvas, $$this, $$thisp, 'width'), $es4.$$get(canvas, $$this, $$thisp, 'height'))), BitmapData);
	$es4.$$set($es4.$$call(bitmapData, $$this, $$thisp, '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'BitmapDataScope', '$_canvas', canvas, '=');
	$es4.$$set(properties, $$this, $$thisp, 'BitmapScope', '$_bitmapData', bitmapData, '=');
	$es4.$$call(properties, $$this, $$thisp, 'DisplayObjectScope', '$_setExplicitBounds', [$es4.$$get(canvas, $$this, $$thisp, 'width'), $es4.$$get(canvas, $$this, $$thisp, 'height')]);
	$es4.$$call($$this, $$this, $$thisp, 'addChild', [content]);
	$es4.$$call(contentLoaderInfo, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (Event)($es4.$$get(Event, $$this, $$thisp, 'COMPLETE')))]);
}
, '=');
					if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'LoaderScope', '$_srcset') != null)
					{
						$es4.$$set(img, $$this, $$thisp, 'srcset', $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'LoaderScope', '$_srcset'), '=');
					}
					$es4.$$set(img, $$this, $$thisp, 'src', url, '=');
					return;
				default:
					throw $es4.$$primitive(new (Error)('Loader, attempt to load unknown type: ' + $es4.$$get(request, $$this, $$thisp, 'url')));
			}
		}));

		//method
		$es4.$$public_function('unload', $$thisp, (function ()
		{
			if (!$es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'LoaderScope', '$_lwf'))
			{
				return;
			}
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'LoaderScope', '$_content', 'parent') == $$this)
			{
				$es4.$$call($es4.$$call($es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'LoaderScope', '$_content', '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'TLScope', 'parent', '$__properties', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'TLScope', 'removeChild', [$es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'LoaderScope', '$_content')]);
			}
			var cache = $es4.$$call($es4.$$call(Browser, $$this, $$thisp, 'getLWF', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'ResourceCache', 'get', $es4.$$EMPTY_ARRAY);
			$es4.$$call(cache, $$this, $$thisp, 'unloadLWF', [$es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'LoaderScope', '$_lwf')]);
		}));

		//method
		$es4.$$public_function('unloadAndStop', $$thisp, (function ($$$$gc)
		{
			//set default parameter values
			var gc = (0 > arguments.length - 1) ? true : $es4.$$coerce($$$$gc, Boolean);

			$es4.$$call($$this, $$this, $$thisp, 'unload', $es4.$$EMPTY_ARRAY);
		}));

		//method
		$es4.$$public_function('close', $$thisp, (function ()
		{
		}));

		//method
		$es4.$$public_function('loadBytes', $$thisp, (function ($$$$bytes, $$$$context)
		{
			//set default parameter values
			var bytes = $es4.$$coerce($$$$bytes, ByteArray);
			var context = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$context, LoaderContext);

			throw $es4.$$primitive(new (Error)('Loader: attempted call to an unimplemented function "loadBytes"'));
		}));

		//accessor
		$es4.$$public_accessor('width', $$thisp, (function ()
		{
			if ($es4.$$is($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'LoaderScope', '$_content'), Bitmap))
			{
				return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'LoaderScope', '$_content', 'width') * $es4.$$get($$this, $$this, $$thisp, 'scaleX'), Number);
			}
			return $es4.$$coerce($es4.$$get($es4.$$super($$thisp), $$this, $$thisp, 'width'), Number);
		}), (function ($$value)
		{
			$es4.$$super($$thisp).width = $$value;
		}));

		//accessor
		$es4.$$public_accessor('height', $$thisp, (function ()
		{
			if ($es4.$$is($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'LoaderScope', '$_content'), Bitmap))
			{
				return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'LoaderScope', '$_content', 'height') * $es4.$$get($$this, $$this, $$thisp, 'scaleY'), Number);
			}
			return $es4.$$coerce($es4.$$get($es4.$$super($$thisp), $$this, $$thisp, 'height'), Number);
		}), (function ($$value)
		{
			$es4.$$super($$thisp).height = $$value;
		}));

		//accessor
		$es4.$$public_accessor('srcset', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'LoaderScope', '$_srcset'), String);
		}), (function ($$$$srcset)
		{
			//set default parameter values
			var srcset = $es4.$$coerce($$$$srcset, String);

			$es4.$$set($$thisp, $$this, $$thisp, '$_properties', 'LoaderScope', '$_srcset', srcset, '=');
		}));

		//accessor
		$es4.$$public_accessor('content', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'LoaderScope', '$_content'), DisplayObject);
		}), null);

		//accessor
		$es4.$$public_accessor('contentLoaderInfo', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'LoaderScope', '$_contentLoaderInfo'), LoaderInfo);
		}), null);

		//accessor
		$es4.$$public_accessor('uncaughtErrorEvents', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Loader: attempted call to an unimplemented function "uncaughtErrorEvents"'));
		}), null);

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(Loader, {EXTENDS:'flash.display.DisplayObjectContainer'}, 'flash.display::Loader');
})();
//flash.display.Loader


//flash.sampler.CertificateStatus
$es4.$$package('flash.sampler').CertificateStatus = function () { throw new Error('Use of unimplemented class: CertificateStatus'); }
//flash.sampler.CertificateStatus


//flash.events.FocusEvent
$es4.$$package('flash.events').FocusEvent = (function ()
{
	//imports
	var InteractiveObject;
	var Event;
	var FocusEvent;

	//properties
	FocusEvent.FOCUS_IN = "focusIn";
	FocusEvent.FOCUS_OUT = "focusOut";
	FocusEvent.KEY_FOCUS_CHANGE = "keyFocusChange";
	FocusEvent.MOUSE_FOCUS_CHANGE = "mouseFocusChange";

	//class initializer
	FocusEvent.$$cinit = (function ()
	{
		FocusEvent.$$cinit = undefined;

		//initialize imports
		InteractiveObject = $es4.$$['flash.display'].InteractiveObject;
		Event = $es4.$$['flash.events'].Event;
	});

	function FocusEvent()
	{
		//initialize class if not initialized
		if (FocusEvent.$$cinit !== undefined) FocusEvent.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof FocusEvent) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], FocusEvent) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('_isRelatedObjectInaccessible', $$thisp, Boolean);
		$es4.$$private_property('_keyCode', $$thisp, uint);
		$es4.$$private_property('_shiftKey', $$thisp, Boolean);
		$es4.$$private_property('_relatedObject', $$thisp, InteractiveObject);

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$type, $$$$bubbles, $$$$cancelable, $$$$relatedObject, $$$$shiftKey, $$$$keyCode)
		{
			//set default parameter values
			var type = $es4.$$coerce($$$$type, String);
			var bubbles = (1 > arguments.length - 1) ? true : $es4.$$coerce($$$$bubbles, Boolean);
			var cancelable = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$cancelable, Boolean);
			var relatedObject = (3 > arguments.length - 1) ? null : $es4.$$coerce($$$$relatedObject, InteractiveObject);
			var shiftKey = (4 > arguments.length - 1) ? false : $es4.$$coerce($$$$shiftKey, Boolean);
			var keyCode = (5 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$keyCode, uint);

			$es4.$$super($$thisp).$$z(type, bubbles, cancelable);
			$es4.$$set($$thisp, $$this, $$thisp, '_relatedObject', relatedObject, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_shiftKey', shiftKey, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_keyCode', keyCode, '=');
		}));

		//method
		$es4.$$public_function('clone', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$primitive(new (FocusEvent)($es4.$$get($$this, $$this, $$thisp, 'type'), $es4.$$get($$this, $$this, $$thisp, 'bubbles'), $es4.$$get($$this, $$this, $$thisp, 'cancelable'), $es4.$$get($$this, $$this, $$thisp, 'relatedObject'), $es4.$$get($$this, $$this, $$thisp, 'shiftKey'), $es4.$$get($$this, $$this, $$thisp, 'keyCode'))), Event);
		}));

		//method
		$es4.$$public_function('toString', $$thisp, (function ()
		{
			return $es4.$$call($$this, $$this, $$thisp, 'formatToString', ['FocusEvent', 'type', 'bubbles', 'cancelable', 'relatedObject', 'shiftKey', 'keyCode']);
		}));

		//accessor
		$es4.$$public_accessor('isRelatedObjectInaccessible', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_isRelatedObjectInaccessible');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			$es4.$$set($$thisp, $$this, $$thisp, '_isRelatedObjectInaccessible', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('keyCode', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_keyCode');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, uint);

			$es4.$$set($$thisp, $$this, $$thisp, '_keyCode', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('relatedObject', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_relatedObject');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, InteractiveObject);

			$es4.$$set($$thisp, $$this, $$thisp, '_relatedObject', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('shiftKey', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_shiftKey');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			$es4.$$set($$thisp, $$this, $$thisp, '_shiftKey', value, '=');
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(FocusEvent, {EXTENDS:'flash.events.Event'}, 'flash.events::FocusEvent');
})();
//flash.events.FocusEvent


//flash.filters.BlurFilter
$es4.$$package('flash.filters').BlurFilter = function () { throw new Error('Use of unimplemented class: BlurFilter'); }
//flash.filters.BlurFilter


//flash.xml.XMLNode
$es4.$$package('flash.xml').XMLNode = (function ()
{
	//imports
	var XMLNode;
	var XMLNodeType;

	//class initializer
	XMLNode.$$cinit = (function ()
	{
		XMLNode.$$cinit = undefined;

		//initialize imports
		XMLNodeType = $es4.$$['flash.xml'].XMLNodeType;
	});

	function XMLNode()
	{
		//initialize class if not initialized
		if (XMLNode.$$cinit !== undefined) XMLNode.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof XMLNode) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], XMLNode) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('$_attributes', $$thisp, Object);
		$es4.$$public_property('$__childNodes', $$thisp, Array);
		$es4.$$public_property('$__localName', $$thisp, String);
		$es4.$$public_property('$__prefix', $$thisp, String);
		$es4.$$public_property('$__namespaceURI', $$thisp, String);
		$es4.$$public_property('$__domObject', $$thisp, Object);
		$es4.$$public_property('firstChild', $$thisp, $es4.$$['flash.xml'].XMLNode);
		$es4.$$public_property('lastChild', $$thisp, $es4.$$['flash.xml'].XMLNode);
		$es4.$$public_property('nextSibling', $$thisp, $es4.$$['flash.xml'].XMLNode);
		$es4.$$public_property('nodeName', $$thisp, String);
		$es4.$$public_property('nodeType', $$thisp, uint);
		$es4.$$public_property('nodeValue', $$thisp, String);
		$es4.$$public_property('parentNode', $$thisp, $es4.$$['flash.xml'].XMLNode);
		$es4.$$public_property('previousSibling', $$thisp, $es4.$$['flash.xml'].XMLNode);

		//initializer
		$es4.$$iinit($$thisp, (function ()
		{
			//initialize properties
			$es4.$$set($$this, $$this, $$thisp, '$_attributes', {}, '=');
			$es4.$$set($$this, $$this, $$thisp, '$__childNodes', [], '=');
		}));

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$type, $$$$value)
		{
			//set default parameter values
			var type = $es4.$$coerce($$$$type, uint);
			var value = $es4.$$coerce($$$$value, String);

			$es4.$$set($$this, $$this, $$thisp, 'nodeType', type, '=');
			if (type != $es4.$$get(XMLNodeType, $$this, $$thisp, 'ELEMENT_NODE'))
			{
				$es4.$$set($$this, $$this, $$thisp, 'nodeValue', value, '=');
			}
		}));

		//method
		$es4.$$public_function('appendChild', $$thisp, (function ($$$$node)
		{
			//set default parameter values
			var node = $es4.$$coerce($$$$node, $es4.$$['flash.xml'].XMLNode);

			if ($es4.$$get(node, $$this, $$thisp, 'parentNode'))
			{
				$es4.$$call(node, $$this, $$thisp, 'removeNode', $es4.$$EMPTY_ARRAY);
			}
			$es4.$$set(node, $$this, $$thisp, 'parentNode', $$this, '=');
			$es4.$$call($$this, $$this, $$thisp, '$__childNodes', 'push', [node]);
		}));

		//method
		$es4.$$public_function('cloneNode', $$thisp, (function ($$$$deep)
		{
			//set default parameter values
			var deep = $es4.$$coerce($$$$deep, Boolean);

			var newNode = $es4.$$coerce($es4.$$primitive(new (XMLNode)($es4.$$get($$this, $$this, $$thisp, 'nodeType'), $es4.$$get($$this, $$this, $$thisp, 'nodeValue'))), $es4.$$['flash.xml'].XMLNode);
			if (!deep)
			{
				$es4.$$set(newNode, $$this, $$thisp, '$__childNodes', $es4.$$call($$this, $$this, $$thisp, '$__childNodes', 'concat', $es4.$$EMPTY_ARRAY), '=');
			}
			return newNode;
		}));

		//method
		$es4.$$public_function('getNamespaceForPrefix', $$thisp, (function ($$$$prefix)
		{
			//set default parameter values
			var prefix = $es4.$$coerce($$$$prefix, String);

			throw $es4.$$primitive(new (Error)('XMLNode: attempted call to an unimplemented function "getNamespaceForPrefix"'));
		}));

		//method
		$es4.$$public_function('getPrefixForNamespace', $$thisp, (function ($$$$ns)
		{
			//set default parameter values
			var ns = $es4.$$coerce($$$$ns, String);

			throw $es4.$$primitive(new (Error)('XMLNode: attempted call to an unimplemented function "getPrefixForNamespace"'));
		}));

		//method
		$es4.$$public_function('hasChildNodes', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$this, $$this, $$thisp, '$__childNodes', 'length') > 0, Boolean);
		}));

		//method
		$es4.$$public_function('insertBefore', $$thisp, (function ($$$$node, $$$$before)
		{
			//set default parameter values
			var node = $es4.$$coerce($$$$node, $es4.$$['flash.xml'].XMLNode);
			var before = $es4.$$coerce($$$$before, $es4.$$['flash.xml'].XMLNode);

			var childNodes = $es4.$$get($$this, $$this, $$thisp, '$__childNodes');
			var childNodesLength = $es4.$$coerce($es4.$$get(childNodes, $$this, $$thisp, 'length'), int);
			for (var i = 0; i < childNodesLength; i++)
			{
				if ($es4.$$get(childNodes, $$this, $$thisp, i) != before)
				{
					continue;
				}
				if ($es4.$$get(node, $$this, $$thisp, 'parentNode'))
				{
					$es4.$$call(node, $$this, $$thisp, 'removeNode', $es4.$$EMPTY_ARRAY);
				}
				$es4.$$set(node, $$this, $$thisp, 'parentNode', $$this, '=');
				$es4.$$call(childNodes, $$this, $$thisp, 'splice', [i, 0, node]);
				return;
			}
			trace('xmlNode insertion failed');
		}));

		//method
		$es4.$$public_function('removeNode', $$thisp, (function ()
		{
			if (!$es4.$$get($$this, $$this, $$thisp, 'parentNode'))
			{
				return;
			}
			$es4.$$call($$this, $$this, $$thisp, 'parentNode', '$__removeNodeChild', [$$this]);
		}));

		//method
		$es4.$$protected_function('$__removeNodeChild', $$thisp, (function ($$$$child)
		{
			//set default parameter values
			var child = $es4.$$coerce($$$$child, $es4.$$['flash.xml'].XMLNode);

			var childNodes = $es4.$$get($$this, $$this, $$thisp, '$__childNodes');
			var childNodesLength = $es4.$$coerce($es4.$$get(childNodes, $$this, $$thisp, 'length'), int);
			for (var i = 0; i < childNodesLength; i++)
			{
				if ($es4.$$get(childNodes, $$this, $$thisp, i) != child)
				{
					continue;
				}
				$es4.$$call(childNodes, $$this, $$thisp, 'splice', [0, 1]);
				i--;
				return true;
			}
			return false;
		}));

		//method
		$es4.$$public_function('toString', $$thisp, (function ($$$$$toXMLString)
		{
			//set default parameter values
			var $toXMLString = (0 > arguments.length - 1) ? false : $es4.$$coerce($$$$$toXMLString, Boolean);

			if (!$es4.$$get($$this, $$this, $$thisp, 'nodeName') && $es4.$$get($$this, $$this, $$thisp, 'nodeType') != $es4.$$get(XMLNodeType, $$this, $$thisp, 'CDATA_NODE'))
			{
				return '[XMLNode]';
			}
			if ($es4.$$get($$this, $$this, $$thisp, 'nodeType') == $es4.$$get(XMLNodeType, $$this, $$thisp, 'TEXT_NODE') || $es4.$$get($$this, $$this, $$thisp, 'nodeName') == "#text")
			{
				return $es4.$$get($$this, $$this, $$thisp, 'nodeValue');
			}
			if ($es4.$$get($$this, $$this, $$thisp, 'nodeType') == $es4.$$get(XMLNodeType, $$this, $$thisp, 'CDATA_NODE'))
			{
				return ($toXMLString) ? $es4.$$get($$this, $$this, $$thisp, 'nodeValue') : $es4.$$call($es4.$$call($es4.$$call($es4.$$call($$this, $$this, $$thisp, 'nodeValue', 'split', ["<"]), $$this, $$thisp, 'join', ["&lt;"]), $$this, $$thisp, 'split', [">"]), $$this, $$thisp, 'join', ["&gt;"]);
			}
			var attributesSerialised = "";
			var attributes = $es4.$$get($$thisp, $$this, $$thisp, '$_attributes');
			for (var $$i0 = (attributes || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i0 != 0; $$i0 = attributes.$$nextNameIndex($$i0))
			{
				var iter = $es4.$$coerce(attributes.$$nextName($$i0), String);

				attributesSerialised += " " + iter + "=\"" + $es4.$$get(attributes, $$this, $$thisp, iter) + "\"";
			}
			var nodeStr = "<" + $es4.$$get($$this, $$this, $$thisp, 'nodeName') + attributesSerialised;
			var nodeEnding = "";
			if (!$es4.$$get($$this, $$this, $$thisp, 'childNodes', 'length'))
			{
				nodeStr += " />";
			}
			else
			{
				nodeStr += ">";
				nodeEnding = "</" + $es4.$$get($$this, $$this, $$thisp, 'nodeName') + ">";
			}
			var innerNodes = "";
			var childNodesLength = $es4.$$coerce($es4.$$get($$this, $$this, $$thisp, 'childNodes', 'length'), int);
			for (var i = 0; i < childNodesLength; i++)
			{
				innerNodes += $es4.$$coerce($es4.$$call($$this, $$this, $$thisp, 'childNodes', i, 'toString', $es4.$$EMPTY_ARRAY), String);
			}
			return nodeStr + innerNodes + nodeEnding;
		}));

		//accessor
		$es4.$$public_accessor('attributes', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '$_attributes');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Object);

			$es4.$$set($$thisp, $$this, $$thisp, '$_attributes', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('childNodes', $$thisp, (function ()
		{
			return $es4.$$get($$this, $$this, $$thisp, '$__childNodes');
		}), null);

		//accessor
		$es4.$$public_accessor('localName', $$thisp, (function ()
		{
			return $es4.$$get($$this, $$this, $$thisp, '$__localName');
		}), null);

		//accessor
		$es4.$$public_accessor('namespaceURI', $$thisp, (function ()
		{
			return $es4.$$get($$this, $$this, $$thisp, '$__namespaceURI');
		}), null);

		//accessor
		$es4.$$public_accessor('prefix', $$thisp, (function ()
		{
			return $es4.$$get($$this, $$this, $$thisp, '$__prefix');
		}), null);

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(XMLNode, null, 'flash.xml::XMLNode');
})();
//flash.xml.XMLNode


//flash.ui.MouseCursorData
$es4.$$package('flash.ui').MouseCursorData = function () { throw new Error('Use of unimplemented class: MouseCursorData'); }
//flash.ui.MouseCursorData


//flash.media.ID3Info
$es4.$$package('flash.media').ID3Info = function () { throw new Error('Use of unimplemented class: ID3Info'); }
//flash.media.ID3Info


//flash.net.Responder
$es4.$$package('flash.net').Responder = function () { throw new Error('Use of unimplemented class: Responder'); }
//flash.net.Responder


//flash.net.drm.LoadVoucherSetting
$es4.$$package('flash.net.drm').LoadVoucherSetting = function () { throw new Error('Use of unimplemented class: LoadVoucherSetting'); }
//flash.net.drm.LoadVoucherSetting


//flash.display3D.Context3DWrapMode
$es4.$$package('flash.display3D').Context3DWrapMode = function () { throw new Error('Use of unimplemented class: Context3DWrapMode'); }
//flash.display3D.Context3DWrapMode


//flash.events.PressAndTapGestureEvent
$es4.$$package('flash.events').PressAndTapGestureEvent = function () { throw new Error('Use of unimplemented class: PressAndTapGestureEvent'); }
//flash.events.PressAndTapGestureEvent


//flash.events.StatusEvent
$es4.$$package('flash.events').StatusEvent = (function ()
{
	//imports
	var Event;

	//properties
	StatusEvent.STATUS = "status";

	//class initializer
	StatusEvent.$$cinit = (function ()
	{
		StatusEvent.$$cinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;
	});

	function StatusEvent()
	{
		//initialize class if not initialized
		if (StatusEvent.$$cinit !== undefined) StatusEvent.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof StatusEvent) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], StatusEvent) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('_code', $$thisp, String);

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$type, $$$$bubbles, $$$$cancelable, $$$$code, $$$$level)
		{
			//set default parameter values
			var type = $es4.$$coerce($$$$type, String);
			var bubbles = (1 > arguments.length - 1) ? false : $es4.$$coerce($$$$bubbles, Boolean);
			var cancelable = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$cancelable, Boolean);
			var code = (3 > arguments.length - 1) ? "" : $es4.$$coerce($$$$code, String);
			var level = (4 > arguments.length - 1) ? "" : $es4.$$coerce($$$$level, String);

			$es4.$$super($$thisp).$$z(type, bubbles, cancelable);
			$es4.$$set($$thisp, $$this, $$thisp, '_code', code, '=');
		}));

		//method
		$es4.$$public_function('clone', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('StatusEvent: attempted call to an unimplemented function "clone"'));
		}));

		//method
		$es4.$$public_function('toString', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('StatusEvent: attempted call to an unimplemented function "toString"'));
		}));

		//accessor
		$es4.$$public_accessor('code', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_code');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			throw $es4.$$primitive(new (Error)('StatusEvent: attempted call to an unimplemented function "code"'));
		}));

		//accessor
		$es4.$$public_accessor('level', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('StatusEvent: attempted call to an unimplemented function "level"'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			throw $es4.$$primitive(new (Error)('StatusEvent: attempted call to an unimplemented function "level"'));
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(StatusEvent, {EXTENDS:'flash.events.Event'}, 'flash.events::StatusEvent');
})();
//flash.events.StatusEvent


//flash.events.TextEvent
$es4.$$package('flash.events').TextEvent = (function ()
{
	//imports
	var Event;
	var TextEvent;

	//properties
	TextEvent.LINK = "link";
	TextEvent.TEXT_INPUT = "textInput";

	//class initializer
	TextEvent.$$cinit = (function ()
	{
		TextEvent.$$cinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;
	});

	function TextEvent()
	{
		//initialize class if not initialized
		if (TextEvent.$$cinit !== undefined) TextEvent.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof TextEvent) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], TextEvent) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('_text', $$thisp, String);

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$type, $$$$bubbles, $$$$cancelable, $$$$text)
		{
			//set default parameter values
			var type = $es4.$$coerce($$$$type, String);
			var bubbles = (1 > arguments.length - 1) ? false : $es4.$$coerce($$$$bubbles, Boolean);
			var cancelable = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$cancelable, Boolean);
			var text = (3 > arguments.length - 1) ? "" : $es4.$$coerce($$$$text, String);

			$es4.$$super($$thisp).$$z(type, bubbles, cancelable);
			$es4.$$set($$thisp, $$this, $$thisp, '_text', text, '=');
		}));

		//method
		$es4.$$public_function('clone', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$primitive(new (TextEvent)($es4.$$get($$this, $$this, $$thisp, 'type'), $es4.$$get($$this, $$this, $$thisp, 'bubbles'), $es4.$$get($$this, $$this, $$thisp, 'cancelable'), $es4.$$get($$this, $$this, $$thisp, 'text'))), Event);
		}));

		//method
		$es4.$$public_function('toString', $$thisp, (function ()
		{
			return $es4.$$call($$this, $$this, $$thisp, 'formatToString', ['TextEvent', 'bubbles', 'cancelable', 'text']);
		}));

		//accessor
		$es4.$$public_accessor('text', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_text');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			$es4.$$set($$thisp, $$this, $$thisp, '_text', value, '=');
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(TextEvent, {EXTENDS:'flash.events.Event'}, 'flash.events::TextEvent');
})();
//flash.events.TextEvent


//flash.events.StageVideoEvent
$es4.$$package('flash.events').StageVideoEvent = function () { throw new Error('Use of unimplemented class: StageVideoEvent'); }
//flash.events.StageVideoEvent


//flash.media.Microphone
$es4.$$package('flash.media').Microphone = (function ()
{
	//imports
	var EventDispatcher;
	var SampleDataEvent;
	var StatusEvent;
	var Microphone;
	var SoundTransform;
	var MicrophoneEnhancedOptions;
	var Browser;
	var ByteArray;
	var SoundCodec;

	//class initializer
	Microphone.$$cinit = (function ()
	{
		Microphone.$$cinit = undefined;

		//initialize imports
		EventDispatcher = $es4.$$['flash.events'].EventDispatcher;
		SampleDataEvent = $es4.$$['flash.events'].SampleDataEvent;
		StatusEvent = $es4.$$['flash.events'].StatusEvent;
		SoundTransform = $es4.$$['flash.media'].SoundTransform;
		MicrophoneEnhancedOptions = $es4.$$['flash.media'].MicrophoneEnhancedOptions;
		Browser = $es4.$$['browser'].Browser;
		ByteArray = $es4.$$['flash.utils'].ByteArray;
		SoundCodec = $es4.$$['flash.media'].SoundCodec;
	});

	//method
	$es4.$$public_function('getEnhancedMicrophone', Microphone, (function ($$$$index)
	{
		if (Microphone.$$cinit !== undefined) Microphone.$$cinit();

		//set default parameter values
		var index = (0 > arguments.length - 1) ? -1 : $es4.$$coerce($$$$index, int);

		throw $es4.$$primitive(new (Error)('Microphone: attempted call to an unimplemented function "getEnhancedMicrophone"'));
	}));

	//method
	$es4.$$public_function('getMicrophone', Microphone, (function ($$$$index)
	{
		if (Microphone.$$cinit !== undefined) Microphone.$$cinit();

		//set default parameter values
		var index = (0 > arguments.length - 1) ? -1 : $es4.$$coerce($$$$index, int);

		var navigator = $es4.$$get($es4.$$call(Browser, null, null, 'getWindow', $es4.$$EMPTY_ARRAY), null, null, 'navigator');
		$es4.$$set(navigator, null, null, 'getUserMedia', ($es4.$$get(navigator, null, null, 'getUserMedia') || $es4.$$get(navigator, null, null, 'webkitGetUserMedia') || $es4.$$get(navigator, null, null, 'mozGetUserMedia') || $es4.$$get(navigator, null, null, 'msGetUserMedia')), '=');
		var microphone = $es4.$$primitive(new (Microphone)());
		$es4.$$call(navigator, null, null, 'getUserMedia', [{audio:true, video:false}, $es4.$$get(microphone, null, null, '$__onStream'), $es4.$$get(microphone, null, null, '$__onError')]);
		return $es4.$$coerce(microphone, $es4.$$['flash.media'].Microphone);
	}));

	//accessor
	$es4.$$public_accessor('isSupported', Microphone, (function ()
	{
		if (Microphone.$$cinit !== undefined) Microphone.$$cinit();

		throw $es4.$$primitive(new (Error)('Microphone: attempted call to an unimplemented function "isSupported"'));
	}), null);

	//accessor
	$es4.$$public_accessor('names', Microphone, (function ()
	{
		if (Microphone.$$cinit !== undefined) Microphone.$$cinit();

		throw $es4.$$primitive(new (Error)('Microphone: attempted call to an unimplemented function "names"'));
	}), null);

	function Microphone()
	{
		//initialize class if not initialized
		if (Microphone.$$cinit !== undefined) Microphone.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof Microphone) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Microphone) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('_codec', $$thisp, String);

		//initializer
		$es4.$$iinit($$thisp, (function ()
		{
			//initialize properties
			$es4.$$set($$this, $$this, $$thisp, '_codec', $es4.$$get(SoundCodec, $$this, $$thisp, 'NELLYMOSER'), '=');
		}));

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
			$es4.$$super($$thisp).$$z();
		}));

		//method
		$es4.$$private_function('$__onStream', $$thisp, (function ($$$$stream)
		{
			//set default parameter values
			var stream = $$$$stream;

			var audioContext = $es4.$$call(Browser, $$this, $$thisp, 'getNewAudioContext', $es4.$$EMPTY_ARRAY);
			var audioInput = $es4.$$call(audioContext, $$this, $$thisp, 'createMediaStreamSource', [stream]);
			var bufferSize = 2048;
			var recorder = $es4.$$call(audioContext, $$this, $$thisp, 'createScriptProcessor', [bufferSize, 1, 1]);
			$es4.$$set(recorder, $$this, $$thisp, 'onaudioprocess', recorderProcess, '=');
			$es4.$$call(audioInput, $$this, $$thisp, 'connect', [recorder]);
			$es4.$$call(recorder, $$this, $$thisp, 'connect', [$es4.$$get(audioContext, $$this, $$thisp, 'destination')]);

			function recorderProcess($$$$event) 
			{
				//set default parameter values
				var event = $$$$event;

				var left = $es4.$$call(event, $$this, $$thisp, 'inputBuffer', 'getChannelData', [0]);
				var byteArray = $es4.$$primitive(new (ByteArray)());
				$es4.$$call(byteArray, $$this, $$thisp, '$__setArrayBuffer', [$es4.$$get(left, $$this, $$thisp, 'buffer')]);
				$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (SampleDataEvent)($es4.$$get(SampleDataEvent, $$this, $$thisp, 'SAMPLE_DATA'), false, false, 0, byteArray))]);
			}
;

			$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (StatusEvent)($es4.$$get(StatusEvent, $$this, $$thisp, 'STATUS'), false, false, 'Microphone.Unmuted', ''))]);
		}));

		//method
		$es4.$$private_function('$__onError', $$thisp, (function ()
		{
			$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (StatusEvent)($es4.$$get(StatusEvent, $$this, $$thisp, 'STATUS'), false, false, 'Microphone.Muted', ''))]);
		}));

		//method
		$es4.$$public_function('setLoopBack', $$thisp, (function ($$$$state)
		{
			//set default parameter values
			var state = (0 > arguments.length - 1) ? true : $es4.$$coerce($$$$state, Boolean);

			throw $es4.$$primitive(new (Error)('Microphone: attempted call to an unimplemented function "setLoopBack"'));
		}));

		//method
		$es4.$$public_function('setSilenceLevel', $$thisp, (function ($$$$silenceLevel, $$$$timeout)
		{
			//set default parameter values
			var silenceLevel = $es4.$$coerce($$$$silenceLevel, Number);
			var timeout = (1 > arguments.length - 1) ? -1 : $es4.$$coerce($$$$timeout, int);

			throw $es4.$$primitive(new (Error)('Microphone: attempted call to an unimplemented function "setSilenceLevel"'));
		}));

		//method
		$es4.$$public_function('setUseEchoSuppression', $$thisp, (function ($$$$useEchoSuppression)
		{
			//set default parameter values
			var useEchoSuppression = $es4.$$coerce($$$$useEchoSuppression, Boolean);

			throw $es4.$$primitive(new (Error)('Microphone: attempted call to an unimplemented function "setUseEchoSuppression"'));
		}));

		//accessor
		$es4.$$public_accessor('activityLevel', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Microphone: attempted call to an unimplemented function "activityLevel"'));
		}), null);

		//accessor
		$es4.$$public_accessor('codec', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_codec');
		}), (function ($$$$codec)
		{
			//set default parameter values
			var codec = $es4.$$coerce($$$$codec, String);

			throw $es4.$$primitive(new (Error)('Microphone: attempted call to an unimplemented function "codec"'));
		}));

		//accessor
		$es4.$$public_accessor('enableVAD', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Microphone: attempted call to an unimplemented function "enableVAD"'));
		}), (function ($$$$enable)
		{
			//set default parameter values
			var enable = $es4.$$coerce($$$$enable, Boolean);

			throw $es4.$$primitive(new (Error)('Microphone: attempted call to an unimplemented function "enableVAD"'));
		}));

		//accessor
		$es4.$$public_accessor('encodeQuality', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Microphone: attempted call to an unimplemented function "encodeQuality"'));
		}), (function ($$$$quality)
		{
			//set default parameter values
			var quality = $es4.$$coerce($$$$quality, int);

			throw $es4.$$primitive(new (Error)('Microphone: attempted call to an unimplemented function "encodeQuality"'));
		}));

		//accessor
		$es4.$$public_accessor('enhancedOptions', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Microphone: attempted call to an unimplemented function "enhancedOptions"'));
		}), (function ($$$$options)
		{
			//set default parameter values
			var options = $es4.$$coerce($$$$options, MicrophoneEnhancedOptions);

			throw $es4.$$primitive(new (Error)('Microphone: attempted call to an unimplemented function "enhancedOptions"'));
		}));

		//accessor
		$es4.$$public_accessor('framesPerPacket', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Microphone: attempted call to an unimplemented function "framesPerPacket"'));
		}), (function ($$$$frames)
		{
			//set default parameter values
			var frames = $es4.$$coerce($$$$frames, int);

			throw $es4.$$primitive(new (Error)('Microphone: attempted call to an unimplemented function "framesPerPacket"'));
		}));

		//accessor
		$es4.$$public_accessor('gain', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Microphone: attempted call to an unimplemented function "gain"'));
		}), (function ($$$$gain)
		{
			//set default parameter values
			var gain = $es4.$$coerce($$$$gain, Number);

			throw $es4.$$primitive(new (Error)('Microphone: attempted call to an unimplemented function "gain"'));
		}));

		//accessor
		$es4.$$public_accessor('index', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Microphone: attempted call to an unimplemented function "index"'));
		}), null);

		//accessor
		$es4.$$public_accessor('muted', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Microphone: attempted call to an unimplemented function "muted"'));
		}), null);

		//accessor
		$es4.$$public_accessor('name', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Microphone: attempted call to an unimplemented function "name"'));
		}), null);

		//accessor
		$es4.$$public_accessor('noiseSuppressionLevel', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Microphone: attempted call to an unimplemented function "noiseSuppressionLevel"'));
		}), (function ($$$$level)
		{
			//set default parameter values
			var level = $es4.$$coerce($$$$level, int);

			throw $es4.$$primitive(new (Error)('Microphone: attempted call to an unimplemented function "noiseSuppressionLevel"'));
		}));

		//accessor
		$es4.$$public_accessor('rate', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Microphone: attempted call to an unimplemented function "rate"'));
		}), (function ($$$$rate)
		{
			//set default parameter values
			var rate = $es4.$$coerce($$$$rate, int);

		}));

		//accessor
		$es4.$$public_accessor('silenceLevel', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Microphone: attempted call to an unimplemented function "silenceLevel"'));
		}), null);

		//accessor
		$es4.$$public_accessor('silenceTimeout', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Microphone: attempted call to an unimplemented function "silenceTimeout"'));
		}), null);

		//accessor
		$es4.$$public_accessor('soundTransform', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Microphone: attempted call to an unimplemented function "soundTransform"'));
		}), (function ($$$$sndTransform)
		{
			//set default parameter values
			var sndTransform = $es4.$$coerce($$$$sndTransform, SoundTransform);

			throw $es4.$$primitive(new (Error)('Microphone: attempted call to an unimplemented function "soundTransform"'));
		}));

		//accessor
		$es4.$$public_accessor('useEchoSuppression', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Microphone: attempted call to an unimplemented function "useEchoSuppression"'));
		}), null);

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(Microphone, {EXTENDS:'flash.events.EventDispatcher'}, 'flash.media::Microphone');
})();
//flash.media.Microphone


//flash.net.NetStreamInfo
$es4.$$package('flash.net').NetStreamInfo = function () { throw new Error('Use of unimplemented class: NetStreamInfo'); }
//flash.net.NetStreamInfo


//flash.accessibility.Accessibility
$es4.$$package('flash.accessibility').Accessibility = (function ()
{
	//imports
	var DisplayObject;

	//class initializer
	Accessibility.$$cinit = (function ()
	{
		Accessibility.$$cinit = undefined;

		//initialize imports
		DisplayObject = $es4.$$['flash.display'].DisplayObject;
	});

	//method
	$es4.$$public_function('sendEvent', Accessibility, (function ($$$$source, $$$$childID, $$$$eventType, $$$$nonHTML)
	{
		if (Accessibility.$$cinit !== undefined) Accessibility.$$cinit();

		//set default parameter values
		var source = $es4.$$coerce($$$$source, DisplayObject);
		var childID = $es4.$$coerce($$$$childID, uint);
		var eventType = $es4.$$coerce($$$$eventType, uint);
		var nonHTML = (3 > arguments.length - 1) ? false : $es4.$$coerce($$$$nonHTML, Boolean);

		throw $es4.$$primitive(new (Error)('Accessibility: attempted call to an unimplemented function "sendEvent"'));
	}));

	//method
	$es4.$$public_function('updateProperties', Accessibility, (function ()
	{
		if (Accessibility.$$cinit !== undefined) Accessibility.$$cinit();

	}));

	//accessor
	$es4.$$public_accessor('active', Accessibility, (function ()
	{
		if (Accessibility.$$cinit !== undefined) Accessibility.$$cinit();

		return false;
	}), null);

	function Accessibility()
	{
		//initialize class if not initialized
		if (Accessibility.$$cinit !== undefined) Accessibility.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof Accessibility) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Accessibility) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Accessibility: attempted call to an unimplemented constructor'));
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(Accessibility, null, 'flash.accessibility::Accessibility');
})();
//flash.accessibility.Accessibility


//flash.system.Capabilities
$es4.$$package('flash.system').Capabilities = (function ()
{
	//class initializer
	Capabilities.$$cinit = (function ()
	{
		Capabilities.$$cinit = undefined;

	});

	//method
	$es4.$$public_function('hasMultiChannelAudio', Capabilities, (function ($$$$type)
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		//set default parameter values
		var type = $es4.$$coerce($$$$type, String);

		throw $es4.$$primitive(new (Error)('Capabilities: attempted call to an unimplemented function "hasMultiChannelAudio"'));
	}));

	//accessor
	$es4.$$public_accessor('avHardwareDisable', Capabilities, (function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new (Error)('Capabilities: attempted call to an unimplemented function "avHardwareDisable"'));
	}), null);

	//accessor
	$es4.$$public_accessor('cpuArchitecture', Capabilities, (function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new (Error)('Capabilities: attempted call to an unimplemented function "cpuArchitecture"'));
	}), null);

	//accessor
	$es4.$$public_accessor('hasAccessibility', Capabilities, (function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new (Error)('Capabilities: attempted call to an unimplemented function "hasAccessibility"'));
	}), null);

	//accessor
	$es4.$$public_accessor('hasAudio', Capabilities, (function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new (Error)('Capabilities: attempted call to an unimplemented function "hasAudio"'));
	}), null);

	//accessor
	$es4.$$public_accessor('hasAudioEncoder', Capabilities, (function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new (Error)('Capabilities: attempted call to an unimplemented function "hasAudioEncoder"'));
	}), null);

	//accessor
	$es4.$$public_accessor('hasEmbeddedVideo', Capabilities, (function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new (Error)('Capabilities: attempted call to an unimplemented function "hasEmbeddedVideo"'));
	}), null);

	//accessor
	$es4.$$public_accessor('hasIME', Capabilities, (function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new (Error)('Capabilities: attempted call to an unimplemented function "hasIME"'));
	}), null);

	//accessor
	$es4.$$public_accessor('hasMP3', Capabilities, (function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new (Error)('Capabilities: attempted call to an unimplemented function "hasMP3"'));
	}), null);

	//accessor
	$es4.$$public_accessor('hasPrinting', Capabilities, (function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new (Error)('Capabilities: attempted call to an unimplemented function "hasPrinting"'));
	}), null);

	//accessor
	$es4.$$public_accessor('hasScreenBroadcast', Capabilities, (function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new (Error)('Capabilities: attempted call to an unimplemented function "hasScreenBroadcast"'));
	}), null);

	//accessor
	$es4.$$public_accessor('hasScreenPlayback', Capabilities, (function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new (Error)('Capabilities: attempted call to an unimplemented function "hasScreenPlayback"'));
	}), null);

	//accessor
	$es4.$$public_accessor('hasStreamingAudio', Capabilities, (function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new (Error)('Capabilities: attempted call to an unimplemented function "hasStreamingAudio"'));
	}), null);

	//accessor
	$es4.$$public_accessor('hasStreamingVideo', Capabilities, (function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new (Error)('Capabilities: attempted call to an unimplemented function "hasStreamingVideo"'));
	}), null);

	//accessor
	$es4.$$public_accessor('hasTLS', Capabilities, (function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new (Error)('Capabilities: attempted call to an unimplemented function "hasTLS"'));
	}), null);

	//accessor
	$es4.$$public_accessor('hasVideoEncoder', Capabilities, (function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new (Error)('Capabilities: attempted call to an unimplemented function "hasVideoEncoder"'));
	}), null);

	//accessor
	$es4.$$public_accessor('isDebugger', Capabilities, (function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new (Error)('Capabilities: attempted call to an unimplemented function "isDebugger"'));
	}), null);

	//accessor
	$es4.$$public_accessor('isEmbeddedInAcrobat', Capabilities, (function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new (Error)('Capabilities: attempted call to an unimplemented function "isEmbeddedInAcrobat"'));
	}), null);

	//accessor
	$es4.$$public_accessor('language', Capabilities, (function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new (Error)('Capabilities: attempted call to an unimplemented function "language"'));
	}), null);

	//accessor
	$es4.$$public_accessor('localFileReadDisable', Capabilities, (function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new (Error)('Capabilities: attempted call to an unimplemented function "localFileReadDisable"'));
	}), null);

	//accessor
	$es4.$$public_accessor('manufacturer', Capabilities, (function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new (Error)('Capabilities: attempted call to an unimplemented function "manufacturer"'));
	}), null);

	//accessor
	$es4.$$public_accessor('maxLevelIDC', Capabilities, (function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new (Error)('Capabilities: attempted call to an unimplemented function "maxLevelIDC"'));
	}), null);

	//accessor
	$es4.$$public_accessor('os', Capabilities, (function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new (Error)('Capabilities: attempted call to an unimplemented function "os"'));
	}), null);

	//accessor
	$es4.$$public_accessor('pixelAspectRatio', Capabilities, (function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new (Error)('Capabilities: attempted call to an unimplemented function "pixelAspectRatio"'));
	}), null);

	//accessor
	$es4.$$public_accessor('playerType', Capabilities, (function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		return 'JavaScript';
	}), null);

	//accessor
	$es4.$$public_accessor('screenColor', Capabilities, (function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new (Error)('Capabilities: attempted call to an unimplemented function "screenColor"'));
	}), null);

	//accessor
	$es4.$$public_accessor('screenDPI', Capabilities, (function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new (Error)('Capabilities: attempted call to an unimplemented function "screenDPI"'));
	}), null);

	//accessor
	$es4.$$public_accessor('screenResolutionX', Capabilities, (function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new (Error)('Capabilities: attempted call to an unimplemented function "screenResolutionX"'));
	}), null);

	//accessor
	$es4.$$public_accessor('screenResolutionY', Capabilities, (function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new (Error)('Capabilities: attempted call to an unimplemented function "screenResolutionY"'));
	}), null);

	//accessor
	$es4.$$public_accessor('serverString', Capabilities, (function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new (Error)('Capabilities: attempted call to an unimplemented function "serverString"'));
	}), null);

	//accessor
	$es4.$$public_accessor('supports32BitProcesses', Capabilities, (function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new (Error)('Capabilities: attempted call to an unimplemented function "supports32BitProcesses"'));
	}), null);

	//accessor
	$es4.$$public_accessor('supports64BitProcesses', Capabilities, (function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new (Error)('Capabilities: attempted call to an unimplemented function "supports64BitProcesses"'));
	}), null);

	//accessor
	$es4.$$public_accessor('touchscreenType', Capabilities, (function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new (Error)('Capabilities: attempted call to an unimplemented function "touchscreenType"'));
	}), null);

	//accessor
	$es4.$$public_accessor('version', Capabilities, (function ()
	{
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		throw $es4.$$primitive(new (Error)('Capabilities: attempted call to an unimplemented function "version"'));
	}), null);

	function Capabilities()
	{
		//initialize class if not initialized
		if (Capabilities.$$cinit !== undefined) Capabilities.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof Capabilities) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Capabilities) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Capabilities: attempted call to an unimplemented constructor'));
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(Capabilities, null, 'flash.system::Capabilities');
})();
//flash.system.Capabilities


//flash.text.TextField
$es4.$$package('flash.text').TextField = (function ()
{
	//imports
	var DisplayObject;
	var InteractiveObject;
	var Event;
	var Rectangle;
	var StyleSheet;
	var TextFieldType;
	var TextFormat;
	var TextLineMetrics;
	var TextFieldAutoSize;
	var TextField;

	//class initializer
	TextField.$$cinit = (function ()
	{
		TextField.$$cinit = undefined;

		//initialize imports
		DisplayObject = $es4.$$['flash.display'].DisplayObject;
		InteractiveObject = $es4.$$['flash.display'].InteractiveObject;
		Event = $es4.$$['flash.events'].Event;
		Rectangle = $es4.$$['flash.geom'].Rectangle;
		StyleSheet = $es4.$$['flash.text'].StyleSheet;
		TextFieldType = $es4.$$['flash.text'].TextFieldType;
		TextFormat = $es4.$$['flash.text'].TextFormat;
		TextLineMetrics = $es4.$$['flash.text'].TextLineMetrics;
		TextFieldAutoSize = $es4.$$['flash.text'].TextFieldAutoSize;
	});

	//method
	$es4.$$private_function('mapShiftKeyPressToActualCharacter', TextField, (function ($$$$characterCode)
	{
		if (TextField.$$cinit !== undefined) TextField.$$cinit();

		//set default parameter values
		var characterCode = $$$$characterCode;

		switch (characterCode)
		{
			case 27:
			case 8:
			case 9:
			case 20:
			case 16:
			case 17:
			case 91:
			case 92:
			case 18:
				return '';
		}
		var characterMap = [];
		$es4.$$set(characterMap, null, null, 192, '~', '=');
		$es4.$$set(characterMap, null, null, 49, '!', '=');
		$es4.$$set(characterMap, null, null, 50, '@', '=');
		$es4.$$set(characterMap, null, null, 51, '#', '=');
		$es4.$$set(characterMap, null, null, 52, '$', '=');
		$es4.$$set(characterMap, null, null, 53, '%', '=');
		$es4.$$set(characterMap, null, null, 54, '^', '=');
		$es4.$$set(characterMap, null, null, 55, '&', '=');
		$es4.$$set(characterMap, null, null, 56, '*', '=');
		$es4.$$set(characterMap, null, null, 57, '(', '=');
		$es4.$$set(characterMap, null, null, 48, ')', '=');
		$es4.$$set(characterMap, null, null, 109, '_', '=');
		$es4.$$set(characterMap, null, null, 107, '+', '=');
		$es4.$$set(characterMap, null, null, 219, '{', '=');
		$es4.$$set(characterMap, null, null, 221, '}', '=');
		$es4.$$set(characterMap, null, null, 220, '|', '=');
		$es4.$$set(characterMap, null, null, 59, ':', '=');
		$es4.$$set(characterMap, null, null, 222, '\'', '=');
		$es4.$$set(characterMap, null, null, 188, '<', '=');
		$es4.$$set(characterMap, null, null, 190, '>', '=');
		$es4.$$set(characterMap, null, null, 191, '?', '=');
		$es4.$$set(characterMap, null, null, 32, ' ', '=');
		var character = '';
		if (characterCode >= 65 && characterCode <= 90)
		{
			character = $es4.$$call(String, null, null, 'fromCharCode', [characterCode]);
		}
		else
		{
			character = $es4.$$get(characterMap, null, null, characterCode);
		}
		return character;
	}));

	//method
	$es4.$$private_function('restrictTextHandler', TextField, (function ($$$$text, $$$$restrict)
	{
		if (TextField.$$cinit !== undefined) TextField.$$cinit();

		//set default parameter values
		var text = $$$$text;
		var restrict = $$$$restrict;

		if (restrict !== null)
		{
			if (restrict == '')
			{
				text = '';
			}
			else
			{
				text = $es4.$$call(text, null, null, 'replace', [$es4.$$primitive(new (RegExp)('[^' + restrict + ']')), '']);
			}
		}
		return text;
	}));

	//method
	$es4.$$public_function('isFontCompatible', TextField, (function ($$$$fontName, $$$$fontStyle)
	{
		if (TextField.$$cinit !== undefined) TextField.$$cinit();

		//set default parameter values
		var fontName = $es4.$$coerce($$$$fontName, String);
		var fontStyle = $es4.$$coerce($$$$fontStyle, String);

		throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "isFontCompatible"'));
	}));

	function TextField()
	{
		//initialize class if not initialized
		if (TextField.$$cinit !== undefined) TextField.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof TextField) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], TextField) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('$_properties', $$thisp);
		$es4.$$private_property('$_domTextView', $$thisp, Object);
		$es4.$$private_property('$_type', $$thisp, String);
		$es4.$$private_property('$_text', $$thisp, String);
		$es4.$$private_property('$_htmlText', $$thisp, String);
		$es4.$$private_property('$_multiline', $$thisp, Boolean);
		$es4.$$private_property('$_wordWrap', $$thisp, Boolean);
		$es4.$$private_property('$_autoSize', $$thisp, String);
		$es4.$$private_property('$_selectable', $$thisp, Boolean);
		$es4.$$private_property('$_condenseWhite', $$thisp, Boolean);
		$es4.$$private_property('$_restrict', $$thisp, String);
		$es4.$$private_property('$_maxChars', $$thisp, int);
		$es4.$$private_property('$_background', $$thisp, Boolean);
		$es4.$$private_property('$_backgroundColor', $$thisp, uint);
		$es4.$$private_property('$_border', $$thisp, Boolean);
		$es4.$$private_property('$_borderColor', $$thisp, uint);
		$es4.$$private_property('$_skipSetAutoDimensions', $$thisp, Boolean);
		$es4.$$private_property('$_characterTextFormats', $$thisp, Array);
		$es4.$$private_property('$_defaultTextFormat', $$thisp, TextFormat);
		$es4.$$private_property('$_styleSheet', $$thisp, StyleSheet);

		//initializer
		$es4.$$iinit($$thisp, (function ()
		{
			//initialize properties
			$es4.$$set($$this, $$this, $$thisp, '$_text', '', '=');
			$es4.$$set($$this, $$this, $$thisp, '$_htmlText', '', '=');
			$es4.$$set($$this, $$this, $$thisp, '$_autoSize', $es4.$$get(TextFieldAutoSize, $$this, $$thisp, 'NONE'), '=');
			$es4.$$set($$this, $$this, $$thisp, '$_selectable', true, '=');
			$es4.$$set($$this, $$this, $$thisp, '$_maxChars', $es4.$$get(int, $$this, $$thisp, 'MAX_VALUE'), '=');
			$es4.$$set($$this, $$this, $$thisp, '$_backgroundColor', 0xFFFFFF, '=');
			$es4.$$set($$this, $$this, $$thisp, '$_border', false, '=');
			$es4.$$set($$this, $$this, $$thisp, '$_defaultTextFormat', $es4.$$primitive(new (TextFormat)()), '=');
		}));

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties') === undefined)
			{
				$es4.$$call($$this, $$this, $$thisp, '$__properties', [{}]);
			}
			$es4.$$super($$thisp).$$z();
			$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_setExplicitBounds', [100, 100]);
			$es4.$$call($es4.$$call($es4, $$this, $$thisp, '$$getDescriptor', [$es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'TextFieldScope', 'pscope'), 'type']), $$this, $$thisp, 'set', 'call', [$$this, $es4.$$get(TextFieldType, $$this, $$thisp, 'DYNAMIC')]);
		}));

		//method
		$es4.$$public_function('$__properties', $$thisp, (function ($$$$object)
		{
			//set default parameter values
			var object = (0 > arguments.length - 1) ? null : $$$$object;

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties') === undefined)
			{
				object = $es4.$$call($es4.$$super($$thisp), $$this, $$thisp, '$__properties', [object]);
				$es4.$$set(object, $$this, $$thisp, 'TextFieldScope', {pscope:$es4.$$call($es4, $$this, $$thisp, '$$getOwnScope', [$$this, TextField])}, '=');
				$es4.$$set(object, $$this, $$thisp, 'TLScope', $$this, '=');
				return $es4.$$set($$thisp, $$this, $$thisp, '$_properties', object, '=');
			}
			return $es4.$$get($$thisp, $$this, $$thisp, '$_properties');
		}));

		//method
		$es4.$$private_function('onKeyDown', $$thisp, (function ($$$$event)
		{
			//set default parameter values
			var event = $es4.$$coerce($$$$event, Object);

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_text', 'length') >= $es4.$$get($$thisp, $$this, $$thisp, '$_maxChars'))
			{
				if ($es4.$$get(event, $$this, $$thisp, 'keyCode') != 46 && $es4.$$get(event, $$this, $$thisp, 'keyCode') != 8)
				{
					$es4.$$call(event, $$this, $$thisp, 'preventDefault', $es4.$$EMPTY_ARRAY);
				}
				return;
			}
			switch ($es4.$$get(event, $$this, $$thisp, 'keyCode'))
			{
				case 27:
				case 8:
				case 9:
				case 20:
				case 16:
				case 17:
				case 91:
				case 92:
				case 18:
					return;
			}
			var char = $es4.$$coerce(($es4.$$get(event, $$this, $$thisp, 'shiftKey')) ? $es4.$$call(TextField, $$this, $$thisp, 'mapShiftKeyPressToActualCharacter', [$es4.$$get(event, $$this, $$thisp, 'keyCode')]) : $es4.$$call(String, $$this, $$thisp, 'fromCharCode', [$es4.$$get(event, $$this, $$thisp, 'keyCode')]), String);
			char = $es4.$$coerce($es4.$$call(TextField, $$this, $$thisp, 'restrictTextHandler', [char, $es4.$$get($$thisp, $$this, $$thisp, '$_restrict')]), String);
			if (char == '' || ($es4.$$get(event, $$this, $$thisp, 'keyCode') == 13 && !$es4.$$get($$thisp, $$this, $$thisp, '$_multiline')))
			{
				$es4.$$call(event, $$this, $$thisp, 'preventDefault', $es4.$$EMPTY_ARRAY);
				return;
			}
			if ($es4.$$get(event, $$this, $$thisp, 'keyCode') == 13 && !$es4.$$get(window, $$this, $$thisp, 'ie'))
			{
				$es4.$$call(document, $$this, $$thisp, 'execCommand', ['formatBlock', false, 'p']);
			}
		}));

		//method
		$es4.$$private_function('onKeyUp', $$thisp, (function ($$$$event)
		{
			//set default parameter values
			var event = $es4.$$coerce($$$$event, Object);

			var elements = $es4.$$get($$thisp, $$this, $$thisp, '$_domTextView', 'childNodes');
			for (var i = $es4.$$coerce($es4.$$get(elements, $$this, $$thisp, 'length'), int); i--;)
			{
				if ($es4.$$get(elements, $$this, $$thisp, i, 'nodeName') == 'P' && !$es4.$$get(window, $$this, $$thisp, 'ie'))
				{
					$es4.$$call(elements, $$this, $$thisp, i, 'setAttribute', ['contenteditable', true]);
				}
			}
		}));

		//method
		$es4.$$private_function('setAutoDimensions', $$thisp, (function ()
		{
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_skipSetAutoDimensions'))
			{
				return;
			}
			var body = $es4.$$get(document, $$this, $$thisp, 'body');
			if (!$es4.$$get($$thisp, $$this, $$thisp, '$_domTextView', 'parentNode') && !$es4.$$call(body, $$this, $$thisp, 'contains', [$es4.$$get($$thisp, $$this, $$thisp, '$_domTextView')]))
			{
				$es4.$$call(body, $$this, $$thisp, 'appendChild', [$es4.$$get($$thisp, $$this, $$thisp, '$_domTextView')]);
				$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_setExplicitBounds', [$es4.$$get($$thisp, $$this, $$thisp, '$_domTextView', 'scrollWidth'), $es4.$$get($$thisp, $$this, $$thisp, '$_domTextView', 'scrollHeight')]);
				$es4.$$call(body, $$this, $$thisp, 'removeChild', [$es4.$$get($$thisp, $$this, $$thisp, '$_domTextView')]);
			}
			else
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_setExplicitBounds', [$es4.$$get($$thisp, $$this, $$thisp, '$_domTextView', 'scrollWidth'), $es4.$$get($$thisp, $$this, $$thisp, '$_domTextView', 'scrollHeight')]);
			}
		}));

		//method
		$es4.$$private_function('onInput', $$thisp, (function ($$$$event)
		{
			//set default parameter values
			var event = $es4.$$coerce($$$$event, Object);

			$es4.$$set($$thisp, $$this, $$thisp, '$_text', $es4.$$get($$thisp, $$this, $$thisp, '$_domTextView', 'textContent'), '=');
			$es4.$$call($$thisp, $$this, $$thisp, 'setAutoDimensions', $es4.$$EMPTY_ARRAY);
			$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (Event)($es4.$$get(Event, $$this, $$thisp, 'CHANGE'), false, false))]);
		}));

		//method
		$es4.$$private_function('onBlur', $$thisp, (function ($$$$event)
		{
			//set default parameter values
			var event = $es4.$$coerce($$$$event, Object);

			var sel = $es4.$$call(window, $$this, $$thisp, 'getSelection', $es4.$$EMPTY_ARRAY);
			$es4.$$call(sel, $$this, $$thisp, 'removeAllRanges', $es4.$$EMPTY_ARRAY);
		}));

		//method
		$es4.$$public_function('setTextFormat', $$thisp, (function ($$$$format, $$$$beginIndex, $$$$endIndex)
		{
			//set default parameter values
			var format = $es4.$$coerce($$$$format, TextFormat);
			var beginIndex = (1 > arguments.length - 1) ? -1 : $es4.$$coerce($$$$beginIndex, int);
			var endIndex = (2 > arguments.length - 1) ? -1 : $es4.$$coerce($$$$endIndex, int);

			var text = $es4.$$get($$thisp, $$this, $$thisp, '$_text') || $es4.$$get($$thisp, $$this, $$thisp, '$_htmlText');
			var textLength = $es4.$$get(text, $$this, $$thisp, 'length');
			if (beginIndex >= textLength || endIndex >= textLength)
			{
				throw $es4.$$primitive(new (Error)('The supplied index is out of bounds.'));
			}
			if (!textLength)
			{
				return;
			}
			if (beginIndex == -1)
			{
				beginIndex = 0;
			}
			if (endIndex == -1)
			{
				endIndex = textLength - 1;
			}
			if (!$es4.$$get($$thisp, $$this, $$thisp, '$_characterTextFormats'))
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_characterTextFormats', [], '=');
			}
			var characterTextFormats = $es4.$$get($$thisp, $$this, $$thisp, '$_characterTextFormats');
			for (var i = beginIndex; i < endIndex; i++)
			{
				$es4.$$set(characterTextFormats, $$this, $$thisp, i, format, '=');
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'innerHTML', $es4.$$call($$thisp, $$this, $$thisp, '$_generateHTMLText', $es4.$$EMPTY_ARRAY), '=');
			$es4.$$call($$thisp, $$this, $$thisp, 'setAutoDimensions', $es4.$$EMPTY_ARRAY);
		}));

		//method
		$es4.$$private_function('$_applyTextFormattingToNode', $$thisp, (function ($$$$node)
		{
			//set default parameter values
			var node = $es4.$$coerce($$$$node, Object);

			var characterTextFormats = $es4.$$get($$thisp, $$this, $$thisp, '$_characterTextFormats');
			var defaultTextFormat = $es4.$$get($$thisp, $$this, $$thisp, '$_defaultTextFormat');
			var previousTextFormat = defaultTextFormat;
			var textFormat = defaultTextFormat;
			if (characterTextFormats && $es4.$$get(characterTextFormats, $$this, $$thisp, 'length') && $es4.$$get(characterTextFormats, $$this, $$thisp, 0))
			{
				textFormat = $es4.$$coerce($es4.$$get(characterTextFormats, $$this, $$thisp, 0), TextFormat);
			}
			var color = ($es4.$$get(textFormat, $$this, $$thisp, 'color') === null) ? '000000' : $es4.$$call(textFormat, $$this, $$thisp, 'color', 'toString', [16]);
			while ($es4.$$get(color, $$this, $$thisp, 'length') < 6)
			{
				color = '0' + color;
			}
			var textFormatProperties = {url:$es4.$$get(textFormat, $$this, $$thisp, 'url'), align:($es4.$$get(textFormat, $$this, $$thisp, 'align')) ? $es4.$$get(textFormat, $$this, $$thisp, 'align') : 'left', blockIndent:$es4.$$get(textFormat, $$this, $$thisp, 'blockIndent'), bold:($es4.$$get(textFormat, $$this, $$thisp, 'bold')) ? 'bold' : '500', bullet:$es4.$$get(textFormat, $$this, $$thisp, 'bullet'), color:color, display:$es4.$$get(textFormat, $$this, $$thisp, 'display'), indent:$es4.$$get(textFormat, $$this, $$thisp, 'indent'), font:($es4.$$get(textFormat, $$this, $$thisp, 'font')) ? $es4.$$get(textFormat, $$this, $$thisp, 'font') : 'Times New Roman', italic:$es4.$$get(textFormat, $$this, $$thisp, 'italic'), leading:$es4.$$get(textFormat, $$this, $$thisp, 'leading'), kerning:Number($es4.$$get(textFormat, $$this, $$thisp, 'kerning')), leftMargin:$es4.$$get(textFormat, $$this, $$thisp, 'leftMargin') || 0, letterSpacing:$es4.$$get(textFormat, $$this, $$thisp, 'letterSpacing'), rightMargin:$es4.$$get(textFormat, $$this, $$thisp, 'rightMargin') || 0, size:($es4.$$get(textFormat, $$this, $$thisp, 'size')) ? Number($es4.$$get(textFormat, $$this, $$thisp, 'size')) : 12, tabStops:$es4.$$get(textFormat, $$this, $$thisp, 'tabStops'), target:$es4.$$get(textFormat, $$this, $$thisp, 'target'), underline:$es4.$$get(textFormat, $$this, $$thisp, 'underline')};
			$es4.$$set(node, $$this, $$thisp, 'style', 'display', ($es4.$$get(textFormatProperties, $$this, $$thisp, 'align') == 'left' ? 'inline-block' : 'block'), '=');
			$es4.$$set(node, $$this, $$thisp, 'style', 'textAlign', $es4.$$get(textFormatProperties, $$this, $$thisp, 'align'), '=');
			$es4.$$set(node, $$this, $$thisp, 'style', 'fontFamily', $es4.$$get(textFormatProperties, $$this, $$thisp, 'font'), '=');
			$es4.$$set(node, $$this, $$thisp, 'style', 'fontWeight', $es4.$$get(textFormatProperties, $$this, $$thisp, 'bold'), '=');
			$es4.$$set(node, $$this, $$thisp, 'style', 'fontSize', $es4.$$get(textFormatProperties, $$this, $$thisp, 'size') + 'px', '=');
			$es4.$$set(node, $$this, $$thisp, 'style', 'color', '#' + $es4.$$get(textFormatProperties, $$this, $$thisp, 'color'), '=');
			if ($es4.$$get(textFormatProperties, $$this, $$thisp, 'leftMargin') !== null)
			{
				$es4.$$set(node, $$this, $$thisp, 'style', 'marginLeft', $es4.$$get(textFormatProperties, $$this, $$thisp, 'leftMargin') + 'px', '=');
			}
			if ($es4.$$get(textFormatProperties, $$this, $$thisp, 'rightMargin') !== null)
			{
				$es4.$$set(node, $$this, $$thisp, 'style', 'marginRight', $es4.$$get(textFormatProperties, $$this, $$thisp, 'rightMargin') + 'px', '=');
			}
			if ($es4.$$get(textFormatProperties, $$this, $$thisp, 'leading') !== null)
			{
				$es4.$$set(node, $$this, $$thisp, 'style', 'lineHeight', $es4.$$get(textFormatProperties, $$this, $$thisp, 'leading') + 'px', '=');
			}
			if ($es4.$$get(textFormatProperties, $$this, $$thisp, 'letterSpacing') !== null)
			{
				$es4.$$set(node, $$this, $$thisp, 'style', 'letterSpacing', $es4.$$get(textFormatProperties, $$this, $$thisp, 'letterSpacing') + 'px', '=');
			}
		}));

		//method
		$es4.$$private_function('$_applyTextFormatting', $$thisp, (function ($$$$text)
		{
			//set default parameter values
			var text = $es4.$$coerce($$$$text, String);

			var characterTextFormats = $es4.$$get($$thisp, $$this, $$thisp, '$_characterTextFormats');
			var textFormat = $es4.$$get($$thisp, $$this, $$thisp, '$_defaultTextFormat');
			var textLength = $es4.$$get(text, $$this, $$thisp, 'length');
			var collected = '';
			var htmlText = '';
			if (characterTextFormats)
			{
				textFormat = $es4.$$coerce($es4.$$get(characterTextFormats, $$this, $$thisp, 0) || textFormat, TextFormat);
				for (var j = 0; j < textLength; j++)
				{
					if ($es4.$$get(characterTextFormats, $$this, $$thisp, j) !== undefined && $es4.$$get(characterTextFormats, $$this, $$thisp, j) !== textFormat)
					{
						htmlText += formatText(collected, textFormat);
						textFormat = $es4.$$coerce($es4.$$get(characterTextFormats, $$this, $$thisp, j), TextFormat);
						collected = '';
					}
					collected += $es4.$$call(text, $$this, $$thisp, 'charAt', [j]);
				}
			}
			else
			{
				collected = text;
			}
			if (collected)
			{
				htmlText += formatText(collected, textFormat);
			}
			return htmlText;

			function formatText($$$$text, $$$$textFormat) 
			{
				//set default parameter values
				var text = $es4.$$coerce($$$$text, String);
				var textFormat = $es4.$$coerce($$$$textFormat, TextFormat);

				var htmlText = '';
				var color = ($es4.$$get(textFormat, $$this, $$thisp, 'color') === null) ? '000000' : $es4.$$call(textFormat, $$this, $$thisp, 'color', 'toString', [16]);
				while ($es4.$$get(color, $$this, $$thisp, 'length') < 6)
				{
					color = '0' + color;
				}
				var textFormatProperties = {url:$es4.$$get(textFormat, $$this, $$thisp, 'url'), align:($es4.$$get(textFormat, $$this, $$thisp, 'align')) ? $es4.$$get(textFormat, $$this, $$thisp, 'align') : 'left', blockIndent:$es4.$$get(textFormat, $$this, $$thisp, 'blockIndent'), bold:($es4.$$get(textFormat, $$this, $$thisp, 'bold')) ? 'bold' : '500', bullet:$es4.$$get(textFormat, $$this, $$thisp, 'bullet'), color:color, display:$es4.$$get(textFormat, $$this, $$thisp, 'display'), indent:$es4.$$get(textFormat, $$this, $$thisp, 'indent'), font:($es4.$$get(textFormat, $$this, $$thisp, 'font')) ? $es4.$$get(textFormat, $$this, $$thisp, 'font') : 'Times New Roman', italic:$es4.$$get(textFormat, $$this, $$thisp, 'italic'), leading:$es4.$$get(textFormat, $$this, $$thisp, 'leading'), kerning:Number($es4.$$get(textFormat, $$this, $$thisp, 'kerning')), leftMargin:$es4.$$get(textFormat, $$this, $$thisp, 'leftMargin') || 0, letterSpacing:$es4.$$get(textFormat, $$this, $$thisp, 'letterSpacing'), rightMargin:$es4.$$get(textFormat, $$this, $$thisp, 'rightMargin') || 0, size:($es4.$$get(textFormat, $$this, $$thisp, 'size')) ? Number($es4.$$get(textFormat, $$this, $$thisp, 'size')) : 12, tabStops:$es4.$$get(textFormat, $$this, $$thisp, 'tabStops'), target:$es4.$$get(textFormat, $$this, $$thisp, 'target'), underline:$es4.$$get(textFormat, $$this, $$thisp, 'underline')};
				var letterSpacing = $es4.$$coerce($es4.$$get(textFormatProperties, $$this, $$thisp, 'letterSpacing') || 0, Number);
				if (letterSpacing >= 1)
				{
					var win = window;
					if ($es4.$$get(win, $$this, $$thisp, 'ie'))
					{
						letterSpacing -= .5;
					}
					else if (!$es4.$$get(win, $$this, $$thisp, 'chrome'))
					{
						letterSpacing -= 1;
					}
				}
				htmlText = '<span class="text' + ($es4.$$get($$thisp, $$this, $$thisp, '$_styleSheet') !== null ? (' ' + $es4.$$get($$thisp, $$this, $$thisp, '$_styleSheet', '$__id')) : '') + '" tabindex="-1" ' + ($es4.$$get($$thisp, $$this, $$thisp, '$_type') == $es4.$$get(TextFieldType, $$this, $$thisp, 'DYNAMIC') ? 'role="presentation" aria-hidden="true" ' : 'contentEditable="true" ') + 'style="display:' + (($es4.$$get(textFormatProperties, $$this, $$thisp, 'align') === 'left' && $es4.$$get($$thisp, $$this, $$thisp, '$_styleSheet') === null) ? 'inline-block' : 'block') + ';text-align:' + $es4.$$get(textFormatProperties, $$this, $$thisp, 'align') + ';font-family:' + $es4.$$get(textFormatProperties, $$this, $$thisp, 'font') + ';font-weight:' + $es4.$$get(textFormatProperties, $$this, $$thisp, 'bold') + ';font-size:' + $es4.$$get(textFormatProperties, $$this, $$thisp, 'size') + 'px' + ';color:#' + $es4.$$get(textFormatProperties, $$this, $$thisp, 'color') + ($es4.$$get(textFormatProperties, $$this, $$thisp, 'leftMargin') === null ? '' : ';margin-left:' + $es4.$$get(textFormatProperties, $$this, $$thisp, 'leftMargin') + 'px') + ($es4.$$get(textFormatProperties, $$this, $$thisp, 'rightMargin') === null ? '' : ';margin-right:' + $es4.$$get(textFormatProperties, $$this, $$thisp, 'rightMargin') + 'px') + ($es4.$$get(textFormatProperties, $$this, $$thisp, 'leading') === null ? '' : ';line-height:' + $es4.$$get(textFormatProperties, $$this, $$thisp, 'leading') + 'px') + ($es4.$$get(textFormatProperties, $$this, $$thisp, 'letterSpacing') === null ? '' : ';letter-spacing:' + letterSpacing + 'px') + ($es4.$$get($$thisp, $$this, $$thisp, '$_wordWrap') ? '' : ';white-space:nowrap') + ';">';
				if (!$es4.$$get($$thisp, $$this, $$thisp, '$_multiline'))
				{
					text = $es4.$$call($es4.$$call(text, $$this, $$thisp, 'split', ['<br/>']), $$this, $$thisp, 'join', ['']);
				}
				if ($es4.$$call(text, $$this, $$thisp, 'indexOf', ["&#10;"]) !== -1)
				{
					text = $es4.$$call($es4.$$call(text, $$this, $$thisp, 'split', ["&#10;"]), $$this, $$thisp, 'join', ['<br/>']);
				}
				if ($es4.$$call(text, $$this, $$thisp, 'indexOf', ["\\n"]) !== -1)
				{
					text = $es4.$$call($es4.$$call(text, $$this, $$thisp, 'split', ["\\n"]), $$this, $$thisp, 'join', ['<br/>']);
				}
				if (!$es4.$$get($$thisp, $$this, $$thisp, '$_condenseWhite'))
				{
					text = $es4.$$coerce($es4.$$call(($es4.$$as(text, Object)), $$this, $$thisp, 'trim', $es4.$$EMPTY_ARRAY), String);
					var found = 0;
					var count = 0;
					for (var i = 0; i < $es4.$$get(text, $$this, $$thisp, 'length'); i++)
					{
						var char = $es4.$$call(text, $$this, $$thisp, 'charAt', [i]);
						if (found)
						{
							if (char == ' ')
							{
								count++;
							}
							else
							{
								var begin = $es4.$$call(text, $$this, $$thisp, 'substring', [0, found]);
								var end = $es4.$$call(text, $$this, $$thisp, 'substring', [i]);
								var insert = ' ';
								found = 0;
								while (count > 1)
								{
									if (count == 2)
									{
										insert += '&nbsp;&nbsp;';
									}
									else
									{
										insert += '&nbsp;';
									}
									count--;
								}
								count = 0;
								text = begin + insert + end;
								i = $es4.$$coerce($es4.$$get(begin, $$this, $$thisp, 'length') + $es4.$$get(insert, $$this, $$thisp, 'length'), uint);
							}
						}
						else if (char == ' ')
						{
							found = $es4.$$coerce(i, int);
							count = 1;
						}
					}
					text = $es4.$$call($es4.$$call(text, $$this, $$thisp, 'split', ['\t']), $$this, $$thisp, 'join', ['&nbsp;&nbsp;&nbsp;&nbsp;']);
					text = $es4.$$call($es4.$$call(text, $$this, $$thisp, 'split', ['\n']), $$this, $$thisp, 'join', ['<br/>']);
				}
				htmlText += text;
				htmlText += '</span>';
				return htmlText;
			}
;
		}));

		//method
		$es4.$$private_function('$_generateHTMLText', $$thisp, (function ()
		{
			return $es4.$$call($$thisp, $$this, $$thisp, '$_applyTextFormatting', [$es4.$$get($$thisp, $$this, $$thisp, '$_text') || $es4.$$get($$thisp, $$this, $$thisp, '$_htmlText')]);
		}));

		//method
		$es4.$$private_function('toColor', $$thisp, (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, uint);

			var color = (!value) ? '000000' : $es4.$$call(value, $$this, $$thisp, 'toString', [16]);
			while ($es4.$$get(color, $$this, $$thisp, 'length') < 6)
			{
				color = '0' + color;
			}
			return '#' + color;
		}));

		//method
		$es4.$$public_function('appendText', $$thisp, (function ($$$$newText)
		{
			//set default parameter values
			var newText = $es4.$$coerce($$$$newText, String);

			$es4.$$set($$this, $$this, $$thisp, 'htmlText', newText, '+=');
		}));

		//method
		$es4.$$public_function('copyRichText', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "copyRichText"'));
		}));

		//method
		$es4.$$public_function('getCharBoundaries', $$thisp, (function ($$$$charIndex)
		{
			//set default parameter values
			var charIndex = $es4.$$coerce($$$$charIndex, int);

			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "getCharBoundaries"'));
		}));

		//method
		$es4.$$public_function('getCharIndexAtPoint', $$thisp, (function ($$$$x, $$$$y)
		{
			//set default parameter values
			var x = $es4.$$coerce($$$$x, Number);
			var y = $es4.$$coerce($$$$y, Number);

			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "getCharIndexAtPoint"'));
		}));

		//method
		$es4.$$public_function('getFirstCharInParagraph', $$thisp, (function ($$$$charIndex)
		{
			//set default parameter values
			var charIndex = $es4.$$coerce($$$$charIndex, int);

			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "getFirstCharInParagraph"'));
		}));

		//method
		$es4.$$public_function('getImageReference', $$thisp, (function ($$$$id)
		{
			//set default parameter values
			var id = $es4.$$coerce($$$$id, String);

			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "getImageReference"'));
		}));

		//method
		$es4.$$public_function('getLineIndexAtPoint', $$thisp, (function ($$$$x, $$$$y)
		{
			//set default parameter values
			var x = $es4.$$coerce($$$$x, Number);
			var y = $es4.$$coerce($$$$y, Number);

			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "getLineIndexAtPoint"'));
		}));

		//method
		$es4.$$public_function('getLineIndexOfChar', $$thisp, (function ($$$$charIndex)
		{
			//set default parameter values
			var charIndex = $es4.$$coerce($$$$charIndex, int);

			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "getLineIndexOfChar"'));
		}));

		//method
		$es4.$$public_function('getLineLength', $$thisp, (function ($$$$lineIndex)
		{
			//set default parameter values
			var lineIndex = $es4.$$coerce($$$$lineIndex, int);

			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "getLineLength"'));
		}));

		//method
		$es4.$$public_function('getLineMetrics', $$thisp, (function ($$$$lineIndex)
		{
			//set default parameter values
			var lineIndex = $es4.$$coerce($$$$lineIndex, int);

			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "getLineMetrics"'));
		}));

		//method
		$es4.$$public_function('getLineOffset', $$thisp, (function ($$$$lineIndex)
		{
			//set default parameter values
			var lineIndex = $es4.$$coerce($$$$lineIndex, int);

			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "getLineOffset"'));
		}));

		//method
		$es4.$$public_function('getLineText', $$thisp, (function ($$$$lineIndex)
		{
			//set default parameter values
			var lineIndex = $es4.$$coerce($$$$lineIndex, int);

			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "getLineText"'));
		}));

		//method
		$es4.$$public_function('getParagraphLength', $$thisp, (function ($$$$charIndex)
		{
			//set default parameter values
			var charIndex = $es4.$$coerce($$$$charIndex, int);

			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "getParagraphLength"'));
		}));

		//method
		$es4.$$public_function('getRawText', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "getRawText"'));
		}));

		//method
		$es4.$$public_function('getTextFormat', $$thisp, (function ($$$$beginIndex, $$$$endIndex)
		{
			//set default parameter values
			var beginIndex = (0 > arguments.length - 1) ? -1 : $es4.$$coerce($$$$beginIndex, int);
			var endIndex = (1 > arguments.length - 1) ? -1 : $es4.$$coerce($$$$endIndex, int);

			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "getTextFormat"'));
		}));

		//method
		$es4.$$public_function('getTextRuns', $$thisp, (function ($$$$beginIndex, $$$$endIndex)
		{
			//set default parameter values
			var beginIndex = (0 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$beginIndex, int);
			var endIndex = (1 > arguments.length - 1) ? 2147483647 : $es4.$$coerce($$$$endIndex, int);

			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "getTextRuns"'));
		}));

		//method
		$es4.$$public_function('getXMLText', $$thisp, (function ($$$$beginIndex, $$$$endIndex)
		{
			//set default parameter values
			var beginIndex = (0 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$beginIndex, int);
			var endIndex = (1 > arguments.length - 1) ? 2147483647 : $es4.$$coerce($$$$endIndex, int);

			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "getXMLText"'));
		}));

		//method
		$es4.$$public_function('insertXMLText', $$thisp, (function ($$$$beginIndex, $$$$endIndex, $$$$richText, $$$$pasting)
		{
			//set default parameter values
			var beginIndex = $es4.$$coerce($$$$beginIndex, int);
			var endIndex = $es4.$$coerce($$$$endIndex, int);
			var richText = $es4.$$coerce($$$$richText, String);
			var pasting = (3 > arguments.length - 1) ? false : $es4.$$coerce($$$$pasting, Boolean);

			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "insertXMLText"'));
		}));

		//method
		$es4.$$public_function('pasteRichText', $$thisp, (function ($$$$richText)
		{
			//set default parameter values
			var richText = $es4.$$coerce($$$$richText, String);

			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "pasteRichText"'));
		}));

		//method
		$es4.$$public_function('replaceSelectedText', $$thisp, (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "replaceSelectedText"'));
		}));

		//method
		$es4.$$public_function('replaceText', $$thisp, (function ($$$$beginIndex, $$$$endIndex, $$$$newText)
		{
			//set default parameter values
			var beginIndex = $es4.$$coerce($$$$beginIndex, int);
			var endIndex = $es4.$$coerce($$$$endIndex, int);
			var newText = $es4.$$coerce($$$$newText, String);

			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "replaceText"'));
		}));

		//method
		$es4.$$public_function('setSelection', $$thisp, (function ($$$$beginIndex, $$$$endIndex)
		{
			//set default parameter values
			var beginIndex = $es4.$$coerce($$$$beginIndex, int);
			var endIndex = $es4.$$coerce($$$$endIndex, int);

			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "setSelection"'));
		}));

		//accessor
		$es4.$$public_accessor('width', $$thisp, (function ()
		{
			return $es4.$$super($$thisp).width;
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'width', (value - ($es4.$$get($$thisp, $$this, $$thisp, '$_border') ? 6 : 4)) + 'px', '=');
			$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_setExplicitBounds', [value, $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_height')]);
		}));

		//accessor
		$es4.$$public_accessor('height', $$thisp, (function ()
		{
			return $es4.$$super($$thisp).height;
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'height', (value - ($es4.$$get($$thisp, $$this, $$thisp, '$_border') ? 6 : 4)) + 'px', '=');
			$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_setExplicitBounds', [$es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_width'), value]);
		}));

		//accessor
		$es4.$$public_accessor('scrollRect', $$thisp, (function ()
		{
			return $es4.$$super($$thisp).scrollRect;
		}), (function ($$$$rectangle)
		{
			//set default parameter values
			var rectangle = $es4.$$coerce($$$$rectangle, Rectangle);

			if (!rectangle)
			{
				$es4.$$set($es4.$$super($$thisp), $$this, $$thisp, 'scrollRect', rectangle, '=');
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'width', ($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_width') - ($es4.$$get($$thisp, $$this, $$thisp, '$_border') ? 6 : 4)) + 'px', '=');
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'height', ($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_height') - ($es4.$$get($$thisp, $$this, $$thisp, '$_border') ? 6 : 4)) + 'px', '=');
				return;
			}
			$es4.$$set($es4.$$super($$thisp), $$this, $$thisp, 'scrollRect', rectangle, '=');
		}));

		//accessor
		$es4.$$public_accessor('type', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '$_type');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			if (value == $es4.$$get($$thisp, $$this, $$thisp, '$_type'))
			{
				return;
			}
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_domTextView'))
			{
				while ($es4.$$call($$thisp, $$this, $$thisp, '$_domTextView', 'hasChildNodes', $es4.$$EMPTY_ARRAY))
				{
					$es4.$$call($$thisp, $$this, $$thisp, '$_domTextView', 'removeChild', [$es4.$$get($$thisp, $$this, $$thisp, '$_domTextView', 'lastChild')]);
				}
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView'), '=');
			$es4.$$call($$thisp, $$this, $$thisp, '$_domTextView', 'removeEventListener', ['input', $es4.$$get($$thisp, $$this, $$thisp, 'onInput')]);
			$es4.$$call($$thisp, $$this, $$thisp, '$_domTextView', 'removeEventListener', ['keydown', $es4.$$get($$thisp, $$this, $$thisp, 'onKeyDown')]);
			$es4.$$call($$thisp, $$this, $$thisp, '$_domTextView', 'removeEventListener', ['keyup', $es4.$$get($$thisp, $$this, $$thisp, 'onKeyUp')]);
			$es4.$$call($$thisp, $$this, $$thisp, '$_domTextView', 'removeEventListener', ['blur', $es4.$$get($$thisp, $$this, $$thisp, 'onBlur')]);
			if (value == $es4.$$get(TextFieldType, $$this, $$thisp, 'DYNAMIC'))
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'setAttribute', ['aria-hidden', true]);
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'contentEditable', 'false', '=');
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'backgroundColor', 'inherit', '=');
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'outline', 'inherit', '=');
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'resize', 'inherit', '=');
			}
			else if (value == $es4.$$get(TextFieldType, $$this, $$thisp, 'INPUT'))
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'setAttribute', ['aria-hidden', false]);
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'contentEditable', 'true', '=');
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'backgroundColor', 'transparent', '=');
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'outline', 'none', '=');
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'resize', 'none', '=');
				$es4.$$call($$thisp, $$this, $$thisp, '$_domTextView', 'addEventListener', ['input', $es4.$$get($$thisp, $$this, $$thisp, 'onInput')]);
				$es4.$$call($$thisp, $$this, $$thisp, '$_domTextView', 'addEventListener', ['keydown', $es4.$$get($$thisp, $$this, $$thisp, 'onKeyDown')]);
				$es4.$$call($$thisp, $$this, $$thisp, '$_domTextView', 'addEventListener', ['keyup', $es4.$$get($$thisp, $$this, $$thisp, 'onKeyUp')]);
				$es4.$$call($$thisp, $$this, $$thisp, '$_domTextView', 'addEventListener', ['blur', $es4.$$get($$thisp, $$this, $$thisp, 'onBlur')]);
			}
			else
			{
				throw $es4.$$primitive(new (ArgumentError)('Parameter type must be one of the accepted values.', 2008));
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_type', value, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'width', ($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_width') - 4) + 'px', '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'height', ($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_height') - 4) + 'px', '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'textRendering', 'optimizeSpeed', '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'paddingLeft', '2px', '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'paddingTop', '2px', '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'paddingRight', '2px', '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'paddingBottom', '2px', '=');
			$es4.$$call($$thisp, $$this, $$thisp, '$_applyTextFormattingToNode', [$es4.$$get($$thisp, $$this, $$thisp, '$_domTextView')]);
			$es4.$$set($$thisp, $$this, $$thisp, '$_skipSetAutoDimensions', true, '=');
			var pscope = $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'TextFieldScope', 'pscope');
			$es4.$$call($es4.$$call($es4, $$this, $$thisp, '$$getDescriptor', [pscope, 'selectable']), $$this, $$thisp, 'set', 'call', [$$this, $es4.$$get($$thisp, $$this, $$thisp, '$_selectable')]);
			$es4.$$call($es4.$$call($es4, $$this, $$thisp, '$$getDescriptor', [pscope, 'autoSize']), $$this, $$thisp, 'set', 'call', [$$this, $es4.$$get($$thisp, $$this, $$thisp, '$_autoSize')]);
			$es4.$$call($es4.$$call($es4, $$this, $$thisp, '$$getDescriptor', [pscope, 'multiline']), $$this, $$thisp, 'set', 'call', [$$this, $es4.$$get($$thisp, $$this, $$thisp, '$_multiline')]);
			$es4.$$call($es4.$$call($es4, $$this, $$thisp, '$$getDescriptor', [pscope, 'border']), $$this, $$thisp, 'set', 'call', [$$this, $es4.$$get($$thisp, $$this, $$thisp, '$_border')]);
			$es4.$$call($es4.$$call($es4, $$this, $$thisp, '$$getDescriptor', [pscope, 'background']), $$this, $$thisp, 'set', 'call', [$$this, $es4.$$get($$thisp, $$this, $$thisp, '$_background')]);
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_htmlText'))
			{
				$es4.$$call($es4.$$call($es4, $$this, $$thisp, '$$getDescriptor', [$es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'TextFieldScope', 'pscope'), 'htmlText']), $$this, $$thisp, 'set', 'call', [$$this, $es4.$$get($$thisp, $$this, $$thisp, '$_htmlText')]);
			}
			else if ($es4.$$get($$thisp, $$this, $$thisp, '$_text'))
			{
				$es4.$$call($es4.$$call($es4, $$this, $$thisp, '$$getDescriptor', [$es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'TextFieldScope', 'pscope'), 'text']), $$this, $$thisp, 'set', 'call', [$$this, $es4.$$get($$thisp, $$this, $$thisp, '$_text')]);
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_skipSetAutoDimensions', false, '=');
			$es4.$$call($$thisp, $$this, $$thisp, 'setAutoDimensions', $es4.$$EMPTY_ARRAY);
		}));

		//accessor
		$es4.$$public_accessor('text', $$thisp, (function ()
		{
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_type') == $es4.$$get(TextFieldType, $$this, $$thisp, 'INPUT'))
			{
				return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_domTextView', 'textContent'), String);
			}
			return $es4.$$get($$thisp, $$this, $$thisp, '$_text');
		}), (function ($$$$text)
		{
			//set default parameter values
			var text = $es4.$$coerce($$$$text, String);

			if (text == null)
			{
				text = '';
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_characterTextFormats', null, '=');
			text = $es4.$$coerce($es4.$$call(TextField, $$this, $$thisp, 'restrictTextHandler', [text, $es4.$$get($$thisp, $$this, $$thisp, '$_restrict')]), String);
			$es4.$$set($$thisp, $$this, $$thisp, '$_text', text, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'innerHTML', ($es4.$$get($$thisp, $$this, $$thisp, '$_type') == $es4.$$get(TextFieldType, $$this, $$thisp, 'DYNAMIC')) ? $es4.$$call($$thisp, $$this, $$thisp, '$_applyTextFormatting', [text]) : $es4.$$call($es4.$$call($es4.$$call($es4.$$call(text, $$this, $$thisp, 'split', ['&']), $$this, $$thisp, 'join', ['&amp;']), $$this, $$thisp, 'split', ['<']), $$this, $$thisp, 'join', ['&lt;']), '=');
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_type') == $es4.$$get(TextFieldType, $$this, $$thisp, 'INPUT') && $es4.$$get(document, $$this, $$thisp, 'activeElement') == $es4.$$get($$thisp, $$this, $$thisp, '$_domTextView'))
			{
				var node = $es4.$$get($$thisp, $$this, $$thisp, '$_domTextView');
				var textNode = $es4.$$get(node, $$this, $$thisp, 'firstChild') || node;
				var range = $es4.$$call(document, $$this, $$thisp, 'createRange', $es4.$$EMPTY_ARRAY);
				$es4.$$call(range, $$this, $$thisp, 'setStart', [textNode, 0]);
				$es4.$$call(range, $$this, $$thisp, 'setEnd', [textNode, 0]);
				var sel = $es4.$$call(window, $$this, $$thisp, 'getSelection', $es4.$$EMPTY_ARRAY);
				$es4.$$call(sel, $$this, $$thisp, 'removeAllRanges', $es4.$$EMPTY_ARRAY);
				$es4.$$call(sel, $$this, $$thisp, 'addRange', [range]);
			}
			$es4.$$call($$thisp, $$this, $$thisp, 'setAutoDimensions', $es4.$$EMPTY_ARRAY);
		}));

		//accessor
		$es4.$$public_accessor('htmlText', $$thisp, (function ()
		{
			return $es4.$$call($$thisp, $$this, $$thisp, '$_generateHTMLText', $es4.$$EMPTY_ARRAY);
		}), (function ($$$$text)
		{
			//set default parameter values
			var text = $es4.$$coerce($$$$text, String);

			if (text == null)
			{
				text = '';
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_characterTextFormats', null, '=');
			text = $es4.$$coerce($es4.$$call(TextField, $$this, $$thisp, 'restrictTextHandler', [text, $es4.$$get($$thisp, $$this, $$thisp, '$_restrict')]), String);
			var win = window;
			$es4.$$set($$thisp, $$this, $$thisp, '$_htmlText', text, '=');
			if ($es4.$$call(text, $$this, $$thisp, 'indexOf', ['<']) !== -1)
			{
				if ($es4.$$get($$thisp, $$this, $$thisp, '$_type') == $es4.$$get(TextFieldType, $$this, $$thisp, 'INPUT'))
				{
					$es4.$$call($es4.$$call(win, $$this, $$thisp, '$$getDescriptor', [$es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'TextFieldScope', 'pscope'), 'text']), $$this, $$thisp, 'set', 'call', [$$this, $es4.$$call(win, $$this, $$thisp, 'HTMLtoText', ['<root>' + text + '</root>'])]);
					return;
				}
				text = $es4.$$coerce($es4.$$call(win, $$this, $$thisp, 'HTMLtoXML', ['<root>' + text + '</root>']), String);
				text = $es4.$$call(text, $$this, $$thisp, 'substring', [6, $es4.$$get(text, $$this, $$thisp, 'length') - 7]);
			}
			else if ($es4.$$get($$thisp, $$this, $$thisp, '$_type') == $es4.$$get(TextFieldType, $$this, $$thisp, 'INPUT'))
			{
				$es4.$$call($es4.$$call(win, $$this, $$thisp, '$$getDescriptor', [$es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'TextFieldScope', 'pscope'), 'text']), $$this, $$thisp, 'set', 'call', [$$this, text]);
				return;
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'innerHTML', $es4.$$call($$thisp, $$this, $$thisp, '$_applyTextFormatting', [text]), '=');
			$es4.$$call($$thisp, $$this, $$thisp, 'setAutoDimensions', $es4.$$EMPTY_ARRAY);
		}));

		//accessor
		$es4.$$public_accessor('multiline', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '$_multiline');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			$es4.$$set($$thisp, $$this, $$thisp, '$_multiline', value, '=');
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_type') == $es4.$$get(TextFieldType, $$this, $$thisp, 'INPUT'))
			{
				if (!value)
				{
					$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'whiteSpace', 'nowrap', '=');
				}
				else
				{
					$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'whiteSpace', 'pre-wrap', '=');
				}
				$es4.$$call($$thisp, $$this, $$thisp, 'setAutoDimensions', $es4.$$EMPTY_ARRAY);
			}
		}));

		//accessor
		$es4.$$public_accessor('wordWrap', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '$_wordWrap');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			if (value == $es4.$$get($$thisp, $$this, $$thisp, '$_wordWrap'))
			{
				return;
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_wordWrap', value, '=');
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_type') == $es4.$$get(TextFieldType, $$this, $$thisp, 'INPUT'))
			{
				if (!value)
				{
					$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'wordWrap', 'normal', '=');
				}
				else
				{
					$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'wordWrap', 'break-word', '=');
				}
				$es4.$$call($$thisp, $$this, $$thisp, 'setAutoDimensions', $es4.$$EMPTY_ARRAY);
			}
		}));

		//accessor
		$es4.$$public_accessor('textColor', $$thisp, (function ()
		{
			var color = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'color'), String);
			return $es4.$$coerce(parseInt($es4.$$call($es4.$$call(color, $$this, $$thisp, 'split', ['#']), $$this, $$thisp, 'pop', $es4.$$EMPTY_ARRAY), 16), uint);
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, uint);

			var color = '#' + $es4.$$call(value, $$this, $$thisp, 'toString', [16]);
			if (color == '#0')
			{
				color = '#000000';
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'fill', color, '=');
		}));

		//accessor
		$es4.$$public_accessor('defaultTextFormat', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '$_defaultTextFormat');
		}), (function ($$$$format)
		{
			//set default parameter values
			var format = $es4.$$coerce($$$$format, TextFormat);

			if (!format)
			{
				format = $es4.$$primitive(new (TextFormat)());
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_defaultTextFormat', format, '=');
			$es4.$$call($$thisp, $$this, $$thisp, '$_applyTextFormattingToNode', [$es4.$$get($$thisp, $$this, $$thisp, '$_domTextView')]);
			$es4.$$call($$thisp, $$this, $$thisp, 'setAutoDimensions', $es4.$$EMPTY_ARRAY);
		}));

		//accessor
		$es4.$$public_accessor('autoSize', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '$_autoSize');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			if (value != $es4.$$get(TextFieldAutoSize, $$this, $$thisp, 'NONE'))
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'removeProperty', ['height']);
			}
			if (value == $es4.$$get(TextFieldAutoSize, $$this, $$thisp, 'CENTER'))
			{
				if ($es4.$$get($$thisp, $$this, $$thisp, '$_autoSize') != $es4.$$get(TextFieldAutoSize, $$this, $$thisp, 'CENTER'))
				{
					$es4.$$set($$this, $$this, $$thisp, 'width', $es4.$$get($$this, $$this, $$thisp, 'width'), '=');
				}
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'overflow', 'inherit', '=');
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'textAlign', 'center', '=');
			}
			else if (value == $es4.$$get(TextFieldAutoSize, $$this, $$thisp, 'LEFT'))
			{
				if (!$es4.$$get($$thisp, $$this, $$thisp, '$_multiline'))
				{
					$es4.$$call($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'removeProperty', ['width']);
				}
				else
				{
					$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'width', $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_width') + 'px', '=');
				}
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'overflow', 'inherit', '=');
				$es4.$$call($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'removeProperty', ['text-align']);
			}
			else
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'removeProperty', ['text-align']);
				if ($es4.$$get($$thisp, $$this, $$thisp, '$_autoSize') != $es4.$$get(TextFieldAutoSize, $$this, $$thisp, 'NONE'))
				{
					$es4.$$set($$this, $$this, $$thisp, 'width', $es4.$$get($$this, $$this, $$thisp, 'width'), '=');
				}
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'overflow', 'hidden', '=');
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_autoSize', value, '=');
			$es4.$$call($$thisp, $$this, $$thisp, 'setAutoDimensions', $es4.$$EMPTY_ARRAY);
		}));

		//accessor
		$es4.$$public_accessor('length', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '$_text', 'length');
		}), null);

		//accessor
		$es4.$$public_accessor('alwaysShowSelection', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "alwaysShowSelection"'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "alwaysShowSelection"'));
		}));

		//accessor
		$es4.$$public_accessor('antiAliasType', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "antiAliasType"'));
		}), (function ($$$$antiAliasType)
		{
			//set default parameter values
			var antiAliasType = $es4.$$coerce($$$$antiAliasType, String);

			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "antiAliasType"'));
		}));

		//accessor
		$es4.$$public_accessor('background', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '$_background');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			$es4.$$set($$thisp, $$this, $$thisp, '$_background', value, '=');
			if (!value)
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'backgroundColor', 'transparent', '=');
				return;
			}
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_backgroundColor') != 0xFFFFFF)
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'backgroundColor', $es4.$$call($$thisp, $$this, $$thisp, 'toColor', [$es4.$$get($$thisp, $$this, $$thisp, '$_backgroundColor')]), '=');
			}
			else
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'backgroundColor', 'white', '=');
			}
		}));

		//accessor
		$es4.$$public_accessor('backgroundColor', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '$_backgroundColor');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, uint);

			if (value == $es4.$$get($$thisp, $$this, $$thisp, '$_backgroundColor'))
			{
				return;
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_backgroundColor', value, '=');
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_background'))
			{
				if (value != 0xFFFFFF)
				{
					$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'backgroundColor', $es4.$$call($$thisp, $$this, $$thisp, 'toColor', [value]), '=');
				}
				else
				{
					$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'backgroundColor', 'white', '=');
				}
			}
			else
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'backgroundColor', 'transparent', '=');
			}
		}));

		//accessor
		$es4.$$public_accessor('border', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '$_border');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			if (value == $es4.$$get($$thisp, $$this, $$thisp, '$_border'))
			{
				return;
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_border', value, '=');
			if (!value)
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'borderColor', 'transparent', '=');
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'borderStyle', 'none', '=');
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'borderWidth', '0px', '=');
				if ($es4.$$get($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'width') !== undefined)
				{
					$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'width', ($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_width') - 4) + 'px', '=');
				}
				if ($es4.$$get($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'height') !== undefined)
				{
					$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'height', ($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_height') - 4) + 'px', '=');
				}
				return;
			}
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_borderColor'))
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'borderColor', $es4.$$call($$thisp, $$this, $$thisp, 'toColor', [$es4.$$get($$thisp, $$this, $$thisp, '$_borderColor')]), '=');
			}
			else
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'borderColor', 'black', '=');
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'borderStyle', 'solid', '=');
			$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'borderWidth', '1px', '=');
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'width') !== undefined)
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'width', ($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_width') - 6) + 'px', '=');
			}
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'height') !== undefined)
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'height', ($es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_height') - 6) + 'px', '=');
			}
		}));

		//accessor
		$es4.$$public_accessor('borderColor', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '$_borderColor');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, uint);

			$es4.$$set($$thisp, $$this, $$thisp, '$_borderColor', value, '=');
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_border'))
			{
				if (value)
				{
					$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'borderColor', $es4.$$call($$thisp, $$this, $$thisp, 'toColor', [value]), '=');
				}
				else
				{
					$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'borderColor', 'black', '=');
				}
			}
			else
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'borderColor', 'transparent', '=');
			}
		}));

		//accessor
		$es4.$$public_accessor('bottomScrollV', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "bottomScrollV"'));
		}), null);

		//accessor
		$es4.$$public_accessor('caretIndex', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "caretIndex"'));
		}), null);

		//accessor
		$es4.$$public_accessor('condenseWhite', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '$_condenseWhite');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			$es4.$$set($$thisp, $$this, $$thisp, '$_condenseWhite', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('displayAsPassword', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "displayAsPassword"'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "displayAsPassword"'));
		}));

		//accessor
		$es4.$$public_accessor('embedFonts', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "embedFonts"'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

		}));

		//accessor
		$es4.$$public_accessor('gridFitType', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "gridFitType"'));
		}), (function ($$$$gridFitType)
		{
			//set default parameter values
			var gridFitType = $es4.$$coerce($$$$gridFitType, String);

			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "gridFitType"'));
		}));

		//accessor
		$es4.$$public_accessor('maxChars', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '$_maxChars');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, int);

			$es4.$$set($$thisp, $$this, $$thisp, '$_maxChars', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('maxScrollH', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('TextField: maxScrollH is not supported.'));
		}), null);

		//accessor
		$es4.$$public_accessor('maxScrollV', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('TextField: maxScrollV is not supported.'));
		}), null);

		//accessor
		$es4.$$public_accessor('mouseWheelEnabled', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "mouseWheelEnabled"'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "mouseWheelEnabled"'));
		}));

		//accessor
		$es4.$$public_accessor('numLines', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "numLines"'));
		}), null);

		//accessor
		$es4.$$public_accessor('restrict', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '$_restrict');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			$es4.$$set($$thisp, $$this, $$thisp, '$_restrict', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('scrollH', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('TextField: scrollH is not supported.'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, int);

			throw $es4.$$primitive(new (Error)('TextField: scrollH is not supported.'));
		}));

		//accessor
		$es4.$$public_accessor('scrollV', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('TextField: scrollV is not supported.'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, int);

			throw $es4.$$primitive(new (Error)('TextField: scrollV is not supported.'));
		}));

		//accessor
		$es4.$$public_accessor('selectable', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '$_selectable');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			$es4.$$set($$thisp, $$this, $$thisp, '$_selectable', value, '=');
			if (value && $es4.$$get($$this, $$this, $$thisp, 'mouseEnabled'))
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'webkitTouchCallout', $es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'webkitUserSelect', $es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'khtmlUserSelect', $es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'mozUserSelect', $es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'msUserSelect', $es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'userSelect', $es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'cursor', null, '='), '='), '='), '='), '='), '='), '=');
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'cursor', 'text', '=');
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'pointerEvents', 'auto', '=');
			}
			else
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'webkitTouchCallout', $es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'webkitUserSelect', $es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'khtmlUserSelect', $es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'mozUserSelect', $es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'msUserSelect', $es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'userSelect', 'none', '='), '='), '='), '='), '='), '=');
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'cursor', 'default', '=');
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'pointerEvents', 'none', '=');
			}
		}));

		//accessor
		$es4.$$public_accessor('mouseEnabled', $$thisp, (function ()
		{
			return $es4.$$super($$thisp).mouseEnabled;
		}), (function ($$$$enabled)
		{
			//set default parameter values
			var enabled = $es4.$$coerce($$$$enabled, Boolean);

			if (enabled && $es4.$$get($$thisp, $$this, $$thisp, '$_selectable'))
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'webkitTouchCallout', $es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'webkitUserSelect', $es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'khtmlUserSelect', $es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'mozUserSelect', $es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'msUserSelect', $es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'userSelect', $es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'cursor', null, '='), '='), '='), '='), '='), '='), '=');
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'cursor', 'text', '=');
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'pointerEvents', 'auto', '=');
			}
			else
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'webkitTouchCallout', $es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'webkitUserSelect', $es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'khtmlUserSelect', $es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'mozUserSelect', $es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'msUserSelect', $es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'userSelect', 'none', '='), '='), '='), '='), '='), '=');
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'cursor', 'default', '=');
				$es4.$$set($$thisp, $$this, $$thisp, '$_domTextView', 'style', 'pointerEvents', 'none', '=');
			}
			$es4.$$set($es4.$$super($$thisp), $$this, $$thisp, 'mouseEnabled', enabled, '=');
		}));

		//accessor
		$es4.$$public_accessor('selectedText', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "selectedText"'));
		}), null);

		//accessor
		$es4.$$public_accessor('selectionBeginIndex', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "selectionBeginIndex"'));
		}), null);

		//accessor
		$es4.$$public_accessor('selectionEndIndex', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "selectionEndIndex"'));
		}), null);

		//accessor
		$es4.$$public_accessor('sharpness', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "sharpness"'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "sharpness"'));
		}));

		//accessor
		$es4.$$public_accessor('styleSheet', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '$_styleSheet');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, StyleSheet);

			$es4.$$set($$thisp, $$this, $$thisp, '$_styleSheet', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('textHeight', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "textHeight"'));
		}), null);

		//accessor
		$es4.$$public_accessor('textInteractionMode', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "textInteractionMode"'));
		}), null);

		//accessor
		$es4.$$public_accessor('textWidth', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "textWidth"'));
		}), null);

		//accessor
		$es4.$$public_accessor('thickness', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "thickness"'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "thickness"'));
		}));

		//accessor
		$es4.$$public_accessor('useRichTextClipboard', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "useRichTextClipboard"'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			throw $es4.$$primitive(new (Error)('TextField: attempted call to an unimplemented function "useRichTextClipboard"'));
		}));

		//accessor
		$es4.$$public_accessor('tabEnabled', $$thisp, (function ()
		{
			return $es4.$$super($$thisp).tabEnabled;
		}), (function ($$$$enabled)
		{
			//set default parameter values
			var enabled = $es4.$$coerce($$$$enabled, Boolean);

			$es4.$$set($es4.$$super($$thisp), $$this, $$thisp, 'tabEnabled', enabled, '=');
			if (!enabled && $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_tabIndex') == -1)
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_domTextView', 'setAttribute', ['aria-hidden', true]);
			}
			else
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_domTextView', 'removeAttribute', ['aria-hidden']);
			}
		}));

		//accessor
		$es4.$$public_accessor('tabIndex', $$thisp, (function ()
		{
			return $es4.$$super($$thisp).tabIndex;
		}), (function ($$$$index)
		{
			//set default parameter values
			var index = $es4.$$coerce($$$$index, int);

			$es4.$$set($es4.$$super($$thisp), $$this, $$thisp, 'tabIndex', index, '=');
			if (!$es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'InteractiveObjectScope', '$_tabEnabled') && index == -1)
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_domTextView', 'setAttribute', ['aria-hidden', true]);
			}
			else
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_domTextView', 'removeAttribute', ['aria-hidden']);
			}
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(TextField, {EXTENDS:'flash.display.InteractiveObject'}, 'flash.text::TextField');
})();
//flash.text.TextField


//flash.display3D.Context3DTextureFormat
$es4.$$package('flash.display3D').Context3DTextureFormat = function () { throw new Error('Use of unimplemented class: Context3DTextureFormat'); }
//flash.display3D.Context3DTextureFormat


//flash.net.URLStream
$es4.$$package('flash.net').URLStream = function () { throw new Error('Use of unimplemented class: URLStream'); }
//flash.net.URLStream


//flash.sampler.NewObjectSample
$es4.$$package('flash.sampler').NewObjectSample = function () { throw new Error('Use of unimplemented class: NewObjectSample'); }
//flash.sampler.NewObjectSample


//flash.net.NetStream
$es4.$$package('flash.net').NetStream = (function ()
{
	//imports
	var Event;
	var EventDispatcher;
	var NetStatusEvent;
	var Camera;
	var Microphone;
	var SoundTransform;
	var VideoStreamSettings;
	var ByteArray;
	var Browser;
	var NetConnection;
	var NetStream;
	var NetStreamPlayOptions;

	//properties
	$es4.$$protected_property('$__PLAYING', NetStream, String);
	$es4.$$protected_property('$__VIDEO_CREATED', NetStream, String);
	NetStream.CONNECT_TO_FMS = "connectToFMS";
	NetStream.DIRECT_CONNECTIONS = "directConnections";

	//class initializer
	NetStream.$$cinit = (function ()
	{
		NetStream.$$cinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;
		EventDispatcher = $es4.$$['flash.events'].EventDispatcher;
		NetStatusEvent = $es4.$$['flash.events'].NetStatusEvent;
		Camera = $es4.$$['flash.media'].Camera;
		Microphone = $es4.$$['flash.media'].Microphone;
		SoundTransform = $es4.$$['flash.media'].SoundTransform;
		VideoStreamSettings = $es4.$$['flash.media'].VideoStreamSettings;
		ByteArray = $es4.$$['flash.utils'].ByteArray;
		Browser = $es4.$$['browser'].Browser;
		NetConnection = $es4.$$['flash.net'].NetConnection;
		NetStreamPlayOptions = $es4.$$['flash.net'].NetStreamPlayOptions;

		//initialize properties
		NetStream.$__PLAYING = 'playing';
		NetStream.$__VIDEO_CREATED = 'videoCreated';
	});

	function NetStream()
	{
		//initialize class if not initialized
		if (NetStream.$$cinit !== undefined) NetStream.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof NetStream) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], NetStream) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('$_soundTransform', $$thisp, SoundTransform);
		$es4.$$private_property('$_wasPaused', $$thisp, Boolean);
		$es4.$$private_property('$_wasEnded', $$thisp, Boolean);
		$es4.$$private_property('$_endTime', $$thisp, Number);
		$es4.$$private_property('$_realPause', $$thisp, Boolean);
		$es4.$$public_property('$__suspended', $$thisp, Boolean);
		$es4.$$private_property('$_duration', $$thisp, Number);
		$es4.$$public_property('$__domVideoView', $$thisp, Object);
		$es4.$$protected_property('$_client', $$thisp, Object);

		//initializer
		$es4.$$iinit($$thisp, (function ()
		{
			//initialize properties
			$es4.$$set($$this, $$this, $$thisp, '$_soundTransform', $es4.$$primitive(new (SoundTransform)()), '=');
			$es4.$$set($$this, $$this, $$thisp, '$_wasEnded', true, '=');
			$es4.$$set($$this, $$this, $$thisp, '$_endTime', 0, '=');
			$es4.$$set($$this, $$this, $$thisp, '$_duration', -1, '=');
		}));

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$connection, $$$$peerID)
		{
			//set default parameter values
			var connection = $es4.$$coerce($$$$connection, NetConnection);
			var peerID = (1 > arguments.length - 1) ? "connectToFMS" : $es4.$$coerce($$$$peerID, String);

			$es4.$$super($$thisp).$$z();
			$es4.$$set($$this, $$this, $$thisp, '$_client', $$this, '=');
		}));

		//method
		$es4.$$public_function('play', $$thisp, (function ($$$$rest)
		{
			//set default parameter values
			for (var $$i = 0, $$length = arguments.length, rest = new Array($$length - 0); $$i < $$length; $$i += 1) rest[$$i - 0] = arguments[$$i];

			$es4.$$set($$this, $$this, $$thisp, '$__domVideoView', $es4.$$call(Browser, $$this, $$thisp, 'getNewVideo', $es4.$$EMPTY_ARRAY), '=');
			$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (Event)($es4.$$get(NetStream, $$this, $$thisp, '$__VIDEO_CREATED')))]);
			var window = $es4.$$call(Browser, $$this, $$thisp, 'getWindow', $es4.$$EMPTY_ARRAY);
			var isPlaying = false;
			var isIE = $es4.$$coerce($es4.$$get(window, $$this, $$thisp, 'ie'), Boolean);
			var setTimeout = $es4.$$coerce($es4.$$get(window, $$this, $$thisp, 'setTimeout'), Function);
			var firefoxMobile = $es4.$$coerce(($es4.$$get(window, $$this, $$thisp, 'mobile') && $es4.$$get(window, $$this, $$thisp, 'firefox')), Boolean);
			var safariMobile = $es4.$$coerce(($es4.$$get(window, $$this, $$thisp, 'mobile') && $es4.$$get(window, $$this, $$thisp, 'safari')), Boolean);
			var canPlayThrough = false;
			$es4.$$call($$this, $$this, $$thisp, '$__domVideoView', 'addEventListener', ['loadedmetadata', onLoadedMetaData]);
			$es4.$$call($$this, $$this, $$thisp, '$__domVideoView', 'addEventListener', ['play', onPlay]);
			$es4.$$call($$this, $$this, $$thisp, '$__domVideoView', 'addEventListener', ['canplaythrough', onCanPlay]);
			$es4.$$set($$this, $$this, $$thisp, '$__domVideoView', 'src', $es4.$$get(rest, $$this, $$thisp, 0), '=');
			if (safariMobile)
			{
				$es4.$$call($$this, $$this, $$thisp, '$__domVideoView', 'load', $es4.$$EMPTY_ARRAY);
				$es4.$$call($$this, $$this, $$thisp, '$__domVideoView', 'play', $es4.$$EMPTY_ARRAY);
				$es4.$$call($$this, $$this, $$thisp, '$__domVideoView', 'pause', $es4.$$EMPTY_ARRAY);
			}
			else if (firefoxMobile)
			{
				$es4.$$call($$this, $$this, $$thisp, '$__domVideoView', 'play', $es4.$$EMPTY_ARRAY);
			}

			function onLoadedMetaData($$$$event) 
			{
				//set default parameter values
				var event = $es4.$$coerce($$$$event, Event);

				$es4.$$call($$this, $$this, $$thisp, '$__domVideoView', 'removeEventListener', ['loadedmetadata', onLoadedMetaData]);
				if (!$es4.$$get($$this, $$this, $$thisp, '$_client', 'onMetaData'))
				{
					return;
				}
				$es4.$$set($$thisp, $$this, $$thisp, '$_duration', $es4.$$get($$this, $$this, $$thisp, '$__domVideoView', 'duration'), '=');
				trace('reported video duration: ' + $es4.$$get($$thisp, $$this, $$thisp, '$_duration'));
				if ($es4.$$get($$thisp, $$this, $$thisp, '$_duration') == 1)
				{
					trace('incorrect video duration metadata detected. loading metadata file');
					var parts = $es4.$$coerce($es4.$$call(rest, $$this, $$thisp, 0, 'split', ['.']), Array);
					$es4.$$call(parts, $$this, $$thisp, 'pop', $es4.$$EMPTY_ARRAY);
					var uri = $es4.$$call(parts, $$this, $$thisp, 'join', ['.']) + '.metadata';
					var xmlHttpRequest = $es4.$$primitive(new ($es4.$$get(window, $$this, $$thisp, 'XMLHttpRequest'))());
					$es4.$$call(xmlHttpRequest, $$this, $$thisp, 'open', ['GET', uri, false]);
					$es4.$$call(xmlHttpRequest, $$this, $$thisp, 'overrideMimeType', ['text/javascript']);
					$es4.$$call(xmlHttpRequest, $$this, $$thisp, 'send', [null]);
					trace('metadata file reported duration: ' + $es4.$$get(xmlHttpRequest, $$this, $$thisp, 'responseText'));
					$es4.$$set($$thisp, $$this, $$thisp, '$_duration', $es4.$$get(xmlHttpRequest, $$this, $$thisp, 'responseText'), '=');
				}
				$es4.$$call($$this, $$this, $$thisp, '$_client', 'onMetaData', [{width:$es4.$$get($$this, $$this, $$thisp, '$__domVideoView', 'videoWidth'), height:$es4.$$get($$this, $$this, $$thisp, '$__domVideoView', 'videoHeight'), duration:$es4.$$get($$thisp, $$this, $$thisp, '$_duration'), framerate:30}]);
			}
;

			function onCanPlay($$$$event) 
			{
				//set default parameter values
				var event = $es4.$$coerce($$$$event, Event);

				$es4.$$call($$this, $$this, $$thisp, '$__domVideoView', 'removeEventListener', ['canplaythrough', onCanPlay]);
				trace('can play through');
				canPlayThrough = true;
				if (!firefoxMobile)
				{
					$es4.$$call($$this, $$this, $$thisp, '$__domVideoView', 'play', $es4.$$EMPTY_ARRAY);
				}
			}
;

			function onPlay($$$$event) 
			{
				//set default parameter values
				var event = $es4.$$coerce($$$$event, Event);

				if (!canPlayThrough)
				{
					return;
				}
				if ($es4.$$get($$thisp, $$this, $$thisp, '$_wasEnded'))
				{
					$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (NetStatusEvent)($es4.$$get(NetStatusEvent, $$this, $$thisp, 'NET_STATUS'), false, false, {code:'NetStream.Play.Start'}))]);
					$es4.$$set($$thisp, $$this, $$thisp, '$_wasEnded', false, '=');
				}
				if (!isPlaying)
				{
					onPlaying();
				}
			}
;

			function onPlaying() 
			{
				isPlaying = true;
				if (!$es4.$$get($$this, $$this, $$thisp, '$__domVideoView'))
				{
					isPlaying = false;
					return;
				}
				if ($es4.$$get($$this, $$this, $$thisp, '$__domVideoView', 'paused') || $es4.$$get($$this, $$this, $$thisp, '$__domVideoView', 'ended'))
				{
					isPlaying = false;
					if ($es4.$$get($$this, $$this, $$thisp, '$__suspended'))
					{
						return;
					}
					else if ($es4.$$get($$this, $$this, $$thisp, '$__domVideoView', 'ended'))
					{
						onEnded();
					}
					else if ($es4.$$get($$thisp, $$this, $$thisp, '$_realPause'))
					{
						$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (NetStatusEvent)($es4.$$get(NetStatusEvent, $$this, $$thisp, 'NET_STATUS'), false, false, {code:'NetStream.Pause.Notify'}))]);
						$es4.$$set($$thisp, $$this, $$thisp, '$_wasPaused', true, '=');
					}
					else
					{
						trace('unbuffered edge case');
						$es4.$$call($$this, $$this, $$thisp, '$__domVideoView', 'play', $es4.$$EMPTY_ARRAY);
					}
					return;
				}
				else if ($es4.$$get($$thisp, $$this, $$thisp, '$_wasPaused'))
				{
					$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (NetStatusEvent)($es4.$$get(NetStatusEvent, $$this, $$thisp, 'NET_STATUS'), false, false, {code:'NetStream.Unpause.Notify'}))]);
					$es4.$$set($$thisp, $$this, $$thisp, '$_wasPaused', false, '=');
				}
				else if ($es4.$$get($$this, $$this, $$thisp, '$__domVideoView', 'currentTime') > $es4.$$get($$thisp, $$this, $$thisp, '$_duration'))
				{
					trace('ie reporting currentTime greater than duration');
					onEnded();
					$es4.$$call($$this, $$this, $$thisp, '$__domVideoView', 'pause', $es4.$$EMPTY_ARRAY);
					return;
				}
				$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (Event)($es4.$$get(NetStream, $$this, $$thisp, '$__PLAYING')))]);
				setTimeout(onPlaying, (isIE) ? 50 : 250);
			}
;

			function onEnded() 
			{
				$es4.$$set($$thisp, $$this, $$thisp, '$_wasEnded', true, '=');
				$es4.$$set($$thisp, $$this, $$thisp, '$_endTime', $es4.$$get($$this, $$this, $$thisp, 'time'), '=');
				trace('onEnded called, end time: ' + $es4.$$get($$thisp, $$this, $$thisp, '$_endTime'));
				$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (NetStatusEvent)($es4.$$get(NetStatusEvent, $$this, $$thisp, 'NET_STATUS'), false, false, {code:'NetStream.Play.Stop'}))]);
				if ($es4.$$get($$this, $$this, $$thisp, '$_client', 'onPlayStatus'))
				{
					$es4.$$call($$this, $$this, $$thisp, '$_client', 'onPlayStatus', [{code:'NetStream.Play.Complete'}]);
				}
			}
;
		}));

		//method
		$es4.$$public_function('appendBytes', $$thisp, (function ($$$$bytes)
		{
			//set default parameter values
			var bytes = $es4.$$coerce($$$$bytes, ByteArray);

			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "appendBytes"'));
		}));

		//method
		$es4.$$public_function('appendBytesAction', $$thisp, (function ($$$$netStreamAppendBytesAction)
		{
			//set default parameter values
			var netStreamAppendBytesAction = $es4.$$coerce($$$$netStreamAppendBytesAction, String);

			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "appendBytesAction"'));
		}));

		//method
		$es4.$$public_function('attach', $$thisp, (function ($$$$connection)
		{
			//set default parameter values
			var connection = $es4.$$coerce($$$$connection, NetConnection);

			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "attach"'));
		}));

		//method
		$es4.$$public_function('attachAudio', $$thisp, (function ($$$$microphone)
		{
			//set default parameter values
			var microphone = $es4.$$coerce($$$$microphone, Microphone);

			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "attachAudio"'));
		}));

		//method
		$es4.$$public_function('attachCamera', $$thisp, (function ($$$$theCamera, $$$$snapshotMilliseconds)
		{
			//set default parameter values
			var theCamera = $es4.$$coerce($$$$theCamera, Camera);
			var snapshotMilliseconds = (1 > arguments.length - 1) ? -1 : $es4.$$coerce($$$$snapshotMilliseconds, int);

			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "attachCamera"'));
		}));

		//method
		$es4.$$public_function('close', $$thisp, (function ()
		{
			if (!$es4.$$get($$this, $$this, $$thisp, '$__domVideoView'))
			{
				return;
			}
			$es4.$$call($$this, $$this, $$thisp, '$__domVideoView', 'pause', $es4.$$EMPTY_ARRAY);
			$es4.$$set($$this, $$this, $$thisp, '$__domVideoView', 'src', '', '=');
			$es4.$$call($$this, $$this, $$thisp, '$__domVideoView', 'removeAttribute', ['src']);
		}));

		//method
		$es4.$$public_function('dispose', $$thisp, (function ()
		{
			if (!$es4.$$get($$this, $$this, $$thisp, '$__domVideoView'))
			{
				return;
			}
			$es4.$$call($$this, $$this, $$thisp, 'close', $es4.$$EMPTY_ARRAY);
			if ($es4.$$get($$this, $$this, $$thisp, '$__domVideoView', 'parentNode'))
			{
				$es4.$$call($$this, $$this, $$thisp, '$__domVideoView', 'parentNode', 'displayObject', 'attachNetStream', [null]);
			}
			$es4.$$set($$this, $$this, $$thisp, '$__domVideoView', null, '=');
		}));

		//method
		$es4.$$public_function('onPeerConnect', $$thisp, (function ($$$$subscriber)
		{
			//set default parameter values
			var subscriber = $es4.$$coerce($$$$subscriber, $es4.$$['flash.net'].NetStream);

			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "onPeerConnect"'));
		}));

		//method
		$es4.$$public_function('pause', $$thisp, (function ()
		{
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_wasEnded') && $es4.$$get($$thisp, $$this, $$thisp, '$_endTime'))
			{
				return;
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_realPause', true, '=');
			$es4.$$call($$this, $$this, $$thisp, '$__domVideoView', 'pause', $es4.$$EMPTY_ARRAY);
		}));

		//method
		$es4.$$public_function('play2', $$thisp, (function ($$$$param)
		{
			//set default parameter values
			var param = $es4.$$coerce($$$$param, NetStreamPlayOptions);

			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "play2"'));
		}));

		//method
		$es4.$$public_function('publish', $$thisp, (function ($$$$name, $$$$type)
		{
			//set default parameter values
			var name = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$name, String);
			var type = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$type, String);

			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "publish"'));
		}));

		//method
		$es4.$$public_function('receiveAudio', $$thisp, (function ($$$$flag)
		{
			//set default parameter values
			var flag = $es4.$$coerce($$$$flag, Boolean);

			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "receiveAudio"'));
		}));

		//method
		$es4.$$public_function('receiveVideo', $$thisp, (function ($$$$flag)
		{
			//set default parameter values
			var flag = $es4.$$coerce($$$$flag, Boolean);

			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "receiveVideo"'));
		}));

		//method
		$es4.$$public_function('receiveVideoFPS', $$thisp, (function ($$$$FPS)
		{
			//set default parameter values
			var FPS = $es4.$$coerce($$$$FPS, Number);

			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "receiveVideoFPS"'));
		}));

		//method
		$es4.$$public_function('resume', $$thisp, (function ()
		{
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_wasEnded') && $es4.$$get($$thisp, $$this, $$thisp, '$_endTime'))
			{
				return;
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_realPause', false, '=');
			$es4.$$call($$this, $$this, $$thisp, '$__domVideoView', 'play', $es4.$$EMPTY_ARRAY);
		}));

		//method
		$es4.$$public_function('seek', $$thisp, (function ($$$$offset)
		{
			//set default parameter values
			var offset = $es4.$$coerce($$$$offset, Number);

			if (offset == $es4.$$get($$this, $$this, $$thisp, '$__domVideoView', 'currentTime'))
			{
				return;
			}
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_wasEnded'))
			{
				if (offset >= $es4.$$get($$thisp, $$this, $$thisp, '$_endTime'))
				{
					return;
				}
				$es4.$$set($$thisp, $$this, $$thisp, '$_wasEnded', false, '=');
				$es4.$$set($$thisp, $$this, $$thisp, '$_endTime', 0, '=');
				$es4.$$set($$thisp, $$this, $$thisp, '$_realPause', false, '=');
				$es4.$$call($$this, $$this, $$thisp, '$__domVideoView', 'play', $es4.$$EMPTY_ARRAY);
			}
			$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (NetStatusEvent)($es4.$$get(NetStatusEvent, $$this, $$thisp, 'NET_STATUS'), false, false, {code:'NetStream.SeekStart.Notify'}))]);
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_duration') == -1 && offset > $es4.$$call($$this, $$this, $$thisp, '$__domVideoView', 'buffered', 'end', [0]))
			{
				offset = $es4.$$coerce($es4.$$call($$this, $$this, $$thisp, '$__domVideoView', 'buffered', 'end', [0]) - 1, Number);
			}
			else if ($es4.$$get($$thisp, $$this, $$thisp, '$_duration') != -1 && offset >= $es4.$$get($$thisp, $$this, $$thisp, '$_duration'))
			{
				offset = $es4.$$get($$thisp, $$this, $$thisp, '$_duration') - 1;
			}
			$es4.$$set($$this, $$this, $$thisp, '$__domVideoView', 'currentTime', offset, '=');
			$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (NetStatusEvent)($es4.$$get(NetStatusEvent, $$this, $$thisp, 'NET_STATUS'), false, false, {code:'NetStream.Seek.Notify'}))]);
		}));

		//method
		$es4.$$public_function('send', $$thisp, (function ($$$$handlerName, $$$$rest)
		{
			//set default parameter values
			var handlerName = $es4.$$coerce($$$$handlerName, String);
			for (var $$i = 1, $$length = arguments.length, rest = new Array($$length - 1); $$i < $$length; $$i += 1) rest[$$i - 1] = arguments[$$i];

			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "send"'));
		}));

		//method
		$es4.$$public_function('step', $$thisp, (function ($$$$frames)
		{
			//set default parameter values
			var frames = $es4.$$coerce($$$$frames, int);

			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "step"'));
		}));

		//method
		$es4.$$public_function('togglePause', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "togglePause"'));
		}));

		//accessor
		$es4.$$public_accessor('client', $$thisp, (function ()
		{
			return $es4.$$get($$this, $$this, $$thisp, '$_client');
		}), (function ($$$$object)
		{
			//set default parameter values
			var object = $es4.$$coerce($$$$object, Object);

			if (!object)
			{
				object = $$this;
			}
			$es4.$$set($$this, $$this, $$thisp, '$_client', object, '=');
		}));

		//accessor
		$es4.$$public_accessor('audioCodec', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "audioCodec"'));
		}), null);

		//accessor
		$es4.$$public_accessor('audioReliable', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "audioReliable"'));
		}), (function ($$$$reliable)
		{
			//set default parameter values
			var reliable = $es4.$$coerce($$$$reliable, Boolean);

			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "audioReliable"'));
		}));

		//accessor
		$es4.$$public_accessor('audioSampleAccess', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "audioSampleAccess"'));
		}), (function ($$$$reliable)
		{
			//set default parameter values
			var reliable = $es4.$$coerce($$$$reliable, Boolean);

			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "audioSampleAccess"'));
		}));

		//accessor
		$es4.$$public_accessor('backBufferLength', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "backBufferLength"'));
		}), null);

		//accessor
		$es4.$$public_accessor('backBufferTime', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "backBufferTime"'));
		}), (function ($$$$backBufferTime)
		{
			//set default parameter values
			var backBufferTime = $es4.$$coerce($$$$backBufferTime, Number);

			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "backBufferTime"'));
		}));

		//accessor
		$es4.$$public_accessor('bufferLength', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "bufferLength"'));
		}), null);

		//accessor
		$es4.$$public_accessor('bufferTime', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "bufferTime"'));
		}), (function ($$$$bufferTime)
		{
			//set default parameter values
			var bufferTime = $es4.$$coerce($$$$bufferTime, Number);

			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "bufferTime"'));
		}));

		//accessor
		$es4.$$public_accessor('bufferTimeMax', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "bufferTimeMax"'));
		}), (function ($$$$bufferTimeMax)
		{
			//set default parameter values
			var bufferTimeMax = $es4.$$coerce($$$$bufferTimeMax, Number);

			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "bufferTimeMax"'));
		}));

		//accessor
		$es4.$$public_accessor('bytesLoaded', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "bytesLoaded"'));
		}), null);

		//accessor
		$es4.$$public_accessor('bytesTotal', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "bytesTotal"'));
		}), null);

		//accessor
		$es4.$$public_accessor('checkPolicyFile', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "checkPolicyFile"'));
		}), (function ($$$$state)
		{
			//set default parameter values
			var state = $es4.$$coerce($$$$state, Boolean);

			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "checkPolicyFile"'));
		}));

		//accessor
		$es4.$$public_accessor('currentFPS', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "currentFPS"'));
		}), null);

		//accessor
		$es4.$$public_accessor('dataReliable', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "dataReliable"'));
		}), (function ($$$$reliable)
		{
			//set default parameter values
			var reliable = $es4.$$coerce($$$$reliable, Boolean);

			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "dataReliable"'));
		}));

		//accessor
		$es4.$$public_accessor('decodedFrames', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "decodedFrames"'));
		}), null);

		//accessor
		$es4.$$public_accessor('farID', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "farID"'));
		}), null);

		//accessor
		$es4.$$public_accessor('farNonce', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "farNonce"'));
		}), null);

		//accessor
		$es4.$$public_accessor('inBufferSeek', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "inBufferSeek"'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "inBufferSeek"'));
		}));

		//accessor
		$es4.$$public_accessor('info', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "info"'));
		}), null);

		//accessor
		$es4.$$public_accessor('liveDelay', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "liveDelay"'));
		}), null);

		//accessor
		$es4.$$public_accessor('maxPauseBufferTime', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "maxPauseBufferTime"'));
		}), (function ($$$$pauseBufferTime)
		{
			//set default parameter values
			var pauseBufferTime = $es4.$$coerce($$$$pauseBufferTime, Number);

			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "maxPauseBufferTime"'));
		}));

		//accessor
		$es4.$$public_accessor('multicastAvailabilitySendToAll', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "multicastAvailabilitySendToAll"'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "multicastAvailabilitySendToAll"'));
		}));

		//accessor
		$es4.$$public_accessor('multicastAvailabilityUpdatePeriod', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "multicastAvailabilityUpdatePeriod"'));
		}), (function ($$$$seconds)
		{
			//set default parameter values
			var seconds = $es4.$$coerce($$$$seconds, Number);

			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "multicastAvailabilityUpdatePeriod"'));
		}));

		//accessor
		$es4.$$public_accessor('multicastFetchPeriod', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "multicastFetchPeriod"'));
		}), (function ($$$$seconds)
		{
			//set default parameter values
			var seconds = $es4.$$coerce($$$$seconds, Number);

			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "multicastFetchPeriod"'));
		}));

		//accessor
		$es4.$$public_accessor('multicastInfo', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "multicastInfo"'));
		}), null);

		//accessor
		$es4.$$public_accessor('multicastPushNeighborLimit', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "multicastPushNeighborLimit"'));
		}), (function ($$$$neighbors)
		{
			//set default parameter values
			var neighbors = $es4.$$coerce($$$$neighbors, Number);

			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "multicastPushNeighborLimit"'));
		}));

		//accessor
		$es4.$$public_accessor('multicastRelayMarginDuration', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "multicastRelayMarginDuration"'));
		}), (function ($$$$seconds)
		{
			//set default parameter values
			var seconds = $es4.$$coerce($$$$seconds, Number);

			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "multicastRelayMarginDuration"'));
		}));

		//accessor
		$es4.$$public_accessor('multicastWindowDuration', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "multicastWindowDuration"'));
		}), (function ($$$$seconds)
		{
			//set default parameter values
			var seconds = $es4.$$coerce($$$$seconds, Number);

			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "multicastWindowDuration"'));
		}));

		//accessor
		$es4.$$public_accessor('nearNonce', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "nearNonce"'));
		}), null);

		//accessor
		$es4.$$public_accessor('objectEncoding', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "objectEncoding"'));
		}), null);

		//accessor
		$es4.$$public_accessor('peerStreams', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "peerStreams"'));
		}), null);

		//accessor
		$es4.$$public_accessor('soundTransform', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '$_soundTransform');
		}), (function ($$$$soundTransform)
		{
			//set default parameter values
			var soundTransform = $es4.$$coerce($$$$soundTransform, SoundTransform);

			$es4.$$set($$thisp, $$this, $$thisp, '$_soundTransform', soundTransform, '=');
			$es4.$$set($$this, $$this, $$thisp, '$__domVideoView', 'volume', $es4.$$get(soundTransform, $$this, $$thisp, 'volume'), '=');
		}));

		//accessor
		$es4.$$public_accessor('time', $$thisp, (function ()
		{
			return $es4.$$call(Math, $$this, $$thisp, 'min', [$es4.$$get($$this, $$this, $$thisp, '$__domVideoView', 'currentTime'), $es4.$$get($$thisp, $$this, $$thisp, '$_duration')]);
		}), null);

		//accessor
		$es4.$$public_accessor('useHardwareDecoder', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "useHardwareDecoder"'));
		}), (function ($$$$v)
		{
			//set default parameter values
			var v = $es4.$$coerce($$$$v, Boolean);

			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "useHardwareDecoder"'));
		}));

		//accessor
		$es4.$$public_accessor('videoCodec', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "videoCodec"'));
		}), null);

		//accessor
		$es4.$$public_accessor('videoReliable', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "videoReliable"'));
		}), (function ($$$$reliable)
		{
			//set default parameter values
			var reliable = $es4.$$coerce($$$$reliable, Boolean);

			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "videoReliable"'));
		}));

		//accessor
		$es4.$$public_accessor('videoSampleAccess', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "videoSampleAccess"'));
		}), (function ($$$$reliable)
		{
			//set default parameter values
			var reliable = $es4.$$coerce($$$$reliable, Boolean);

			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "videoSampleAccess"'));
		}));

		//accessor
		$es4.$$public_accessor('videoStreamSettings', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "videoStreamSettings"'));
		}), (function ($$$$settings)
		{
			//set default parameter values
			var settings = $es4.$$coerce($$$$settings, VideoStreamSettings);

			throw $es4.$$primitive(new (Error)('NetStream: attempted call to an unimplemented function "videoStreamSettings"'));
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(NetStream, {EXTENDS:'flash.events.EventDispatcher'}, 'flash.net::NetStream');
})();
//flash.net.NetStream


//flash.ui.ContextMenuBuiltInItems
$es4.$$package('flash.ui').ContextMenuBuiltInItems = function () { throw new Error('Use of unimplemented class: ContextMenuBuiltInItems'); }
//flash.ui.ContextMenuBuiltInItems


//flash.events.HTTPStatusEvent
$es4.$$package('flash.events').HTTPStatusEvent = (function ()
{
	//imports
	var Event;
	var HTTPStatusEvent;

	//properties
	HTTPStatusEvent.HTTP_RESPONSE_STATUS = "httpResponseStatus";
	HTTPStatusEvent.HTTP_STATUS = "httpStatus";

	//class initializer
	HTTPStatusEvent.$$cinit = (function ()
	{
		HTTPStatusEvent.$$cinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;
	});

	function HTTPStatusEvent()
	{
		//initialize class if not initialized
		if (HTTPStatusEvent.$$cinit !== undefined) HTTPStatusEvent.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof HTTPStatusEvent) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], HTTPStatusEvent) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('_status', $$thisp, int);

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$type, $$$$bubbles, $$$$cancelable, $$$$status)
		{
			//set default parameter values
			var type = $es4.$$coerce($$$$type, String);
			var bubbles = (1 > arguments.length - 1) ? false : $es4.$$coerce($$$$bubbles, Boolean);
			var cancelable = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$cancelable, Boolean);
			var status = (3 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$status, int);

			$es4.$$super($$thisp).$$z(type, bubbles, cancelable);
			$es4.$$set($$thisp, $$this, $$thisp, '_status', status, '=');
		}));

		//method
		$es4.$$public_function('clone', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$primitive(new (HTTPStatusEvent)($es4.$$get($$this, $$this, $$thisp, 'type'), $es4.$$get($$this, $$this, $$thisp, 'bubbles'), $es4.$$get($$this, $$this, $$thisp, 'cancelable'), $es4.$$get($$thisp, $$this, $$thisp, '_status'))), Event);
		}));

		//method
		$es4.$$public_function('toString', $$thisp, (function ()
		{
			return $es4.$$call($$this, $$this, $$thisp, 'formatToString', ['HTTPStatusEvent', 'type', 'bubbles', 'cancelable', 'status']);
		}));

		//accessor
		$es4.$$public_accessor('responseHeaders', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('HTTPStatusEvent: attempted call to an unimplemented function "responseHeaders"'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Array);

			throw $es4.$$primitive(new (Error)('HTTPStatusEvent: attempted call to an unimplemented function "responseHeaders"'));
		}));

		//accessor
		$es4.$$public_accessor('responseURL', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('HTTPStatusEvent: attempted call to an unimplemented function "responseURL"'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, String);

			throw $es4.$$primitive(new (Error)('HTTPStatusEvent: attempted call to an unimplemented function "responseURL"'));
		}));

		//accessor
		$es4.$$public_accessor('status', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_status');
		}), null);

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(HTTPStatusEvent, {EXTENDS:'flash.events.Event'}, 'flash.events::HTTPStatusEvent');
})();
//flash.events.HTTPStatusEvent


//flash.errors.MemoryError
$es4.$$package('flash.errors').MemoryError = function () { throw new Error('Use of unimplemented class: MemoryError'); }
//flash.errors.MemoryError


//flash.display.FrameLabel
$es4.$$package('flash.display').FrameLabel = function () { throw new Error('Use of unimplemented class: FrameLabel'); }
//flash.display.FrameLabel


//flash.filters.ConvolutionFilter
$es4.$$package('flash.filters').ConvolutionFilter = function () { throw new Error('Use of unimplemented class: ConvolutionFilter'); }
//flash.filters.ConvolutionFilter


//flash.geom.Utils3D
$es4.$$package('flash.geom').Utils3D = function () { throw new Error('Use of unimplemented class: Utils3D'); }
//flash.geom.Utils3D


//flash.display.Scene
$es4.$$package('flash.display').Scene = function () { throw new Error('Use of unimplemented class: Scene'); }
//flash.display.Scene


//flash.ui.KeyboardType
$es4.$$package('flash.ui').KeyboardType = function () { throw new Error('Use of unimplemented class: KeyboardType'); }
//flash.ui.KeyboardType


//flash.events.DRMAuthenticationErrorEvent
$es4.$$package('flash.events').DRMAuthenticationErrorEvent = function () { throw new Error('Use of unimplemented class: DRMAuthenticationErrorEvent'); }
//flash.events.DRMAuthenticationErrorEvent


//flash.net.LocalConnection
$es4.$$package('flash.net').LocalConnection = function () { throw new Error('Use of unimplemented class: LocalConnection'); }
//flash.net.LocalConnection


//flash.ui.Keyboard
$es4.$$package('flash.ui').Keyboard = (function ()
{
	//properties
	Keyboard.A = 65;
	Keyboard.ALTERNATE = 18;
	Keyboard.AUDIO = 0x01000017;
	Keyboard.B = 66;
	Keyboard.BACK = 0x01000016;
	Keyboard.BACKQUOTE = 192;
	Keyboard.BACKSLASH = 220;
	Keyboard.BACKSPACE = 8;
	Keyboard.BLUE = 0x01000003;
	Keyboard.C = 67;
	Keyboard.CAPS_LOCK = 20;
	Keyboard.CHANNEL_DOWN = 0x01000005;
	Keyboard.CHANNEL_UP = 0x01000004;
	$es4.$$public_property('CharCodeStrings', Keyboard, Array);
	Keyboard.COMMA = 188;
	Keyboard.COMMAND = 15;
	Keyboard.CONTROL = 17;
	Keyboard.D = 68;
	Keyboard.DELETE = 46;
	Keyboard.DOWN = 40;
	Keyboard.DVR = 0x01000019;
	Keyboard.E = 69;
	Keyboard.END = 35;
	Keyboard.ENTER = 13;
	Keyboard.EQUAL = 187;
	Keyboard.ESCAPE = 27;
	Keyboard.EXIT = 0x01000015;
	Keyboard.F = 70;
	Keyboard.F1 = 112;
	Keyboard.F10 = 121;
	Keyboard.F11 = 122;
	Keyboard.F12 = 123;
	Keyboard.F13 = 124;
	Keyboard.F14 = 125;
	Keyboard.F15 = 126;
	Keyboard.F2 = 113;
	Keyboard.F3 = 114;
	Keyboard.F4 = 115;
	Keyboard.F5 = 116;
	Keyboard.F6 = 117;
	Keyboard.F7 = 118;
	Keyboard.F8 = 119;
	Keyboard.F9 = 120;
	Keyboard.FAST_FORWARD = 0x0100000A;
	Keyboard.G = 71;
	Keyboard.GREEN = 0x01000001;
	Keyboard.GUIDE = 0x01000014;
	Keyboard.H = 72;
	Keyboard.HELP = 0x0100001D;
	Keyboard.HOME = 36;
	Keyboard.I = 73;
	Keyboard.INFO = 0x01000013;
	Keyboard.INPUT = 0x0100001B;
	Keyboard.INSERT = 45;
	Keyboard.J = 74;
	Keyboard.K = 75;
	Keyboard.KEYNAME_BEGIN = "Begin";
	Keyboard.KEYNAME_BREAK = "Break";
	Keyboard.KEYNAME_CLEARDISPLAY = "ClrDsp";
	Keyboard.KEYNAME_CLEARLINE = "ClrLn";
	Keyboard.KEYNAME_DELETE = "Delete";
	Keyboard.KEYNAME_DELETECHAR = "DelChr";
	Keyboard.KEYNAME_DELETELINE = "DelLn";
	Keyboard.KEYNAME_DOWNARROW = "Down";
	Keyboard.KEYNAME_END = "End";
	Keyboard.KEYNAME_EXECUTE = "Exec";
	Keyboard.KEYNAME_F1 = "F1";
	Keyboard.KEYNAME_F10 = "F10";
	Keyboard.KEYNAME_F11 = "F11";
	Keyboard.KEYNAME_F12 = "F12";
	Keyboard.KEYNAME_F13 = "F13";
	Keyboard.KEYNAME_F14 = "F14";
	Keyboard.KEYNAME_F15 = "F15";
	Keyboard.KEYNAME_F16 = "F16";
	Keyboard.KEYNAME_F17 = "F17";
	Keyboard.KEYNAME_F18 = "F18";
	Keyboard.KEYNAME_F19 = "F19";
	Keyboard.KEYNAME_F2 = "F2";
	Keyboard.KEYNAME_F20 = "F20";
	Keyboard.KEYNAME_F21 = "F21";
	Keyboard.KEYNAME_F22 = "F22";
	Keyboard.KEYNAME_F23 = "F23";
	Keyboard.KEYNAME_F24 = "F24";
	Keyboard.KEYNAME_F25 = "F25";
	Keyboard.KEYNAME_F26 = "F26";
	Keyboard.KEYNAME_F27 = "F27";
	Keyboard.KEYNAME_F28 = "F28";
	Keyboard.KEYNAME_F29 = "F29";
	Keyboard.KEYNAME_F3 = "F3";
	Keyboard.KEYNAME_F30 = "F30";
	Keyboard.KEYNAME_F31 = "F31";
	Keyboard.KEYNAME_F32 = "F32";
	Keyboard.KEYNAME_F33 = "F33";
	Keyboard.KEYNAME_F34 = "F34";
	Keyboard.KEYNAME_F35 = "F35";
	Keyboard.KEYNAME_F4 = "F4";
	Keyboard.KEYNAME_F5 = "F5";
	Keyboard.KEYNAME_F6 = "F6";
	Keyboard.KEYNAME_F7 = "F7";
	Keyboard.KEYNAME_F8 = "F8";
	Keyboard.KEYNAME_F9 = "F9";
	Keyboard.KEYNAME_FIND = "Find";
	Keyboard.KEYNAME_HELP = "Help";
	Keyboard.KEYNAME_HOME = "Home";
	Keyboard.KEYNAME_INSERT = "Insert";
	Keyboard.KEYNAME_INSERTCHAR = "InsChr";
	Keyboard.KEYNAME_INSERTLINE = "InsLn";
	Keyboard.KEYNAME_LEFTARROW = "Left";
	Keyboard.KEYNAME_MENU = "Menu";
	Keyboard.KEYNAME_MODESWITCH = "ModeSw";
	Keyboard.KEYNAME_NEXT = "Next";
	Keyboard.KEYNAME_PAGEDOWN = "PgDn";
	Keyboard.KEYNAME_PAGEUP = "PgUp";
	Keyboard.KEYNAME_PAUSE = "Pause";
	Keyboard.KEYNAME_PREV = "Prev";
	Keyboard.KEYNAME_PRINT = "Print";
	Keyboard.KEYNAME_PRINTSCREEN = "PrntScrn";
	Keyboard.KEYNAME_REDO = "Redo";
	Keyboard.KEYNAME_RESET = "Reset";
	Keyboard.KEYNAME_RIGHTARROW = "Right";
	Keyboard.KEYNAME_SCROLLLOCK = "ScrlLck";
	Keyboard.KEYNAME_SELECT = "Select";
	Keyboard.KEYNAME_STOP = "Stop";
	Keyboard.KEYNAME_SYSREQ = "SysReq";
	Keyboard.KEYNAME_SYSTEM = "Sys";
	Keyboard.KEYNAME_UNDO = "Undo";
	Keyboard.KEYNAME_UPARROW = "Up";
	Keyboard.KEYNAME_USER = "User";
	Keyboard.L = 76;
	Keyboard.LAST = 0x01000011;
	Keyboard.LEFT = 37;
	Keyboard.LEFTBRACKET = 219;
	Keyboard.LIVE = 0x01000010;
	Keyboard.M = 77;
	Keyboard.MASTER_SHELL = 0x0100001E;
	Keyboard.MENU = 0x01000012;
	Keyboard.MINUS = 189;
	Keyboard.N = 78;
	Keyboard.NEXT = 0x0100000E;
	Keyboard.NUMBER_0 = 48;
	Keyboard.NUMBER_1 = 49;
	Keyboard.NUMBER_2 = 50;
	Keyboard.NUMBER_3 = 51;
	Keyboard.NUMBER_4 = 52;
	Keyboard.NUMBER_5 = 53;
	Keyboard.NUMBER_6 = 54;
	Keyboard.NUMBER_7 = 55;
	Keyboard.NUMBER_8 = 56;
	Keyboard.NUMBER_9 = 57;
	Keyboard.NUMPAD = 21;
	Keyboard.NUMPAD_0 = 96;
	Keyboard.NUMPAD_1 = 97;
	Keyboard.NUMPAD_2 = 98;
	Keyboard.NUMPAD_3 = 99;
	Keyboard.NUMPAD_4 = 100;
	Keyboard.NUMPAD_5 = 101;
	Keyboard.NUMPAD_6 = 102;
	Keyboard.NUMPAD_7 = 103;
	Keyboard.NUMPAD_8 = 104;
	Keyboard.NUMPAD_9 = 105;
	Keyboard.NUMPAD_ADD = 107;
	Keyboard.NUMPAD_DECIMAL = 110;
	Keyboard.NUMPAD_DIVIDE = 111;
	Keyboard.NUMPAD_ENTER = 108;
	Keyboard.NUMPAD_MULTIPLY = 106;
	Keyboard.NUMPAD_SUBTRACT = 109;
	Keyboard.O = 79;
	Keyboard.P = 80;
	Keyboard.PAGE_DOWN = 34;
	Keyboard.PAGE_UP = 33;
	Keyboard.PAUSE = 0x01000008;
	Keyboard.PERIOD = 190;
	Keyboard.PLAY = 0x01000007;
	Keyboard.PREVIOUS = 0x0100000F;
	Keyboard.Q = 81;
	Keyboard.QUOTE = 222;
	Keyboard.R = 82;
	Keyboard.RECORD = 0x01000006;
	Keyboard.RED = 0x01000000;
	Keyboard.REWIND = 0x0100000B;
	Keyboard.RIGHT = 39;
	Keyboard.RIGHTBRACKET = 221;
	Keyboard.S = 83;
	Keyboard.SEARCH = 0x0100001F;
	Keyboard.SEMICOLON = 186;
	Keyboard.SETUP = 0x0100001C;
	Keyboard.SHIFT = 16;
	Keyboard.SKIP_BACKWARD = 0x0100000D;
	Keyboard.SKIP_FORWARD = 0x0100000C;
	Keyboard.SLASH = 191;
	Keyboard.SPACE = 32;
	Keyboard.STOP = 0x01000009;
	Keyboard.STRING_BEGIN = "";
	Keyboard.STRING_BREAK = "";
	Keyboard.STRING_CLEARDISPLAY = "";
	Keyboard.STRING_CLEARLINE = "";
	Keyboard.STRING_DELETE = "";
	Keyboard.STRING_DELETECHAR = "";
	Keyboard.STRING_DELETELINE = "";
	Keyboard.STRING_DOWNARROW = "";
	Keyboard.STRING_END = "";
	Keyboard.STRING_EXECUTE = "";
	Keyboard.STRING_F1 = "";
	Keyboard.STRING_F10 = "";
	Keyboard.STRING_F11 = "";
	Keyboard.STRING_F12 = "";
	Keyboard.STRING_F13 = "";
	Keyboard.STRING_F14 = "";
	Keyboard.STRING_F15 = "";
	Keyboard.STRING_F16 = "";
	Keyboard.STRING_F17 = "";
	Keyboard.STRING_F18 = "";
	Keyboard.STRING_F19 = "";
	Keyboard.STRING_F2 = "";
	Keyboard.STRING_F20 = "";
	Keyboard.STRING_F21 = "";
	Keyboard.STRING_F22 = "";
	Keyboard.STRING_F23 = "";
	Keyboard.STRING_F24 = "";
	Keyboard.STRING_F25 = "";
	Keyboard.STRING_F26 = "";
	Keyboard.STRING_F27 = "";
	Keyboard.STRING_F28 = "";
	Keyboard.STRING_F29 = "";
	Keyboard.STRING_F3 = "";
	Keyboard.STRING_F30 = "";
	Keyboard.STRING_F31 = "";
	Keyboard.STRING_F32 = "";
	Keyboard.STRING_F33 = "";
	Keyboard.STRING_F34 = "";
	Keyboard.STRING_F35 = "";
	Keyboard.STRING_F4 = "";
	Keyboard.STRING_F5 = "";
	Keyboard.STRING_F6 = "";
	Keyboard.STRING_F7 = "";
	Keyboard.STRING_F8 = "";
	Keyboard.STRING_F9 = "";
	Keyboard.STRING_FIND = "";
	Keyboard.STRING_HELP = "";
	Keyboard.STRING_HOME = "";
	Keyboard.STRING_INSERT = "";
	Keyboard.STRING_INSERTCHAR = "";
	Keyboard.STRING_INSERTLINE = "";
	Keyboard.STRING_LEFTARROW = "";
	Keyboard.STRING_MENU = "";
	Keyboard.STRING_MODESWITCH = "";
	Keyboard.STRING_NEXT = "";
	Keyboard.STRING_PAGEDOWN = "";
	Keyboard.STRING_PAGEUP = "";
	Keyboard.STRING_PAUSE = "";
	Keyboard.STRING_PREV = "";
	Keyboard.STRING_PRINT = "";
	Keyboard.STRING_PRINTSCREEN = "";
	Keyboard.STRING_REDO = "";
	Keyboard.STRING_RESET = "";
	Keyboard.STRING_RIGHTARROW = "";
	Keyboard.STRING_SCROLLLOCK = "";
	Keyboard.STRING_SELECT = "";
	Keyboard.STRING_STOP = "";
	Keyboard.STRING_SYSREQ = "";
	Keyboard.STRING_SYSTEM = "";
	Keyboard.STRING_UNDO = "";
	Keyboard.STRING_UPARROW = "";
	Keyboard.STRING_USER = "";
	Keyboard.SUBTITLE = 0x01000018;
	Keyboard.T = 84;
	Keyboard.TAB = 9;
	Keyboard.U = 85;
	Keyboard.UP = 38;
	Keyboard.V = 86;
	Keyboard.VOD = 0x0100001A;
	Keyboard.W = 87;
	Keyboard.X = 88;
	Keyboard.Y = 89;
	Keyboard.YELLOW = 0x01000002;
	Keyboard.Z = 90;

	//class initializer
	Keyboard.$$cinit = (function ()
	{
		Keyboard.$$cinit = undefined;

	});

	//method
	$es4.$$public_function('isAccessible', Keyboard, (function ()
	{
		if (Keyboard.$$cinit !== undefined) Keyboard.$$cinit();

		throw $es4.$$primitive(new (Error)('Keyboard: attempted call to an unimplemented function "isAccessible"'));
	}));

	//accessor
	$es4.$$public_accessor('capsLock', Keyboard, (function ()
	{
		if (Keyboard.$$cinit !== undefined) Keyboard.$$cinit();

		throw $es4.$$primitive(new (Error)('Keyboard: attempted call to an unimplemented function "capsLock"'));
	}), null);

	//accessor
	$es4.$$public_accessor('hasVirtualKeyboard', Keyboard, (function ()
	{
		if (Keyboard.$$cinit !== undefined) Keyboard.$$cinit();

		throw $es4.$$primitive(new (Error)('Keyboard: attempted call to an unimplemented function "hasVirtualKeyboard"'));
	}), null);

	//accessor
	$es4.$$public_accessor('numLock', Keyboard, (function ()
	{
		if (Keyboard.$$cinit !== undefined) Keyboard.$$cinit();

		throw $es4.$$primitive(new (Error)('Keyboard: attempted call to an unimplemented function "numLock"'));
	}), null);

	//accessor
	$es4.$$public_accessor('physicalKeyboardType', Keyboard, (function ()
	{
		if (Keyboard.$$cinit !== undefined) Keyboard.$$cinit();

		throw $es4.$$primitive(new (Error)('Keyboard: attempted call to an unimplemented function "physicalKeyboardType"'));
	}), null);

	function Keyboard()
	{
		//initialize class if not initialized
		if (Keyboard.$$cinit !== undefined) Keyboard.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof Keyboard) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Keyboard) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Keyboard: attempted call to an unimplemented constructor'));
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(Keyboard, null, 'flash.ui::Keyboard');
})();
//flash.ui.Keyboard


//flash.errors.IllegalOperationError
$es4.$$package('flash.errors').IllegalOperationError = function () { throw new Error('Use of unimplemented class: IllegalOperationError'); }
//flash.errors.IllegalOperationError


//flash.net.XMLSocket
$es4.$$package('flash.net').XMLSocket = (function ()
{
	//imports
	var DataEvent;
	var Event;
	var EventDispatcher;
	var IOErrorEvent;
	var ProgressEvent;
	var SecurityErrorEvent;
	var Socket;

	//class initializer
	XMLSocket.$$cinit = (function ()
	{
		XMLSocket.$$cinit = undefined;

		//initialize imports
		DataEvent = $es4.$$['flash.events'].DataEvent;
		Event = $es4.$$['flash.events'].Event;
		EventDispatcher = $es4.$$['flash.events'].EventDispatcher;
		IOErrorEvent = $es4.$$['flash.events'].IOErrorEvent;
		ProgressEvent = $es4.$$['flash.events'].ProgressEvent;
		SecurityErrorEvent = $es4.$$['flash.events'].SecurityErrorEvent;
		Socket = $es4.$$['flash.net'].Socket;
	});

	function XMLSocket()
	{
		//initialize class if not initialized
		if (XMLSocket.$$cinit !== undefined) XMLSocket.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof XMLSocket) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], XMLSocket) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('_socket', $$thisp, Socket);

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$host, $$$$port)
		{
			//set default parameter values
			var host = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$host, String);
			var port = (1 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$port, int);

			$es4.$$super($$thisp).$$z();

			$es4.$$set($$thisp, $$this, $$thisp, '_socket', $es4.$$primitive(new (Socket)()), '=');
			if (host)
			{
				$es4.$$call($$this, $$this, $$thisp, 'connect', [host, port]);
			}
		}));

		//method
		$es4.$$public_function('close', $$thisp, (function ()
		{
			var timeout = $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '_socket', 'timeout'), int);
			$es4.$$call($$thisp, $$this, $$thisp, '_socket', 'removeEventListener', [$es4.$$get(ProgressEvent, $$this, $$thisp, 'SOCKET_DATA'), $es4.$$get($$thisp, $$this, $$thisp, 'onSocketDataEvent')]);
			$es4.$$call($$thisp, $$this, $$thisp, '_socket', 'removeEventListener', [$es4.$$get(SecurityErrorEvent, $$this, $$thisp, 'SECURITY_ERROR'), $es4.$$get($$thisp, $$this, $$thisp, 'onSecurityErrorEvent')]);
			$es4.$$call($$thisp, $$this, $$thisp, '_socket', 'removeEventListener', [$es4.$$get(IOErrorEvent, $$this, $$thisp, 'IO_ERROR'), $es4.$$get($$thisp, $$this, $$thisp, 'onIOErrorEvent')]);
			$es4.$$call($$thisp, $$this, $$thisp, '_socket', 'removeEventListener', [$es4.$$get(Event, $$this, $$thisp, 'CONNECT'), $es4.$$get($$thisp, $$this, $$thisp, 'onConnectEvent')]);
			$es4.$$call($$thisp, $$this, $$thisp, '_socket', 'removeEventListener', [$es4.$$get(Event, $$this, $$thisp, 'CLOSE'), $es4.$$get($$thisp, $$this, $$thisp, 'onCloseEvent')]);
			$es4.$$call($$thisp, $$this, $$thisp, '_socket', 'close', $es4.$$EMPTY_ARRAY);
			$es4.$$set($$thisp, $$this, $$thisp, '_socket', $es4.$$primitive(new (Socket)()), '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_socket', 'timeout', timeout, '=');
		}));

		//method
		$es4.$$public_function('connect', $$thisp, (function ($$$$host, $$$$port)
		{
			//set default parameter values
			var host = $es4.$$coerce($$$$host, String);
			var port = $es4.$$coerce($$$$port, int);

			if ($es4.$$call($$thisp, $$this, $$thisp, '_socket', 'hasEventListener', [$es4.$$get(Event, $$this, $$thisp, 'CONNECT')]))
			{
				throw $es4.$$primitive(new (Error)('socket connect already called'));
			}
			$es4.$$call($$thisp, $$this, $$thisp, '_socket', 'connect', [host, port]);
			$es4.$$call($$thisp, $$this, $$thisp, '_socket', 'addEventListener', [$es4.$$get(ProgressEvent, $$this, $$thisp, 'SOCKET_DATA'), $es4.$$get($$thisp, $$this, $$thisp, 'onSocketDataEvent')]);
			$es4.$$call($$thisp, $$this, $$thisp, '_socket', 'addEventListener', [$es4.$$get(SecurityErrorEvent, $$this, $$thisp, 'SECURITY_ERROR'), $es4.$$get($$thisp, $$this, $$thisp, 'onSecurityErrorEvent')]);
			$es4.$$call($$thisp, $$this, $$thisp, '_socket', 'addEventListener', [$es4.$$get(IOErrorEvent, $$this, $$thisp, 'IO_ERROR'), $es4.$$get($$thisp, $$this, $$thisp, 'onIOErrorEvent')]);
			$es4.$$call($$thisp, $$this, $$thisp, '_socket', 'addEventListener', [$es4.$$get(Event, $$this, $$thisp, 'CONNECT'), $es4.$$get($$thisp, $$this, $$thisp, 'onConnectEvent')]);
			$es4.$$call($$thisp, $$this, $$thisp, '_socket', 'addEventListener', [$es4.$$get(Event, $$this, $$thisp, 'CLOSE'), $es4.$$get($$thisp, $$this, $$thisp, 'onCloseEvent')]);
		}));

		//method
		$es4.$$private_function('onSocketDataEvent', $$thisp, (function ($$$$event)
		{
			//set default parameter values
			var event = $es4.$$coerce($$$$event, ProgressEvent);

			var data = $es4.$$call($$thisp, $$this, $$thisp, '_socket', 'readUTFBytes', [$es4.$$get($$thisp, $$this, $$thisp, '_socket', 'bytesAvailable')]);
			$es4.$$call($$thisp, $$this, $$thisp, '_socket', 'readByte', $es4.$$EMPTY_ARRAY);
			$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (DataEvent)($es4.$$get(DataEvent, $$this, $$thisp, 'DATA'), false, false, data))]);
		}));

		//method
		$es4.$$private_function('onSecurityErrorEvent', $$thisp, (function ($$$$event)
		{
			//set default parameter values
			var event = $es4.$$coerce($$$$event, SecurityErrorEvent);

			$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (SecurityErrorEvent)($es4.$$get(SecurityErrorEvent, $$this, $$thisp, 'SECURITY_ERROR'), false, false, "XMLSOCKET could not connect to server."))]);
		}));

		//method
		$es4.$$private_function('onIOErrorEvent', $$thisp, (function ($$$$event)
		{
			//set default parameter values
			var event = $es4.$$coerce($$$$event, IOErrorEvent);

			$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (IOErrorEvent)($es4.$$get(IOErrorEvent, $$this, $$thisp, 'IO_ERROR'), false, false, "XMLSOCKET trouble sending and or receiving data."))]);
		}));

		//method
		$es4.$$private_function('onConnectEvent', $$thisp, (function ($$$$event)
		{
			//set default parameter values
			var event = $es4.$$coerce($$$$event, Event);

			$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (Event)($es4.$$get(Event, $$this, $$thisp, 'CONNECT')))]);
		}));

		//method
		$es4.$$private_function('onCloseEvent', $$thisp, (function ($$$$event)
		{
			//set default parameter values
			var event = $es4.$$coerce($$$$event, Event);

			$es4.$$call($$this, $$this, $$thisp, 'close', $es4.$$EMPTY_ARRAY);
			$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (Event)($es4.$$get(Event, $$this, $$thisp, 'CLOSE')))]);
		}));

		//method
		$es4.$$public_function('send', $$thisp, (function ($$$$object)
		{
			//set default parameter values
			var object = $$$$object;

			$es4.$$call($$thisp, $$this, $$thisp, '_socket', 'writeUTFBytes', [$es4.$$call(object, $$this, $$thisp, 'toString', $es4.$$EMPTY_ARRAY)]);
			$es4.$$call($$thisp, $$this, $$thisp, '_socket', 'writeByte', [0]);
		}));

		//accessor
		$es4.$$public_accessor('connected', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_socket', 'connected');
		}), null);

		//accessor
		$es4.$$public_accessor('timeout', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '_socket', 'timeout'), int);
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, int);

			$es4.$$set($$thisp, $$this, $$thisp, '_socket', 'timeout', value, '=');
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(XMLSocket, {EXTENDS:'flash.events.EventDispatcher'}, 'flash.net::XMLSocket');
})();
//flash.net.XMLSocket


//flash.filters.ShaderFilter
$es4.$$package('flash.filters').ShaderFilter = function () { throw new Error('Use of unimplemented class: ShaderFilter'); }
//flash.filters.ShaderFilter


//flash.net.drm.VoucherAccessInfo
$es4.$$package('flash.net.drm').VoucherAccessInfo = function () { throw new Error('Use of unimplemented class: VoucherAccessInfo'); }
//flash.net.drm.VoucherAccessInfo


//flash.media.StageVideo
$es4.$$package('flash.media').StageVideo = function () { throw new Error('Use of unimplemented class: StageVideo'); }
//flash.media.StageVideo


//flash.sampler.DeleteObjectSample
$es4.$$package('flash.sampler').DeleteObjectSample = function () { throw new Error('Use of unimplemented class: DeleteObjectSample'); }
//flash.sampler.DeleteObjectSample


//flash.text.TextSnapshot
$es4.$$package('flash.text').TextSnapshot = function () { throw new Error('Use of unimplemented class: TextSnapshot'); }
//flash.text.TextSnapshot


//flash.events.FullScreenEvent
$es4.$$package('flash.events').FullScreenEvent = function () { throw new Error('Use of unimplemented class: FullScreenEvent'); }
//flash.events.FullScreenEvent


//flash.filters.GlowFilter
$es4.$$package('flash.filters').GlowFilter = function () { throw new Error('Use of unimplemented class: GlowFilter'); }
//flash.filters.GlowFilter


//flash.net.NetGroupSendMode
$es4.$$package('flash.net').NetGroupSendMode = function () { throw new Error('Use of unimplemented class: NetGroupSendMode'); }
//flash.net.NetGroupSendMode


//flash.net.FileReference
$es4.$$package('flash.net').FileReference = function () { throw new Error('Use of unimplemented class: FileReference'); }
//flash.net.FileReference


//flash.text.engine.TextBlock
$es4.$$package('flash.text.engine').TextBlock = function () { throw new Error('Use of unimplemented class: TextBlock'); }
//flash.text.engine.TextBlock


//flash.display.GraphicsSolidFill
$es4.$$package('flash.display').GraphicsSolidFill = function () { throw new Error('Use of unimplemented class: GraphicsSolidFill'); }
//flash.display.GraphicsSolidFill


//flash.display.BitmapDataChannel
$es4.$$package('flash.display').BitmapDataChannel = function () { throw new Error('Use of unimplemented class: BitmapDataChannel'); }
//flash.display.BitmapDataChannel


//flash.globalization.NumberFormatter
$es4.$$package('flash.globalization').NumberFormatter = function () { throw new Error('Use of unimplemented class: NumberFormatter'); }
//flash.globalization.NumberFormatter


//flash.system.IME
$es4.$$package('flash.system').IME = function () { throw new Error('Use of unimplemented class: IME'); }
//flash.system.IME


//flash.net.drm.AuthenticationMethod
$es4.$$package('flash.net.drm').AuthenticationMethod = function () { throw new Error('Use of unimplemented class: AuthenticationMethod'); }
//flash.net.drm.AuthenticationMethod


//flash.display.NativeMenuItem
$es4.$$package('flash.display').NativeMenuItem = function () { throw new Error('Use of unimplemented class: NativeMenuItem'); }
//flash.display.NativeMenuItem


//flash.text.engine.JustificationStyle
$es4.$$package('flash.text.engine').JustificationStyle = function () { throw new Error('Use of unimplemented class: JustificationStyle'); }
//flash.text.engine.JustificationStyle


//flash.display.GraphicsPathCommand
$es4.$$package('flash.display').GraphicsPathCommand = function () { throw new Error('Use of unimplemented class: GraphicsPathCommand'); }
//flash.display.GraphicsPathCommand


//flash.events.ProgressEvent
$es4.$$package('flash.events').ProgressEvent = (function ()
{
	//imports
	var Event;
	var ProgressEvent;

	//properties
	ProgressEvent.PROGRESS = "progress";
	ProgressEvent.SOCKET_DATA = "socketData";

	//class initializer
	ProgressEvent.$$cinit = (function ()
	{
		ProgressEvent.$$cinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;
	});

	function ProgressEvent()
	{
		//initialize class if not initialized
		if (ProgressEvent.$$cinit !== undefined) ProgressEvent.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof ProgressEvent) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], ProgressEvent) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('_bytesLoaded', $$thisp, Number);
		$es4.$$private_property('_bytesTotal', $$thisp, Number);

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$type, $$$$bubbles, $$$$cancelable, $$$$bytesLoaded, $$$$bytesTotal)
		{
			//set default parameter values
			var type = $es4.$$coerce($$$$type, String);
			var bubbles = (1 > arguments.length - 1) ? false : $es4.$$coerce($$$$bubbles, Boolean);
			var cancelable = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$cancelable, Boolean);
			var bytesLoaded = (3 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$bytesLoaded, Number);
			var bytesTotal = (4 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$bytesTotal, Number);

			$es4.$$super($$thisp).$$z(type, bubbles, cancelable);
			$es4.$$set($$thisp, $$this, $$thisp, '_bytesLoaded', bytesLoaded, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_bytesTotal', bytesTotal, '=');
		}));

		//method
		$es4.$$public_function('clone', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$primitive(new (ProgressEvent)($es4.$$get($$this, $$this, $$thisp, 'type'), $es4.$$get($$this, $$this, $$thisp, 'bubbles'), $es4.$$get($$this, $$this, $$thisp, 'cancelable'), $es4.$$get($$this, $$this, $$thisp, 'bytesLoaded'), $es4.$$get($$this, $$this, $$thisp, 'bytesTotal'))), Event);
		}));

		//method
		$es4.$$public_function('toString', $$thisp, (function ()
		{
			return $es4.$$call($$this, $$this, $$thisp, 'formatToString', ['ProgressEvent', 'type', 'bubbles', 'cancelable', 'bytesLoaded', 'bytesTotal']);
		}));

		//accessor
		$es4.$$public_accessor('bytesLoaded', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_bytesLoaded');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			$es4.$$set($$thisp, $$this, $$thisp, '_bytesLoaded', value, '=');
		}));

		//accessor
		$es4.$$public_accessor('bytesTotal', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_bytesTotal');
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			$es4.$$set($$thisp, $$this, $$thisp, '_bytesTotal', value, '=');
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(ProgressEvent, {EXTENDS:'flash.events.Event'}, 'flash.events::ProgressEvent');
})();
//flash.events.ProgressEvent


//flash.net.URLLoader
$es4.$$package('flash.net').URLLoader = (function ()
{
	//imports
	var Event;
	var EventDispatcher;
	var HTTPStatusEvent;
	var IOErrorEvent;
	var ProgressEvent;
	var ByteArray;
	var Browser;
	var URLRequest;

	//class initializer
	URLLoader.$$cinit = (function ()
	{
		URLLoader.$$cinit = undefined;

		//initialize imports
		Event = $es4.$$['flash.events'].Event;
		EventDispatcher = $es4.$$['flash.events'].EventDispatcher;
		HTTPStatusEvent = $es4.$$['flash.events'].HTTPStatusEvent;
		IOErrorEvent = $es4.$$['flash.events'].IOErrorEvent;
		ProgressEvent = $es4.$$['flash.events'].ProgressEvent;
		ByteArray = $es4.$$['flash.utils'].ByteArray;
		Browser = $es4.$$['browser'].Browser;
		URLRequest = $es4.$$['flash.net'].URLRequest;
	});

	function URLLoader()
	{
		//initialize class if not initialized
		if (URLLoader.$$cinit !== undefined) URLLoader.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof URLLoader) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], URLLoader) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('_xmlHttpRequest', $$thisp, Object);
		$es4.$$public_property('bytesLoaded', $$thisp, uint);
		$es4.$$public_property('bytesTotal', $$thisp, uint);
		$es4.$$public_property('data', $$thisp);
		$es4.$$public_property('dataFormat', $$thisp, String);

		//initializer
		$es4.$$iinit($$thisp, (function ()
		{
			//initialize properties
			$es4.$$set($$this, $$this, $$thisp, 'dataFormat', 'text', '=');
		}));

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$request)
		{
			//set default parameter values
			var request = (0 > arguments.length - 1) ? null : $es4.$$coerce($$$$request, URLRequest);

			$es4.$$super($$thisp).$$z();
			if (request)
			{
				$es4.$$call($$this, $$this, $$thisp, 'load', [request]);
			}
		}));

		//method
		$es4.$$public_function('load', $$thisp, (function ($$$$request)
		{
			//set default parameter values
			var request = $es4.$$coerce($$$$request, URLRequest);

			if (!request || !$es4.$$get(request, $$this, $$thisp, 'url'))
			{
				throw $es4.$$primitive(new (TypeError)('request or request.url is null'));
			}
			var dataFormat = $es4.$$coerce($es4.$$get($$this, $$this, $$thisp, 'dataFormat'), String);
			var a = $es4.$$call(document, $$this, $$thisp, 'createElement', ['a']);
			$es4.$$set(a, $$this, $$thisp, 'href', $es4.$$get(request, $$this, $$thisp, 'url'), '=');
			var parts = $es4.$$coerce($es4.$$call(a, $$this, $$thisp, 'pathname', 'split', ['.']), Array);
			var suffix = $es4.$$coerce($es4.$$call($es4.$$call(parts, $$this, $$thisp, 'pop', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'toLowerCase', $es4.$$EMPTY_ARRAY), String);
			if (suffix == 'js' && $es4.$$get(window, $$this, $$thisp, 'loaderInfoParams') && (!$es4.$$get(window, $$this, $$thisp, 'loaderInfoParams', 'debug') && !$es4.$$get(window, $$this, $$thisp, 'loaderInfoParams', 'trace')))
			{
				$es4.$$call(parts, $$this, $$thisp, 'push', ['min']);
				$es4.$$call(parts, $$this, $$thisp, 'push', ['js']);
				$es4.$$set(a, $$this, $$thisp, 'pathname', $es4.$$call(parts, $$this, $$thisp, 'join', ['.']), '=');
			}
			var src = null;
			var regex = /^(?:\/|[a-z]+:\/\/)/;
			if ($es4.$$call(regex, $$this, $$thisp, 'test', [$es4.$$get(request, $$this, $$thisp, 'url')]))
			{
				src = $es4.$$coerce($es4.$$get(a, $$this, $$thisp, 'href'), String);
			}
			else
			{
				var location = $es4.$$get(window, $$this, $$thisp, 'location');
				parts = $es4.$$coerce($es4.$$call(location, $$this, $$thisp, 'pathname', 'split', ['/']), Array);
				$es4.$$call(parts, $$this, $$thisp, 'pop', $es4.$$EMPTY_ARRAY);
				var slocation = $es4.$$call(parts, $$this, $$thisp, 'join', ['/']);
				src = $es4.$$coerce(($es4.$$call(a, $$this, $$thisp, 'pathname', 'indexOf', [slocation]) == -1) ? ($es4.$$get(location, $$this, $$thisp, 'pathname') + '/../' + $es4.$$get(a, $$this, $$thisp, 'pathname') + $es4.$$get(a, $$this, $$thisp, 'search') + $es4.$$get(a, $$this, $$thisp, 'hash')) : $es4.$$get(a, $$this, $$thisp, 'href'), String);
			}
			$es4.$$set($$thisp, $$this, $$thisp, '_xmlHttpRequest', $es4.$$call(Browser, $$this, $$thisp, 'getNewXMLHttpRequest', $es4.$$EMPTY_ARRAY), '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_xmlHttpRequest', 'onload', onLoad, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_xmlHttpRequest', 'onprogress', onProgress, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_xmlHttpRequest', 'onerror', onError, '=');
			$es4.$$call($$thisp, $$this, $$thisp, '_xmlHttpRequest', 'open', [$es4.$$get(request, $$this, $$thisp, 'method'), src, true]);
			if (dataFormat == 'text')
			{
				$es4.$$call($$thisp, $$this, $$thisp, '_xmlHttpRequest', 'overrideMimeType', ['text/plain']);
			}
			else
			{
				$es4.$$set($$thisp, $$this, $$thisp, '_xmlHttpRequest', 'responseType', 'arraybuffer', '=');
			}
			var requestdata = $es4.$$get(request, $$this, $$thisp, 'data');
			if (requestdata && $es4.$$is(requestdata, ByteArray))
			{
				requestdata = $es4.$$primitive(new ($es4.$$get(window, $$this, $$thisp, 'Uint8Array'))($es4.$$call(($es4.$$as($es4.$$get($$this, $$this, $$thisp, 'data'), ByteArray)), $$this, $$thisp, '$__getArrayBuffer', $es4.$$EMPTY_ARRAY)));
			}
			$es4.$$call($$thisp, $$this, $$thisp, '_xmlHttpRequest', 'send', [requestdata]);

			function onLoad($$$$event) 
			{
				//set default parameter values
				var event = $es4.$$coerce($$$$event, Object);

				if (!$es4.$$get($$thisp, $$this, $$thisp, '_xmlHttpRequest'))
				{
					return;
				}
				$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (HTTPStatusEvent)($es4.$$get(HTTPStatusEvent, $$this, $$thisp, 'HTTP_STATUS'), false, false, $es4.$$get($$thisp, $$this, $$thisp, '_xmlHttpRequest', 'status')))]);
				if (dataFormat == 'text')
				{
					$es4.$$set($$this, $$this, $$thisp, 'data', $es4.$$get($$thisp, $$this, $$thisp, '_xmlHttpRequest', 'responseText'), '=');
				}
				else
				{
					var byteArray = $es4.$$primitive(new (ByteArray)());
					$es4.$$call(byteArray, $$this, $$thisp, '$__setArrayBuffer', [$es4.$$get($$thisp, $$this, $$thisp, '_xmlHttpRequest', 'response')]);
					$es4.$$set($$this, $$this, $$thisp, 'data', byteArray, '=');
				}
				$es4.$$set($$thisp, $$this, $$thisp, '_xmlHttpRequest', 'onprogress', null, '=');
				$es4.$$set($$thisp, $$this, $$thisp, '_xmlHttpRequest', 'onload', null, '=');
				$es4.$$set($$thisp, $$this, $$thisp, '_xmlHttpRequest', 'onerror', null, '=');
				$es4.$$set($$thisp, $$this, $$thisp, '_xmlHttpRequest', null, '=');
				$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (Event)($es4.$$get(Event, $$this, $$thisp, 'COMPLETE')))]);
			}
;

			function onProgress($$$$event) 
			{
				//set default parameter values
				var event = $es4.$$coerce($$$$event, Object);

				if (!$es4.$$get($$thisp, $$this, $$thisp, '_xmlHttpRequest'))
				{
					return;
				}
				if (!$es4.$$get(event, $$this, $$thisp, 'lengthComputable'))
				{
					return;
				}
				$es4.$$set($$this, $$this, $$thisp, 'bytesLoaded', $es4.$$get(event, $$this, $$thisp, 'loaded'), '=');
				$es4.$$set($$this, $$this, $$thisp, 'bytesTotal', $es4.$$get(event, $$this, $$thisp, 'total'), '=');
				$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (ProgressEvent)($es4.$$get(ProgressEvent, $$this, $$thisp, 'PROGRESS'), false, false, $es4.$$get($$this, $$this, $$thisp, 'bytesLoaded'), $es4.$$get($$this, $$this, $$thisp, 'bytesTotal')))]);
			}
;

			function onError($$$$event) 
			{
				//set default parameter values
				var event = $es4.$$coerce($$$$event, Object);

				if (!$es4.$$get($$thisp, $$this, $$thisp, '_xmlHttpRequest'))
				{
					return;
				}
				$es4.$$call($$this, $$this, $$thisp, 'close', $es4.$$EMPTY_ARRAY);
				$es4.$$call($$this, $$this, $$thisp, 'dispatchEvent', [$es4.$$primitive(new (IOErrorEvent)($es4.$$get(IOErrorEvent, $$this, $$thisp, 'IO_ERROR'), false, false, $es4.$$get(event, $$this, $$thisp, 'error')))]);
			}
;
		}));

		//method
		$es4.$$public_function('close', $$thisp, (function ()
		{
			$es4.$$set($$this, $$this, $$thisp, 'bytesLoaded', 0, '=');
			$es4.$$set($$this, $$this, $$thisp, 'bytesTotal', 0, '=');
			if (!$es4.$$get($$thisp, $$this, $$thisp, '_xmlHttpRequest'))
			{
				return;
			}
			$es4.$$set($$thisp, $$this, $$thisp, '_xmlHttpRequest', 'onload', null, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_xmlHttpRequest', 'onprogress', null, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_xmlHttpRequest', 'onerror', null, '=');
			$es4.$$call($$thisp, $$this, $$thisp, '_xmlHttpRequest', 'abort', $es4.$$EMPTY_ARRAY);
			$es4.$$set($$thisp, $$this, $$thisp, '_xmlHttpRequest', null, '=');
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(URLLoader, {EXTENDS:'flash.events.EventDispatcher'}, 'flash.net::URLLoader');
})();
//flash.net.URLLoader


//flash.media.Video
$es4.$$package('flash.media').Video = (function ()
{
	//imports
	var DisplayObject;
	var Event;
	var Camera;
	var NetStream;

	//class initializer
	Video.$$cinit = (function ()
	{
		Video.$$cinit = undefined;

		//initialize imports
		DisplayObject = $es4.$$['flash.display'].DisplayObject;
		Event = $es4.$$['flash.events'].Event;
		Camera = $es4.$$['flash.media'].Camera;
		NetStream = $es4.$$['flash.net'].NetStream;
	});

	function Video()
	{
		//initialize class if not initialized
		if (Video.$$cinit !== undefined) Video.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof Video) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Video) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('$_netStream', $$thisp, NetStream);
		$es4.$$private_property('$_domVideoView', $$thisp, Object);
		$es4.$$private_property('$_properties', $$thisp);

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$width, $$$$height)
		{
			//set default parameter values
			var width = (0 > arguments.length - 1) ? 320 : $es4.$$coerce($$$$width, int);
			var height = (1 > arguments.length - 1) ? 240 : $es4.$$coerce($$$$height, int);

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties') === undefined)
			{
				$es4.$$call($$this, $$this, $$thisp, '$__properties', [{}]);
			}
			$es4.$$super($$thisp).$$z();
			$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_setExplicitBounds', [width, height]);
		}));

		//method
		$es4.$$public_function('$__properties', $$thisp, (function ($$$$object)
		{
			//set default parameter values
			var object = (0 > arguments.length - 1) ? null : $$$$object;

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_properties') === undefined)
			{
				object = $es4.$$call($es4.$$super($$thisp), $$this, $$thisp, '$__properties', [object]);
				$es4.$$set(object, $$this, $$thisp, 'VideoScope', {}, '=');
				return $es4.$$set($$thisp, $$this, $$thisp, '$_properties', object, '=');
			}
			return $es4.$$get($$thisp, $$this, $$thisp, '$_properties');
		}));

		//method
		$es4.$$public_function('$__notify', $$thisp, (function ($$$$name, $$$$args)
		{
			//set default parameter values
			var name = $es4.$$coerce($$$$name, String);
			var args = $$$$args;

			if (name === 'visibilityChange' && $es4.$$get($$thisp, $$this, $$thisp, '$_domVideoView') && $es4.$$get($$thisp, $$this, $$thisp, '$_netStream'))
			{
				if (args)
				{
					if (!$es4.$$get($$thisp, $$this, $$thisp, '$_domVideoView', 'paused'))
					{
						$es4.$$set($$thisp, $$this, $$thisp, '$_netStream', '$__suspended', true, '=');
						$es4.$$call($$thisp, $$this, $$thisp, '$_domVideoView', 'pause', $es4.$$EMPTY_ARRAY);
					}
				}
				else
				{
					if ($es4.$$get($$thisp, $$this, $$thisp, '$_netStream', '$__suspended'))
					{
						$es4.$$set($$thisp, $$this, $$thisp, '$_netStream', '$__suspended', false, '=');
						$es4.$$call($$thisp, $$this, $$thisp, '$_domVideoView', 'play', $es4.$$EMPTY_ARRAY);
					}
				}
			}
			$es4.$$call($es4.$$super($$thisp), $$this, $$thisp, '$__notify', [name, args]);
		}));

		//method
		$es4.$$protected_function('$_applySize', $$thisp, (function ()
		{
			if (!$es4.$$get($$thisp, $$this, $$thisp, '$_domVideoView'))
			{
				return;
			}
			$es4.$$call($$thisp, $$this, $$thisp, '$_domVideoView', 'setAttribute', ['width', $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_width') + 'px']);
			$es4.$$call($$thisp, $$this, $$thisp, '$_domVideoView', 'setAttribute', ['height', $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_height') + 'px']);
		}));

		//method
		$es4.$$public_function('attachNetStream', $$thisp, (function ($$$$netStream)
		{
			//set default parameter values
			var netStream = $es4.$$coerce($$$$netStream, NetStream);

			if ($es4.$$get($$thisp, $$this, $$thisp, '$_netStream'))
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_netStream', 'removeEventListener', ['videoCreated', $es4.$$get($$thisp, $$this, $$thisp, 'onVideoCreated')]);
				if ($es4.$$get($$thisp, $$this, $$thisp, '$_domVideoView'))
				{
					$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'removeChild', [$es4.$$get($$thisp, $$this, $$thisp, '$_domVideoView')]);
				}
				$es4.$$set($$thisp, $$this, $$thisp, '$_netStream', null, '=');
				return;
			}
			if (!netStream)
			{
				return;
			}
			$es4.$$set($$thisp, $$this, $$thisp, '$_netStream', netStream, '=');
			if ($es4.$$get($$thisp, $$this, $$thisp, '$_netStream', '$__domVideoView'))
			{
				$es4.$$call($$thisp, $$this, $$thisp, 'onVideoCreated', [null]);
				return;
			}
			else
			{
				$es4.$$call($$thisp, $$this, $$thisp, '$_netStream', 'addEventListener', ['videoCreated', $es4.$$get($$thisp, $$this, $$thisp, 'onVideoCreated')]);
			}
		}));

		//method
		$es4.$$private_function('onVideoCreated', $$thisp, (function ($$$$event)
		{
			//set default parameter values
			var event = $es4.$$coerce($$$$event, Event);

			$es4.$$set($$thisp, $$this, $$thisp, '$_domVideoView', $es4.$$get($$thisp, $$this, $$thisp, '$_netStream', '$__domVideoView'), '=');
			$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_domView', 'appendChild', [$es4.$$get($$thisp, $$this, $$thisp, '$_domVideoView')]);
			$es4.$$call($$this, $$this, $$thisp, '$_applySize', $es4.$$EMPTY_ARRAY);
		}));

		//method
		$es4.$$public_function('attachCamera', $$thisp, (function ($$$$camera)
		{
			//set default parameter values
			var camera = $es4.$$coerce($$$$camera, Camera);

			throw $es4.$$primitive(new (Error)('Video: attempted call to an unimplemented function "attachCamera"'));
		}));

		//method
		$es4.$$public_function('clear', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Video: attempted call to an unimplemented function "clear"'));
		}));

		//accessor
		$es4.$$public_accessor('width', $$thisp, (function ()
		{
			return $es4.$$super($$thisp).width;
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var width = (value > 0) ? value : 320;
			$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_setExplicitBounds', [width, $es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_height')]);
			$es4.$$call($$this, $$this, $$thisp, '$_applySize', $es4.$$EMPTY_ARRAY);
		}));

		//accessor
		$es4.$$public_accessor('height', $$thisp, (function ()
		{
			return $es4.$$super($$thisp).height;
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Number);

			var height = (value > 0) ? value : 240;
			$es4.$$call($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_setExplicitBounds', [$es4.$$get($$thisp, $$this, $$thisp, '$_properties', 'DisplayObjectScope', '$_width'), height]);
			$es4.$$call($$this, $$this, $$thisp, '$_applySize', $es4.$$EMPTY_ARRAY);
		}));

		//accessor
		$es4.$$public_accessor('deblocking', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Video: attempted call to an unimplemented function "deblocking"'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, int);

			throw $es4.$$primitive(new (Error)('Video: attempted call to an unimplemented function "deblocking"'));
		}));

		//accessor
		$es4.$$public_accessor('smoothing', $$thisp, (function ()
		{
			throw $es4.$$primitive(new (Error)('Video: attempted call to an unimplemented function "smoothing"'));
		}), (function ($$$$value)
		{
			//set default parameter values
			var value = $es4.$$coerce($$$$value, Boolean);

			throw $es4.$$primitive(new (Error)('Video: attempted call to an unimplemented function "smoothing"'));
		}));

		//accessor
		$es4.$$public_accessor('videoHeight', $$thisp, (function ()
		{
			return $es4.$$coerce(($es4.$$get($$thisp, $$this, $$thisp, '$_domVideoView')) ? $es4.$$get($$thisp, $$this, $$thisp, '$_domVideoView', 'videoHeight') : 0, int);
		}), null);

		//accessor
		$es4.$$public_accessor('videoWidth', $$thisp, (function ()
		{
			return $es4.$$coerce(($es4.$$get($$thisp, $$this, $$thisp, '$_domVideoView')) ? $es4.$$get($$thisp, $$this, $$thisp, '$_domVideoView', 'videoWidth') : 0, int);
		}), null);

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(Video, {EXTENDS:'flash.display.DisplayObject'}, 'flash.media::Video');
})();
//flash.media.Video


//flash.display3D.Program3D
$es4.$$package('flash.display3D').Program3D = function () { throw new Error('Use of unimplemented class: Program3D'); }
//flash.display3D.Program3D


//flash.text.engine.TextLineMirrorRegion
$es4.$$package('flash.text.engine').TextLineMirrorRegion = function () { throw new Error('Use of unimplemented class: TextLineMirrorRegion'); }
//flash.text.engine.TextLineMirrorRegion


//flash.globalization.NumberParseResult
$es4.$$package('flash.globalization').NumberParseResult = function () { throw new Error('Use of unimplemented class: NumberParseResult'); }
//flash.globalization.NumberParseResult


//flash.utils.Endian
$es4.$$package('flash.utils').Endian = (function ()
{
	//properties
	Endian.BIG_ENDIAN = "bigEndian";
	Endian.LITTLE_ENDIAN = "littleEndian";

	//class initializer
	Endian.$$cinit = (function ()
	{
		Endian.$$cinit = undefined;

	});

	function Endian()
	{
		//initialize class if not initialized
		if (Endian.$$cinit !== undefined) Endian.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof Endian) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Endian) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(Endian, null, 'flash.utils::Endian');
})();
//flash.utils.Endian


//flash.ui.Multitouch
$es4.$$package('flash.ui').Multitouch = function () { throw new Error('Use of unimplemented class: Multitouch'); }
//flash.ui.Multitouch


//flash.media.StageVideoAvailability
$es4.$$package('flash.media').StageVideoAvailability = function () { throw new Error('Use of unimplemented class: StageVideoAvailability'); }
//flash.media.StageVideoAvailability


//flash.geom.ColorTransform
$es4.$$package('flash.geom').ColorTransform = (function ()
{
	//imports
	var ColorTransform;

	//class initializer
	ColorTransform.$$cinit = (function ()
	{
		ColorTransform.$$cinit = undefined;

		//initialize imports
	});

	function ColorTransform()
	{
		//initialize class if not initialized
		if (ColorTransform.$$cinit !== undefined) ColorTransform.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof ColorTransform) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], ColorTransform) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$public_property('alphaMultiplier', $$thisp, Number);
		$es4.$$public_property('alphaOffset', $$thisp, Number);
		$es4.$$public_property('blueMultiplier', $$thisp, Number);
		$es4.$$public_property('blueOffset', $$thisp, Number);
		$es4.$$public_property('greenMultiplier', $$thisp, Number);
		$es4.$$public_property('greenOffset', $$thisp, Number);
		$es4.$$public_property('redMultiplier', $$thisp, Number);
		$es4.$$public_property('redOffset', $$thisp, Number);

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$redMultiplier, $$$$greenMultiplier, $$$$blueMultiplier, $$$$alphaMultiplier, $$$$redOffset, $$$$greenOffset, $$$$blueOffset, $$$$alphaOffset)
		{
			//set default parameter values
			var redMultiplier = (0 > arguments.length - 1) ? 1 : $es4.$$coerce($$$$redMultiplier, Number);
			var greenMultiplier = (1 > arguments.length - 1) ? 1 : $es4.$$coerce($$$$greenMultiplier, Number);
			var blueMultiplier = (2 > arguments.length - 1) ? 1 : $es4.$$coerce($$$$blueMultiplier, Number);
			var alphaMultiplier = (3 > arguments.length - 1) ? 1 : $es4.$$coerce($$$$alphaMultiplier, Number);
			var redOffset = (4 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$redOffset, Number);
			var greenOffset = (5 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$greenOffset, Number);
			var blueOffset = (6 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$blueOffset, Number);
			var alphaOffset = (7 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$alphaOffset, Number);

			$es4.$$set($$this, $$this, $$thisp, 'redMultiplier', redMultiplier, '=');
			$es4.$$set($$this, $$this, $$thisp, 'greenMultiplier', greenMultiplier, '=');
			$es4.$$set($$this, $$this, $$thisp, 'blueMultiplier', blueMultiplier, '=');
			$es4.$$set($$this, $$this, $$thisp, 'alphaMultiplier', alphaMultiplier, '=');
			$es4.$$set($$this, $$this, $$thisp, 'redOffset', redOffset, '=');
			$es4.$$set($$this, $$this, $$thisp, 'greenOffset', greenOffset, '=');
			$es4.$$set($$this, $$this, $$thisp, 'blueOffset', blueOffset, '=');
			$es4.$$set($$this, $$this, $$thisp, 'alphaOffset', alphaOffset, '=');
		}));

		//method
		$es4.$$public_function('concat', $$thisp, (function ($$$$second)
		{
			//set default parameter values
			var second = $es4.$$coerce($$$$second, $es4.$$['flash.geom'].ColorTransform);

			$es4.$$set($$this, $$this, $$thisp, 'redMultiplier', $es4.$$get(second, $$this, $$thisp, 'redMultiplier'), '*=');
			$es4.$$set($$this, $$this, $$thisp, 'greenMultiplier', $es4.$$get(second, $$this, $$thisp, 'greenMultiplier'), '*=');
			$es4.$$set($$this, $$this, $$thisp, 'blueMultiplier', $es4.$$get(second, $$this, $$thisp, 'blueMultiplier'), '*=');
			$es4.$$set($$this, $$this, $$thisp, 'alphaMultiplier', $es4.$$get(second, $$this, $$thisp, 'alphaMultiplier'), '*=');
			$es4.$$set($$this, $$this, $$thisp, 'redOffset', $es4.$$get(second, $$this, $$thisp, 'redOffset'), '+=');
			$es4.$$set($$this, $$this, $$thisp, 'greenOffset', $es4.$$get(second, $$this, $$thisp, 'greenOffset'), '+=');
			$es4.$$set($$this, $$this, $$thisp, 'blueOffset', $es4.$$get(second, $$this, $$thisp, 'blueOffset'), '+=');
			$es4.$$set($$this, $$this, $$thisp, 'alphaOffset', $es4.$$get(second, $$this, $$thisp, 'alphaOffset'), '+=');
		}));

		//method
		$es4.$$public_function('toString', $$thisp, (function ()
		{
			return "[ColorTransform(" + $es4.$$call([$es4.$$get($$this, $$this, $$thisp, 'redMultiplier'), $es4.$$get($$this, $$this, $$thisp, 'greenMultiplier'), $es4.$$get($$this, $$this, $$thisp, 'blueMultiplier'), $es4.$$get($$this, $$this, $$thisp, 'alphaMultiplier'), $es4.$$get($$this, $$this, $$thisp, 'redOffset'), $es4.$$get($$this, $$this, $$thisp, 'greenOffset'), $es4.$$get($$this, $$this, $$thisp, 'blueOffset'), $es4.$$get($$this, $$this, $$thisp, 'alphaOffset')], $$this, $$thisp, 'join', [", "]) + ")]";
		}));

		//accessor
		$es4.$$public_accessor('color', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$get($$this, $$this, $$thisp, 'redOffset') << 16 | $es4.$$get($$this, $$this, $$thisp, 'greenOffset') << 8 | $es4.$$get($$this, $$this, $$thisp, 'blueOffset'), uint);
		}), (function ($$$$newColor)
		{
			//set default parameter values
			var newColor = $es4.$$coerce($$$$newColor, uint);

			$es4.$$set($$this, $$this, $$thisp, 'redOffset', newColor >> 16 & 0xFF, '=');
			$es4.$$set($$this, $$this, $$thisp, 'greenOffset', newColor >> 8 & 0xFF, '=');
			$es4.$$set($$this, $$this, $$thisp, 'blueOffset', newColor & 0xFF, '=');
			$es4.$$set($$this, $$this, $$thisp, 'redMultiplier', $es4.$$set($$this, $$this, $$thisp, 'greenMultiplier', $es4.$$set($$this, $$this, $$thisp, 'blueMultiplier', 1, '='), '='), '=');
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(ColorTransform, null, 'flash.geom::ColorTransform');
})();
//flash.geom.ColorTransform


//flash.geom.Point
$es4.$$package('flash.geom').Point = (function ()
{
	//imports
	var Point;

	//class initializer
	Point.$$cinit = (function ()
	{
		Point.$$cinit = undefined;

		//initialize imports
	});

	//method
	$es4.$$private_function('diagonalLength', Point, (function ($$$$x, $$$$y)
	{
		if (Point.$$cinit !== undefined) Point.$$cinit();

		//set default parameter values
		var x = $es4.$$coerce($$$$x, Number);
		var y = $es4.$$coerce($$$$y, Number);

		return x === 0 ? $es4.$$call(Math, null, null, 'abs', [y]) : y === 0 ? $es4.$$call(Math, null, null, 'abs', [x]) : $es4.$$call(Math, null, null, 'sqrt', [x * x + y * y]);
	}));

	//method
	$es4.$$public_function('distance', Point, (function ($$$$pt1, $$$$pt2)
	{
		if (Point.$$cinit !== undefined) Point.$$cinit();

		//set default parameter values
		var pt1 = $es4.$$coerce($$$$pt1, $es4.$$['flash.geom'].Point);
		var pt2 = $es4.$$coerce($$$$pt2, $es4.$$['flash.geom'].Point);

		return $es4.$$call(Point, null, null, 'diagonalLength', [$es4.$$get(pt2, null, null, 'x') - $es4.$$get(pt1, null, null, 'x'), $es4.$$get(pt2, null, null, 'y') - $es4.$$get(pt1, null, null, 'y')]);
	}));

	//method
	$es4.$$public_function('interpolate', Point, (function ($$$$pt1, $$$$pt2, $$$$f)
	{
		if (Point.$$cinit !== undefined) Point.$$cinit();

		//set default parameter values
		var pt1 = $es4.$$coerce($$$$pt1, $es4.$$['flash.geom'].Point);
		var pt2 = $es4.$$coerce($$$$pt2, $es4.$$['flash.geom'].Point);
		var f = $es4.$$coerce($$$$f, Number);

		return $es4.$$coerce($es4.$$primitive(new (Point)($es4.$$get(pt1, null, null, 'x') * f + $es4.$$get(pt2, null, null, 'x') * (1 - f), $es4.$$get(pt1, null, null, 'y') * f + $es4.$$get(pt2, null, null, 'y') * (1 - f))), $es4.$$['flash.geom'].Point);
	}));

	//method
	$es4.$$public_function('polar', Point, (function ($$$$len, $$$$angle)
	{
		if (Point.$$cinit !== undefined) Point.$$cinit();

		//set default parameter values
		var len = $es4.$$coerce($$$$len, Number);
		var angle = $es4.$$coerce($$$$angle, Number);

		return $es4.$$coerce($es4.$$primitive(new (Point)(len * $es4.$$call(Math, null, null, 'cos', [angle]), len * $es4.$$call(Math, null, null, 'sin', [angle]))), $es4.$$['flash.geom'].Point);
	}));

	function Point()
	{
		//initialize class if not initialized
		if (Point.$$cinit !== undefined) Point.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof Point) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Point) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('_x', $$thisp, Number);
		$es4.$$private_property('_y', $$thisp, Number);

		//constructor
		$es4.$$constructor($$thisp, (function ($$$$x, $$$$y)
		{
			//set default parameter values
			var x = (0 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$x, Number);
			var y = (1 > arguments.length - 1) ? 0 : $es4.$$coerce($$$$y, Number);

			$es4.$$set($$thisp, $$this, $$thisp, '_x', x, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_y', y, '=');
		}));

		//method
		$es4.$$public_function('add', $$thisp, (function ($$$$v)
		{
			//set default parameter values
			var v = $es4.$$coerce($$$$v, $es4.$$['flash.geom'].Point);

			return $es4.$$coerce($es4.$$primitive(new (Point)($es4.$$get($$thisp, $$this, $$thisp, '_x') + $es4.$$get(v, $$this, $$thisp, 'x'), $es4.$$get($$thisp, $$this, $$thisp, '_y') + $es4.$$get(v, $$this, $$thisp, 'y'))), $es4.$$['flash.geom'].Point);
		}));

		//method
		$es4.$$public_function('clone', $$thisp, (function ()
		{
			return $es4.$$coerce($es4.$$primitive(new (Point)($es4.$$get($$thisp, $$this, $$thisp, '_x'), $es4.$$get($$thisp, $$this, $$thisp, '_y'))), $es4.$$['flash.geom'].Point);
		}));

		//method
		$es4.$$public_function('copyFrom', $$thisp, (function ($$$$sourcePoint)
		{
			//set default parameter values
			var sourcePoint = $es4.$$coerce($$$$sourcePoint, $es4.$$['flash.geom'].Point);

			throw $es4.$$primitive(new (Error)('Point: attempted call to an unimplemented function "copyFrom"'));
		}));

		//method
		$es4.$$public_function('equals', $$thisp, (function ($$$$toCompare)
		{
			//set default parameter values
			var toCompare = $es4.$$coerce($$$$toCompare, $es4.$$['flash.geom'].Point);

			return $es4.$$coerce($es4.$$get($$thisp, $$this, $$thisp, '_x') == $es4.$$get(toCompare, $$this, $$thisp, 'x') && $es4.$$get($$thisp, $$this, $$thisp, '_y') == $es4.$$get(toCompare, $$this, $$thisp, 'y'), Boolean);
		}));

		//method
		$es4.$$public_function('normalize', $$thisp, (function ($$$$thickness)
		{
			//set default parameter values
			var thickness = $es4.$$coerce($$$$thickness, Number);

			if ($es4.$$get($$thisp, $$this, $$thisp, '_x') !== 0 || $es4.$$get($$thisp, $$this, $$thisp, '_y') !== 0)
			{
				var relativeThickness = thickness / $es4.$$get($$this, $$this, $$thisp, 'length');
				$es4.$$set($$thisp, $$this, $$thisp, '_x', relativeThickness, '*=');
				$es4.$$set($$thisp, $$this, $$thisp, '_y', relativeThickness, '*=');
			}
		}));

		//method
		$es4.$$public_function('offset', $$thisp, (function ($$$$dx, $$$$dy)
		{
			//set default parameter values
			var dx = $es4.$$coerce($$$$dx, Number);
			var dy = $es4.$$coerce($$$$dy, Number);

			$es4.$$set($$thisp, $$this, $$thisp, '_x', dx, '+=');
			$es4.$$set($$thisp, $$this, $$thisp, '_y', dy, '+=');
		}));

		//method
		$es4.$$public_function('setTo', $$thisp, (function ($$$$xa, $$$$ya)
		{
			//set default parameter values
			var xa = $es4.$$coerce($$$$xa, Number);
			var ya = $es4.$$coerce($$$$ya, Number);

			$es4.$$set($$thisp, $$this, $$thisp, '_x', xa, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_y', ya, '=');
		}));

		//method
		$es4.$$public_function('subtract', $$thisp, (function ($$$$v)
		{
			//set default parameter values
			var v = $es4.$$coerce($$$$v, $es4.$$['flash.geom'].Point);

			return $es4.$$coerce($es4.$$primitive(new (Point)($es4.$$get($$thisp, $$this, $$thisp, '_x') - $es4.$$get(v, $$this, $$thisp, 'x'), $es4.$$get($$thisp, $$this, $$thisp, '_y') - $es4.$$get(v, $$this, $$thisp, 'y'))), $es4.$$['flash.geom'].Point);
		}));

		//method
		$es4.$$public_function('toString', $$thisp, (function ()
		{
			return $es4.$$call(["(x=", $es4.$$get($$thisp, $$this, $$thisp, '_x'), ", y=", $es4.$$get($$thisp, $$this, $$thisp, '_y'), ")"], $$this, $$thisp, 'join', [""]);
		}));

		//accessor
		$es4.$$public_accessor('y', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_y');
		}), (function ($$$$y)
		{
			//set default parameter values
			var y = $es4.$$coerce($$$$y, Number);

			$es4.$$set($$thisp, $$this, $$thisp, '_y', y, '=');
		}));

		//accessor
		$es4.$$public_accessor('x', $$thisp, (function ()
		{
			return $es4.$$get($$thisp, $$this, $$thisp, '_x');
		}), (function ($$$$x)
		{
			//set default parameter values
			var x = $es4.$$coerce($$$$x, Number);

			$es4.$$set($$thisp, $$this, $$thisp, '_x', x, '=');
		}));

		//accessor
		$es4.$$public_accessor('length', $$thisp, (function ()
		{
			return $es4.$$call(Point, $$this, $$thisp, 'diagonalLength', [$es4.$$get($$thisp, $$this, $$thisp, '_x'), $es4.$$get($$thisp, $$this, $$thisp, '_y')]);
		}), null);

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(Point, null, 'flash.geom::Point');
})();
//flash.geom.Point


//flash.xml.XMLNodeType
$es4.$$package('flash.xml').XMLNodeType = (function ()
{
	//properties
	XMLNodeType.CDATA_NODE = 4;
	XMLNodeType.ELEMENT_NODE = 1;
	XMLNodeType.TEXT_NODE = 3;

	//class initializer
	XMLNodeType.$$cinit = (function ()
	{
		XMLNodeType.$$cinit = undefined;

	});

	function XMLNodeType()
	{
		//initialize class if not initialized
		if (XMLNodeType.$$cinit !== undefined) XMLNodeType.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof XMLNodeType) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], XMLNodeType) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(XMLNodeType, null, 'flash.xml::XMLNodeType');
})();
//flash.xml.XMLNodeType


//flash.media.SoundMixer
$es4.$$package('flash.media').SoundMixer = function () { throw new Error('Use of unimplemented class: SoundMixer'); }
//flash.media.SoundMixer


//flash.filters.ColorMatrixFilter
$es4.$$package('flash.filters').ColorMatrixFilter = function () { throw new Error('Use of unimplemented class: ColorMatrixFilter'); }
//flash.filters.ColorMatrixFilter


//flash.net.IDynamicPropertyWriter
$es4.$$package('flash.net').IDynamicPropertyWriter = (function ()
{
	function IDynamicPropertyWriter()
	{
		//handle cast
		return $es4.$$as(arguments[0], IDynamicPropertyWriter);
	}
	return $es4.$$interface(IDynamicPropertyWriter, null, 'flash.net::IDynamicPropertyWriter');
})();
//flash.net.IDynamicPropertyWriter


//flash.display.IGraphicsData
$es4.$$package('flash.display').IGraphicsData = (function ()
{
	function IGraphicsData()
	{
		//handle cast
		return $es4.$$as(arguments[0], IGraphicsData);
	}
	return $es4.$$interface(IGraphicsData, null, 'flash.display::IGraphicsData');
})();
//flash.display.IGraphicsData


//flash.display.IBitmapDrawable
$es4.$$package('flash.display').IBitmapDrawable = (function ()
{
	function IBitmapDrawable()
	{
		//handle cast
		return $es4.$$as(arguments[0], IBitmapDrawable);
	}
	return $es4.$$interface(IBitmapDrawable, null, 'flash.display::IBitmapDrawable');
})();
//flash.display.IBitmapDrawable


//flash.utils.IDataInput
$es4.$$package('flash.utils').IDataInput = (function ()
{
	function IDataInput()
	{
		//handle cast
		return $es4.$$as(arguments[0], IDataInput);
	}
	return $es4.$$interface(IDataInput, null, 'flash.utils::IDataInput');
})();
//flash.utils.IDataInput


//flash.events.IEventDispatcher
$es4.$$package('flash.events').IEventDispatcher = (function ()
{
	function IEventDispatcher()
	{
		//handle cast
		return $es4.$$as(arguments[0], IEventDispatcher);
	}
	return $es4.$$interface(IEventDispatcher, null, 'flash.events::IEventDispatcher');
})();
//flash.events.IEventDispatcher


//flash.display.IGraphicsStroke
$es4.$$package('flash.display').IGraphicsStroke = (function ()
{
	function IGraphicsStroke()
	{
		//handle cast
		return $es4.$$as(arguments[0], IGraphicsStroke);
	}
	return $es4.$$interface(IGraphicsStroke, null, 'flash.display::IGraphicsStroke');
})();
//flash.display.IGraphicsStroke


//flash.display.IGraphicsPath
$es4.$$package('flash.display').IGraphicsPath = (function ()
{
	function IGraphicsPath()
	{
		//handle cast
		return $es4.$$as(arguments[0], IGraphicsPath);
	}
	return $es4.$$interface(IGraphicsPath, null, 'flash.display::IGraphicsPath');
})();
//flash.display.IGraphicsPath


//flash.accessibility.ISearchableText
$es4.$$package('flash.accessibility').ISearchableText = (function ()
{
	function ISearchableText()
	{
		//handle cast
		return $es4.$$as(arguments[0], ISearchableText);
	}
	return $es4.$$interface(ISearchableText, null, 'flash.accessibility::ISearchableText');
})();
//flash.accessibility.ISearchableText


//flash.utils.IDataOutput
$es4.$$package('flash.utils').IDataOutput = (function ()
{
	function IDataOutput()
	{
		//handle cast
		return $es4.$$as(arguments[0], IDataOutput);
	}
	return $es4.$$interface(IDataOutput, null, 'flash.utils::IDataOutput');
})();
//flash.utils.IDataOutput


//flash.accessibility.ISimpleTextSelection
$es4.$$package('flash.accessibility').ISimpleTextSelection = (function ()
{
	function ISimpleTextSelection()
	{
		//handle cast
		return $es4.$$as(arguments[0], ISimpleTextSelection);
	}
	return $es4.$$interface(ISimpleTextSelection, null, 'flash.accessibility::ISimpleTextSelection');
})();
//flash.accessibility.ISimpleTextSelection


//flash.display.IGraphicsFill
$es4.$$package('flash.display').IGraphicsFill = (function ()
{
	function IGraphicsFill()
	{
		//handle cast
		return $es4.$$as(arguments[0], IGraphicsFill);
	}
	return $es4.$$interface(IGraphicsFill, null, 'flash.display::IGraphicsFill');
})();
//flash.display.IGraphicsFill


//flash.text.ime.IIMEClient
$es4.$$package('flash.text.ime').IIMEClient = (function ()
{
	function IIMEClient()
	{
		//handle cast
		return $es4.$$as(arguments[0], IIMEClient);
	}
	return $es4.$$interface(IIMEClient, null, 'flash.text.ime::IIMEClient');
})();
//flash.text.ime.IIMEClient


//flash.utils.unescapeMultiByte
$es4.$$package('flash.utils').unescapeMultiByte = function () { throw new Error('Use of unimplemented function: unescapeMultiByte'); }
//flash.utils.unescapeMultiByte


//flash.sampler.setSamplerCallback
$es4.$$package('flash.sampler').setSamplerCallback = function () { throw new Error('Use of unimplemented function: setSamplerCallback'); }
//flash.sampler.setSamplerCallback


//flash.debugger.enterDebugger
$es4.$$package('flash.debugger').enterDebugger = (function ()
{
	var $$this = enterDebugger, $$thisp = enterDebugger;
	//function initializer
	enterDebugger.$$cinit = (function ()
	{
		enterDebugger.$$cinit = undefined;
	});

	function enterDebugger()
	{
		//initialize function if not initialized
		if (enterDebugger.$$cinit !== undefined) enterDebugger.$$cinit();


		debugger;
	}

	return $es4.$$function (enterDebugger);
})();
//flash.debugger.enterDebugger


//flash.utils.getQualifiedSuperclassName
$es4.$$package('flash.utils').getQualifiedSuperclassName = (function ()
{
	var $$this = getQualifiedSuperclassName, $$thisp = getQualifiedSuperclassName;
	//imports
	var getQualifiedClassName;

	//function initializer
	getQualifiedSuperclassName.$$cinit = (function ()
	{
		getQualifiedSuperclassName.$$cinit = undefined;

		//initialize imports
		getQualifiedClassName = $es4.$$['flash.utils'].getQualifiedClassName;
	});

	function getQualifiedSuperclassName($$$$object)
	{
		//initialize function if not initialized
		if (getQualifiedSuperclassName.$$cinit !== undefined) getQualifiedSuperclassName.$$cinit();

		//set default parameter values
		var object = $$$$object;

		if (object == Object)
		{
			return null;
		}
		if ($es4.$$get(object, $$this, $$thisp, '$$isclass') !== undefined)
		{
			if (object === Array)
			{
				return 'Object';
			}
			return getQualifiedClassName($es4.$$get(object, $$this, $$thisp, '__proto__'));
		}
		else if ($es4.$$get(object, $$this, $$thisp, '$$ismethod') !== undefined)
		{
			return 'Function';
		}
		else if ($es4.$$get(object, $$this, $$thisp, 'constructor', '$$isclass') !== undefined)
		{
			return getQualifiedClassName($es4.$$get(object, $$this, $$thisp, 'constructor', '__proto__'));
		}
		return $es4.$$coerce($es4.$$get(object, $$this, $$thisp, 'constructor', '__proto__', 'name'), String);
}

	return $es4.$$function (getQualifiedSuperclassName);
})();
//flash.utils.getQualifiedSuperclassName


//flash.sampler.startSampling
$es4.$$package('flash.sampler').startSampling = function () { throw new Error('Use of unimplemented function: startSampling'); }
//flash.sampler.startSampling


//flash.media.scanHardware
$es4.$$package('flash.media').scanHardware = function () { throw new Error('Use of unimplemented function: scanHardware'); }
//flash.media.scanHardware


//flash.sampler.isGetterSetter
$es4.$$package('flash.sampler').isGetterSetter = function () { throw new Error('Use of unimplemented function: isGetterSetter'); }
//flash.sampler.isGetterSetter


//flash.utils.escapeMultiByte
$es4.$$package('flash.utils').escapeMultiByte = function () { throw new Error('Use of unimplemented function: escapeMultiByte'); }
//flash.utils.escapeMultiByte


//flash.sampler.clearSamples
$es4.$$package('flash.sampler').clearSamples = function () { throw new Error('Use of unimplemented function: clearSamples'); }
//flash.sampler.clearSamples


//flash.sampler.getLexicalScopes
$es4.$$package('flash.sampler').getLexicalScopes = function () { throw new Error('Use of unimplemented function: getLexicalScopes'); }
//flash.sampler.getLexicalScopes


//flash.sampler.getGetterInvocationCount
$es4.$$package('flash.sampler').getGetterInvocationCount = function () { throw new Error('Use of unimplemented function: getGetterInvocationCount'); }
//flash.sampler.getGetterInvocationCount


//flash.system.fscommand
$es4.$$package('flash.system').fscommand = function () { throw new Error('Use of unimplemented function: fscommand'); }
//flash.system.fscommand


//flash.sampler.getMemberNames
$es4.$$package('flash.sampler').getMemberNames = function () { throw new Error('Use of unimplemented function: getMemberNames'); }
//flash.sampler.getMemberNames


//flash.sampler.pauseSampling
$es4.$$package('flash.sampler').pauseSampling = function () { throw new Error('Use of unimplemented function: pauseSampling'); }
//flash.sampler.pauseSampling


//flash.net.navigateToURL
$es4.$$package('flash.net').navigateToURL = (function ()
{
	var $$this = navigateToURL, $$thisp = navigateToURL;
	//imports
	var URLRequest;

	//function initializer
	navigateToURL.$$cinit = (function ()
	{
		navigateToURL.$$cinit = undefined;

		//initialize imports
		URLRequest = $es4.$$['flash.net'].URLRequest;
	});

	function navigateToURL($$$$request, $$$$name)
	{
		//initialize function if not initialized
		if (navigateToURL.$$cinit !== undefined) navigateToURL.$$cinit();

		//set default parameter values
		var request = $es4.$$coerce($$$$request, URLRequest);
		var name = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$name, String);

		$es4.$$call(window, $$this, $$thisp, 'open', [$es4.$$get(request, $$this, $$thisp, 'url'), name]);
}

	return $es4.$$function (navigateToURL);
})();
//flash.net.navigateToURL


//flash.sampler.stopSampling
$es4.$$package('flash.sampler').stopSampling = function () { throw new Error('Use of unimplemented function: stopSampling'); }
//flash.sampler.stopSampling


//flash.utils.getQualifiedClassName
$es4.$$package('flash.utils').getQualifiedClassName = (function ()
{
	var $$this = getQualifiedClassName, $$thisp = getQualifiedClassName;
	//function initializer
	getQualifiedClassName.$$cinit = (function ()
	{
		getQualifiedClassName.$$cinit = undefined;
	});

	function getQualifiedClassName($$$$object)
	{
		//initialize function if not initialized
		if (getQualifiedClassName.$$cinit !== undefined) getQualifiedClassName.$$cinit();

		//set default parameter values
		var object = $$$$object;

		if ($es4.$$get(object, $$this, $$thisp, '$$isclass') !== undefined)
		{
			return $es4.$$coerce($es4.$$get(object, $$this, $$thisp, '$$fullyQualifiedName'), String);
		}
		else if ($es4.$$get(object, $$this, $$thisp, '$$ismethod') !== undefined)
		{
			return 'builtin.as$0::MethodClosure';
		}
		else if ($es4.$$get(object, $$this, $$thisp, 'constructor', 'name') === 'Number')
		{
			if (object = int(object))
			{
				return 'int';
			}
			else if (object = uint(object))
			{
				return 'uint';
			}
			return 'Number';
		}
		else if ($es4.$$get(object, $$this, $$thisp, 'constructor', '$$isclass') !== undefined)
		{
			return $es4.$$coerce($es4.$$get(object, $$this, $$thisp, 'constructor', '$$fullyQualifiedName'), String);
		}
		return $es4.$$coerce($es4.$$get(object, $$this, $$thisp, 'constructor', 'name'), String);
}

	return $es4.$$function (getQualifiedClassName);
})();
//flash.utils.getQualifiedClassName


//flash.sampler.getSampleCount
$es4.$$package('flash.sampler').getSampleCount = function () { throw new Error('Use of unimplemented function: getSampleCount'); }
//flash.sampler.getSampleCount


//flash.utils.setInterval
$es4.$$package('flash.utils').setInterval = (function ()
{
	var $$this = setInterval, $$thisp = setInterval;
	//function initializer
	setInterval.$$cinit = (function ()
	{
		setInterval.$$cinit = undefined;
	});

	function setInterval($$$$closure, $$$$delay, $$$$rest)
	{
		//initialize function if not initialized
		if (setInterval.$$cinit !== undefined) setInterval.$$cinit();

		//set default parameter values
		var closure = $es4.$$coerce($$$$closure, Function);
		var delay = $es4.$$coerce($$$$delay, Number);
		for (var $$i = 2, $$length = arguments.length, rest = new Array($$length - 2); $$i < $$length; $$i += 1) rest[$$i - 2] = arguments[$$i];

		return $es4.$$coerce($es4.$$call(global, $$this, $$thisp, 'setInterval', [function () 
{
	$es4.$$call(closure, $$this, $$thisp, 'apply', [this, rest]);
}
, delay]), uint);
}

	return $es4.$$function (setInterval);
})();
//flash.utils.setInterval


//flash.utils.getDefinitionByName
$es4.$$package('flash.utils').getDefinitionByName = (function ()
{
	var $$this = getDefinitionByName, $$thisp = getDefinitionByName;
	//function initializer
	getDefinitionByName.$$cinit = (function ()
	{
		getDefinitionByName.$$cinit = undefined;
	});

	function getDefinitionByName($$$$name)
	{
		//initialize function if not initialized
		if (getDefinitionByName.$$cinit !== undefined) getDefinitionByName.$$cinit();

		//set default parameter values
		var name = $es4.$$coerce($$$$name, String);


		var parts = name.split('::').join('.').split('.');
		var definitionName = parts.pop();
		var packageName = parts.join('.');
		
		if ($$[packageName] === undefined || $$[packageName][definitionName] === undefined) throw new Error('Variable ' + name + ' is not defined.');
		
		return $$[packageName][definitionName];
	}

	return $es4.$$function (getDefinitionByName);
})();
//flash.utils.getDefinitionByName


//flash.utils.setTimeout
$es4.$$package('flash.utils').setTimeout = (function ()
{
	var $$this = setTimeout, $$thisp = setTimeout;
	//function initializer
	setTimeout.$$cinit = (function ()
	{
		setTimeout.$$cinit = undefined;
	});

	function setTimeout($$$$closure, $$$$delay, $$$$rest)
	{
		//initialize function if not initialized
		if (setTimeout.$$cinit !== undefined) setTimeout.$$cinit();

		//set default parameter values
		var closure = $es4.$$coerce($$$$closure, Function);
		var delay = $es4.$$coerce($$$$delay, Number);
		for (var $$i = 2, $$length = arguments.length, rest = new Array($$length - 2); $$i < $$length; $$i += 1) rest[$$i - 2] = arguments[$$i];

		return $es4.$$coerce($es4.$$call(global, $$this, $$thisp, 'setTimeout', [function () 
{
	$es4.$$call(closure, $$this, $$thisp, 'apply', [this, rest]);
}
, delay]), uint);
}

	return $es4.$$function (setTimeout);
})();
//flash.utils.setTimeout


//flash.sampler.getInvocationCount
$es4.$$package('flash.sampler').getInvocationCount = function () { throw new Error('Use of unimplemented function: getInvocationCount'); }
//flash.sampler.getInvocationCount


//flash.utils.getTimer
$es4.$$package('flash.utils').getTimer = (function ()
{
	var $$this = getTimer, $$thisp = getTimer;
	//function initializer
	getTimer.$$cinit = (function ()
	{
		getTimer.$$cinit = undefined;
	});

	function getTimer()
	{
		//initialize function if not initialized
		if (getTimer.$$cinit !== undefined) getTimer.$$cinit();

		return $es4.$$coerce($es4.$$call($es4.$$primitive(new (Date)()), $$this, $$thisp, 'getTime', $es4.$$EMPTY_ARRAY) - $es4.$$get(global, $$this, $$thisp, '$es4', '$$startTime'), int);
}

	return $es4.$$function (getTimer);
})();
//flash.utils.getTimer


//flash.sampler.getSamples
$es4.$$package('flash.sampler').getSamples = function () { throw new Error('Use of unimplemented function: getSamples'); }
//flash.sampler.getSamples


//flash.profiler.showRedrawRegions
$es4.$$package('flash.profiler').showRedrawRegions = function () { throw new Error('Use of unimplemented function: showRedrawRegions'); }
//flash.profiler.showRedrawRegions


//flash.net.getClassByAlias
$es4.$$package('flash.net').getClassByAlias = function () { throw new Error('Use of unimplemented function: getClassByAlias'); }
//flash.net.getClassByAlias


//flash.sampler.getMasterString
$es4.$$package('flash.sampler').getMasterString = function () { throw new Error('Use of unimplemented function: getMasterString'); }
//flash.sampler.getMasterString


//flash.sampler.getSize
$es4.$$package('flash.sampler').getSize = function () { throw new Error('Use of unimplemented function: getSize'); }
//flash.sampler.getSize


//flash.net.sendToURL
$es4.$$package('flash.net').sendToURL = function () { throw new Error('Use of unimplemented function: sendToURL'); }
//flash.net.sendToURL


//flash.net.registerClassAlias
$es4.$$package('flash.net').registerClassAlias = function () { throw new Error('Use of unimplemented function: registerClassAlias'); }
//flash.net.registerClassAlias


//flash.profiler.profile
$es4.$$package('flash.profiler').profile = function () { throw new Error('Use of unimplemented function: profile'); }
//flash.profiler.profile


//flash.sampler.sampleInternalAllocs
$es4.$$package('flash.sampler').sampleInternalAllocs = function () { throw new Error('Use of unimplemented function: sampleInternalAllocs'); }
//flash.sampler.sampleInternalAllocs


//flash.utils.clearTimeout
$es4.$$package('flash.utils').clearTimeout = (function ()
{
	var $$this = clearTimeout, $$thisp = clearTimeout;
	//function initializer
	clearTimeout.$$cinit = (function ()
	{
		clearTimeout.$$cinit = undefined;
	});

	function clearTimeout($$$$id)
	{
		//initialize function if not initialized
		if (clearTimeout.$$cinit !== undefined) clearTimeout.$$cinit();

		//set default parameter values
		var id = $es4.$$coerce($$$$id, uint);

		$es4.$$call(global, $$this, $$thisp, 'clearTimeout', [id]);
}

	return $es4.$$function (clearTimeout);
})();
//flash.utils.clearTimeout


//flash.utils.describeType
$es4.$$package('flash.utils').describeType = function () { throw new Error('Use of unimplemented function: describeType'); }
//flash.utils.describeType


//flash.sampler.getSetterInvocationCount
$es4.$$package('flash.sampler').getSetterInvocationCount = function () { throw new Error('Use of unimplemented function: getSetterInvocationCount'); }
//flash.sampler.getSetterInvocationCount


//flash.sampler.getSavedThis
$es4.$$package('flash.sampler').getSavedThis = function () { throw new Error('Use of unimplemented function: getSavedThis'); }
//flash.sampler.getSavedThis


//flash.utils.clearInterval
$es4.$$package('flash.utils').clearInterval = (function ()
{
	var $$this = clearInterval, $$thisp = clearInterval;
	//function initializer
	clearInterval.$$cinit = (function ()
	{
		clearInterval.$$cinit = undefined;
	});

	function clearInterval($$$$id)
	{
		//initialize function if not initialized
		if (clearInterval.$$cinit !== undefined) clearInterval.$$cinit();

		//set default parameter values
		var id = $es4.$$coerce($$$$id, uint);

		$es4.$$call(global, $$this, $$thisp, 'clearInterval', [id]);
}

	return $es4.$$function (clearInterval);
})();
//flash.utils.clearInterval


$es4.$$['flash.net'].IDynamicPropertyWriter.$$pcinit();

$es4.$$['flash.display'].IGraphicsData.$$pcinit();

$es4.$$['flash.display'].IBitmapDrawable.$$pcinit();

$es4.$$['flash.utils'].IDataInput.$$pcinit();

$es4.$$['flash.events'].IEventDispatcher.$$pcinit();

$es4.$$['flash.display'].IGraphicsStroke.$$pcinit();

$es4.$$['flash.display'].IGraphicsPath.$$pcinit();

$es4.$$['flash.accessibility'].ISearchableText.$$pcinit();

$es4.$$['flash.utils'].IDataOutput.$$pcinit();

$es4.$$['flash.accessibility'].ISimpleTextSelection.$$pcinit();

$es4.$$['flash.display'].IGraphicsFill.$$pcinit();

$es4.$$['flash.text.ime'].IIMEClient.$$pcinit();

$es4.$$['flash.accessibility'].AccessibilityProperties.$$pcinit();

$es4.$$['flash.system'].System.$$pcinit();

$es4.$$['flash.net'].URLVariables.$$pcinit();

$es4.$$['flash.events'].EventDispatcher.$$pcinit();

$es4.$$['flash.ui'].Mouse.$$pcinit();

$es4.$$['flash.events'].AsyncErrorEvent.$$pcinit();

$es4.$$['flash.display3D'].Context3DCompareMode.$$pcinit();

$es4.$$['flash.media'].Sound.$$pcinit();

$es4.$$['flash.events'].SecurityErrorEvent.$$pcinit();

$es4.$$['flash.events'].TimerEvent.$$pcinit();

$es4.$$['flash.utils'].Timer.$$pcinit();

$es4.$$['flash.net'].ObjectEncoding.$$pcinit();

$es4.$$['flash.display'].DisplayObjectContainer.$$pcinit();

$es4.$$['flash.display'].CapsStyle.$$pcinit();

$es4.$$['flash.events'].IOErrorEvent.$$pcinit();

$es4.$$['flash.text'].TextFormatAlign.$$pcinit();

$es4.$$['flash.net'].URLRequestMethod.$$pcinit();

$es4.$$['flash.media'].SoundChannel.$$pcinit();

$es4.$$['flash.display'].LoaderInfo.$$pcinit();

$es4.$$['flash.events'].MouseEvent.$$pcinit();

$es4.$$['flash.geom'].Matrix.$$pcinit();

$es4.$$['flash.ui'].MouseCursor.$$pcinit();

$es4.$$['flash.events'].KeyboardEvent.$$pcinit();

$es4.$$['flash.utils'].Proxy.$$pcinit();

$es4.$$['flash.geom'].Transform.$$pcinit();

$es4.$$['flash.system'].ApplicationDomain.$$pcinit();

$es4.$$['flash.display'].ColorCorrection.$$pcinit();

$es4.$$['flash.text'].TextFieldType.$$pcinit();

$es4.$$['flash.events'].ErrorEvent.$$pcinit();

$es4.$$['flash.display'].StageScaleMode.$$pcinit();

$es4.$$['flash.display'].Bitmap.$$pcinit();

$es4.$$['flash.printing'].PrintJobOptions.$$pcinit();

$es4.$$['flash.media'].SoundCodec.$$pcinit();

$es4.$$['flash.display'].BitmapData.$$pcinit();

$es4.$$['flash.text'].TextFieldAutoSize.$$pcinit();

$es4.$$[''].XML.$$pcinit();

$es4.$$['flash.display'].DisplayObject.$$pcinit();

$es4.$$['flash.display'].InteractiveObject.$$pcinit();

$es4.$$[''].XMLList.$$pcinit();

$es4.$$['flash.text'].StyleSheet.$$pcinit();

$es4.$$['flash.text'].TextFormat.$$pcinit();

$es4.$$['flash.events'].UncaughtErrorEvents.$$pcinit();

$es4.$$['flash.external'].ExternalInterface.$$pcinit();

$es4.$$['flash.display'].Shape.$$pcinit();

$es4.$$['flash.text'].FontType.$$pcinit();

$es4.$$['flash.display'].StageQuality.$$pcinit();

$es4.$$['flash.display'].Sprite.$$pcinit();

$es4.$$['flash.display'].Graphics.$$pcinit();

$es4.$$['flash.text'].FontStyle.$$pcinit();

$es4.$$['flash.text'].AntiAliasType.$$pcinit();

$es4.$$['browser'].Browser.$$pcinit();

$es4.$$['flash.display'].MovieClip.$$pcinit();

$es4.$$['flash.display'].StageAlign.$$pcinit();

$es4.$$['flash.net'].NetConnection.$$pcinit();

$es4.$$['flash.net'].URLLoaderDataFormat.$$pcinit();

$es4.$$['flash.events'].EventPhase.$$pcinit();

$es4.$$['flash.display'].Stage.$$pcinit();

$es4.$$['flash.display'].ColorCorrectionSupport.$$pcinit();

$es4.$$['flash.events'].SampleDataEvent.$$pcinit();

$es4.$$['flash.printing'].PrintJobOrientation.$$pcinit();

$es4.$$['flash.media'].VideoStatus.$$pcinit();

$es4.$$['flash.errors'].IOError.$$pcinit();

$es4.$$['flash.utils'].Dictionary.$$pcinit();

$es4.$$['flash.net'].Socket.$$pcinit();

$es4.$$['flash.display'].StageDisplayState.$$pcinit();

$es4.$$['flash.events'].NetStatusEvent.$$pcinit();

$es4.$$['fl.controls'].ScrollBarDirection.$$pcinit();

$es4.$$['flash.display'].PixelSnapping.$$pcinit();

$es4.$$['flash.text'].Font.$$pcinit();

$es4.$$['flash.xml'].XMLDocument.$$pcinit();

$es4.$$['flash.net'].SharedObjectFlushStatus.$$pcinit();

$es4.$$['flash.media'].SoundTransform.$$pcinit();

$es4.$$['flash.printing'].PrintJob.$$pcinit();

$es4.$$['player'].Player.$$pcinit();

$es4.$$['flash.geom'].Rectangle.$$pcinit();

$es4.$$['flash.system'].LoaderContext.$$pcinit();

$es4.$$['flash.net'].SharedObject.$$pcinit();

$es4.$$['flash.events'].Event.$$pcinit();

$es4.$$['flash.utils'].ByteArray.$$pcinit();

$es4.$$['flash.display'].SimpleButton.$$pcinit();

$es4.$$['flash.system'].SecurityDomain.$$pcinit();

$es4.$$['flash.net'].URLRequest.$$pcinit();

$es4.$$['flash.display'].Loader.$$pcinit();

$es4.$$['flash.events'].FocusEvent.$$pcinit();

$es4.$$['flash.xml'].XMLNode.$$pcinit();

$es4.$$['flash.events'].StatusEvent.$$pcinit();

$es4.$$['flash.events'].TextEvent.$$pcinit();

$es4.$$['flash.media'].Microphone.$$pcinit();

$es4.$$['flash.accessibility'].Accessibility.$$pcinit();

$es4.$$['flash.system'].Capabilities.$$pcinit();

$es4.$$['flash.text'].TextField.$$pcinit();

$es4.$$['flash.net'].NetStream.$$pcinit();

$es4.$$['flash.events'].HTTPStatusEvent.$$pcinit();

$es4.$$['flash.ui'].Keyboard.$$pcinit();

$es4.$$['flash.net'].XMLSocket.$$pcinit();

$es4.$$['flash.events'].ProgressEvent.$$pcinit();

$es4.$$['flash.net'].URLLoader.$$pcinit();

$es4.$$['flash.media'].Video.$$pcinit();

$es4.$$['flash.utils'].Endian.$$pcinit();

$es4.$$['flash.geom'].ColorTransform.$$pcinit();

$es4.$$['flash.geom'].Point.$$pcinit();

$es4.$$['flash.xml'].XMLNodeType.$$pcinit();})();

//sweetrush.Transcompiler
$es4.$$package('sweetrush').Transcompiler = (function ()
{
	//imports
	var Analyzer;
	var Lexer;
	var Parser;
	var TranslatorProto;
	var TranslatorPrototype;
	var Construct;
	var Token;
	var FileUtil;
	var SwcUtil;
	var FileUtil;
	var Sprite;

	//properties
	$es4.$$public_property('DEBUG', Transcompiler, Boolean);
	$es4.$$private_property('_swcs', Transcompiler, Object);

	//class initializer
	Transcompiler.$$cinit = (function ()
	{
		Transcompiler.$$cinit = undefined;

		//initialize imports
		Analyzer = $es4.$$['sweetrush.core'].Analyzer;
		Lexer = $es4.$$['sweetrush.core'].Lexer;
		Parser = $es4.$$['sweetrush.core'].Parser;
		TranslatorProto = $es4.$$['sweetrush.core'].TranslatorProto;
		TranslatorPrototype = $es4.$$['sweetrush.core'].TranslatorPrototype;
		Construct = $es4.$$['sweetrush.obj'].Construct;
		Token = $es4.$$['sweetrush.obj'].Token;
		FileUtil = $es4.$$['sweetrush.utils'].FileUtil;
		SwcUtil = $es4.$$['sweetrush.utils'].SwcUtil;
		Sprite = $es4.$$['flash.display'].Sprite;

		//initialize properties
		Transcompiler.DEBUG = true;
		Transcompiler._swcs = {builtin:{}, playerGlobal:{}};
	});

	function Transcompiler()
	{
		//initialize class if not initialized
		if (Transcompiler.$$cinit !== undefined) Transcompiler.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof Transcompiler) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Transcompiler) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
			$es4.$$super($$thisp).$$z();
		}));

		//method
		$es4.$$public_function('compileTranscompiler', $$thisp, (function ($$$$translationMode, $$$$platform)
		{
			//set default parameter values
			var translationMode = (0 > arguments.length - 1) ? 1 : $es4.$$coerce($$$$translationMode, Number);
			var platform = (1 > arguments.length - 1) ? 'node' : $es4.$$coerce($$$$platform, String);

			return $es4.$$call($$this, $$this, $$thisp, 'compile', [{srcDir:$es4.$$call(FileUtil, $$this, $$thisp, 'getBasePath', $es4.$$EMPTY_ARRAY), mainFile:"sweetrush/Transcompiler.as", compileConstants:{'CONFIG::air':'false', 'CONFIG::node':'true'}, includeBootstrap:true, includePlayerGlobal:true, expose:'as3_js', translationMode:translationMode, excludeDirectories:['_excluded', 'node_modules'], platform:platform}]);
		}));

		//method
		$es4.$$public_function('compile', $$thisp, (function ($$$$params)
		{
			//set default parameter values
			var params = $es4.$$coerce($$$$params, Object);

			var srcDir = $es4.$$coerce($es4.$$get(params, $$this, $$thisp, 'srcDir'), String);
			var mainFile = $es4.$$coerce($es4.$$get(params, $$this, $$thisp, 'mainFile'), String);
			var swcs = $es4.$$coerce($es4.$$get(params, $$this, $$thisp, 'swcs') || [], Array);
			var srcFiles = $es4.$$coerce($es4.$$get(params, $$this, $$thisp, 'srcFiles') || [], Array);
			var translationMode = $es4.$$coerce($es4.$$get(params, $$this, $$thisp, 'translationMode') === undefined ? 3 : $es4.$$get(params, $$this, $$thisp, 'translationMode'), Number);
			var compileConstants = $es4.$$get(params, $$this, $$thisp, 'compileConstants') || {};
			var release = $es4.$$coerce($es4.$$get(params, $$this, $$thisp, 'release'), Boolean);
			var rootConstructs = $es4.$$coerce($es4.$$get(params, $$this, $$thisp, 'rootConstructs') || [], Array);
			var swcOnly = $es4.$$coerce($es4.$$get(params, $$this, $$thisp, 'swcOnly'), Boolean);
			var excludeDirectories = $es4.$$coerce($es4.$$get(params, $$this, $$thisp, 'excludeDirectories') || [], Array);
			var includeBootstrap = $es4.$$coerce($es4.$$get(params, $$this, $$thisp, 'includeBootstrap') !== undefined ? $es4.$$get(params, $$this, $$thisp, 'includeBootstrap') : true, Boolean);
			var includePlayerGlobal = $es4.$$coerce($es4.$$get(params, $$this, $$thisp, 'includePlayerGlobal') !== undefined ? $es4.$$get(params, $$this, $$thisp, 'includePlayerGlobal') : includeBootstrap, Boolean);
			var expose = $es4.$$coerce($es4.$$get(params, $$this, $$thisp, 'expose'), String);
			var platform = $es4.$$coerce($es4.$$get(params, $$this, $$thisp, 'platform') || 'node', String);
			var special = $es4.$$coerce($es4.$$get(params, $$this, $$thisp, 'special'), Boolean);
			srcDir = $es4.$$coerce($es4.$$call(FileUtil, $$this, $$thisp, 'fixPath', [srcDir]), String);
			if (mainFile)
			{
				mainFile = $es4.$$coerce($es4.$$call(FileUtil, $$this, $$thisp, 'fixPath', [mainFile]), String);
			}
			if (!special)
			{
				for (var i = 0; i < $es4.$$get(swcs, $$this, $$thisp, 'length'); i++)
				{
					$es4.$$set(swcs, $$this, $$thisp, i, $es4.$$call(FileUtil, $$this, $$thisp, 'fixPath', [$es4.$$get(swcs, $$this, $$thisp, i)]), '=');
				}
			}
			var files = $es4.$$call($$thisp, $$this, $$thisp, 'getSrcFiles', [srcDir, srcFiles, excludeDirectories, platform]);
			var innerRootConstruct = null;
			if (!special)
			{
				innerRootConstruct = $es4.$$call($$thisp, $$this, $$thisp, 'getBuiltinSWC', [platform]);
				for (var $$i0 = (innerRootConstruct || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i0 != 0; $$i0 = innerRootConstruct.$$nextNameIndex($$i0))
				{
					var prop = innerRootConstruct.$$nextName($$i0);

					$es4.$$set(rootConstructs, $$this, $$thisp, prop, $es4.$$get(innerRootConstruct, $$this, $$thisp, prop), '=');
				}
				innerRootConstruct = $es4.$$call($$thisp, $$this, $$thisp, 'getPlayerGlobalSWC', [translationMode, platform]);
				for (var $$i1 = (innerRootConstruct || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i1 != 0; $$i1 = innerRootConstruct.$$nextNameIndex($$i1))
				{
					var prop = innerRootConstruct.$$nextName($$i1);

					$es4.$$set(rootConstructs, $$this, $$thisp, prop, $es4.$$get(innerRootConstruct, $$this, $$thisp, prop), '=');
				}
			}
			for (var i = 0; i < $es4.$$get(swcs, $$this, $$thisp, 'length'); i++)
			{
				innerRootConstruct = $es4.$$get(swcs, $$this, $$thisp, i);
				for (var $$i2 = (innerRootConstruct || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i2 != 0; $$i2 = innerRootConstruct.$$nextNameIndex($$i2))
				{
					var prop = innerRootConstruct.$$nextName($$i2);

					$es4.$$set(rootConstructs, $$this, $$thisp, prop, $es4.$$get(innerRootConstruct, $$this, $$thisp, prop), '=');
				}
			}
			var filePaths = {};
			var mainID;
			var rootConstructsToTranslate = {};
			var tokens;
			var rootConstruct;
			for (var $$i3 = (files || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i3 != 0; $$i3 = files.$$nextNameIndex($$i3))
			{
				var filePath = files.$$nextName($$i3);

				if ($es4.$$get(Transcompiler, $$this, $$thisp, 'DEBUG') >= 1)
				{
					trace('Lexing: ' + filePath);
				}
				tokens = $es4.$$get($es4.$$call(Lexer, $$this, $$thisp, 'lex', [$es4.$$get(files, $$this, $$thisp, filePath)]), $$this, $$thisp, 'tokens');
				if ($es4.$$get(Transcompiler, $$this, $$thisp, 'DEBUG') >= 1)
				{
					trace('Parsing: ' + filePath);
				}
				rootConstruct = $es4.$$call(Parser, $$this, $$thisp, 'parse', [tokens, compileConstants, release]);
				var id = $es4.$$call($es4.$$call($es4.$$call($es4.$$call(filePath, $$this, $$thisp, 'split', [srcDir]), $$this, $$thisp, 1, 'slice', [1, -3]), $$this, $$thisp, 'split', ['/']), $$this, $$thisp, 'join', ['.']);
				if (filePath == srcDir + '/' + mainFile)
				{
					mainID = id;
				}
				$es4.$$set(rootConstructsToTranslate, $$this, $$thisp, id, $es4.$$set(rootConstructs, $$this, $$thisp, id, rootConstruct, '='), '=');
				$es4.$$set(filePaths, $$this, $$thisp, id, filePath, '=');
			}
			if ($es4.$$get(Transcompiler, $$this, $$thisp, 'DEBUG') >= 1)
			{
				trace('Creating: swc');
			}
			var jsSWC = $es4.$$call(SwcUtil, $$this, $$thisp, 'stringifySWC', [rootConstructsToTranslate]);
			if (swcOnly)
			{
				return {js:null, rootConstructs:rootConstructsToTranslate, swc:jsSWC};
			}
			$es4.$$call($$thisp, $$this, $$thisp, 'normalizeWildcardImports', [rootConstructs]);
			var js = [];
			var translated = {interfaces:[], classes:[], methods:[], properties:[]};
			var mainJS = '//' + mainID + '\n';
			for (var $$i4 = (rootConstructsToTranslate || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i4 != 0; $$i4 = rootConstructsToTranslate.$$nextNameIndex($$i4))
			{
				var id = rootConstructsToTranslate.$$nextName($$i4);

				if ($es4.$$get(Transcompiler, $$this, $$thisp, 'DEBUG') >= 1)
				{
					trace('Analyzing: ' + $es4.$$get(filePaths, $$this, $$thisp, id));
				}
				var rootConstruct = $es4.$$call(Analyzer, $$this, $$thisp, 'analyze', [$es4.$$get(rootConstructsToTranslate, $$this, $$thisp, id), rootConstructs, translationMode]);
				if ($es4.$$get(Transcompiler, $$this, $$thisp, 'DEBUG') >= 1)
				{
					trace('Translating: ' + $es4.$$get(filePaths, $$this, $$thisp, id));
				}
				var innerJS = '//' + id + '\n';
				var translatedJS = (translationMode == 3) ? $es4.$$call(TranslatorPrototype, $$this, $$thisp, 'translate', [rootConstruct, rootConstructs, translationMode, release]) : $es4.$$call(TranslatorProto, $$this, $$thisp, 'translate', [rootConstruct, rootConstructs, translationMode, release]);
				innerJS += translatedJS + '//' + id + '\n';
				if (id == mainID)
				{
					mainJS += translatedJS + '//' + mainID + '\n';
				}
				else if ($es4.$$get(rootConstruct, $$this, $$thisp, 'packageConstruct', 'classConstruct'))
				{
					$es4.$$call(translated, $$this, $$thisp, 'classes', 'push', [innerJS]);
				}
				else if ($es4.$$get(rootConstruct, $$this, $$thisp, 'packageConstruct', 'interfaceConstruct'))
				{
					$es4.$$call(translated, $$this, $$thisp, 'interfaces', 'push', [innerJS]);
				}
				else if ($es4.$$get(rootConstruct, $$this, $$thisp, 'packageConstruct', 'methodConstruct'))
				{
					$es4.$$call(translated, $$this, $$thisp, 'methods', 'push', [innerJS]);
				}
				else if ($es4.$$get(rootConstruct, $$this, $$thisp, 'packageConstruct', 'propertyConstruct'))
				{
					$es4.$$call(translated, $$this, $$thisp, 'properties', 'push', [innerJS]);
				}
				else
				{
					throw $es4.$$primitive(new (Error)('unknown construct'));
				}
			}
			for (var i = 0; i < $es4.$$get(translated, $$this, $$thisp, 'properties', 'length'); i++)
			{
				$es4.$$call(js, $$this, $$thisp, 'push', [$es4.$$get(translated, $$this, $$thisp, 'properties', i)]);
			}
			if (mainID)
			{
				$es4.$$call(js, $$this, $$thisp, 'push', [mainJS]);
			}
			for (var i = 0; i < $es4.$$get(translated, $$this, $$thisp, 'classes', 'length'); i++)
			{
				$es4.$$call(js, $$this, $$thisp, 'push', [$es4.$$get(translated, $$this, $$thisp, 'classes', i)]);
			}
			for (var i = 0; i < $es4.$$get(translated, $$this, $$thisp, 'interfaces', 'length'); i++)
			{
				$es4.$$call(js, $$this, $$thisp, 'push', [$es4.$$get(translated, $$this, $$thisp, 'interfaces', i)]);
			}
			for (var i = 0; i < $es4.$$get(translated, $$this, $$thisp, 'methods', 'length'); i++)
			{
				$es4.$$call(js, $$this, $$thisp, 'push', [$es4.$$get(translated, $$this, $$thisp, 'methods', i)]);
			}
			translated = null;
			mainJS = null;
			for (var $$i5 = (rootConstructsToTranslate || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i5 != 0; $$i5 = rootConstructsToTranslate.$$nextNameIndex($$i5))
			{
				var id = rootConstructsToTranslate.$$nextName($$i5);

				if (!$es4.$$get(rootConstructsToTranslate, $$this, $$thisp, id, 'packageConstruct', 'interfaceConstruct'))
				{
					continue;
				}
				var parts = $es4.$$call(id, $$this, $$thisp, 'split', ['.']);
				var part = $es4.$$call(parts, $$this, $$thisp, 'pop', $es4.$$EMPTY_ARRAY);
				var packageName = ($es4.$$get(parts, $$this, $$thisp, 'length')) ? $es4.$$call(parts, $$this, $$thisp, 'join', ['.']) : '';
				$es4.$$call(js, $$this, $$thisp, 'push', ['$es4.$$[\'' + packageName + '\'].' + part + '.$$pcinit();']);
			}
			for (var $$i6 = (rootConstructsToTranslate || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i6 != 0; $$i6 = rootConstructsToTranslate.$$nextNameIndex($$i6))
			{
				var id = rootConstructsToTranslate.$$nextName($$i6);

				if ($es4.$$get(rootConstructsToTranslate, $$this, $$thisp, id, 'packageConstruct', 'interfaceConstruct') || $es4.$$get(rootConstructsToTranslate, $$this, $$thisp, id, 'packageConstruct', 'propertyConstruct'))
				{
					continue;
				}
				if ($es4.$$get(rootConstructsToTranslate, $$this, $$thisp, id, 'packageConstruct', 'classConstruct') && $es4.$$get(rootConstructsToTranslate, $$this, $$thisp, id, 'packageConstruct', 'classConstruct', 'UNIMPLEMENTEDToken'))
				{
					continue;
				}
				if ($es4.$$get(rootConstructsToTranslate, $$this, $$thisp, id, 'packageConstruct', 'methodConstruct') && ($es4.$$get(rootConstructsToTranslate, $$this, $$thisp, id, 'packageConstruct', 'methodConstruct', 'UNIMPLEMENTEDToken') || (!$es4.$$get(rootConstructsToTranslate, $$this, $$thisp, id, 'packageConstruct', 'methodConstruct', 'getToken') && !$es4.$$get(rootConstructsToTranslate, $$this, $$thisp, id, 'packageConstruct', 'methodConstruct', 'setToken'))))
				{
					continue;
				}
				var parts = $es4.$$call(id, $$this, $$thisp, 'split', ['.']);
				var part = $es4.$$call(parts, $$this, $$thisp, 'pop', $es4.$$EMPTY_ARRAY);
				var packageName = ($es4.$$get(parts, $$this, $$thisp, 'length')) ? $es4.$$call(parts, $$this, $$thisp, 'join', ['.']) : '';
				$es4.$$call(js, $$this, $$thisp, 'push', ['$es4.$$[\'' + packageName + '\'].' + part + '.$$pcinit();']);
			}
			if (translationMode === 3)
			{
				for (var $$i7 = (rootConstructsToTranslate || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i7 != 0; $$i7 = rootConstructsToTranslate.$$nextNameIndex($$i7))
				{
					var id = rootConstructsToTranslate.$$nextName($$i7);

					if (!$es4.$$get(rootConstructsToTranslate, $$this, $$thisp, id, 'packageConstruct', 'interfaceConstruct'))
					{
						continue;
					}
					if ($es4.$$get(rootConstructsToTranslate, $$this, $$thisp, id, 'packageConstruct', 'interfaceConstruct', 'UNIMPLEMENTEDToken'))
					{
						continue;
					}
					var parts = $es4.$$call(id, $$this, $$thisp, 'split', ['.']);
					var part = $es4.$$call(parts, $$this, $$thisp, 'pop', $es4.$$EMPTY_ARRAY);
					var packageName = ($es4.$$get(parts, $$this, $$thisp, 'length')) ? $es4.$$call(parts, $$this, $$thisp, 'join', ['.']) : '';
					$es4.$$call(js, $$this, $$thisp, 'push', ['if ($es4.$$[\'' + packageName + '\'].' + part + '.$$sinit !== undefined) $es4.$$[\'' + packageName + '\'].' + part + '.$$sinit();']);
				}
				for (var $$i8 = (rootConstructsToTranslate || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i8 != 0; $$i8 = rootConstructsToTranslate.$$nextNameIndex($$i8))
				{
					var id = rootConstructsToTranslate.$$nextName($$i8);

					if ($es4.$$get(rootConstructsToTranslate, $$this, $$thisp, id, 'packageConstruct', 'interfaceConstruct') || $es4.$$get(rootConstructsToTranslate, $$this, $$thisp, id, 'packageConstruct', 'propertyConstruct'))
					{
						continue;
					}
					if ($es4.$$get(rootConstructsToTranslate, $$this, $$thisp, id, 'packageConstruct', 'classConstruct') && $es4.$$get(rootConstructsToTranslate, $$this, $$thisp, id, 'packageConstruct', 'classConstruct', 'UNIMPLEMENTEDToken'))
					{
						continue;
					}
					if ($es4.$$get(rootConstructsToTranslate, $$this, $$thisp, id, 'packageConstruct', 'methodConstruct') && ($es4.$$get(rootConstructsToTranslate, $$this, $$thisp, id, 'packageConstruct', 'methodConstruct', 'UNIMPLEMENTEDToken') || (!$es4.$$get(rootConstructsToTranslate, $$this, $$thisp, id, 'packageConstruct', 'methodConstruct', 'getToken') && !$es4.$$get(rootConstructsToTranslate, $$this, $$thisp, id, 'packageConstruct', 'methodConstruct', 'setToken'))))
					{
						continue;
					}
					var parts = $es4.$$call(id, $$this, $$thisp, 'split', ['.']);
					var part = $es4.$$call(parts, $$this, $$thisp, 'pop', $es4.$$EMPTY_ARRAY);
					var packageName = ($es4.$$get(parts, $$this, $$thisp, 'length')) ? $es4.$$call(parts, $$this, $$thisp, 'join', ['.']) : '';
					$es4.$$call(js, $$this, $$thisp, 'push', ['if ($es4.$$[\'' + packageName + '\'].' + part + '.$$sinit !== undefined) $es4.$$[\'' + packageName + '\'].' + part + '.$$sinit();']);
				}
			}
			var returnObject = '';
			if (mainID)
			{
				var parts = $es4.$$call(mainID, $$this, $$thisp, 'split', ['.']);
				var name = $es4.$$call(parts, $$this, $$thisp, 'pop', $es4.$$EMPTY_ARRAY);
				var packageName = ($es4.$$get(parts, $$this, $$thisp, 'length')) ? $es4.$$call(parts, $$this, $$thisp, 'join', ['.']) : '';
				returnObject = "new $es4.$$['" + packageName + "']." + name + '($es4.$$MANUAL_CONSTRUCT)';
			}
			else
			{
				returnObject = "new $es4.$$['flash.display'].Sprite($es4.$$MANUAL_CONSTRUCT)";
			}
			var lastLine = '';
			if (expose)
			{
				var exposeAs = (platform != 'node') ? ('window.' + expose) : 'var _object = module.exports';
				lastLine = exposeAs + ' = ' + returnObject + '\n';
				lastLine += '$es4.$$construct(' + (platform != 'node' ? ('window.' + expose) : '_object') + ', $es4.$$EMPTY_ARRAY);\n';
				returnObject = (platform != 'node') ? ('window.' + expose) : '_object';
			}
			if (includeBootstrap && includePlayerGlobal && !mainFile)
			{
				lastLine += "$es4.$$['player'].Player;";
			}
			else
			{
				lastLine += returnObject + ';';
			}
			if (!special)
			{
				$es4.$$call(js, $$this, $$thisp, 'push', [lastLine]);
			}
			if ($es4.$$get(Transcompiler, $$this, $$thisp, 'DEBUG') >= 2)
			{
				trace('\nOutput: \n' + js);
			}
			var bootstrapJS = [];
			if (includeBootstrap)
			{
				var bootstrapJSFileDir = $es4.$$call(FileUtil, $$this, $$thisp, 'getExcludedPath', $es4.$$EMPTY_ARRAY) + '/bootstrap';
				var list = $es4.$$call(FileUtil, $$this, $$thisp, 'getList', [bootstrapJSFileDir, true, $es4.$$call(FileUtil, $$this, $$thisp, 'getListFilter_filters', [[$es4.$$call(FileUtil, $$this, $$thisp, 'getListFilter_directories', $es4.$$EMPTY_ARRAY), $es4.$$call(FileUtil, $$this, $$thisp, 'getListFilter_hidden', $es4.$$EMPTY_ARRAY), $es4.$$call(FileUtil, $$this, $$thisp, 'getListFilter_extension', ['js', true])]])]);
				for (var i = 0; i < $es4.$$get(list, $$this, $$thisp, 'length'); i++)
				{
					var filePath = $es4.$$call(FileUtil, $$this, $$thisp, 'fixPath', [$es4.$$get(list, $$this, $$thisp, i, 'src')]);
					var parts = $es4.$$call(filePath, $$this, $$thisp, 'split', ['.']);
					var found = $es4.$$get(parts, $$this, $$thisp, 'length') == 2;
					for (var j = 1; j < $es4.$$get(parts, $$this, $$thisp, 'length') - 1; j++)
					{
						if ($es4.$$get(parts, $$this, $$thisp, j) != platform)
						{
							continue;
						}
						found = true;
						break;
					}
					if (found)
					{
						$es4.$$call(bootstrapJS, $$this, $$thisp, 'push', [$es4.$$call(FileUtil, $$this, $$thisp, 'read', [filePath])]);
					}
				}
				if (includePlayerGlobal)
				{
					$es4.$$call(bootstrapJS, $$this, $$thisp, 'push', [$es4.$$call($$thisp, $$this, $$thisp, 'getPlayerGlobalJS', [translationMode, platform])]);
				}
			}
			var pre = (platform != 'node') ? '//__ES4__\n\n(function() { var $window = this; var window = $window.parent || $window; var global = window; var document = window.document; var $es4 = window.$es4 || (window.$es4 = {}); var _ = window._; var $ = window.$; var alert = window.alert; \n\n' : '';
			var post = (platform != 'node') ? '})();' : '';
			return {js:pre + $es4.$$call($es4.$$call(bootstrapJS, $$this, $$thisp, 'concat', [js]), $$this, $$thisp, 'join', ['\n\n']) + post, rootConstructs:rootConstructsToTranslate, swc:jsSWC};
		}));

		//method
		$es4.$$private_function('getSrcFiles', $$thisp, (function ($$$$srcDir, $$$$srcFiles, $$$$excludeDirectories, $$$$platform)
		{
			//set default parameter values
			var srcDir = $es4.$$coerce($$$$srcDir, String);
			var srcFiles = $es4.$$coerce($$$$srcFiles, Array);
			var excludeDirectories = $es4.$$coerce($$$$excludeDirectories, Array);
			var platform = $es4.$$coerce($$$$platform, String);

			var filters = [$es4.$$call(FileUtil, $$this, $$thisp, 'getListFilter_directories', $es4.$$EMPTY_ARRAY), $es4.$$call(FileUtil, $$this, $$thisp, 'getListFilter_hidden', $es4.$$EMPTY_ARRAY), $es4.$$call(FileUtil, $$this, $$thisp, 'getListFilter_extension', ['as', true])];
			for (var i = 0; i < $es4.$$get(excludeDirectories, $$this, $$thisp, 'length'); i++)
			{
				$es4.$$call(filters, $$this, $$thisp, 'push', [$es4.$$call(FileUtil, $$this, $$thisp, 'getListFilter_directory', [$es4.$$call(FileUtil, $$this, $$thisp, 'resolvePath', [srcDir, $es4.$$get(excludeDirectories, $$this, $$thisp, i)])])]);
			}
			var list = $es4.$$call(FileUtil, $$this, $$thisp, 'getList', [srcDir, true, $es4.$$call(FileUtil, $$this, $$thisp, 'getListFilter_filters', [filters])]);
			var files = {};
			for (var i = 0; i < $es4.$$get(list, $$this, $$thisp, 'length'); i++)
			{
				var filePath = $es4.$$call(FileUtil, $$this, $$thisp, 'fixPath', [$es4.$$get(list, $$this, $$thisp, i, 'src')]);
				var parts = $es4.$$call(filePath, $$this, $$thisp, 'split', ['.']);
				var found = $es4.$$get(parts, $$this, $$thisp, 'length') == 2;
				for (var j = 1; j < $es4.$$get(parts, $$this, $$thisp, 'length') - 1; j++)
				{
					if ($es4.$$get(parts, $$this, $$thisp, j) != platform)
					{
						continue;
					}
					found = true;
					filePath = $es4.$$get(parts, $$this, $$thisp, 0) + '.' + $es4.$$get(parts, $$this, $$thisp, $es4.$$get(parts, $$this, $$thisp, 'length') - 1);
					break;
				}
				if (!found)
				{
					continue;
				}
				if ($es4.$$get(srcFiles, $$this, $$thisp, 'length'))
				{
					var found = false;
					for (var j = 0; j < $es4.$$get(srcFiles, $$this, $$thisp, 'length'); j++)
					{
						if ($es4.$$call(filePath, $$this, $$thisp, 'indexOf', [$es4.$$get(srcFiles, $$this, $$thisp, j)]) != -1)
						{
							found = true;
							break;
						}
					}
					if (!found)
					{
						continue;
					}
				}
				$es4.$$set(files, $$this, $$thisp, $es4.$$call(FileUtil, $$this, $$thisp, 'fixPath', [filePath]), $es4.$$call(FileUtil, $$this, $$thisp, 'read', [$es4.$$call(FileUtil, $$this, $$thisp, 'fixPath', [$es4.$$get(list, $$this, $$thisp, i, 'src')])]), '=');
			}
			if ($es4.$$get(Transcompiler, $$this, $$thisp, 'DEBUG') >= 1)
			{
				trace('Normalizing Includes');
			}

			function insertIncludes($$$$filePath, $$$$fileContents, $$$$includes) 
			{
				//set default parameter values
				var filePath = $$$$filePath;
				var fileContents = $$$$fileContents;
				var includes = $$$$includes;

				return $es4.$$call(fileContents, $$this, $$thisp, 'replace', [/include\s*["|'][0-9A-Za-z._\/\\]+["|'];*/g, doReplace]);

				function doReplace($$$$match, $$$$offset, $$$$string) 
				{
					//set default parameter values
					var match = $$$$match;
					var offset = $$$$offset;
					var string = $$$$string;

					var includePath = $es4.$$get($es4.$$call(match, $$this, $$thisp, 'match', [/["|']([0-9A-Za-z._\/\\]+)["|']/]), $$this, $$thisp, 1);
					var parts = $es4.$$call($es4.$$call(FileUtil, $$this, $$thisp, 'fixPath', [filePath]), $$this, $$thisp, 'split', ['/']);
					$es4.$$call(parts, $$this, $$thisp, 'pop', $es4.$$EMPTY_ARRAY);
					var path = $es4.$$call(parts, $$this, $$thisp, 'join', ['/']);
					includePath = $es4.$$call(FileUtil, $$this, $$thisp, 'resolvePath', [path, includePath]);
					trace('found include: ' + includePath + ' in: ' + filePath);
					var parts = $es4.$$call(includePath, $$this, $$thisp, 'split', ['.']);
					var includeFilePath = $es4.$$get(parts, $$this, $$thisp, 0) + '.' + $es4.$$get(parts, $$this, $$thisp, $es4.$$get(parts, $$this, $$thisp, 'length') - 1);
					$es4.$$set(includes, $$this, $$thisp, includeFilePath, includeFilePath, '=');
					return insertIncludes(includePath, $es4.$$call(FileUtil, $$this, $$thisp, 'read', [includePath]), includes);
				}
;
			}
;

			var includes = {};
			for (var $$i9 = (files || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i9 != 0; $$i9 = files.$$nextNameIndex($$i9))
			{
				var filePath = files.$$nextName($$i9);

				$es4.$$set(files, $$this, $$thisp, filePath, insertIncludes(filePath, $es4.$$get(files, $$this, $$thisp, filePath), includes), '=');
			}
			for (var $$i10 = (includes || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i10 != 0; $$i10 = includes.$$nextNameIndex($$i10))
			{
				var filePath = includes.$$nextName($$i10);

				$es4.$$delete(files, $$this, $$thisp, filePath);
			}
			return files;
		}));

		//method
		$es4.$$private_function('normalizeWildcardImports', $$thisp, (function ($$$$rootConstructs)
		{
			//set default parameter values
			var rootConstructs = $es4.$$coerce($$$$rootConstructs, Object);

			if ($es4.$$get(Transcompiler, $$this, $$thisp, 'DEBUG') >= 1)
			{
				trace('Normalizing Imports');
			}
			for (var $$i11 = (rootConstructs || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i11 != 0; $$i11 = rootConstructs.$$nextNameIndex($$i11))
			{
				var id = rootConstructs.$$nextName($$i11);

				var innerRootConstruct = $es4.$$get(rootConstructs, $$this, $$thisp, id);
				var imports = [$es4.$$get(innerRootConstruct, $$this, $$thisp, 'importConstructs'), $es4.$$get(innerRootConstruct, $$this, $$thisp, 'packageConstruct', 'importConstructs')];
				while ($es4.$$get(imports, $$this, $$thisp, 'length'))
				{
					var importConstructs = $es4.$$call(imports, $$this, $$thisp, 'shift', $es4.$$EMPTY_ARRAY);
					var packages = [];
					for (var i = 0; i < $es4.$$get(importConstructs, $$this, $$thisp, 'length'); i++)
					{
						var importConstruct = $es4.$$get(importConstructs, $$this, $$thisp, i);
						if (!$es4.$$get(importConstruct, $$this, $$thisp, 'mulToken'))
						{
							continue;
						}
						$es4.$$call(importConstructs, $$this, $$thisp, 'splice', [i, 1]);
						i--;
						$es4.$$call(packages, $$this, $$thisp, 'push', [$es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [$es4.$$get(importConstruct, $$this, $$thisp, 'nameConstruct')])]);
					}
					while ($es4.$$get(packages, $$this, $$thisp, 'length'))
					{
						var packageName = $es4.$$call(packages, $$this, $$thisp, 'shift', $es4.$$EMPTY_ARRAY);
						for (var $$i12 = (rootConstructs || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i12 != 0; $$i12 = rootConstructs.$$nextNameIndex($$i12))
						{
							var innerId = rootConstructs.$$nextName($$i12);

							if ($es4.$$call(innerId, $$this, $$thisp, 'indexOf', [packageName]) != 0)
							{
								continue;
							}
							var importConstruct = $es4.$$call(Construct, $$this, $$thisp, 'getNewImportConstruct', $es4.$$EMPTY_ARRAY);
							var nameConstruct = $es4.$$call(Construct, $$this, $$thisp, 'getNewNameConstruct', $es4.$$EMPTY_ARRAY);
							var parts = $es4.$$call(innerId, $$this, $$thisp, 'split', ['.']);
							for (var j = 0; j < $es4.$$get(parts, $$this, $$thisp, 'length'); j++)
							{
								var identifierToken = $es4.$$call(Token, $$this, $$thisp, 'getNewToken', [$es4.$$get(Token, $$this, $$thisp, 'IdentifierTokenType'), $es4.$$get(parts, $$this, $$thisp, j)]);
								$es4.$$call(nameConstruct, $$this, $$thisp, 'identifierTokens', 'push', [identifierToken]);
							}
							$es4.$$set(importConstruct, $$this, $$thisp, 'nameConstruct', nameConstruct, '=');
							$es4.$$call(importConstructs, $$this, $$thisp, 'push', [importConstruct]);
						}
					}
				}
			}
		}));

		//method
		$es4.$$private_function('getBuiltinSWC', $$thisp, (function ($$$$platform)
		{
			//set default parameter values
			var platform = $es4.$$coerce($$$$platform, String);

			if ($es4.$$get(Transcompiler, $$this, $$thisp, '_swcs', 'builtin', platform))
			{
				return $es4.$$get(Transcompiler, $$this, $$thisp, '_swcs', 'builtin', platform);
			}
			var builtinSWCFile = $es4.$$call(FileUtil, $$this, $$thisp, 'getExcludedPath', $es4.$$EMPTY_ARRAY) + '/_generated/builtin.' + platform + '.swc';
			var builtinSWCString = $es4.$$coerce($es4.$$call(FileUtil, $$this, $$thisp, 'exists', [builtinSWCFile]) ? $es4.$$call(FileUtil, $$this, $$thisp, 'read', [builtinSWCFile]) : null, String);
			if (!builtinSWCString || !$es4.$$call(SwcUtil, $$this, $$thisp, 'isValidSWCString', [builtinSWCString]))
			{
				var srcDir = $es4.$$call(FileUtil, $$this, $$thisp, 'getExcludedPath', $es4.$$EMPTY_ARRAY) + '/builtin';
				var result = $es4.$$call($$this, $$this, $$thisp, 'compile', [{srcDir:srcDir, translationMode:1, special:true, includeBootstrap:false, includePlayerGlobal:false, platform:platform}]);
				$es4.$$call(FileUtil, $$this, $$thisp, 'write', [builtinSWCFile, $es4.$$get(result, $$this, $$thisp, 'swc')]);
				builtinSWCString = $es4.$$coerce($es4.$$get(result, $$this, $$thisp, 'swc'), String);
			}
			return $es4.$$set(Transcompiler, $$this, $$thisp, '_swcs', 'builtin', platform, $es4.$$call(SwcUtil, $$this, $$thisp, 'parseSWCString', [builtinSWCString]), '=');
		}));

		//method
		$es4.$$private_function('getPlayerGlobalSWC', $$thisp, (function ($$$$translationMode, $$$$platform)
		{
			//set default parameter values
			var translationMode = $es4.$$coerce($$$$translationMode, Number);
			var platform = $es4.$$coerce($$$$platform, String);

			if ($es4.$$get(Transcompiler, $$this, $$thisp, '_swcs', 'playerGlobal', platform + '_' + translationMode))
			{
				return $es4.$$get(Transcompiler, $$this, $$thisp, '_swcs', 'playerGlobal', platform + '_' + translationMode, 1);
			}
			var playerGlobalSWCFile = $es4.$$call(FileUtil, $$this, $$thisp, 'getExcludedPath', $es4.$$EMPTY_ARRAY) + '/_generated/playerglobal.' + platform + '.swc';
			var playerGlobalJSFile = $es4.$$call(FileUtil, $$this, $$thisp, 'getExcludedPath', $es4.$$EMPTY_ARRAY) + '/_generated/playerglobal.' + platform + '.' + translationMode + '.js';
			var playerGlobalSWCString = $es4.$$coerce($es4.$$call(FileUtil, $$this, $$thisp, 'exists', [playerGlobalSWCFile]) ? $es4.$$call(FileUtil, $$this, $$thisp, 'read', [playerGlobalSWCFile]) : null, String);
			var playerGlobalJS = $es4.$$coerce($es4.$$call(FileUtil, $$this, $$thisp, 'exists', [playerGlobalJSFile]) ? $es4.$$call(FileUtil, $$this, $$thisp, 'read', [playerGlobalJSFile]) : null, String);
			if (!playerGlobalSWCString || !playerGlobalJS || !$es4.$$call(SwcUtil, $$this, $$thisp, 'isValidSWCString', [playerGlobalSWCString]))
			{
				var srcDir = $es4.$$call(FileUtil, $$this, $$thisp, 'getExcludedPath', $es4.$$EMPTY_ARRAY) + '/playerglobal';
				var result = $es4.$$call($$this, $$this, $$thisp, 'compile', [{srcDir:srcDir, translationMode:translationMode, swcs:[$es4.$$call($$thisp, $$this, $$thisp, 'getBuiltinSWC', [platform])], special:true, includeBootstrap:false, includePlayerGlobal:false, platform:platform}]);
				$es4.$$call(FileUtil, $$this, $$thisp, 'write', [playerGlobalSWCFile, $es4.$$get(result, $$this, $$thisp, 'swc')]);
				$es4.$$call(FileUtil, $$this, $$thisp, 'write', [playerGlobalJSFile, $es4.$$get(result, $$this, $$thisp, 'js')]);
				playerGlobalSWCString = $es4.$$coerce($es4.$$get(result, $$this, $$thisp, 'swc'), String);
				playerGlobalJS = $es4.$$coerce($es4.$$get(result, $$this, $$thisp, 'js'), String);
			}
			$es4.$$set(Transcompiler, $$this, $$thisp, '_swcs', 'playerGlobal', platform + '_' + translationMode, [playerGlobalJS], '=');
			return $es4.$$set(Transcompiler, $$this, $$thisp, '_swcs', 'playerGlobal', platform + '_' + translationMode, 1, $es4.$$call(SwcUtil, $$this, $$thisp, 'parseSWCString', [playerGlobalSWCString]), '=');
		}));

		//method
		$es4.$$private_function('getPlayerGlobalJS', $$thisp, (function ($$$$translationMode, $$$$platform)
		{
			//set default parameter values
			var translationMode = $es4.$$coerce($$$$translationMode, Number);
			var platform = $es4.$$coerce($$$$platform, String);

			if (!$es4.$$get(Transcompiler, $$this, $$thisp, '_swcs', 'playerGlobal', platform + '_' + translationMode))
			{
				$es4.$$call($$thisp, $$this, $$thisp, 'getPlayerGlobalSWC', [translationMode, platform]);
			}
			return $es4.$$get(Transcompiler, $$this, $$thisp, '_swcs', 'playerGlobal', platform + '_' + translationMode, 0);
		}));

		//method
		$es4.$$public_function('getLexer', $$thisp, (function ()
		{
			return $es4.$$coerce(Lexer, Class);
		}));

		//method
		$es4.$$public_function('getParser', $$thisp, (function ()
		{
			return $es4.$$coerce(Parser, Class);
		}));

		//method
		$es4.$$public_function('getAnalyzer', $$thisp, (function ()
		{
			return $es4.$$coerce(Analyzer, Class);
		}));

		//method
		$es4.$$public_function('getTranslator', $$thisp, (function ($$$$prototype)
		{
			//set default parameter values
			var prototype = (0 > arguments.length - 1) ? true : $es4.$$coerce($$$$prototype, Boolean);

			return $es4.$$coerce(prototype ? TranslatorPrototype : TranslatorProto, Class);
		}));

		//method
		$es4.$$public_function('getSwcUtil', $$thisp, (function ()
		{
			return $es4.$$coerce(SwcUtil, Class);
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(Transcompiler, {EXTENDS:'flash.display.Sprite'}, 'sweetrush::Transcompiler');
})();
//sweetrush.Transcompiler


//sweetrush.obj.Token
$es4.$$package('sweetrush.obj').Token = (function ()
{
	//imports
	var Lexer;

	//properties
	$es4.$$private_property('whitespaceCharacters', Token, Object);
	$es4.$$private_property('identifierStartCharacters', Token, Object);
	Token.OpenParenTokenType = 'OpenParenTokenType';
	Token.ClosedParenTokenType = 'ClosedParenTokenType';
	Token.OpenBraceTokenType = 'OpenBraceTokenType';
	Token.ClosedBraceTokenType = 'ClosedBraceTokenType';
	Token.OpenBracketTokenType = 'OpenBracketTokenType';
	Token.ClosedBracketTokenType = 'ClosedBracketTokenType';
	Token.EOSTokenType = 'EOSTokenType';
	Token.PackageTokenType = 'PackageTokenType';
	Token.ImportTokenType = 'ImportTokenType';
	Token.ClassTokenType = 'ClassTokenType';
	Token.InterfaceTokenType = 'InterfaceTokenType';
	Token.NewTokenType = 'NewTokenType';
	Token.UseTokenType = 'UseTokenType';
	Token.CaseTokenType = 'CaseTokenType';
	Token.FunctionTokenType = 'FunctionTokenType';
	Token.GetTokenType = 'GetTokenType';
	Token.SetTokenType = 'SetTokenType';
	Token.RestTokenType = 'RestTokenType';
	Token.ExtendsTokenType = 'ExtendsTokenType';
	Token.ImplementsTokenType = 'ImplementsTokenType';
	Token.CommentTokenType = 'CommentTokenType';
	Token.CommentChunkTokenType = 'CommentChunkTokenType';
	Token.MultiLineCommentTokenType = 'MultiLineCommentTokenType';
	Token.MultiLineCommentChunkTokenType = 'MultiLineCommentChunkTokenType';
	Token.MultiLineCommentEndTokenType = 'MultiLineCommentEndTokenType';
	Token.OverrideTokenType = 'OverrideTokenType';
	Token.StaticTokenType = 'StaticTokenType';
	Token.DynamicTokenType = 'DynamicTokenType';
	Token.FinalTokenType = 'FinalTokenType';
	Token.VarTokenType = 'VarTokenType';
	Token.ConstTokenType = 'ConstTokenType';
	Token.IdentifierTokenType = 'IdentifierTokenType';
	Token.BooleanTokenType = 'BooleanTokenType';
	Token.ThisTokenType = 'ThisTokenType';
	Token.TypeofTokenType = 'TypeofTokenType';
	Token.NullTokenType = 'NullTokenType';
	Token.VoidTokenType = 'VoidTokenType';
	Token.UndefinedTokenType = 'UndefinedTokenType';
	Token.IsTokenType = 'IsTokenType';
	Token.NaNTokenType = 'NaNTokenType';
	Token.InstanceofTokenType = 'InstanceofTokenType';
	Token.ReturnTokenType = 'ReturnTokenType';
	Token.SwitchTokenType = 'SwitchTokenType';
	Token.SuperTokenType = 'SuperTokenType';
	Token.ThrowTokenType = 'ThrowTokenType';
	Token.DotDotTokenType = 'DotDotTokenType';
	Token.DotTokenType = 'DotTokenType';
	Token.NotTokenType = 'NotTokenType';
	Token.BitwiseNotTokenType = 'BitwiseNotTokenType';
	Token.ColonTokenType = 'ColonTokenType';
	Token.CommaTokenType = 'CommaTokenType';
	Token.TernaryTokenType = 'TernaryTokenType';
	Token.IncrementTokenType = 'IncrementTokenType';
	Token.DecrementTokenType = 'DecrementTokenType';
	Token.BreakTokenType = 'BreakTokenType';
	Token.ContinueTokenType = 'ContinueTokenType';
	Token.DefaultTokenType = 'DefaultTokenType';
	Token.InTokenType = 'InTokenType';
	Token.AsTokenType = 'AsTokenType';
	Token.DeleteTokenType = 'DeleteTokenType';
	Token.IfTokenType = 'IfTokenType';
	Token.ElseTokenType = 'ElseTokenType';
	Token.EachTokenType = 'EachTokenType';
	Token.ForTokenType = 'ForTokenType';
	Token.WhileTokenType = 'WhileTokenType';
	Token.DoTokenType = 'DoTokenType';
	Token.WithTokenType = 'WithTokenType';
	Token.TryTokenType = 'TryTokenType';
	Token.CatchTokenType = 'CatchTokenType';
	Token.RegExpTokenType = 'RegExpTokenType';
	Token.SpecialUFOTokenType = 'SpecialUFOTokenType';
	Token.FinallyTokenType = 'FinallyTokenType';
	Token.AtTokenType = 'AtTokenType';
	Token.BitwiseLeftShiftAssignmentTokenType = 'BitwiseLeftShiftAssignmentTokenType';
	Token.BitwiseRightShiftAssignmentTokenType = 'BitwiseRightShiftAssignmentTokenType';
	Token.BitwiseUnsignedRightShiftAssignmentTokenType = 'BitwiseUnsignedRightShiftAssignmentTokenType';
	Token.BitwiseAndAssignmentTokenType = 'BitwiseAndAssignmentTokenType';
	Token.BitwiseOrAssignmentTokenType = 'BitwiseOrAssignmentTokenType';
	Token.BitwiseXorAssignmentTokenType = 'BitwiseXorAssignmentTokenType';
	Token.AddWithAssignmentTokenType = 'AddWithAssignmentTokenType';
	Token.DivWithAssignmentTokenType = 'DivWithAssignmentTokenType';
	Token.ModWithAssignmentTokenType = 'ModWithAssignmentTokenType';
	Token.MulWithAssignmentTokenType = 'MulWithAssignmentTokenType';
	Token.SubWithAssignmentTokenType = 'SubWithAssignmentTokenType';
	Token.EqualityTokenType = 'EqualityTokenType';
	Token.RelationalTokenType = 'RelationalTokenType';
	Token.BitwiseAndTokenType = 'BitwiseAndTokenType';
	Token.BitwiseXorTokenType = 'BitwiseXorTokenType';
	Token.BitwiseOrTokenType = 'BitwiseOrTokenType';
	Token.AndTokenType = 'AndTokenType';
	Token.AndWithAssignmentTokenType = 'AndWithAssignmentTokenType';
	Token.OrTokenType = 'OrTokenType';
	Token.OrWithAssignmentTokenType = 'OrWithAssignmentTokenType';
	Token.BitwiseLeftShiftTokenType = 'BitwiseLeftShiftTokenType';
	Token.BitwiseRightShiftTokenType = 'BitwiseRightShiftTokenType';
	Token.BitwiseUnsignedRightShiftTokenType = 'BitwiseUnsignedRightShiftTokenType';
	Token.SubTokenType = 'SubTokenType';
	Token.AddTokenType = 'AddTokenType';
	Token.DivTokenType = 'DivTokenType';
	Token.MulTokenType = 'MulTokenType';
	Token.ModTokenType = 'ModTokenType';
	Token.AssignmentTokenType = 'AssignmentTokenType';
	Token.NamespaceKeywordTokenType = 'NamespaceKeywordTokenType';
	Token.XMLTokenType = 'XMLTokenType';
	Token.XMLIdentifierTokenType = 'XMLIdentifierTokenType';
	Token.XMLTextTokenType = 'XMLTextTokenType';
	Token.XMLCDATATokenType = 'XMLCDATATokenType';
	Token.XMLCDATAChunkTokenType = 'XMLCDATAChunkTokenType';
	Token.XMLCDATAEndTokenType = 'XMLCDATAEndTokenType';
	Token.XMLOpenArrowTokenType = 'XMLOpenArrowTokenType';
	Token.XMLClosedArrowTokenType = 'XMLClosedArrowTokenType';
	Token.XMLForwardSlashTokenType = 'XMLForwardSlashTokenType';
	Token.NamespaceQualifierTokenType = 'NamespaceQualifierTokenType';
	Token.VectorDotOpenArrowTokenType = 'VectorDotOpenArrowTokenType';
	Token.VectorClosedArrowTokenType = 'VectorClosedArrowTokenType';
	Token.StringTokenType = 'StringTokenType';
	Token.StringChunkTokenType = 'StringChunkTokenType';
	Token.StringMultiLineDelimiterTokenType = 'StringMultiLineDelimiterTokenType';
	Token.StringEndTokenType = 'StringEndTokenType';
	Token.NumberTokenType = 'NumberTokenType';
	Token.SpaceTokenType = 'SpaceTokenType';
	Token.TabTokenType = 'TabTokenType';
	Token.NewLineTokenType = 'NewLineTokenType';
	Token.UFOTokenType = 'UFOTokenType';
	$es4.$$public_property('tokenFunctions', Token, Object);

	//class initializer
	Token.$$cinit = (function ()
	{
		Token.$$cinit = undefined;

		//initialize imports
		Lexer = $es4.$$['sweetrush.core'].Lexer;

		//initialize properties
		Token.whitespaceCharacters = {'\u0020':true, '\u0009':true, '\u000A':true, '\u000C':true, '\u000D':true};
		Token.identifierStartCharacters = {'_':true, '$':true, 'a':true, 'b':true, 'c':true, 'd':true, 'e':true, 'f':true, 'g':true, 'h':true, 'i':true, 'j':true, 'k':true, 'l':true, 'm':true, 'n':true, 'o':true, 'p':true, 'q':true, 'r':true, 's':true, 't':true, 'u':true, 'v':true, 'w':true, 'x':true, 'y':true, 'z':true, 'A':true, 'B':true, 'C':true, 'D':true, 'E':true, 'F':true, 'G':true, 'H':true, 'I':true, 'J':true, 'K':true, 'L':true, 'M':true, 'N':true, 'O':true, 'P':true, 'Q':true, 'R':true, 'S':true, 'T':true, 'U':true, 'V':true, 'W':true, 'X':true, 'Y':true, 'Z':true};
		Token.tokenFunctions = {};
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'OpenParenTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ClosedParenTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'OpenBraceTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ClosedBraceTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'OpenBracketTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ClosedBracketTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'EOSTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'PackageTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ImportTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ClassTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'InterfaceTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'NewTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'UseTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'CaseTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'FunctionTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'GetTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'SetTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'RestTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ExtendsTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ImplementsTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'CommentTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'CommentChunkTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'MultiLineCommentTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'MultiLineCommentChunkTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'MultiLineCommentEndTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'OverrideTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'StaticTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'DynamicTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'FinalTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'VarTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ConstTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'IdentifierTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BooleanTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ThisTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'TypeofTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'NullTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'VoidTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'UndefinedTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'IsTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'NaNTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'InstanceofTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ReturnTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'SwitchTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'SuperTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ThrowTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'DotDotTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'DotTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'NotTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BitwiseNotTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ColonTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'CommaTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'TernaryTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'IncrementTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'DecrementTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BreakTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ContinueTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'DefaultTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'InTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'AsTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'DeleteTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'IfTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ElseTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'EachTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ForTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'WhileTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'DoTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'WithTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'TryTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'CatchTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'RegExpTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'SpecialUFOTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'FinallyTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'AtTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BitwiseLeftShiftAssignmentTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BitwiseRightShiftAssignmentTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BitwiseUnsignedRightShiftAssignmentTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BitwiseAndAssignmentTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BitwiseOrAssignmentTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BitwiseXorAssignmentTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'AddWithAssignmentTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'DivWithAssignmentTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ModWithAssignmentTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'MulWithAssignmentTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'SubWithAssignmentTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'EqualityTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'RelationalTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BitwiseAndTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BitwiseXorTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BitwiseOrTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'AndTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'AndWithAssignmentTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'OrTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'OrWithAssignmentTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BitwiseLeftShiftTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BitwiseRightShiftTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BitwiseUnsignedRightShiftTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'SubTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'AddTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'DivTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'MulTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ModTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'AssignmentTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'NamespaceKeywordTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'XMLTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'XMLIdentifierTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'XMLTextTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'XMLCDATATokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'XMLCDATAChunkTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'XMLCDATAEndTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'XMLOpenArrowTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'XMLClosedArrowTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'XMLForwardSlashTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'NamespaceQualifierTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'VectorDotOpenArrowTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'VectorClosedArrowTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'StringTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'StringChunkTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'StringMultiLineDelimiterTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'StringEndTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'NumberTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'SpaceTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'TabTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'NewLineTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'UFOTokenType'), {}, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'OpenParenTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) == '(') ? $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'OpenParenTokenType'), '(']), 0]) : null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ClosedParenTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) == ')') ? $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'ClosedParenTokenType'), ')']), 0]) : null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'OpenBraceTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) == '{') ? $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'OpenBraceTokenType'), '{']), 0]) : null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ClosedBraceTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) == '}') ? $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'ClosedBraceTokenType'), '}']), 0]) : null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'OpenBracketTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) == '[') ? $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'OpenBracketTokenType'), '[']), 0]) : null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ClosedBracketTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) == ']') ? $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'ClosedBracketTokenType'), ']']), 0]) : null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'EOSTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) == ';') ? $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'EOSTokenType'), ';']), 0]) : null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'PackageTokenType'), 'keyword', 'package', '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'PackageTokenType'), 'terminator', /^([\s]|\{)/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'PackageTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 'p' || $es4.$$call(input, null, null, 'charAt', [1]) != 'a') ? null : $es4.$$call(Token, null, null, 'keywordFind', [input, $es4.$$get(Token, null, null, 'PackageTokenType'), [$es4.$$get(Token, null, null, 'NewLineTokenType'), $es4.$$get(Token, null, null, 'TabTokenType'), $es4.$$get(Token, null, null, 'SpaceTokenType'), $es4.$$get(Token, null, null, 'IdentifierTokenType'), $es4.$$get(Token, null, null, 'DotTokenType')]]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ImportTokenType'), 'keyword', 'import', '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ImportTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 'i' || $es4.$$call(input, null, null, 'charAt', [1]) != 'm') ? null : $es4.$$call(Token, null, null, 'keywordFind2', [input, 'import', $es4.$$get(Token, null, null, 'ImportTokenType'), $es4.$$get(Token, null, null, 'identifierStartCharacters'), true]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ClassTokenType'), 'keyword', 'class', '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ClassTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 'c' || $es4.$$call(input, null, null, 'charAt', [1]) != 'l') ? null : $es4.$$call(Token, null, null, 'keywordFind2', [input, 'class', $es4.$$get(Token, null, null, 'ClassTokenType'), $es4.$$get(Token, null, null, 'identifierStartCharacters'), true]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'InterfaceTokenType'), 'keyword', 'interface', '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'InterfaceTokenType'), 'terminator', /^[\s]/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'InterfaceTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 'i' || $es4.$$call(input, null, null, 'charAt', [1]) != 'n') ? null : $es4.$$call(Token, null, null, 'keywordFind2', [input, 'interface', $es4.$$get(Token, null, null, 'InterfaceTokenType'), $es4.$$get(Token, null, null, 'identifierStartCharacters'), true]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'NewTokenType'), 'keyword', 'new', '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'NewTokenType'), 'terminator', /^[\s]/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'NewTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 'n' || $es4.$$call(input, null, null, 'charAt', [1]) != 'e') ? null : $es4.$$call(Token, null, null, 'keywordFind', [input, $es4.$$get(Token, null, null, 'NewTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'UseTokenType'), 'keyword', 'use', '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'UseTokenType'), 'terminator', /^[\s]/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'UseTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 'u' || $es4.$$call(input, null, null, 'charAt', [1]) != 's') ? null : $es4.$$call(Token, null, null, 'keywordFind', [input, $es4.$$get(Token, null, null, 'UseTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'CaseTokenType'), 'keyword', 'case', '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'CaseTokenType'), 'terminator', /^[\s]/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'CaseTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 'c' || $es4.$$call(input, null, null, 'charAt', [1]) != 'a') ? null : $es4.$$call(Token, null, null, 'keywordFind', [input, $es4.$$get(Token, null, null, 'CaseTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'FunctionTokenType'), 'keyword', 'function', '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'FunctionTokenType'), 'terminator', /^[\s]|\(/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'FunctionTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	if ($es4.$$call(input, null, null, 'charAt', [0]) != 'f')
	{
		return null;
	}
	var result = $es4.$$call(Token, null, null, 'keywordFind', [input, $es4.$$get(Token, null, null, 'FunctionTokenType'), [$es4.$$get(Token, null, null, 'NewLineTokenType'), $es4.$$get(Token, null, null, 'TabTokenType'), $es4.$$get(Token, null, null, 'SpaceTokenType'), $es4.$$get(Token, null, null, 'GetTokenType'), $es4.$$get(Token, null, null, 'SetTokenType'), $es4.$$get(Token, null, null, 'IdentifierTokenType')]]);
	if (!result)
	{
		return null;
	}
	var tokens = $es4.$$get(result, null, null, 'tokens');
	var index = $es4.$$get(result, null, null, 'index');
	result = $es4.$$call(Lexer, null, null, 'lex', [$es4.$$call(input, null, null, 'slice', [index + 1]), [$es4.$$get(Token, null, null, 'NewLineTokenType'), $es4.$$get(Token, null, null, 'TabTokenType'), $es4.$$get(Token, null, null, 'SpaceTokenType'), $es4.$$get(Token, null, null, 'OpenParenTokenType'), $es4.$$get(Token, null, null, 'ClosedParenTokenType'), $es4.$$get(Token, null, null, 'VectorDotOpenArrowTokenType'), $es4.$$get(Token, null, null, 'VectorClosedArrowTokenType'), $es4.$$get(Token, null, null, 'VoidTokenType'), $es4.$$get(Token, null, null, 'StringTokenType'), $es4.$$get(Token, null, null, 'BooleanTokenType'), $es4.$$get(Token, null, null, 'SubTokenType'), $es4.$$get(Token, null, null, 'AddTokenType'), $es4.$$get(Token, null, null, 'RestTokenType'), $es4.$$get(Token, null, null, 'NumberTokenType'), $es4.$$get(Token, null, null, 'NullTokenType'), $es4.$$get(Token, null, null, 'UndefinedTokenType'), $es4.$$get(Token, null, null, 'NaNTokenType'), $es4.$$get(Token, null, null, 'ColonTokenType'), $es4.$$get(Token, null, null, 'MulTokenType'), $es4.$$get(Token, null, null, 'CommaTokenType'), $es4.$$get(Token, null, null, 'AssignmentTokenType'), $es4.$$get(Token, null, null, 'IdentifierTokenType'), $es4.$$get(Token, null, null, 'DotTokenType')], true]);
	tokens = $es4.$$call(tokens, null, null, 'concat', [$es4.$$get(result, null, null, 'tokens')]);
	return $es4.$$call(Token, null, null, 'getNewResult', [tokens, $es4.$$get(result, null, null, 'index') + index]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'GetTokenType'), 'keyword', 'get', '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'GetTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 'g' || $es4.$$call(input, null, null, 'charAt', [1]) != 'e') ? null : $es4.$$call(Token, null, null, 'keywordFind2', [input, 'get', $es4.$$get(Token, null, null, 'GetTokenType'), $es4.$$get(Token, null, null, 'identifierStartCharacters'), true]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'SetTokenType'), 'keyword', 'set', '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'SetTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 's' || $es4.$$call(input, null, null, 'charAt', [1]) != 'e') ? null : $es4.$$call(Token, null, null, 'keywordFind2', [input, 'set', $es4.$$get(Token, null, null, 'SetTokenType'), $es4.$$get(Token, null, null, 'identifierStartCharacters'), true]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'RestTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != '.' || $es4.$$call(input, null, null, 'charAt', [1]) != '.') ? null : $es4.$$call(Token, null, null, 'keywordFind2', [input, '...', $es4.$$get(Token, null, null, 'RestTokenType'), $es4.$$get(Token, null, null, 'identifierStartCharacters'), false]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ExtendsTokenType'), 'keyword', 'extends', '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ExtendsTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 'e' || $es4.$$call(input, null, null, 'charAt', [1]) != 'x') ? null : $es4.$$call(Token, null, null, 'keywordFind2', [input, 'extends', $es4.$$get(Token, null, null, 'ExtendsTokenType'), $es4.$$get(Token, null, null, 'identifierStartCharacters'), true]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ImplementsTokenType'), 'keyword', 'implements', '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ImplementsTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 'i' || $es4.$$call(input, null, null, 'charAt', [1]) != 'm') ? null : $es4.$$call(Token, null, null, 'keywordFind2', [input, 'implements', $es4.$$get(Token, null, null, 'ImplementsTokenType'), $es4.$$get(Token, null, null, 'identifierStartCharacters'), true]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'CommentTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	if ($es4.$$call(input, null, null, 'charAt', [0]) != '/' || $es4.$$call(input, null, null, 'charAt', [1]) != '/')
	{
		return null;
	}
	var tokens = [];
	var i = 2;
	var commentChunk = '';
	var token = $es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'CommentTokenType'), $es4.$$call(input, null, null, 'charAt', [0]) + $es4.$$call(input, null, null, 'charAt', [1])]);
	$es4.$$call(tokens, null, null, 'push', [token]);
	while (i < $es4.$$get(input, null, null, 'length'))
	{
		if ($es4.$$call($es4.$$call(input, null, null, 'charAt', [i]), null, null, 'match', [/[\r\n]/]))
		{
			break;
		}
		commentChunk += $es4.$$call(input, null, null, 'charAt', [i]);
		i++;
	}
	if (i > 2)
	{
		token = $es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'CommentChunkTokenType'), commentChunk]);
		$es4.$$call(tokens, null, null, 'push', [token]);
	}
	return $es4.$$call(Token, null, null, 'getNewResult', [tokens, i - 1]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'MultiLineCommentTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	if ($es4.$$call(input, null, null, 'charAt', [0]) != '/' || $es4.$$call(input, null, null, 'charAt', [1]) != '*')
	{
		return null;
	}
	var tokens = [];
	var token = $es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'MultiLineCommentTokenType'), $es4.$$call(input, null, null, 'charAt', [0]) + $es4.$$call(input, null, null, 'charAt', [1])]);
	$es4.$$call(tokens, null, null, 'push', [token]);
	var i = 2;
	var lastChar;
	var commentChunk = '';
	while (i < $es4.$$get(input, null, null, 'length'))
	{
		if ($es4.$$call($es4.$$call(input, null, null, 'charAt', [i]), null, null, 'match', [/[\r\n]/]))
		{
			if ($es4.$$get(commentChunk, null, null, 'length') > 0)
			{
				token = $es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'MultiLineCommentChunkTokenType'), commentChunk]);
				$es4.$$call(tokens, null, null, 'push', [token]);
			}
			token = $es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'NewLineTokenType'), $es4.$$call(input, null, null, 'charAt', [i])]);
			$es4.$$call(tokens, null, null, 'push', [token]);
			commentChunk = '';
		}
		else if (lastChar == '*' && $es4.$$call(input, null, null, 'charAt', [i]) == '/')
		{
			commentChunk = $es4.$$call(commentChunk, null, null, 'slice', [0, $es4.$$get(commentChunk, null, null, 'length') - 1]);
			i--;
			break;
		}
		else
		{
			commentChunk += $es4.$$call(input, null, null, 'charAt', [i]);
		}
		lastChar = $es4.$$call(input, null, null, 'charAt', [i]);
		i++;
	}
	if ($es4.$$get(commentChunk, null, null, 'length') > 0)
	{
		token = $es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'MultiLineCommentChunkTokenType'), commentChunk]);
		$es4.$$call(tokens, null, null, 'push', [token]);
	}
	token = $es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'MultiLineCommentEndTokenType'), $es4.$$call(input, null, null, 'charAt', [i]) + $es4.$$call(input, null, null, 'charAt', [i + 1])]);
	$es4.$$call(tokens, null, null, 'push', [token]);
	return $es4.$$call(Token, null, null, 'getNewResult', [tokens, i + 1]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'OverrideTokenType'), 'keyword', 'override', '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'OverrideTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 'o' || $es4.$$call(input, null, null, 'charAt', [1]) != 'v') ? null : $es4.$$call(Token, null, null, 'keywordFind2', [input, 'override', $es4.$$get(Token, null, null, 'OverrideTokenType'), $es4.$$get(Token, null, null, 'identifierStartCharacters'), true]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'StaticTokenType'), 'keyword', 'static', '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'StaticTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 's' || $es4.$$call(input, null, null, 'charAt', [1]) != 't') ? null : $es4.$$call(Token, null, null, 'keywordFind2', [input, 'static', $es4.$$get(Token, null, null, 'StaticTokenType'), $es4.$$get(Token, null, null, 'identifierStartCharacters'), true]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'DynamicTokenType'), 'keyword', 'dynamic', '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'DynamicTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 'd' || $es4.$$call(input, null, null, 'charAt', [1]) != 'y') ? null : $es4.$$call(Token, null, null, 'keywordFind2', [input, 'dynamic', $es4.$$get(Token, null, null, 'DynamicTokenType'), $es4.$$get(Token, null, null, 'identifierStartCharacters'), true]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'FinalTokenType'), 'keyword', 'final', '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'FinalTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 'f' || $es4.$$call(input, null, null, 'charAt', [1]) != 'i') ? null : $es4.$$call(Token, null, null, 'keywordFind2', [input, 'final', $es4.$$get(Token, null, null, 'FinalTokenType'), $es4.$$get(Token, null, null, 'identifierStartCharacters'), true]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'VarTokenType'), 'keyword', 'var', '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'VarTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 'v' || $es4.$$call(input, null, null, 'charAt', [1]) != 'a') ? null : $es4.$$call(Token, null, null, 'keywordFind2', [input, 'var', $es4.$$get(Token, null, null, 'VarTokenType'), $es4.$$get(Token, null, null, 'identifierStartCharacters'), true]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ConstTokenType'), 'keyword', 'const', '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ConstTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 'c' || $es4.$$call(input, null, null, 'charAt', [1]) != 'o') ? null : $es4.$$call(Token, null, null, 'keywordFind2', [input, 'const', $es4.$$get(Token, null, null, 'ConstTokenType'), $es4.$$get(Token, null, null, 'identifierStartCharacters'), true]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'IdentifierTokenType'), 'regex', /^[a-zA-Z_$][a-zA-Z_0-9$]*/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'IdentifierTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'IdentifierTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BooleanTokenType'), 'regex', /^(true|false)(?![a-zA-Z0-9_])/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BooleanTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 't' && $es4.$$call(input, null, null, 'charAt', [0]) != 'f') ? null : $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'BooleanTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ThisTokenType'), 'regex', /^this(?![a-zA-Z0-9_])/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ThisTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 't' || $es4.$$call(input, null, null, 'charAt', [1]) != 'h') ? null : $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'ThisTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'TypeofTokenType'), 'regex', /^typeof(?![a-zA-Z0-9_])/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'TypeofTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 't' || $es4.$$call(input, null, null, 'charAt', [1]) != 'y') ? null : $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'TypeofTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'NullTokenType'), 'regex', /^null(?![a-zA-Z0-9_])/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'NullTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 'n' || $es4.$$call(input, null, null, 'charAt', [1]) != 'u') ? null : $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'NullTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'VoidTokenType'), 'regex', /^void(?![a-zA-Z0-9_])/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'VoidTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 'v' || $es4.$$call(input, null, null, 'charAt', [1]) != 'o') ? null : $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'VoidTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'UndefinedTokenType'), 'regex', /^undefined(?![a-zA-Z0-9_])/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'UndefinedTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 'u' || $es4.$$call(input, null, null, 'charAt', [1]) != 'n') ? null : $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'UndefinedTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'IsTokenType'), 'regex', /^is(?![a-zA-Z0-9_])/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'IsTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 'i' || $es4.$$call(input, null, null, 'charAt', [1]) != 's') ? null : $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'IsTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'NaNTokenType'), 'regex', /^NaN(?![a-zA-Z0-9_])/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'NaNTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 'N' || $es4.$$call(input, null, null, 'charAt', [1]) != 'a') ? null : $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'NaNTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'InstanceofTokenType'), 'regex', /^instanceof(?![a-zA-Z0-9_])/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'InstanceofTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 'i' || $es4.$$call(input, null, null, 'charAt', [1]) != 'n') ? null : $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'InstanceofTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ReturnTokenType'), 'regex', /^return(?![a-zA-Z0-9_])/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ReturnTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 'r' || $es4.$$call(input, null, null, 'charAt', [1]) != 'e') ? null : $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'ReturnTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'SwitchTokenType'), 'regex', /^switch(?![a-zA-Z0-9_])/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'SwitchTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 's' || $es4.$$call(input, null, null, 'charAt', [1]) != 'w') ? null : $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'SwitchTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'SuperTokenType'), 'regex', /^super(?![a-zA-Z0-9_])/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'SuperTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 's' || $es4.$$call(input, null, null, 'charAt', [1]) != 'u') ? null : $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'SuperTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ThrowTokenType'), 'regex', /^throw(?![a-zA-Z0-9_])/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ThrowTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 't' || $es4.$$call(input, null, null, 'charAt', [1]) != 'h') ? null : $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'ThrowTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'DotDotTokenType'), 'regex', /^\.\./, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'DotDotTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != '.' || $es4.$$call(input, null, null, 'charAt', [1]) != '.') ? null : $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'DotDotTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'DotTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) == '.') ? $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'DotTokenType'), '.']), 0]) : null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'NotTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) == '!') ? $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'NotTokenType'), '!']), 0]) : null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BitwiseNotTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) == '~') ? $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'BitwiseNotTokenType'), '~']), 0]) : null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ColonTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) == ':') ? $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'ColonTokenType'), ':']), 0]) : null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'CommaTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) == ',') ? $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'CommaTokenType'), ',']), 0]) : null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'TernaryTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) == '?') ? $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'TernaryTokenType'), '?']), 0]) : null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'IncrementTokenType'), 'regex', /^\+\+/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'IncrementTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != '+' || $es4.$$call(input, null, null, 'charAt', [1]) != '+') ? null : $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'IncrementTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'DecrementTokenType'), 'regex', /^\-\-/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'DecrementTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != '-' || $es4.$$call(input, null, null, 'charAt', [1]) != '-') ? null : $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'DecrementTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BreakTokenType'), 'regex', /^break(?![a-zA-Z0-9_])/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BreakTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 'b' || $es4.$$call(input, null, null, 'charAt', [1]) != 'r') ? null : $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'BreakTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ContinueTokenType'), 'regex', /^continue(?![a-zA-Z0-9_])/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ContinueTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 'c' || $es4.$$call(input, null, null, 'charAt', [1]) != 'o') ? null : $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'ContinueTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'DefaultTokenType'), 'regex', /^default(?![a-zA-Z0-9_])/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'DefaultTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 'd' || $es4.$$call(input, null, null, 'charAt', [1]) != 'e') ? null : $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'DefaultTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'InTokenType'), 'regex', /^in(?![a-zA-Z0-9_])/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'InTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 'i' || $es4.$$call(input, null, null, 'charAt', [1]) != 'n') ? null : $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'InTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'AsTokenType'), 'regex', /^as(?![a-zA-Z0-9_])/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'AsTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 'a' || $es4.$$call(input, null, null, 'charAt', [1]) != 's') ? null : $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'AsTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'DeleteTokenType'), 'regex', /^delete(?![a-zA-Z0-9_.(])/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'DeleteTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 'd' || $es4.$$call(input, null, null, 'charAt', [1]) != 'e') ? null : $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'DeleteTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'IfTokenType'), 'keyword', 'if', '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'IfTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 'i' || $es4.$$call(input, null, null, 'charAt', [1]) != 'f') ? null : $es4.$$call(Token, null, null, 'keywordFind2', [input, 'if', $es4.$$get(Token, null, null, 'IfTokenType'), '(', false]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ElseTokenType'), 'keyword', 'else', '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ElseTokenType'), 'terminator', /^([\s]|\{)/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ElseTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 'e' || $es4.$$call(input, null, null, 'charAt', [1]) != 'l') ? null : $es4.$$call(Token, null, null, 'keywordFind', [input, $es4.$$get(Token, null, null, 'ElseTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'EachTokenType'), 'keyword', 'each', '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'EachTokenType'), 'terminator', /^([\s]|\()/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'EachTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 'e' || $es4.$$call(input, null, null, 'charAt', [1]) != 'a') ? null : $es4.$$call(Token, null, null, 'keywordFind', [input, $es4.$$get(Token, null, null, 'EachTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ForTokenType'), 'keyword', 'for', '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ForTokenType'), 'terminator', /^([\s]|\()/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ForTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 'f' || $es4.$$call(input, null, null, 'charAt', [1]) != 'o') ? null : $es4.$$call(Token, null, null, 'keywordFind', [input, $es4.$$get(Token, null, null, 'ForTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'WhileTokenType'), 'keyword', 'while', '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'WhileTokenType'), 'terminator', /^([\s]|\()/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'WhileTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 'w' || $es4.$$call(input, null, null, 'charAt', [1]) != 'h') ? null : $es4.$$call(Token, null, null, 'keywordFind', [input, $es4.$$get(Token, null, null, 'WhileTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'DoTokenType'), 'keyword', 'do', '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'DoTokenType'), 'terminator', /^([\s]|\{)/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'DoTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 'd' || $es4.$$call(input, null, null, 'charAt', [1]) != 'o') ? null : $es4.$$call(Token, null, null, 'keywordFind', [input, $es4.$$get(Token, null, null, 'DoTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'WithTokenType'), 'keyword', 'with', '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'WithTokenType'), 'terminator', /^([\s]|\{)/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'WithTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 'w' || $es4.$$call(input, null, null, 'charAt', [1]) != 'i') ? null : $es4.$$call(Token, null, null, 'keywordFind', [input, $es4.$$get(Token, null, null, 'WithTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'TryTokenType'), 'keyword', 'try', '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'TryTokenType'), 'terminator', /^([\s]|\{)/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'TryTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 't' || $es4.$$call(input, null, null, 'charAt', [1]) != 'r') ? null : $es4.$$call(Token, null, null, 'keywordFind', [input, $es4.$$get(Token, null, null, 'TryTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'CatchTokenType'), 'keyword', 'catch', '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'CatchTokenType'), 'terminator', /^([\s]|\()/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'CatchTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	if ($es4.$$call(input, null, null, 'charAt', [0]) != 'c' || $es4.$$call(input, null, null, 'charAt', [1]) != 'a')
	{
		return null;
	}
	var result = $es4.$$call(Token, null, null, 'keywordFind', [input, $es4.$$get(Token, null, null, 'CatchTokenType'), [$es4.$$get(Token, null, null, 'NewLineTokenType'), $es4.$$get(Token, null, null, 'TabTokenType'), $es4.$$get(Token, null, null, 'SpaceTokenType')]]);
	if (!result)
	{
		return null;
	}
	var tokens = $es4.$$get(result, null, null, 'tokens');
	var index = $es4.$$get(result, null, null, 'index');
	result = $es4.$$call(Lexer, null, null, 'lex', [$es4.$$call(input, null, null, 'slice', [index + 1]), [$es4.$$get(Token, null, null, 'NewLineTokenType'), $es4.$$get(Token, null, null, 'TabTokenType'), $es4.$$get(Token, null, null, 'SpaceTokenType'), $es4.$$get(Token, null, null, 'OpenParenTokenType'), $es4.$$get(Token, null, null, 'ClosedParenTokenType'), $es4.$$get(Token, null, null, 'IdentifierTokenType'), $es4.$$get(Token, null, null, 'DotTokenType'), $es4.$$get(Token, null, null, 'ColonTokenType')], true]);
	tokens = $es4.$$call(tokens, null, null, 'concat', [$es4.$$get(result, null, null, 'tokens')]);
	return $es4.$$call(Token, null, null, 'getNewResult', [tokens, $es4.$$get(result, null, null, 'index') + index]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'RegExpTokenType'), 'find', function ($$$$input, $$$$foundTokens) 
{
		//set default parameter values
		var input = $$$$input;
		var foundTokens = $$$$foundTokens;

	if ($es4.$$call(input, null, null, 'charAt', [0]) != '/')
	{
		return null;
	}
	outer:	for (var j = $es4.$$get(foundTokens, null, null, 'length') - 1; j >= 0; j--)
	{
		var tokens = $es4.$$get(foundTokens, null, null, j);
		var token;
		var i;
		for (i = $es4.$$get(tokens, null, null, 'length') - 1; i >= 0; i--)
		{
			token = $es4.$$get(tokens, null, null, i);
			switch ($es4.$$get(token, null, null, 'type'))
			{
				case $es4.$$get(Token, null, null, 'SpaceTokenType'):
				case $es4.$$get(Token, null, null, 'TabTokenType'):
				case $es4.$$get(Token, null, null, 'NewLineTokenType'):
					break;
				case $es4.$$get(Token, null, null, 'EOSTokenType'):
				case $es4.$$get(Token, null, null, 'OpenBracketTokenType'):
				case $es4.$$get(Token, null, null, 'OpenParenTokenType'):
				case $es4.$$get(Token, null, null, 'EqualityTokenType'):
				case $es4.$$get(Token, null, null, 'BitwiseLeftShiftAssignmentTokenType'):
				case $es4.$$get(Token, null, null, 'BitwiseUnsignedRightShiftAssignmentTokenType'):
				case $es4.$$get(Token, null, null, 'BitwiseRightShiftAssignmentTokenType'):
				case $es4.$$get(Token, null, null, 'BitwiseLeftShiftTokenType'):
				case $es4.$$get(Token, null, null, 'BitwiseUnsignedRightShiftTokenType'):
				case $es4.$$get(Token, null, null, 'BitwiseRightShiftTokenType'):
				case $es4.$$get(Token, null, null, 'RelationalTokenType'):
				case $es4.$$get(Token, null, null, 'AddWithAssignmentTokenType'):
				case $es4.$$get(Token, null, null, 'DivWithAssignmentTokenType'):
				case $es4.$$get(Token, null, null, 'ModWithAssignmentTokenType'):
				case $es4.$$get(Token, null, null, 'MulWithAssignmentTokenType'):
				case $es4.$$get(Token, null, null, 'SubWithAssignmentTokenType'):
				case $es4.$$get(Token, null, null, 'AssignmentTokenType'):
				case $es4.$$get(Token, null, null, 'CommaTokenType'):
				case $es4.$$get(Token, null, null, 'DeleteTokenType'):
				case $es4.$$get(Token, null, null, 'InTokenType'):
				case $es4.$$get(Token, null, null, 'WithTokenType'):
				case $es4.$$get(Token, null, null, 'TypeofTokenType'):
				case $es4.$$get(Token, null, null, 'VoidTokenType'):
				case $es4.$$get(Token, null, null, 'ReturnTokenType'):
				case $es4.$$get(Token, null, null, 'ThrowTokenType'):
				case $es4.$$get(Token, null, null, 'NewTokenType'):
				case $es4.$$get(Token, null, null, 'CaseTokenType'):
				case $es4.$$get(Token, null, null, 'AndWithAssignmentTokenType'):
				case $es4.$$get(Token, null, null, 'OrWithAssignmentTokenType'):
				case $es4.$$get(Token, null, null, 'AndTokenType'):
				case $es4.$$get(Token, null, null, 'OrTokenType'):
				case $es4.$$get(Token, null, null, 'BitwiseAndAssignmentTokenType'):
				case $es4.$$get(Token, null, null, 'BitwiseOrAssignmentTokenType'):
				case $es4.$$get(Token, null, null, 'BitwiseXorAssignmentTokenType'):
				case $es4.$$get(Token, null, null, 'BitwiseAndTokenType'):
				case $es4.$$get(Token, null, null, 'BitwiseNotTokenType'):
				case $es4.$$get(Token, null, null, 'BitwiseOrTokenType'):
				case $es4.$$get(Token, null, null, 'BitwiseXorTokenType'):
				case $es4.$$get(Token, null, null, 'NotTokenType'):
				case $es4.$$get(Token, null, null, 'IncrementTokenType'):
				case $es4.$$get(Token, null, null, 'DecrementTokenType'):
				case $es4.$$get(Token, null, null, 'OpenBraceTokenType'):
				case $es4.$$get(Token, null, null, 'IsTokenType'):
				case $es4.$$get(Token, null, null, 'InstanceofTokenType'):
				case $es4.$$get(Token, null, null, 'AddTokenType'):
				case $es4.$$get(Token, null, null, 'RegExpTokenType'):
				case $es4.$$get(Token, null, null, 'SubTokenType'):
				case $es4.$$get(Token, null, null, 'DivTokenType'):
				case $es4.$$get(Token, null, null, 'MulTokenType'):
				case $es4.$$get(Token, null, null, 'ModTokenType'):
					break outer;
				default:
					return null;
			}
		}
	}
	var result = $es4.$$call(Lexer, null, null, 'lex', [$es4.$$call(input, null, null, 'slice', [1]), [$es4.$$get(Token, null, null, 'SpecialUFOTokenType')], true]);
	var previousToken;
	var tokens = $es4.$$get(result, null, null, 'tokens');
	var foundEnd = false;
	for (i = 0; i < $es4.$$get(tokens, null, null, 'length'); i++)
	{
		token = $es4.$$get(tokens, null, null, i);
		if (foundEnd)
		{
			if ($es4.$$get(token, null, null, 'data') == ',' || $es4.$$get(token, null, null, 'data') == ';' || $es4.$$get(token, null, null, 'data') == ']' || $es4.$$get(token, null, null, 'data') == ')' || $es4.$$get(token, null, null, 'data') == ']' || $es4.$$get(token, null, null, 'data') == '.' || $es4.$$get(token, null, null, 'data') == ' ' || $es4.$$get(token, null, null, 'data') == '	' || $es4.$$call(token, null, null, 'data', 'match', [/[\r\n]/]))
			{
				i++;
				break;
			}
		}
		else if ($es4.$$get(token, null, null, 'data') == '/' && previousToken && $es4.$$get(previousToken, null, null, 'data') != '\\')
		{
			foundEnd = true;
		}
		previousToken = token;
	}
	if (!foundEnd)
	{
		return null;
	}
	tokens = $es4.$$call(tokens, null, null, 'splice', [0, i - 1]);
	$es4.$$call(tokens, null, null, 'unshift', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'RegExpTokenType'), '/'])]);
	return $es4.$$call(Token, null, null, 'getNewResult', [tokens, i - 1]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'SpecialUFOTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	if ($es4.$$call(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'NewLineTokenType'), 'find', [input]) != null)
	{
		return null;
	}
	return $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'SpecialUFOTokenType'), $es4.$$call(input, null, null, 'charAt', [0])]), 0]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'FinallyTokenType'), 'keyword', 'finally', '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'FinallyTokenType'), 'terminator', /^([\s]|\{)/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'FinallyTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != 'f' || $es4.$$call(input, null, null, 'charAt', [1]) != 'i') ? null : $es4.$$call(Token, null, null, 'keywordFind', [input, $es4.$$get(Token, null, null, 'FinallyTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'AtTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) == '@') ? $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'AtTokenType'), '@']), 0]) : null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BitwiseLeftShiftAssignmentTokenType'), 'regex', /^<<=/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BitwiseLeftShiftAssignmentTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != '<' || $es4.$$call(input, null, null, 'charAt', [1]) != '<') ? null : $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'BitwiseLeftShiftAssignmentTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BitwiseRightShiftAssignmentTokenType'), 'regex', /^>>=/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BitwiseRightShiftAssignmentTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != '>' || $es4.$$call(input, null, null, 'charAt', [1]) != '>') ? null : $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'BitwiseRightShiftAssignmentTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BitwiseUnsignedRightShiftAssignmentTokenType'), 'regex', /^>>>=/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BitwiseUnsignedRightShiftAssignmentTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != '>' || $es4.$$call(input, null, null, 'charAt', [1]) != '>') ? null : $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'BitwiseUnsignedRightShiftAssignmentTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BitwiseAndAssignmentTokenType'), 'regex', /^&=/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BitwiseAndAssignmentTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != '&' || $es4.$$call(input, null, null, 'charAt', [1]) != '=') ? null : $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'BitwiseAndAssignmentTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BitwiseOrAssignmentTokenType'), 'regex', /^\|=/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BitwiseOrAssignmentTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != '|' || $es4.$$call(input, null, null, 'charAt', [1]) != '=') ? null : $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'BitwiseOrAssignmentTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BitwiseXorAssignmentTokenType'), 'regex', /^\^=/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BitwiseXorAssignmentTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != '^' || $es4.$$call(input, null, null, 'charAt', [1]) != '=') ? null : $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'BitwiseXorAssignmentTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'AddWithAssignmentTokenType'), 'regex', /^\+\=/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'AddWithAssignmentTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != '+' || $es4.$$call(input, null, null, 'charAt', [1]) != '=') ? null : $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'AddWithAssignmentTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'DivWithAssignmentTokenType'), 'regex', /^\/\=/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'DivWithAssignmentTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != '/' || $es4.$$call(input, null, null, 'charAt', [1]) != '=') ? null : $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'DivWithAssignmentTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ModWithAssignmentTokenType'), 'regex', /^\%\=/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ModWithAssignmentTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != '%' || $es4.$$call(input, null, null, 'charAt', [1]) != '=') ? null : $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'ModWithAssignmentTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'MulWithAssignmentTokenType'), 'regex', /^\*\=/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'MulWithAssignmentTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != '*' || $es4.$$call(input, null, null, 'charAt', [1]) != '=') ? null : $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'MulWithAssignmentTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'SubWithAssignmentTokenType'), 'regex', /^\-\=/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'SubWithAssignmentTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != '-' || $es4.$$call(input, null, null, 'charAt', [1]) != '=') ? null : $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'SubWithAssignmentTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'EqualityTokenType'), 'operators', ['===', '!==', '==', '!='], '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'EqualityTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	if ($es4.$$call(input, null, null, 'charAt', [0]) != '=' && $es4.$$call(input, null, null, 'charAt', [0]) != '!')
	{
		return null;
	}
	for (var i = 0; i < $es4.$$get(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'EqualityTokenType'), 'operators', 'length'); i++)
	{
		var operator = $es4.$$get(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'EqualityTokenType'), 'operators', i);
		var match = $es4.$$call(input, null, null, 'match', [$es4.$$primitive(new (RegExp)("^" + operator))]);
		if (!match)
		{
			continue;
		}
		var token = $es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'EqualityTokenType'), operator]);
		return $es4.$$call(Token, null, null, 'getNewResult', [token, $es4.$$get(operator, null, null, 'length') - 1]);
	}
	return null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'RelationalTokenType'), 'operators', ['>=', '>', '<=', '<'], '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'RelationalTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	if ($es4.$$call(input, null, null, 'charAt', [0]) != '>' && $es4.$$call(input, null, null, 'charAt', [0]) != '<')
	{
		return null;
	}
	for (var i = 0; i < $es4.$$get(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'RelationalTokenType'), 'operators', 'length'); i++)
	{
		var operator = $es4.$$get(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'RelationalTokenType'), 'operators', i);
		var match = $es4.$$call(input, null, null, 'match', [$es4.$$primitive(new (RegExp)("^" + operator))]);
		if (!match)
		{
			continue;
		}
		var token = $es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'RelationalTokenType'), operator]);
		return $es4.$$call(Token, null, null, 'getNewResult', [token, $es4.$$get(operator, null, null, 'length') - 1]);
	}
	return null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BitwiseAndTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) == '&') ? $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'BitwiseAndTokenType'), '&']), 0]) : null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BitwiseXorTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) == '^') ? $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'BitwiseXorTokenType'), '^']), 0]) : null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BitwiseOrTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) == '|') ? $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'BitwiseOrTokenType'), '|']), 0]) : null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'AndTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) == '&' && $es4.$$call(input, null, null, 'charAt', [1]) == '&') ? $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'AndTokenType'), '&&']), 1]) : null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'AndWithAssignmentTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) == '&' && $es4.$$call(input, null, null, 'charAt', [1]) == '&' && $es4.$$call(input, null, null, 'charAt', [2]) == '=') ? $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'AndWithAssignmentTokenType'), '&&=']), 2]) : null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'OrTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) == '|' && $es4.$$call(input, null, null, 'charAt', [1]) == '|') ? $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'OrTokenType'), '||']), 1]) : null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'OrWithAssignmentTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) == '|' && $es4.$$call(input, null, null, 'charAt', [1]) == '|' && $es4.$$call(input, null, null, 'charAt', [2]) == '=') ? $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'OrWithAssignmentTokenType'), '||=']), 2]) : null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BitwiseLeftShiftTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) == '<' && $es4.$$call(input, null, null, 'charAt', [1]) == '<') ? $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'BitwiseLeftShiftTokenType'), '<<']), 1]) : null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BitwiseRightShiftTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) == '>' && $es4.$$call(input, null, null, 'charAt', [1]) == '>') ? $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'BitwiseRightShiftTokenType'), '>>']), 1]) : null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'BitwiseUnsignedRightShiftTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) == '>' && $es4.$$call(input, null, null, 'charAt', [1]) == '>' && $es4.$$call(input, null, null, 'charAt', [2]) == '>') ? $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'BitwiseUnsignedRightShiftTokenType'), '>>>']), 2]) : null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'SubTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) == '-') ? $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'SubTokenType'), '-']), 0]) : null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'AddTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) == '+') ? $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'AddTokenType'), '+']), 0]) : null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'DivTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) == '/') ? $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'DivTokenType'), '/']), 0]) : null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'MulTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) == '*') ? $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'MulTokenType'), '*']), 0]) : null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'ModTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) == '%') ? $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'ModTokenType'), '%']), 0]) : null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'AssignmentTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) == '=') ? $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'AssignmentTokenType'), '=']), 0]) : null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'NamespaceKeywordTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) == 'n') ? $es4.$$call(Token, null, null, 'keywordFind2', [input, 'namespace', $es4.$$get(Token, null, null, 'NamespaceKeywordTokenType'), $es4.$$get(Token, null, null, 'identifierStartCharacters'), true]) : null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'XMLTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	if ($es4.$$call(input, null, null, 'charAt', [0]) != '<')
	{
		return null;
	}
	var isXMLList = $es4.$$call(input, null, null, 'charAt', [1]) == '>';
	var resultTokens = [];
	var index = -1;
	var openNodes = 0;
	while (true)
	{
		var result = $es4.$$call(Lexer, null, null, 'lex', [input, [$es4.$$get(Token, null, null, 'NewLineTokenType'), $es4.$$get(Token, null, null, 'TabTokenType'), $es4.$$get(Token, null, null, 'SpaceTokenType'), $es4.$$get(Token, null, null, 'StringTokenType'), $es4.$$get(Token, null, null, 'AssignmentTokenType'), $es4.$$get(Token, null, null, 'ColonTokenType'), $es4.$$get(Token, null, null, 'XMLOpenArrowTokenType'), $es4.$$get(Token, null, null, 'XMLIdentifierTokenType'), $es4.$$get(Token, null, null, 'XMLForwardSlashTokenType')], true]);
		if (!$es4.$$get(result, null, null, 'tokens', 'length'))
		{
			break;
		}
		if ($es4.$$call(input, null, null, 'charAt', [$es4.$$get(result, null, null, 'index')]) != '>')
		{
			break;
		}
		var tokens = $es4.$$call(result, null, null, 'tokens', 'concat', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'XMLClosedArrowTokenType'), '>'])]);
		input = $es4.$$call(input, null, null, 'slice', [$es4.$$get(result, null, null, 'index') + 1]);
		index += $es4.$$get(result, null, null, 'index') + 1;
		resultTokens = $es4.$$call(resultTokens, null, null, 'concat', [tokens]);
		if ($es4.$$get(tokens, null, null, 1, 'type') != $es4.$$get(Token, null, null, 'XMLForwardSlashTokenType'))
		{
			openNodes++;
		}
		if ($es4.$$get(tokens, null, null, 1, 'type') == $es4.$$get(Token, null, null, 'XMLForwardSlashTokenType'))
		{
			openNodes--;
		}
		else if ($es4.$$get(tokens, null, null, $es4.$$get(tokens, null, null, 'length') - 2, 'type') == $es4.$$get(Token, null, null, 'XMLForwardSlashTokenType'))
		{
			openNodes--;
		}
		if (!openNodes)
		{
			break;
		}
		if (isXMLList && openNodes == 1)
		{
			result = $es4.$$call(Lexer, null, null, 'lex', [input, [$es4.$$get(Token, null, null, 'NewLineTokenType'), $es4.$$get(Token, null, null, 'TabTokenType'), $es4.$$get(Token, null, null, 'SpaceTokenType')], true]);
			if (!$es4.$$get(result, null, null, 'tokens', 'length'))
			{
				continue;
			}
			input = $es4.$$call(input, null, null, 'slice', [$es4.$$get(result, null, null, 'index')]);
			index += $es4.$$get(result, null, null, 'index');
			resultTokens = $es4.$$call(resultTokens, null, null, 'concat', [$es4.$$get(result, null, null, 'tokens')]);
		}
		else
		{
			result = $es4.$$call(Lexer, null, null, 'lex', [input, [$es4.$$get(Token, null, null, 'XMLTextTokenType'), $es4.$$get(Token, null, null, 'XMLCDATATokenType')], true]);
			if (!$es4.$$get(result, null, null, 'tokens', 'length'))
			{
				continue;
			}
			input = $es4.$$call(input, null, null, 'slice', [$es4.$$get(result, null, null, 'index')]);
			index += $es4.$$get(result, null, null, 'index');
			resultTokens = $es4.$$call(resultTokens, null, null, 'concat', [$es4.$$get(result, null, null, 'tokens')]);
		}
	}
	if (openNodes || !$es4.$$get(resultTokens, null, null, 'length'))
	{
		return null;
	}
	return $es4.$$call(Token, null, null, 'getNewResult', [resultTokens, index]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'XMLIdentifierTokenType'), 'regex', /^[a-zA-Z_][a-zA-Z_0-9]*/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'XMLIdentifierTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'XMLIdentifierTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'XMLTextTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	if ($es4.$$call(input, null, null, 'charAt', [0]) == '<')
	{
		return null;
	}
	var token;
	var tokens = [];
	var i = 0;
	var chunk = '';
	while (i < $es4.$$get(input, null, null, 'length'))
	{
		if ($es4.$$call($es4.$$call(input, null, null, 'charAt', [i]), null, null, 'match', [/[\r\n]/]))
		{
			if ($es4.$$get(chunk, null, null, 'length') > 0)
			{
				token = $es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'XMLTextTokenType'), chunk]);
				$es4.$$call(tokens, null, null, 'push', [token]);
			}
			token = $es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'NewLineTokenType'), $es4.$$call(input, null, null, 'charAt', [i])]);
			$es4.$$call(tokens, null, null, 'push', [token]);
			chunk = '';
		}
		else if ($es4.$$call(input, null, null, 'charAt', [i]) == '<')
		{
			i--;
			break;
		}
		else
		{
			chunk += $es4.$$call(input, null, null, 'charAt', [i]);
		}
		i++;
	}
	if ($es4.$$get(chunk, null, null, 'length') > 0)
	{
		token = $es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'XMLTextTokenType'), chunk]);
		$es4.$$call(tokens, null, null, 'push', [token]);
	}
	return $es4.$$call(Token, null, null, 'getNewResult', [tokens, i]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'XMLCDATATokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	if ($es4.$$call(input, null, null, 'charAt', [0]) != '<' || $es4.$$call(input, null, null, 'charAt', [1]) != '!' || $es4.$$call(input, null, null, 'charAt', [2]) != '[' || $es4.$$call(input, null, null, 'indexOf', ['<![CDATA[']) != 0)
	{
		return null;
	}
	var tokens = [];
	var token = $es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'XMLCDATATokenType'), '<![CDATA[']);
	$es4.$$call(tokens, null, null, 'push', [token]);
	var i = 9;
	var chunk = '';
	while (i < $es4.$$get(input, null, null, 'length'))
	{
		if ($es4.$$call($es4.$$call(input, null, null, 'charAt', [i]), null, null, 'match', [/[\r\n]/]))
		{
			if ($es4.$$get(chunk, null, null, 'length') > 0)
			{
				token = $es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'XMLCDATAChunkTokenType'), chunk]);
				$es4.$$call(tokens, null, null, 'push', [token]);
			}
			token = $es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'NewLineTokenType'), $es4.$$call(input, null, null, 'charAt', [i])]);
			$es4.$$call(tokens, null, null, 'push', [token]);
			chunk = '';
		}
		else if ($es4.$$call(input, null, null, 'charAt', [i - 2]) == ']' && $es4.$$call(input, null, null, 'charAt', [i - 1]) == ']' && $es4.$$call(input, null, null, 'charAt', [i]) == '>')
		{
			chunk = $es4.$$call(chunk, null, null, 'slice', [0, $es4.$$get(chunk, null, null, 'length') - 2]);
			break;
		}
		else
		{
			chunk += $es4.$$call(input, null, null, 'charAt', [i]);
		}
		i++;
	}
	if ($es4.$$get(chunk, null, null, 'length') > 0)
	{
		token = $es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'XMLCDATAChunkTokenType'), chunk]);
		$es4.$$call(tokens, null, null, 'push', [token]);
	}
	token = $es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'XMLCDATAEndTokenType'), ']]>']);
	$es4.$$call(tokens, null, null, 'push', [token]);
	return $es4.$$call(Token, null, null, 'getNewResult', [tokens, i]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'XMLOpenArrowTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) == '<') ? $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'XMLOpenArrowTokenType'), '<']), 0]) : null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'XMLClosedArrowTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) == '>') ? $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'XMLClosedArrowTokenType'), '>']), 0]) : null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'XMLForwardSlashTokenType'), 'regex', /^\//, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'XMLForwardSlashTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != '/') ? null : $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'XMLForwardSlashTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'NamespaceQualifierTokenType'), 'regex', /^::/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'NamespaceQualifierTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) != ':' || $es4.$$call(input, null, null, 'charAt', [1]) != ':') ? null : $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'NamespaceQualifierTokenType')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'VectorDotOpenArrowTokenType'), 'regex', /^\.\</, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'VectorDotOpenArrowTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	if ($es4.$$call(input, null, null, 'charAt', [0]) != '.')
	{
		return null;
	}
	var result = $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'VectorDotOpenArrowTokenType')]);
	if (!result)
	{
		return null;
	}
	var tokens = $es4.$$get(result, null, null, 'tokens');
	var index = $es4.$$get(result, null, null, 'index');
	result = $es4.$$call(Lexer, null, null, 'lex', [$es4.$$call(input, null, null, 'slice', [index + 1]), [$es4.$$get(Token, null, null, 'NewLineTokenType'), $es4.$$get(Token, null, null, 'TabTokenType'), $es4.$$get(Token, null, null, 'SpaceTokenType'), $es4.$$get(Token, null, null, 'IdentifierTokenType'), $es4.$$get(Token, null, null, 'DotTokenType'), $es4.$$get(Token, null, null, 'VectorClosedArrowTokenType')], true]);
	tokens = $es4.$$call(tokens, null, null, 'concat', [$es4.$$get(result, null, null, 'tokens')]);
	return $es4.$$call(Token, null, null, 'getNewResult', [tokens, $es4.$$get(result, null, null, 'index') + index]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'VectorClosedArrowTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) == '>') ? $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'VectorClosedArrowTokenType'), '>']), 0]) : null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'StringTokenType'), 'prefixAllowed', ["'", '"'], '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'StringTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	if ($es4.$$call(input, null, null, 'charAt', [0]) != "'" && $es4.$$call(input, null, null, 'charAt', [0]) != '"')
	{
		return null;
	}
	var tokens = [];
	var token = $es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'StringTokenType'), $es4.$$call(input, null, null, 'charAt', [0])]);
	$es4.$$call(tokens, null, null, 'push', [token]);
	var i = 1;
	var ignore = false;
	var lastChar;
	var stringChunk = '';
	while (i < $es4.$$get(input, null, null, 'length') && ($es4.$$call(input, null, null, 'charAt', [0]) != $es4.$$call(input, null, null, 'charAt', [i]) || ignore))
	{
		if (lastChar == '\\' && $es4.$$call($es4.$$call(input, null, null, 'charAt', [i]), null, null, 'match', [/[\r\n]/]) && !ignore)
		{
			if ($es4.$$get(stringChunk, null, null, 'length') - 1 > 0)
			{
				token = $es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'StringChunkTokenType'), $es4.$$call(stringChunk, null, null, 'slice', [0, $es4.$$get(stringChunk, null, null, 'length') - 1])]);
				$es4.$$call(tokens, null, null, 'push', [token]);
			}
			token = $es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'StringMultiLineDelimiterTokenType'), lastChar]);
			$es4.$$call(tokens, null, null, 'push', [token]);
			token = $es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'NewLineTokenType'), $es4.$$call(input, null, null, 'charAt', [i])]);
			$es4.$$call(tokens, null, null, 'push', [token]);
			stringChunk = '';
		}
		else
		{
			stringChunk += $es4.$$call(input, null, null, 'charAt', [i]);
		}
		lastChar = $es4.$$call(input, null, null, 'charAt', [i]);
		ignore = lastChar == '\\' && !ignore;
		i++;
	}
	if ($es4.$$get(stringChunk, null, null, 'length') > 0)
	{
		token = $es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'StringChunkTokenType'), stringChunk]);
		$es4.$$call(tokens, null, null, 'push', [token]);
	}
	token = $es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'StringEndTokenType'), $es4.$$call(input, null, null, 'charAt', [i])]);
	$es4.$$call(tokens, null, null, 'push', [token]);
	return $es4.$$call(Token, null, null, 'getNewResult', [tokens, i]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'NumberTokenType'), 'regex1', /^([0-9]|[\.][0-9\.]+)[0-9\.]*(e[+-][0-9]+)*/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'NumberTokenType'), 'regex2', /^0x[a-fA-F0-9]+/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'NumberTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	if ($es4.$$call(input, null, null, 'charAt', [0]) == '0' && $es4.$$call(input, null, null, 'charAt', [1]) == 'x')
	{
		return $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'NumberTokenType'), $es4.$$get(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'NumberTokenType'), 'regex2')]);
	}
	if ($es4.$$call(input, null, null, 'charAt', [0]) != '0' && $es4.$$call(input, null, null, 'charAt', [0]) != '1' && $es4.$$call(input, null, null, 'charAt', [0]) != '2' && $es4.$$call(input, null, null, 'charAt', [0]) != '3' && $es4.$$call(input, null, null, 'charAt', [0]) != '4' && $es4.$$call(input, null, null, 'charAt', [0]) != '5' && $es4.$$call(input, null, null, 'charAt', [0]) != '6' && $es4.$$call(input, null, null, 'charAt', [0]) != '7' && $es4.$$call(input, null, null, 'charAt', [0]) != '8' && $es4.$$call(input, null, null, 'charAt', [0]) != '9' && $es4.$$call(input, null, null, 'charAt', [0]) != '.')
	{
		return;
	}
	return $es4.$$call(Token, null, null, 'regexFind', [input, $es4.$$get(Token, null, null, 'NumberTokenType'), $es4.$$get(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'NumberTokenType'), 'regex1')]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'SpaceTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) == ' ') ? $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'SpaceTokenType'), ' ']), 0]) : null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'TabTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return ($es4.$$call(input, null, null, 'charAt', [0]) == '	') ? $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'TabTokenType'), '	']), 0]) : null;
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'NewLineTokenType'), 'regex', /[\r\n]/, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'NewLineTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	var tokens;
	var index = -1;
	while ($es4.$$call($es4.$$call(input, null, null, 'charAt', [index + 1]), null, null, 'match', [$es4.$$get(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'NewLineTokenType'), 'regex')]))
	{
		if (!tokens)
		{
			tokens = [];
		}
		$es4.$$call(tokens, null, null, 'push', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'NewLineTokenType'), $es4.$$call(input, null, null, 'charAt', [index + 1])])]);
		index++;
	}
	return (index == -1) ? null : $es4.$$call(Token, null, null, 'getNewResult', [tokens, index]);
}
, '=');
		$es4.$$set(Token, null, null, 'tokenFunctions', $es4.$$get(Token, null, null, 'UFOTokenType'), 'find', function ($$$$input) 
{
		//set default parameter values
		var input = $$$$input;

	return $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'UFOTokenType'), $es4.$$call(input, null, null, 'charAt', [0])]), 0]);
}
, '=');
	});

	//method
	$es4.$$public_function('getNewToken', Token, (function ($$$$type, $$$$data)
	{
		if (Token.$$cinit !== undefined) Token.$$cinit();

		//set default parameter values
		var type = $es4.$$coerce($$$$type, String);
		var data = $$$$data;

		return {constructor:"token", type:type, data:data, line:NaN, position:NaN};
	}));

	//method
	$es4.$$public_function('getNewResult', Token, (function ($$$$tokens, $$$$index)
	{
		if (Token.$$cinit !== undefined) Token.$$cinit();

		//set default parameter values
		var tokens = $$$$tokens;
		var index = $es4.$$coerce($$$$index, Number);

		if (!($es4.$$is(tokens, Array)))
		{
			tokens = [tokens];
		}
		return {tokens:tokens, index:index};
	}));

	//method
	$es4.$$public_function('keywordFind2', Token, (function ($$$$input, $$$$keyword, $$$$TokenType, $$$$matchNext, $$$$requireWhitespace)
	{
		if (Token.$$cinit !== undefined) Token.$$cinit();

		//set default parameter values
		var input = $$$$input;
		var keyword = $$$$keyword;
		var TokenType = $$$$TokenType;
		var matchNext = $$$$matchNext;
		var requireWhitespace = $es4.$$coerce($$$$requireWhitespace, Boolean);

		if ($es4.$$call(input, null, null, 'substring', [0, $es4.$$get(keyword, null, null, 'length')]) != keyword)
		{
			return null;
		}
		var cur = null;
		var whitespace = 0;
		var inputLength = $es4.$$get(input, null, null, 'length');
		for (var i = $es4.$$get(keyword, null, null, 'length'); i < inputLength; i++)
		{
			cur = $es4.$$call(input, null, null, 'charAt', [i]);
			if ($es4.$$get(Token, null, null, 'whitespaceCharacters', cur) === undefined)
			{
				break;
			}
			whitespace++;
		}
		if (requireWhitespace && whitespace === 0)
		{
			return null;
		}
		if ($es4.$$is(matchNext, String))
		{
			if (cur != matchNext)
			{
				return null;
			}
		}
		else
		{
			if ($es4.$$get(matchNext, null, null, cur) === undefined)
			{
				return null;
			}
		}
		return $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [TokenType, keyword]), $es4.$$get(keyword, null, null, 'length') - 1]);
	}));

	//method
	$es4.$$public_function('keywordFind', Token, (function ($$$$input, $$$$TokenType, $$$$grammer)
	{
		if (Token.$$cinit !== undefined) Token.$$cinit();

		//set default parameter values
		var input = $$$$input;
		var TokenType = $$$$TokenType;
		var grammer = (2 > arguments.length - 1) ? null : $$$$grammer;

		for (var i = 0; i < $es4.$$get(Token, null, null, 'tokenFunctions', TokenType, 'keyword', 'length'); i++)
		{
			if ($es4.$$call(Token, null, null, 'tokenFunctions', TokenType, 'keyword', 'charAt', [i]) !== $es4.$$call(input, null, null, 'charAt', [i]))
			{
				return null;
			}
		}
		if (!$es4.$$call($es4.$$call(input, null, null, 'charAt', [i]), null, null, 'match', [$es4.$$get(Token, null, null, 'tokenFunctions', TokenType, 'terminator')]))
		{
			return null;
		}
		if (!grammer)
		{
			return $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [TokenType, $es4.$$get(Token, null, null, 'tokenFunctions', TokenType, 'keyword')]), $es4.$$get(Token, null, null, 'tokenFunctions', TokenType, 'keyword', 'length') - 1]);
		}
		var result = $es4.$$call(Lexer, null, null, 'lex', [$es4.$$call(input, null, null, 'slice', [$es4.$$get(Token, null, null, 'tokenFunctions', TokenType, 'keyword', 'length')]), grammer, true]);
		$es4.$$call(result, null, null, 'tokens', 'unshift', [$es4.$$call(Token, null, null, 'getNewToken', [TokenType, $es4.$$get(Token, null, null, 'tokenFunctions', TokenType, 'keyword')])]);
		return $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$get(result, null, null, 'tokens'), $es4.$$get(result, null, null, 'index') + $es4.$$get(Token, null, null, 'tokenFunctions', TokenType, 'keyword', 'length') - 1]);
	}));

	//method
	$es4.$$public_function('regexFind', Token, (function ($$$$input, $$$$TokenType, $$$$regex)
	{
		if (Token.$$cinit !== undefined) Token.$$cinit();

		//set default parameter values
		var input = $$$$input;
		var TokenType = $$$$TokenType;
		var regex = (2 > arguments.length - 1) ? null : $$$$regex;

		if (!regex)
		{
			regex = $es4.$$get(Token, null, null, 'tokenFunctions', TokenType, 'regex');
		}
		var match = $es4.$$call(input, null, null, 'match', [regex]);
		if (!match)
		{
			return null;
		}
		return $es4.$$call(Token, null, null, 'getNewResult', [$es4.$$call(Token, null, null, 'getNewToken', [TokenType, $es4.$$get(match, null, null, 0)]), $es4.$$get(match, null, null, 0, 'length') - 1]);
	}));

	function Token()
	{
		//initialize class if not initialized
		if (Token.$$cinit !== undefined) Token.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof Token) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Token) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(Token, null, 'sweetrush.obj::Token');
})();
//sweetrush.obj.Token


//sweetrush.core.TranslatorPrototype
$es4.$$package('sweetrush.core').TranslatorPrototype = (function ()
{
	//imports
	var Construct;
	var Token;
	var Base64Util;
	var Analyzer;
	var TranslatorPrototype;
	var FileUtil;
	var SwcUtil;
	var Construct;
	var TranslatorProto;
	var Lexer;
	var JsonUtil;
	var Token;
	var Parser;
	var Transcompiler;

	//class initializer
	TranslatorPrototype.$$cinit = (function ()
	{
		TranslatorPrototype.$$cinit = undefined;

		//initialize imports
		Construct = $es4.$$['sweetrush.obj'].Construct;
		Token = $es4.$$['sweetrush.obj'].Token;
		Base64Util = $es4.$$['sweetrush.utils'].Base64Util;
		Analyzer = $es4.$$['sweetrush.core'].Analyzer;
		FileUtil = $es4.$$['sweetrush.utils'].FileUtil;
		SwcUtil = $es4.$$['sweetrush.utils'].SwcUtil;
		TranslatorProto = $es4.$$['sweetrush.core'].TranslatorProto;
		Lexer = $es4.$$['sweetrush.core'].Lexer;
		JsonUtil = $es4.$$['sweetrush.utils'].JsonUtil;
		Parser = $es4.$$['sweetrush.core'].Parser;
		Transcompiler = $es4.$$['sweetrush'].Transcompiler;
	});

	//method
	$es4.$$public_function('translate', TranslatorPrototype, (function ($$$$rootConstruct, $$$$rootConstructs, $$$$dynamicPropertyAccess, $$$$release, $$$$fastPropertyAccess)
	{
		if (TranslatorPrototype.$$cinit !== undefined) TranslatorPrototype.$$cinit();

		//set default parameter values
		var rootConstruct = $$$$rootConstruct;
		var rootConstructs = $$$$rootConstructs;
		var dynamicPropertyAccess = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$dynamicPropertyAccess, Boolean);
		var release = (3 > arguments.length - 1) ? false : $es4.$$coerce($$$$release, Boolean);
		var fastPropertyAccess = (4 > arguments.length - 1) ? false : $es4.$$coerce($$$$fastPropertyAccess, Boolean);

		var _rootConstruct = rootConstruct;
		var _rootConstructs = rootConstructs;
		var _indent = -1;
		var _count = -1;
		var _level = 0;
		var _fastPropertyAccess = fastPropertyAccess = false;
		var _dynamicPropertyAccess = false;
		var _inClosure = false;
		var _inNamespacedFunction = false;
		var _inStaticFunction = false;
		var _inIfStatement = 0;
		var _importNameConflicts = {};
		var _extendsNameConflict = false;

		function upLevel() 
		{
			_indent++;
			_level++;
			return _level;
		}
;

		function downLevel() 
		{
			_indent--;
			_level--;
			return _level;
		}
;

		function lookupConstructInRootConstruct($$$$rootConstruct, $$$$object) 
		{
			//set default parameter values
			var rootConstruct = $$$$rootConstruct;
			var object = $$$$object;

			if (!rootConstruct || !object)
			{
				throw $es4.$$primitive(new (Error)('cannot lookup empty rootConstruct/object: ' + rootConstruct + ', ' + object));
			}
			else if ($es4.$$is(object, String))
			{
				for (var i = 0; i < $es4.$$get(rootConstruct, null, null, 'classConstructs', 'length'); i++)
				{
					if ($es4.$$get(rootConstruct, null, null, 'classConstructs', i, 'identifierToken', 'data') == object)
					{
						return $es4.$$get(rootConstruct, null, null, 'classConstructs', i);
					}
				}
				for (var i = 0; i < $es4.$$get(rootConstruct, null, null, 'interfaceConstructs', 'length'); i++)
				{
					if ($es4.$$get(rootConstruct, null, null, 'interfaceConstructs', i, 'identifierToken', 'data') == object)
					{
						return $es4.$$get(rootConstruct, null, null, 'interfaceConstructs', i);
					}
				}
				if ($es4.$$get(rootConstruct, null, null, 'packageConstruct', 'classConstruct'))
				{
					return $es4.$$get(rootConstruct, null, null, 'packageConstruct', 'classConstruct');
				}
				if ($es4.$$get(rootConstruct, null, null, 'packageConstruct', 'interfaceConstruct'))
				{
					return $es4.$$get(rootConstruct, null, null, 'packageConstruct', 'interfaceConstruct');
				}
				if ($es4.$$get(rootConstruct, null, null, 'packageConstruct', 'propertyConstruct'))
				{
					return $es4.$$get(rootConstruct, null, null, 'packageConstruct', 'propertyConstruct');
				}
				if ($es4.$$get(rootConstruct, null, null, 'packageConstruct', 'methodConstruct'))
				{
					return $es4.$$get(rootConstruct, null, null, 'packageConstruct', 'methodConstruct');
				}
				throw $es4.$$primitive(new (Error)('could not lookup construct in construct: ' + object));
			}
			if ($es4.$$get(object, null, null, 'constructor') == $es4.$$get(Construct, null, null, 'NameConstruct'))
			{
				return lookupConstructInRootConstruct(rootConstruct, $es4.$$call(Construct, null, null, 'nameConstructToString', [object]));
			}
			else if ($es4.$$get(object, null, null, 'constructor') == $es4.$$get(Construct, null, null, 'ImportConstruct'))
			{
				return lookupConstructInRootConstruct(rootConstruct, $es4.$$call(Construct, null, null, 'nameConstructToString', [$es4.$$get(object, null, null, 'nameConstruct')]));
			}
		}
;

		var packageConstruct = $es4.$$get(rootConstruct, null, null, 'packageConstruct');
		var js = print('$es4.$$package(\'' + ($es4.$$get(packageConstruct, null, null, 'nameConstruct') ? $es4.$$call(Construct, null, null, 'nameConstructToString', [$es4.$$get(packageConstruct, null, null, 'nameConstruct')]) : '') + '\').', _indent, 0);
		if ($es4.$$get(packageConstruct, null, null, 'classConstruct'))
		{
			if ($es4.$$get(packageConstruct, null, null, 'classConstruct', 'UNIMPLEMENTEDToken'))
			{
				if (release)
				{
					js += $es4.$$get(packageConstruct, null, null, 'classConstruct', 'identifierToken', 'data') + ' = null;\n';
					return js;
				}
				js = ($es4.$$get(packageConstruct, null, null, 'nameConstruct')) ? '$$package(\'' + $es4.$$call(Construct, null, null, 'nameConstructToString', [$es4.$$get(packageConstruct, null, null, 'nameConstruct')]) + '\')' : 'global';
				js += '.' + $es4.$$get(packageConstruct, null, null, 'classConstruct', 'identifierToken', 'data');
				js += ' = function () { throw new Error(\'Use of unimplemented class: ' + $es4.$$get(packageConstruct, null, null, 'classConstruct', 'identifierToken', 'data') + '\'); }';
				js += '\n';
				return js;
			}
			js += print(translateClassConstruct($es4.$$get(packageConstruct, null, null, 'classConstruct')), _indent, 0);
		}
		js += ($es4.$$get(packageConstruct, null, null, 'interfaceConstruct')) ? print(translateInterfaceConstruct($es4.$$get(packageConstruct, null, null, 'interfaceConstruct')), _indent, 0) : '';
		js += ($es4.$$get(packageConstruct, null, null, 'propertyConstruct')) ? print(translatePropertyConstruct($es4.$$get(packageConstruct, null, null, 'propertyConstruct')), _indent, 0) : '';
		if ($es4.$$get(packageConstruct, null, null, 'methodConstruct'))
		{
			if ($es4.$$get(packageConstruct, null, null, 'methodConstruct', 'UNIMPLEMENTEDToken'))
			{
				if (release)
				{
					js += $es4.$$get(packageConstruct, null, null, 'methodConstruct', 'identifierToken', 'data') + ' = null;\n';
					return js;
				}
				js = ($es4.$$get(packageConstruct, null, null, 'nameConstruct')) ? '$es4.$$package(\'' + $es4.$$call(Construct, null, null, 'nameConstructToString', [$es4.$$get(packageConstruct, null, null, 'nameConstruct')]) + '\')' : 'global';
				js += '.' + $es4.$$get(packageConstruct, null, null, 'methodConstruct', 'identifierToken', 'data');
				js += ' = function () { throw new Error(\'Use of unimplemented function: ' + $es4.$$get(packageConstruct, null, null, 'methodConstruct', 'identifierToken', 'data') + '\'); }';
				js += '\n';
				return js;
			}
			_inStaticFunction = true;
			js += print(translateFunctionConstruct($es4.$$get(packageConstruct, null, null, 'methodConstruct')), _indent, 0);
		}
		return js;

		function getTranslatedTypeName($$$$type) 
		{
			//set default parameter values
			var type = $$$$type;

			if ($es4.$$get(type, null, null, 'name') == '*' || $es4.$$get(type, null, null, 'name') == 'void')
			{
				return '';
			}
			if ($es4.$$get(_importNameConflicts, null, null, $es4.$$get(type, null, null, 'name')))
			{
				var fullyQualifiedName = $es4.$$get(type, null, null, 'fullyQualifiedName');
				var parts = $es4.$$call(fullyQualifiedName, null, null, 'split', ['.']);
				var name = $es4.$$call(parts, null, null, 'pop', $es4.$$EMPTY_ARRAY);
				return '$es4.$$[\'' + $es4.$$call(parts, null, null, 'join', ['.']) + '\'].' + name;
			}
			return $es4.$$get(type, null, null, 'name');
		}
;

		function translateInterfaceConstruct($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			upLevel();
			var js = print($es4.$$get(construct, null, null, 'identifierToken', 'data') + ' = (function ()', 0, 1);
			js += print('{', _indent, 1);
			js += print('function ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '()', _indent + 1, 1);
			js += print('{', _indent + 1, 1);
			js += print('//handle cast', _indent + 2, 1);
			js += print('return $es4.$$as(arguments[0], ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + ');', _indent + 2, 1);
			js += print('}', _indent + 1, 1);
			var comma = false;
			var innerJS = '';
			if ($es4.$$get(construct, null, null, 'extendsNameConstructs', 'length'))
			{
				innerJS += 'IMPLEMENTS:[';
				for (var i = 0; i < $es4.$$get(construct, null, null, 'extendsNameConstructs', 'length'); i++)
				{
					if (comma)
					{
						innerJS += ', ';
					}
					var type = $es4.$$get(construct, null, null, 'extendsNameConstructs', i, 'type');
					var innerConstruct = lookupConstructInRootConstruct($es4.$$get(construct, null, null, 'rootConstruct'), $es4.$$get(construct, null, null, 'extendsNameConstructs', i));
					if ($es4.$$get(innerConstruct, null, null, 'isInternal'))
					{
						innerJS += comma = $es4.$$get(type, null, null, 'fullyQualifiedName');
					}
					else
					{
						innerJS += comma = '\'' + $es4.$$get(type, null, null, 'fullyQualifiedName') + '\'';
					}
				}
				innerJS += comma = ']';
			}
			if (!$es4.$$get(construct, null, null, 'isInternal'))
			{
				if ($es4.$$get(_rootConstruct, null, null, 'classConstructs', 'length'))
				{
					if (comma)
					{
						innerJS += ', ';
					}
					innerJS += 'CLASSES:[';
					comma = false;
					for (var i = 0; i < $es4.$$get(_rootConstruct, null, null, 'classConstructs', 'length'); i++)
					{
						if (comma)
						{
							innerJS += ', ';
						}
						innerJS += comma = $es4.$$get(_rootConstruct, null, null, 'classConstructs', i, 'identifierToken', 'data');
					}
					innerJS += comma = ']';
				}
				if ($es4.$$get(_rootConstruct, null, null, 'interfaceConstructs', 'length'))
				{
					if (comma)
					{
						innerJS += ', ';
					}
					innerJS += 'INTERFACES:[';
					comma = false;
					for (var i = 0; i < $es4.$$get(_rootConstruct, null, null, 'interfaceConstructs', 'length'); i++)
					{
						if (comma)
						{
							innerJS += ', ';
						}
						innerJS += comma = $es4.$$get(_rootConstruct, null, null, 'interfaceConstructs', i, 'identifierToken', 'data');
					}
					innerJS += comma = ']';
				}
			}
			var packageName = $es4.$$get(construct, null, null, 'packageName');
			var fullyQualifiedName = (packageName) ? packageName + '::' + $es4.$$get(construct, null, null, 'identifierToken', 'data') : $es4.$$get(construct, null, null, 'identifierToken', 'data');
			if (innerJS)
			{
				js += print('return $es4.$$interface(' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + ', ', _indent + 1, 0, 1);
				js += '{' + innerJS + '}';
				js += print(', \'' + fullyQualifiedName + '\');', 0, 1);
			}
			else
			{
				js += print('return $es4.$$interface(' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + ', null, ', _indent + 1, 0);
				js += print('\'' + fullyQualifiedName + '\');', 0, 1);
			}
			js += print('})();', _indent, 1);
			downLevel();
			return js;
		}
;

		function translatePropertyConstruct($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			return print($es4.$$get(construct, null, null, 'identifierToken', 'data') + ' = $es4.$$namespace(' + translateExpression($es4.$$get(construct, null, null, 'valueExpression'), _indent, false, construct) + ', true);', 0, 1);
		}
;

		function translateFunctionConstruct($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			upLevel();
			var importConstructs = $es4.$$get(_rootConstruct, null, null, 'packageConstruct', 'importConstructs');
			var js = '';
			var innerJS;
			var cr = false;
			var accessor = $es4.$$get(construct, null, null, 'getToken') || $es4.$$get(construct, null, null, 'setToken');
			js += print($es4.$$get(construct, null, null, 'identifierToken', 'data') + ' = (function ()', 0, 1);
			js += print('{', _indent, 1);
			js += print('var $$this = ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + ', $$thisp = ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + ';', _indent + 1, 1);
			js += (innerJS = translateImports(construct)) ? cr = innerJS : '';
			js += (innerJS = translateClassInitializer(construct)) ? cr = print(innerJS, 0, 0, (cr) ? 1 : 0) : '';
			js += (innerJS = translateClassFunction(construct)) ? print(innerJS, 0, 0, 1) : '';
			if (accessor)
			{
				js += print($es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$pcinit = ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + ';', _indent + 1, 1, 1);
				js += print('return ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + ';', _indent + 1, 1, 0);
			}
			else
			{
				js += print('return $es4.$$function (' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + ');', _indent + 1, 1, 1);
			}
			js += print('})();', _indent, 1);
			downLevel();
			return js;

			function translateImports($$$$construct) 
			{
				//set default parameter values
				var construct = $$$$construct;

				var js = '';
				if ($es4.$$get(importConstructs, null, null, 'length'))
				{
					js += print('//imports', _indent + 1, 1);
				}
				for (var i = 0; i < $es4.$$get(importConstructs, null, null, 'length'); i++)
				{
					js += print('var ' + $es4.$$get(importConstructs, null, null, i, 'nameConstruct', 'identifierTokens', $es4.$$get(importConstructs, null, null, i, 'nameConstruct', 'identifierTokens', 'length') - 1, 'data') + ';', _indent + 1, 1);
				}
				return js;
			}
;

			function translateClassInitializer($$$$construct) 
			{
				//set default parameter values
				var construct = $$$$construct;

				_inStaticFunction = true;
				var js = print('//function initializer', _indent + 1, 1);
				js += print($es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit = (function ()', _indent + 1, 1);
				js += print('{', _indent + 1, 1);
				js += print($es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit = undefined;', _indent + 2, 1);
				var importConstructs = ($es4.$$get(construct, null, null, 'isInternal')) ? $es4.$$get(_rootConstruct, null, null, 'importConstructs') : $es4.$$get(_rootConstruct, null, null, 'packageConstruct', 'importConstructs');
				if ($es4.$$get(importConstructs, null, null, 'length'))
				{
					js += print('//initialize imports', _indent + 2, 1, 1);
				}
				var importNames = {};
				$es4.$$set(importNames, null, null, $es4.$$get(construct, null, null, 'identifierToken', 'data'), true, '=');
				for (var i = 0; i < $es4.$$get(importConstructs, null, null, 'length'); i++)
				{
					var name = $es4.$$get(importConstructs, null, null, i, 'nameConstruct', 'identifierTokens', $es4.$$get(importConstructs, null, null, i, 'nameConstruct', 'identifierTokens', 'length') - 1, 'data');
					var packageName = '';
					if ($es4.$$get(importConstructs, null, null, i, 'nameConstruct', 'identifierTokens', 'length') > 1)
					{
						var fullyQualifiedName = $es4.$$call(Construct, null, null, 'nameConstructToString', [$es4.$$get(importConstructs, null, null, i, 'nameConstruct')]);
						fullyQualifiedName = $es4.$$call(fullyQualifiedName, null, null, 'split', ['.']);
						$es4.$$call(fullyQualifiedName, null, null, 'pop', $es4.$$EMPTY_ARRAY);
						packageName = $es4.$$call(fullyQualifiedName, null, null, 'join', ['.']);
					}
					if ($es4.$$get(importNames, null, null, name))
					{
						$es4.$$set(_importNameConflicts, null, null, name, true, '=');
						continue;
					}
					else
					{
						$es4.$$set(importNames, null, null, name, true, '=');
					}
					js += print(name + ' = $es4.$$[\'' + packageName + '\'].' + name + ';', _indent + 2, 1);
				}
				js += print('});', _indent + 1, 1);
				_inStaticFunction = false;
				return js;
			}
;

			function translateClassFunction($$$$construct) 
			{
				//set default parameter values
				var construct = $$$$construct;

				upLevel();
				var js = '';
				if (accessor)
				{
					var name = $es4.$$get(construct, null, null, 'getToken') ? 'getter' : 'setter';
					js += print('function ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '() { $es4.$$' + name + '(\'' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '\', ' + '$es4.$$package(\'' + ($es4.$$get(construct, null, null, 'packageConstruct', 'nameConstruct') ? $es4.$$call(Construct, null, null, 'nameConstructToString', [$es4.$$get(construct, null, null, 'packageConstruct', 'nameConstruct')]) : '') + '\'), (function ()', _indent, 1);
				}
				else
				{
					js += print('function ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '(', _indent, 0);
				}
				js += translateParameters(construct, construct);
				if (!accessor)
				{
					js += print(')', 0, (_indent) ? 1 : 0);
				}
				js += print('{', _indent, (_indent) ? 1 : 0);
				js += print('//initialize function if not initialized', _indent + 1, 1);
				js += print('if (' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit !== undefined) ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit();', _indent + 1, 2);
				js += translateDefaultParameterValues(construct, construct);
				if (accessor)
				{
					js += print('//change reference', _indent + 1, 1, 1);
					js += print($es4.$$get(construct, null, null, 'identifierToken', 'data') + ' = this;', _indent + 1, $es4.$$get(construct, null, null, 'bodyStatements', 'length') ? 2 : 1);
				}
				if ($es4.$$get(construct, null, null, 'isJavaScript'))
				{
					js += $es4.$$get(construct, null, null, 'javaScriptString');
				}
				else
				{
					js += translateStatements($es4.$$get(construct, null, null, 'bodyStatements'), _indent + 1, construct);
				}
				if (accessor)
				{
					js += print('})', ($es4.$$get(construct, null, null, 'isJavaScript')) ? 0 : _indent, 0);
					js += print(');}', 0, 1);
				}
				else
				{
					js += print('}', 0, 1);
				}
				downLevel();
				return js;
			}
;
		}
;

		function translateClassConstruct($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			var js = '';
			upLevel();
			_extendsNameConflict = $es4.$$get(construct, null, null, 'extendsNameConflict');
			var innerJS;
			var cr = false;
			js += print($es4.$$get(construct, null, null, 'identifierToken', 'data') + ' = (function ()', 0, 1);
			js += print('{', _indent, 1);
			js += (innerJS = translateImports(construct)) ? cr = innerJS : '';
			js += (innerJS = translateNamespaces(construct, true)) ? cr = print(innerJS, 0, 0, (cr) ? 1 : 0) : '';
			js += (innerJS = translateStaticProperties(construct)) ? cr = print(innerJS, 0, 0, (cr) ? 1 : 0) : '';
			js += (innerJS = translateClassPreInitializer(construct)) ? cr = print(innerJS, 0, 0, (cr) ? 1 : 0) : '';
			js += (innerJS = translateClassInitializer(construct)) ? cr = print(innerJS, 0, 0, (cr) ? 1 : 0) : '';
			js += (innerJS = translateStaticMethods(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateStaticAccessors(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateClassFunction(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateConstruct(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateInitializer(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateConstructor(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateInternalClasses(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateInternalInterfaces(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateClassReturnStatement(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += print('})();', _indent, 1);
			downLevel();
			return js;
		}
;

		function translateClassPreInitializer($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			_inStaticFunction = true;
			var js = print('//class pre initializer', _indent + 1, 1);
			js += print($es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$sinit = (function ()', _indent + 1, 1);
			js += print('{', _indent + 1, 1);
			js += print($es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$sinit = undefined;', _indent + 2, 2);
			var importConstructs = ($es4.$$get(construct, null, null, 'isInternal')) ? $es4.$$get(_rootConstruct, null, null, 'importConstructs') : $es4.$$get(_rootConstruct, null, null, 'packageConstruct', 'importConstructs');
			if ($es4.$$get(importConstructs, null, null, 'length'))
			{
				js += print('//initialize imports', _indent + 2, 1);
			}
			var found = false;
			var extraCR = 0;
			var importNames = {};
			$es4.$$set(importNames, null, null, $es4.$$get(construct, null, null, 'identifierToken', 'data'), true, '=');
			for (var i = 0; i < $es4.$$get(importConstructs, null, null, 'length'); i++)
			{
				found = true;
				var name = $es4.$$get(importConstructs, null, null, i, 'nameConstruct', 'identifierTokens', $es4.$$get(importConstructs, null, null, i, 'nameConstruct', 'identifierTokens', 'length') - 1, 'data');
				var packageName = '';
				if ($es4.$$get(importConstructs, null, null, i, 'nameConstruct', 'identifierTokens', 'length') > 1)
				{
					var fullyQualifiedName = $es4.$$call(Construct, null, null, 'nameConstructToString', [$es4.$$get(importConstructs, null, null, i, 'nameConstruct')]);
					fullyQualifiedName = $es4.$$call(fullyQualifiedName, null, null, 'split', ['.']);
					$es4.$$call(fullyQualifiedName, null, null, 'pop', $es4.$$EMPTY_ARRAY);
					packageName = $es4.$$call(fullyQualifiedName, null, null, 'join', ['.']);
				}
				if ($es4.$$get(importNames, null, null, name))
				{
					$es4.$$set(_importNameConflicts, null, null, name, true, '=');
					continue;
				}
				else
				{
					$es4.$$set(importNames, null, null, name, true, '=');
				}
				extraCR = 1;
				js += print(name + ' = $es4.$$[\'' + packageName + '\'].' + name + ';', _indent + 2, 1);
			}
			var className = $es4.$$get(construct, null, null, 'identifierToken', 'data');
			var superClassName = 'Object';
			if ($es4.$$get(construct, null, null, 'extendsNameConstruct'))
			{
				superClassName = getTranslatedTypeName($es4.$$get(construct, null, null, 'extendsNameConstruct', 'type'));
				js += print('//ensure $$sinit is called on super class', _indent + 2, 1, extraCR);
				js += print('if (' + superClassName + '.$$sinit !== undefined) ' + superClassName + '.$$sinit();', _indent + 2, 1);
			}
			js += print('//set prototype and constructor', _indent + 2, 1, extraCR);
			js += print(className + '.prototype = Object.create(' + superClassName + '.prototype);', _indent + 2, 1);
			js += print('Object.defineProperty(' + className + '.prototype, "constructor", { value: ' + className + ', enumerable: false });', _indent + 2, 2);
			extraCR = 0;
			js += print('//hold private values', _indent + 2, 1);
			js += print('Object.defineProperty(' + className + '.prototype, \'$$v\', {value:{}});', _indent + 2, 1);
			var innerJS;
			js += (innerJS = translateInstanceMethods(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateInstanceAccessors(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateInstanceProperties(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += print('});', _indent + 1, 1);
			_inStaticFunction = false;
			return js;
		}
;

		function translateClassInitializer($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			_inStaticFunction = true;
			var js = print('//class initializer', _indent + 1, 1);
			js += print($es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit = (function ()', _indent + 1, 1);
			js += print('{', _indent + 1, 1);
			js += print($es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit = undefined;', _indent + 2, 1);
			var found = false;
			for (var i = 0; i < $es4.$$get(construct, null, null, 'propertyConstructs', 'length'); i++)
			{
				var propertyConstruct = $es4.$$get(construct, null, null, 'propertyConstructs', i);
				if (!$es4.$$get(propertyConstruct, null, null, 'staticToken'))
				{
					continue;
				}
				if ($es4.$$get(propertyConstruct, null, null, 'translatedEarlier'))
				{
					continue;
				}
				if (!found)
				{
					found = true;
					js += print('//initialize properties', _indent + 2, 1, 1);
				}
				var namespaceObj = $es4.$$get(propertyConstruct, null, null, 'identifier', 'namespaceObj');
				var type = getTranslatedTypeName($es4.$$get(propertyConstruct, null, null, 'identifier', 'type'));
				js += print('$$j.' + $es4.$$get(propertyConstruct, null, null, 'identifierToken', 'data') + ' = ', _indent + 2, 0);
				if (type)
				{
					js += '$es4.$$coerce(';
				}
				js += ($es4.$$get(propertyConstruct, null, null, 'valueExpression')) ? translateExpression($es4.$$get(propertyConstruct, null, null, 'valueExpression'), _indent, false, construct) : 'undefined';
				if (type)
				{
					js += ', ' + type + ')';
				}
				js += print(';', 0, 1);
			}
			if (found)
			{
				js += print('', _indent + 1, 1);
			}
			js += translateStatements($es4.$$get(construct, null, null, 'initializerStatements'), _indent + 2, construct);
			js += print('});', _indent + 1, 1);
			_inStaticFunction = false;
			return js;
		}
;

		function translateClassFunction($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			var js = '';
			upLevel();
			var js = print('function ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '()', _indent, 1);
			js += print('{', _indent, 1);
			js += print('var $$this;', _indent + 1, 2);
			js += print('//save scope', _indent + 1, 1);
			js += print('if (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) $$this = arguments[1];', _indent + 1, 1);
			js += print('else', _indent + 1, 1);
			js += print('{', _indent + 1, 1);
			js += print('var $$this = this;', _indent + 2, 2);
			js += print('if (!($$this instanceof ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + ') || $$this.$$' + $es4.$$call($es4.$$call((($es4.$$get(construct, null, null, 'packageName') && _extendsNameConflict ? $es4.$$get(construct, null, null, 'packageName') : '') + $es4.$$get(construct, null, null, 'identifierToken', 'data')), null, null, 'split', ['.']), null, null, 'join', ['']) + ' !== undefined) return (arguments.length !== 0) ? $es4.$$as(arguments[0], ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + ') : $es4.$$throwArgumentError();', _indent + 2, 1);
			js += print('}', _indent + 1, 1);
			var innerJS;
			js += print('//call construct if no arguments, or argument zero does not equal manual construct', _indent + 1, 1, 1);
			js += print('if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)', _indent + 1, 1);
			js += print('{', _indent + 1, 1);
			js += print('for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];', _indent + 2, 2);
			js += print($es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$construct($$this, $$args);', _indent + 2, 1);
			js += print('}', _indent + 1, 1);
			js += print('}', _indent, 1);
			downLevel();
			return js;
		}
;

		function translateConstruct($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			_inStaticFunction = true;
			var js = print('//construct', _indent + 1, 1);
			js += print($es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$construct = (function ($$this, args)', _indent + 1, 1);
			js += print('{', _indent + 1, 1);
			js += print('//initialize function if not initialized', _indent + 2, 1);
			js += print('if (' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit !== undefined) ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit();', _indent + 2, 2);
			js += print('//hold property values, and methods', _indent + 2, 1);
			js += print('Object.defineProperty($$this, \'$$' + $es4.$$call($es4.$$call((($es4.$$get(construct, null, null, 'packageName') && _extendsNameConflict ? $es4.$$get(construct, null, null, 'packageName') : '') + $es4.$$get(construct, null, null, 'identifierToken', 'data')), null, null, 'split', ['.']), null, null, 'join', ['']) + '\', {value:{$$this:$$this, $$p:{}, $$ns:{}}});', _indent + 2, 2);
			upLevel();
			var innerJS;
			innerJS = translateNamespaces(construct, false);
			if (innerJS)
			{
				js += print(innerJS, 0, 0, 1);
			}
			js += translateNamespaceInstanceMethods(construct);
			downLevel();
			var propertyConstructs = $es4.$$get(construct, null, null, 'instancePropertyConstructs');
			for (var i = 0; i < $es4.$$get(propertyConstructs, null, null, 'length'); i++)
			{
				var propertyConstruct = $es4.$$get(propertyConstructs, null, null, i);
				var namespaceObj = $es4.$$get(propertyConstruct, null, null, 'identifier', 'namespaceObj');
				if (!$es4.$$get(namespaceObj, null, null, 'isPrivate'))
				{
					continue;
				}
				js += print('Object.defineProperty($$this.$$' + $es4.$$call($es4.$$call((($es4.$$get(construct, null, null, 'packageName') && _extendsNameConflict ? $es4.$$get(construct, null, null, 'packageName') : '') + $es4.$$get(construct, null, null, 'identifierToken', 'data')), null, null, 'split', ['.']), null, null, 'join', ['']) + ', \'' + $es4.$$get(propertyConstruct, null, null, 'identifierToken', 'data') + '\', ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.prototype.$$v.' + $es4.$$get(propertyConstruct, null, null, 'identifierToken', 'data') + ');', _indent + 2, 1);
			}
			for (var i = 0; i < $es4.$$get(construct, null, null, 'instanceAccessorConstructs', 'length'); i++)
			{
				var setterMethodConstruct = $es4.$$get(construct, null, null, 'instanceAccessorConstructs', i, 'setter');
				var getterMethodConstruct = $es4.$$get(construct, null, null, 'instanceAccessorConstructs', i, 'getter');
				var methodConstruct = setterMethodConstruct || getterMethodConstruct;
				var namespaceObj = $es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj');
				var isPrivate = $es4.$$get(methodConstruct, null, null, 'namespaceToken', 'data') == 'private';
				if (!isPrivate)
				{
					continue;
				}
				js += print('Object.defineProperty($$this.$$' + $es4.$$call($es4.$$call((($es4.$$get(construct, null, null, 'packageName') && _extendsNameConflict ? $es4.$$get(construct, null, null, 'packageName') : '') + $es4.$$get(construct, null, null, 'identifierToken', 'data')), null, null, 'split', ['.']), null, null, 'join', ['']) + ', \'' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + '\', ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.prototype.$$v.' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + ');', _indent + 2, 1);
			}
			js += print(innerJS, 0, 0, 1);
			for (var i = 0; i < $es4.$$get(construct, null, null, 'instanceMethodConstructs', 'length'); i++)
			{
				var methodConstruct = $es4.$$get(construct, null, null, 'instanceMethodConstructs', i);
				var namespaceObj = $es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj');
				if ($es4.$$get(namespaceObj, null, null, 'isCustom'))
				{
					continue;
				}
				if (!$es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj', 'isPrivate'))
				{
					continue;
				}
				var type = $es4.$$get(methodConstruct, null, null, 'identifier', 'type');
				js += print('//' + $es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj', 'name') + ' instance method', _indent + 2, 1);
				js += print('Object.defineProperty($$this.$$' + $es4.$$call($es4.$$call((($es4.$$get(construct, null, null, 'packageName') && _extendsNameConflict ? $es4.$$get(construct, null, null, 'packageName') : '') + $es4.$$get(construct, null, null, 'identifierToken', 'data')), null, null, 'split', ['.']), null, null, 'join', ['']) + ', \'' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + '\', ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.prototype.$$v.' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + ');', _indent + 2, 2);
			}
			if ($es4.$$get(construct, null, null, 'extendsNameConstruct'))
			{
				var superClassName = getTranslatedTypeName($es4.$$get(construct, null, null, 'extendsNameConstruct', 'type'));
				js += print('//call construct on super', _indent + 2, 1);
				js += print(superClassName + '.$$construct($$this);', _indent + 2, 2, 0);
			}
			js += print('//initialize properties', _indent + 2, 1);
			js += print($es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$iinit($$this);', _indent + 2, 2, 0);
			js += print('//call constructor', _indent + 2, 1);
			js += print('if (args !== undefined) ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$constructor.apply($$this, args);', _indent + 2, 1, 0);
			js += print('});', _indent + 1, 1);
			_inStaticFunction = false;
			return js;
		}
;

		function translateInitializer($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			_inStaticFunction = true;
			var js = print('//initializer', _indent + 1, 1);
			js += print($es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$iinit = (function ($$this)', _indent + 1, 1);
			js += print('{', _indent + 1, 1);
			var found = false;
			for (var i = 0; i < $es4.$$get(construct, null, null, 'instancePropertyConstructs', 'length'); i++)
			{
				var propertyConstruct = $es4.$$get(construct, null, null, 'instancePropertyConstructs', i);
				if (!found)
				{
					found = true;
					js += print('//initialize properties', _indent + 2, 1);
				}
				var namespaceObj = $es4.$$get(propertyConstruct, null, null, 'identifier', 'namespaceObj');
				var type = getTranslatedTypeName($es4.$$get(propertyConstruct, null, null, 'identifier', 'type'));
				if (!$es4.$$get(namespaceObj, null, null, 'isPrivate'))
				{
					js += print('$$this.$$' + $es4.$$call($es4.$$call((($es4.$$get(construct, null, null, 'packageName') && _extendsNameConflict ? $es4.$$get(construct, null, null, 'packageName') : '') + $es4.$$get(construct, null, null, 'identifierToken', 'data')), null, null, 'split', ['.']), null, null, 'join', ['']) + '.' + $es4.$$get(propertyConstruct, null, null, 'identifierToken', 'data') + ' = ', _indent + 2, 0);
				}
				else
				{
					js += print('$$this.$$' + $es4.$$call($es4.$$call((($es4.$$get(construct, null, null, 'packageName') && _extendsNameConflict ? $es4.$$get(construct, null, null, 'packageName') : '') + $es4.$$get(construct, null, null, 'identifierToken', 'data')), null, null, 'split', ['.']), null, null, 'join', ['']) + '.$$p.' + $es4.$$get(propertyConstruct, null, null, 'identifierToken', 'data') + ' = ', _indent + 2, 0);
				}
				if (type)
				{
					js += '$es4.$$coerce(';
				}
				js += ($es4.$$get(propertyConstruct, null, null, 'valueExpression')) ? translateExpression($es4.$$get(propertyConstruct, null, null, 'valueExpression'), _indent, false, construct) : 'undefined';
				if (type)
				{
					js += ', ' + type + ')';
				}
				js += print(';', 0, 1);
			}
			if (found)
			{
				js += print('', _indent + 1, 1);
			}
			if ($es4.$$get(construct, null, null, 'extendsNameConstruct'))
			{
				var superClassName = getTranslatedTypeName($es4.$$get(construct, null, null, 'extendsNameConstruct', 'type'));
				js += print('//call iinit on super', _indent + 2, 1);
				js += print(superClassName + '.$$iinit($$this);', _indent + 2, 1, 0);
			}
			js += print('});', _indent + 1, 1);
			_inStaticFunction = false;
			return js;
		}
;

		function translateConstructor($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			upLevel();
			var methodConstruct = $es4.$$get(construct, null, null, 'constructorMethodConstruct');
			var js = print('//constructor', _indent, 1);
			js += print($es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$constructor = (function (', _indent, 0);
			if (methodConstruct)
			{
				js += translateParameters(methodConstruct, construct);
			}
			js += print(')', 0, 1);
			js += print('{', _indent, 1);
			js += print('var $$this = this;', _indent + 1, 1, 0);
			if (methodConstruct)
			{
				js += translateDefaultParameterValues(methodConstruct, construct);
			}
			var carriage = false;
			if ($es4.$$get(construct, null, null, 'extendsNameConstruct') && (!methodConstruct || (methodConstruct && !$es4.$$get(methodConstruct, null, null, 'callsSuper'))))
			{
				var superClassName = getTranslatedTypeName($es4.$$get(construct, null, null, 'extendsNameConstruct', 'type'));
				js += print(superClassName + '.$$constructor.call($$this);', _indent + 1, 1, 1);
				carriage = true;
			}
			if (methodConstruct)
			{
				var innerJS = print(translateStatements($es4.$$get(methodConstruct, null, null, 'bodyStatements'), _indent + 1, construct), 0, 0);
				if (innerJS && carriage)
				{
					js += print('', 0, 1);
				}
				if (innerJS)
				{
					js += innerJS;
				}
			}
			js += print('});', _indent, 1);
			downLevel();
			return js;
		}
;

		function translateInternalClasses($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			if ($es4.$$get(construct, null, null, 'isInternal'))
			{
				return '';
			}
			var js = '';
			for (var i = 0; i < $es4.$$get(_rootConstruct, null, null, 'classConstructs', 'length'); i++)
			{
				if (js)
				{
					js += print('', 0, 1);
				}
				js += print('////////////////INTERNAL CLASS////////////////', _indent + 1, 1);
				js += print('var ' + translateClassConstruct($es4.$$get(_rootConstruct, null, null, 'classConstructs', i)), 1, 0);
			}
			return js;
		}
;

		function translateInternalInterfaces($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			if ($es4.$$get(construct, null, null, 'isInternal'))
			{
				return '';
			}
			var js = '';
			for (var i = 0; i < $es4.$$get(_rootConstruct, null, null, 'interfaceConstructs', 'length'); i++)
			{
				if (js)
				{
					js += print('', 0, 1);
				}
				js += print('////////////////INTERNAL INTERFACE////////////////', _indent + 1, 1);
				js += print('var ' + translateInterfaceConstruct($es4.$$get(_rootConstruct, null, null, 'interfaceConstructs', i)), 1, 0);
			}
			return js;
		}
;

		function translateClassReturnStatement($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			var js = print('return $es4.$$class(' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + ', ', _indent + 1, 0);
			var comma = false;
			var innerJS = '';
			if ($es4.$$get(construct, null, null, 'extendsNameConstruct'))
			{
				var type = $es4.$$get(construct, null, null, 'extendsNameConstruct', 'type');
				var innerConstruct = lookupConstructInRootConstruct($es4.$$get(construct, null, null, 'rootConstruct'), $es4.$$get(construct, null, null, 'extendsNameConstruct'));
				if ($es4.$$get(innerConstruct, null, null, 'isInternal'))
				{
					innerJS += comma = 'EXTENDS:' + $es4.$$get(type, null, null, 'fullyQualifiedName');
				}
				else
				{
					innerJS += comma = 'EXTENDS:\'' + $es4.$$get(type, null, null, 'fullyQualifiedName') + '\'';
				}
			}
			if ($es4.$$get(construct, null, null, 'implementsNameConstructs', 'length'))
			{
				if (comma)
				{
					innerJS += ', ';
				}
				innerJS += 'IMPLEMENTS:[';
				comma = false;
				for (var i = 0; i < $es4.$$get(construct, null, null, 'implementsNameConstructs', 'length'); i++)
				{
					if (comma)
					{
						innerJS += ', ';
					}
					var type = $es4.$$get(construct, null, null, 'implementsNameConstructs', i, 'type');
					var innerConstruct = lookupConstructInRootConstruct($es4.$$get(construct, null, null, 'rootConstruct'), $es4.$$get(construct, null, null, 'implementsNameConstructs', i));
					if ($es4.$$get(innerConstruct, null, null, 'isInternal'))
					{
						innerJS += comma = $es4.$$get(type, null, null, 'fullyQualifiedName');
					}
					else
					{
						innerJS += comma = '\'' + $es4.$$get(type, null, null, 'fullyQualifiedName') + '\'';
					}
				}
				innerJS += comma = ']';
			}
			if (!$es4.$$get(construct, null, null, 'isInternal'))
			{
				if ($es4.$$get(_rootConstruct, null, null, 'classConstructs', 'length'))
				{
					if (comma)
					{
						innerJS += ', ';
					}
					innerJS += 'CLASSES:[';
					comma = false;
					for (var i = 0; i < $es4.$$get(_rootConstruct, null, null, 'classConstructs', 'length'); i++)
					{
						if (comma)
						{
							innerJS += ', ';
						}
						innerJS += comma = $es4.$$get(_rootConstruct, null, null, 'classConstructs', i, 'identifierToken', 'data');
					}
					innerJS += comma = ']';
				}
				if ($es4.$$get(_rootConstruct, null, null, 'interfaceConstructs', 'length'))
				{
					if (comma)
					{
						innerJS += ', ';
					}
					innerJS += 'INTERFACES:[';
					comma = false;
					for (var i = 0; i < $es4.$$get(_rootConstruct, null, null, 'interfaceConstructs', 'length'); i++)
					{
						if (comma)
						{
							innerJS += ', ';
						}
						innerJS += comma = $es4.$$get(_rootConstruct, null, null, 'interfaceConstructs', i, 'identifierToken', 'data');
					}
					innerJS += comma = ']';
				}
			}
			var packageName = $es4.$$get(construct, null, null, 'packageName');
			var fullyQualifiedName = (packageName) ? packageName + '::' + $es4.$$get(construct, null, null, 'identifierToken', 'data') : $es4.$$get(construct, null, null, 'identifierToken', 'data');
			if (innerJS)
			{
				js += '{' + innerJS + '}';
				js += print(', \'' + fullyQualifiedName + '\');', 0, 1);
			}
			else
			{
				js = print('return $es4.$$class(' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + ', null, ', _indent + 1, 0);
				js += print('\'' + fullyQualifiedName + '\');', 0, 1);
			}
			return js;
		}
;

		function translateImports($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			var js = '';
			var importConstructs = ($es4.$$get(construct, null, null, 'isInternal')) ? $es4.$$get(_rootConstruct, null, null, 'importConstructs') : $es4.$$get(_rootConstruct, null, null, 'packageConstruct', 'importConstructs');
			if ($es4.$$get(importConstructs, null, null, 'length'))
			{
				js += print('//imports', _indent + 1, 1);
			}
			for (var i = 0; i < $es4.$$get(importConstructs, null, null, 'length'); i++)
			{
				js += print('var ' + $es4.$$get(importConstructs, null, null, i, 'nameConstruct', 'identifierTokens', $es4.$$get(importConstructs, null, null, i, 'nameConstruct', 'identifierTokens', 'length') - 1, 'data') + ';', _indent + 1, 1);
			}
			return js;
		}
;

		function translateNamespaces($$$$construct, $$$$isClassLevel) 
		{
			//set default parameter values
			var construct = $$$$construct;
			var isClassLevel = $$$$isClassLevel;

			var js = '';
			var propertyConstructs = $es4.$$get(construct, null, null, 'namespacePropertyConstructs');
			var counter = 0;
			for (var i = 0; i < $es4.$$get(propertyConstructs, null, null, 'length'); i++)
			{
				var propertyConstruct = $es4.$$get(propertyConstructs, null, null, i);
				if (!js)
				{
					js += print('//namespaces', _indent + 1, 1);
				}
				js += print('$es4.$$' + $es4.$$get(propertyConstruct, null, null, 'identifier', 'namespaceObj', 'name') + '_namespace(' + ($es4.$$get(propertyConstruct, null, null, 'valueExpression') ? translateExpression($es4.$$get(propertyConstruct, null, null, 'valueExpression'), _indent, false, construct) : '\'$$uniqueNS_' + (counter++) + '_' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '\'') + ', ' + ((isClassLevel) ? $es4.$$get(construct, null, null, 'identifierToken', 'data') : ($es4.$$get(propertyConstruct, null, null, 'namespaceToken', 'data') == 'private' ? ('$$this.$$' + $es4.$$call($es4.$$call((($es4.$$get(construct, null, null, 'packageName') && _extendsNameConflict ? $es4.$$get(construct, null, null, 'packageName') : '') + $es4.$$get(construct, null, null, 'identifierToken', 'data')), null, null, 'split', ['.']), null, null, 'join', ['']) + '.$$ns') : '$$this')) + ', \'' + $es4.$$get(propertyConstruct, null, null, 'identifierToken', 'data') + '\');', _indent + 1, 1);
			}
			return js;
		}
;

		function translateStaticProperties($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			var js = '';
			var propertyConstructs = $es4.$$get(construct, null, null, 'staticPropertyConstructs');
			for (var i = 0; i < $es4.$$get(propertyConstructs, null, null, 'length'); i++)
			{
				var propertyConstruct = $es4.$$get(propertyConstructs, null, null, i);
				if (!js)
				{
					js += print('//properties', _indent + 1, 1);
					js += print('var $$j = {};', _indent + 1, 1);
				}
				var namespaceObj = $es4.$$get(propertyConstruct, null, null, 'identifier', 'namespaceObj');
				var type = $es4.$$get(propertyConstruct, null, null, 'identifier', 'type');
				var scope = $es4.$$get(construct, null, null, 'identifierToken', 'data');
				if ($es4.$$get(namespaceObj, null, null, 'isCustom'))
				{
					throw $es4.$$primitive(new (Error)('custom static properties not supported at the moment'));
				}
				var returnString = getTranslatedTypeName(type);
				if ($es4.$$get(propertyConstruct, null, null, 'constToken') && $es4.$$get(propertyConstruct, null, null, 'valueExpression'))
				{
					if (returnString == 'String' || returnString == 'uint' || returnString == 'int' || returnString == 'Number' || returnString == 'Boolean')
					{
						var constructor = $es4.$$get(propertyConstruct, null, null, 'valueExpression', 'constructor');
						if (constructor === $es4.$$get(Construct, null, null, 'StringExpression') || constructor === $es4.$$get(Construct, null, null, 'NumberExpression') || constructor === $es4.$$get(Construct, null, null, 'BooleanExpression'))
						{
							var valueJS = translateExpression($es4.$$get(propertyConstruct, null, null, 'valueExpression'), _indent, false, construct);
							var coerce = false;
							if (constructor === $es4.$$get(Construct, null, null, 'StringExpression') && returnString != 'String')
							{
								coerce = true;
							}
							else if (constructor === $es4.$$get(Construct, null, null, 'BooleanExpression') && returnString != 'Boolean')
							{
								coerce = true;
							}
							else if (constructor === $es4.$$get(Construct, null, null, 'NumberExpression'))
							{
								if (returnString == 'uint')
								{
									if (parseInt(valueJS) != (valueJS >>> 0))
									{
										coerce = true;
									}
								}
								else if (returnString == 'int')
								{
									if (parseInt(valueJS) != (valueJS >> 0))
									{
										coerce = true;
									}
								}
							}
							if (coerce)
							{
								js += print(scope + '.' + $es4.$$get(propertyConstruct, null, null, 'identifierToken', 'data') + ' = $es4.$$coerce(' + valueJS + ', ' + returnString + ');', _indent + 1, 1);
							}
							else
							{
								js += print(scope + '.' + $es4.$$get(propertyConstruct, null, null, 'identifierToken', 'data') + ' = ' + valueJS + ';', _indent + 1, 1);
							}
							$es4.$$set(propertyConstruct, null, null, 'translatedEarlier', true, '=');
							continue;
						}
					}
				}
				js += print('Object.defineProperty(' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + ', \'' + $es4.$$get(propertyConstruct, null, null, 'identifierToken', 'data') + '\', {', _indent + 1, 1);
				js += print('get:function () { ', _indent + 1, 0);
				js += 'if (' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit !== undefined) ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit(); ';
				js += print('return $$j.' + $es4.$$get(propertyConstruct, null, null, 'identifierToken', 'data') + '; },', 0, 1);
				js += print('set:function (value) { ', _indent + 1, 0);
				js += 'if (' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit !== undefined) ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit(); ';
				if (returnString)
				{
					js += print('$$j.' + $es4.$$get(propertyConstruct, null, null, 'identifierToken', 'data') + ' = $es4.$$coerce(value, ' + returnString + '); }', 0, 1);
				}
				else
				{
					js += print('$$j.' + $es4.$$get(propertyConstruct, null, null, 'identifierToken', 'data') + ' = value }', 0, 1);
				}
				js += print('});', _indent + 1, 2);
			}
			return js;
		}
;

		function translateInstanceProperties($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			var js = '';
			var propertyConstructs = $es4.$$get(construct, null, null, 'instancePropertyConstructs');
			for (var i = 0; i < $es4.$$get(propertyConstructs, null, null, 'length'); i++)
			{
				var propertyConstruct = $es4.$$get(propertyConstructs, null, null, i);
				if (!js)
				{
					js += print('//properties', _indent + 2, 1);
				}
				var namespaceObj = $es4.$$get(propertyConstruct, null, null, 'identifier', 'namespaceObj');
				if ($es4.$$get(namespaceObj, null, null, 'isCustom'))
				{
					throw $es4.$$primitive(new (Error)('custom namespace properties not supported at this time'));
				}
				var returnString = getTranslatedTypeName($es4.$$get(propertyConstruct, null, null, 'identifier', 'type'));
				if ($es4.$$get(namespaceObj, null, null, 'isPrivate'))
				{
					js += print($es4.$$get(construct, null, null, 'identifierToken', 'data') + '.prototype.$$v.' + $es4.$$get(propertyConstruct, null, null, 'identifierToken', 'data') + ' = {', _indent + 2, 1);
					js += print('get:function () { var $$this = this.$$this; return $$this.$$' + $es4.$$call($es4.$$call((($es4.$$get(construct, null, null, 'packageName') && _extendsNameConflict ? $es4.$$get(construct, null, null, 'packageName') : '') + $es4.$$get(construct, null, null, 'identifierToken', 'data')), null, null, 'split', ['.']), null, null, 'join', ['']) + '.$$p.' + $es4.$$get(propertyConstruct, null, null, 'identifierToken', 'data') + '; },', _indent + 2, 1);
					if (returnString)
					{
						js += print('set:function (value) { var $$this = this.$$this; $$this.$$' + $es4.$$call($es4.$$call((($es4.$$get(construct, null, null, 'packageName') && _extendsNameConflict ? $es4.$$get(construct, null, null, 'packageName') : '') + $es4.$$get(construct, null, null, 'identifierToken', 'data')), null, null, 'split', ['.']), null, null, 'join', ['']) + '.$$p.' + $es4.$$get(propertyConstruct, null, null, 'identifierToken', 'data') + ' = $es4.$$coerce(value, ' + returnString + '); }', _indent + 2, 1);
					}
					else
					{
						js += print('set:function (value) { var $$this = this.$$this; $$this.$$' + $es4.$$call($es4.$$call((($es4.$$get(construct, null, null, 'packageName') && _extendsNameConflict ? $es4.$$get(construct, null, null, 'packageName') : '') + $es4.$$get(construct, null, null, 'identifierToken', 'data')), null, null, 'split', ['.']), null, null, 'join', ['']) + '.$$p.' + $es4.$$get(propertyConstruct, null, null, 'identifierToken', 'data') + ' = value }', _indent + 2, 1);
					}
					js += print('};', _indent + 2, 2);
					continue;
				}
				js += print('Object.defineProperty(' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.prototype, \'' + $es4.$$get(propertyConstruct, null, null, 'identifierToken', 'data') + '\', {', _indent + 2, 1);
				js += print('get:function () { var $$this = this; return $$this.$$' + $es4.$$call($es4.$$call((($es4.$$get(construct, null, null, 'packageName') && _extendsNameConflict ? $es4.$$get(construct, null, null, 'packageName') : '') + $es4.$$get(construct, null, null, 'identifierToken', 'data')), null, null, 'split', ['.']), null, null, 'join', ['']) + '.' + $es4.$$get(propertyConstruct, null, null, 'identifierToken', 'data') + '; },', _indent + 2, 1);
				if (returnString)
				{
					js += print('set:function (value) { var $$this = this; $$this.$$' + $es4.$$call($es4.$$call((($es4.$$get(construct, null, null, 'packageName') && _extendsNameConflict ? $es4.$$get(construct, null, null, 'packageName') : '') + $es4.$$get(construct, null, null, 'identifierToken', 'data')), null, null, 'split', ['.']), null, null, 'join', ['']) + '.' + $es4.$$get(propertyConstruct, null, null, 'identifierToken', 'data') + ' = $es4.$$coerce(value, ' + returnString + '); }', _indent + 2, 1);
				}
				else
				{
					js += print('set:function (value) { var $$this = this; $$this.$$' + $es4.$$call($es4.$$call((($es4.$$get(construct, null, null, 'packageName') && _extendsNameConflict ? $es4.$$get(construct, null, null, 'packageName') : '') + $es4.$$get(construct, null, null, 'identifierToken', 'data')), null, null, 'split', ['.']), null, null, 'join', ['']) + '.' + $es4.$$get(propertyConstruct, null, null, 'identifierToken', 'data') + ' = value }', _indent + 2, 1);
				}
				js += print('});', _indent + 2, 2);
			}
			return js;
		}
;

		function translateStaticMethods($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			var js = '';
			for (var i = 0; i < $es4.$$get(construct, null, null, 'staticMethodConstructs', 'length'); i++)
			{
				var methodConstruct = $es4.$$get(construct, null, null, 'staticMethodConstructs', i);
				var namespaceObj = $es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj');
				if ($es4.$$get(methodConstruct, null, null, 'isJavaScript'))
				{
					if ($es4.$$get(namespaceObj, null, null, 'isCustom'))
					{
						js += translateCustomNamespaceJavaScriptStaticMethod(construct, methodConstruct);
					}
					else
					{
						js += translateNoCustomNamespaceJavaScriptStaticMethod(construct, methodConstruct);
					}
				}
				else
				{
					if ($es4.$$get(namespaceObj, null, null, 'isCustom'))
					{
						js += translateCustomNamespaceStaticMethod(construct, methodConstruct);
					}
					else
					{
						js += translateNoCustomNamespaceStaticMethod(construct, methodConstruct);
					}
				}
				if (i + 1 < $es4.$$get(construct, null, null, 'staticMethodConstructs', 'length'))
				{
					js += print('', 0, 2);
				}
			}
			return js;
		}
;

		function translateNoCustomNamespaceJavaScriptStaticMethod($$$$construct, $$$$methodConstruct) 
		{
			//set default parameter values
			var construct = $$$$construct;
			var methodConstruct = $$$$methodConstruct;

			_inStaticFunction = true;
			var js = '';
			var namespaceObj = $es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj');
			var type = $es4.$$get(methodConstruct, null, null, 'identifier', 'type');
			upLevel();
			js += print('//' + $es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj', 'name') + ' static method', _indent, 1, (js) ? 1 : 0);
			if (getTranslatedTypeName(type))
			{
				js += translateJavaScriptWithReturnTypeStaticMethod(construct, methodConstruct);
			}
			else
			{
				js += translateJavaScriptWithoutReturnTypeStaticMethod(construct, methodConstruct);
			}
			downLevel();
			_inStaticFunction = false;
			return js;

			function translateJavaScriptWithReturnTypeStaticMethod($$$$construct, $$$$methodConstruct) 
			{
				//set default parameter values
				var construct = $$$$construct;
				var methodConstruct = $$$$methodConstruct;

				var js = '';
				js += print($es4.$$get(construct, null, null, 'identifierToken', 'data') + '.' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + ' = (function () { return $es4.$$coerce((function (', _indent, 0);
				js += translateParameters(methodConstruct, construct);
				js += print(')', 0, 1);
				js += print('{', _indent, 1);
				js += print('if (' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit !== undefined) ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit();', _indent + 1, 2);
				js += translateDefaultParameterValues(methodConstruct, construct);
				js += $es4.$$get(methodConstruct, null, null, 'javaScriptString');
				js += print('', 0, 1);
				js += print('}).apply(this, arguments), ' + getTranslatedTypeName(type) + ');});', _indent, 1);
				return js;
			}
;

			function translateJavaScriptWithoutReturnTypeStaticMethod($$$$construct, $$$$methodConstruct) 
			{
				//set default parameter values
				var construct = $$$$construct;
				var methodConstruct = $$$$methodConstruct;

				var js = '';
				js += print($es4.$$get(construct, null, null, 'identifierToken', 'data') + '.' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + ' = (function (', _indent, 0);
				js += translateParameters(methodConstruct, construct);
				js += print(')', 0, 1);
				js += print('{', _indent, 1);
				js += print('if (' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit !== undefined) ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit();', _indent + 1, 2);
				js += translateDefaultParameterValues(methodConstruct, construct);
				js += $es4.$$get(methodConstruct, null, null, 'javaScriptString');
				js += print('', _indent, 1);
				js += print('});', _indent, 0);
				return js;
			}
;
		}
;

		function translateCustomNamespaceJavaScriptStaticMethod($$$$construct, $$$$methodConstruct) 
		{
			//set default parameter values
			var construct = $$$$construct;
			var methodConstruct = $$$$methodConstruct;

			return 'TODO translateCustomNamespaceJavaScriptStaticMethod';
		}
;

		function translateNoCustomNamespaceStaticMethod($$$$construct, $$$$methodConstruct) 
		{
			//set default parameter values
			var construct = $$$$construct;
			var methodConstruct = $$$$methodConstruct;

			_inStaticFunction = true;
			var js = '';
			var namespaceObj = $es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj');
			upLevel();
			var type = $es4.$$get(methodConstruct, null, null, 'identifier', 'type');
			js += print('//' + $es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj', 'name') + ' static method', _indent, 1, (js) ? 1 : 0);
			js += print($es4.$$get(construct, null, null, 'identifierToken', 'data') + '.' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + ' = (function (', _indent, 0);
			js += translateParameters(methodConstruct, construct);
			js += print(')', 0, 1);
			js += print('{', _indent, ($es4.$$get(methodConstruct, null, null, 'isJavaScript')) ? 0 : 1);
			js += print('if (' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit !== undefined) ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit();', _indent + 1, 2);
			js += translateDefaultParameterValues(methodConstruct, construct);
			if ($es4.$$get(methodConstruct, null, null, 'UNIMPLEMENTEDToken') && release)
			{
				js += print("throw new Error('" + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + "');", 0, 0);
			}
			else
			{
				js += print(translateStatements($es4.$$get(methodConstruct, null, null, 'bodyStatements'), _indent + 1, construct), 0, 0);
			}
			js += print('});', _indent, 0);
			downLevel();
			_inStaticFunction = false;
			return js;
		}
;

		function translateCustomNamespaceStaticMethod($$$$construct, $$$$methodConstruct) 
		{
			//set default parameter values
			var construct = $$$$construct;
			var methodConstruct = $$$$methodConstruct;

			return 'TODO translateCustomNamespaceStaticMethod';
		}
;

		function translateInstanceMethods($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			var js = '';
			for (var i = 0; i < $es4.$$get(construct, null, null, 'instanceMethodConstructs', 'length'); i++)
			{
				var methodConstruct = $es4.$$get(construct, null, null, 'instanceMethodConstructs', i);
				var namespaceObj = $es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj');
				var type = $es4.$$get(methodConstruct, null, null, 'identifier', 'type');
				if ($es4.$$get(methodConstruct, null, null, 'isJavaScript'))
				{
					if ($es4.$$get(namespaceObj, null, null, 'isCustom'))
					{
						continue;
					}
					else
					{
						js += translateNoCustomNamespaceJavaScriptInstanceMethod(construct, methodConstruct);
					}
				}
				else
				{
					if ($es4.$$get(namespaceObj, null, null, 'isCustom'))
					{
						continue;
					}
					else
					{
						js += translateNoCustomNamespaceInstanceMethod(construct, methodConstruct);
					}
				}
				if (i + 1 < $es4.$$get(construct, null, null, 'instanceMethodConstructs', 'length'))
				{
					js += print('', 0, 2);
				}
			}
			return js;
		}
;

		function translateNamespaceInstanceMethods($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			var js = '';
			for (var i = 0; i < $es4.$$get(construct, null, null, 'instanceMethodConstructs', 'length'); i++)
			{
				var methodConstruct = $es4.$$get(construct, null, null, 'instanceMethodConstructs', i);
				var namespaceObj = $es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj');
				var type = $es4.$$get(methodConstruct, null, null, 'identifier', 'type');
				if (!$es4.$$get(namespaceObj, null, null, 'isCustom'))
				{
					continue;
				}
				if ($es4.$$get(methodConstruct, null, null, 'isJavaScript'))
				{
					js += translateCustomNamespaceJavaScriptInstanceMethod(construct, methodConstruct);
				}
				else
				{
					js += translateCustomNamespaceInstanceMethod(construct, methodConstruct);
				}
				if (i + 1 < $es4.$$get(construct, null, null, 'instanceMethodConstructs', 'length'))
				{
					js += print('', 0, 2);
				}
			}
			return js;
		}
;

		function translateCustomNamespaceInstanceMethod($$$$construct, $$$$methodConstruct) 
		{
			//set default parameter values
			var construct = $$$$construct;
			var methodConstruct = $$$$methodConstruct;

			upLevel();
			upLevel();
			var js = '';
			var namespaceObj = $es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj');
			var type = $es4.$$get(methodConstruct, null, null, 'identifier', 'type');
			js += print('//custom namespace method', _indent, 1, 1);
			var namespaceString = ($es4.$$get(namespaceObj, null, null, 'importID')) ? ', ' + $es4.$$get(namespaceObj, null, null, 'normalizedImportID') : ', ' + ($es4.$$get(namespaceObj, null, null, 'namespaceIsPrivate') ? ('$$this.$$' + $es4.$$call($es4.$$call((($es4.$$get(construct, null, null, 'packageName') && _extendsNameConflict ? $es4.$$get(construct, null, null, 'packageName') : '') + $es4.$$get(construct, null, null, 'identifierToken', 'data')), null, null, 'split', ['.']), null, null, 'join', ['']) + '.$$ns.') : '$$this.') + $es4.$$get(namespaceObj, null, null, 'normalizedName');
			js += print('$es4.$$cnamespace_function(\'' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + '\', $$this, ' + ('$$this.$$' + $es4.$$call($es4.$$call((($es4.$$get(construct, null, null, 'packageName') && _extendsNameConflict ? $es4.$$get(construct, null, null, 'packageName') : '') + $es4.$$get(construct, null, null, 'identifierToken', 'data')), null, null, 'split', ['.']), null, null, 'join', ['']) + '.$$ns') + namespaceString + ', (function (', _indent, 0);
			js += translateParameters(methodConstruct, construct);
			js += print(')', 0, 1);
			js += print('{', _indent, 1);
			js += translateDefaultParameterValues(methodConstruct, construct);
			if ($es4.$$get(methodConstruct, null, null, 'UNIMPLEMENTEDToken') && release)
			{
				js += print("throw new Error('" + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + "');", 0, 0);
			}
			else
			{
				_inNamespacedFunction = ($es4.$$get(namespaceObj, null, null, 'importID')) ? $es4.$$get(namespaceObj, null, null, 'importID') : ('$$this.$$' + $es4.$$call($es4.$$call((($es4.$$get(construct, null, null, 'packageName') && _extendsNameConflict ? $es4.$$get(construct, null, null, 'packageName') : '') + $es4.$$get(construct, null, null, 'identifierToken', 'data')), null, null, 'split', ['.']), null, null, 'join', ['']) + '.$$ns.') + $es4.$$get(namespaceObj, null, null, 'name');
				js += print(translateStatements($es4.$$get(methodConstruct, null, null, 'bodyStatements'), _indent + 1, construct), 0, 0);
				_inNamespacedFunction = false;
			}
			js += print('})', _indent, 0);
			js += print(');', 0, 1);
			downLevel();
			downLevel();
			return js;
		}
;

		function translateNoCustomNamespaceInstanceMethod($$$$construct, $$$$methodConstruct) 
		{
			//set default parameter values
			var construct = $$$$construct;
			var methodConstruct = $$$$methodConstruct;

			upLevel();
			upLevel();
			var js = '';
			var namespaceObj = $es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj');
			var type = $es4.$$get(methodConstruct, null, null, 'identifier', 'type');
			js += print('//' + $es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj', 'name') + ' instance method', _indent, 1);
			js += ($es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj', 'isPrivate')) ? translatePrivate() : translateOther();
			downLevel();
			downLevel();
			return js;

			function translatePrivate() 
			{
				var js = '';
				js += print($es4.$$get(construct, null, null, 'identifierToken', 'data') + '.prototype.$$v.' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + ' = {', _indent, 1);
				js += print('get:function ()', _indent, 1);
				js += print('{', _indent, 1);
				js += print('var $$this = this.$$this;', _indent + 1, 2);
				upLevel();
				js += print('function ' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + '(', _indent, 0);
				js += translateParameters(methodConstruct, construct);
				js += print(')', 0, 1);
				js += print('{', _indent, 1);
				js += translateDefaultParameterValues(methodConstruct, construct);
				if ($es4.$$get(methodConstruct, null, null, 'UNIMPLEMENTEDToken') && release)
				{
					js += print("throw new Error('" + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + "');", 0, 0);
				}
				else
				{
					js += print(translateStatements($es4.$$get(methodConstruct, null, null, 'bodyStatements'), _indent + 1, construct), 0, 0);
				}
				js += print('}', _indent, 2);
				var name = '$$this.$$' + $es4.$$call($es4.$$call((($es4.$$get(construct, null, null, 'packageName') && _extendsNameConflict ? $es4.$$get(construct, null, null, 'packageName') : '') + $es4.$$get(construct, null, null, 'identifierToken', 'data')), null, null, 'split', ['.']), null, null, 'join', ['']) + '.$$p.$$' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data');
				js += print('return ' + name + ' || (' + name + ' = ' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + ');', _indent, 1);
				downLevel();
				js += print('}};', _indent, 1);
				return js;
			}
;

			function translateOther() 
			{
				var js = '';
				js += print('Object.defineProperty(' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.prototype, \'' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + '\', {', _indent, 1);
				js += print('get:function ()', _indent, 1);
				js += print('{', _indent, 1);
				js += print('var $$this = this;', _indent + 1, 2);
				upLevel();
				js += print('function ' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + '(', _indent, 0);
				js += translateParameters(methodConstruct, construct);
				js += print(')', 0, 1);
				js += print('{', _indent, 1);
				js += translateDefaultParameterValues(methodConstruct, construct);
				if ($es4.$$get(methodConstruct, null, null, 'UNIMPLEMENTEDToken') && release)
				{
					js += print("throw new Error('" + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + "');", 0, 0);
				}
				else
				{
					js += print(translateStatements($es4.$$get(methodConstruct, null, null, 'bodyStatements'), _indent + 1, construct), 0, 0);
				}
				js += print('}', _indent, 2);
				var name = '$$this.$$' + $es4.$$call($es4.$$call((($es4.$$get(construct, null, null, 'packageName') && _extendsNameConflict ? $es4.$$get(construct, null, null, 'packageName') : '') + $es4.$$get(construct, null, null, 'identifierToken', 'data')), null, null, 'split', ['.']), null, null, 'join', ['']) + '.$$' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data');
				js += print('return ' + name + ' || (' + name + ' = ' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + ');', _indent, 1);
				downLevel();
				js += print('}});', _indent, 1);
				return js;
			}
;
		}
;

		function translateNoCustomNamespaceJavaScriptInstanceMethod($$$$construct, $$$$methodConstruct) 
		{
			//set default parameter values
			var construct = $$$$construct;
			var methodConstruct = $$$$methodConstruct;

			upLevel();
			upLevel();
			var js = '';
			var namespaceObj = $es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj');
			var type = $es4.$$get(methodConstruct, null, null, 'identifier', 'type');
			js += print('//' + $es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj', 'name') + ' instance method', _indent, 1);
			js += ($es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj', 'isPrivate')) ? translatePrivate() : translateOther();
			downLevel();
			downLevel();
			return js;

			function translatePrivate() 
			{
				var js = '';
				js += print($es4.$$get(construct, null, null, 'identifierToken', 'data') + '.prototype.$$v.' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + ' = {', _indent, 1);
				js += print('get:function ()', _indent, 1);
				js += print('{', _indent, 1);
				js += print('var $$this = this.$$this;', _indent + 1, 2);
				upLevel();
				js += print('function ' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + '(', _indent, 0);
				js += translateParameters(methodConstruct, construct);
				js += print(')', 0, 1);
				js += print('{', _indent, 1);
				js += translateDefaultParameterValues(methodConstruct, construct);
				js += $es4.$$get(methodConstruct, null, null, 'javaScriptString');
				js += print('', 0, 1);
				js += print('}', _indent, 2);
				var name = '$$this.$$' + $es4.$$call($es4.$$call((($es4.$$get(construct, null, null, 'packageName') && _extendsNameConflict ? $es4.$$get(construct, null, null, 'packageName') : '') + $es4.$$get(construct, null, null, 'identifierToken', 'data')), null, null, 'split', ['.']), null, null, 'join', ['']) + '.$$p.$$' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data');
				if (getTranslatedTypeName(type))
				{
					js += print('return ' + name + ' || (' + name + ' = function () { return $es4.$$coerce(' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + '.apply($$this, arguments), ' + getTranslatedTypeName(type) + '); });', _indent, 1);
				}
				else
				{
					js += print('return ' + name + ' || (' + name + ' = function () { return ' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + '.apply($$this, arguments); });', _indent, 1);
				}
				downLevel();
				js += print('}};', _indent, 1);
				return js;
			}
;

			function translateOther() 
			{
				var js = '';
				js += print('Object.defineProperty(' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.prototype, \'' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + '\', {', _indent, 0);
				js += print(' get:function ()', 0, 0);
				js += print(' {', 0, 0);
				js += print(' var $$this = this; ', 0, 0);
				js += print('return $$this.$$' + $es4.$$call($es4.$$call((($es4.$$get(construct, null, null, 'packageName') && _extendsNameConflict ? $es4.$$get(construct, null, null, 'packageName') : '') + $es4.$$get(construct, null, null, 'identifierToken', 'data')), null, null, 'split', ['.']), null, null, 'join', ['']) + '.' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + ' || ' + '($$this.$$' + $es4.$$call($es4.$$call((($es4.$$get(construct, null, null, 'packageName') && _extendsNameConflict ? $es4.$$get(construct, null, null, 'packageName') : '') + $es4.$$get(construct, null, null, 'identifierToken', 'data')), null, null, 'split', ['.']), null, null, 'join', ['']) + '.' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + ' = ', 0, 0);
				if (getTranslatedTypeName(type))
				{
					js += print('function () { return $es4.$$coerce(' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + '.apply($$this, arguments), ' + getTranslatedTypeName(type) + '); }); }});', 0, 1);
				}
				else
				{
					js += print('function () { return ' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + '.apply($$this, arguments); }); }});', 0, 1);
				}
				js += print('function ' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + '(', _indent, 0);
				js += translateParameters(methodConstruct, construct);
				js += print(')', 0, 1);
				js += print('{', _indent, (!$es4.$$get(methodConstruct, null, null, 'parameterConstructs', 'length')) ? 0 : 1);
				js += translateDefaultParameterValues(methodConstruct, construct);
				js += $es4.$$get(methodConstruct, null, null, 'javaScriptString');
				js += print('}', 0, 1);
				return js;
			}
;
		}
;

		function translateCustomNamespaceJavaScriptInstanceMethod($$$$construct, $$$$methodConstruct) 
		{
			//set default parameter values
			var construct = $$$$construct;
			var methodConstruct = $$$$methodConstruct;

			return 'TODO translateCustomNamespaceJavaScriptInstanceMethod';
		}
;

		function translateStaticAccessors($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			_inStaticFunction = true;
			var js = '';

			function getMethodConstructJS($$$$methodConstruct, $$$$type) 
			{
				//set default parameter values
				var methodConstruct = $$$$methodConstruct;
				var type = $$$$type;

				if (!methodConstruct)
				{
					return 'null';
				}
				upLevel();
				var js = 'function (';
				js += translateParameters(methodConstruct, construct);
				js += print(')', 0, 1);
				js += print('{', _indent, ($es4.$$get(methodConstruct, null, null, 'javaScriptString')) ? 0 : 1);
				js += print('if (' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit !== undefined) ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit();', _indent + 1, ($es4.$$get(methodConstruct, null, null, 'isJavaScript')) ? 0 : 2);
				js += translateDefaultParameterValues(methodConstruct, construct);
				if ($es4.$$get(methodConstruct, null, null, 'isNative'))
				{
					throw $es4.$$primitive(new (Error)('accessor cannot be native: ' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data')));
				}
				if ($es4.$$get(methodConstruct, null, null, 'isJavaScript'))
				{
					js += $es4.$$get(methodConstruct, null, null, 'javaScriptString');
				}
				else if ($es4.$$get(methodConstruct, null, null, 'UNIMPLEMENTEDToken') && release)
				{
					js += print("throw new Error('" + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + "');", 0, 0);
				}
				else
				{
					js += translateStatements($es4.$$get(methodConstruct, null, null, 'bodyStatements'), _indent + 1, construct);
				}
				js += print('}', ($es4.$$get(methodConstruct, null, null, 'javaScriptString')) ? 0 : _indent, 0);
				downLevel();
				return js;
			}
;

			for (var i = 0; i < $es4.$$get(construct, null, null, 'staticAccessorConstructs', 'length'); i++)
			{
				var setterMethodConstruct = $es4.$$get(construct, null, null, 'staticAccessorConstructs', i, 'setter');
				var getterMethodConstruct = $es4.$$get(construct, null, null, 'staticAccessorConstructs', i, 'getter');
				var methodConstruct = setterMethodConstruct || getterMethodConstruct;
				if ($es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj', 'isCustom'))
				{
					throw $es4.$$primitive(new (Error)('custom namespaced accessor not supported at this time'));
				}
				var namespaceObj = $es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj');
				js += print('Object.defineProperty(' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + ', \'' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + '\', {', _indent + 1, 0);
				var type = (getterMethodConstruct) ? $es4.$$get(getterMethodConstruct, null, null, 'identifier', 'type') : $es4.$$get(setterMethodConstruct, null, null, 'identifier', 'type');
				if (getterMethodConstruct)
				{
					js += 'get:';
					if ($es4.$$get(methodConstruct, null, null, 'isJavaScript') && getTranslatedTypeName(type))
					{
						js += 'function () { return $es4.$$coerce((';
					}
					js += getMethodConstructJS(getterMethodConstruct, type);
					if ($es4.$$get(methodConstruct, null, null, 'isJavaScript') && getTranslatedTypeName(type))
					{
						js += ')(), ' + getTranslatedTypeName(type) + ');}';
					}
					if (setterMethodConstruct)
					{
						js += ', ';
					}
				}
				if (setterMethodConstruct)
				{
					js += 'set:';
					js += getMethodConstructJS(setterMethodConstruct, type);
				}
				js += print('});', 0, 1);
			}
			_inStaticFunction = false;
			return js;
		}
;

		function translateInstanceAccessors($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			upLevel();
			var js = '';

			function getMethodConstructJS($$$$methodConstruct, $$$$type, $$$$isPrivate) 
			{
				//set default parameter values
				var methodConstruct = $$$$methodConstruct;
				var type = $$$$type;
				var isPrivate = $$$$isPrivate;

				if (!methodConstruct)
				{
					return 'null';
				}
				upLevel();
				var js = 'function (';
				js += translateParameters(methodConstruct, construct);
				js += print(')', 0, 1);
				js += print('{', _indent, ($es4.$$get(methodConstruct, null, null, 'javaScriptString')) ? 0 : 1);
				js += translateDefaultParameterValues(methodConstruct, construct);
				if ($es4.$$get(methodConstruct, null, null, 'isNative'))
				{
					throw $es4.$$primitive(new (Error)('accessor cannot be native: ' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data')));
				}
				if (!isPrivate)
				{
					js += print('var $$this = this;', _indent + 1, 1);
				}
				else
				{
					js += print('var $$this = this.$$this;', _indent + 1, 1);
				}
				if ($es4.$$get(methodConstruct, null, null, 'isJavaScript'))
				{
					js += $es4.$$get(methodConstruct, null, null, 'javaScriptString');
				}
				else if ($es4.$$get(methodConstruct, null, null, 'UNIMPLEMENTEDToken') && release)
				{
					js += print("throw new Error('" + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + "');", 0, 0);
				}
				else
				{
					js += translateStatements($es4.$$get(methodConstruct, null, null, 'bodyStatements'), _indent + 1, construct);
				}
				js += print('}', ($es4.$$get(methodConstruct, null, null, 'javaScriptString')) ? 0 : _indent, 0);
				downLevel();
				return js;
			}
;

			for (var i = 0; i < $es4.$$get(construct, null, null, 'instanceAccessorConstructs', 'length'); i++)
			{
				var setterMethodConstruct = $es4.$$get(construct, null, null, 'instanceAccessorConstructs', i, 'setter');
				var getterMethodConstruct = $es4.$$get(construct, null, null, 'instanceAccessorConstructs', i, 'getter');
				var methodConstruct = setterMethodConstruct || getterMethodConstruct;
				if ($es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj', 'isCustom'))
				{
					throw $es4.$$primitive(new (Error)('custom namespaced accessor not supported at this time'));
				}
				var namespaceObj = $es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj');
				var isPrivate = $es4.$$get(methodConstruct, null, null, 'namespaceToken', 'data') == 'private';
				var hasGet = false;
				if (isPrivate)
				{
					js += print($es4.$$get(construct, null, null, 'identifierToken', 'data') + '.prototype.$$v.' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + ' = {', _indent + 1, 0);
				}
				else
				{
					js += print('Object.defineProperty(' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.prototype, \'' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + '\', {', _indent + 1, 0);
				}
				var type = (getterMethodConstruct) ? $es4.$$get(getterMethodConstruct, null, null, 'identifier', 'type') : $es4.$$get(setterMethodConstruct, null, null, 'identifier', 'type');
				if (!getterMethodConstruct && $es4.$$get(methodConstruct, null, null, 'overrideToken'))
				{
					hasGet = true;
					js += 'get:function ()';
					js += print('{', _indent + 1, 1, 1);
					js += print('var $$this = this; return $es4.$$super2($$this, ' + getTranslatedTypeName($es4.$$get(construct, null, null, 'extendsNameConstruct', 'type')) + ', \'$$' + $es4.$$call($es4.$$call((($es4.$$get(construct, null, null, 'packageName') && _extendsNameConflict ? $es4.$$get(construct, null, null, 'packageName') : '') + $es4.$$get(construct, null, null, 'identifierToken', 'data')), null, null, 'split', ['.']), null, null, 'join', ['']) + '\', \'' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + '\', \'get\');', _indent + 2, 0);
					js += print('}', _indent + 1, 0, 1);
				}
				else if (getterMethodConstruct)
				{
					hasGet = true;
					js += 'get:';
					if ($es4.$$get(methodConstruct, null, null, 'isJavaScript') && getTranslatedTypeName(type))
					{
						js += 'function () { return $es4.$$coerce((';
					}
					js += getMethodConstructJS(getterMethodConstruct, type, isPrivate);
					if ($es4.$$get(methodConstruct, null, null, 'isJavaScript') && getTranslatedTypeName(type))
					{
						js += ')(), ' + getTranslatedTypeName(type) + ');}';
					}
				}
				if (!setterMethodConstruct && $es4.$$get(methodConstruct, null, null, 'overrideToken'))
				{
					if (hasGet)
					{
						js += ', ';
					}
					js += 'set:function ($$value)';
					js += print('{', _indent + 1, 1, 1);
					js += print('var $$this = this; $es4.$$super2($$this, ' + getTranslatedTypeName($es4.$$get(construct, null, null, 'extendsNameConstruct', 'type')) + ', \'$$' + $es4.$$call($es4.$$call((($es4.$$get(construct, null, null, 'packageName') && _extendsNameConflict ? $es4.$$get(construct, null, null, 'packageName') : '') + $es4.$$get(construct, null, null, 'identifierToken', 'data')), null, null, 'split', ['.']), null, null, 'join', ['']) + '\', \'' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + '\', \'set\', $$value);', _indent + 2, 0);
					js += print('}', _indent + 1, 0, 1);
				}
				else if (setterMethodConstruct)
				{
					if (hasGet)
					{
						js += ', ';
					}
					js += 'set:';
					js += getMethodConstructJS(setterMethodConstruct, type, isPrivate);
				}
				if (isPrivate)
				{
					js += print('};', 0, 1);
				}
				else
				{
					js += print('});', 0, 1);
				}
			}
			downLevel();
			return js;
		}
;

		function translateParameters($$$$methodConstruct, $$$$construct) 
		{
			//set default parameter values
			var methodConstruct = $$$$methodConstruct;
			var construct = $$$$construct;

			var js = '';
			for (var i = 0; i < $es4.$$get(methodConstruct, null, null, 'parameterConstructs', 'length'); i++)
			{
				var parameterConstruct = $es4.$$get(methodConstruct, null, null, 'parameterConstructs', i);
				js += '$$$$' + $es4.$$get(parameterConstruct, null, null, 'identifierToken', 'data');
				if ((i + 1) < $es4.$$get(methodConstruct, null, null, 'parameterConstructs', 'length'))
				{
					js += ', ';
				}
			}
			return js;
		}
;

		function translateDefaultParameterValues($$$$methodConstruct, $$$$construct) 
		{
			//set default parameter values
			var methodConstruct = $$$$methodConstruct;
			var construct = $$$$construct;

			var js = '';
			for (var i = 0; i < $es4.$$get(methodConstruct, null, null, 'parameterConstructs', 'length'); i++)
			{
				var parameterConstruct = $es4.$$get(methodConstruct, null, null, 'parameterConstructs', i);
				if (!js)
				{
					js += print('//set default parameter values', _indent + 1, 1);
				}
				if ($es4.$$get(parameterConstruct, null, null, 'restToken') || $es4.$$get(parameterConstruct, null, null, 'valueExpression'))
				{
					if ($es4.$$get(parameterConstruct, null, null, 'restToken'))
					{
						js += print('for (var $$i = ' + ($es4.$$get(methodConstruct, null, null, 'parameterConstructs', 'length') - 1) + ', $$length = arguments.length, ' + $es4.$$get(parameterConstruct, null, null, 'identifierToken', 'data') + ' = new Array($$length - ' + ($es4.$$get(methodConstruct, null, null, 'parameterConstructs', 'length') - 1) + '); $$i < $$length; $$i += 1) ' + $es4.$$get(parameterConstruct, null, null, 'identifierToken', 'data') + '[$$i - ' + ($es4.$$get(methodConstruct, null, null, 'parameterConstructs', 'length') - 1) + '] = arguments[$$i];', _indent + 1, 1);
					}
					else if ($es4.$$get(parameterConstruct, null, null, 'valueExpression'))
					{
						var coerceType = getTranslatedTypeName($es4.$$get(parameterConstruct, null, null, 'identifier', 'type'));
						if (coerceType)
						{
							js += print('var ' + $es4.$$get(parameterConstruct, null, null, 'identifierToken', 'data') + ' = (' + i + ' > arguments.length - 1) ? ' + translateExpression($es4.$$get(parameterConstruct, null, null, 'valueExpression'), 0, false, construct) + ' : $es4.$$coerce($$$$' + $es4.$$get(parameterConstruct, null, null, 'identifierToken', 'data') + ', ' + coerceType + ');', _indent + 1, 1);
						}
						else
						{
							js += print('var ' + $es4.$$get(parameterConstruct, null, null, 'identifierToken', 'data') + ' = (' + i + ' > arguments.length - 1) ? ' + translateExpression($es4.$$get(parameterConstruct, null, null, 'valueExpression'), 0, false, construct) + ' : $$$$' + $es4.$$get(parameterConstruct, null, null, 'identifierToken', 'data') + ';', _indent + 1, 1);
						}
					}
				}
				else
				{
					var coerceType = getTranslatedTypeName($es4.$$get(parameterConstruct, null, null, 'identifier', 'type'));
					if (coerceType)
					{
						js += print('var ' + $es4.$$get(parameterConstruct, null, null, 'identifierToken', 'data') + ' = $es4.$$coerce($$$$' + $es4.$$get(parameterConstruct, null, null, 'identifierToken', 'data') + ', ' + coerceType + ');', _indent + 1, 1);
					}
					else
					{
						js += print('var ' + $es4.$$get(parameterConstruct, null, null, 'identifierToken', 'data') + ' = $$$$' + $es4.$$get(parameterConstruct, null, null, 'identifierToken', 'data') + ';', _indent + 1, 1);
					}
				}
			}
			if (js)
			{
				js += print('', 0, 1);
			}
			return js;
		}
;

		function translateStatements($$$$statements, $$$$indent, $$$$construct) 
		{
			//set default parameter values
			var statements = $$$$statements;
			var indent = $$$$indent;
			var construct = $$$$construct;

			if (!indent)
			{
				indent = _indent;
			}
			else
			{
				indent--;
			}
			var js = '';
			for (var i = 0; i < $es4.$$get(statements, null, null, 'length'); i++)
			{
				var statement = $es4.$$get(statements, null, null, i);
				if (i != 0 && $es4.$$get(statements, null, null, i - 1, 'constructor') != $es4.$$get(Construct, null, null, 'FunctionExpression') && $es4.$$get(statements, null, null, i, 'constructor') == $es4.$$get(Construct, null, null, 'FunctionExpression'))
				{
					js += '\n';
				}
				js += translateStatement(statement, indent + 1, false, construct);
				if (i + 1 < $es4.$$get(statements, null, null, 'length') && $es4.$$get(statement, null, null, 'constructor') == 'FunctionExpression')
				{
					js += '\n';
				}
			}
			return js;
		}
;

		function translateStatement($$$$statement, $$$$_indent, $$$$inline, $$$$construct) 
		{
			//set default parameter values
			var statement = $$$$statement;
			var _indent = $$$$_indent;
			var inline = $$$$inline;
			var construct = $$$$construct;

			if (!construct)
			{
				throw $es4.$$primitive(new (Error)('construct null in translate statement'));
			}
			var js = '';
			switch ($es4.$$get(statement, null, null, 'constructor'))
			{
				case $es4.$$get(Construct, null, null, 'EmptyStatement'):
					break;
				case $es4.$$get(Construct, null, null, 'IfStatement'):
					_inIfStatement++;
					js += print('if (' + translateExpression($es4.$$get(statement, null, null, 'conditionExpression'), _indent, false, construct) + ')', _indent, 1);
					js += print('{', _indent, 1);
					js += translateStatements($es4.$$get(statement, null, null, 'bodyStatements'), _indent + 1, construct);
					js += print('}', _indent, 1);
					for (var i = 0; i < $es4.$$get(statement, null, null, 'elseIfStatements', 'length'); i++)
					{
						js += translateStatement($es4.$$get(statement, null, null, 'elseIfStatements', i), _indent, false, construct);
					}
					if ($es4.$$get(statement, null, null, 'elseStatement'))
					{
						js += translateStatement($es4.$$get(statement, null, null, 'elseStatement'), _indent, false, construct);
					}
					_inIfStatement--;
					break;
				case $es4.$$get(Construct, null, null, 'ElseIfStatement'):
					_inIfStatement++;
					js += print('else if (' + translateExpression($es4.$$get(statement, null, null, 'conditionExpression'), _indent, false, construct) + ')', _indent, 1);
					js += print('{', _indent, 1);
					js += translateStatements($es4.$$get(statement, null, null, 'bodyStatements'), _indent + 1, construct);
					js += print('}', _indent, 1);
					_inIfStatement--;
					break;
				case $es4.$$get(Construct, null, null, 'ElseStatement'):
					_inIfStatement++;
					js += print('else', _indent, 1);
					js += print('{', _indent, 1);
					js += translateStatements($es4.$$get(statement, null, null, 'bodyStatements'), _indent + 1, construct);
					js += print('}', _indent, 1);
					_inIfStatement--;
					break;
				case $es4.$$get(Construct, null, null, 'WhileStatement'):
					js += print('while (' + translateExpression($es4.$$get(statement, null, null, 'conditionExpression'), _indent, false, construct) + ')', _indent, 1);
					js += print('{', _indent, 1);
					js += translateStatements($es4.$$get(statement, null, null, 'bodyStatements'), _indent + 1, construct);
					js += print('}', _indent, 1);
					break;
				case $es4.$$get(Construct, null, null, 'DoWhileStatement'):
					js += print('do', _indent, 1);
					js += print('{', _indent, 1);
					js += translateStatements($es4.$$get(statement, null, null, 'bodyStatements'), _indent + 1, construct);
					js += print('}', _indent, 1);
					js += print('while (' + translateExpression($es4.$$get(statement, null, null, 'conditionExpression'), _indent, false, construct) + ')', _indent, 1);
					break;
				case $es4.$$get(Construct, null, null, 'ForStatement'):
					js += print('for (', _indent, 0);
					if ($es4.$$get(statement, null, null, 'variableStatement'))
					{
						js += translateStatement($es4.$$get(statement, null, null, 'variableStatement'), 0, true, construct);
					}
					js += ';';
					if ($es4.$$get(statement, null, null, 'conditionExpression'))
					{
						js += ' ' + translateExpression($es4.$$get(statement, null, null, 'conditionExpression'), _indent, false, construct);
					}
					js += ';';
					if ($es4.$$get(statement, null, null, 'afterthoughtExpression'))
					{
						js += ' ' + translateExpression($es4.$$get(statement, null, null, 'afterthoughtExpression'), _indent, false, construct);
					}
					js += ')\n';
					js += print('{', _indent, 1);
					js += translateStatements($es4.$$get(statement, null, null, 'bodyStatements'), _indent + 1, construct);
					js += print('}', _indent, 1);
					break;
				case $es4.$$get(Construct, null, null, 'ForEachStatement'):
					_count++;
					var object = translateExpression($es4.$$get(statement, null, null, 'arrayExpression'), _indent, false, construct);
					var index = '$$i' + _count;
					if (_dynamicPropertyAccess)
					{
						js += print('for (var ' + index + ' = (' + object + ' || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); ' + index + ' != 0; ' + index + ' = ' + object + '.$$nextNameIndex(' + index + '))', _indent, 1);
					}
					else
					{
						js += print('for (var ' + index + ' in ' + object + ')', _indent, 1);
					}
					js += print('{', _indent, 1);
					var valueJS = '';
					if (_dynamicPropertyAccess)
					{
						valueJS += object + '.$$nextValue(' + index + ')';
					}
					else
					{
						valueJS += object + '[' + index + ']';
					}
					var typeString = getTranslatedTypeName($es4.$$get(statement, null, null, 'variableStatement', 'identifier', 'type'));
					if (typeString)
					{
						js += print(translateStatement($es4.$$get(statement, null, null, 'variableStatement'), 0, true, construct) + ' = $es4.$$coerce(' + valueJS + ', ' + typeString + ');', _indent + 1, 2);
					}
					else
					{
						js += print(translateStatement($es4.$$get(statement, null, null, 'variableStatement'), 0, true, construct) + ' = ' + valueJS + ';', _indent + 1, 2);
					}
					js += translateStatements($es4.$$get(statement, null, null, 'bodyStatements'), _indent + 1, construct);
					js += print('}', _indent, 1);
					break;
				case $es4.$$get(Construct, null, null, 'ForInStatement'):
					_count++;
					var object = translateExpression($es4.$$get(statement, null, null, 'objectExpression'), _indent, false, construct);
					var index = '$$i' + _count;
					if (_dynamicPropertyAccess)
					{
						js += print('for (var ' + index + ' = (' + object + ' || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); ' + index + ' != 0; ' + index + ' = ' + object + '.$$nextNameIndex(' + index + '))', _indent, 1);
					}
					else
					{
						js += print('for (' + translateStatement($es4.$$get(statement, null, null, 'variableStatement'), 0, true, construct) + ' in ' + translateExpression($es4.$$get(statement, null, null, 'objectExpression'), _indent, false, construct) + ')', _indent, 1);
					}
					js += print('{', _indent, 1);
					if (_dynamicPropertyAccess)
					{
						valueJS = object + '.$$nextName(' + index + ')';
						var typeString = getTranslatedTypeName($es4.$$get(statement, null, null, 'variableStatement', 'identifier', 'type'));
						if (typeString)
						{
							js += print(translateStatement($es4.$$get(statement, null, null, 'variableStatement'), 0, true, construct) + ' = $es4.$$coerce(' + valueJS + ', ' + typeString + ');', _indent + 1, 2);
						}
						else
						{
							js += print(translateStatement($es4.$$get(statement, null, null, 'variableStatement'), 0, true, construct) + ' = ' + valueJS + ';', _indent + 1, 2);
						}
					}
					js += translateStatements($es4.$$get(statement, null, null, 'bodyStatements'), _indent + 1, construct);
					js += print('}', _indent, 1);
					break;
				case $es4.$$get(Construct, null, null, 'BreakStatement'):
					js += print('break', _indent, 0);
					if ($es4.$$get(statement, null, null, 'identifierToken'))
					{
						js += ' ' + $es4.$$get(statement, null, null, 'identifierToken', 'data');
					}
					js += ';\n';
					break;
				case $es4.$$get(Construct, null, null, 'ContinueStatement'):
					js += print('continue', _indent, 0);
					if ($es4.$$get(statement, null, null, 'identifierToken'))
					{
						js += ' ' + $es4.$$get(statement, null, null, 'identifierToken', 'data');
					}
					js += ';\n';
					break;
				case $es4.$$get(Construct, null, null, 'ThrowStatement'):
					js += print('throw', _indent, 0);
					if ($es4.$$get(statement, null, null, 'expression'))
					{
						js += ' ' + translateExpression($es4.$$get(statement, null, null, 'expression'), _indent, false, construct);
					}
					js += ';\n';
					break;
				case $es4.$$get(Construct, null, null, 'TryStatement'):
					js += print('try', _indent, 1);
					js += print('{', _indent, 1);
					js += translateStatements($es4.$$get(statement, null, null, 'bodyStatements'), _indent + 1, construct);
					js += print('}', _indent, 1);
					if ($es4.$$get(statement, null, null, 'catchStatements', 'length') == 1)
					{
						js += print('catch (' + $es4.$$get(statement, null, null, 'catchStatements', 0, 'identifierToken', 'data') + ')', _indent, 1);
					}
					else
					{
						js += print('catch ($$error)', _indent, 1);
					}
					js += print('{', _indent, 1);
					for (var i = 0; i < $es4.$$get(statement, null, null, 'catchStatements', 'length'); i++)
					{
						upLevel();
						var catchStatement = $es4.$$get(statement, null, null, 'catchStatements', i);
						var typeName = $es4.$$get(catchStatement, null, null, 'identifier', 'type', 'name');
						if (i == 0 && $es4.$$get(statement, null, null, 'catchStatements', 'length') == 1)
						{
							if (typeName == 'void' || typeName == 'Error')
							{
								js += translateStatements($es4.$$get(catchStatement, null, null, 'bodyStatements'), _indent + 1, construct);
							}
							else
							{
								js += print('if ($es4.$$is(' + $es4.$$get(catchStatement, null, null, 'identifierToken', 'data') + ', ' + typeName + '))', _indent + 1, 1);
								js += print('{', _indent + 1, 1);
								js += translateStatements($es4.$$get(catchStatement, null, null, 'bodyStatements'), _indent + 2, construct);
								js += print('}', _indent + 1, 1);
							}
							downLevel();
							break;
						}
						if (typeName == 'void' || typeName == 'Error')
						{
							js += print('else', _indent + 1, 1);
							js += print('{', _indent + 1, 1);
							js += print('var ' + $es4.$$get(catchStatement, null, null, 'identifierToken', 'data') + ' = $$error;', _indent + 2, 1);
							js += translateStatements($es4.$$get(catchStatement, null, null, 'bodyStatements'), _indent + 2, construct);
							js += print('}', _indent + 1, 1);
							downLevel();
							break;
						}
						js += print(((i == 0) ? 'if' : 'else if') + ' ($es4.$$is($$error, ' + typeName + '))', _indent + 1, 1);
						js += print('{', _indent + 1, 1);
						js += print('var ' + $es4.$$get(catchStatement, null, null, 'identifierToken', 'data') + ' = $$error;', _indent + 2, 1);
						js += translateStatements($es4.$$get(catchStatement, null, null, 'bodyStatements'), _indent + 2, construct);
						js += print('}', _indent + 1, 1);
						downLevel();
					}
					js += print('}', _indent, 1);
					if ($es4.$$get(statement, null, null, 'finallyStatement'))
					{
						js += print('finally', _indent, 1);
						js += print('{', _indent, 1);
						js += translateStatements($es4.$$get(statement, null, null, 'finallyStatement', 'bodyStatements'), _indent + 1, construct);
						js += print('}', _indent, 1);
					}
					break;
				case $es4.$$get(Construct, null, null, 'UseStatement'):
					break;
				case $es4.$$get(Construct, null, null, 'VarStatement'):
					var translateVarValueExpression = function ($$$$statement) 
					{
				//set default parameter values
				var statement = $$$$statement;

						var valueJS = translateExpression($es4.$$get(statement, null, null, 'valueExpression'), _indent, false, construct);
						var typeString = getTranslatedTypeName($es4.$$get(statement, null, null, 'identifier', 'type'));
						if (isCoerceRequired(statement, typeString, valueJS))
						{
							valueJS = '$es4.$$coerce(' + valueJS + ', ' + typeString + ')';
						}
						return ' = ' + valueJS;
					}
;
					js += print('var ' + $es4.$$get(statement, null, null, 'identifierToken', 'data'), _indent, 0);
					if ($es4.$$get(statement, null, null, 'valueExpression'))
					{
						js += translateVarValueExpression(statement);
					}
					for (var i = 0; i < $es4.$$get(statement, null, null, 'innerVarStatements', 'length'); i++)
					{
						var innerVarStatement = $es4.$$get(statement, null, null, 'innerVarStatements', i);
						js += ', ' + $es4.$$get(innerVarStatement, null, null, 'identifierToken', 'data');
						if ($es4.$$get(innerVarStatement, null, null, 'valueExpression'))
						{
							js += translateVarValueExpression(innerVarStatement);
						}
					}
					if (!inline)
					{
						js += ';\n';
					}
					break;
				case $es4.$$get(Construct, null, null, 'SwitchStatement'):
					js += print('switch (' + translateExpression($es4.$$get(statement, null, null, 'valueExpression'), _indent, false, construct) + ')', _indent, 1);
					js += print('{', _indent, 1);
					for (var i = 0; i < $es4.$$get(statement, null, null, 'caseStatements', 'length'); i++)
					{
						js += translateStatement($es4.$$get(statement, null, null, 'caseStatements', i), _indent + 1, false, construct);
					}
					js += print('}', _indent, 1);
					break;
				case $es4.$$get(Construct, null, null, 'CaseStatement'):
					if ($es4.$$get(statement, null, null, 'defaultToken'))
					{
						js += print('default:', _indent, 1);
					}
					else
					{
						js += print('case ' + translateExpression($es4.$$get(statement, null, null, 'valueExpression'), _indent, false, construct) + ':', _indent, 1);
					}
					js += translateStatements($es4.$$get(statement, null, null, 'bodyStatements'), _indent + 1, construct);
					break;
				case $es4.$$get(Construct, null, null, 'LabelStatement'):
					js += print($es4.$$get(statement, null, null, 'identifierToken', 'data') + ':', _indent, 0);
					break;
				default:
					if (inline)
					{
						js += print(translateExpression(statement, _indent, false, construct), _indent, 0);
					}
					else
					{
						js += print(translateExpression(statement, _indent, false, construct) + ';', _indent, 1);
					}
			}
			return js;
		}
;

		function translateExpression($$$$expression, $$$$_indent, $$$$toString, $$$$construct, $$$$operator, $$$$expressionString) 
		{
			//set default parameter values
			var expression = $$$$expression;
			var _indent = $$$$_indent;
			var toString = $$$$toString;
			var construct = $$$$construct;
			var operator = (4 > arguments.length - 1) ? null : $$$$operator;
			var expressionString = (5 > arguments.length - 1) ? null : $$$$expressionString;

			if (!construct)
			{
				throw $es4.$$primitive(new (Error)('construct null in translate expression'));
			}
			if (!_indent)
			{
				_indent = 0;
			}
			var js = '';
			outerSwitch:			switch ($es4.$$get(expression, null, null, 'constructor'))
			{
				case $es4.$$get(Construct, null, null, 'ParenExpression'):
					js += '(' + translateExpression($es4.$$get(expression, null, null, 'expression'), _indent, toString, construct, operator, expressionString) + ')';
					break;
				case $es4.$$get(Construct, null, null, 'PropertyExpression'):
					js += translatePropertyExpressionDynamic(expression, toString, expressionString, operator, construct);
					break;
				case $es4.$$get(Construct, null, null, 'NumberExpression'):
					js += $es4.$$get(expression, null, null, 'numberToken', 'data');
					break;
				case $es4.$$get(Construct, null, null, 'StringExpression'):
					if (toString && $es4.$$get(expression, null, null, 'stringToken', 'data') == "'")
					{
						js += '\\' + $es4.$$get(expression, null, null, 'stringToken', 'data');
					}
					else
					{
						js += $es4.$$get(expression, null, null, 'stringToken', 'data');
					}
					for (var i = 0; i < $es4.$$get(expression, null, null, 'stringChunkTokens', 'length'); i++)
					{
						js += $es4.$$get(expression, null, null, 'stringChunkTokens', i, 'data');
						if (i + 1 < $es4.$$get(expression, null, null, 'stringChunkTokens', 'length'))
						{
							js += '\n';
						}
					}
					if (toString && $es4.$$get(expression, null, null, 'stringToken', 'data') == "'")
					{
						js += '\\' + $es4.$$get(expression, null, null, 'stringToken', 'data');
					}
					else
					{
						js += $es4.$$get(expression, null, null, 'stringToken', 'data');
					}
					break;
				case $es4.$$get(Construct, null, null, 'ReturnExpression'):
					js += 'return';
					if ($es4.$$get(expression, null, null, 'expression'))
					{
						var typeName = getTranslatedTypeName($es4.$$get(expression, null, null, 'expectedType'));
						var valueJS = translateExpression($es4.$$get(expression, null, null, 'expression'), 0, toString, construct);
						if (typeName && isCoerceRequired(expression, typeName, valueJS))
						{
							js += ' $es4.$$coerce(' + valueJS + ', ' + typeName + ')';
						}
						else
						{
							js += ' ' + valueJS;
						}
					}
					break;
				case $es4.$$get(Construct, null, null, 'DeleteExpression'):
					js += translatePropertyExpressionDynamic($es4.$$get(expression, null, null, 'expression'), toString, undefined, undefined, construct, true);
					break;
				case $es4.$$get(Construct, null, null, 'FunctionExpression'):
					upLevel();
					var wasInClosure = _inClosure;
					_inClosure = true;
					if (!$es4.$$get(expression, null, null, 'identifierToken'))
					{
						js += print('function (', 0, 0);
					}
					else
					{
						if (_inIfStatement)
						{
							throw $es4.$$primitive(new (Error)('support for named closures in if/elseif/else statements is not supported at this time.'));
						}
						js += print('function ' + $es4.$$get(expression, null, null, 'identifierToken', 'data') + '(', 0, 0);
					}
					js += translateParameters(expression, construct);
					js += print(') ', 0, 1);
					js += print('{', _indent, 1);
					js += translateDefaultParameterValues(expression, construct);
					js += translateStatements($es4.$$get(expression, null, null, 'bodyStatements'), _indent + 1, construct);
					js += print('}', _indent, 1);
					if (!wasInClosure)
					{
						_inClosure = false;
					}
					downLevel();
					break;
				case $es4.$$get(Construct, null, null, 'ObjectExpression'):
					js += '{';
					for (var i = 0; i < $es4.$$get(expression, null, null, 'objectPropertyConstructs', 'length'); i++)
					{
						var prop;
						if ($es4.$$get(expression, null, null, 'objectPropertyConstructs', i, 'expression', 'constructor') == $es4.$$get(Construct, null, null, 'PropertyExpression'))
						{
							prop = $es4.$$get(expression, null, null, 'objectPropertyConstructs', i, 'expression', 'construct', 'identifierToken', 'data');
						}
						else
						{
							prop = translateExpression($es4.$$get(expression, null, null, 'objectPropertyConstructs', i, 'expression'), 0, toString, construct);
						}
						js += prop + ':' + translateExpression($es4.$$get(expression, null, null, 'objectPropertyConstructs', i, 'valueExpression'), 0, toString, construct);
						if ((i + 1) < $es4.$$get(expression, null, null, 'objectPropertyConstructs', 'length'))
						{
							js += ', ';
						}
					}
					js += '}';
					break;
				case $es4.$$get(Construct, null, null, 'ArrayExpression'):
					js += '[';
					for (var i = 0; i < $es4.$$get(expression, null, null, 'valueExpressions', 'length'); i++)
					{
						if (!$es4.$$get(expression, null, null, 'valueExpressions', i))
						{
							trace('invalid 20');
						}
						js += translateExpression($es4.$$get(expression, null, null, 'valueExpressions', i), 0, toString, construct);
						if ((i + 1) < $es4.$$get(expression, null, null, 'valueExpressions', 'length'))
						{
							js += ', ';
						}
					}
					js += ']';
					break;
				case $es4.$$get(Construct, null, null, 'BooleanExpression'):
					js += $es4.$$get(expression, null, null, 'booleanToken', 'data');
					break;
				case $es4.$$get(Construct, null, null, 'Expression'):
					if ($es4.$$get(expression, null, null, 'token', 'type') == $es4.$$get(Token, null, null, 'TypeofTokenType'))
					{
						if (!$es4.$$get(expression, null, null, 'expression'))
						{
							trace('invalid 21');
						}
						js += '$es4.$$typeof(' + translateExpression($es4.$$get(expression, null, null, 'expression'), 0, toString, construct) + ')';
						break;
					}
					if ($es4.$$get(expression, null, null, 'token', 'type') == $es4.$$get(Token, null, null, 'VoidTokenType'))
					{
						if ($es4.$$get(expression, null, null, 'expression', 'constructor') == $es4.$$get(Construct, null, null, 'EmptyExpression'))
						{
							js += 'void 0';
						}
						else
						{
							if (!$es4.$$get(expression, null, null, 'expression'))
							{
								trace('invalid 01');
							}
							js += 'void ' + translateExpression($es4.$$get(expression, null, null, 'expression'), 0, toString, construct);
						}
						break;
					}
					js += $es4.$$get(expression, null, null, 'token', 'data');
					if ($es4.$$get(expression, null, null, 'expression'))
					{
						if (!$es4.$$get(expression, null, null, 'expression'))
						{
							trace('invalid 22');
						}
						js += translateExpression($es4.$$get(expression, null, null, 'expression'), 0, toString, construct);
					}
					break;
				case $es4.$$get(Construct, null, null, 'XMLExpression'):
					js += 'new XML(\'' + $es4.$$get(expression, null, null, 'string') + '\')';
					break;
				case $es4.$$get(Construct, null, null, 'XMLListExpression'):
					js += 'new XMLList(\'' + $es4.$$get(expression, null, null, 'string') + '\')';
					break;
				case $es4.$$get(Construct, null, null, 'EmptyExpression'):
					break;
				case $es4.$$get(Construct, null, null, 'RegExpression'):
					js += $es4.$$get(expression, null, null, 'string');
					break;
				case $es4.$$get(Construct, null, null, 'PrefixExpression'):
					js += translatePropertyExpressionDynamic($es4.$$get(expression, null, null, 'expression'), toString, '\'prefix\'', ($es4.$$get(expression, null, null, 'decrementToken')) ? '--' : '++', construct);
					break;
				case $es4.$$get(Construct, null, null, 'PostfixExpression'):
					js += translatePropertyExpressionDynamic($es4.$$get(expression, null, null, 'expression'), toString, '\'postfix\'', ($es4.$$get(expression, null, null, 'decrementToken')) ? '--' : '++', construct);
					break;
				case $es4.$$get(Construct, null, null, 'NewExpression'):
					if ($es4.$$get(expression, null, null, 'expression', 'constructor') == $es4.$$get(Construct, null, null, 'ParenExpression'))
					{
						if (!$es4.$$get(expression, null, null, 'expression'))
						{
							trace('invalid 02');
						}
						js += '$es4.$$primitive(new ' + translateExpression($es4.$$get(expression, null, null, 'expression'), 0, toString, construct) + ')';
					}
					else
					{
						js += translatePropertyExpressionDynamic($es4.$$get(expression, null, null, 'expression'), toString, null, null, construct, null, true);
					}
					break;
				case $es4.$$get(Construct, null, null, 'BinaryExpression'):
					if ($es4.$$get(expression, null, null, 'token', 'type') == $es4.$$get(Token, null, null, 'IsTokenType'))
					{
						if (!$es4.$$get(expression, null, null, 'leftExpression'))
						{
							trace('invalid 04');
						}
						if (!$es4.$$get(expression, null, null, 'rightExpression'))
						{
							trace('invalid 05');
						}
						js += '$es4.$$is(' + translateExpression($es4.$$get(expression, null, null, 'leftExpression'), 0, toString, construct) + ', ' + translateExpression($es4.$$get(expression, null, null, 'rightExpression'), 0, toString, construct) + ')';
						break;
					}
					if ($es4.$$get(expression, null, null, 'token', 'type') == $es4.$$get(Token, null, null, 'InstanceofTokenType'))
					{
						if (!$es4.$$get(expression, null, null, 'leftExpression'))
						{
							trace('invalid 06');
						}
						if (!$es4.$$get(expression, null, null, 'rightExpression'))
						{
							trace('invalid 07');
						}
						js += '$es4.$$instanceof(' + translateExpression($es4.$$get(expression, null, null, 'leftExpression'), 0, toString, construct) + ', ' + translateExpression($es4.$$get(expression, null, null, 'rightExpression'), 0, toString, construct) + ')';
						break;
					}
					if ($es4.$$get(expression, null, null, 'token', 'type') == $es4.$$get(Token, null, null, 'AsTokenType'))
					{
						if (!$es4.$$get(expression, null, null, 'leftExpression'))
						{
							trace('invalid 08');
						}
						if (!$es4.$$get(expression, null, null, 'rightExpression'))
						{
							trace('invalid 09');
						}
						js += '$es4.$$as(' + translateExpression($es4.$$get(expression, null, null, 'leftExpression'), 0, toString, construct) + ', ' + translateExpression($es4.$$get(expression, null, null, 'rightExpression'), 0, toString, construct) + ')';
						break;
					}
					innerSwitch:					switch ($es4.$$get(expression, null, null, 'token', 'type'))
					{
						case $es4.$$get(Token, null, null, 'BitwiseLeftShiftAssignmentTokenType'):
						case $es4.$$get(Token, null, null, 'BitwiseUnsignedRightShiftAssignmentTokenType'):
						case $es4.$$get(Token, null, null, 'BitwiseRightShiftAssignmentTokenType'):
						case $es4.$$get(Token, null, null, 'AddWithAssignmentTokenType'):
						case $es4.$$get(Token, null, null, 'DivWithAssignmentTokenType'):
						case $es4.$$get(Token, null, null, 'ModWithAssignmentTokenType'):
						case $es4.$$get(Token, null, null, 'MulWithAssignmentTokenType'):
						case $es4.$$get(Token, null, null, 'SubWithAssignmentTokenType'):
						case $es4.$$get(Token, null, null, 'AssignmentTokenType'):
						case $es4.$$get(Token, null, null, 'AndWithAssignmentTokenType'):
						case $es4.$$get(Token, null, null, 'OrWithAssignmentTokenType'):
						case $es4.$$get(Token, null, null, 'BitwiseAndAssignmentTokenType'):
						case $es4.$$get(Token, null, null, 'BitwiseOrAssignmentTokenType'):
						case $es4.$$get(Token, null, null, 'BitwiseXorAssignmentTokenType'):
							var leftExpression = $es4.$$get(expression, null, null, 'leftExpression');
							while ($es4.$$get(leftExpression, null, null, 'constructor') == $es4.$$get(Construct, null, null, 'ParenExpression'))
							{
								leftExpression = $es4.$$get(leftExpression, null, null, 'expression');
							}
							var innerOperator = $es4.$$get(expression, null, null, 'token', 'data');
							var innerExpressionString = '';
							while ($es4.$$get(leftExpression, null, null, 'constructor') == $es4.$$get(Construct, null, null, 'BinaryExpression'))
							{
								$es4.$$set(expression, null, null, 'leftExpression', $es4.$$get(leftExpression, null, null, 'rightExpression'), '=');
								if (!innerExpressionString)
								{
									if (!expression)
									{
										trace('invalid 10');
									}
									innerExpressionString = translateExpression(expression, _indent, toString, construct);
								}
								else
								{
									if (!$es4.$$get(expression, null, null, 'leftExpression'))
									{
										trace('invalid 11');
									}
									if (_dynamicPropertyAccess)
									{
										innerExpressionString = translateExpression($es4.$$get(expression, null, null, 'leftExpression'), _indent, toString, construct, innerOperator, innerExpressionString);
									}
									else
									{
										innerExpressionString = translateExpression($es4.$$get(expression, null, null, 'leftExpression'), _indent, toString, construct) + ' ' + innerOperator + ' ' + innerExpressionString;
									}
								}
								expression = leftExpression;
								innerOperator = $es4.$$get(expression, null, null, 'token', 'data');
								leftExpression = $es4.$$get(expression, null, null, 'leftExpression');
							}
							var typeString;
							if (!$es4.$$get(leftExpression, null, null, 'nextPropertyExpression') && $es4.$$get(leftExpression, null, null, 'construct') && $es4.$$get(leftExpression, null, null, 'construct', 'constructor') == $es4.$$get(Construct, null, null, 'IdentifierConstruct'))
							{
								var identifier = $es4.$$get(leftExpression, null, null, 'construct', 'identifier');
								typeString = ($es4.$$get(identifier, null, null, 'isVar') && $es4.$$get(identifier, null, null, 'type')) ? getTranslatedTypeName($es4.$$get(identifier, null, null, 'type')) : '';
							}
							if (true)
							{
								if (!innerExpressionString)
								{
									if (!$es4.$$get(expression, null, null, 'rightExpression'))
									{
										trace('invalid 12');
									}
									innerExpressionString = translateExpression($es4.$$get(expression, null, null, 'rightExpression'), 0, toString, construct);
								}
								if (typeString && isCoerceRequired(leftExpression, typeString, innerExpressionString))
								{
									js += translatePropertyExpressionDynamic(leftExpression, toString, '$es4.$$coerce(' + innerExpressionString + ', ' + typeString + ')', innerOperator, construct);
								}
								else
								{
									js += translatePropertyExpressionDynamic(leftExpression, toString, innerExpressionString, innerOperator, construct);
								}
							}
							else
							{
								if (!$es4.$$get(expression, null, null, 'leftExpression'))
								{
									trace('invalid 13');
								}
								js += translateExpression(leftExpression, 0, toString, construct);
								if (!innerExpressionString)
								{
									if (!$es4.$$get(expression, null, null, 'rightExpression'))
									{
										trace('invalid 14');
									}
									innerExpressionString = translateExpression($es4.$$get(expression, null, null, 'rightExpression'), 0, toString, construct);
								}
								if (typeString && isCoerceRequired(leftExpression, typeString, innerExpressionString))
								{
									js += ' ' + innerOperator + ' $es4.$$coerce(' + innerExpressionString + ', ' + typeString + ')';
								}
								else
								{
									js += ' ' + innerOperator + ' ' + innerExpressionString;
								}
							}
							break outerSwitch;
					}
					if (!$es4.$$get(expression, null, null, 'leftExpression'))
					{
						trace('invalid 15');
					}
					if (!$es4.$$get(expression, null, null, 'rightExpression'))
					{
						trace('invalid 16');
					}
					js += translateExpression($es4.$$get(expression, null, null, 'leftExpression'), 0, toString, construct) + ' ' + $es4.$$get(expression, null, null, 'token', 'data') + ' ' + translateExpression($es4.$$get(expression, null, null, 'rightExpression'), 0, toString, construct);
					break;
				case $es4.$$get(Construct, null, null, 'TernaryExpression'):
					if (!$es4.$$get(expression, null, null, 'trueExpression'))
					{
						trace('invalid 34');
					}
					if (!$es4.$$get(expression, null, null, 'conditionExpression'))
					{
						trace('invalid 35');
					}
					if (!$es4.$$get(expression, null, null, 'falseExpression'))
					{
						trace('invalid 36');
					}
					js += translateExpression($es4.$$get(expression, null, null, 'conditionExpression'), 0, toString, construct) + ' ? ' + translateExpression($es4.$$get(expression, null, null, 'trueExpression'), 0, toString, construct) + ' : ' + translateExpression($es4.$$get(expression, null, null, 'falseExpression'), 0, toString, construct);
					break;
				default:
					throw $es4.$$primitive(new (Error)('Unexpected expression found: ' + $es4.$$get(expression, null, null, 'constructor')));
			}
			return js;
		}
;

		function translatePropertyExpressionDynamic($$$$expression, $$$$toString, $$$$setString, $$$$operator, $$$$construct, $$$$doDelete, $$$$doNew) 
		{
			//set default parameter values
			var expression = $$$$expression;
			var toString = $$$$toString;
			var setString = $$$$setString;
			var operator = $$$$operator;
			var construct = $$$$construct;
			var doDelete = (5 > arguments.length - 1) ? null : $$$$doDelete;
			var doNew = (6 > arguments.length - 1) ? null : $$$$doNew;

			var js = '';
			if (!$es4.$$get(expression, null, null, 'construct'))
			{
				throw $es4.$$primitive(new (Error)('invalid expression passed to translatePropertyExpression: ' + $es4.$$get(expression, null, null, 'constructor')));
			}
			var identifier;
			var namespaceIdentifier;
			switch ($es4.$$get(expression, null, null, 'construct', 'constructor'))
			{
				case $es4.$$get(Construct, null, null, 'SuperConstruct'):
				case $es4.$$get(Construct, null, null, 'ThisConstruct'):
				case $es4.$$get(Construct, null, null, 'IdentifierConstruct'):
					identifier = $es4.$$get(expression, null, null, 'construct', 'identifier');
					break;
				case $es4.$$get(Construct, null, null, 'ParenConstruct'):
				case $es4.$$get(Construct, null, null, 'ArrayConstruct'):
				case $es4.$$get(Construct, null, null, 'ObjectConstruct'):
					break;
				case $es4.$$get(Construct, null, null, 'NamespaceQualifierConstruct'):
					namespaceIdentifier = $es4.$$get(expression, null, null, 'construct', 'namespaceIdentifier');
					identifier = $es4.$$get(expression, null, null, 'construct', 'identifier');
					break;
				default:
					throw $es4.$$primitive(new (Error)('unknown inner property expression: ' + $es4.$$get(expression, null, null, 'construct', 'constructor')));
			}
			var pname;
			var name;
			if (identifier && !namespaceIdentifier && ($es4.$$get(identifier, null, null, 'isProperty') || $es4.$$get(identifier, null, null, 'isMethod')) && !$es4.$$get(identifier, null, null, 'isImport') && $es4.$$get(identifier, null, null, 'namespaceObj', 'isCustom'))
			{
				namespaceIdentifier = $es4.$$get(identifier, null, null, 'namespaceObj', 'identifier');
			}
			if (identifier && namespaceIdentifier)
			{
				var pname = ($es4.$$get(namespaceIdentifier, null, null, 'isStatic')) ? $es4.$$get(namespaceIdentifier, null, null, 'scope', 'name') : '$$this';
				var namespaceObj = $es4.$$get(namespaceIdentifier, null, null, 'namespaceObj');
				var namespaceString = $es4.$$get(namespaceObj, null, null, 'normalizedImportID');
				if ($es4.$$get(namespaceIdentifier, null, null, 'isStatic') && !namespaceString)
				{
					namespaceString = $es4.$$get(namespaceIdentifier, null, null, 'scope', 'name') + '.' + $es4.$$get(namespaceIdentifier, null, null, 'name');
				}
				else if (!namespaceString)
				{
					namespaceString = ($es4.$$get(namespaceIdentifier, null, null, 'namespaceObj') && $es4.$$get(namespaceIdentifier, null, null, 'namespaceObj', 'isPrivate') ? ('$$this.$$' + $es4.$$call($es4.$$call((($es4.$$get(construct, null, null, 'packageName') && _extendsNameConflict ? $es4.$$get(construct, null, null, 'packageName') : '') + $es4.$$get(construct, null, null, 'identifierToken', 'data')), null, null, 'split', ['.']), null, null, 'join', ['']) + '.$$ns.') : '$$this.') + $es4.$$get(namespaceIdentifier, null, null, 'name');
				}
				pname += '.$$namespace(' + namespaceString + ')';
				name = $es4.$$get(identifier, null, null, 'name');
			}
			else if (identifier)
			{
				name = $es4.$$get(identifier, null, null, 'name');
				if ($es4.$$get(identifier, null, null, 'isStatic') && !$es4.$$get(identifier, null, null, 'isImport') && !$es4.$$get(identifier, null, null, 'isNative'))
				{
					pname = $es4.$$get(identifier, null, null, 'scope', 'name');
				}
				else if ($es4.$$get(identifier, null, null, 'isPrivate') && !$es4.$$get(identifier, null, null, 'isImport'))
				{
					pname = '$$this.$$' + $es4.$$call($es4.$$call((($es4.$$get(construct, null, null, 'packageName') && _extendsNameConflict ? $es4.$$get(construct, null, null, 'packageName') : '') + $es4.$$get(construct, null, null, 'identifierToken', 'data')), null, null, 'split', ['.']), null, null, 'join', ['']);
				}
				else if (($es4.$$get(identifier, null, null, 'isProperty') || $es4.$$get(identifier, null, null, 'isMethod')) && !$es4.$$get(identifier, null, null, 'isImport'))
				{
					pname = '$$this';
				}
				else if ($es4.$$get(identifier, null, null, 'isPackage'))
				{
					name = '$es4.$$[\'' + $es4.$$get(identifier, null, null, 'name');
					var packageName = $es4.$$get(identifier, null, null, 'name');
					var tempInnerExpression = expression;
					var lastExpression = tempInnerExpression;
					while (tempInnerExpression = $es4.$$get(tempInnerExpression, null, null, 'nextPropertyExpression'))
					{
						if ($es4.$$get(_rootConstructs, null, null, packageName + '.' + $es4.$$get(tempInnerExpression, null, null, 'construct', 'identifierToken', 'data')))
						{
							expression = lastExpression;
							break;
						}
						packageName += '.' + $es4.$$get(tempInnerExpression, null, null, 'construct', 'identifierToken', 'data');
						name += '.' + $es4.$$get(tempInnerExpression, null, null, 'construct', 'identifierToken', 'data');
						lastExpression = tempInnerExpression;
					}
					name += '\']';
				}
				var superString = ($es4.$$get(construct, null, null, 'extendsNameConstruct')) ? '$es4.$$super2($$this, ' + getTranslatedTypeName($es4.$$get(construct, null, null, 'extendsNameConstruct', 'type')) + ', \'$$' + $es4.$$get(construct, null, null, 'extendsNameConstruct', 'type', 'name') + '\', ***REPLACE1***, \'***REPLACE2***\', ***REPLACE3***)' : '____________________';
				if (name == 'super')
				{
					if (_inNamespacedFunction && $es4.$$get(expression, null, null, 'nextPropertyExpression'))
					{
						name = '$$this.$$namespace(' + _inNamespacedFunction + ', $$this, $es4.$$super($$thisp))';
					}
					else
					{
						name = ($es4.$$get(expression, null, null, 'nextPropertyExpression')) ? superString : 'this';
					}
				}
				if (name == 'this' && !_inClosure)
				{
					if ($es4.$$get(expression, null, null, 'nextPropertyExpression') && $es4.$$get(expression, null, null, 'nextPropertyExpression', 'construct', 'constructor') == $es4.$$get(Construct, null, null, 'DotConstruct') && $es4.$$get(expression, null, null, 'nextPropertyExpression', 'construct', 'identifier', 'isPrivate'))
					{
						name = '$$this.$$' + $es4.$$call($es4.$$call((($es4.$$get(construct, null, null, 'packageName') && _extendsNameConflict ? $es4.$$get(construct, null, null, 'packageName') : '') + $es4.$$get(construct, null, null, 'identifierToken', 'data')), null, null, 'split', ['.']), null, null, 'join', ['']);
					}
					else
					{
						name = '$$this';
					}
				}
			}
			else
			{
				if (!$es4.$$get(expression, null, null, 'construct', 'expression'))
				{
					trace('invalid 37');
				}
				name = translateExpression($es4.$$get(expression, null, null, 'construct', 'expression'), 0, toString, construct);
			}
			js += (!pname) ? name : (pname + '.' + name);
			var state = {doAssignment:setString != null, doDelete:doDelete, doNew:doNew, doPostfix:setString == '\'postfix\'', doPrefix:setString == '\'prefix\''};
			var doSuper = name == superString;
			var doSuperConstructor = doSuper && ($es4.$$get(expression, null, null, 'nextPropertyExpression') && $es4.$$get(expression, null, null, 'nextPropertyExpression', 'construct', 'constructor') == $es4.$$get(Construct, null, null, 'FunctionCallConstruct'));
			var superExpression;
			while (expression = $es4.$$get(expression, null, null, 'nextPropertyExpression'))
			{
				if ($es4.$$get(expression, null, null, 'construct', 'constructor') == $es4.$$get(Construct, null, null, 'DotConstruct') || $es4.$$get(expression, null, null, 'construct', 'constructor') == $es4.$$get(Construct, null, null, 'IdentifierConstruct'))
				{
					if (doSuper && !superExpression)
					{
						superExpression = '\'' + $es4.$$get(expression, null, null, 'construct', 'identifierToken', 'data') + '\'';
					}
					else
					{
						if ($es4.$$get(expression, null, null, 'construct', 'constructor') == $es4.$$get(Construct, null, null, 'DotConstruct'))
						{
							js += '.';
						}
						js += $es4.$$get(expression, null, null, 'construct', 'identifierToken', 'data');
					}
				}
				else if ($es4.$$get(expression, null, null, 'construct', 'constructor') == $es4.$$get(Construct, null, null, 'ArrayAccessorConstruct'))
				{
					if (!$es4.$$get(expression, null, null, 'construct', 'expression'))
					{
						trace('invalid 38');
					}
					if (doSuper && !superExpression)
					{
						superExpression = translateExpression($es4.$$get(expression, null, null, 'construct', 'expression'), 0, toString, construct);
					}
					else
					{
						js += '[' + translateExpression($es4.$$get(expression, null, null, 'construct', 'expression'), 0, toString, construct) + ']';
					}
				}
				else if ($es4.$$get(expression, null, null, 'construct', 'constructor') == $es4.$$get(Construct, null, null, 'NamespaceQualifierConstruct'))
				{
					namespaceIdentifier = $es4.$$get(expression, null, null, 'construct', 'namespaceIdentifier');
					var namespaceObj = $es4.$$get(namespaceIdentifier, null, null, 'namespaceObj');
					var namespaceString = $es4.$$get(namespaceObj, null, null, 'normalizedImportID');
					if ($es4.$$get(namespaceIdentifier, null, null, 'isStatic') && !namespaceString)
					{
						namespaceString = $es4.$$get(namespaceIdentifier, null, null, 'scope', 'name') + '.' + $es4.$$get(namespaceIdentifier, null, null, 'name');
					}
					else if (!namespaceString)
					{
						namespaceString = ($es4.$$get(identifier, null, null, 'isPrivate')) ? ('$$this.$$' + $es4.$$call($es4.$$call((($es4.$$get(construct, null, null, 'packageName') && _extendsNameConflict ? $es4.$$get(construct, null, null, 'packageName') : '') + $es4.$$get(construct, null, null, 'identifierToken', 'data')), null, null, 'split', ['.']), null, null, 'join', ['']) + '.$$ns.') + $es4.$$get(namespaceIdentifier, null, null, 'name') : '$$this.' + $es4.$$get(namespaceIdentifier, null, null, 'name');
					}
					js += '.$$namespace(' + namespaceString + ').' + $es4.$$get(expression, null, null, 'construct', 'namespaceIdentifierToken', 'data');
				}
				else if ($es4.$$get(expression, null, null, 'construct', 'constructor') == $es4.$$get(Construct, null, null, 'ParenConstruct'))
				{
					if (!$es4.$$get(expression, null, null, 'construct', 'expression'))
					{
						trace('invalid 39');
					}
					js += '(' + translateExpression($es4.$$get(expression, null, null, 'construct', 'expression'), 0, toString, construct) + ')';
				}
				else if ($es4.$$get(expression, null, null, 'construct', 'constructor') == $es4.$$get(Construct, null, null, 'AtIdentifierConstruct'))
				{
					throw $es4.$$primitive(new (Error)('E4X is not supported'));
				}
				if ($es4.$$get(expression, null, null, 'construct', 'constructor') == $es4.$$get(Construct, null, null, 'FunctionCallConstruct') || ($es4.$$get(expression, null, null, 'nextPropertyExpression') && $es4.$$get(expression, null, null, 'nextPropertyExpression', 'construct', 'constructor') == $es4.$$get(Construct, null, null, 'FunctionCallConstruct')))
				{
					var functionCallExpression = ($es4.$$get(expression, null, null, 'construct', 'constructor') == $es4.$$get(Construct, null, null, 'FunctionCallConstruct')) ? expression : $es4.$$get(expression, null, null, 'nextPropertyExpression');
					if (doSuperConstructor)
					{
						js = getTranslatedTypeName($es4.$$get(construct, null, null, 'extendsNameConstruct', 'type')) + '.$$constructor.call($$this';
						if ($es4.$$get(functionCallExpression, null, null, 'construct', 'argumentExpressions', 'length'))
						{
							js += ', ';
						}
						doSuperConstructor = false;
					}
					else
					{
						js += '(';
					}
					for (var i = 0; i < $es4.$$get(functionCallExpression, null, null, 'construct', 'argumentExpressions', 'length'); i++)
					{
						if (!$es4.$$get(functionCallExpression, null, null, 'construct', 'argumentExpressions', i))
						{
							trace('invalid 40');
						}
						js += translateExpression($es4.$$get(functionCallExpression, null, null, 'construct', 'argumentExpressions', i), 0, toString, construct);
						if ((i + 1) < $es4.$$get(functionCallExpression, null, null, 'construct', 'argumentExpressions', 'length'))
						{
							js += ', ';
						}
					}
					js += ')';
					if ($es4.$$get(expression, null, null, 'nextPropertyExpression'))
					{
						expression = functionCallExpression;
					}
					continue;
				}
			}
			if (doSuper && superExpression)
			{
				js = $es4.$$call($es4.$$call(js, null, null, 'split', ['***REPLACE1***']), null, null, 'join', [superExpression]);
				if (setString)
				{
					js = $es4.$$call($es4.$$call(js, null, null, 'split', ['***REPLACE2***']), null, null, 'join', ['set']);
					js = $es4.$$call($es4.$$call(js, null, null, 'split', ['***REPLACE3***']), null, null, 'join', [setString]);
					$es4.$$set(state, null, null, 'doAssignment', false, '=');
				}
				else
				{
					js = $es4.$$call($es4.$$call(js, null, null, 'split', ['***REPLACE2***']), null, null, 'join', ['func']);
					js = $es4.$$call($es4.$$call(js, null, null, 'split', ['***REPLACE3***']), null, null, 'join', ['undefined']);
				}
			}
			if (!$es4.$$get(state, null, null, 'doPostfix') && !$es4.$$get(state, null, null, 'doPrefix'))
			{
				if ($es4.$$get(state, null, null, 'doAssignment') && operator == '||=' || operator == '&&=')
				{
					js += ' = ' + js + ((operator == '&&=') ? ' && (' : ' || (') + setString + ')';
				}
				else if ($es4.$$get(state, null, null, 'doAssignment'))
				{
					js += ' ' + operator + ' ' + setString;
				}
			}
			else if ($es4.$$get(state, null, null, 'doPrefix'))
			{
				js = operator + js;
			}
			else if ($es4.$$get(state, null, null, 'doPostfix'))
			{
				js += operator;
			}
			if ($es4.$$get(state, null, null, 'doDelete'))
			{
				js = 'delete ' + js;
			}
			if ($es4.$$get(state, null, null, 'doNew'))
			{
				js = '$es4.$$primitive(new ' + js + ')';
			}
			return js;
		}
;

		function isCoerceRequired($$$$statementOrExpression, $$$$typeName, $$$$valueJS) 
		{
			//set default parameter values
			var statementOrExpression = $$$$statementOrExpression;
			var typeName = $$$$typeName;
			var valueJS = $$$$valueJS;

			if (!$es4.$$get(statementOrExpression, null, null, 'coerce'))
			{
				return false;
			}
			switch (typeName)
			{
				case 'uint':
					if (Number(valueJS) == (valueJS >>> 0))
					{
						return false;
					}
					break;
				case 'int':
					if (Number(valueJS) == (valueJS >> 0))
					{
						return false;
					}
					break;
			}
			return true;
		}
;

		function print($$$$string, $$$$tabs, $$$$newlines, $$$$preNewLines) 
		{
			//set default parameter values
			var string = $$$$string;
			var tabs = $$$$tabs;
			var newlines = $$$$newlines;
			var preNewLines = (3 > arguments.length - 1) ? null : $$$$preNewLines;

			if (tabs)
			{
				for (var i = 0; i < tabs; i++)
				{
					string = '\t' + string;
				}
			}
			if (newlines)
			{
				for (var i = 0; i < newlines; i++)
				{
					string += '\n';
				}
			}
			if (preNewLines)
			{
				for (var i = 0; i < preNewLines; i++)
				{
					string = '\n' + string;
				}
			}
			return string;
		}
;
	}));

	function TranslatorPrototype()
	{
		//initialize class if not initialized
		if (TranslatorPrototype.$$cinit !== undefined) TranslatorPrototype.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof TranslatorPrototype) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], TranslatorPrototype) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(TranslatorPrototype, null, 'sweetrush.core::TranslatorPrototype');
})();
//sweetrush.core.TranslatorPrototype


//sweetrush.utils.Base64Util
$es4.$$package('sweetrush.utils').Base64Util = (function ()
{
	//imports
	var ByteArray;

	//class initializer
	Base64Util.$$cinit = (function ()
	{
		Base64Util.$$cinit = undefined;

		//initialize imports
		ByteArray = $es4.$$['flash.utils'].ByteArray;
	});

	//method
	$es4.$$public_function('encodeString', Base64Util, (function ($$$$value)
	{
		if (Base64Util.$$cinit !== undefined) Base64Util.$$cinit();

		//set default parameter values
		var value = $es4.$$coerce($$$$value, String);

		if (false)
		{
		}
		if (true)
		{
			if ($es4.$$get(global, null, null, 'btoa') !== undefined)
			{
				return $es4.$$coerce($es4.$$call(global, null, null, 'btoa', [value]), String);
			}
			return $es4.$$coerce($es4.$$call($es4.$$call(global, null, null, 'Buffer', 'from', [value]), null, null, 'toString', ['base64']), String);
		}
	}));

	//method
	$es4.$$public_function('decodeString', Base64Util, (function ($$$$str)
	{
		if (Base64Util.$$cinit !== undefined) Base64Util.$$cinit();

		//set default parameter values
		var str = $es4.$$coerce($$$$str, String);

		if (false)
		{
		}
		if (true)
		{
			if ($es4.$$get(global, null, null, 'atob') !== undefined)
			{
				return $es4.$$coerce($es4.$$call(global, null, null, 'atob', [str]), String);
			}
			return $es4.$$coerce($es4.$$call($es4.$$call(global, null, null, 'Buffer', 'from', [str, 'base64']), null, null, 'toString', $es4.$$EMPTY_ARRAY), String);
		}
	}));

	function Base64Util()
	{
		//initialize class if not initialized
		if (Base64Util.$$cinit !== undefined) Base64Util.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof Base64Util) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Base64Util) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(Base64Util, null, 'sweetrush.utils::Base64Util');
})();
//sweetrush.utils.Base64Util


//sweetrush.obj.Construct
$es4.$$package('sweetrush.obj').Construct = (function ()
{
	//properties
	Construct.Expression = 'Expression';
	Construct.EmptyExpression = 'EmptyExpression';
	Construct.BinaryExpression = 'BinaryExpression';
	Construct.ObjectExpression = 'ObjectExpression';
	Construct.ArrayExpression = 'ArrayExpression';
	Construct.NewExpression = 'NewExpression';
	Construct.PropertyExpression = 'PropertyExpression';
	Construct.IdentifierConstruct = 'IdentifierConstruct';
	Construct.NamespaceQualifierConstruct = 'NamespaceQualifierConstruct';
	Construct.AtIdentifierConstruct = 'AtIdentifierConstruct';
	Construct.DotConstruct = 'DotConstruct';
	Construct.SuperConstruct = 'SuperConstruct';
	Construct.ThisConstruct = 'ThisConstruct';
	Construct.E4XSearchConstruct = 'E4XSearchConstruct';
	Construct.ArrayAccessorConstruct = 'ArrayAccessorConstruct';
	Construct.VectorConstruct = 'VectorConstruct';
	Construct.TypeConstruct = 'TypeConstruct';
	Construct.ParenConstruct = 'ParenConstruct';
	Construct.ObjectConstruct = 'ObjectConstruct';
	Construct.ArrayConstruct = 'ArrayConstruct';
	Construct.TernaryExpression = 'TernaryExpression';
	Construct.RegExpression = 'RegExpression';
	Construct.ParenExpression = 'ParenExpression';
	Construct.BooleanExpression = 'BooleanExpression';
	Construct.NumberExpression = 'NumberExpression';
	Construct.PrefixExpression = 'PrefixExpression';
	Construct.PostfixExpression = 'PostfixExpression';
	Construct.StringExpression = 'StringExpression';
	Construct.FunctionExpression = 'FunctionExpression';
	Construct.FunctionCallConstruct = 'FunctionCallConstruct';
	Construct.RootConstruct = 'RootConstruct';
	Construct.PackageConstruct = 'PackageConstruct';
	Construct.ClassConstruct = 'ClassConstruct';
	Construct.InterfaceConstruct = 'InterfaceConstruct';
	Construct.NameConstruct = 'NameConstruct';
	Construct.ImportConstruct = 'ImportConstruct';
	Construct.UseConstruct = 'UseConstruct';
	Construct.UseStatement = 'UseStatement';
	Construct.ForEachStatement = 'ForEachStatement';
	Construct.ReturnExpression = 'ReturnExpression';
	Construct.DeleteExpression = 'DeleteExpression';
	Construct.XMLExpression = 'XMLExpression';
	Construct.XMLListExpression = 'XMLListExpression';
	Construct.ForStatement = 'ForStatement';
	Construct.ForInStatement = 'ForInStatement';
	Construct.LabelStatement = 'LabelStatement';
	Construct.WhileStatement = 'WhileStatement';
	Construct.DoWhileStatement = 'DoWhileStatement';
	Construct.IfStatement = 'IfStatement';
	Construct.ElseIfStatement = 'ElseIfStatement';
	Construct.ElseStatement = 'ElseStatement';
	Construct.EmptyStatement = 'EmptyStatement';
	Construct.TryStatement = 'TryStatement';
	Construct.CatchStatement = 'CatchStatement';
	Construct.FinallyStatement = 'FinallyStatement';
	Construct.BreakStatement = 'BreakStatement';
	Construct.ContinueStatement = 'ContinueStatement';
	Construct.ThrowStatement = 'ThrowStatement';
	Construct.SwitchStatement = 'SwitchStatement';
	Construct.CaseStatement = 'CaseStatement';
	Construct.VarStatement = 'VarStatement';
	Construct.MethodConstruct = 'MethodConstruct';
	Construct.ObjectPropertyConstruct = 'ObjectPropertyConstruct';
	Construct.ParameterConstruct = 'ParameterConstruct';
	Construct.PropertyConstruct = 'PropertyConstruct';
	Construct.MetaDataConstruct = 'MetaDataConstruct';

	//class initializer
	Construct.$$cinit = (function ()
	{
		Construct.$$cinit = undefined;

	});

	//method
	$es4.$$public_function('getNewExpression', Construct, (function ($$$$token, $$$$expression)
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		//set default parameter values
		var token = $$$$token;
		var expression = (1 > arguments.length - 1) ? null : $$$$expression;

		return {constructor:$es4.$$get(Construct, null, null, 'Expression'), token:token, expression:expression};
	}));

	//method
	$es4.$$public_function('getNewEmptyExpression', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'EmptyExpression')};
	}));

	//method
	$es4.$$public_function('getNewBinaryExpression', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'BinaryExpression'), token:null, leftExpression:null, rightExpression:null};
	}));

	//method
	$es4.$$public_function('getNewObjectExpression', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'ObjectExpression'), objectPropertyConstructs:[]};
	}));

	//method
	$es4.$$public_function('getNewArrayExpression', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'ArrayExpression'), valueExpressions:[]};
	}));

	//method
	$es4.$$public_function('getNewNewExpression', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'NewExpression'), expression:null};
	}));

	//method
	$es4.$$public_function('getNewPropertyExpression', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'PropertyExpression'), construct:null, nextPropertyExpression:null, root:false};
	}));

	//method
	$es4.$$public_function('getNewIdentifierConstruct', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'IdentifierConstruct'), identifierToken:null, identifer:null};
	}));

	//method
	$es4.$$public_function('getNewNamespaceQualifierConstruct', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'NamespaceQualifierConstruct'), namespaceQualifierToken:null, identifierToken:null, namespaceIdentifierToken:null, namespaceIdentifier:null, identifer:null};
	}));

	//method
	$es4.$$public_function('getNewAtIdentifierConstruct', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'AtIdentifierConstruct')};
	}));

	//method
	$es4.$$public_function('getNewDotConstruct', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'DotConstruct'), identifierToken:null};
	}));

	//method
	$es4.$$public_function('getNewSuperConstruct', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'SuperConstruct'), superToken:null, identifer:null};
	}));

	//method
	$es4.$$public_function('getNewThisConstruct', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'ThisConstruct'), thisToken:null, identifer:null};
	}));

	//method
	$es4.$$public_function('getNewE4XSearchConstruct', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'E4XSearchConstruct'), expression:null};
	}));

	//method
	$es4.$$public_function('getNewArrayAccessorConstruct', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'ArrayAccessorConstruct'), expression:null};
	}));

	//method
	$es4.$$public_function('getNewVectorConstruct', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'VectorConstruct'), nameConstruct:null};
	}));

	//method
	$es4.$$public_function('getNewTypeConstruct', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'TypeConstruct'), mulToken:null, voidToken:null, nameConstruct:null, vectorNameConstruct:null, identifer:null};
	}));

	//method
	$es4.$$public_function('getNewParenConstruct', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'ParenConstruct'), expression:null};
	}));

	//method
	$es4.$$public_function('getNewObjectConstruct', Construct, (function ($$$$expression)
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		//set default parameter values
		var expression = $$$$expression;

		return {constructor:$es4.$$get(Construct, null, null, 'ObjectConstruct'), expression:expression};
	}));

	//method
	$es4.$$public_function('getNewArrayConstruct', Construct, (function ($$$$expression)
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		//set default parameter values
		var expression = $$$$expression;

		return {constructor:$es4.$$get(Construct, null, null, 'ArrayConstruct'), expression:expression};
	}));

	//method
	$es4.$$public_function('getNewTernaryExpression', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'TernaryExpression'), conditionExpression:null, trueExpression:null, falseExpression:null};
	}));

	//method
	$es4.$$public_function('getNewRegExpression', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'RegExpression'), string:null};
	}));

	//method
	$es4.$$public_function('getNewParenExpression', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'ParenExpression'), expression:null};
	}));

	//method
	$es4.$$public_function('getNewBooleanExpression', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'BooleanExpression'), booleanToken:null};
	}));

	//method
	$es4.$$public_function('getNewNumberExpression', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'NumberExpression'), numberToken:null};
	}));

	//method
	$es4.$$public_function('getNewPrefixExpression', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'PrefixExpression'), incrementToken:null, decrementToken:null, expression:null};
	}));

	//method
	$es4.$$public_function('getNewPostfixExpression', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'PostfixExpression'), incrementToken:null, decrementToken:null, expression:null};
	}));

	//method
	$es4.$$public_function('getNewStringExpression', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'StringExpression'), stringToken:null, stringChunkTokens:[], stringEndToken:null};
	}));

	//method
	$es4.$$public_function('getNewFunctionExpression', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'FunctionExpression'), identifierToken:null, parameterConstructs:[], typeConstruct:null, bodyStatements:[], namedFunctionExpressions:[], identifer:null, type:null};
	}));

	//method
	$es4.$$public_function('getNewFunctionCallConstruct', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'FunctionCallConstruct'), argumentExpressions:[]};
	}));

	//method
	$es4.$$public_function('getNewRootConstruct', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'RootConstruct'), classConstructs:[], interfaceConstructs:[], methodConstructs:[], propertyConstructs:[], importConstructs:[], packageConstruct:null, namespacePropertyConstructs:[], instancePropertyConstructs:[], staticPropertyConstructs:[], instanceMethodConstructs:[], staticMethodConstructs:[], instanceAccessorConstructs:[], staticAccessorConstructs:[]};
	}));

	//method
	$es4.$$public_function('getNewPackageConstruct', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'PackageConstruct'), nameConstruct:null, classConstruct:null, importConstructs:[], interfaceConstruct:null, methodConstruct:null, propertyConstruct:null, rootConstruct:null, useConstructs:[]};
	}));

	//method
	$es4.$$public_function('getNewClassConstruct', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'ClassConstruct'), identifierToken:null, extendsNameConstruct:null, importConstructs:[], initializerStatements:[], implementsNameConstructs:[], metaDataConstructs:[], constructorMethodConstruct:null, propertyConstructs:[], methodConstructs:[], isInternal:false, packageConstruct:null, rootConstruct:null, dynamicToken:null, useConstructs:[], UNIMPLEMENTEDToken:null, namespacePropertyConstructs:[], instancePropertyConstructs:[], staticPropertyConstructs:[], instanceMethodConstructs:[], staticMethodConstructs:[], instanceAccessorConstructs:[], staticAccessorConstructs:[], packageName:null, identifer:null, type:null};
	}));

	//method
	$es4.$$public_function('getNewInterfaceConstruct', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'InterfaceConstruct'), identifierToken:null, extendsNameConstructs:[], methodConstructs:[], propertyConstructs:[], isInternal:false, packageConstruct:null, rootConstruct:null, packageName:null, identifer:null, type:null};
	}));

	//method
	$es4.$$public_function('getNewNameConstruct', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'NameConstruct'), identifierTokens:[]};
	}));

	//method
	$es4.$$public_function('nameConstructToString', Construct, (function ($$$$nameConstruct)
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		//set default parameter values
		var nameConstruct = $$$$nameConstruct;

		if ($es4.$$get(nameConstruct, null, null, 'identifierTokens', 'length') == 1)
		{
			return $es4.$$get(nameConstruct, null, null, 'identifierTokens', 0, 'data');
		}
		var data = [];
		for (var i = 0; i < $es4.$$get(nameConstruct, null, null, 'identifierTokens', 'length'); i++)
		{
			$es4.$$call(data, null, null, 'push', [$es4.$$get(nameConstruct, null, null, 'identifierTokens', i, 'data')]);
		}
		return $es4.$$call(data, null, null, 'join', ['.']);
	}));

	//method
	$es4.$$public_function('getNewImportConstruct', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'ImportConstruct'), nameConstruct:null, mulToken:null};
	}));

	//method
	$es4.$$public_function('getNewUseConstruct', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'UseConstruct'), useToken:null, namespaceIdentifierToken:null};
	}));

	//method
	$es4.$$public_function('getNewUseStatement', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'UseStatement'), useToken:null, namespaceIdentifierToken:null};
	}));

	//method
	$es4.$$public_function('getNewForEachStatement', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'ForEachStatement'), variableStatement:null, arrayExpression:null, bodyStatements:[], index:null};
	}));

	//method
	$es4.$$public_function('getNewReturnExpression', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'ReturnExpression'), expression:null, type:null, expectedType:null};
	}));

	//method
	$es4.$$public_function('getNewDeleteExpression', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'DeleteExpression'), expression:null};
	}));

	//method
	$es4.$$public_function('getNewXMLExpression', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'XMLExpression'), string:null};
	}));

	//method
	$es4.$$public_function('getNewXMLListExpression', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'XMLListExpression'), string:null};
	}));

	//method
	$es4.$$public_function('getNewForStatement', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'ForStatement'), variableStatement:null, conditionExpression:null, afterthoughtExpression:null, bodyStatements:[]};
	}));

	//method
	$es4.$$public_function('getNewForInStatement', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'ForInStatement'), variableStatement:null, objectExpression:null, bodyStatements:[], index:null};
	}));

	//method
	$es4.$$public_function('getNewLabelStatement', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'LabelStatement'), identifierToken:null, identifer:null};
	}));

	//method
	$es4.$$public_function('getNewWhileStatement', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'WhileStatement'), conditionExpression:null, bodyStatements:[]};
	}));

	//method
	$es4.$$public_function('getNewDoWhileStatement', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'DoWhileStatement'), conditionExpression:null, bodyStatements:[]};
	}));

	//method
	$es4.$$public_function('getNewIfStatement', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'IfStatement'), conditionExpression:null, bodyStatements:[], elseIfStatements:[], elseStatement:null};
	}));

	//method
	$es4.$$public_function('getNewElseIfStatement', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'ElseIfStatement'), conditionExpression:null, bodyStatements:[]};
	}));

	//method
	$es4.$$public_function('getNewElseStatement', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'ElseStatement'), bodyStatements:[]};
	}));

	//method
	$es4.$$public_function('getNewEmptyStatement', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'EmptyStatement'), bodyStatements:[]};
	}));

	//method
	$es4.$$public_function('getNewTryStatement', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'TryStatement'), bodyStatements:[], catchStatements:[], finallyStatement:null};
	}));

	//method
	$es4.$$public_function('getNewCatchStatement', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'CatchStatement'), identifierToken:null, typeConstruct:null, bodyStatements:[], index:null, identifer:null};
	}));

	//method
	$es4.$$public_function('getNewFinallyStatement', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'FinallyStatement'), bodyStatements:[]};
	}));

	//method
	$es4.$$public_function('getNewBreakStatement', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'BreakStatement'), token:null, identifierToken:null, identifer:null};
	}));

	//method
	$es4.$$public_function('getNewContinueStatement', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'ContinueStatement'), token:null, identifierToken:null, identifer:null};
	}));

	//method
	$es4.$$public_function('getNewThrowStatement', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'ThrowStatement'), token:null, expression:null};
	}));

	//method
	$es4.$$public_function('getNewSwitchStatement', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'SwitchStatement'), valueExpression:null, caseStatements:[]};
	}));

	//method
	$es4.$$public_function('getNewCaseStatement', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'CaseStatement'), valueExpression:null, bodyStatements:[], defaultToken:null};
	}));

	//method
	$es4.$$public_function('getNewVarStatement', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'VarStatement'), identifierToken:null, innerVarStatements:[], typeConstruct:null, valueExpression:null, identifer:null};
	}));

	//method
	$es4.$$public_function('getNewMethodConstruct', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'MethodConstruct'), identifierToken:null, parameterConstructs:[], typeConstruct:null, bodyStatements:[], staticToken:null, overrideToken:null, namespaceToken:null, setToken:null, getToken:null, callsSuper:null, isNative:null, isJavaScript:null, javaScriptString:'', namedFunctionExpressions:[], isInternal:null, packageConstruct:null, rootConstruct:null, UNIMPLEMENTEDToken:null, identifer:null};
	}));

	//method
	$es4.$$public_function('getNewObjectPropertyConstruct', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'ObjectPropertyConstruct'), expression:null, valueExpression:null};
	}));

	//method
	$es4.$$public_function('getNewParameterConstruct', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'ParameterConstruct'), identifierToken:null, typeConstruct:null, valueExpression:null, restToken:null, identifer:null};
	}));

	//method
	$es4.$$public_function('getNewPropertyConstruct', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'PropertyConstruct'), identifierToken:null, typeConstruct:null, namespaceToken:null, namespaceValueToken:null, namespaceKeywordToken:null, staticToken:null, constToken:null, valueExpression:null, isNative:null, isInternal:false, packageConstruct:null, rootConstruct:null, identifer:null};
	}));

	//method
	$es4.$$public_function('getNewMetaDataConstruct', Construct, (function ()
	{
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		return {constructor:$es4.$$get(Construct, null, null, 'MetaDataConstruct'), tokens:[]};
	}));

	function Construct()
	{
		//initialize class if not initialized
		if (Construct.$$cinit !== undefined) Construct.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof Construct) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Construct) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(Construct, null, 'sweetrush.obj::Construct');
})();
//sweetrush.obj.Construct


//sweetrush.core.TranslatorProto
$es4.$$package('sweetrush.core').TranslatorProto = (function ()
{
	//imports
	var Construct;
	var Token;
	var Base64Util;
	var Analyzer;
	var TranslatorPrototype;
	var FileUtil;
	var SwcUtil;
	var Construct;
	var TranslatorProto;
	var Lexer;
	var JsonUtil;
	var Token;
	var Parser;
	var Transcompiler;

	//class initializer
	TranslatorProto.$$cinit = (function ()
	{
		TranslatorProto.$$cinit = undefined;

		//initialize imports
		Construct = $es4.$$['sweetrush.obj'].Construct;
		Token = $es4.$$['sweetrush.obj'].Token;
		Base64Util = $es4.$$['sweetrush.utils'].Base64Util;
		Analyzer = $es4.$$['sweetrush.core'].Analyzer;
		TranslatorPrototype = $es4.$$['sweetrush.core'].TranslatorPrototype;
		FileUtil = $es4.$$['sweetrush.utils'].FileUtil;
		SwcUtil = $es4.$$['sweetrush.utils'].SwcUtil;
		Lexer = $es4.$$['sweetrush.core'].Lexer;
		JsonUtil = $es4.$$['sweetrush.utils'].JsonUtil;
		Parser = $es4.$$['sweetrush.core'].Parser;
		Transcompiler = $es4.$$['sweetrush'].Transcompiler;
	});

	//method
	$es4.$$public_function('translate', TranslatorProto, (function ($$$$rootConstruct, $$$$rootConstructs, $$$$dynamicPropertyAccess, $$$$release, $$$$fastPropertyAccess)
	{
		if (TranslatorProto.$$cinit !== undefined) TranslatorProto.$$cinit();

		//set default parameter values
		var rootConstruct = $$$$rootConstruct;
		var rootConstructs = $$$$rootConstructs;
		var dynamicPropertyAccess = $$$$dynamicPropertyAccess;
		var release = $$$$release;
		var fastPropertyAccess = (4 > arguments.length - 1) ? false : $es4.$$coerce($$$$fastPropertyAccess, Boolean);

		var _rootConstruct = rootConstruct;
		var _rootConstructs = rootConstructs;
		var _indent = -1;
		var _count = -1;
		var _level = 0;
		var _fastPropertyAccess = fastPropertyAccess = false;
		var _dynamicPropertyAccess = dynamicPropertyAccess;
		var _inClosure = false;
		var _inNamespacedFunction = false;
		var _inStaticFunction = false;
		var _inIfStatement = 0;
		var _importNameConflicts = {};

		function upLevel() 
		{
			_indent++;
			_level++;
			return _level;
		}
;

		function downLevel() 
		{
			_indent--;
			_level--;
			return _level;
		}
;

		function lookupConstructInRootConstruct($$$$rootConstruct, $$$$object) 
		{
			//set default parameter values
			var rootConstruct = $$$$rootConstruct;
			var object = $$$$object;

			if (!rootConstruct || !object)
			{
				throw $es4.$$primitive(new (Error)('cannot lookup empty rootConstruct/object: ' + rootConstruct + ', ' + object));
			}
			else if ($es4.$$is(object, String))
			{
				for (var i = 0; i < $es4.$$get(rootConstruct, null, null, 'classConstructs', 'length'); i++)
				{
					if ($es4.$$get(rootConstruct, null, null, 'classConstructs', i, 'identifierToken', 'data') == object)
					{
						return $es4.$$get(rootConstruct, null, null, 'classConstructs', i);
					}
				}
				for (var i = 0; i < $es4.$$get(rootConstruct, null, null, 'interfaceConstructs', 'length'); i++)
				{
					if ($es4.$$get(rootConstruct, null, null, 'interfaceConstructs', i, 'identifierToken', 'data') == object)
					{
						return $es4.$$get(rootConstruct, null, null, 'interfaceConstructs', i);
					}
				}
				if ($es4.$$get(rootConstruct, null, null, 'packageConstruct', 'classConstruct'))
				{
					return $es4.$$get(rootConstruct, null, null, 'packageConstruct', 'classConstruct');
				}
				if ($es4.$$get(rootConstruct, null, null, 'packageConstruct', 'interfaceConstruct'))
				{
					return $es4.$$get(rootConstruct, null, null, 'packageConstruct', 'interfaceConstruct');
				}
				if ($es4.$$get(rootConstruct, null, null, 'packageConstruct', 'propertyConstruct'))
				{
					return $es4.$$get(rootConstruct, null, null, 'packageConstruct', 'propertyConstruct');
				}
				if ($es4.$$get(rootConstruct, null, null, 'packageConstruct', 'methodConstruct'))
				{
					return $es4.$$get(rootConstruct, null, null, 'packageConstruct', 'methodConstruct');
				}
				throw $es4.$$primitive(new (Error)('could not lookup construct in construct: ' + object));
			}
			if ($es4.$$get(object, null, null, 'constructor') == $es4.$$get(Construct, null, null, 'NameConstruct'))
			{
				return lookupConstructInRootConstruct(rootConstruct, $es4.$$call(Construct, null, null, 'nameConstructToString', [object]));
			}
			else if ($es4.$$get(object, null, null, 'constructor') == $es4.$$get(Construct, null, null, 'ImportConstruct'))
			{
				return lookupConstructInRootConstruct(rootConstruct, $es4.$$call(Construct, null, null, 'nameConstructToString', [$es4.$$get(object, null, null, 'nameConstruct')]));
			}
		}
;

		var packageConstruct = $es4.$$get(rootConstruct, null, null, 'packageConstruct');
		var js = print('$es4.$$package(\'' + ($es4.$$get(packageConstruct, null, null, 'nameConstruct') ? $es4.$$call(Construct, null, null, 'nameConstructToString', [$es4.$$get(packageConstruct, null, null, 'nameConstruct')]) : '') + '\').', _indent, 0);
		if ($es4.$$get(packageConstruct, null, null, 'classConstruct'))
		{
			if ($es4.$$get(packageConstruct, null, null, 'classConstruct', 'UNIMPLEMENTEDToken'))
			{
				if (release)
				{
					js += $es4.$$get(packageConstruct, null, null, 'classConstruct', 'identifierToken', 'data') + ' = null;\n';
					return js;
				}
				js = ($es4.$$get(packageConstruct, null, null, 'nameConstruct')) ? '$es4.$$package(\'' + $es4.$$call(Construct, null, null, 'nameConstructToString', [$es4.$$get(packageConstruct, null, null, 'nameConstruct')]) + '\')' : 'global';
				js += '.' + $es4.$$get(packageConstruct, null, null, 'classConstruct', 'identifierToken', 'data');
				js += ' = function () { throw new Error(\'Use of unimplemented class: ' + $es4.$$get(packageConstruct, null, null, 'classConstruct', 'identifierToken', 'data') + '\'); }';
				js += '\n';
				return js;
			}
			js += print(translateClassConstruct($es4.$$get(packageConstruct, null, null, 'classConstruct')), _indent, 0);
		}
		js += ($es4.$$get(packageConstruct, null, null, 'interfaceConstruct')) ? print(translateInterfaceConstruct($es4.$$get(packageConstruct, null, null, 'interfaceConstruct')), _indent, 0) : '';
		js += ($es4.$$get(packageConstruct, null, null, 'propertyConstruct')) ? print(translatePropertyConstruct($es4.$$get(packageConstruct, null, null, 'propertyConstruct')), _indent, 0) : '';
		if ($es4.$$get(packageConstruct, null, null, 'methodConstruct'))
		{
			if ($es4.$$get(packageConstruct, null, null, 'methodConstruct', 'UNIMPLEMENTEDToken'))
			{
				if (release)
				{
					js += $es4.$$get(packageConstruct, null, null, 'methodConstruct', 'identifierToken', 'data') + ' = null;\n';
					return js;
				}
				js = ($es4.$$get(packageConstruct, null, null, 'nameConstruct')) ? '$es4.$$package(\'' + $es4.$$call(Construct, null, null, 'nameConstructToString', [$es4.$$get(packageConstruct, null, null, 'nameConstruct')]) + '\')' : 'global';
				js += '.' + $es4.$$get(packageConstruct, null, null, 'methodConstruct', 'identifierToken', 'data');
				js += ' = function () { throw new Error(\'Use of unimplemented function: ' + $es4.$$get(packageConstruct, null, null, 'methodConstruct', 'identifierToken', 'data') + '\'); }';
				js += '\n';
				return js;
			}
			_inStaticFunction = true;
			js += print(translateFunctionConstruct($es4.$$get(packageConstruct, null, null, 'methodConstruct')), _indent, 0);
		}
		return js;

		function getTranslatedTypeName($$$$type) 
		{
			//set default parameter values
			var type = $$$$type;

			if ($es4.$$get(type, null, null, 'name') == '*' || $es4.$$get(type, null, null, 'name') == 'void')
			{
				return '';
			}
			if ($es4.$$get(_importNameConflicts, null, null, $es4.$$get(type, null, null, 'name')))
			{
				var fullyQualifiedName = $es4.$$get(type, null, null, 'fullyQualifiedName');
				var parts = $es4.$$call(fullyQualifiedName, null, null, 'split', ['.']);
				var name = $es4.$$call(parts, null, null, 'pop', $es4.$$EMPTY_ARRAY);
				return '$es4.$$[\'' + $es4.$$call(parts, null, null, 'join', ['.']) + '\'].' + name;
			}
			return $es4.$$get(type, null, null, 'name');
		}
;

		function translateInterfaceConstruct($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			upLevel();
			var js = print($es4.$$get(construct, null, null, 'identifierToken', 'data') + ' = (function ()', 0, 1);
			js += print('{', _indent, 1);
			js += print('function ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '()', _indent + 1, 1);
			js += print('{', _indent + 1, 1);
			js += print('//handle cast', _indent + 2, 1);
			js += print('return $es4.$$as(arguments[0], ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + ');', _indent + 2, 1);
			js += print('}', _indent + 1, 1);
			var comma = false;
			var innerJS = '';
			if ($es4.$$get(construct, null, null, 'extendsNameConstructs', 'length'))
			{
				innerJS += 'IMPLEMENTS:[';
				for (var i = 0; i < $es4.$$get(construct, null, null, 'extendsNameConstructs', 'length'); i++)
				{
					if (comma)
					{
						innerJS += ', ';
					}
					var type = $es4.$$get(construct, null, null, 'extendsNameConstructs', i, 'type');
					var innerConstruct = lookupConstructInRootConstruct($es4.$$get(construct, null, null, 'rootConstruct'), $es4.$$get(construct, null, null, 'extendsNameConstructs', i));
					if ($es4.$$get(innerConstruct, null, null, 'isInternal'))
					{
						innerJS += comma = $es4.$$get(type, null, null, 'fullyQualifiedName');
					}
					else
					{
						innerJS += comma = '\'' + $es4.$$get(type, null, null, 'fullyQualifiedName') + '\'';
					}
				}
				innerJS += comma = ']';
			}
			if (!$es4.$$get(construct, null, null, 'isInternal'))
			{
				if ($es4.$$get(_rootConstruct, null, null, 'classConstructs', 'length'))
				{
					if (comma)
					{
						innerJS += ', ';
					}
					innerJS += 'CLASSES:[';
					comma = false;
					for (var i = 0; i < $es4.$$get(_rootConstruct, null, null, 'classConstructs', 'length'); i++)
					{
						if (comma)
						{
							innerJS += ', ';
						}
						innerJS += comma = $es4.$$get(_rootConstruct, null, null, 'classConstructs', i, 'identifierToken', 'data');
					}
					innerJS += comma = ']';
				}
				if ($es4.$$get(_rootConstruct, null, null, 'interfaceConstructs', 'length'))
				{
					if (comma)
					{
						innerJS += ', ';
					}
					innerJS += 'INTERFACES:[';
					comma = false;
					for (var i = 0; i < $es4.$$get(_rootConstruct, null, null, 'interfaceConstructs', 'length'); i++)
					{
						if (comma)
						{
							innerJS += ', ';
						}
						innerJS += comma = $es4.$$get(_rootConstruct, null, null, 'interfaceConstructs', i, 'identifierToken', 'data');
					}
					innerJS += comma = ']';
				}
			}
			var packageName = $es4.$$get(construct, null, null, 'packageName');
			var fullyQualifiedName = (packageName) ? packageName + '::' + $es4.$$get(construct, null, null, 'identifierToken', 'data') : $es4.$$get(construct, null, null, 'identifierToken', 'data');
			if (innerJS)
			{
				js += print('return $es4.$$interface(' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + ', ', _indent + 1, 0, 1);
				js += '{' + innerJS + '}';
				js += print(', \'' + fullyQualifiedName + '\');', 0, 1);
			}
			else
			{
				js += print('return $es4.$$interface(' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + ', null, ', _indent + 1, 0);
				js += print('\'' + fullyQualifiedName + '\');', 0, 1);
			}
			js += print('})();', _indent, 1);
			downLevel();
			return js;
		}
;

		function translatePropertyConstruct($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			return print($es4.$$get(construct, null, null, 'identifierToken', 'data') + ' = $es4.$$namespace(' + translateExpression($es4.$$get(construct, null, null, 'valueExpression'), _indent, false, construct) + ', true);', 0, 1);
		}
;

		function translateFunctionConstruct($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			upLevel();
			var importConstructs = $es4.$$get(_rootConstruct, null, null, 'packageConstruct', 'importConstructs');
			var js = '';
			var innerJS;
			var cr = false;
			var accessor = $es4.$$get(construct, null, null, 'getToken') || $es4.$$get(construct, null, null, 'setToken');
			js += print($es4.$$get(construct, null, null, 'identifierToken', 'data') + ' = (function ()', 0, 1);
			js += print('{', _indent, 1);
			js += print('var $$this = ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + ', $$thisp = ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + ';', _indent + 1, 1);
			js += (innerJS = translateImports(construct)) ? cr = innerJS : '';
			js += (innerJS = translateClassInitializer(construct)) ? cr = print(innerJS, 0, 0, (cr) ? 1 : 0) : '';
			js += (innerJS = translateClassFunction(construct)) ? print(innerJS, 0, 0, 1) : '';
			if (accessor)
			{
				js += print($es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$pcinit = ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + ';', _indent + 1, 1, 1);
				js += print('return ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + ';', _indent + 1, 1, 0);
			}
			else
			{
				js += print('return $es4.$$function (' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + ');', _indent + 1, 1, 1);
			}
			js += print('})();', _indent, 1);
			downLevel();
			return js;

			function translateImports($$$$construct) 
			{
				//set default parameter values
				var construct = $$$$construct;

				var js = '';
				if ($es4.$$get(importConstructs, null, null, 'length'))
				{
					js += print('//imports', _indent + 1, 1);
				}
				for (var i = 0; i < $es4.$$get(importConstructs, null, null, 'length'); i++)
				{
					js += print('var ' + $es4.$$get(importConstructs, null, null, i, 'nameConstruct', 'identifierTokens', $es4.$$get(importConstructs, null, null, i, 'nameConstruct', 'identifierTokens', 'length') - 1, 'data') + ';', _indent + 1, 1);
				}
				return js;
			}
;

			function translateClassInitializer($$$$construct) 
			{
				//set default parameter values
				var construct = $$$$construct;

				_inStaticFunction = true;
				var js = print('//function initializer', _indent + 1, 1);
				js += print($es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit = (function ()', _indent + 1, 1);
				js += print('{', _indent + 1, 1);
				js += print($es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit = undefined;', _indent + 2, 1);
				var importConstructs = ($es4.$$get(construct, null, null, 'isInternal')) ? $es4.$$get(_rootConstruct, null, null, 'importConstructs') : $es4.$$get(_rootConstruct, null, null, 'packageConstruct', 'importConstructs');
				if ($es4.$$get(importConstructs, null, null, 'length'))
				{
					js += print('//initialize imports', _indent + 2, 1, 1);
				}
				var importNames = {};
				$es4.$$set(importNames, null, null, $es4.$$get(construct, null, null, 'identifierToken', 'data'), true, '=');
				for (var i = 0; i < $es4.$$get(importConstructs, null, null, 'length'); i++)
				{
					var name = $es4.$$get(importConstructs, null, null, i, 'nameConstruct', 'identifierTokens', $es4.$$get(importConstructs, null, null, i, 'nameConstruct', 'identifierTokens', 'length') - 1, 'data');
					var packageName = '';
					if ($es4.$$get(importConstructs, null, null, i, 'nameConstruct', 'identifierTokens', 'length') > 1)
					{
						var fullyQualifiedName = $es4.$$call(Construct, null, null, 'nameConstructToString', [$es4.$$get(importConstructs, null, null, i, 'nameConstruct')]);
						fullyQualifiedName = $es4.$$call(fullyQualifiedName, null, null, 'split', ['.']);
						$es4.$$call(fullyQualifiedName, null, null, 'pop', $es4.$$EMPTY_ARRAY);
						packageName = $es4.$$call(fullyQualifiedName, null, null, 'join', ['.']);
					}
					if ($es4.$$get(importNames, null, null, name))
					{
						$es4.$$set(_importNameConflicts, null, null, name, true, '=');
						continue;
					}
					else
					{
						$es4.$$set(importNames, null, null, name, true, '=');
					}
					js += print(name + ' = $es4.$$[\'' + packageName + '\'].' + name + ';', _indent + 2, 1);
				}
				js += print('});', _indent + 1, 1);
				_inStaticFunction = false;
				return js;
			}
;

			function translateClassFunction($$$$construct) 
			{
				//set default parameter values
				var construct = $$$$construct;

				upLevel();
				var js = '';
				if (accessor)
				{
					var name = $es4.$$get(construct, null, null, 'getToken') ? 'getter' : 'setter';
					js += print('function ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '() { $$' + name + '(\'' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '\', ' + '$es4.$$package(\'' + ($es4.$$get(construct, null, null, 'packageConstruct', 'nameConstruct') ? $es4.$$call(Construct, null, null, 'nameConstructToString', [$es4.$$get(construct, null, null, 'packageConstruct', 'nameConstruct')]) : '') + '\'), (function ()', _indent, 1);
				}
				else
				{
					js += print('function ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '(', _indent, 0);
				}
				js += translateParameters(construct, construct);
				if (!accessor)
				{
					js += print(')', 0, (_indent) ? 1 : 0);
				}
				js += print('{', _indent, (_indent) ? 1 : 0);
				js += print('//initialize function if not initialized', _indent + 1, 1);
				js += print('if (' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit !== undefined) ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit();', _indent + 1, 2);
				js += translateDefaultParameterValues(construct, construct);
				if (accessor)
				{
					js += print('//change reference', _indent + 1, 1, 1);
					js += print($es4.$$get(construct, null, null, 'identifierToken', 'data') + ' = this;', _indent + 1, $es4.$$get(construct, null, null, 'bodyStatements', 'length') ? 2 : 1);
				}
				if ($es4.$$get(construct, null, null, 'isJavaScript'))
				{
					js += $es4.$$get(construct, null, null, 'javaScriptString');
				}
				else
				{
					js += translateStatements($es4.$$get(construct, null, null, 'bodyStatements'), _indent + 1, construct);
				}
				if (accessor)
				{
					js += print('})', ($es4.$$get(construct, null, null, 'isJavaScript')) ? 0 : _indent, 0);
					js += print(');}', 0, 1);
				}
				else
				{
					js += print('}', 0, 1);
				}
				downLevel();
				return js;
			}
;
		}
;

		function translateClassConstruct($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			var js = '';
			upLevel();
			var innerJS;
			var cr = false;
			js += print($es4.$$get(construct, null, null, 'identifierToken', 'data') + ' = (function ()', 0, 1);
			js += print('{', _indent, 1);
			js += (innerJS = translateImports(construct)) ? cr = innerJS : '';
			js += (innerJS = translateNamespaces(construct, true)) ? cr = print(innerJS, 0, 0, (cr) ? 1 : 0) : '';
			js += (innerJS = translateStaticProperties(construct)) ? cr = print(innerJS, 0, 0, (cr) ? 1 : 0) : '';
			js += (innerJS = translateClassInitializer(construct)) ? cr = print(innerJS, 0, 0, (cr) ? 1 : 0) : '';
			js += (innerJS = translateStaticMethods(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateStaticAccessors(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateClassFunction(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateInternalClasses(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateInternalInterfaces(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateClassReturnStatement(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += print('})();', _indent, 1);
			downLevel();
			return js;
		}
;

		function translateClassInitializer($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			_inStaticFunction = true;
			var js = print('//class initializer', _indent + 1, 1);
			js += print($es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit = (function ()', _indent + 1, 1);
			js += print('{', _indent + 1, 1);
			js += print($es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit = undefined;', _indent + 2, 2);
			var importConstructs = ($es4.$$get(construct, null, null, 'isInternal')) ? $es4.$$get(_rootConstruct, null, null, 'importConstructs') : $es4.$$get(_rootConstruct, null, null, 'packageConstruct', 'importConstructs');
			if ($es4.$$get(importConstructs, null, null, 'length'))
			{
				js += print('//initialize imports', _indent + 2, 1);
			}
			var found = false;
			var importNames = {};
			$es4.$$set(importNames, null, null, $es4.$$get(construct, null, null, 'identifierToken', 'data'), true, '=');
			for (var i = 0; i < $es4.$$get(importConstructs, null, null, 'length'); i++)
			{
				found = true;
				var name = $es4.$$get(importConstructs, null, null, i, 'nameConstruct', 'identifierTokens', $es4.$$get(importConstructs, null, null, i, 'nameConstruct', 'identifierTokens', 'length') - 1, 'data');
				var packageName = '';
				if ($es4.$$get(importConstructs, null, null, i, 'nameConstruct', 'identifierTokens', 'length') > 1)
				{
					var fullyQualifiedName = $es4.$$call(Construct, null, null, 'nameConstructToString', [$es4.$$get(importConstructs, null, null, i, 'nameConstruct')]);
					fullyQualifiedName = $es4.$$call(fullyQualifiedName, null, null, 'split', ['.']);
					$es4.$$call(fullyQualifiedName, null, null, 'pop', $es4.$$EMPTY_ARRAY);
					packageName = $es4.$$call(fullyQualifiedName, null, null, 'join', ['.']);
				}
				if ($es4.$$get(importNames, null, null, name))
				{
					$es4.$$set(_importNameConflicts, null, null, name, true, '=');
					continue;
				}
				else
				{
					$es4.$$set(importNames, null, null, name, true, '=');
				}
				js += print(name + ' = $es4.$$[\'' + packageName + '\'].' + name + ';', _indent + 2, 1);
			}
			var found = false;
			for (var i = 0; i < $es4.$$get(construct, null, null, 'propertyConstructs', 'length'); i++)
			{
				var propertyConstruct = $es4.$$get(construct, null, null, 'propertyConstructs', i);
				if (!$es4.$$get(propertyConstruct, null, null, 'staticToken'))
				{
					continue;
				}
				if (!$es4.$$get(propertyConstruct, null, null, 'valueExpression'))
				{
					continue;
				}
				if ($es4.$$get(propertyConstruct, null, null, 'translatedEarlier'))
				{
					continue;
				}
				if (!found)
				{
					found = true;
					js += print('//initialize properties', _indent + 2, 1, ($es4.$$get(importConstructs, null, null, 'length')) ? 1 : 0);
				}
				var namespaceObj = $es4.$$get(propertyConstruct, null, null, 'identifier', 'namespaceObj');
				var namespaceString;
				if ($es4.$$get(namespaceObj, null, null, 'importID'))
				{
					namespaceString = $es4.$$get(namespaceObj, null, null, 'importID');
				}
				else
				{
					namespaceString = ($es4.$$get(construct, null, null, 'identifierToken', 'data') + '.' + $es4.$$get(namespaceObj, null, null, 'name'));
				}
				if ($es4.$$get(namespaceObj, null, null, 'isCustom'))
				{
					js += print('$es4.$$namespace(' + namespaceString + ', ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + ').' + $es4.$$get(propertyConstruct, null, null, 'identifierToken', 'data'), _indent + 2, 0);
					js += ' = ' + translateExpression($es4.$$get(propertyConstruct, null, null, 'valueExpression'), _indent, false, construct);
					js += print(';', 0, 1);
				}
				else
				{
					if ($es4.$$get(propertyConstruct, null, null, 'isNative'))
					{
						js += print($es4.$$get(propertyConstruct, null, null, 'identifierToken', 'data'), _indent + 2, 0);
					}
					else
					{
						js += print($es4.$$get(construct, null, null, 'identifierToken', 'data') + '.' + $es4.$$get(propertyConstruct, null, null, 'identifierToken', 'data'), _indent + 2, 0);
					}
					var valueJS = translateExpression($es4.$$get(propertyConstruct, null, null, 'valueExpression'), _indent, false, construct);
					var typeString = getTranslatedTypeName($es4.$$get(propertyConstruct, null, null, 'identifier', 'type'));
					if ($es4.$$get(propertyConstruct, null, null, 'isNative') && $es4.$$get(propertyConstruct, null, null, 'coerce') && isCoerceRequired(propertyConstruct, typeString, valueJS))
					{
						js += ' = $es4.$$coerce(' + valueJS + ', ' + typeString + ')';
					}
					else
					{
						js += ' = ' + valueJS;
					}
					js += print(';', 0, 1);
				}
			}
			js += translateStatements($es4.$$get(construct, null, null, 'initializerStatements'), _indent + 2, construct);
			js += print('});', _indent + 1, 1);
			_inStaticFunction = false;
			return js;
		}
;

		function translateClassFunction($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			var js = '';
			upLevel();
			var js = print('function ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '()', _indent, 1);
			js += print('{', _indent, 1);
			js += print('//initialize class if not initialized', _indent + 1, 1);
			js += print('if (' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit !== undefined) ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit();', _indent + 1, 2);
			js += print('//save scope', _indent + 1, 1);
			js += print('var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;', _indent + 1, 1);
			js += print('var $$thisp = this;', _indent + 1, 2);
			js += print('//handle possible cast', _indent + 1, 1);
			js += print('if ($$this === $$thisp && (!($$this instanceof ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + ') || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + ') : $es4.$$throwArgumentError();', _indent + 1, 1);
			js += print('Object.defineProperty($$this, \'$$t\', {value:1});', _indent + 1, 1);
			var innerJS;
			js += (innerJS = translateNamespaces(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateInstanceProperties(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateInitializer(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateConstructor(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateInstanceMethods(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += (innerJS = translateInstanceAccessors(construct)) ? print(innerJS, 0, 0, 1) : '';
			js += print('//call construct if no arguments, or argument zero does not equal manual construct', _indent + 1, 1, 1);
			js += print('if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)', _indent + 1, 1);
			js += print('{', _indent + 1, 1);
			js += print('for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];', _indent + 2, 2);
			js += print('$es4.$$construct($$this, $$args);', _indent + 2, 1);
			js += print('}', _indent + 1, 1);
			js += print('}', _indent, 1);
			downLevel();
			return js;
		}
;

		function translateInternalClasses($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			if ($es4.$$get(construct, null, null, 'isInternal'))
			{
				return '';
			}
			var js = '';
			for (var i = 0; i < $es4.$$get(_rootConstruct, null, null, 'classConstructs', 'length'); i++)
			{
				if (js)
				{
					js += print('', 0, 1);
				}
				js += print('////////////////INTERNAL CLASS////////////////', _indent + 1, 1);
				js += print('var ' + translateClassConstruct($es4.$$get(_rootConstruct, null, null, 'classConstructs', i)), 1, 0);
			}
			return js;
		}
;

		function translateInternalInterfaces($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			if ($es4.$$get(construct, null, null, 'isInternal'))
			{
				return '';
			}
			var js = '';
			for (var i = 0; i < $es4.$$get(_rootConstruct, null, null, 'interfaceConstructs', 'length'); i++)
			{
				if (js)
				{
					js += print('', 0, 1);
				}
				js += print('////////////////INTERNAL INTERFACE////////////////', _indent + 1, 1);
				js += print('var ' + translateInterfaceConstruct($es4.$$get(_rootConstruct, null, null, 'interfaceConstructs', i)), 1, 0);
			}
			return js;
		}
;

		function translateClassReturnStatement($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			var js = print('return $es4.$$class(' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + ', ', _indent + 1, 0);
			var comma = false;
			var innerJS = '';
			if ($es4.$$get(construct, null, null, 'extendsNameConstruct'))
			{
				var type = $es4.$$get(construct, null, null, 'extendsNameConstruct', 'type');
				var innerConstruct = lookupConstructInRootConstruct($es4.$$get(construct, null, null, 'rootConstruct'), $es4.$$get(construct, null, null, 'extendsNameConstruct'));
				if ($es4.$$get(innerConstruct, null, null, 'isInternal'))
				{
					innerJS += comma = 'EXTENDS:' + $es4.$$get(type, null, null, 'fullyQualifiedName');
				}
				else
				{
					innerJS += comma = 'EXTENDS:\'' + $es4.$$get(type, null, null, 'fullyQualifiedName') + '\'';
				}
			}
			if ($es4.$$get(construct, null, null, 'implementsNameConstructs', 'length'))
			{
				if (comma)
				{
					innerJS += ', ';
				}
				innerJS += 'IMPLEMENTS:[';
				comma = false;
				for (var i = 0; i < $es4.$$get(construct, null, null, 'implementsNameConstructs', 'length'); i++)
				{
					if (comma)
					{
						innerJS += ', ';
					}
					var type = $es4.$$get(construct, null, null, 'implementsNameConstructs', i, 'type');
					var innerConstruct = lookupConstructInRootConstruct($es4.$$get(construct, null, null, 'rootConstruct'), $es4.$$get(construct, null, null, 'implementsNameConstructs', i));
					if ($es4.$$get(innerConstruct, null, null, 'isInternal'))
					{
						innerJS += comma = $es4.$$get(type, null, null, 'fullyQualifiedName');
					}
					else
					{
						innerJS += comma = '\'' + $es4.$$get(type, null, null, 'fullyQualifiedName') + '\'';
					}
				}
				innerJS += comma = ']';
			}
			if (!$es4.$$get(construct, null, null, 'isInternal'))
			{
				if ($es4.$$get(_rootConstruct, null, null, 'classConstructs', 'length'))
				{
					if (comma)
					{
						innerJS += ', ';
					}
					innerJS += 'CLASSES:[';
					comma = false;
					for (var i = 0; i < $es4.$$get(_rootConstruct, null, null, 'classConstructs', 'length'); i++)
					{
						if (comma)
						{
							innerJS += ', ';
						}
						innerJS += comma = $es4.$$get(_rootConstruct, null, null, 'classConstructs', i, 'identifierToken', 'data');
					}
					innerJS += comma = ']';
				}
				if ($es4.$$get(_rootConstruct, null, null, 'interfaceConstructs', 'length'))
				{
					if (comma)
					{
						innerJS += ', ';
					}
					innerJS += 'INTERFACES:[';
					comma = false;
					for (var i = 0; i < $es4.$$get(_rootConstruct, null, null, 'interfaceConstructs', 'length'); i++)
					{
						if (comma)
						{
							innerJS += ', ';
						}
						innerJS += comma = $es4.$$get(_rootConstruct, null, null, 'interfaceConstructs', i, 'identifierToken', 'data');
					}
					innerJS += comma = ']';
				}
			}
			var packageName = $es4.$$get(construct, null, null, 'packageName');
			var fullyQualifiedName = (packageName) ? packageName + '::' + $es4.$$get(construct, null, null, 'identifierToken', 'data') : $es4.$$get(construct, null, null, 'identifierToken', 'data');
			if (innerJS)
			{
				js += '{' + innerJS + '}';
				js += print(', \'' + fullyQualifiedName + '\');', 0, 1);
			}
			else
			{
				js = print('return $es4.$$class(' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + ', null, ', _indent + 1, 0);
				js += print('\'' + fullyQualifiedName + '\');', 0, 1);
			}
			return js;
		}
;

		function translateInitializer($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			upLevel();
			var js = print('//initializer', _indent, 1);
			js += print('$es4.$$iinit($$thisp, (function ()', _indent, 1);
			js += print('{', _indent, 1);
			var found = false;
			for (var i = 0; i < $es4.$$get(construct, null, null, 'instancePropertyConstructs', 'length'); i++)
			{
				var propertyConstruct = $es4.$$get(construct, null, null, 'instancePropertyConstructs', i);
				if (!$es4.$$get(propertyConstruct, null, null, 'valueExpression'))
				{
					continue;
				}
				if (!found)
				{
					found = true;
					js += print('//initialize properties', _indent + 1, 1);
				}
				var namespaceObj = $es4.$$get(propertyConstruct, null, null, 'identifier', 'namespaceObj');
				if ($es4.$$get(namespaceObj, null, null, 'isCustom'))
				{
					var namespaceString = '$$thisp.' + $es4.$$get(propertyConstruct, null, null, 'namespaceToken', 'data');
					if ($es4.$$get(namespaceObj, null, null, 'importID'))
					{
						namespaceString = $es4.$$get(namespaceObj, null, null, 'normalizedImportID');
					}
					js += print('$es4.$$namespace(' + namespaceString + ', $$this).' + $es4.$$get(propertyConstruct, null, null, 'identifierToken', 'data') + ' = ', _indent + 1, 0);
					js += translateExpression($es4.$$get(propertyConstruct, null, null, 'valueExpression'), _indent, false, construct);
					js += print(';', 0, 1);
				}
				else
				{
					if ($es4.$$get(propertyConstruct, null, null, 'isNative'))
					{
						js += print($es4.$$get(propertyConstruct, null, null, 'identifierToken', 'data') + ' = ', _indent + 1, 0);
						var valueJS = translateExpression($es4.$$get(propertyConstruct, null, null, 'valueExpression'), _indent, false, construct);
						var typeString = getTranslatedTypeName($es4.$$get(propertyConstruct, null, null, 'identifier', 'type'));
						if ($es4.$$get(propertyConstruct, null, null, 'coerce') && isCoerceRequired(propertyConstruct, typeString, valueJS))
						{
							js += '$es4.$$coerce(' + valueJS + ', ' + typeString + ')';
						}
						else
						{
							js += valueJS;
						}
						js += print(';', 0, 1);
					}
					else if (_dynamicPropertyAccess)
					{
						js += print('$es4.$$set($$this, $$this, $$thisp, \'' + $es4.$$get(propertyConstruct, null, null, 'identifierToken', 'data') + '\', ' + translateExpression($es4.$$get(propertyConstruct, null, null, 'valueExpression'), _indent, false, construct) + ', \'=\')', _indent + 1, 0);
						js += print(';', 0, 1);
					}
					else
					{
						if ($es4.$$get(namespaceObj, null, null, 'isPrivate'))
						{
							js += print('$$thisp.' + $es4.$$get(propertyConstruct, null, null, 'identifierToken', 'data') + ' = ', _indent + 1, 0);
						}
						else
						{
							js += print('$$this.' + $es4.$$get(propertyConstruct, null, null, 'identifierToken', 'data') + ' = ', _indent + 1, 0);
						}
						js += translateExpression($es4.$$get(propertyConstruct, null, null, 'valueExpression'), _indent, false, construct);
						js += print(';', 0, 1);
					}
				}
			}
			js += print('}));', _indent, 1);
			downLevel();
			return (found) ? js : '';
		}
;

		function translateConstructor($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			var js = '';
			upLevel();
			var methodConstruct = $es4.$$get(construct, null, null, 'constructorMethodConstruct');
			js += print('//constructor', _indent, 1);
			js += print('$es4.$$constructor($$thisp, (function (', _indent, 0);
			if (methodConstruct)
			{
				js += translateParameters(methodConstruct, construct);
			}
			js += print(')', 0, 1);
			js += print('{', _indent, 1);
			if (methodConstruct)
			{
				js += translateDefaultParameterValues(methodConstruct, construct);
			}
			var carriage = false;
			if ($es4.$$get(construct, null, null, 'extendsNameConstruct') && (!methodConstruct || (methodConstruct && !$es4.$$get(methodConstruct, null, null, 'callsSuper'))))
			{
				js += print('$es4.$$super($$thisp).$$z();', _indent + 1, 1);
				carriage = true;
			}
			if (methodConstruct)
			{
				var innerJS = print(translateStatements($es4.$$get(methodConstruct, null, null, 'bodyStatements'), _indent + 1, construct), 0, 0);
				if (innerJS && carriage)
				{
					js += print('', 0, 1);
				}
				if (innerJS)
				{
					js += innerJS;
				}
			}
			js += print('})', _indent, 0);
			js += print(');', 0, 1);
			downLevel();
			return js;
		}
;

		function translateImports($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			var js = '';
			var importConstructs = ($es4.$$get(construct, null, null, 'isInternal')) ? $es4.$$get(_rootConstruct, null, null, 'importConstructs') : $es4.$$get(_rootConstruct, null, null, 'packageConstruct', 'importConstructs');
			if ($es4.$$get(importConstructs, null, null, 'length'))
			{
				js += print('//imports', _indent + 1, 1);
			}
			for (var i = 0; i < $es4.$$get(importConstructs, null, null, 'length'); i++)
			{
				js += print('var ' + $es4.$$get(importConstructs, null, null, i, 'nameConstruct', 'identifierTokens', $es4.$$get(importConstructs, null, null, i, 'nameConstruct', 'identifierTokens', 'length') - 1, 'data') + ';', _indent + 1, 1);
			}
			return js;
		}
;

		function translateNamespaces($$$$construct, $$$$isClassLevel) 
		{
			//set default parameter values
			var construct = $$$$construct;
			var isClassLevel = (1 > arguments.length - 1) ? false : $$$$isClassLevel;

			var js = '';
			var propertyConstructs = $es4.$$get(construct, null, null, 'namespacePropertyConstructs');
			var counter = 0;
			for (var i = 0; i < $es4.$$get(propertyConstructs, null, null, 'length'); i++)
			{
				var propertyConstruct = $es4.$$get(propertyConstructs, null, null, i);
				if (!js)
				{
					js += print('//namespaces', _indent + 1, 1);
				}
				js += print('$es4.$$' + $es4.$$get(propertyConstruct, null, null, 'identifier', 'namespaceObj', 'name') + '_namespace(' + ($es4.$$get(propertyConstruct, null, null, 'valueExpression') ? translateExpression($es4.$$get(propertyConstruct, null, null, 'valueExpression'), _indent, false, construct) : '\'$$uniqueNS_' + (counter++) + '_' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '\'') + ', ' + ((isClassLevel) ? $es4.$$get(construct, null, null, 'identifierToken', 'data') : ($es4.$$get(propertyConstruct, null, null, 'namespaceToken', 'data') == 'private' ? '$$thisp' : '$$this')) + ', \'' + $es4.$$get(propertyConstruct, null, null, 'identifierToken', 'data') + '\');', _indent + 1, 1);
			}
			return js;
		}
;

		function translateStaticProperties($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			var js = '';
			var propertyConstructs = $es4.$$get(construct, null, null, 'staticPropertyConstructs');
			for (var i = 0; i < $es4.$$get(propertyConstructs, null, null, 'length'); i++)
			{
				var propertyConstruct = $es4.$$get(propertyConstructs, null, null, i);
				if (!js)
				{
					js += print('//properties', _indent + 1, 1);
				}
				var namespaceObj = $es4.$$get(propertyConstruct, null, null, 'identifier', 'namespaceObj');
				var type = $es4.$$get(propertyConstruct, null, null, 'identifier', 'type');
				var scope = $es4.$$get(construct, null, null, 'identifierToken', 'data');
				var returnString = ($es4.$$get(type, null, null, 'isGlobal')) ? getTranslatedTypeName(type) : '\'' + $es4.$$get(type, null, null, 'fullyQualifiedName') + '\'';
				var namespaceString = ($es4.$$get(namespaceObj, null, null, 'importID')) ? ', ' + $es4.$$get(namespaceObj, null, null, 'importID') : ', ' + ($es4.$$get(construct, null, null, 'identifierToken', 'data') + '.' + $es4.$$get(namespaceObj, null, null, 'name'));
				if ($es4.$$get(namespaceObj, null, null, 'isCustom'))
				{
					js += print('$$cnamespace_property(\'' + $es4.$$get(propertyConstruct, null, null, 'identifierToken', 'data') + '\', ' + scope + namespaceString + ((returnString) ? ', ' + returnString : '') + ');', _indent + 1, 1);
				}
				else if ($es4.$$get(propertyConstruct, null, null, 'isNative'))
				{
					js += print('var ' + $es4.$$get(propertyConstruct, null, null, 'identifierToken', 'data') + ';', _indent + 1, 1);
				}
				else
				{
					if ($es4.$$get(propertyConstruct, null, null, 'constToken') && $es4.$$get(propertyConstruct, null, null, 'valueExpression'))
					{
						if (returnString == 'String' || returnString == 'uint' || returnString == 'int' || returnString == 'Number' || returnString == 'Boolean')
						{
							var constructor = $es4.$$get(propertyConstruct, null, null, 'valueExpression', 'constructor');
							if (constructor === $es4.$$get(Construct, null, null, 'StringExpression') || constructor === $es4.$$get(Construct, null, null, 'NumberExpression') || constructor === $es4.$$get(Construct, null, null, 'BooleanExpression'))
							{
								var valueJS = translateExpression($es4.$$get(propertyConstruct, null, null, 'valueExpression'), _indent, false, construct);
								var coerce = false;
								if (constructor === $es4.$$get(Construct, null, null, 'StringExpression') && returnString != 'String')
								{
									coerce = true;
								}
								else if (constructor === $es4.$$get(Construct, null, null, 'BooleanExpression') && returnString != 'Boolean')
								{
									coerce = true;
								}
								else if (constructor === $es4.$$get(Construct, null, null, 'NumberExpression'))
								{
									if (returnString == 'uint')
									{
										if (parseInt(valueJS) != (valueJS >>> 0))
										{
											coerce = true;
										}
									}
									else if (returnString == 'int')
									{
										if (parseInt(valueJS) != (valueJS >> 0))
										{
											coerce = true;
										}
									}
								}
								if (coerce)
								{
									js += print(scope + '.' + $es4.$$get(propertyConstruct, null, null, 'identifierToken', 'data') + ' = $es4.$$coerce(' + valueJS + ', ' + returnString + ');', _indent + 1, 1);
								}
								else
								{
									js += print(scope + '.' + $es4.$$get(propertyConstruct, null, null, 'identifierToken', 'data') + ' = ' + valueJS + ';', _indent + 1, 1);
								}
								$es4.$$set(propertyConstruct, null, null, 'translatedEarlier', true, '=');
								continue;
							}
						}
					}
					js += print('$es4.$$' + $es4.$$get(propertyConstruct, null, null, 'identifier', 'namespaceObj', 'name') + '_property(\'' + $es4.$$get(propertyConstruct, null, null, 'identifierToken', 'data') + '\', ' + scope + ((returnString) ? ', ' + returnString : '') + ');', _indent + 1, 1);
				}
			}
			return js;
		}
;

		function translateInstanceProperties($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			var js = '';
			var propertyConstructs = $es4.$$get(construct, null, null, 'instancePropertyConstructs');
			for (var i = 0; i < $es4.$$get(propertyConstructs, null, null, 'length'); i++)
			{
				var propertyConstruct = $es4.$$get(propertyConstructs, null, null, i);
				if (!js)
				{
					js += print('//properties', _indent + 1, 1);
				}
				var namespaceObj = $es4.$$get(propertyConstruct, null, null, 'identifier', 'namespaceObj');
				var isCNamespace = $es4.$$get(namespaceObj, null, null, 'isCustom');
				var scope = (isCNamespace) ? '$$this, $$thisp' : '$$thisp';
				var returnString = getTranslatedTypeName($es4.$$get(propertyConstruct, null, null, 'identifier', 'type'));
				var namespaceString = ($es4.$$get(namespaceObj, null, null, 'importID')) ? ', ' + $es4.$$get(namespaceObj, null, null, 'importID') : ', $$thisp.' + $es4.$$get(namespaceObj, null, null, 'name');
				if (isCNamespace)
				{
					js += print('$es4.$$cnamespace_property(\'' + $es4.$$get(propertyConstruct, null, null, 'identifierToken', 'data') + '\', ' + scope + namespaceString + ((returnString) ? ', ' + returnString : '') + ');', _indent + 1, 1);
				}
				else if ($es4.$$get(propertyConstruct, null, null, 'isNative'))
				{
					js += print('var ' + $es4.$$get(propertyConstruct, null, null, 'identifierToken', 'data') + ';', _indent + 1, 1);
				}
				else
				{
					js += print('$es4.$$' + $es4.$$get(propertyConstruct, null, null, 'identifier', 'namespaceObj', 'name') + '_property(\'' + $es4.$$get(propertyConstruct, null, null, 'identifierToken', 'data') + '\', ' + scope + ((returnString) ? ', ' + returnString : '') + ');', _indent + 1, 1);
				}
			}
			return js;
		}
;

		function translateStaticMethods($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			_inStaticFunction = true;
			var js = '';
			for (var i = 0; i < $es4.$$get(construct, null, null, 'staticMethodConstructs', 'length'); i++)
			{
				var methodConstruct = $es4.$$get(construct, null, null, 'staticMethodConstructs', i);
				upLevel();
				var namespaceObj = $es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj');
				var isCNamespace = $es4.$$get(namespaceObj, null, null, 'isCustom');
				var type = $es4.$$get(methodConstruct, null, null, 'identifier', 'type');
				if ($es4.$$get(methodConstruct, null, null, 'isNative'))
				{
					if (isCNamespace)
					{
						throw $es4.$$primitive(new (Error)('cannot have native custom namespace native static'));
					}
					if ($es4.$$get(methodConstruct, null, null, 'isJavaScript'))
					{
						if (getTranslatedTypeName(type))
						{
							js += print('//method', _indent, 1, (js) ? 1 : 0);
							js += print('function ' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + '() { return $es4.$$coerce((function (', _indent, 0);
							js += translateParameters(methodConstruct, construct);
							js += print(')', 0, 1);
							js += print('{', _indent, 1);
							js += print('if (' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit !== undefined) ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit();', _indent + 1, 2);
							js += translateDefaultParameterValues(methodConstruct, construct);
							js += $es4.$$get(methodConstruct, null, null, 'javaScriptString');
							js += print('}).apply(this, arguments), ' + getTranslatedTypeName(type) + '); }', _indent, 1);
						}
						else
						{
							js += print('//method', _indent, 1, (js) ? 1 : 0);
							js += print('function ' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + '(', _indent, 0);
							js += translateParameters(methodConstruct, construct);
							js += print(')', 0, 1);
							js += print('{', _indent, 1);
							js += print('if (' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit !== undefined) ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit();', _indent + 1, 2);
							js += translateDefaultParameterValues(methodConstruct, construct);
							js += $es4.$$get(methodConstruct, null, null, 'javaScriptString');
							js += print('}', _indent, 1);
						}
					}
					else
					{
						js += print('//method', _indent, 1, (js) ? 1 : 0);
						js += print('function ' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + '(', _indent, 0);
						js += translateParameters(methodConstruct, construct);
						js += print(')', 0, 1);
						js += print('{', _indent, 1);
						js += print('if (' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit !== undefined) ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit();', _indent + 1, 2);
						js += translateDefaultParameterValues(methodConstruct, construct);
						if ($es4.$$get(methodConstruct, null, null, 'UNIMPLEMENTEDToken') && release)
						{
							js += print("throw new Error('" + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + "');", 0, 0);
						}
						else
						{
							js += print(translateStatements($es4.$$get(methodConstruct, null, null, 'bodyStatements'), _indent + 1, construct), 0, 0);
						}
						js += print('}', _indent, 1);
					}
				}
				else if ($es4.$$get(methodConstruct, null, null, 'isJavaScript'))
				{
					js += print('//method', _indent, 1, (js) ? 1 : 0);
					js += print('$es4.$$' + $es4.$$get(namespaceObj, null, null, 'name') + '_function(\'' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + '\', ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + ', (function (', _indent, 0);
					js += translateParameters(methodConstruct, construct);
					js += print(')', 0, 1);
					js += print('{', _indent, ($es4.$$get(methodConstruct, null, null, 'isJavaScript')) ? 0 : 1);
					js += print('if (' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit !== undefined) ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit();', _indent + 1, 2);
					js += translateDefaultParameterValues(methodConstruct, construct);
					if ($es4.$$get(methodConstruct, null, null, 'UNIMPLEMENTEDToken') && release)
					{
						js += print("throw new Error('" + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + "');", 0, 0);
					}
					else
					{
						js += print(translateStatements($es4.$$get(methodConstruct, null, null, 'bodyStatements'), _indent + 1, construct), 0, 0);
					}
					js += print('})', _indent, 0);
					if (getTranslatedTypeName(type))
					{
						js += ', ' + getTranslatedTypeName(type);
					}
					js += print(');', 0, 1);
				}
				else if (isCNamespace)
				{
					js += print('//custom namespace method', _indent, 1, (js) ? 1 : 0);
					var namespaceString = ($es4.$$get(namespaceObj, null, null, 'importID')) ? ', ' + $es4.$$get(namespaceObj, null, null, 'normalizedImportID') : ', ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.' + $es4.$$get(namespaceObj, null, null, 'normalizedName');
					js += print('$$cnamespace_function(\'' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + '\', ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + namespaceString + ', (function (', _indent, 0);
					js += translateParameters(methodConstruct, construct);
					js += print(')', 0, 1);
					js += print('{', _indent, ($es4.$$get(methodConstruct, null, null, 'isJavaScript')) ? 0 : 1);
					js += print('if (' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit !== undefined) ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit();', _indent + 1, 2);
					js += translateDefaultParameterValues(methodConstruct, construct);
					if ($es4.$$get(methodConstruct, null, null, 'UNIMPLEMENTEDToken') && release)
					{
						js += print("throw new Error('" + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + "');", 0, 0);
					}
					else
					{
						_inNamespacedFunction = ($es4.$$get(namespaceObj, null, null, 'importID')) ? $es4.$$get(namespaceObj, null, null, 'importID') : ($es4.$$get(namespaceObj, null, null, 'namespaceIsPrivate') ? '$$thisp.' : '$$this.') + $es4.$$get(namespaceObj, null, null, 'name');
						js += print(translateStatements($es4.$$get(methodConstruct, null, null, 'bodyStatements'), _indent + 1, construct), 0, 0);
						_inNamespacedFunction = false;
					}
					js += print('})', _indent, 0);
					js += print(');', 0, 1);
				}
				else
				{
					js += print('//method', _indent, 1, (js) ? 1 : 0);
					js += print('$es4.$$' + $es4.$$get(namespaceObj, null, null, 'name') + '_function(\'' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + '\', ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + ', (function (', _indent, 0);
					js += translateParameters(methodConstruct, construct);
					js += print(')', 0, 1);
					js += print('{', _indent, 1);
					js += print('if (' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit !== undefined) ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit();', _indent + 1, 2);
					js += translateDefaultParameterValues(methodConstruct, construct);
					if ($es4.$$get(methodConstruct, null, null, 'UNIMPLEMENTEDToken') && release)
					{
						js += print("throw new Error('" + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + "');", 0, 0);
					}
					else
					{
						js += print(translateStatements($es4.$$get(methodConstruct, null, null, 'bodyStatements'), _indent + 1, construct), 0, 0);
					}
					js += print('})', _indent, 0);
					js += print(');', 0, 1);
				}
				downLevel();
			}
			_inStaticFunction = false;
			return js;
		}
;

		function translateInstanceMethods($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			var js = '';
			for (var i = 0; i < $es4.$$get(construct, null, null, 'instanceMethodConstructs', 'length'); i++)
			{
				var methodConstruct = $es4.$$get(construct, null, null, 'instanceMethodConstructs', i);
				upLevel();
				var namespaceObj = $es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj');
				var isCNamespace = $es4.$$get(namespaceObj, null, null, 'isCustom');
				var type = $es4.$$get(methodConstruct, null, null, 'identifier', 'type');
				js += print((isCNamespace) ? '//custom namespace method' : '//method', _indent, 1, (js) ? 1 : 0);
				var namespaceString = ($es4.$$get(namespaceObj, null, null, 'importID')) ? ', ' + $es4.$$get(namespaceObj, null, null, 'normalizedImportID') : ', ' + ($es4.$$get(namespaceObj, null, null, 'namespaceIsPrivate') ? '$$thisp.' : '$$this.') + $es4.$$get(namespaceObj, null, null, 'normalizedName');
				if ($es4.$$get(methodConstruct, null, null, 'isNative'))
				{
					js += print('function ' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + '(', _indent, 0);
				}
				else
				{
					if (isCNamespace)
					{
						js += print('$es4.$$cnamespace_function(\'' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + '\', $$this, $$thisp' + namespaceString + ', (function (', _indent, 0);
					}
					else if (!$es4.$$get(methodConstruct, null, null, 'ITERABLEToken') && _fastPropertyAccess)
					{
						js += print('$$thisp.' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + ' = function (', _indent, 0);
					}
					else
					{
						js += print('$es4.$$' + $es4.$$get(namespaceObj, null, null, 'name') + '_function(\'' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + '\', $$thisp, (function (', _indent, 0);
					}
				}
				js += translateParameters(methodConstruct, construct);
				js += print(')', 0, 1);
				js += print('{', _indent, ($es4.$$get(methodConstruct, null, null, 'isJavaScript')) ? 0 : 1);
				js += translateDefaultParameterValues(methodConstruct, construct);
				if ($es4.$$get(methodConstruct, null, null, 'isJavaScript'))
				{
					js += $es4.$$get(methodConstruct, null, null, 'javaScriptString');
				}
				else if ($es4.$$get(methodConstruct, null, null, 'UNIMPLEMENTEDToken') && release)
				{
					js += print("throw new Error('" + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + "');", 0, 0);
				}
				else
				{
					if (isCNamespace)
					{
						_inNamespacedFunction = ($es4.$$get(namespaceObj, null, null, 'importID')) ? $es4.$$get(namespaceObj, null, null, 'importID') : '$$thisp.' + $es4.$$get(namespaceObj, null, null, 'name');
					}
					js += print(translateStatements($es4.$$get(methodConstruct, null, null, 'bodyStatements'), _indent + 1, construct), 0, 0);
					_inNamespacedFunction = false;
				}
				if ($es4.$$get(methodConstruct, null, null, 'isNative') || (!$es4.$$get(methodConstruct, null, null, 'ITERABLEToken') && _fastPropertyAccess && !isCNamespace))
				{
					js += print('}', _indent, 1);
				}
				else
				{
					js += print('})', ($es4.$$get(methodConstruct, null, null, 'isJavaScript')) ? 0 : _indent, 0);
					if ($es4.$$get(methodConstruct, null, null, 'isJavaScript') && getTranslatedTypeName(type))
					{
						js += ', ' + getTranslatedTypeName(type);
					}
					js += print(');', 0, 1);
				}
				downLevel();
			}
			return js;
		}
;

		function translateStaticAccessors($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			_inStaticFunction = true;
			var js = '';

			function getMethodConstructJS($$$$methodConstruct, $$$$type) 
			{
				//set default parameter values
				var methodConstruct = $$$$methodConstruct;
				var type = $$$$type;

				if (!methodConstruct)
				{
					return 'null';
				}
				upLevel();
				var js = '(function (';
				js += translateParameters(methodConstruct, construct);
				js += print(')', 0, 1);
				js += print('{', _indent, ($es4.$$get(methodConstruct, null, null, 'javaScriptString')) ? 0 : 1);
				js += print('if (' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit !== undefined) ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.$$cinit();', _indent + 1, ($es4.$$get(methodConstruct, null, null, 'isJavaScript')) ? 0 : 2);
				js += translateDefaultParameterValues(methodConstruct, construct);
				if ($es4.$$get(methodConstruct, null, null, 'isNative'))
				{
					throw $es4.$$primitive(new (Error)('accessor cannot be native: ' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data')));
				}
				if ($es4.$$get(methodConstruct, null, null, 'isJavaScript'))
				{
					js += $es4.$$get(methodConstruct, null, null, 'javaScriptString');
				}
				else if ($es4.$$get(methodConstruct, null, null, 'UNIMPLEMENTEDToken') && release)
				{
					js += print("throw new Error('" + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + "');", 0, 0);
				}
				else
				{
					if ($es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj', 'isCustom'))
					{
						_inNamespacedFunction = ($es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj', 'importID')) ? $es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj', 'importID') : '$es4.$$thisp.' + $es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj', 'name');
					}
					js += translateStatements($es4.$$get(methodConstruct, null, null, 'bodyStatements'), _indent + 1, construct);
					_inNamespacedFunction = false;
				}
				js += print('})', ($es4.$$get(methodConstruct, null, null, 'javaScriptString')) ? 0 : _indent, 0);
				downLevel();
				return js;
			}
;

			for (var i = 0; i < $es4.$$get(construct, null, null, 'staticAccessorConstructs', 'length'); i++)
			{
				var setterMethodConstruct = $es4.$$get(construct, null, null, 'staticAccessorConstructs', i, 'setter');
				var getterMethodConstruct = $es4.$$get(construct, null, null, 'staticAccessorConstructs', i, 'getter');
				var methodConstruct = setterMethodConstruct || getterMethodConstruct;
				js += print(($es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj', 'isCustom')) ? '//custom namespace accessor' : '//accessor', _indent + 1, 1, (js) ? 1 : 0);
				var namespaceObj = $es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj');
				var namespaceString = ($es4.$$get(namespaceObj, null, null, 'importID')) ? ', ' + $es4.$$get(namespaceObj, null, null, 'importID') : ', ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + '.' + $es4.$$get(namespaceObj, null, null, 'name');
				if ($es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj', 'isCustom'))
				{
					js += print('$es4.$$cnamespace_accessor(\'' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + '\', ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + namespaceString + ', ', _indent + 1, 0);
				}
				else
				{
					js += print('$es4.$$' + $es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj', 'name') + '_accessor(\'' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + '\', ' + $es4.$$get(construct, null, null, 'identifierToken', 'data') + ', ', _indent + 1, 0);
				}
				var type = (getterMethodConstruct) ? $es4.$$get(getterMethodConstruct, null, null, 'identifier', 'type') : $es4.$$get(setterMethodConstruct, null, null, 'identifier', 'type');
				if (!getterMethodConstruct)
				{
					js += '(function ()';
					js += print('{', _indent + 1, 1, 1);
					js += print("throw new Error('attempted access to undefined static getter');", _indent + 2, 0);
					js += print('}), ', _indent + 1, 0, 1);
				}
				else
				{
					js += getMethodConstructJS(getterMethodConstruct, type) + ', ';
				}
				if (!setterMethodConstruct && $es4.$$get(methodConstruct, null, null, 'overrideToken'))
				{
					js += '(function ($$value)';
					js += print('{', _indent + 1, 1, 1);
					js += print("throw new Error('attempted access to undefined static setter');", _indent + 2, 0);
					js += print('})', _indent + 1, 0, 1);
				}
				else
				{
					js += getMethodConstructJS(setterMethodConstruct, type);
				}
				js += print(');', 0, 1);
			}
			_inStaticFunction = false;
			return js;
		}
;

		function translateInstanceAccessors($$$$construct) 
		{
			//set default parameter values
			var construct = $$$$construct;

			var js = '';

			function getMethodConstructJS($$$$methodConstruct, $$$$type) 
			{
				//set default parameter values
				var methodConstruct = $$$$methodConstruct;
				var type = $$$$type;

				if (!methodConstruct)
				{
					return 'null';
				}
				upLevel();
				var js = '(function (';
				js += translateParameters(methodConstruct, construct);
				js += print(')', 0, 1);
				js += print('{', _indent, ($es4.$$get(methodConstruct, null, null, 'javaScriptString')) ? 0 : 1);
				js += translateDefaultParameterValues(methodConstruct, construct);
				if ($es4.$$get(methodConstruct, null, null, 'isNative'))
				{
					throw $es4.$$primitive(new (Error)('accessor cannot be native: ' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data')));
				}
				if ($es4.$$get(methodConstruct, null, null, 'isJavaScript'))
				{
					js += $es4.$$get(methodConstruct, null, null, 'javaScriptString');
				}
				else if ($es4.$$get(methodConstruct, null, null, 'UNIMPLEMENTEDToken') && release)
				{
					js += print("throw new Error('" + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + "');", 0, 0);
				}
				else
				{
					if ($es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj', 'isCustom'))
					{
						_inNamespacedFunction = ($es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj', 'importID')) ? $es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj', 'importID') : '$$thisp.' + $es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj', 'name');
					}
					js += translateStatements($es4.$$get(methodConstruct, null, null, 'bodyStatements'), _indent + 1, construct);
					_inNamespacedFunction = false;
				}
				js += print('})', ($es4.$$get(methodConstruct, null, null, 'javaScriptString')) ? 0 : _indent, 0);
				downLevel();
				return js;
			}
;

			for (var i = 0; i < $es4.$$get(construct, null, null, 'instanceAccessorConstructs', 'length'); i++)
			{
				var setterMethodConstruct = $es4.$$get(construct, null, null, 'instanceAccessorConstructs', i, 'setter');
				var getterMethodConstruct = $es4.$$get(construct, null, null, 'instanceAccessorConstructs', i, 'getter');
				var methodConstruct = setterMethodConstruct || getterMethodConstruct;
				js += print(($es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj', 'isCustom')) ? '//custom namespace accessor' : '//accessor', _indent + 1, 1, (js) ? 1 : 0);
				var namespaceObj = $es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj');
				var namespaceString = ($es4.$$get(namespaceObj, null, null, 'importID')) ? ', ' + $es4.$$get(namespaceObj, null, null, 'importID') : ', $$thisp.' + $es4.$$get(namespaceObj, null, null, 'name');
				if ($es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj', 'isCustom'))
				{
					js += print('$es4.$$cnamespace_accessor(\'' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + '\', $$this, $$thisp' + namespaceString + ', ', _indent + 1, 0);
				}
				else
				{
					js += print('$es4.$$' + $es4.$$get(methodConstruct, null, null, 'identifier', 'namespaceObj', 'name') + '_accessor(\'' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + '\', $$thisp, ', _indent + 1, 0);
				}
				var type = (getterMethodConstruct) ? $es4.$$get(getterMethodConstruct, null, null, 'identifier', 'type') : $es4.$$get(setterMethodConstruct, null, null, 'identifier', 'type');
				if (!getterMethodConstruct && $es4.$$get(methodConstruct, null, null, 'overrideToken'))
				{
					js += '(function ()';
					js += print('{', _indent + 1, 1, 1);
					js += print('return $es4.$$super($$thisp).' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + ';', _indent + 2, 0);
					js += print('}), ', _indent + 1, 0, 1);
				}
				else
				{
					js += getMethodConstructJS(getterMethodConstruct, type) + ', ';
				}
				if (!setterMethodConstruct && $es4.$$get(methodConstruct, null, null, 'overrideToken'))
				{
					js += '(function ($$value)';
					js += print('{', _indent + 1, 1, 1);
					js += print('$es4.$$super($$thisp).' + $es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') + ' = $$value;', _indent + 2, 0);
					js += print('})', _indent + 1, 0, 1);
				}
				else
				{
					js += getMethodConstructJS(setterMethodConstruct, type);
				}
				js += print(');', 0, 1);
			}
			return js;
		}
;

		function translateParameters($$$$methodConstruct, $$$$construct) 
		{
			//set default parameter values
			var methodConstruct = $$$$methodConstruct;
			var construct = $$$$construct;

			var js = '';
			for (var i = 0; i < $es4.$$get(methodConstruct, null, null, 'parameterConstructs', 'length'); i++)
			{
				var parameterConstruct = $es4.$$get(methodConstruct, null, null, 'parameterConstructs', i);
				js += '$$$$' + $es4.$$get(parameterConstruct, null, null, 'identifierToken', 'data');
				if ((i + 1) < $es4.$$get(methodConstruct, null, null, 'parameterConstructs', 'length'))
				{
					js += ', ';
				}
			}
			return js;
		}
;

		function translateDefaultParameterValues($$$$methodConstruct, $$$$construct) 
		{
			//set default parameter values
			var methodConstruct = $$$$methodConstruct;
			var construct = $$$$construct;

			var js = '';
			for (var i = 0; i < $es4.$$get(methodConstruct, null, null, 'parameterConstructs', 'length'); i++)
			{
				var parameterConstruct = $es4.$$get(methodConstruct, null, null, 'parameterConstructs', i);
				if (!js)
				{
					js += print('//set default parameter values', _indent + 1, 1);
				}
				if ($es4.$$get(parameterConstruct, null, null, 'restToken') || $es4.$$get(parameterConstruct, null, null, 'valueExpression'))
				{
					if ($es4.$$get(parameterConstruct, null, null, 'restToken'))
					{
						js += print('for (var $$i = ' + ($es4.$$get(methodConstruct, null, null, 'parameterConstructs', 'length') - 1) + ', $$length = arguments.length, ' + $es4.$$get(parameterConstruct, null, null, 'identifierToken', 'data') + ' = new Array($$length - ' + ($es4.$$get(methodConstruct, null, null, 'parameterConstructs', 'length') - 1) + '); $$i < $$length; $$i += 1) ' + $es4.$$get(parameterConstruct, null, null, 'identifierToken', 'data') + '[$$i - ' + ($es4.$$get(methodConstruct, null, null, 'parameterConstructs', 'length') - 1) + '] = arguments[$$i];', _indent + 1, 1);
					}
					else if ($es4.$$get(parameterConstruct, null, null, 'valueExpression'))
					{
						var coerceType = getTranslatedTypeName($es4.$$get(parameterConstruct, null, null, 'identifier', 'type'));
						if (coerceType)
						{
							js += print('var ' + $es4.$$get(parameterConstruct, null, null, 'identifierToken', 'data') + ' = (' + i + ' > arguments.length - 1) ? ' + translateExpression($es4.$$get(parameterConstruct, null, null, 'valueExpression'), 0, false, construct) + ' : $es4.$$coerce($$$$' + $es4.$$get(parameterConstruct, null, null, 'identifierToken', 'data') + ', ' + coerceType + ');', _indent + 1, 1);
						}
						else
						{
							js += print('var ' + $es4.$$get(parameterConstruct, null, null, 'identifierToken', 'data') + ' = (' + i + ' > arguments.length - 1) ? ' + translateExpression($es4.$$get(parameterConstruct, null, null, 'valueExpression'), 0, false, construct) + ' : $$$$' + $es4.$$get(parameterConstruct, null, null, 'identifierToken', 'data') + ';', _indent + 1, 1);
						}
					}
				}
				else
				{
					var coerceType = getTranslatedTypeName($es4.$$get(parameterConstruct, null, null, 'identifier', 'type'));
					if (coerceType)
					{
						js += print('var ' + $es4.$$get(parameterConstruct, null, null, 'identifierToken', 'data') + ' = $es4.$$coerce($$$$' + $es4.$$get(parameterConstruct, null, null, 'identifierToken', 'data') + ', ' + coerceType + ');', _indent + 1, 1);
					}
					else
					{
						js += print('var ' + $es4.$$get(parameterConstruct, null, null, 'identifierToken', 'data') + ' = $$$$' + $es4.$$get(parameterConstruct, null, null, 'identifierToken', 'data') + ';', _indent + 1, 1);
					}
				}
			}
			if (js)
			{
				js += print('', 0, 1);
			}
			return js;
		}
;

		function translateStatements($$$$statements, $$$$indent, $$$$construct) 
		{
			//set default parameter values
			var statements = $$$$statements;
			var indent = $$$$indent;
			var construct = $$$$construct;

			if (!indent)
			{
				indent = _indent;
			}
			else
			{
				indent--;
			}
			var js = '';
			for (var i = 0; i < $es4.$$get(statements, null, null, 'length'); i++)
			{
				var statement = $es4.$$get(statements, null, null, i);
				if (i != 0 && $es4.$$get(statements, null, null, i - 1, 'constructor') != $es4.$$get(Construct, null, null, 'FunctionExpression') && $es4.$$get(statements, null, null, i, 'constructor') == $es4.$$get(Construct, null, null, 'FunctionExpression'))
				{
					js += '\n';
				}
				js += translateStatement(statement, indent + 1, false, construct);
				if (i + 1 < $es4.$$get(statements, null, null, 'length') && $es4.$$get(statement, null, null, 'constructor') == 'FunctionExpression')
				{
					js += '\n';
				}
			}
			return js;
		}
;

		function translateStatement($$$$statement, $$$$_indent, $$$$inline, $$$$construct) 
		{
			//set default parameter values
			var statement = $$$$statement;
			var _indent = $$$$_indent;
			var inline = $$$$inline;
			var construct = $$$$construct;

			if (!construct)
			{
				throw $es4.$$primitive(new (Error)('construct null in translate statement'));
			}
			var js = '';
			switch ($es4.$$get(statement, null, null, 'constructor'))
			{
				case $es4.$$get(Construct, null, null, 'EmptyStatement'):
					break;
				case $es4.$$get(Construct, null, null, 'IfStatement'):
					_inIfStatement++;
					js += print('if (' + translateExpression($es4.$$get(statement, null, null, 'conditionExpression'), _indent, false, construct) + ')', _indent, 1);
					js += print('{', _indent, 1);
					js += translateStatements($es4.$$get(statement, null, null, 'bodyStatements'), _indent + 1, construct);
					js += print('}', _indent, 1);
					for (var i = 0; i < $es4.$$get(statement, null, null, 'elseIfStatements', 'length'); i++)
					{
						js += translateStatement($es4.$$get(statement, null, null, 'elseIfStatements', i), _indent, false, construct);
					}
					if ($es4.$$get(statement, null, null, 'elseStatement'))
					{
						js += translateStatement($es4.$$get(statement, null, null, 'elseStatement'), _indent, false, construct);
					}
					_inIfStatement--;
					break;
				case $es4.$$get(Construct, null, null, 'ElseIfStatement'):
					_inIfStatement++;
					js += print('else if (' + translateExpression($es4.$$get(statement, null, null, 'conditionExpression'), _indent, false, construct) + ')', _indent, 1);
					js += print('{', _indent, 1);
					js += translateStatements($es4.$$get(statement, null, null, 'bodyStatements'), _indent + 1, construct);
					js += print('}', _indent, 1);
					_inIfStatement--;
					break;
				case $es4.$$get(Construct, null, null, 'ElseStatement'):
					_inIfStatement++;
					js += print('else', _indent, 1);
					js += print('{', _indent, 1);
					js += translateStatements($es4.$$get(statement, null, null, 'bodyStatements'), _indent + 1, construct);
					js += print('}', _indent, 1);
					_inIfStatement--;
					break;
				case $es4.$$get(Construct, null, null, 'WhileStatement'):
					js += print('while (' + translateExpression($es4.$$get(statement, null, null, 'conditionExpression'), _indent, false, construct) + ')', _indent, 1);
					js += print('{', _indent, 1);
					js += translateStatements($es4.$$get(statement, null, null, 'bodyStatements'), _indent + 1, construct);
					js += print('}', _indent, 1);
					break;
				case $es4.$$get(Construct, null, null, 'DoWhileStatement'):
					js += print('do', _indent, 1);
					js += print('{', _indent, 1);
					js += translateStatements($es4.$$get(statement, null, null, 'bodyStatements'), _indent + 1, construct);
					js += print('}', _indent, 1);
					js += print('while (' + translateExpression($es4.$$get(statement, null, null, 'conditionExpression'), _indent, false, construct) + ')', _indent, 1);
					break;
				case $es4.$$get(Construct, null, null, 'ForStatement'):
					js += print('for (', _indent, 0);
					if ($es4.$$get(statement, null, null, 'variableStatement'))
					{
						js += translateStatement($es4.$$get(statement, null, null, 'variableStatement'), 0, true, construct);
					}
					js += ';';
					if ($es4.$$get(statement, null, null, 'conditionExpression'))
					{
						js += ' ' + translateExpression($es4.$$get(statement, null, null, 'conditionExpression'), _indent, false, construct);
					}
					js += ';';
					if ($es4.$$get(statement, null, null, 'afterthoughtExpression'))
					{
						js += ' ' + translateExpression($es4.$$get(statement, null, null, 'afterthoughtExpression'), _indent, false, construct);
					}
					js += ')\n';
					js += print('{', _indent, 1);
					js += translateStatements($es4.$$get(statement, null, null, 'bodyStatements'), _indent + 1, construct);
					js += print('}', _indent, 1);
					break;
				case $es4.$$get(Construct, null, null, 'ForEachStatement'):
					_count++;
					var object = translateExpression($es4.$$get(statement, null, null, 'arrayExpression'), _indent, false, construct);
					var index = '$$i' + _count;
					if (_dynamicPropertyAccess)
					{
						js += print('for (var ' + index + ' = (' + object + ' || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); ' + index + ' != 0; ' + index + ' = ' + object + '.$$nextNameIndex(' + index + '))', _indent, 1);
					}
					else
					{
						js += print('for (var ' + index + ' in ' + object + ')', _indent, 1);
					}
					js += print('{', _indent, 1);
					var valueJS = '';
					if (_dynamicPropertyAccess)
					{
						valueJS += object + '.$$nextValue(' + index + ')';
					}
					else
					{
						valueJS += object + '[' + index + ']';
					}
					var typeString = getTranslatedTypeName($es4.$$get(statement, null, null, 'variableStatement', 'identifier', 'type'));
					if (typeString)
					{
						js += print(translateStatement($es4.$$get(statement, null, null, 'variableStatement'), 0, true, construct) + ' = $es4.$$coerce(' + valueJS + ', ' + typeString + ');', _indent + 1, 2);
					}
					else
					{
						js += print(translateStatement($es4.$$get(statement, null, null, 'variableStatement'), 0, true, construct) + ' = ' + valueJS + ';', _indent + 1, 2);
					}
					js += translateStatements($es4.$$get(statement, null, null, 'bodyStatements'), _indent + 1, construct);
					js += print('}', _indent, 1);
					break;
				case $es4.$$get(Construct, null, null, 'ForInStatement'):
					_count++;
					var object = translateExpression($es4.$$get(statement, null, null, 'objectExpression'), _indent, false, construct);
					var index = '$$i' + _count;
					if (_dynamicPropertyAccess)
					{
						js += print('for (var ' + index + ' = (' + object + ' || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); ' + index + ' != 0; ' + index + ' = ' + object + '.$$nextNameIndex(' + index + '))', _indent, 1);
					}
					else
					{
						js += print('for (' + translateStatement($es4.$$get(statement, null, null, 'variableStatement'), 0, true, construct) + ' in ' + translateExpression($es4.$$get(statement, null, null, 'objectExpression'), _indent, false, construct) + ')', _indent, 1);
					}
					js += print('{', _indent, 1);
					if (_dynamicPropertyAccess)
					{
						valueJS = object + '.$$nextName(' + index + ')';
						var typeString = getTranslatedTypeName($es4.$$get(statement, null, null, 'variableStatement', 'identifier', 'type'));
						if (typeString)
						{
							js += print(translateStatement($es4.$$get(statement, null, null, 'variableStatement'), 0, true, construct) + ' = $es4.$$coerce(' + valueJS + ', ' + typeString + ');', _indent + 1, 2);
						}
						else
						{
							js += print(translateStatement($es4.$$get(statement, null, null, 'variableStatement'), 0, true, construct) + ' = ' + valueJS + ';', _indent + 1, 2);
						}
					}
					js += translateStatements($es4.$$get(statement, null, null, 'bodyStatements'), _indent + 1, construct);
					js += print('}', _indent, 1);
					break;
				case $es4.$$get(Construct, null, null, 'BreakStatement'):
					js += print('break', _indent, 0);
					if ($es4.$$get(statement, null, null, 'identifierToken'))
					{
						js += ' ' + $es4.$$get(statement, null, null, 'identifierToken', 'data');
					}
					js += ';\n';
					break;
				case $es4.$$get(Construct, null, null, 'ContinueStatement'):
					js += print('continue', _indent, 0);
					if ($es4.$$get(statement, null, null, 'identifierToken'))
					{
						js += ' ' + $es4.$$get(statement, null, null, 'identifierToken', 'data');
					}
					js += ';\n';
					break;
				case $es4.$$get(Construct, null, null, 'ThrowStatement'):
					js += print('throw', _indent, 0);
					if ($es4.$$get(statement, null, null, 'expression'))
					{
						js += ' ' + translateExpression($es4.$$get(statement, null, null, 'expression'), _indent, false, construct);
					}
					js += ';\n';
					break;
				case $es4.$$get(Construct, null, null, 'TryStatement'):
					js += print('try', _indent, 1);
					js += print('{', _indent, 1);
					js += translateStatements($es4.$$get(statement, null, null, 'bodyStatements'), _indent + 1, construct);
					js += print('}', _indent, 1);
					if ($es4.$$get(statement, null, null, 'catchStatements', 'length') == 1)
					{
						js += print('catch (' + $es4.$$get(statement, null, null, 'catchStatements', 0, 'identifierToken', 'data') + ')', _indent, 1);
					}
					else
					{
						js += print('catch ($$error)', _indent, 1);
					}
					js += print('{', _indent, 1);
					for (var i = 0; i < $es4.$$get(statement, null, null, 'catchStatements', 'length'); i++)
					{
						upLevel();
						var catchStatement = $es4.$$get(statement, null, null, 'catchStatements', i);
						var typeName = $es4.$$get(catchStatement, null, null, 'identifier', 'type', 'name');
						if (i == 0 && $es4.$$get(statement, null, null, 'catchStatements', 'length') == 1)
						{
							if (typeName == 'void' || typeName == 'Error')
							{
								js += translateStatements($es4.$$get(catchStatement, null, null, 'bodyStatements'), _indent + 1, construct);
							}
							else
							{
								js += print('if ($es4.$$is(' + $es4.$$get(catchStatement, null, null, 'identifierToken', 'data') + ', ' + getTranslatedTypeName($es4.$$get(catchStatement, null, null, 'identifier', 'type')) + '))', _indent + 1, 1);
								js += print('{', _indent + 1, 1);
								js += translateStatements($es4.$$get(catchStatement, null, null, 'bodyStatements'), _indent + 2, construct);
								js += print('}', _indent + 1, 1);
							}
							downLevel();
							break;
						}
						if (typeName == 'void' || typeName == 'Error')
						{
							js += print('else', _indent + 1, 1);
							js += print('{', _indent + 1, 1);
							js += print('var ' + $es4.$$get(catchStatement, null, null, 'identifierToken', 'data') + ' = $$error;', _indent + 2, 1);
							js += translateStatements($es4.$$get(catchStatement, null, null, 'bodyStatements'), _indent + 2, construct);
							js += print('}', _indent + 1, 1);
							downLevel();
							break;
						}
						js += print(((i == 0) ? 'if' : 'else if') + ' ($es4.$$is($$error, ' + typeName + '))', _indent + 1, 1);
						js += print('{', _indent + 1, 1);
						js += print('var ' + $es4.$$get(catchStatement, null, null, 'identifierToken', 'data') + ' = $$error;', _indent + 2, 1);
						js += translateStatements($es4.$$get(catchStatement, null, null, 'bodyStatements'), _indent + 2, construct);
						js += print('}', _indent + 1, 1);
						downLevel();
					}
					js += print('}', _indent, 1);
					if ($es4.$$get(statement, null, null, 'finallyStatement'))
					{
						js += print('finally', _indent, 1);
						js += print('{', _indent, 1);
						js += translateStatements($es4.$$get(statement, null, null, 'finallyStatement', 'bodyStatements'), _indent + 1, construct);
						js += print('}', _indent, 1);
					}
					break;
				case $es4.$$get(Construct, null, null, 'UseStatement'):
					break;
				case $es4.$$get(Construct, null, null, 'VarStatement'):
					var translateVarValueExpression = function ($$$$statement) 
					{
				//set default parameter values
				var statement = $$$$statement;

						var valueJS = translateExpression($es4.$$get(statement, null, null, 'valueExpression'), _indent, false, construct);
						var typeString = getTranslatedTypeName($es4.$$get(statement, null, null, 'identifier', 'type'));
						if (isCoerceRequired(statement, typeString, valueJS))
						{
							valueJS = '$es4.$$coerce(' + valueJS + ', ' + typeString + ')';
						}
						return ' = ' + valueJS;
					}
;
					js += print('var ' + $es4.$$get(statement, null, null, 'identifierToken', 'data'), _indent, 0);
					if ($es4.$$get(statement, null, null, 'valueExpression'))
					{
						js += translateVarValueExpression(statement);
					}
					for (var i = 0; i < $es4.$$get(statement, null, null, 'innerVarStatements', 'length'); i++)
					{
						var innerVarStatement = $es4.$$get(statement, null, null, 'innerVarStatements', i);
						js += ', ' + $es4.$$get(innerVarStatement, null, null, 'identifierToken', 'data');
						if ($es4.$$get(innerVarStatement, null, null, 'valueExpression'))
						{
							js += translateVarValueExpression(innerVarStatement);
						}
					}
					if (!inline)
					{
						js += ';\n';
					}
					break;
				case $es4.$$get(Construct, null, null, 'SwitchStatement'):
					js += print('switch (' + translateExpression($es4.$$get(statement, null, null, 'valueExpression'), _indent, false, construct) + ')', _indent, 1);
					js += print('{', _indent, 1);
					for (var i = 0; i < $es4.$$get(statement, null, null, 'caseStatements', 'length'); i++)
					{
						js += translateStatement($es4.$$get(statement, null, null, 'caseStatements', i), _indent + 1, false, construct);
					}
					js += print('}', _indent, 1);
					break;
				case $es4.$$get(Construct, null, null, 'CaseStatement'):
					if ($es4.$$get(statement, null, null, 'defaultToken'))
					{
						js += print('default:', _indent, 1);
					}
					else
					{
						js += print('case ' + translateExpression($es4.$$get(statement, null, null, 'valueExpression'), _indent, false, construct) + ':', _indent, 1);
					}
					js += translateStatements($es4.$$get(statement, null, null, 'bodyStatements'), _indent + 1, construct);
					break;
				case $es4.$$get(Construct, null, null, 'LabelStatement'):
					js += print($es4.$$get(statement, null, null, 'identifierToken', 'data') + ':', _indent, 0);
					break;
				default:
					if (inline)
					{
						js += print(translateExpression(statement, _indent, false, construct), _indent, 0);
					}
					else
					{
						js += print(translateExpression(statement, _indent, false, construct) + ';', _indent, 1);
					}
			}
			return js;
		}
;

		function translateExpression($$$$expression, $$$$_indent, $$$$toString, $$$$construct, $$$$operator, $$$$expressionString) 
		{
			//set default parameter values
			var expression = $$$$expression;
			var _indent = $$$$_indent;
			var toString = $$$$toString;
			var construct = $$$$construct;
			var operator = (4 > arguments.length - 1) ? null : $$$$operator;
			var expressionString = (5 > arguments.length - 1) ? null : $$$$expressionString;

			if (!construct)
			{
				throw $es4.$$primitive(new (Error)('construct null in translate expression'));
			}
			if (!_indent)
			{
				_indent = 0;
			}
			var js = '';
			outerSwitch:			switch ($es4.$$get(expression, null, null, 'constructor'))
			{
				case $es4.$$get(Construct, null, null, 'ParenExpression'):
					js += '(' + translateExpression($es4.$$get(expression, null, null, 'expression'), _indent, toString, construct, operator, expressionString) + ')';
					break;
				case $es4.$$get(Construct, null, null, 'PropertyExpression'):
					if (_dynamicPropertyAccess)
					{
						js += translatePropertyExpressionDynamic(expression, toString, expressionString, operator, construct);
					}
					else
					{
						js += translatePropertyExpression(expression, toString, construct);
					}
					break;
				case $es4.$$get(Construct, null, null, 'NumberExpression'):
					js += $es4.$$get(expression, null, null, 'numberToken', 'data');
					break;
				case $es4.$$get(Construct, null, null, 'StringExpression'):
					if (toString && $es4.$$get(expression, null, null, 'stringToken', 'data') == "'")
					{
						js += '\\' + $es4.$$get(expression, null, null, 'stringToken', 'data');
					}
					else
					{
						js += $es4.$$get(expression, null, null, 'stringToken', 'data');
					}
					for (var i = 0; i < $es4.$$get(expression, null, null, 'stringChunkTokens', 'length'); i++)
					{
						js += $es4.$$get(expression, null, null, 'stringChunkTokens', i, 'data');
						if (i + 1 < $es4.$$get(expression, null, null, 'stringChunkTokens', 'length'))
						{
							js += '\n';
						}
					}
					if (toString && $es4.$$get(expression, null, null, 'stringToken', 'data') == "'")
					{
						js += '\\' + $es4.$$get(expression, null, null, 'stringToken', 'data');
					}
					else
					{
						js += $es4.$$get(expression, null, null, 'stringToken', 'data');
					}
					break;
				case $es4.$$get(Construct, null, null, 'ReturnExpression'):
					js += 'return';
					if ($es4.$$get(expression, null, null, 'expression'))
					{
						var typeName = getTranslatedTypeName($es4.$$get(expression, null, null, 'expectedType'));
						var valueJS = translateExpression($es4.$$get(expression, null, null, 'expression'), 0, toString, construct);
						if (typeName && isCoerceRequired(expression, typeName, valueJS))
						{
							js += ' $es4.$$coerce(' + valueJS + ', ' + typeName + ')';
						}
						else
						{
							js += ' ' + valueJS;
						}
					}
					break;
				case $es4.$$get(Construct, null, null, 'DeleteExpression'):
					if (_dynamicPropertyAccess)
					{
						js += translatePropertyExpressionDynamic($es4.$$get(expression, null, null, 'expression'), toString, undefined, undefined, construct, true);
					}
					else
					{
						js += 'delete ' + translateExpression($es4.$$get(expression, null, null, 'expression'), 0, toString, construct);
					}
					break;
				case $es4.$$get(Construct, null, null, 'FunctionExpression'):
					upLevel();
					var wasInClosure = _inClosure;
					_inClosure = true;
					if (!$es4.$$get(expression, null, null, 'identifierToken'))
					{
						js += print('function (', 0, 0);
					}
					else
					{
						if (_inIfStatement)
						{
							throw $es4.$$primitive(new (Error)('support for named closures in if/elseif/else statements is not supported at this time.'));
						}
						js += print('function ' + $es4.$$get(expression, null, null, 'identifierToken', 'data') + '(', 0, 0);
					}
					js += translateParameters(expression, construct);
					js += print(') ', 0, 1);
					js += print('{', _indent, 1);
					js += translateDefaultParameterValues(expression, construct);
					js += translateStatements($es4.$$get(expression, null, null, 'bodyStatements'), _indent + 1, construct);
					js += print('}', _indent, 1);
					if (!wasInClosure)
					{
						_inClosure = false;
					}
					downLevel();
					break;
				case $es4.$$get(Construct, null, null, 'ObjectExpression'):
					js += '{';
					for (var i = 0; i < $es4.$$get(expression, null, null, 'objectPropertyConstructs', 'length'); i++)
					{
						var prop;
						if ($es4.$$get(expression, null, null, 'objectPropertyConstructs', i, 'expression', 'constructor') == $es4.$$get(Construct, null, null, 'PropertyExpression'))
						{
							prop = $es4.$$get(expression, null, null, 'objectPropertyConstructs', i, 'expression', 'construct', 'identifierToken', 'data');
						}
						else
						{
							prop = translateExpression($es4.$$get(expression, null, null, 'objectPropertyConstructs', i, 'expression'), 0, toString, construct);
						}
						js += prop + ':' + translateExpression($es4.$$get(expression, null, null, 'objectPropertyConstructs', i, 'valueExpression'), 0, toString, construct);
						if ((i + 1) < $es4.$$get(expression, null, null, 'objectPropertyConstructs', 'length'))
						{
							js += ', ';
						}
					}
					js += '}';
					break;
				case $es4.$$get(Construct, null, null, 'ArrayExpression'):
					js += '[';
					for (var i = 0; i < $es4.$$get(expression, null, null, 'valueExpressions', 'length'); i++)
					{
						if (!$es4.$$get(expression, null, null, 'valueExpressions', i))
						{
							trace('invalid 20');
						}
						js += translateExpression($es4.$$get(expression, null, null, 'valueExpressions', i), 0, toString, construct);
						if ((i + 1) < $es4.$$get(expression, null, null, 'valueExpressions', 'length'))
						{
							js += ', ';
						}
					}
					js += ']';
					break;
				case $es4.$$get(Construct, null, null, 'BooleanExpression'):
					js += $es4.$$get(expression, null, null, 'booleanToken', 'data');
					break;
				case $es4.$$get(Construct, null, null, 'Expression'):
					if ($es4.$$get(expression, null, null, 'token', 'type') == $es4.$$get(Token, null, null, 'TypeofTokenType'))
					{
						if (!$es4.$$get(expression, null, null, 'expression'))
						{
							trace('invalid 21');
						}
						js += '$es4.$$typeof(' + translateExpression($es4.$$get(expression, null, null, 'expression'), 0, toString, construct) + ')';
						break;
					}
					if ($es4.$$get(expression, null, null, 'token', 'type') == $es4.$$get(Token, null, null, 'VoidTokenType'))
					{
						if ($es4.$$get(expression, null, null, 'expression', 'constructor') == $es4.$$get(Construct, null, null, 'EmptyExpression'))
						{
							js += 'void 0';
						}
						else
						{
							if (!$es4.$$get(expression, null, null, 'expression'))
							{
								trace('invalid 01');
							}
							js += 'void ' + translateExpression($es4.$$get(expression, null, null, 'expression'), 0, toString, construct);
						}
						break;
					}
					js += $es4.$$get(expression, null, null, 'token', 'data');
					if ($es4.$$get(expression, null, null, 'expression'))
					{
						if (!$es4.$$get(expression, null, null, 'expression'))
						{
							trace('invalid 22');
						}
						js += translateExpression($es4.$$get(expression, null, null, 'expression'), 0, toString, construct);
					}
					break;
				case $es4.$$get(Construct, null, null, 'XMLExpression'):
					js += 'new XML(\'' + $es4.$$get(expression, null, null, 'string') + '\')';
					break;
				case $es4.$$get(Construct, null, null, 'XMLListExpression'):
					js += 'new XMLList(\'' + $es4.$$get(expression, null, null, 'string') + '\')';
					break;
				case $es4.$$get(Construct, null, null, 'EmptyExpression'):
					break;
				case $es4.$$get(Construct, null, null, 'RegExpression'):
					js += $es4.$$get(expression, null, null, 'string');
					break;
				case $es4.$$get(Construct, null, null, 'PrefixExpression'):
					if (_dynamicPropertyAccess)
					{
						js += translatePropertyExpressionDynamic($es4.$$get(expression, null, null, 'expression'), toString, '\'prefix\'', ($es4.$$get(expression, null, null, 'decrementToken')) ? '--' : '++', construct);
					}
					else
					{
						if (!$es4.$$get(expression, null, null, 'expression'))
						{
							trace('invalid 25');
						}
						js += (($es4.$$get(expression, null, null, 'decrementToken')) ? '--' : '++') + translateExpression($es4.$$get(expression, null, null, 'expression'), 0, toString, construct);
					}
					break;
				case $es4.$$get(Construct, null, null, 'PostfixExpression'):
					if (_dynamicPropertyAccess)
					{
						js += translatePropertyExpressionDynamic($es4.$$get(expression, null, null, 'expression'), toString, '\'postfix\'', ($es4.$$get(expression, null, null, 'decrementToken')) ? '--' : '++', construct);
					}
					else
					{
						if (!$es4.$$get(expression, null, null, 'expression'))
						{
							trace('invalid 26');
						}
						js += translateExpression($es4.$$get(expression, null, null, 'expression'), 0, toString, construct) + (($es4.$$get(expression, null, null, 'decrementToken')) ? '--' : '++');
					}
					break;
				case $es4.$$get(Construct, null, null, 'NewExpression'):
					if (_dynamicPropertyAccess)
					{
						if ($es4.$$get(expression, null, null, 'expression', 'constructor') == $es4.$$get(Construct, null, null, 'ParenExpression'))
						{
							if (!$es4.$$get(expression, null, null, 'expression'))
							{
								trace('invalid 02');
							}
							js += '$es4.$$primitive(new ' + translateExpression($es4.$$get(expression, null, null, 'expression'), 0, toString, construct) + ')';
						}
						else
						{
							js += translatePropertyExpressionDynamic($es4.$$get(expression, null, null, 'expression'), toString, null, null, construct, null, true);
						}
					}
					else
					{
						if (!$es4.$$get(expression, null, null, 'expression'))
						{
							trace('invalid 03');
						}
						js += '$es4.$$primitive(new ' + translateExpression($es4.$$get(expression, null, null, 'expression'), 0, toString, construct) + ')';
					}
					break;
				case $es4.$$get(Construct, null, null, 'BinaryExpression'):
					if ($es4.$$get(expression, null, null, 'token', 'type') == $es4.$$get(Token, null, null, 'IsTokenType'))
					{
						if (!$es4.$$get(expression, null, null, 'leftExpression'))
						{
							trace('invalid 04');
						}
						if (!$es4.$$get(expression, null, null, 'rightExpression'))
						{
							trace('invalid 05');
						}
						js += '$es4.$$is(' + translateExpression($es4.$$get(expression, null, null, 'leftExpression'), 0, toString, construct) + ', ' + translateExpression($es4.$$get(expression, null, null, 'rightExpression'), 0, toString, construct) + ')';
						break;
					}
					if ($es4.$$get(expression, null, null, 'token', 'type') == $es4.$$get(Token, null, null, 'InstanceofTokenType'))
					{
						if (!$es4.$$get(expression, null, null, 'leftExpression'))
						{
							trace('invalid 06');
						}
						if (!$es4.$$get(expression, null, null, 'rightExpression'))
						{
							trace('invalid 07');
						}
						js += '$es4.$$instanceof(' + translateExpression($es4.$$get(expression, null, null, 'leftExpression'), 0, toString, construct) + ', ' + translateExpression($es4.$$get(expression, null, null, 'rightExpression'), 0, toString, construct) + ')';
						break;
					}
					if ($es4.$$get(expression, null, null, 'token', 'type') == $es4.$$get(Token, null, null, 'AsTokenType'))
					{
						if (!$es4.$$get(expression, null, null, 'leftExpression'))
						{
							trace('invalid 08');
						}
						if (!$es4.$$get(expression, null, null, 'rightExpression'))
						{
							trace('invalid 09');
						}
						js += '$es4.$$as(' + translateExpression($es4.$$get(expression, null, null, 'leftExpression'), 0, toString, construct) + ', ' + translateExpression($es4.$$get(expression, null, null, 'rightExpression'), 0, toString, construct) + ')';
						break;
					}
					innerSwitch:					switch ($es4.$$get(expression, null, null, 'token', 'type'))
					{
						case $es4.$$get(Token, null, null, 'BitwiseLeftShiftAssignmentTokenType'):
						case $es4.$$get(Token, null, null, 'BitwiseUnsignedRightShiftAssignmentTokenType'):
						case $es4.$$get(Token, null, null, 'BitwiseRightShiftAssignmentTokenType'):
						case $es4.$$get(Token, null, null, 'AddWithAssignmentTokenType'):
						case $es4.$$get(Token, null, null, 'DivWithAssignmentTokenType'):
						case $es4.$$get(Token, null, null, 'ModWithAssignmentTokenType'):
						case $es4.$$get(Token, null, null, 'MulWithAssignmentTokenType'):
						case $es4.$$get(Token, null, null, 'SubWithAssignmentTokenType'):
						case $es4.$$get(Token, null, null, 'AssignmentTokenType'):
						case $es4.$$get(Token, null, null, 'AndWithAssignmentTokenType'):
						case $es4.$$get(Token, null, null, 'OrWithAssignmentTokenType'):
						case $es4.$$get(Token, null, null, 'BitwiseAndAssignmentTokenType'):
						case $es4.$$get(Token, null, null, 'BitwiseOrAssignmentTokenType'):
						case $es4.$$get(Token, null, null, 'BitwiseXorAssignmentTokenType'):
							var leftExpression = $es4.$$get(expression, null, null, 'leftExpression');
							while ($es4.$$get(leftExpression, null, null, 'constructor') == $es4.$$get(Construct, null, null, 'ParenExpression'))
							{
								leftExpression = $es4.$$get(leftExpression, null, null, 'expression');
							}
							var innerOperator = $es4.$$get(expression, null, null, 'token', 'data');
							var innerExpressionString = '';
							while ($es4.$$get(leftExpression, null, null, 'constructor') == $es4.$$get(Construct, null, null, 'BinaryExpression'))
							{
								$es4.$$set(expression, null, null, 'leftExpression', $es4.$$get(leftExpression, null, null, 'rightExpression'), '=');
								if (!innerExpressionString)
								{
									if (!expression)
									{
										trace('invalid 10');
									}
									innerExpressionString = translateExpression(expression, _indent, toString, construct);
								}
								else
								{
									if (!$es4.$$get(expression, null, null, 'leftExpression'))
									{
										trace('invalid 11');
									}
									if (_dynamicPropertyAccess)
									{
										innerExpressionString = translateExpression($es4.$$get(expression, null, null, 'leftExpression'), _indent, toString, construct, innerOperator, innerExpressionString);
									}
									else
									{
										innerExpressionString = translateExpression($es4.$$get(expression, null, null, 'leftExpression'), _indent, toString, construct) + ' ' + innerOperator + ' ' + innerExpressionString;
									}
								}
								expression = leftExpression;
								innerOperator = $es4.$$get(expression, null, null, 'token', 'data');
								leftExpression = $es4.$$get(expression, null, null, 'leftExpression');
							}
							var typeString;
							if (!$es4.$$get(leftExpression, null, null, 'nextPropertyExpression') && $es4.$$get(leftExpression, null, null, 'construct') && $es4.$$get(leftExpression, null, null, 'construct', 'constructor') == $es4.$$get(Construct, null, null, 'IdentifierConstruct'))
							{
								var identifier = $es4.$$get(leftExpression, null, null, 'construct', 'identifier');
								typeString = ($es4.$$get(identifier, null, null, 'isVar') && $es4.$$get(identifier, null, null, 'type')) ? getTranslatedTypeName($es4.$$get(identifier, null, null, 'type')) : '';
							}
							if (_dynamicPropertyAccess)
							{
								if (!innerExpressionString)
								{
									if (!$es4.$$get(expression, null, null, 'rightExpression'))
									{
										trace('invalid 12');
									}
									innerExpressionString = translateExpression($es4.$$get(expression, null, null, 'rightExpression'), 0, toString, construct);
								}
								if (typeString && isCoerceRequired(leftExpression, typeString, innerExpressionString))
								{
									js += translatePropertyExpressionDynamic(leftExpression, toString, '$es4.$$coerce(' + innerExpressionString + ', ' + typeString + ')', innerOperator, construct);
								}
								else
								{
									js += translatePropertyExpressionDynamic(leftExpression, toString, innerExpressionString, innerOperator, construct);
								}
							}
							else
							{
								if (!$es4.$$get(expression, null, null, 'leftExpression'))
								{
									trace('invalid 13');
								}
								js += translateExpression(leftExpression, 0, toString, construct);
								if (!innerExpressionString)
								{
									if (!$es4.$$get(expression, null, null, 'rightExpression'))
									{
										trace('invalid 14');
									}
									innerExpressionString = translateExpression($es4.$$get(expression, null, null, 'rightExpression'), 0, toString, construct);
								}
								if (typeString && isCoerceRequired(leftExpression, typeString, innerExpressionString))
								{
									js += ' ' + innerOperator + ' $es4.$$coerce(' + innerExpressionString + ', ' + typeString + ')';
								}
								else
								{
									js += ' ' + innerOperator + ' ' + innerExpressionString;
								}
							}
							break outerSwitch;
					}
					if (!$es4.$$get(expression, null, null, 'leftExpression'))
					{
						trace('invalid 15');
					}
					if (!$es4.$$get(expression, null, null, 'rightExpression'))
					{
						trace('invalid 16');
					}
					js += translateExpression($es4.$$get(expression, null, null, 'leftExpression'), 0, toString, construct) + ' ' + $es4.$$get(expression, null, null, 'token', 'data') + ' ' + translateExpression($es4.$$get(expression, null, null, 'rightExpression'), 0, toString, construct);
					break;
				case $es4.$$get(Construct, null, null, 'TernaryExpression'):
					if (!$es4.$$get(expression, null, null, 'trueExpression'))
					{
						trace('invalid 34');
					}
					if (!$es4.$$get(expression, null, null, 'conditionExpression'))
					{
						trace('invalid 35');
					}
					if (!$es4.$$get(expression, null, null, 'falseExpression'))
					{
						trace('invalid 36');
					}
					js += translateExpression($es4.$$get(expression, null, null, 'conditionExpression'), 0, toString, construct) + ' ? ' + translateExpression($es4.$$get(expression, null, null, 'trueExpression'), 0, toString, construct) + ' : ' + translateExpression($es4.$$get(expression, null, null, 'falseExpression'), 0, toString, construct);
					break;
				default:
					throw $es4.$$primitive(new (Error)('Unexpected expression found: ' + $es4.$$get(expression, null, null, 'constructor')));
			}
			return js;
		}
;

		function translatePropertyExpression($$$$expression, $$$$toString, $$$$construct) 
		{
			//set default parameter values
			var expression = $$$$expression;
			var toString = $$$$toString;
			var construct = $$$$construct;

			var js = '';
			if (!$es4.$$get(expression, null, null, 'construct'))
			{
				throw $es4.$$primitive(new (Error)('invalid expression passed to translatePropertyExpression: ' + $es4.$$get(expression, null, null, 'constructor')));
			}
			var identifier;
			var namespaceIdentifier;
			switch ($es4.$$get(expression, null, null, 'construct', 'constructor'))
			{
				case $es4.$$get(Construct, null, null, 'SuperConstruct'):
				case $es4.$$get(Construct, null, null, 'ThisConstruct'):
				case $es4.$$get(Construct, null, null, 'IdentifierConstruct'):
					identifier = $es4.$$get(expression, null, null, 'construct', 'identifier');
					break;
				case $es4.$$get(Construct, null, null, 'ParenConstruct'):
				case $es4.$$get(Construct, null, null, 'ArrayConstruct'):
				case $es4.$$get(Construct, null, null, 'ObjectConstruct'):
					break;
				case $es4.$$get(Construct, null, null, 'NamespaceQualifierConstruct'):
					namespaceIdentifier = $es4.$$get(expression, null, null, 'construct', 'namespaceIdentifier');
					identifier = $es4.$$get(expression, null, null, 'construct', 'identifier');
					break;
				default:
					throw $es4.$$primitive(new (Error)('unknown inner property expression: ' + $es4.$$get(expression, null, null, 'construct', 'constructor')));
			}
			var pname;
			var name;
			if (identifier && !namespaceIdentifier && ($es4.$$get(identifier, null, null, 'isProperty') || $es4.$$get(identifier, null, null, 'isMethod')) && !$es4.$$get(identifier, null, null, 'isImport') && $es4.$$get(identifier, null, null, 'namespaceObj', 'isCustom'))
			{
				namespaceIdentifier = $es4.$$get(identifier, null, null, 'namespaceObj', 'identifier');
			}
			if (identifier && namespaceIdentifier)
			{
				var pname = ($es4.$$get(namespaceIdentifier, null, null, 'isStatic')) ? $es4.$$get(namespaceIdentifier, null, null, 'scope', 'name') : '$$this';
				var namespaceObj = $es4.$$get(namespaceIdentifier, null, null, 'namespaceObj');
				var namespaceString = $es4.$$get(namespaceObj, null, null, 'normalizedImportID');
				if ($es4.$$get(namespaceIdentifier, null, null, 'isStatic') && !namespaceString)
				{
					namespaceString = $es4.$$get(namespaceIdentifier, null, null, 'scope', 'name') + '.' + $es4.$$get(namespaceIdentifier, null, null, 'name');
				}
				else if (!namespaceString)
				{
					namespaceString = ($es4.$$get(namespaceIdentifier, null, null, 'namespaceObj') && $es4.$$get(namespaceIdentifier, null, null, 'namespaceObj', 'isPrivate') ? '$$thisp.' : '$$this.') + $es4.$$get(namespaceIdentifier, null, null, 'name');
				}
				pname += '.$$namespace(' + namespaceString + ')';
				name = $es4.$$get(identifier, null, null, 'name');
			}
			else if (identifier)
			{
				name = $es4.$$get(identifier, null, null, 'name');
				if ($es4.$$get(identifier, null, null, 'isStatic') && !$es4.$$get(identifier, null, null, 'isImport') && !$es4.$$get(identifier, null, null, 'isNative'))
				{
					pname = $es4.$$get(identifier, null, null, 'scope', 'name');
				}
				else if ($es4.$$get(identifier, null, null, 'isPrivate') && !$es4.$$get(identifier, null, null, 'isImport'))
				{
					pname = '$$thisp';
				}
				else if (($es4.$$get(identifier, null, null, 'isProperty') || $es4.$$get(identifier, null, null, 'isMethod')) && !$es4.$$get(identifier, null, null, 'isImport'))
				{
					pname = '$$this';
				}
				else if ($es4.$$get(identifier, null, null, 'isPackage'))
				{
					name = '$es4.$$[\'' + $es4.$$get(identifier, null, null, 'name');
					var packageName = $es4.$$get(identifier, null, null, 'name');
					var tempInnerExpression = expression;
					var lastExpression = tempInnerExpression;
					while (tempInnerExpression = $es4.$$get(tempInnerExpression, null, null, 'nextPropertyExpression'))
					{
						if ($es4.$$get(_rootConstructs, null, null, packageName + '.' + $es4.$$get(tempInnerExpression, null, null, 'construct', 'identifierToken', 'data')))
						{
							expression = lastExpression;
							break;
						}
						packageName += '.' + $es4.$$get(tempInnerExpression, null, null, 'construct', 'identifierToken', 'data');
						name += '.' + $es4.$$get(tempInnerExpression, null, null, 'construct', 'identifierToken', 'data');
						lastExpression = tempInnerExpression;
					}
					name += '\']';
				}
				if (name == 'super')
				{
					if (_inNamespacedFunction && $es4.$$get(expression, null, null, 'nextPropertyExpression'))
					{
						name = '$$this.$$namespace(' + _inNamespacedFunction + ', $$this, $es4.$$super($$thisp))';
					}
					else
					{
						name = ($es4.$$get(expression, null, null, 'nextPropertyExpression')) ? '$es4.$$super($$thisp)' : 'this';
					}
				}
				if (name == 'this' && !_inClosure)
				{
					name = '$$this';
				}
			}
			else
			{
				if (!$es4.$$get(expression, null, null, 'construct', 'expression'))
				{
					trace('invalid 37');
				}
				name = translateExpression($es4.$$get(expression, null, null, 'construct', 'expression'), 0, toString, construct);
			}
			js += (!pname) ? name : (pname + '.' + name);
			while (expression = $es4.$$get(expression, null, null, 'nextPropertyExpression'))
			{
				if ($es4.$$get(expression, null, null, 'construct', 'constructor') == $es4.$$get(Construct, null, null, 'DotConstruct') || $es4.$$get(expression, null, null, 'construct', 'constructor') == $es4.$$get(Construct, null, null, 'IdentifierConstruct'))
				{
					if ($es4.$$get(expression, null, null, 'construct', 'constructor') == $es4.$$get(Construct, null, null, 'DotConstruct'))
					{
						js += '.';
					}
					js += $es4.$$get(expression, null, null, 'construct', 'identifierToken', 'data');
				}
				else if ($es4.$$get(expression, null, null, 'construct', 'constructor') == $es4.$$get(Construct, null, null, 'ArrayAccessorConstruct'))
				{
					if (!$es4.$$get(expression, null, null, 'construct', 'expression'))
					{
						trace('invalid 38');
					}
					js += '[' + translateExpression($es4.$$get(expression, null, null, 'construct', 'expression'), 0, toString, construct) + ']';
				}
				else if ($es4.$$get(expression, null, null, 'construct', 'constructor') == $es4.$$get(Construct, null, null, 'NamespaceQualifierConstruct'))
				{
					namespaceIdentifier = $es4.$$get(expression, null, null, 'construct', 'namespaceIdentifier');
					var namespaceObj = $es4.$$get(namespaceIdentifier, null, null, 'namespaceObj');
					var namespaceString = $es4.$$get(namespaceObj, null, null, 'normalizedImportID');
					if ($es4.$$get(namespaceIdentifier, null, null, 'isStatic') && !namespaceString)
					{
						namespaceString = $es4.$$get(namespaceIdentifier, null, null, 'scope', 'name') + '.' + $es4.$$get(namespaceIdentifier, null, null, 'name');
					}
					else if (!namespaceString)
					{
						namespaceString = ($es4.$$get(identifier, null, null, 'isPrivate')) ? '$$thisp.' + $es4.$$get(namespaceIdentifier, null, null, 'name') : '$$this.' + $es4.$$get(namespaceIdentifier, null, null, 'name');
					}
					js += '.$$namespace(' + namespaceString + ').' + $es4.$$get(expression, null, null, 'construct', 'namespaceIdentifierToken', 'data');
				}
				else if ($es4.$$get(expression, null, null, 'construct', 'constructor') == $es4.$$get(Construct, null, null, 'ParenConstruct'))
				{
					if (!$es4.$$get(expression, null, null, 'construct', 'expression'))
					{
						trace('invalid 39');
					}
					js += '(' + translateExpression($es4.$$get(expression, null, null, 'construct', 'expression'), 0, toString, construct) + ')';
				}
				else if ($es4.$$get(expression, null, null, 'construct', 'constructor') == $es4.$$get(Construct, null, null, 'AtIdentifierConstruct'))
				{
					throw $es4.$$primitive(new (Error)('E4X is not supported'));
				}
				if ($es4.$$get(expression, null, null, 'construct', 'constructor') == $es4.$$get(Construct, null, null, 'FunctionCallConstruct') || ($es4.$$get(expression, null, null, 'nextPropertyExpression') && $es4.$$get(expression, null, null, 'nextPropertyExpression', 'construct', 'constructor') == $es4.$$get(Construct, null, null, 'FunctionCallConstruct')))
				{
					var functionCallExpression = ($es4.$$get(expression, null, null, 'construct', 'constructor') == $es4.$$get(Construct, null, null, 'FunctionCallConstruct')) ? expression : $es4.$$get(expression, null, null, 'nextPropertyExpression');
					if (js == '$es4.$$super($$thisp)')
					{
						js += '.$$z';
					}
					js += '(';
					for (var i = 0; i < $es4.$$get(functionCallExpression, null, null, 'construct', 'argumentExpressions', 'length'); i++)
					{
						if (!$es4.$$get(functionCallExpression, null, null, 'construct', 'argumentExpressions', i))
						{
							trace('invalid 40');
						}
						js += translateExpression($es4.$$get(functionCallExpression, null, null, 'construct', 'argumentExpressions', i), 0, toString, construct);
						if ((i + 1) < $es4.$$get(functionCallExpression, null, null, 'construct', 'argumentExpressions', 'length'))
						{
							js += ', ';
						}
					}
					js += ')';
					if ($es4.$$get(expression, null, null, 'nextPropertyExpression'))
					{
						expression = functionCallExpression;
					}
					continue;
				}
			}
			return js;
		}
;

		function translatePropertyExpressionDynamic($$$$expression, $$$$toString, $$$$setString, $$$$operator, $$$$construct, $$$$doDelete, $$$$doNew) 
		{
			//set default parameter values
			var expression = $$$$expression;
			var toString = $$$$toString;
			var setString = $$$$setString;
			var operator = $$$$operator;
			var construct = $$$$construct;
			var doDelete = (5 > arguments.length - 1) ? null : $$$$doDelete;
			var doNew = (6 > arguments.length - 1) ? null : $$$$doNew;

			var js = '';
			if ($es4.$$get(expression, null, null, 'constructor') == $es4.$$get(Construct, null, null, 'DeleteExpression'))
			{
				return translatePropertyExpressionDynamic($es4.$$get(expression, null, null, 'expression'), toString, setString, operator, construct, true, doNew);
			}
			if ($es4.$$get(expression, null, null, 'constructor') == $es4.$$get(Construct, null, null, 'NewExpression'))
			{
				return translatePropertyExpressionDynamic($es4.$$get(expression, null, null, 'expression'), toString, setString, operator, construct, doDelete, true);
			}
			if (!$es4.$$get(expression, null, null, 'construct'))
			{
				throw $es4.$$primitive(new (Error)('invalid expression passed to translatePropertyExpression: ' + $es4.$$get(expression, null, null, 'constructor')));
			}
			var identifier;
			var namespaceIdentifier;
			switch ($es4.$$get(expression, null, null, 'construct', 'constructor'))
			{
				case $es4.$$get(Construct, null, null, 'SuperConstruct'):
				case $es4.$$get(Construct, null, null, 'ThisConstruct'):
				case $es4.$$get(Construct, null, null, 'IdentifierConstruct'):
					identifier = $es4.$$get(expression, null, null, 'construct', 'identifier');
					break;
				case $es4.$$get(Construct, null, null, 'ParenConstruct'):
				case $es4.$$get(Construct, null, null, 'ArrayConstruct'):
				case $es4.$$get(Construct, null, null, 'ObjectConstruct'):
					break;
				case $es4.$$get(Construct, null, null, 'NamespaceQualifierConstruct'):
					namespaceIdentifier = $es4.$$get(expression, null, null, 'construct', 'namespaceIdentifier');
					identifier = $es4.$$get(expression, null, null, 'construct', 'identifier');
					break;
				default:
					throw $es4.$$primitive(new (Error)('unknown inner property expression: ' + $es4.$$get(expression, null, null, 'construct', 'constructor')));
			}
			var pname;
			var name;
			var isUseNamespace = false;
			if (identifier && !namespaceIdentifier && ($es4.$$get(identifier, null, null, 'isProperty') || $es4.$$get(identifier, null, null, 'isMethod')) && !$es4.$$get(identifier, null, null, 'isImport') && $es4.$$get(identifier, null, null, 'namespaceObj', 'isCustom'))
			{
				isUseNamespace = namespaceIdentifier = $es4.$$get(identifier, null, null, 'namespaceObj', 'identifier');
			}
			if (identifier && namespaceIdentifier)
			{
				var pname = ($es4.$$get(namespaceIdentifier, null, null, 'isStatic')) ? $es4.$$get(namespaceIdentifier, null, null, 'scope', 'name') : '$$this';
				var namespaceObj = $es4.$$get(namespaceIdentifier, null, null, 'namespaceObj');
				var namespaceString = $es4.$$get(namespaceObj, null, null, 'normalizedImportID');
				if ($es4.$$get(namespaceIdentifier, null, null, 'isStatic') && !namespaceString)
				{
					namespaceString = $es4.$$get(namespaceIdentifier, null, null, 'scope', 'name') + '.' + $es4.$$get(namespaceIdentifier, null, null, 'name');
				}
				else if (!namespaceString)
				{
					namespaceString = ($es4.$$get(namespaceIdentifier, null, null, 'namespaceObj') && $es4.$$get(namespaceIdentifier, null, null, 'namespaceObj', 'isPrivate') ? '$$thisp.' : '$$this.') + $es4.$$get(namespaceIdentifier, null, null, 'name');
				}
				if (isUseNamespace)
				{
					pname += '.$$namespace(' + namespaceString + ')';
				}
				name = $es4.$$get(identifier, null, null, 'name');
			}
			else if (identifier)
			{
				name = $es4.$$get(identifier, null, null, 'name');
				if ($es4.$$get(identifier, null, null, 'isStatic') && !$es4.$$get(identifier, null, null, 'isImport') && !$es4.$$get(identifier, null, null, 'isNative'))
				{
					pname = $es4.$$get(identifier, null, null, 'scope', 'name');
				}
				else if ($es4.$$get(identifier, null, null, 'isPrivate') && !$es4.$$get(identifier, null, null, 'isImport'))
				{
					pname = '$$thisp';
				}
				else if (($es4.$$get(identifier, null, null, 'isProperty') || $es4.$$get(identifier, null, null, 'isMethod')) && !$es4.$$get(identifier, null, null, 'isImport'))
				{
					pname = '$$this';
				}
				else if ($es4.$$get(identifier, null, null, 'isPackage'))
				{
					name = '$es4.$$[\'' + $es4.$$get(identifier, null, null, 'name');
					var packageName = $es4.$$get(identifier, null, null, 'name');
					var tempInnerExpression = expression;
					var lastExpression = tempInnerExpression;
					while (tempInnerExpression = $es4.$$get(tempInnerExpression, null, null, 'nextPropertyExpression'))
					{
						if ($es4.$$get(_rootConstructs, null, null, packageName + '.' + $es4.$$get(tempInnerExpression, null, null, 'construct', 'identifierToken', 'data')))
						{
							expression = lastExpression;
							break;
						}
						packageName += '.' + $es4.$$get(tempInnerExpression, null, null, 'construct', 'identifierToken', 'data');
						name += '.' + $es4.$$get(tempInnerExpression, null, null, 'construct', 'identifierToken', 'data');
						lastExpression = tempInnerExpression;
					}
					name += '\']';
				}
				if (name == 'super')
				{
					if (_inNamespacedFunction && $es4.$$get(expression, null, null, 'nextPropertyExpression'))
					{
						name = '$$this.$$namespace(' + _inNamespacedFunction + ', $$this, $es4.$$super($$thisp))';
					}
					else
					{
						name = ($es4.$$get(expression, null, null, 'nextPropertyExpression')) ? '$es4.$$super($$thisp)' : 'this';
					}
				}
				if (name == 'this' && !_inClosure)
				{
					name = '$$this';
				}
			}
			else
			{
				name = translateExpression($es4.$$get(expression, null, null, 'construct', 'expression'), 0, toString, construct);
			}
			var state = {doAssignment:setString != null, doDelete:doDelete, doNew:doNew, doPostfix:setString == '\'postfix\'', doPrefix:setString == '\'prefix\''};
			var propListCount = (pname) ? 2 : 1;
			var accessString = '$es4.$$get';
			if (pname)
			{
				if (_inStaticFunction)
				{
					js += accessString + '(' + pname + ', null, null';
				}
				else
				{
					js += accessString + '(' + pname + ', $$this, $$thisp';
				}
			}
			else
			{
				expression = $es4.$$get(expression, null, null, 'nextPropertyExpression');
				js += name;
			}
			var lastAccessTypeWasArrayAccessor = false;
			var closed = false;
			while (expression)
			{
				var expressionConstruct = $es4.$$get(expression, null, null, 'construct');
				var expressionConstructor = $es4.$$get(expressionConstruct, null, null, 'constructor');
				if (expressionConstructor == $es4.$$get(Construct, null, null, 'DotConstruct') || expressionConstructor == $es4.$$get(Construct, null, null, 'IdentifierConstruct') || expressionConstructor == $es4.$$get(Construct, null, null, 'ArrayAccessorConstruct') || expressionConstructor == $es4.$$get(Construct, null, null, 'NamespaceQualifierConstruct') || $es4.$$get(expression, null, null, 'construct', 'constructor') == $es4.$$get(Construct, null, null, 'AtIdentifierConstruct'))
				{
					propListCount++;
					if (!pname || closed)
					{
						if (_inStaticFunction)
						{
							js = accessString + '(' + js + ', null, null';
						}
						else
						{
							js = accessString + '(' + js + ', $$this, $$thisp';
						}
						closed = false;
						pname = js;
					}
				}
				if (expressionConstructor == $es4.$$get(Construct, null, null, 'DotConstruct') || expressionConstructor == $es4.$$get(Construct, null, null, 'IdentifierConstruct'))
				{
					js += ', \'' + $es4.$$get(expressionConstruct, null, null, 'identifierToken', 'data') + '\'';
					lastAccessTypeWasArrayAccessor = false;
				}
				else if (expressionConstructor == $es4.$$get(Construct, null, null, 'ArrayAccessorConstruct'))
				{
					js += ', ' + translateExpression($es4.$$get(expression, null, null, 'construct', 'expression'), 0, toString, construct);
					lastAccessTypeWasArrayAccessor = true;
				}
				else if (expressionConstructor == $es4.$$get(Construct, null, null, 'NamespaceQualifierConstruct'))
				{
					namespaceIdentifier = $es4.$$get(expression, null, null, 'construct', 'namespaceIdentifier');
					var namespaceObj = $es4.$$get(namespaceIdentifier, null, null, 'namespaceObj');
					var namespaceString = $es4.$$get(namespaceObj, null, null, 'normalizedImportID');
					if ($es4.$$get(namespaceIdentifier, null, null, 'isStatic') && !namespaceString)
					{
						namespaceString = $es4.$$get(namespaceIdentifier, null, null, 'scope', 'name') + '.' + $es4.$$get(namespaceIdentifier, null, null, 'name');
					}
					else if (!namespaceString)
					{
						namespaceString = ($es4.$$get(identifier, null, null, 'isPrivate')) ? '$$thisp.' + $es4.$$get(namespaceIdentifier, null, null, 'name') : '$$this.' + $es4.$$get(namespaceIdentifier, null, null, 'name');
					}
					if (_inStaticFunction)
					{
						js = accessString + '(' + js + ').$$namespace(' + namespaceString + '), null, null, \'' + $es4.$$get(expressionConstruct, null, null, 'namespaceIdentifierToken', 'data') + '\'';
					}
					else
					{
						js = accessString + '(' + js + ').$$namespace(' + namespaceString + '), $$this, $$thisp, \'' + $es4.$$get(expressionConstruct, null, null, 'namespaceIdentifierToken', 'data') + '\'';
					}
					propListCount = 2;
				}
				else if ($es4.$$get(expression, null, null, 'construct', 'constructor') == $es4.$$get(Construct, null, null, 'ParenConstruct'))
				{
					throw $es4.$$primitive(new (Error)('check translator.js for this error.'));
				}
				else if ($es4.$$get(expression, null, null, 'construct', 'constructor') == $es4.$$get(Construct, null, null, 'AtIdentifierConstruct'))
				{
					js += ', \'$$attributes\'';
					lastAccessTypeWasArrayAccessor = false;
				}
				if ($es4.$$get(expression, null, null, 'construct', 'constructor') == $es4.$$get(Construct, null, null, 'FunctionCallConstruct') || ($es4.$$get(expression, null, null, 'nextPropertyExpression') && $es4.$$get(expression, null, null, 'nextPropertyExpression', 'construct', 'constructor') == $es4.$$get(Construct, null, null, 'FunctionCallConstruct')))
				{
					var functionCallExpression = ($es4.$$get(expression, null, null, 'construct', 'constructor') == $es4.$$get(Construct, null, null, 'FunctionCallConstruct')) ? expression : $es4.$$get(expression, null, null, 'nextPropertyExpression');
					if (js == '$es4.$$super($$thisp)')
					{
						js += '.$$z';
					}
					var start = null;
					if (propListCount == 1)
					{
						if ($es4.$$get(state, null, null, 'doNew'))
						{
							if ($es4.$$get(functionCallExpression, null, null, 'construct', 'argumentExpressions', 'length'))
							{
								js = '$es4.$$primitive(new (' + js + ')(';
							}
							else
							{
								js = '$es4.$$primitive(new (' + js + ')(';
							}
						}
						else
						{
							js += '(';
						}
					}
					else
					{
						if ($es4.$$get(state, null, null, 'doNew'))
						{
							js = '$es4.$$primitive(new (' + js + '))(';
						}
						else
						{
							if (!lastAccessTypeWasArrayAccessor)
							{
								start = $es4.$$call(js, null, null, 'substring', [10]);
								js = '$es4.$$call' + start;
								if ($es4.$$get(functionCallExpression, null, null, 'construct', 'argumentExpressions', 'length'))
								{
									js += ', [';
								}
							}
							else
							{
								js += ')(';
							}
						}
						closed = true;
						propListCount = 2;
					}
					for (var i = 0; i < $es4.$$get(functionCallExpression, null, null, 'construct', 'argumentExpressions', 'length'); i++)
					{
						js += translateExpression($es4.$$get(functionCallExpression, null, null, 'construct', 'argumentExpressions', i), 0, toString, construct);
						if ((i + 1) < $es4.$$get(functionCallExpression, null, null, 'construct', 'argumentExpressions', 'length'))
						{
							js += ', ';
						}
					}
					if ($es4.$$get(state, null, null, 'doNew'))
					{
						js += ')';
					}
					$es4.$$set(state, null, null, 'doNew', false, '=');
					if (start && $es4.$$get(functionCallExpression, null, null, 'construct', 'argumentExpressions', 'length'))
					{
						js += '])';
					}
					else if (start)
					{
						js += ', $es4.$$EMPTY_ARRAY)';
					}
					else
					{
						js += ')';
					}
					if ($es4.$$get(expression, null, null, 'nextPropertyExpression'))
					{
						expression = functionCallExpression;
					}
				}
				expression = $es4.$$get(expression, null, null, 'nextPropertyExpression');
			}
			if (!pname)
			{
				if (!$es4.$$get(state, null, null, 'doPostfix') && !$es4.$$get(state, null, null, 'doPrefix'))
				{
					if ($es4.$$get(state, null, null, 'doAssignment') && operator == '||=' || operator == '&&=')
					{
						js += ' = ' + js + ((operator == '&&=') ? ' && (' : ' || (') + setString + ')';
					}
					else if ($es4.$$get(state, null, null, 'doAssignment'))
					{
						js += ' ' + operator + ' ' + setString;
					}
				}
				else if ($es4.$$get(state, null, null, 'doPrefix'))
				{
					js = operator + js;
				}
				else if ($es4.$$get(state, null, null, 'doPostfix'))
				{
					js += operator;
				}
				if ($es4.$$get(state, null, null, 'doDelete'))
				{
					js = 'delete ' + js;
				}
				if ($es4.$$get(state, null, null, 'doNew'))
				{
					js = '$es4.$$primitive(new (' + js + '()))';
				}
			}
			else
			{
				if ($es4.$$get(state, null, null, 'doAssignment'))
				{
					js = '$es4.$$set' + $es4.$$call(js, null, null, 'slice', [10]);
					js += ', ' + setString + ', \'' + operator + '\'';
				}
				else if ($es4.$$get(state, null, null, 'doDelete'))
				{
					js = '$es4.$$delete' + $es4.$$call(js, null, null, 'slice', [10]);
				}
				if (!closed)
				{
					js += ')';
				}
			}
			return js;
		}
;

		function isCoerceRequired($$$$statementOrExpression, $$$$typeName, $$$$valueJS) 
		{
			//set default parameter values
			var statementOrExpression = $$$$statementOrExpression;
			var typeName = $$$$typeName;
			var valueJS = $$$$valueJS;

			if (!$es4.$$get(statementOrExpression, null, null, 'coerce'))
			{
				return false;
			}
			switch (typeName)
			{
				case 'uint':
					if (Number(valueJS) == (valueJS >>> 0))
					{
						return false;
					}
					break;
				case 'int':
					if (Number(valueJS) == (valueJS >> 0))
					{
						return false;
					}
					break;
			}
			return true;
		}
;

		function print($$$$string, $$$$tabs, $$$$newlines, $$$$preNewLines) 
		{
			//set default parameter values
			var string = $$$$string;
			var tabs = $$$$tabs;
			var newlines = $$$$newlines;
			var preNewLines = (3 > arguments.length - 1) ? null : $$$$preNewLines;

			if (tabs)
			{
				for (var i = 0; i < tabs; i++)
				{
					string = '\t' + string;
				}
			}
			if (newlines)
			{
				for (var i = 0; i < newlines; i++)
				{
					string += '\n';
				}
			}
			if (preNewLines)
			{
				for (var i = 0; i < preNewLines; i++)
				{
					string = '\n' + string;
				}
			}
			return string;
		}
;
	}));

	function TranslatorProto()
	{
		//initialize class if not initialized
		if (TranslatorProto.$$cinit !== undefined) TranslatorProto.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof TranslatorProto) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], TranslatorProto) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(TranslatorProto, null, 'sweetrush.core::TranslatorProto');
})();
//sweetrush.core.TranslatorProto


//sweetrush.core.Analyzer
$es4.$$package('sweetrush.core').Analyzer = (function ()
{
	//imports
	var Construct;
	var Token;
	var Base64Util;
	var Analyzer;
	var TranslatorPrototype;
	var FileUtil;
	var SwcUtil;
	var Construct;
	var TranslatorProto;
	var Lexer;
	var JsonUtil;
	var Token;
	var Parser;
	var Transcompiler;

	//properties
	$es4.$$private_property('globalIdentifiers', Analyzer, Array);
	$es4.$$private_property('_globals', Analyzer, Object);

	//class initializer
	Analyzer.$$cinit = (function ()
	{
		Analyzer.$$cinit = undefined;

		//initialize imports
		Construct = $es4.$$['sweetrush.obj'].Construct;
		Token = $es4.$$['sweetrush.obj'].Token;
		Base64Util = $es4.$$['sweetrush.utils'].Base64Util;
		TranslatorPrototype = $es4.$$['sweetrush.core'].TranslatorPrototype;
		FileUtil = $es4.$$['sweetrush.utils'].FileUtil;
		SwcUtil = $es4.$$['sweetrush.utils'].SwcUtil;
		TranslatorProto = $es4.$$['sweetrush.core'].TranslatorProto;
		Lexer = $es4.$$['sweetrush.core'].Lexer;
		JsonUtil = $es4.$$['sweetrush.utils'].JsonUtil;
		Parser = $es4.$$['sweetrush.core'].Parser;
		Transcompiler = $es4.$$['sweetrush'].Transcompiler;

		//initialize properties
		Analyzer.globalIdentifiers = [{name:'trace', returnType:'void'}, {name:'parseInt', returnType:'Number'}, {name:'parseFloat', returnType:'Number'}, {name:'isNaN', returnType:'Boolean'}, {name:'isFinite', returnType:'Boolean'}, {name:'escape', returnType:'String'}, {name:'unescape', returnType:'String'}, {name:'decodeURIComponent', returnType:'String'}, {name:'encodeURIComponent', returnType:'String'}, {name:'decodeURI', returnType:'String'}, {name:'encodeURI', returnType:'String'}, {name:'isXMLName', returnType:'Boolean'}, {name:'$es4', returnType:'Object'}, {name:'window', returnType:'Object'}, {name:'document', returnType:'Object'}, {name:'console', returnType:'Object'}, {name:'$', returnType:'Object'}, {name:'_', returnType:'Object'}, {name:'alert', returnType:'Object'}, {name:'debugger', returnType:'Object'}, {name:'setInterval', returnType:'Object'}, {name:'clearInterval', returnType:'Object'}, {name:'setTimeout', returnType:'Object'}, {name:'clearTimeout', returnType:'Object'}, {name:'require', returnType:'Object'}, {name:'global', returnType:'Object'}, {name:'process', returnType:'Object'}, {name:'__dirname', returnType:'String'}];
		Analyzer._globals = {'ArgumentError':1, 'Array':1, 'Boolean':1, 'Class':1, 'JSON':1, 'Walker':1, 'UninitializedError':1, 'Date':1, 'DefinitionError':1, 'Error':1, 'EvalError':1, 'Function':1, 'int':1, 'Math':1, 'Namespace':1, 'Number':1, 'Object':1, 'QName':1, 'RangeError':1, 'ReferenceError':1, 'RegExp':1, 'SecurityError':1, 'String':1, 'SyntaxError':1, 'TypeError':1, 'uint':1, 'URIError':1, 'Vector':1, 'VerifyError':1, 'XML':1, 'XMLList':1};
	});

	//method
	$es4.$$public_function('analyze', Analyzer, (function ($$$$rootConstruct, $$$$rootConstructs, $$$$translationMode, $$$$doNotTreatPrivateMethodsAsNative, $$$$treatThisAsDynamic)
	{
		if (Analyzer.$$cinit !== undefined) Analyzer.$$cinit();

		//set default parameter values
		var rootConstruct = $$$$rootConstruct;
		var rootConstructs = $$$$rootConstructs;
		var translationMode = $es4.$$coerce($$$$translationMode, Number);
		var doNotTreatPrivateMethodsAsNative = (3 > arguments.length - 1) ? false : $es4.$$coerce($$$$doNotTreatPrivateMethodsAsNative, Boolean);
		var treatThisAsDynamic = (4 > arguments.length - 1) ? false : $es4.$$coerce($$$$treatThisAsDynamic, Boolean);

		return $es4.$$call($es4.$$primitive(new (Analyzer)()), null, null, 'analyze', [rootConstruct, rootConstructs, translationMode, doNotTreatPrivateMethodsAsNative, treatThisAsDynamic]);
	}));

	function Analyzer()
	{
		//initialize class if not initialized
		if (Analyzer.$$cinit !== undefined) Analyzer.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof Analyzer) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Analyzer) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//properties
		$es4.$$private_property('_rootConstruct', $$thisp);
		$es4.$$private_property('_rootConstructs', $$thisp, Object);
		$es4.$$private_property('_translationMode', $$thisp, int);
		$es4.$$private_property('_doNotTreatPrivateMethodsAsNative', $$thisp, Boolean);
		$es4.$$private_property('_treatThisAsDynamic', $$thisp, Boolean);
		$es4.$$private_property('_indent', $$thisp);
		$es4.$$private_property('_count', $$thisp);
		$es4.$$private_property('_level', $$thisp, int);
		$es4.$$private_property('_inClosure', $$thisp);
		$es4.$$private_property('_inNamespacedFunction', $$thisp);
		$es4.$$private_property('_inStaticFunction', $$thisp);
		$es4.$$private_property('_inIfStatement', $$thisp);
		$es4.$$private_property('_returnTypeStack', $$thisp);
		$es4.$$private_property('_identifiers', $$thisp);
		$es4.$$private_property('_namespaces', $$thisp);
		$es4.$$private_property('_useNamespaces', $$thisp);
		$es4.$$private_property('_types', $$thisp);

		//initializer
		$es4.$$iinit($$thisp, (function ()
		{
			//initialize properties
			$es4.$$set($$this, $$this, $$thisp, '_doNotTreatPrivateMethodsAsNative', false, '=');
			$es4.$$set($$this, $$this, $$thisp, '_treatThisAsDynamic', false, '=');
			$es4.$$set($$this, $$this, $$thisp, '_indent', -1, '=');
			$es4.$$set($$this, $$this, $$thisp, '_count', -1, '=');
			$es4.$$set($$this, $$this, $$thisp, '_level', 0, '=');
			$es4.$$set($$this, $$this, $$thisp, '_inClosure', false, '=');
			$es4.$$set($$this, $$this, $$thisp, '_inNamespacedFunction', false, '=');
			$es4.$$set($$this, $$this, $$thisp, '_inStaticFunction', false, '=');
			$es4.$$set($$this, $$this, $$thisp, '_inIfStatement', 0, '=');
			$es4.$$set($$this, $$this, $$thisp, '_returnTypeStack', [], '=');
			$es4.$$set($$this, $$this, $$thisp, '_identifiers', [{}], '=');
			$es4.$$set($$this, $$this, $$thisp, '_namespaces', [{}], '=');
			$es4.$$set($$this, $$this, $$thisp, '_useNamespaces', [[]], '=');
			$es4.$$set($$this, $$this, $$thisp, '_types', {}, '=');
		}));

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//method
		$es4.$$public_function('analyze', $$thisp, (function ($$$$rootConstruct, $$$$rootConstructs, $$$$translationMode, $$$$doNotTreatPrivateMethodsAsNative, $$$$treatThisAsDynamic)
		{
			//set default parameter values
			var rootConstruct = $$$$rootConstruct;
			var rootConstructs = $$$$rootConstructs;
			var translationMode = $es4.$$coerce($$$$translationMode, Number);
			var doNotTreatPrivateMethodsAsNative = (3 > arguments.length - 1) ? false : $es4.$$coerce($$$$doNotTreatPrivateMethodsAsNative, Boolean);
			var treatThisAsDynamic = (4 > arguments.length - 1) ? false : $es4.$$coerce($$$$treatThisAsDynamic, Boolean);

			$es4.$$set($$thisp, $$this, $$thisp, '_rootConstruct', rootConstruct, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_rootConstructs', rootConstructs, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_translationMode', translationMode, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_treatThisAsDynamic', treatThisAsDynamic, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_doNotTreatPrivateMethodsAsNative', (translationMode == 1 || translationMode == 3) || doNotTreatPrivateMethodsAsNative, '=');
			$es4.$$call($$thisp, $$this, $$thisp, 'registerNamespace', ['public']);
			$es4.$$call($$thisp, $$this, $$thisp, 'registerNamespace', ['private']);
			$es4.$$call($$thisp, $$this, $$thisp, 'registerNamespace', ['protected']);
			$es4.$$call($$thisp, $$this, $$thisp, 'registerNamespace', ['internal']);
			$es4.$$call($$thisp, $$this, $$thisp, 'registerType', ['void', null, null, true]);
			$es4.$$call($$thisp, $$this, $$thisp, 'registerType', ['*', null, null, true]);
			$es4.$$call($$thisp, $$this, $$thisp, 'registerType', ['PACKAGE', null, null, true]);
			for (var $$i0 = ($es4.$$get($$thisp, $$this, $$thisp, '_rootConstructs') || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i0 != 0; $$i0 = $es4.$$get($$thisp, $$this, $$thisp, '_rootConstructs').$$nextNameIndex($$i0))
			{
				var name = $es4.$$get($$thisp, $$this, $$thisp, '_rootConstructs').$$nextName($$i0);

				var construct = $es4.$$get($$thisp, $$this, $$thisp, '_rootConstructs', name);
				if (!$es4.$$get(construct, $$this, $$thisp, 'packageConstruct'))
				{
					continue;
				}
				if ($es4.$$get(construct, $$this, $$thisp, 'packageConstruct', 'classConstruct'))
				{
					$es4.$$call($$thisp, $$this, $$thisp, 'registerType', [name, construct, $es4.$$get(construct, $$this, $$thisp, 'packageConstruct', 'classConstruct'), $es4.$$get(Analyzer, $$this, $$thisp, '_globals', name)]);
				}
				if ($es4.$$get(construct, $$this, $$thisp, 'packageConstruct', 'interfaceConstruct'))
				{
					$es4.$$call($$thisp, $$this, $$thisp, 'registerType', [name, construct, $es4.$$get(construct, $$this, $$thisp, 'packageConstruct', 'interfaceConstruct'), $es4.$$get(Analyzer, $$this, $$thisp, '_globals', name)]);
				}
			}
			for (var i = 0; i < $es4.$$get(Analyzer, $$this, $$thisp, 'globalIdentifiers', 'length'); i++)
			{
				$es4.$$call($$thisp, $$this, $$thisp, 'registerIdentifier', [$es4.$$get(Analyzer, $$this, $$thisp, 'globalIdentifiers', i, 'name')]);
			}
			var packageConstruct = $es4.$$get($$thisp, $$this, $$thisp, '_rootConstruct', 'packageConstruct');
			for (var i = 0; i < $es4.$$get($$thisp, $$this, $$thisp, '_rootConstruct', 'classConstructs', 'length'); i++)
			{
				$es4.$$call($$thisp, $$this, $$thisp, 'registerIdentifier', [$es4.$$get($$thisp, $$this, $$thisp, '_rootConstruct', 'classConstructs', i), $es4.$$get($$thisp, $$this, $$thisp, '_rootConstruct', 'classConstructs', i)]);
			}
			for (var i = 0; i < $es4.$$get($$thisp, $$this, $$thisp, '_rootConstruct', 'interfaceConstructs', 'length'); i++)
			{
				$es4.$$call($$thisp, $$this, $$thisp, 'registerIdentifier', [$es4.$$get($$thisp, $$this, $$thisp, '_rootConstruct', 'interfaceConstructs', i), $es4.$$get($$thisp, $$this, $$thisp, '_rootConstruct', 'interfaceConstructs', i)]);
			}
			for (var i = 0; i < $es4.$$get($$thisp, $$this, $$thisp, '_rootConstruct', 'propertyConstructs', 'length'); i++)
			{
				$es4.$$call($$thisp, $$this, $$thisp, 'registerIdentifier', [$es4.$$get($$thisp, $$this, $$thisp, '_rootConstruct', 'propertyConstructs', i), $es4.$$get($$thisp, $$this, $$thisp, '_rootConstruct', 'propertyConstructs', i)]);
			}
			for (var i = 0; i < $es4.$$get($$thisp, $$this, $$thisp, '_rootConstruct', 'methodConstructs', 'length'); i++)
			{
				$es4.$$call($$thisp, $$this, $$thisp, 'registerIdentifier', [$es4.$$get($$thisp, $$this, $$thisp, '_rootConstruct', 'methodConstructs', i), $es4.$$get($$thisp, $$this, $$thisp, '_rootConstruct', 'methodConstructs', i)]);
			}
			for (var i = 0; i < $es4.$$get(packageConstruct, $$this, $$thisp, 'useConstructs', 'length'); i++)
			{
				$es4.$$call($$thisp, $$this, $$thisp, 'registerUseNamespace', [$es4.$$get(packageConstruct, $$this, $$thisp, 'useConstructs', i)]);
			}
			if ($es4.$$get(packageConstruct, $$this, $$thisp, 'classConstruct') != null && $es4.$$get(packageConstruct, $$this, $$thisp, 'classConstruct', 'UNIMPLEMENTEDToken') == null)
			{
				$es4.$$call($$thisp, $$this, $$thisp, 'analyzeClassConstruct', [$es4.$$get(packageConstruct, $$this, $$thisp, 'classConstruct')]);
			}
			if ($es4.$$get(packageConstruct, $$this, $$thisp, 'interfaceConstruct') != null && $es4.$$get(packageConstruct, $$this, $$thisp, 'interfaceConstruct', 'UNIMPLEMENTEDToken') == null)
			{
				$es4.$$call($$thisp, $$this, $$thisp, 'analyzeInterfaceConstruct', [$es4.$$get(packageConstruct, $$this, $$thisp, 'interfaceConstruct')]);
			}
			if ($es4.$$get(packageConstruct, $$this, $$thisp, 'methodConstruct') != null && $es4.$$get(packageConstruct, $$this, $$thisp, 'methodConstruct', 'UNIMPLEMENTEDToken') == null)
			{
				$es4.$$call($$thisp, $$this, $$thisp, 'analyzeFunctionConstruct', [$es4.$$get(packageConstruct, $$this, $$thisp, 'methodConstruct')]);
			}
			if ($es4.$$get(packageConstruct, $$this, $$thisp, 'propertyConstruct') != null)
			{
				$es4.$$call($$thisp, $$this, $$thisp, 'analyzePropertyConstruct', [$es4.$$get(packageConstruct, $$this, $$thisp, 'propertyConstruct')]);
			}
			return $es4.$$get($$thisp, $$this, $$thisp, '_rootConstruct');
		}));

		//method
		$es4.$$private_function('upLevel', $$thisp, (function ()
		{
			$es4.$$set($$thisp, $$this, $$thisp, '_indent', 'postfix', '++');
			$es4.$$set($$thisp, $$this, $$thisp, '_level', 'postfix', '++');
			$es4.$$set($$thisp, $$this, $$thisp, '_identifiers', $es4.$$get($$thisp, $$this, $$thisp, '_level'), {}, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_namespaces', $es4.$$get($$thisp, $$this, $$thisp, '_level'), {}, '=');
			$es4.$$set($$thisp, $$this, $$thisp, '_useNamespaces', $es4.$$get($$thisp, $$this, $$thisp, '_level'), [], '=');
			return $es4.$$get($$thisp, $$this, $$thisp, '_level');
		}));

		//method
		$es4.$$private_function('downLevel', $$thisp, (function ()
		{
			$es4.$$delete($$thisp, $$this, $$thisp, '_identifiers', $es4.$$get($$thisp, $$this, $$thisp, '_level'));
			$es4.$$delete($$thisp, $$this, $$thisp, '_namespaces', $es4.$$get($$thisp, $$this, $$thisp, '_level'));
			$es4.$$delete($$thisp, $$this, $$thisp, '_useNamespaces', $es4.$$get($$thisp, $$this, $$thisp, '_level'));
			$es4.$$set($$thisp, $$this, $$thisp, '_indent', 'postfix', '--');
			$es4.$$set($$thisp, $$this, $$thisp, '_level', 'postfix', '--');
			return $es4.$$get($$thisp, $$this, $$thisp, '_level');
		}));

		//method
		$es4.$$private_function('output', $$thisp, (function ()
		{
			trace('outputing...');
			var level = $es4.$$get($$thisp, $$this, $$thisp, '_level');
			while (level >= 0)
			{
				trace('level: ' + level);
				for (var $$i1 = ($es4.$$get($$thisp, $$this, $$thisp, '_namespaces', level) || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i1 != 0; $$i1 = $es4.$$get($$thisp, $$this, $$thisp, '_namespaces', level).$$nextNameIndex($$i1))
				{
					var name = $es4.$$get($$thisp, $$this, $$thisp, '_namespaces', level).$$nextName($$i1);

					trace('\t' + $es4.$$get($$thisp, $$this, $$thisp, '_namespaces', level, name) + '\t\t\t [[[' + $es4.$$call(name, $$this, $$thisp, 'substring', [1]) + ']]]');
				}
				for (var $$i2 = ($es4.$$get($$thisp, $$this, $$thisp, '_identifiers', level) || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i2 != 0; $$i2 = $es4.$$get($$thisp, $$this, $$thisp, '_identifiers', level).$$nextNameIndex($$i2))
				{
					var name = $es4.$$get($$thisp, $$this, $$thisp, '_identifiers', level).$$nextName($$i2);

					trace('\t' + $es4.$$get($$thisp, $$this, $$thisp, '_identifiers', level, name) + '\t\t\t [[[' + $es4.$$call(name, $$this, $$thisp, 'substring', [1]) + ']]]');
				}
				level--;
			}
			for (var $$i3 = ($es4.$$get($$thisp, $$this, $$thisp, '_types') || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i3 != 0; $$i3 = $es4.$$get($$thisp, $$this, $$thisp, '_types').$$nextNameIndex($$i3))
			{
				var name = $es4.$$get($$thisp, $$this, $$thisp, '_types').$$nextName($$i3);

				trace('\t' + $es4.$$get($$thisp, $$this, $$thisp, '_types', name) + '\t\t\t [[[' + $es4.$$call(name, $$this, $$thisp, 'substring', [1]) + ']]]');
			}
			for (var i = 0; i < $es4.$$get($es4.$$call($$thisp, $$this, $$thisp, 'getUseNamespaces', $es4.$$EMPTY_ARRAY), $$this, $$thisp, 'length'); i++)
			{
				trace('UseNamespace: ' + $es4.$$get($es4.$$call($$thisp, $$this, $$thisp, 'getUseNamespaces', $es4.$$EMPTY_ARRAY), $$this, $$thisp, i));
			}
		}));

		//method
		$es4.$$private_function('lookupConstructInRootConstruct', $$thisp, (function ($$$$rootConstruct, $$$$object)
		{
			//set default parameter values
			var rootConstruct = $$$$rootConstruct;
			var object = $$$$object;

			if (!rootConstruct || !object)
			{
				$es4.$$call($$thisp, $$this, $$thisp, 'output', $es4.$$EMPTY_ARRAY);
				throw $es4.$$primitive(new (Error)('cannot lookup empty rootConstruct/object: ' + rootConstruct + ', ' + object));
			}
			else if ($es4.$$is(object, String))
			{
				for (var i = 0; i < $es4.$$get(rootConstruct, $$this, $$thisp, 'classConstructs', 'length'); i++)
				{
					if ($es4.$$get(rootConstruct, $$this, $$thisp, 'classConstructs', i, 'identifierToken', 'data') == object)
					{
						return $es4.$$get(rootConstruct, $$this, $$thisp, 'classConstructs', i);
					}
				}
				for (var i = 0; i < $es4.$$get(rootConstruct, $$this, $$thisp, 'interfaceConstructs', 'length'); i++)
				{
					if ($es4.$$get(rootConstruct, $$this, $$thisp, 'interfaceConstructs', i, 'identifierToken', 'data') == object)
					{
						return $es4.$$get(rootConstruct, $$this, $$thisp, 'interfaceConstructs', i);
					}
				}
				if ($es4.$$get(rootConstruct, $$this, $$thisp, 'packageConstruct', 'classConstruct'))
				{
					return $es4.$$get(rootConstruct, $$this, $$thisp, 'packageConstruct', 'classConstruct');
				}
				if ($es4.$$get(rootConstruct, $$this, $$thisp, 'packageConstruct', 'interfaceConstruct'))
				{
					return $es4.$$get(rootConstruct, $$this, $$thisp, 'packageConstruct', 'interfaceConstruct');
				}
				if ($es4.$$get(rootConstruct, $$this, $$thisp, 'packageConstruct', 'propertyConstruct'))
				{
					return $es4.$$get(rootConstruct, $$this, $$thisp, 'packageConstruct', 'propertyConstruct');
				}
				if ($es4.$$get(rootConstruct, $$this, $$thisp, 'packageConstruct', 'methodConstruct'))
				{
					return $es4.$$get(rootConstruct, $$this, $$thisp, 'packageConstruct', 'methodConstruct');
				}
				throw $es4.$$primitive(new (Error)('could not lookup construct in construct: ' + object));
			}
			if ($es4.$$get(object, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'NameConstruct'))
			{
				return $es4.$$call($$thisp, $$this, $$thisp, 'lookupConstructInRootConstruct', [rootConstruct, $es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [object])]);
			}
			else if ($es4.$$get(object, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'ImportConstruct'))
			{
				return $es4.$$call($$thisp, $$this, $$thisp, 'lookupConstructInRootConstruct', [rootConstruct, $es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [$es4.$$get(object, $$this, $$thisp, 'nameConstruct')])]);
			}
		}));

		//method
		$es4.$$private_function('lookupRootConstruct', $$thisp, (function ($$$$rootConstruct, $$$$object)
		{
			//set default parameter values
			var rootConstruct = $$$$rootConstruct;
			var object = $$$$object;

			if (!rootConstruct || !object)
			{
				throw $es4.$$primitive(new (Error)('cannot find empty rootConstruct/object: ' + rootConstruct + ', ' + object));
			}
			else if ($es4.$$is(object, String))
			{
				for (var i = 0; i < $es4.$$get(rootConstruct, $$this, $$thisp, 'classConstructs', 'length'); i++)
				{
					if ($es4.$$get(rootConstruct, $$this, $$thisp, 'classConstructs', i, 'identifierToken', 'data') == object)
					{
						return rootConstruct;
					}
				}
				for (var i = 0; i < $es4.$$get(rootConstruct, $$this, $$thisp, 'interfaceConstructs', 'length'); i++)
				{
					if ($es4.$$get(rootConstruct, $$this, $$thisp, 'interfaceConstructs', i, 'identifierToken', 'data') == object)
					{
						return rootConstruct;
					}
				}
				var rootConstructs = $es4.$$get($$thisp, $$this, $$thisp, '_rootConstructs');
				if ($es4.$$get(rootConstructs, $$this, $$thisp, object))
				{
					return $es4.$$get(rootConstructs, $$this, $$thisp, object);
				}
				throw $es4.$$primitive(new (Error)('could not lookup root construct: ' + object));
			}
			else if ($es4.$$get(object, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'ImportConstruct'))
			{
				return $es4.$$call($$thisp, $$this, $$thisp, 'lookupRootConstruct', [rootConstruct, $es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [$es4.$$get(object, $$this, $$thisp, 'nameConstruct')])]);
			}
			throw $es4.$$primitive(new (Error)('unknown object passed into lookupRootConstruct: ' + $es4.$$get(object, $$this, $$thisp, 'constructor')));
		}));

		//method
		$es4.$$private_function('lookupPackageName', $$thisp, (function ($$$$construct, $$$$object)
		{
			//set default parameter values
			var construct = $$$$construct;
			var object = $$$$object;

			var fullyQualifiedName = $es4.$$call($$thisp, $$this, $$thisp, 'lookupFullyQualifiedName', [construct, object]);
			var parts = $es4.$$call(fullyQualifiedName, $$this, $$thisp, 'split', ['.']);
			if ($es4.$$get(parts, $$this, $$thisp, 'length') > 1)
			{
				$es4.$$call(parts, $$this, $$thisp, 'pop', $es4.$$EMPTY_ARRAY);
				return $es4.$$call(parts, $$this, $$thisp, 'join', ['.']);
			}
			return '';
		}));

		//method
		$es4.$$private_function('lookupFullyQualifiedName', $$thisp, (function ($$$$construct, $$$$object)
		{
			//set default parameter values
			var construct = $$$$construct;
			var object = $$$$object;

			if (!construct || !object)
			{
				throw $es4.$$primitive(new (Error)('cannot find empty construct/object: ' + construct + ', ' + object));
			}
			else if ($es4.$$is(object, String))
			{
				if ($es4.$$get($es4.$$call(object, $$this, $$thisp, 'split', ['.']), $$this, $$thisp, 'length') > 1)
				{
					if ($es4.$$get($$thisp, $$this, $$thisp, '_rootConstructs', object))
					{
						return object;
					}
					throw $es4.$$primitive(new (Error)('could not lookup fully qualified name: ' + object));
				}
				if ($es4.$$get(construct, $$this, $$thisp, 'identifierToken', 'data') == object)
				{
					if ($es4.$$get(construct, $$this, $$thisp, 'packageConstruct'))
					{
						return $es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [$es4.$$get(construct, $$this, $$thisp, 'packageConstruct', 'nameConstruct')]) + '.' + object;
					}
					else
					{
						return object;
					}
				}
				for (var i = 0; i < $es4.$$get(construct, $$this, $$thisp, 'rootConstruct', 'classConstructs', 'length'); i++)
				{
					if ($es4.$$get(construct, $$this, $$thisp, 'rootConstruct', 'classConstructs', i, 'identifierToken', 'data') == object)
					{
						return object;
					}
				}
				for (var i = 0; i < $es4.$$get(construct, $$this, $$thisp, 'rootConstruct', 'interfaceConstructs', 'length'); i++)
				{
					if ($es4.$$get(construct, $$this, $$thisp, 'rootConstruct', 'interfaceConstructs', i, 'identifierToken', 'data') == object)
					{
						return object;
					}
				}
				var importConstructs = ($es4.$$get(construct, $$this, $$thisp, 'isInternal')) ? $es4.$$get(construct, $$this, $$thisp, 'rootConstruct', 'importConstructs') : $es4.$$get(construct, $$this, $$thisp, 'packageConstruct', 'importConstructs');
				for (var i = 0; i < $es4.$$get(importConstructs, $$this, $$thisp, 'length'); i++)
				{
					var nameConstruct = $es4.$$get(importConstructs, $$this, $$thisp, i, 'nameConstruct');
					if ($es4.$$get(nameConstruct, $$this, $$thisp, 'identifierTokens', $es4.$$get(nameConstruct, $$this, $$thisp, 'identifierTokens', 'length') - 1, 'data') == object)
					{
						if ($es4.$$get($$thisp, $$this, $$thisp, '_rootConstructs', $es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [nameConstruct])))
						{
							return $es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [nameConstruct]);
						}
						throw $es4.$$primitive(new (Error)('could not lookup fully qualified name: ' + object + ', ' + $es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [nameConstruct])));
					}
				}
				if (!$es4.$$get(construct, $$this, $$thisp, 'isInternal'))
				{
					var packageName = ($es4.$$get(construct, $$this, $$thisp, 'packageConstruct', 'nameConstruct')) ? $es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [$es4.$$get(construct, $$this, $$thisp, 'packageConstruct', 'nameConstruct')]) : '';
					for (var $$i4 = ($es4.$$get($$thisp, $$this, $$thisp, '_rootConstructs') || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i4 != 0; $$i4 = $es4.$$get($$thisp, $$this, $$thisp, '_rootConstructs').$$nextNameIndex($$i4))
					{
						var id = $es4.$$get($$thisp, $$this, $$thisp, '_rootConstructs').$$nextName($$i4);

						var innerPackageName = ($es4.$$get($$thisp, $$this, $$thisp, '_rootConstructs', id, 'packageConstruct', 'nameConstruct')) ? $es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [$es4.$$get($$thisp, $$this, $$thisp, '_rootConstructs', id, 'packageConstruct', 'nameConstruct')]) : '';
						var name = $es4.$$call($es4.$$call(id, $$this, $$thisp, 'split', ['.']), $$this, $$thisp, 'pop', $es4.$$EMPTY_ARRAY);
						if (packageName == innerPackageName && object == name)
						{
							if ($es4.$$get($$thisp, $$this, $$thisp, '_rootConstructs', id))
							{
								return id;
							}
							throw $es4.$$primitive(new (Error)('could not lookup fully qualified name: ' + object + ', ' + id));
						}
					}
				}
				if ($es4.$$call($$thisp, $$this, $$thisp, '_types', 'hasOwnProperty', ['_' + object]))
				{
					return object;
				}
				$es4.$$call($$thisp, $$this, $$thisp, 'output', $es4.$$EMPTY_ARRAY);
				throw $es4.$$primitive(new (Error)('could not lookup fully qualified name: ' + object + ' in ' + $es4.$$get(construct, $$this, $$thisp, 'identifierToken', 'data')));
			}
			else if ($es4.$$get(object, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'NameConstruct'))
			{
				return $es4.$$call($$thisp, $$this, $$thisp, 'lookupFullyQualifiedName', [construct, $es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [object])]);
			}
			throw $es4.$$primitive(new (Error)('could not lookup fully qualified name: ' + object));
		}));

		//method
		$es4.$$private_function('registerNamespace', $$thisp, (function ($$$$object, $$$$construct)
		{
			//set default parameter values
			var object = $$$$object;
			var construct = (1 > arguments.length - 1) ? null : $$$$construct;

			if (!object)
			{
				return;
			}
			else if (object == 'public' || object == 'private' || object == 'protected' || object == 'internal')
			{
				$es4.$$set($$thisp, $$this, $$thisp, '_namespaces', $es4.$$get($$thisp, $$this, $$thisp, '_level'), '_' + object, $es4.$$primitive(new (NamespaceObj)(object)), '=');
				$es4.$$set($$thisp, $$this, $$thisp, '_namespaces', $es4.$$get($$thisp, $$this, $$thisp, '_level'), '_' + object, 'isCustom', false, '=');
				return;
			}
			throw $es4.$$primitive(new (Error)('unknown object passed into registerNamespace: ' + $es4.$$get(object, $$this, $$thisp, 'constructor')));
		}));

		//method
		$es4.$$private_function('lookupNamespace', $$thisp, (function ($$$$object)
		{
			//set default parameter values
			var object = $$$$object;

			if (!object)
			{
				return $es4.$$call($$thisp, $$this, $$thisp, 'lookupNamespace', ['internal']);
			}
			if ($es4.$$is(object, String))
			{
				var level = $es4.$$get($$thisp, $$this, $$thisp, '_level');
				while (level >= 0)
				{
					if ($es4.$$call($$thisp, $$this, $$thisp, '_namespaces', level, 'hasOwnProperty', ['_' + object]))
					{
						return $es4.$$get($$thisp, $$this, $$thisp, '_namespaces', level, '_' + object);
					}
					level--;
				}
				$es4.$$call($$thisp, $$this, $$thisp, 'output', $es4.$$EMPTY_ARRAY);
				throw $es4.$$primitive(new (Error)('could not lookup namespace: ' + object));
			}
			if ($es4.$$get(object, $$this, $$thisp, 'constructor') == "token" && $es4.$$get(object, $$this, $$thisp, 'type') == $es4.$$get(Token, $$this, $$thisp, 'IdentifierTokenType'))
			{
				return $es4.$$call($$thisp, $$this, $$thisp, 'lookupNamespace', [$es4.$$get(object, $$this, $$thisp, 'data')]);
			}
			throw $es4.$$primitive(new (Error)('unknown object passed into lookupNamespace: ' + $es4.$$get(object, $$this, $$thisp, 'constructor')));
		}));

		//method
		$es4.$$private_function('hasNamespace', $$thisp, (function ($$$$object)
		{
			//set default parameter values
			var object = $$$$object;

			if (!object)
			{
				return true;
			}
			if ($es4.$$is(object, String))
			{
				var level = $es4.$$get($$thisp, $$this, $$thisp, '_level');
				while (level >= 0)
				{
					if ($es4.$$call($$thisp, $$this, $$thisp, '_namespaces', level, 'hasOwnProperty', ['_' + object]))
					{
						return true;
					}
					level--;
				}
				return false;
			}
			if ($es4.$$get(object, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'PropertyConstruct'))
			{
				return $es4.$$call($$thisp, $$this, $$thisp, 'hasNamespace', [$es4.$$get(object, $$this, $$thisp, 'identifierConstruct')]);
			}
			if ($es4.$$get(object, $$this, $$thisp, 'constructor') == "token" && $es4.$$get(object, $$this, $$thisp, 'type') == $es4.$$get(Token, $$this, $$thisp, 'IdentifierTokenType'))
			{
				return $es4.$$call($$thisp, $$this, $$thisp, 'hasNamespace', [$es4.$$get(object, $$this, $$thisp, 'data')]);
			}
			throw $es4.$$primitive(new (Error)('unknown object passed into lookupNamespace: ' + $es4.$$get(object, $$this, $$thisp, 'constructor')));
		}));

		//method
		$es4.$$private_function('registerUseNamespace', $$thisp, (function ($$$$object)
		{
			//set default parameter values
			var object = $$$$object;

			if (!object)
			{
				throw $es4.$$primitive(new (Error)('null object passed to registerUseNamespace'));
			}
			if ($es4.$$get(object, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'UseConstruct') || $es4.$$get(object, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'UseStatement'))
			{
				$es4.$$call($$thisp, $$this, $$thisp, '_useNamespaces', $es4.$$get($$thisp, $$this, $$thisp, '_level'), 'push', [$es4.$$get(object, $$this, $$thisp, 'namespaceIdentifierToken', 'data')]);
				return;
			}
			throw $es4.$$primitive(new (Error)('unknown object passed into registerUseNamespace: ' + $es4.$$get(object, $$this, $$thisp, 'constructor')));
		}));

		//method
		$es4.$$private_function('getUseNamespaces', $$thisp, (function ()
		{
			var useNamespaces = [];
			var level = $es4.$$get($$thisp, $$this, $$thisp, '_level');
			while (level >= 0)
			{
				for (var i = 0; i < $es4.$$get($$thisp, $$this, $$thisp, '_useNamespaces', level, 'length'); i++)
				{
					$es4.$$call(useNamespaces, $$this, $$thisp, 'push', [$es4.$$get($$thisp, $$this, $$thisp, '_useNamespaces', level, i)]);
				}
				level--;
			}
			return useNamespaces;
		}));

		//method
		$es4.$$private_function('registerIdentifier', $$thisp, (function ($$$$object, $$$$construct)
		{
			//set default parameter values
			var object = $$$$object;
			var construct = (1 > arguments.length - 1) ? null : $$$$construct;

			if (!object)
			{
				return;
			}
			var identifier;
			var vectorType;
			if ($es4.$$get(object, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'PackageConstruct'))
			{
				var packageName = $es4.$$get(object, $$this, $$thisp, 'nameConstruct') ? $es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [$es4.$$get(object, $$this, $$thisp, 'nameConstruct')]) : '';
				var name = $es4.$$call($es4.$$call(packageName, $$this, $$thisp, 'split', ['.']), $$this, $$thisp, 'shift', $es4.$$EMPTY_ARRAY);
				if (name)
				{
					identifier = $es4.$$primitive(new (Identifier)(name, $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['PACKAGE', construct])));
				}
				if ($es4.$$get(object, $$this, $$thisp, 'classConstruct'))
				{
					identifier = $es4.$$call($$thisp, $$this, $$thisp, 'registerIdentifier', [$es4.$$get(object, $$this, $$thisp, 'classConstruct'), $es4.$$get(object, $$this, $$thisp, 'classConstruct')]);
					if (!$es4.$$get(object, $$this, $$thisp, 'isInternal') && $es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [$es4.$$get(object, $$this, $$thisp, 'classConstruct', 'packageConstruct', 'nameConstruct')]))
					{
						$es4.$$set($$thisp, $$this, $$thisp, '_identifiers', $es4.$$get($$thisp, $$this, $$thisp, '_level'), '_' + $es4.$$get(identifier, $$this, $$thisp, 'type', 'fullyQualifiedName'), identifier, '=');
					}
				}
				else if ($es4.$$get(object, $$this, $$thisp, 'interfaceConstruct'))
				{
					identifier = $es4.$$call($$thisp, $$this, $$thisp, 'registerIdentifier', [$es4.$$get(object, $$this, $$thisp, 'interfaceConstruct'), $es4.$$get(object, $$this, $$thisp, 'interfaceConstruct')]);
					if (!$es4.$$get(object, $$this, $$thisp, 'isInternal') && $es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [$es4.$$get(object, $$this, $$thisp, 'interfaceConstruct', 'packageConstruct', 'nameConstruct')]))
					{
						$es4.$$set($$thisp, $$this, $$thisp, '_identifiers', $es4.$$get($$thisp, $$this, $$thisp, '_level'), '_' + $es4.$$get(identifier, $$this, $$thisp, 'type', 'fullyQualifiedName'), identifier, '=');
					}
				}
				else if ($es4.$$get(object, $$this, $$thisp, 'methodConstruct'))
				{
					identifier = $es4.$$call($$thisp, $$this, $$thisp, 'registerIdentifier', [$es4.$$get(object, $$this, $$thisp, 'methodConstruct'), $es4.$$get(object, $$this, $$thisp, 'methodConstruct')]);
				}
				else if ($es4.$$get(object, $$this, $$thisp, 'propertyConstruct'))
				{
					identifier = $es4.$$call($$thisp, $$this, $$thisp, 'registerIdentifier', [$es4.$$get(object, $$this, $$thisp, 'propertyConstruct'), $es4.$$get(object, $$this, $$thisp, 'propertyConstruct')]);
				}
				else
				{
					throw $es4.$$primitive(new (Error)('could not register type: ' + object));
				}
				if (!identifier)
				{
					return;
				}
				$es4.$$set(identifier, $$this, $$thisp, 'isImport', true, '=');
				return identifier;
			}
			else if ($es4.$$get(object, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'ClassConstruct') || $es4.$$get(object, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'InterfaceConstruct'))
			{
				var type;
				if ($es4.$$get(object, $$this, $$thisp, 'isInternal'))
				{
					type = $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', [$es4.$$get(object, $$this, $$thisp, 'identifierToken', 'data'), construct]);
				}
				else if ($es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [$es4.$$get(object, $$this, $$thisp, 'packageConstruct', 'nameConstruct')]))
				{
					type = $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', [$es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [$es4.$$get(object, $$this, $$thisp, 'packageConstruct', 'nameConstruct')]) + '.' + $es4.$$get(object, $$this, $$thisp, 'identifierToken', 'data')]);
				}
				else
				{
					type = $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', [$es4.$$get(object, $$this, $$thisp, 'identifierToken', 'data')]);
				}
				identifier = $es4.$$primitive(new (Identifier)($es4.$$get(object, $$this, $$thisp, 'identifierToken', 'data'), type));
				$es4.$$set(identifier, $$this, $$thisp, 'isType', true, '=');
				$es4.$$set(identifier, $$this, $$thisp, 'construct', construct, '=');
				$es4.$$set(identifier, $$this, $$thisp, 'isInternal', $es4.$$get(object, $$this, $$thisp, 'isInternal'), '=');
				var type = $es4.$$primitive(new (Type)($es4.$$get(object, $$this, $$thisp, 'identifierToken', 'data'), $es4.$$get(identifier, $$this, $$thisp, 'type', 'fullyQualifiedName'), $es4.$$get(object, $$this, $$thisp, 'rootConstruct'), construct));
				$es4.$$set($$thisp, $$this, $$thisp, '_types', '_' + $es4.$$get(identifier, $$this, $$thisp, 'type', 'fullyQualifiedName'), type, '=');
				$es4.$$set($$thisp, $$this, $$thisp, '_types', '_' + $es4.$$get(identifier, $$this, $$thisp, 'type', 'name'), type, '=');
			}
			else if ($es4.$$get(object, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'ImportConstruct'))
			{
				var rootConstruct = $es4.$$call($$thisp, $$this, $$thisp, 'lookupRootConstruct', [$es4.$$get($$thisp, $$this, $$thisp, '_rootConstruct'), object]);
				var innerConstruct = $es4.$$call($$thisp, $$this, $$thisp, 'lookupConstructInRootConstruct', [rootConstruct, object]);
				identifier = $es4.$$primitive(new (Identifier)($es4.$$get(object, $$this, $$thisp, 'nameConstruct', 'identifierTokens', 0, 'data'), $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['PACKAGE', construct]), null));
				$es4.$$set(identifier, $$this, $$thisp, 'isPackage', true, '=');
				$es4.$$set($$thisp, $$this, $$thisp, '_identifiers', $es4.$$get($$thisp, $$this, $$thisp, '_level'), '_' + $es4.$$get(identifier, $$this, $$thisp, 'name'), identifier, '=');
				identifier = $es4.$$primitive(new (Identifier)($es4.$$get(innerConstruct, $$this, $$thisp, 'identifierToken', 'data'), $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', [$es4.$$get(innerConstruct, $$this, $$thisp, 'typeConstruct'), construct]), vectorType));
				$es4.$$set(identifier, $$this, $$thisp, 'isType', ($es4.$$get(innerConstruct, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'ClassConstruct') || $es4.$$get(innerConstruct, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'InterfaceConstruct')), '=');
				$es4.$$set(identifier, $$this, $$thisp, 'construct', innerConstruct, '=');
				$es4.$$set(identifier, $$this, $$thisp, 'isImport', true, '=');
				$es4.$$set(identifier, $$this, $$thisp, 'isInternal', $es4.$$get(innerConstruct, $$this, $$thisp, 'isInternal'), '=');
				$es4.$$set(identifier, $$this, $$thisp, 'fullPackageName', $es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [$es4.$$get(object, $$this, $$thisp, 'nameConstruct')]), '=');
				if ($es4.$$get(innerConstruct, $$this, $$thisp, 'namespaceKeywordToken'))
				{
					var namespaceObj = $es4.$$set($$thisp, $$this, $$thisp, '_namespaces', $es4.$$get($$thisp, $$this, $$thisp, '_level'), '_' + $es4.$$get(innerConstruct, $$this, $$thisp, 'identifierToken', 'data'), $es4.$$primitive(new (NamespaceObj)($es4.$$get(innerConstruct, $$this, $$thisp, 'identifierToken', 'data'), $es4.$$call($$thisp, $$this, $$thisp, 'lookupFullyQualifiedName', [construct, $es4.$$get(innerConstruct, $$this, $$thisp, 'identifierToken', 'data')]), identifier)), '=');
					$es4.$$set(namespaceObj, $$this, $$thisp, 'isStatic', true, '=');
					$es4.$$set(namespaceObj, $$this, $$thisp, 'namespaceIsPrivate', false, '=');
					$es4.$$set(identifier, $$this, $$thisp, 'isNamespace', namespaceObj, '=');
				}
				$es4.$$set(identifier, $$this, $$thisp, 'namespaceObj', $es4.$$call($$thisp, $$this, $$thisp, 'lookupNamespace', [$es4.$$get(innerConstruct, $$this, $$thisp, 'namespaceToken')]), '=');
				var type = $es4.$$primitive(new (Type)($es4.$$get(innerConstruct, $$this, $$thisp, 'identifierToken', 'data'), $es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [$es4.$$get(object, $$this, $$thisp, 'nameConstruct')]), rootConstruct, innerConstruct));
				$es4.$$set($$thisp, $$this, $$thisp, '_types', '_' + $es4.$$get(innerConstruct, $$this, $$thisp, 'identifierToken', 'data'), type, '=');
				$es4.$$set($$thisp, $$this, $$thisp, '_types', '_' + $es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [$es4.$$get(object, $$this, $$thisp, 'nameConstruct')]), type, '=');
				return $es4.$$set($$thisp, $$this, $$thisp, '_identifiers', $es4.$$get($$thisp, $$this, $$thisp, '_level'), '_' + $es4.$$get(identifier, $$this, $$thisp, 'name'), $es4.$$set($$thisp, $$this, $$thisp, '_identifiers', $es4.$$get($$thisp, $$this, $$thisp, '_level'), '_' + $es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [$es4.$$get(object, $$this, $$thisp, 'nameConstruct')]), identifier, '='), '=');
			}
			else if ($es4.$$get(object, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'ParameterConstruct'))
			{
				identifier = $es4.$$primitive(new (Identifier)($es4.$$get(object, $$this, $$thisp, 'identifierToken', 'data'), $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', [$es4.$$get(object, $$this, $$thisp, 'typeConstruct'), construct])));
				$es4.$$set(identifier, $$this, $$thisp, 'isVar', true, '=');
			}
			else if ($es4.$$get(object, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'LabelStatement'))
			{
				identifier = $es4.$$primitive(new (Identifier)($es4.$$get(object, $$this, $$thisp, 'identifierToken', 'data'), $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['void', construct])));
				$es4.$$set(identifier, $$this, $$thisp, 'isVar', true, '=');
			}
			else if ($es4.$$get(object, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'VarStatement') || $es4.$$get(object, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'CatchStatement'))
			{
				if ($es4.$$get(object, $$this, $$thisp, 'typeConstruct') && $es4.$$get(object, $$this, $$thisp, 'typeConstruct', 'vectorNameConstruct'))
				{
					vectorType = $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', [$es4.$$get(object, $$this, $$thisp, 'typeConstruct', 'vectorNameConstruct'), construct]);
				}
				identifier = $es4.$$primitive(new (Identifier)($es4.$$get(object, $$this, $$thisp, 'identifierToken', 'data'), $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', [$es4.$$get(object, $$this, $$thisp, 'typeConstruct'), construct]), vectorType));
				$es4.$$set(identifier, $$this, $$thisp, 'isVar', true, '=');
			}
			else if ($es4.$$get(object, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'FunctionExpression'))
			{
				identifier = $es4.$$primitive(new (Identifier)($es4.$$get(object, $$this, $$thisp, 'identifierToken', 'data'), $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', [$es4.$$get(object, $$this, $$thisp, 'typeConstruct'), construct])));
				$es4.$$set(identifier, $$this, $$thisp, 'isVar', true, '=');
			}
			else if (object == 'super')
			{
				identifier = $es4.$$primitive(new (Identifier)(object, $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', [$es4.$$get(construct, $$this, $$thisp, 'identifierToken', 'name'), construct])));
			}
			else if (object == 'this')
			{
				if (!$es4.$$get($$thisp, $$this, $$thisp, '_treatThisAsDynamic'))
				{
					identifier = $es4.$$primitive(new (Identifier)(object, $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', [$es4.$$get(construct, $$this, $$thisp, 'identifierToken', 'name'), construct])));
				}
				else
				{
					identifier = $es4.$$primitive(new (Identifier)(object, $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['Object', construct])));
				}
			}
			else if (object == '$thisp')
			{
				identifier = $es4.$$primitive(new (Identifier)(object, $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', [$es4.$$get(construct, $$this, $$thisp, 'identifierToken', 'name'), construct])));
			}
			else if (object == 'arguments')
			{
				identifier = $es4.$$primitive(new (Identifier)(object, $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['Array'])));
			}
			else if ($es4.$$is(object, String))
			{
				var globalIdentifier = null;
				for (var i = 0; i < $es4.$$get(Analyzer, $$this, $$thisp, 'globalIdentifiers', 'length'); i++)
				{
					if (object != $es4.$$get(Analyzer, $$this, $$thisp, 'globalIdentifiers', i, 'name'))
					{
						continue;
					}
					globalIdentifier = $es4.$$get(Analyzer, $$this, $$thisp, 'globalIdentifiers', i);
					break;
				}
				if (globalIdentifier)
				{
					identifier = $es4.$$primitive(new (Identifier)(object, $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', [$es4.$$get(globalIdentifier, $$this, $$thisp, 'returnType'), construct])));
					$es4.$$set(identifier, $$this, $$thisp, 'isGlobal', true, '=');
				}
				else
				{
					identifier = $es4.$$primitive(new (Identifier)(object, $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', [object, construct])));
					$es4.$$set(identifier, $$this, $$thisp, 'isType', true, '=');
					$es4.$$set(identifier, $$this, $$thisp, 'isGlobal', true, '=');
					$es4.$$set(identifier, $$this, $$thisp, 'construct', $es4.$$get($es4.$$call($$thisp, $$this, $$thisp, 'lookupType', [object, construct]), $$this, $$thisp, 'construct'), '=');
				}
			}
			if ($es4.$$get(object, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'PropertyConstruct') || $es4.$$get(object, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'MethodConstruct') || $es4.$$get(object, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'VarStatement'))
			{
				if ($es4.$$get(object, $$this, $$thisp, 'typeConstruct') && $es4.$$get(object, $$this, $$thisp, 'typeConstruct', 'vectorNameConstruct'))
				{
					vectorType = $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', [$es4.$$get(object, $$this, $$thisp, 'typeConstruct', 'vectorNameConstruct'), construct]);
				}
			}
			if ($es4.$$get(object, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'PropertyConstruct'))
			{
				if ($es4.$$get(object, $$this, $$thisp, 'namespaceToken') && $es4.$$get(object, $$this, $$thisp, 'namespaceToken', 'data') == 'private' && !$es4.$$get($$thisp, $$this, $$thisp, '_doNotTreatPrivateMethodsAsNative'))
				{
					$es4.$$set(object, $$this, $$thisp, 'isNative', true, '=');
				}
				if ($es4.$$get(object, $$this, $$thisp, 'namespaceToken') && $es4.$$get(object, $$this, $$thisp, 'namespaceToken', 'data') == 'private')
				{
					$es4.$$set(object, $$this, $$thisp, 'isPrivate', true, '=');
				}
				var type = $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', [$es4.$$get(object, $$this, $$thisp, 'typeConstruct'), construct]);
				if ($es4.$$get(object, $$this, $$thisp, 'isNative') && !$es4.$$get(object, $$this, $$thisp, 'valueExpression') && $es4.$$get(type, $$this, $$thisp, 'fullyQualifiedName') != '*' && $es4.$$get(type, $$this, $$thisp, 'fullyQualifiedName') != 'void')
				{
					switch ($es4.$$get(type, $$this, $$thisp, 'fullyQualifiedName'))
					{
						case 'Number':
							$es4.$$set(object, $$this, $$thisp, 'valueExpression', $es4.$$call(Construct, $$this, $$thisp, 'getNewExpression', [$es4.$$call(Token, $$this, $$thisp, 'getNewToken', [$es4.$$get(Token, $$this, $$thisp, 'NaNTokenType'), 'NaN'])]), '=');
							break;
						case 'uint':
						case 'int':
							$es4.$$set(object, $$this, $$thisp, 'valueExpression', $es4.$$call(Construct, $$this, $$thisp, 'getNewNumberExpression', $es4.$$EMPTY_ARRAY), '=');
							$es4.$$set(object, $$this, $$thisp, 'valueExpression', 'numberToken', $es4.$$call(Token, $$this, $$thisp, 'getNewToken', [$es4.$$get(Token, $$this, $$thisp, 'NumberTokenType'), '0']), '=');
							break;
						case 'Boolean':
							$es4.$$set(object, $$this, $$thisp, 'valueExpression', $es4.$$call(Construct, $$this, $$thisp, 'getNewBooleanExpression', $es4.$$EMPTY_ARRAY), '=');
							$es4.$$set(object, $$this, $$thisp, 'valueExpression', 'booleanToken', $es4.$$call(Token, $$this, $$thisp, 'getNewToken', [$es4.$$get(Token, $$this, $$thisp, 'BooleanTokenType'), 'false']), '=');
							break;
						default:
							$es4.$$set(object, $$this, $$thisp, 'valueExpression', $es4.$$call(Construct, $$this, $$thisp, 'getNewExpression', [$es4.$$call(Token, $$this, $$thisp, 'getNewToken', [$es4.$$get(Token, $$this, $$thisp, 'NullTokenType'), 'null'])]), '=');
					}
				}
				identifier = $es4.$$primitive(new (Identifier)($es4.$$get(object, $$this, $$thisp, 'identifierToken', 'data'), type, vectorType));
				$es4.$$set(identifier, $$this, $$thisp, 'isProperty', !$es4.$$get(object, $$this, $$thisp, 'isNative'), '=');
				$es4.$$set(identifier, $$this, $$thisp, 'isInternal', $es4.$$get(object, $$this, $$thisp, 'isInternal'), '=');
				$es4.$$set(identifier, $$this, $$thisp, 'isNative', $es4.$$get(object, $$this, $$thisp, 'isNative'), '=');
				$es4.$$set(identifier, $$this, $$thisp, 'isVar', $es4.$$set(identifier, $$this, $$thisp, 'isVarInitialized', $es4.$$get(object, $$this, $$thisp, 'isNative'), '='), '=');
				$es4.$$set(identifier, $$this, $$thisp, 'isPrivate', $es4.$$get(object, $$this, $$thisp, 'isPrivate') && !$es4.$$get(object, $$this, $$thisp, 'isNative'), '=');
				if ($es4.$$get(object, $$this, $$thisp, 'isNative') && $es4.$$get(object, $$this, $$thisp, 'valueExpression'))
				{
					$es4.$$set(object, $$this, $$thisp, 'coerce', $es4.$$call($$thisp, $$this, $$thisp, 'isCoerceRequired', [$es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(object, $$this, $$thisp, 'valueExpression'), $es4.$$get($$thisp, $$this, $$thisp, '_indent'), false, construct]), $es4.$$get(identifier, $$this, $$thisp, 'type'), identifier]), '=');
				}
				if ($es4.$$get(object, $$this, $$thisp, 'namespaceKeywordToken'))
				{
					var namespaceObj = $es4.$$set($$thisp, $$this, $$thisp, '_namespaces', $es4.$$get($$thisp, $$this, $$thisp, '_level'), '_' + $es4.$$get(object, $$this, $$thisp, 'identifierToken', 'data'), $es4.$$primitive(new (NamespaceObj)($es4.$$get(object, $$this, $$thisp, 'identifierToken', 'data'), undefined, identifier)), '=');
					if ($es4.$$get(object, $$this, $$thisp, 'staticToken'))
					{
						$es4.$$set(namespaceObj, $$this, $$thisp, 'isStatic', true, '=');
					}
					$es4.$$set(namespaceObj, $$this, $$thisp, 'namespaceIsPrivate', $es4.$$get(object, $$this, $$thisp, 'namespaceToken', 'data') == 'private', '=');
					$es4.$$set(identifier, $$this, $$thisp, 'isNamespace', namespaceObj, '=');
				}
				$es4.$$set(identifier, $$this, $$thisp, 'namespaceObj', $es4.$$call($$thisp, $$this, $$thisp, 'lookupNamespace', [$es4.$$get(object, $$this, $$thisp, 'namespaceToken')]), '=');
				if ($es4.$$get(object, $$this, $$thisp, 'staticToken'))
				{
					$es4.$$set(identifier, $$this, $$thisp, 'isStatic', true, '=');
					$es4.$$set(identifier, $$this, $$thisp, 'scope', $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', [$es4.$$get(construct, $$this, $$thisp, 'identifierToken', 'data'), construct]), '=');
				}
			}
			else if ($es4.$$get(object, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'MethodConstruct'))
			{
				if ($es4.$$get(object, $$this, $$thisp, 'namespaceToken') && $es4.$$get(object, $$this, $$thisp, 'namespaceToken', 'data') == 'private' && !$es4.$$get($$thisp, $$this, $$thisp, '_doNotTreatPrivateMethodsAsNative'))
				{
					$es4.$$set(object, $$this, $$thisp, 'isNative', true, '=');
				}
				if ($es4.$$get(object, $$this, $$thisp, 'namespaceToken') && $es4.$$get(object, $$this, $$thisp, 'namespaceToken', 'data') == 'private')
				{
					$es4.$$set(object, $$this, $$thisp, 'isPrivate', true, '=');
				}
				identifier = $es4.$$primitive(new (Identifier)($es4.$$get(object, $$this, $$thisp, 'identifierToken', 'data'), $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', [$es4.$$get(object, $$this, $$thisp, 'typeConstruct'), construct]), vectorType));
				$es4.$$set(identifier, $$this, $$thisp, 'isMethod', !$es4.$$get(object, $$this, $$thisp, 'isNative'), '=');
				$es4.$$set(identifier, $$this, $$thisp, 'isInternal', $es4.$$get(object, $$this, $$thisp, 'isInternal'), '=');
				$es4.$$set(identifier, $$this, $$thisp, 'isNative', $es4.$$get(object, $$this, $$thisp, 'isNative'), '=');
				$es4.$$set(identifier, $$this, $$thisp, 'isVar', $es4.$$set(identifier, $$this, $$thisp, 'isVarInitialized', $es4.$$get(object, $$this, $$thisp, 'isNative'), '='), '=');
				$es4.$$set(identifier, $$this, $$thisp, 'isPrivate', $es4.$$get(object, $$this, $$thisp, 'isPrivate') && !$es4.$$get(object, $$this, $$thisp, 'isNative'), '=');
				if ($es4.$$get(object, $$this, $$thisp, 'namespaceKeywordToken'))
				{
					throw $es4.$$primitive(new (Error)('test'));
				}
				$es4.$$set(identifier, $$this, $$thisp, 'namespaceObj', $es4.$$call($$thisp, $$this, $$thisp, 'lookupNamespace', [$es4.$$get(object, $$this, $$thisp, 'namespaceToken')]), '=');
				if ($es4.$$get(object, $$this, $$thisp, 'staticToken'))
				{
					$es4.$$set(identifier, $$this, $$thisp, 'isStatic', true, '=');
					$es4.$$set(identifier, $$this, $$thisp, 'scope', $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', [$es4.$$get(construct, $$this, $$thisp, 'identifierToken', 'data'), construct]), '=');
				}
			}
			else if ($es4.$$get(object, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'VarStatement'))
			{
				identifier = $es4.$$primitive(new (Identifier)($es4.$$get(object, $$this, $$thisp, 'identifierToken', 'data'), $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', [$es4.$$get(object, $$this, $$thisp, 'typeConstruct'), construct]), vectorType));
				$es4.$$set(identifier, $$this, $$thisp, 'isVar', true, '=');
			}
			else if ($es4.$$is(object, Type))
			{
				identifier = $es4.$$primitive(new (Identifier)($es4.$$get(object, $$this, $$thisp, 'name'), object));
			}
			if (identifier)
			{
				var name = ($es4.$$get(identifier, $$this, $$thisp, 'namespaceObj') && $es4.$$get(identifier, $$this, $$thisp, 'namespaceObj', 'isCustom') ? $es4.$$get(identifier, $$this, $$thisp, 'namespaceObj', 'name') + ':::' : '') + $es4.$$get(identifier, $$this, $$thisp, 'name');
				return $es4.$$set($$thisp, $$this, $$thisp, '_identifiers', $es4.$$get($$thisp, $$this, $$thisp, '_level'), '_' + name, identifier, '=');
			}
			throw $es4.$$primitive(new (Error)('unknown object passed into registerIdentifier: ' + $es4.$$get(object, $$this, $$thisp, 'constructor')));
		}));

		//method
		$es4.$$private_function('lookupIdentifier', $$thisp, (function ($$$$object, $$$$namespaceObj)
		{
			//set default parameter values
			var object = $$$$object;
			var namespaceObj = (1 > arguments.length - 1) ? null : $$$$namespaceObj;

			if (!object)
			{
				throw $es4.$$primitive(new (Error)('cannot find empty identifier'));
			}
			else if ($es4.$$is(object, String))
			{
				if (object == 'Vector')
				{
					object = 'Array';
				}
				if (namespaceObj && $es4.$$get(namespaceObj, $$this, $$thisp, 'isCustom'))
				{
					object = $es4.$$get(namespaceObj, $$this, $$thisp, 'name') + ':::' + object;
				}
				var level = $es4.$$get($$thisp, $$this, $$thisp, '_level');
				var useNamespaces = $es4.$$call($$thisp, $$this, $$thisp, 'getUseNamespaces', $es4.$$EMPTY_ARRAY);
				while (level >= 0)
				{
					if ($es4.$$call($$thisp, $$this, $$thisp, '_identifiers', level, 'hasOwnProperty', ['_' + object]))
					{
						return $es4.$$get($$thisp, $$this, $$thisp, '_identifiers', level, '_' + object);
					}
					if (!namespaceObj && $es4.$$get(useNamespaces, $$this, $$thisp, 'length'))
					{
						for (var i = 0; i < $es4.$$get(useNamespaces, $$this, $$thisp, 'length'); i++)
						{
							var innerObject = $es4.$$get(useNamespaces, $$this, $$thisp, i) + ':::' + object;
							if ($es4.$$call($$thisp, $$this, $$thisp, '_identifiers', level, 'hasOwnProperty', ['_' + innerObject]))
							{
								return $es4.$$get($$thisp, $$this, $$thisp, '_identifiers', level, '_' + innerObject);
							}
						}
					}
					level--;
				}
				$es4.$$call($$thisp, $$this, $$thisp, 'output', $es4.$$EMPTY_ARRAY);
				throw $es4.$$primitive(new (Error)('could not lookup identifier: ' + object));
			}
			else if ($es4.$$get(object, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'IdentifierConstruct'))
			{
				return $es4.$$call($$thisp, $$this, $$thisp, 'lookupIdentifier', [$es4.$$get(object, $$this, $$thisp, 'identifierToken', 'data'), namespaceObj]);
			}
			else if ($es4.$$get(object, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'MethodConstruct') || $es4.$$get(object, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'PropertyConstruct'))
			{
				return $es4.$$call($$thisp, $$this, $$thisp, 'lookupIdentifier', [$es4.$$get(object, $$this, $$thisp, 'identifierToken', 'data'), $es4.$$call($$thisp, $$this, $$thisp, 'lookupNamespace', [$es4.$$get(object, $$this, $$thisp, 'namespaceToken')])]);
			}
			else if ($es4.$$get(object, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'ThisConstruct'))
			{
				return $es4.$$call($$thisp, $$this, $$thisp, 'lookupIdentifier', ['this']);
			}
			else if ($es4.$$get(object, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'SuperConstruct'))
			{
				return $es4.$$call($$thisp, $$this, $$thisp, 'lookupIdentifier', ['super']);
			}
			else if ($es4.$$get(object, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'NameConstruct'))
			{
				return $es4.$$call($$thisp, $$this, $$thisp, 'lookupIdentifier', [$es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [object]), namespaceObj]);
			}
			else if ($es4.$$get(object, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'PackageConstruct'))
			{
				if ($es4.$$get(object, $$this, $$thisp, 'classConstruct'))
				{
					return $es4.$$call($$thisp, $$this, $$thisp, 'lookupIdentifier', [$es4.$$get(object, $$this, $$thisp, 'classConstruct', 'identifierToken', 'data')]);
				}
				else if ($es4.$$get(object, $$this, $$thisp, 'interfaceConstruct'))
				{
					return $es4.$$call($$thisp, $$this, $$thisp, 'lookupIdentifier', [$es4.$$get(object, $$this, $$thisp, 'interfaceConstruct', 'identifierToken', 'data')]);
				}
				else if ($es4.$$get(object, $$this, $$thisp, 'methodConstruct'))
				{
					return $es4.$$call($$thisp, $$this, $$thisp, 'lookupIdentifier', [$es4.$$get(object, $$this, $$thisp, 'methodConstruct', 'identifierToken', 'data')]);
				}
				else if ($es4.$$get(object, $$this, $$thisp, 'propertyConstruct'))
				{
					return $es4.$$call($$thisp, $$this, $$thisp, 'lookupIdentifier', [$es4.$$get(object, $$this, $$thisp, 'propertyConstruct', 'identifierToken', 'data')]);
				}
			}
			throw $es4.$$primitive(new (Error)('unknown object passed into lookupIdentifier: ' + $es4.$$get(object, $$this, $$thisp, 'constructor')));
		}));

		//method
		$es4.$$private_function('hasIdentifier', $$thisp, (function ($$$$object, $$$$namespaceObj, $$$$currentLevel)
		{
			//set default parameter values
			var object = $$$$object;
			var namespaceObj = (1 > arguments.length - 1) ? null : $$$$namespaceObj;
			var currentLevel = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$currentLevel, Boolean);

			if (!object)
			{
				throw $es4.$$primitive(new (Error)('cannot find empty identifier'));
			}
			else if ($es4.$$is(object, String))
			{
				if (object == 'Vector')
				{
					object = 'Array';
				}
				if (namespaceObj && $es4.$$get(namespaceObj, $$this, $$thisp, 'isCustom'))
				{
					object = $es4.$$get(namespaceObj, $$this, $$thisp, 'name') + ':::' + object;
				}
				var level = $es4.$$get($$thisp, $$this, $$thisp, '_level');
				var useNamespaces = $es4.$$call($$thisp, $$this, $$thisp, 'getUseNamespaces', $es4.$$EMPTY_ARRAY);
				while (level >= 0)
				{
					if ($es4.$$call($$thisp, $$this, $$thisp, '_identifiers', level, 'hasOwnProperty', ['_' + object]))
					{
						return true;
					}
					if (!namespaceObj && $es4.$$get(useNamespaces, $$this, $$thisp, 'length'))
					{
						for (var i = 0; i < $es4.$$get(useNamespaces, $$this, $$thisp, 'length'); i++)
						{
							var innerObject = $es4.$$get(useNamespaces, $$this, $$thisp, i) + ':::' + object;
							if ($es4.$$call($$thisp, $$this, $$thisp, '_identifiers', level, 'hasOwnProperty', ['_' + innerObject]))
							{
								return true;
							}
						}
					}
					if (currentLevel)
					{
						break;
					}
					level--;
				}
				return false;
			}
			else if ($es4.$$get(object, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'PropertyConstruct'))
			{
				return $es4.$$call($$thisp, $$this, $$thisp, 'hasIdentifier', [$es4.$$get(object, $$this, $$thisp, 'identifierToken', 'data'), $es4.$$call($$thisp, $$this, $$thisp, 'lookupNamespace', [$es4.$$get(object, $$this, $$thisp, 'namespaceToken')])]);
			}
			else if ($es4.$$get(object, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'MethodConstruct'))
			{
				return $es4.$$call($$thisp, $$this, $$thisp, 'hasIdentifier', [$es4.$$get(object, $$this, $$thisp, 'identifierToken', 'data'), $es4.$$call($$thisp, $$this, $$thisp, 'lookupNamespace', [$es4.$$get(object, $$this, $$thisp, 'namespaceToken')])]);
			}
			throw $es4.$$primitive(new (Error)('unknown object passed into hasIdentifier: ' + $es4.$$get(object, $$this, $$thisp, 'constructor')));
		}));

		//method
		$es4.$$private_function('registerType', $$thisp, (function ($$$$object, $$$$rootConstruct, $$$$construct, $$$$isGlobal)
		{
			//set default parameter values
			var object = $$$$object;
			var rootConstruct = $$$$rootConstruct;
			var construct = $$$$construct;
			var isGlobal = $$$$isGlobal;

			if (!object)
			{
				throw $es4.$$primitive(new (Error)('cannot register empty type'));
			}
			else if (object == 'PACKAGE')
			{
				var type = $es4.$$primitive(new (Type)(object, object, rootConstruct, construct));
				$es4.$$set(type, $$this, $$thisp, 'isGlobal', isGlobal, '=');
				$es4.$$set($$thisp, $$this, $$thisp, '_types', '_' + object, type, '=');
				return;
			}
			else if ($es4.$$is(object, String))
			{
				if (object == 'Vector')
				{
					return;
				}
				var type = $es4.$$primitive(new (Type)(object, object, rootConstruct, construct));
				$es4.$$set(type, $$this, $$thisp, 'isGlobal', isGlobal, '=');
				$es4.$$set($$thisp, $$this, $$thisp, '_types', '_' + object, type, '=');
				if (isGlobal)
				{
					$es4.$$call($$thisp, $$this, $$thisp, 'registerIdentifier', [object, rootConstruct]);
				}
				return;
			}
			throw $es4.$$primitive(new (Error)('unknown object passed into registerType: ' + $es4.$$get(object, $$this, $$thisp, 'constructor')));
		}));

		//method
		$es4.$$private_function('lookupType', $$thisp, (function ($$$$object, $$$$construct)
		{
			//set default parameter values
			var object = $$$$object;
			var construct = (1 > arguments.length - 1) ? null : $$$$construct;

			if (!object)
			{
				return $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['void', construct]);
			}
			else if ($es4.$$is(object, String))
			{
				if (object == 'Vector')
				{
					object = 'Array';
				}
				if ($es4.$$call($$thisp, $$this, $$thisp, '_types', 'hasOwnProperty', ['_' + object]))
				{
					return $es4.$$get($$thisp, $$this, $$thisp, '_types', '_' + object);
				}
				if (!construct)
				{
					$es4.$$call($$thisp, $$this, $$thisp, 'output', $es4.$$EMPTY_ARRAY);
					throw $es4.$$primitive(new (Error)('cound not lookup type: ' + object));
				}
				var fullyQualifiedName = $es4.$$call($$thisp, $$this, $$thisp, 'lookupFullyQualifiedName', [construct, object]);
				return $es4.$$set($$thisp, $$this, $$thisp, '_types', '_' + object, ($es4.$$get(construct, $$this, $$thisp, 'isInternal')) ? $es4.$$primitive(new (Type)(object, fullyQualifiedName, $es4.$$get($$thisp, $$this, $$thisp, '_rootConstructs', fullyQualifiedName), construct)) : $es4.$$primitive(new (Type)(object, fullyQualifiedName, $es4.$$get($$thisp, $$this, $$thisp, '_rootConstructs', fullyQualifiedName), $es4.$$call($$thisp, $$this, $$thisp, 'lookupConstructInRootConstruct', [$es4.$$get($$thisp, $$this, $$thisp, '_rootConstructs', fullyQualifiedName), fullyQualifiedName]))), '=');
			}
			else if ($es4.$$get(object, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'TypeConstruct'))
			{
				if (!$es4.$$get(object, $$this, $$thisp, 'nameConstruct'))
				{
					return $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['void', construct]);
				}
				var name = ($es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [$es4.$$get(object, $$this, $$thisp, 'nameConstruct')]) == 'Vector') ? 'Array' : $es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [$es4.$$get(object, $$this, $$thisp, 'nameConstruct')]);
				return $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', [name, construct]);
			}
			else if ($es4.$$get(object, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'NameConstruct'))
			{
				return $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', [$es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [object]), construct]);
			}
			throw $es4.$$primitive(new (Error)('unknown object passed into lookupType: ' + $es4.$$get(object, $$this, $$thisp, 'constructor')));
		}));

		//method
		$es4.$$private_function('analyzeImplicitImports', $$thisp, (function ($$$$construct)
		{
			//set default parameter values
			var construct = $$$$construct;

			if ($es4.$$get(construct, $$this, $$thisp, 'isInternal'))
			{
				return;
			}
			var importConstructs = ($es4.$$get(construct, $$this, $$thisp, 'isInternal')) ? $es4.$$get($$thisp, $$this, $$thisp, '_rootConstruct', 'importConstructs') : $es4.$$get($$thisp, $$this, $$thisp, '_rootConstruct', 'packageConstruct', 'importConstructs');
			var rootConstructs = {};
			outer:			for (var $$i5 = ($es4.$$get($$thisp, $$this, $$thisp, '_rootConstructs') || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i5 != 0; $$i5 = $es4.$$get($$thisp, $$this, $$thisp, '_rootConstructs').$$nextNameIndex($$i5))
			{
				var id = $es4.$$get($$thisp, $$this, $$thisp, '_rootConstructs').$$nextName($$i5);

				var rootConstruct = $es4.$$get($$thisp, $$this, $$thisp, '_rootConstructs', id);
				if (!rootConstruct)
				{
					throw $es4.$$primitive(new (Error)('Root construct null for id: ' + id));
				}
				if (!$es4.$$get(rootConstruct, $$this, $$thisp, 'packageConstruct'))
				{
					throw $es4.$$primitive(new (Error)('Package construct missing in: ' + id));
				}
				if ($es4.$$get(rootConstruct, $$this, $$thisp, 'packageConstruct', 'nameConstruct') && !$es4.$$get(construct, $$this, $$thisp, 'packageConstruct', 'nameConstruct'))
				{
					continue;
				}
				if (!$es4.$$get(rootConstruct, $$this, $$thisp, 'packageConstruct', 'nameConstruct') && $es4.$$get(construct, $$this, $$thisp, 'packageConstruct', 'nameConstruct'))
				{
					continue;
				}
				if ($es4.$$get(rootConstruct, $$this, $$thisp, 'packageConstruct', 'nameConstruct') && $es4.$$get(construct, $$this, $$thisp, 'packageConstruct', 'nameConstruct') && $es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [$es4.$$get(rootConstruct, $$this, $$thisp, 'packageConstruct', 'nameConstruct')]) != $es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [$es4.$$get(construct, $$this, $$thisp, 'packageConstruct', 'nameConstruct')]))
				{
					continue;
				}
				var identifier = $es4.$$call($$thisp, $$this, $$thisp, 'lookupIdentifier', [$es4.$$get(rootConstruct, $$this, $$thisp, 'packageConstruct')]);
				if ($es4.$$get(identifier, $$this, $$thisp, 'isGlobal'))
				{
					continue;
				}
				var fullyQualifiedName = $es4.$$call($$thisp, $$this, $$thisp, 'lookupFullyQualifiedName', [construct, $es4.$$get(identifier, $$this, $$thisp, 'name')]);
				if (!$es4.$$get($es4.$$call($$thisp, $$this, $$thisp, 'lookupType', [$es4.$$get(identifier, $$this, $$thisp, 'name'), construct]), $$this, $$thisp, 'accessed') && !$es4.$$get($es4.$$call($$thisp, $$this, $$thisp, 'lookupIdentifier', [$es4.$$get(identifier, $$this, $$thisp, 'name')]), $$this, $$thisp, 'accessed'))
				{
					continue;
				}
				$es4.$$set(rootConstructs, $$this, $$thisp, id, rootConstruct, '=');
				$es4.$$set(construct, $$this, $$thisp, 'packageName', $es4.$$call($$thisp, $$this, $$thisp, 'lookupPackageName', [construct, $es4.$$get(identifier, $$this, $$thisp, 'name')]), '=');
				var packageName = $es4.$$call(construct, $$this, $$thisp, 'packageName', 'split', ['.']);
				var nameConstruct = $es4.$$call(Construct, $$this, $$thisp, 'getNewNameConstruct', $es4.$$EMPTY_ARRAY);
				for (var i = 0; i < $es4.$$get(packageName, $$this, $$thisp, 'length'); i++)
				{
					$es4.$$call(nameConstruct, $$this, $$thisp, 'identifierTokens', 'push', [$es4.$$call(Token, $$this, $$thisp, 'getNewToken', [$es4.$$get(Token, $$this, $$thisp, 'IdentifierTokenType'), $es4.$$get(packageName, $$this, $$thisp, i)])]);
				}
				$es4.$$call(nameConstruct, $$this, $$thisp, 'identifierTokens', 'push', [$es4.$$call(Token, $$this, $$thisp, 'getNewToken', [$es4.$$get(Token, $$this, $$thisp, 'IdentifierTokenType'), $es4.$$get(identifier, $$this, $$thisp, 'name')])]);
				var importConstruct = $es4.$$call(Construct, $$this, $$thisp, 'getNewImportConstruct', $es4.$$EMPTY_ARRAY);
				$es4.$$set(importConstruct, $$this, $$thisp, 'nameConstruct', nameConstruct, '=');
				for (var i = 0; i < $es4.$$get(importConstructs, $$this, $$thisp, 'length'); i++)
				{
					if ($es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [$es4.$$get(importConstruct, $$this, $$thisp, 'nameConstruct')]) == $es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [$es4.$$get(importConstructs, $$this, $$thisp, i, 'nameConstruct')]))
					{
						continue outer;
					}
				}
				$es4.$$call(importConstructs, $$this, $$thisp, 'push', [importConstruct]);
			}
		}));

		//method
		$es4.$$private_function('analyzeInterfaceConstruct', $$thisp, (function ($$$$construct)
		{
			//set default parameter values
			var construct = $$$$construct;

			$es4.$$call($$thisp, $$this, $$thisp, 'upLevel', $es4.$$EMPTY_ARRAY);
			$es4.$$call($$thisp, $$this, $$thisp, 'registerConstruct', [construct, true]);
			$es4.$$call($$thisp, $$this, $$thisp, 'analyzeImplicitImports', [construct]);
			if ($es4.$$get(construct, $$this, $$thisp, 'extendsNameConstructs', 'length'))
			{
				for (var i = 0; i < $es4.$$get(construct, $$this, $$thisp, 'extendsNameConstructs', 'length'); i++)
				{
					var identifier = $es4.$$set(construct, $$this, $$thisp, 'extendsNameConstructs', i, 'identifier', $es4.$$call($$thisp, $$this, $$thisp, 'lookupIdentifier', [$es4.$$get(construct, $$this, $$thisp, 'extendsNameConstructs', i), construct]), '=');
					var type = $es4.$$set(construct, $$this, $$thisp, 'extendsNameConstructs', i, 'type', $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', [$es4.$$get(construct, $$this, $$thisp, 'extendsNameConstructs', i), construct]), '=');
					$es4.$$set(type, $$this, $$thisp, 'accessed', true, '=');
				}
			}
			var packageName = $es4.$$call($$thisp, $$this, $$thisp, 'lookupPackageName', [construct, $es4.$$get(construct, $$this, $$thisp, 'identifierToken', 'data')]);
			$es4.$$set(construct, $$this, $$thisp, 'packageName', packageName, '=');
			$es4.$$call($$thisp, $$this, $$thisp, 'downLevel', $es4.$$EMPTY_ARRAY);
		}));

		//method
		$es4.$$private_function('analyzePropertyConstruct', $$thisp, (function ($$$$construct)
		{
			//set default parameter values
			var construct = $$$$construct;

			$es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(construct, $$this, $$thisp, 'valueExpression'), $es4.$$get($$thisp, $$this, $$thisp, '_indent'), false, construct]);
		}));

		//method
		$es4.$$private_function('analyzeFunctionConstruct', $$thisp, (function ($$$$construct)
		{
			//set default parameter values
			var construct = $$$$construct;

			$es4.$$call($$thisp, $$this, $$thisp, 'upLevel', $es4.$$EMPTY_ARRAY);
			var importConstructs = $es4.$$get($$thisp, $$this, $$thisp, '_rootConstruct', 'packageConstruct', 'importConstructs');
			var accessor = $es4.$$get(construct, $$this, $$thisp, 'getToken') || $es4.$$get(construct, $$this, $$thisp, 'setToken');
			$es4.$$call($$thisp, $$this, $$thisp, 'registerIdentifier', ['this', construct]);
			$es4.$$call($$thisp, $$this, $$thisp, 'registerIdentifier', ['arguments', construct]);
			for (var $$i6 = ($es4.$$get($$thisp, $$this, $$thisp, '_rootConstructs') || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i6 != 0; $$i6 = $es4.$$get($$thisp, $$this, $$thisp, '_rootConstructs').$$nextNameIndex($$i6))
			{
				var id = $es4.$$get($$thisp, $$this, $$thisp, '_rootConstructs').$$nextName($$i6);

				var rootConstruct = $es4.$$get($$thisp, $$this, $$thisp, '_rootConstructs', id);
				if ($es4.$$get(rootConstruct, $$this, $$thisp, 'packageConstruct', 'nameConstruct') && !$es4.$$get(construct, $$this, $$thisp, 'packageConstruct', 'nameConstruct'))
				{
					continue;
				}
				if (!$es4.$$get(rootConstruct, $$this, $$thisp, 'packageConstruct', 'nameConstruct') && $es4.$$get(construct, $$this, $$thisp, 'packageConstruct', 'nameConstruct'))
				{
					continue;
				}
				if ($es4.$$get(rootConstruct, $$this, $$thisp, 'packageConstruct', 'nameConstruct') && $es4.$$get(construct, $$this, $$thisp, 'packageConstruct', 'nameConstruct') && $es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [$es4.$$get(rootConstruct, $$this, $$thisp, 'packageConstruct', 'nameConstruct')]) != $es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [$es4.$$get(construct, $$this, $$thisp, 'packageConstruct', 'nameConstruct')]))
				{
					continue;
				}
				if ($es4.$$get(Analyzer, $$this, $$thisp, '_globals', id))
				{
					continue;
				}
				$es4.$$call($$thisp, $$this, $$thisp, 'registerIdentifier', [$es4.$$get(rootConstruct, $$this, $$thisp, 'packageConstruct'), construct]);
			}
			for (var i = 0; i < $es4.$$get(importConstructs, $$this, $$thisp, 'length'); i++)
			{
				$es4.$$call($$thisp, $$this, $$thisp, 'registerIdentifier', [$es4.$$get(importConstructs, $$this, $$thisp, i), construct]);
			}
			analyzeClassFunction(construct);
			$es4.$$call($$thisp, $$this, $$thisp, 'analyzeImplicitImports', [construct]);
			$es4.$$call($$thisp, $$this, $$thisp, 'downLevel', $es4.$$EMPTY_ARRAY);

			function analyzeClassFunction($$$$construct) 
			{
				//set default parameter values
				var construct = $$$$construct;

				$es4.$$call($$thisp, $$this, $$thisp, 'upLevel', $es4.$$EMPTY_ARRAY);
				for (var j = 0; j < $es4.$$get(construct, $$this, $$thisp, 'namedFunctionExpressions', 'length'); j++)
				{
					$es4.$$call($$thisp, $$this, $$thisp, 'registerIdentifier', [$es4.$$get(construct, $$this, $$thisp, 'namedFunctionExpressions', j), construct]);
				}
				$es4.$$call($$thisp, $$this, $$thisp, 'analyzeParameters', [construct, construct]);
				if (!$es4.$$get(construct, $$this, $$thisp, 'isJavaScript'))
				{
					$es4.$$call($$thisp, $$this, $$thisp, '_returnTypeStack', 'push', [$es4.$$call($$thisp, $$this, $$thisp, 'lookupType', [$es4.$$get(construct, $$this, $$thisp, 'typeConstruct'), construct])]);
					$es4.$$call($$thisp, $$this, $$thisp, 'analyzeStatements', [$es4.$$get(construct, $$this, $$thisp, 'bodyStatements'), $es4.$$get($$thisp, $$this, $$thisp, '_indent') + 1, construct]);
					$es4.$$call($$thisp, $$this, $$thisp, '_returnTypeStack', 'pop', $es4.$$EMPTY_ARRAY);
				}
				$es4.$$call($$thisp, $$this, $$thisp, 'downLevel', $es4.$$EMPTY_ARRAY);
			}
;
		}));

		//method
		$es4.$$private_function('analyzeClassConstruct', $$thisp, (function ($$$$construct)
		{
			//set default parameter values
			var construct = $$$$construct;

			$es4.$$call($$thisp, $$this, $$thisp, 'upLevel', $es4.$$EMPTY_ARRAY);
			$es4.$$call($$thisp, $$this, $$thisp, 'registerConstruct', [construct, true]);
			for (var i = 0; i < $es4.$$get(construct, $$this, $$thisp, 'useConstructs', 'length'); i++)
			{
				$es4.$$call($$thisp, $$this, $$thisp, 'registerUseNamespace', [$es4.$$get(construct, $$this, $$thisp, 'useConstructs', i)]);
			}
			$es4.$$call($$thisp, $$this, $$thisp, 'analyzeNamespaces', [construct]);
			$es4.$$call($$thisp, $$this, $$thisp, 'analyzeProperties', [construct, true]);
			$es4.$$call($$thisp, $$this, $$thisp, 'analyzeClassInitializer', [construct]);
			$es4.$$call($$thisp, $$this, $$thisp, 'analyzeMethods', [construct, true]);
			$es4.$$call($$thisp, $$this, $$thisp, 'analyzeAccessors', [construct, true]);
			$es4.$$call($$thisp, $$this, $$thisp, 'analyzeClassFunction', [construct]);
			$es4.$$call($$thisp, $$this, $$thisp, 'analyzeInternalClasses', [construct]);
			$es4.$$call($$thisp, $$this, $$thisp, 'analyzeInternalInterfaces', [construct]);
			$es4.$$call($$thisp, $$this, $$thisp, 'analyzeClassReturnStatement', [construct]);
			$es4.$$call($$thisp, $$this, $$thisp, 'analyzeImplicitImports', [construct]);
			$es4.$$call($$thisp, $$this, $$thisp, 'downLevel', $es4.$$EMPTY_ARRAY);
		}));

		//method
		$es4.$$private_function('analyzeClassInitializer', $$thisp, (function ($$$$construct)
		{
			//set default parameter values
			var construct = $$$$construct;

			$es4.$$set($$thisp, $$this, $$thisp, '_inStaticFunction', true, '=');
			$es4.$$call($$thisp, $$this, $$thisp, 'analyzeStatements', [$es4.$$get(construct, $$this, $$thisp, 'initializerStatements'), $es4.$$get($$thisp, $$this, $$thisp, '_indent') + 2, construct]);
			$es4.$$set($$thisp, $$this, $$thisp, '_inStaticFunction', false, '=');
		}));

		//method
		$es4.$$private_function('analyzeClassFunction', $$thisp, (function ($$$$construct)
		{
			//set default parameter values
			var construct = $$$$construct;

			$es4.$$call($$thisp, $$this, $$thisp, 'upLevel', $es4.$$EMPTY_ARRAY);
			$es4.$$call($$thisp, $$this, $$thisp, 'registerConstruct', [construct, false]);
			$es4.$$call($$thisp, $$this, $$thisp, 'analyzeProperties', [construct, false]);
			$es4.$$call($$thisp, $$this, $$thisp, 'analyzeConstructor', [construct]);
			$es4.$$call($$thisp, $$this, $$thisp, 'analyzeMethods', [construct, false]);
			$es4.$$call($$thisp, $$this, $$thisp, 'analyzeAccessors', [construct, false]);
			$es4.$$call($$thisp, $$this, $$thisp, 'downLevel', $es4.$$EMPTY_ARRAY);
		}));

		//method
		$es4.$$private_function('analyzeInternalClasses', $$thisp, (function ($$$$construct)
		{
			//set default parameter values
			var construct = $$$$construct;

			if ($es4.$$get(construct, $$this, $$thisp, 'isInternal'))
			{
				return;
			}
			for (var i = 0; i < $es4.$$get($$thisp, $$this, $$thisp, '_rootConstruct', 'classConstructs', 'length'); i++)
			{
				$es4.$$call($$thisp, $$this, $$thisp, 'analyzeClassConstruct', [$es4.$$get($$thisp, $$this, $$thisp, '_rootConstruct', 'classConstructs', i)]);
			}
		}));

		//method
		$es4.$$private_function('analyzeInternalInterfaces', $$thisp, (function ($$$$construct)
		{
			//set default parameter values
			var construct = $$$$construct;

			if ($es4.$$get(construct, $$this, $$thisp, 'isInternal'))
			{
				return;
			}
			for (var i = 0; i < $es4.$$get($$thisp, $$this, $$thisp, '_rootConstruct', 'interfaceConstructs', 'length'); i++)
			{
				$es4.$$call($$thisp, $$this, $$thisp, 'analyzeInterfaceConstruct', [$es4.$$get($$thisp, $$this, $$thisp, '_rootConstruct', 'interfaceConstructs', i)]);
			}
		}));

		//method
		$es4.$$private_function('analyzeClassReturnStatement', $$thisp, (function ($$$$construct)
		{
			//set default parameter values
			var construct = $$$$construct;

			if ($es4.$$get(construct, $$this, $$thisp, 'extendsNameConstruct'))
			{
				var identifier = $es4.$$set(construct, $$this, $$thisp, 'extendsNameConstruct', 'identifier', $es4.$$call($$thisp, $$this, $$thisp, 'lookupIdentifier', [$es4.$$get(construct, $$this, $$thisp, 'extendsNameConstruct'), construct]), '=');
				var type = $es4.$$set(construct, $$this, $$thisp, 'extendsNameConstruct', 'type', $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', [$es4.$$get(construct, $$this, $$thisp, 'extendsNameConstruct'), construct]), '=');
				$es4.$$set(type, $$this, $$thisp, 'accessed', true, '=');
			}
			if ($es4.$$get(construct, $$this, $$thisp, 'implementsNameConstructs', 'length'))
			{
				for (var i = 0; i < $es4.$$get(construct, $$this, $$thisp, 'implementsNameConstructs', 'length'); i++)
				{
					var identifier = $es4.$$set(construct, $$this, $$thisp, 'implementsNameConstructs', i, 'identifier', $es4.$$call($$thisp, $$this, $$thisp, 'lookupIdentifier', [$es4.$$get(construct, $$this, $$thisp, 'implementsNameConstructs', i), construct]), '=');
					var type = $es4.$$set(construct, $$this, $$thisp, 'implementsNameConstructs', i, 'type', $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', [$es4.$$get(construct, $$this, $$thisp, 'implementsNameConstructs', i), construct]), '=');
					$es4.$$set(type, $$this, $$thisp, 'accessed', true, '=');
				}
			}
			var packageName = $es4.$$call($$thisp, $$this, $$thisp, 'lookupPackageName', [construct, $es4.$$get(construct, $$this, $$thisp, 'identifierToken', 'data')]);
			$es4.$$set(construct, $$this, $$thisp, 'packageName', packageName, '=');
		}));

		//method
		$es4.$$private_function('analyzeConstructor', $$thisp, (function ($$$$construct)
		{
			//set default parameter values
			var construct = $$$$construct;

			$es4.$$call($$thisp, $$this, $$thisp, 'upLevel', $es4.$$EMPTY_ARRAY);
			var methodConstruct = $es4.$$get(construct, $$this, $$thisp, 'constructorMethodConstruct');
			if (methodConstruct)
			{
				for (var j = 0; j < $es4.$$get(methodConstruct, $$this, $$thisp, 'namedFunctionExpressions', 'length'); j++)
				{
					$es4.$$call($$thisp, $$this, $$thisp, 'registerIdentifier', [$es4.$$get(methodConstruct, $$this, $$thisp, 'namedFunctionExpressions', j), construct]);
				}
			}
			if (methodConstruct)
			{
				$es4.$$call($$thisp, $$this, $$thisp, 'analyzeParameters', [methodConstruct, construct]);
			}
			if (methodConstruct)
			{
				$es4.$$call($$thisp, $$this, $$thisp, 'analyzeStatements', [$es4.$$get(methodConstruct, $$this, $$thisp, 'bodyStatements'), $es4.$$get($$thisp, $$this, $$thisp, '_indent') + 1, construct]);
			}
			$es4.$$call($$thisp, $$this, $$thisp, 'downLevel', $es4.$$EMPTY_ARRAY);
		}));

		//method
		$es4.$$private_function('analyzeNamespaces', $$thisp, (function ($$$$construct)
		{
			//set default parameter values
			var construct = $$$$construct;

			for (var i = 0; i < $es4.$$get(construct, $$this, $$thisp, 'propertyConstructs', 'length'); i++)
			{
				var propertyConstruct = $es4.$$get(construct, $$this, $$thisp, 'propertyConstructs', i);
				if (!$es4.$$get(propertyConstruct, $$this, $$thisp, 'namespaceKeywordToken'))
				{
					continue;
				}
				var identifier = $es4.$$call($$thisp, $$this, $$thisp, 'lookupIdentifier', [propertyConstruct]);
				$es4.$$set(identifier, $$this, $$thisp, 'type', 'accessed', true, '=');
				$es4.$$set(propertyConstruct, $$this, $$thisp, 'identifier', identifier, '=');
				$es4.$$call(construct, $$this, $$thisp, 'namespacePropertyConstructs', 'push', [propertyConstruct]);
				if ($es4.$$get(propertyConstruct, $$this, $$thisp, 'valueExpression'))
				{
					$es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(propertyConstruct, $$this, $$thisp, 'valueExpression'), $es4.$$get($$thisp, $$this, $$thisp, '_indent'), false, construct]);
				}
			}
		}));

		//method
		$es4.$$private_function('analyzeProperties', $$thisp, (function ($$$$construct, $$$$isClassLevel)
		{
			//set default parameter values
			var construct = $$$$construct;
			var isClassLevel = $$$$isClassLevel;

			for (var i = 0; i < $es4.$$get(construct, $$this, $$thisp, 'propertyConstructs', 'length'); i++)
			{
				var propertyConstruct = $es4.$$get(construct, $$this, $$thisp, 'propertyConstructs', i);
				if (isClassLevel && !$es4.$$get(propertyConstruct, $$this, $$thisp, 'staticToken') || !isClassLevel && $es4.$$get(propertyConstruct, $$this, $$thisp, 'staticToken'))
				{
					continue;
				}
				if ($es4.$$get(propertyConstruct, $$this, $$thisp, 'namespaceKeywordToken'))
				{
					continue;
				}
				var identifier = $es4.$$call($$thisp, $$this, $$thisp, 'lookupIdentifier', [propertyConstruct]);
				$es4.$$set(identifier, $$this, $$thisp, 'type', 'accessed', true, '=');
				$es4.$$set(propertyConstruct, $$this, $$thisp, 'identifier', identifier, '=');
				if (isClassLevel)
				{
					$es4.$$call(construct, $$this, $$thisp, 'staticPropertyConstructs', 'push', [propertyConstruct]);
				}
				else
				{
					$es4.$$call(construct, $$this, $$thisp, 'instancePropertyConstructs', 'push', [propertyConstruct]);
				}
				if ($es4.$$get(propertyConstruct, $$this, $$thisp, 'valueExpression'))
				{
					$es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(propertyConstruct, $$this, $$thisp, 'valueExpression'), $es4.$$get($$thisp, $$this, $$thisp, '_indent'), false, construct]);
				}
			}
		}));

		//method
		$es4.$$private_function('analyzeMethods', $$thisp, (function ($$$$construct, $$$$isClassLevel)
		{
			//set default parameter values
			var construct = $$$$construct;
			var isClassLevel = $$$$isClassLevel;

			if (isClassLevel)
			{
				$es4.$$set($$thisp, $$this, $$thisp, '_inStaticFunction', true, '=');
			}
			for (var i = 0; i < $es4.$$get(construct, $$this, $$thisp, 'methodConstructs', 'length'); i++)
			{
				var methodConstruct = $es4.$$get(construct, $$this, $$thisp, 'methodConstructs', i);
				if (isClassLevel && !$es4.$$get(methodConstruct, $$this, $$thisp, 'staticToken') || !isClassLevel && $es4.$$get(methodConstruct, $$this, $$thisp, 'staticToken'))
				{
					continue;
				}
				if ($es4.$$get(methodConstruct, $$this, $$thisp, 'setToken') || $es4.$$get(methodConstruct, $$this, $$thisp, 'getToken'))
				{
					continue;
				}
				var identifier = $es4.$$call($$thisp, $$this, $$thisp, 'lookupIdentifier', [methodConstruct]);
				$es4.$$set(identifier, $$this, $$thisp, 'type', 'accessed', true, '=');
				$es4.$$set(methodConstruct, $$this, $$thisp, 'identifier', identifier, '=');
				if (isClassLevel)
				{
					$es4.$$call(construct, $$this, $$thisp, 'staticMethodConstructs', 'push', [methodConstruct]);
				}
				else
				{
					$es4.$$call(construct, $$this, $$thisp, 'instanceMethodConstructs', 'push', [methodConstruct]);
				}
				$es4.$$call($$thisp, $$this, $$thisp, 'upLevel', $es4.$$EMPTY_ARRAY);
				$es4.$$call($$thisp, $$this, $$thisp, 'registerIdentifier', ['arguments', construct]);
				for (var j = 0; j < $es4.$$get(methodConstruct, $$this, $$thisp, 'namedFunctionExpressions', 'length'); j++)
				{
					$es4.$$call($$thisp, $$this, $$thisp, 'registerIdentifier', [$es4.$$get(methodConstruct, $$this, $$thisp, 'namedFunctionExpressions', j), construct]);
				}
				$es4.$$call($$thisp, $$this, $$thisp, 'analyzeParameters', [methodConstruct, construct]);
				if (!$es4.$$get(methodConstruct, $$this, $$thisp, 'isJavaScript'))
				{
					if ($es4.$$get(methodConstruct, $$this, $$thisp, 'identifier', 'namespaceObj', 'isCustom'))
					{
						$es4.$$set($$thisp, $$this, $$thisp, '_inNamespacedFunction', ($es4.$$get(methodConstruct, $$this, $$thisp, 'identifier', 'namespaceObj', 'importID')) ? $es4.$$get(methodConstruct, $$this, $$thisp, 'identifier', 'namespaceObj', 'importID') : '$thisp.' + $es4.$$get(methodConstruct, $$this, $$thisp, 'identifier', 'namespaceObj', 'name'), '=');
					}
					$es4.$$call($$thisp, $$this, $$thisp, '_returnTypeStack', 'push', [$es4.$$call($$thisp, $$this, $$thisp, 'lookupType', [$es4.$$get(methodConstruct, $$this, $$thisp, 'typeConstruct'), construct])]);
					$es4.$$call($$thisp, $$this, $$thisp, 'analyzeStatements', [$es4.$$get(methodConstruct, $$this, $$thisp, 'bodyStatements'), $es4.$$get($$thisp, $$this, $$thisp, '_indent') + 1, construct]);
					$es4.$$call($$thisp, $$this, $$thisp, '_returnTypeStack', 'pop', $es4.$$EMPTY_ARRAY);
					$es4.$$set($$thisp, $$this, $$thisp, '_inNamespacedFunction', false, '=');
				}
				$es4.$$call($$thisp, $$this, $$thisp, 'downLevel', $es4.$$EMPTY_ARRAY);
			}
			if (isClassLevel)
			{
				$es4.$$set($$thisp, $$this, $$thisp, '_inStaticFunction', false, '=');
			}
		}));

		//method
		$es4.$$private_function('analyzeAccessors', $$thisp, (function ($$$$construct, $$$$isClassLevel)
		{
			//set default parameter values
			var construct = $$$$construct;
			var isClassLevel = $$$$isClassLevel;

			if (isClassLevel)
			{
				$es4.$$set($$thisp, $$this, $$thisp, '_inStaticFunction', true, '=');
			}
			var foundIndexes = [];

			function getMethodConstructJS($$$$methodConstruct, $$$$type) 
			{
				//set default parameter values
				var methodConstruct = $$$$methodConstruct;
				var type = $$$$type;

				if (!methodConstruct)
				{
					return;
				}
				$es4.$$call($$thisp, $$this, $$thisp, 'upLevel', $es4.$$EMPTY_ARRAY);
				for (var j = 0; j < $es4.$$get(methodConstruct, $$this, $$thisp, 'namedFunctionExpressions', 'length'); j++)
				{
					$es4.$$call($$thisp, $$this, $$thisp, 'registerIdentifier', [$es4.$$get(methodConstruct, $$this, $$thisp, 'namedFunctionExpressions', j), construct]);
				}
				$es4.$$call($$thisp, $$this, $$thisp, 'analyzeParameters', [methodConstruct, construct]);
				if (!$es4.$$get(methodConstruct, $$this, $$thisp, 'isJavaScript'))
				{
					if ($es4.$$get(methodConstruct, $$this, $$thisp, 'identifier', 'namespaceObj', 'isCustom'))
					{
						$es4.$$set($$thisp, $$this, $$thisp, '_inNamespacedFunction', ($es4.$$get(methodConstruct, $$this, $$thisp, 'identifier', 'namespaceObj', 'importID')) ? $es4.$$get(methodConstruct, $$this, $$thisp, 'identifier', 'namespaceObj', 'importID') : '$thisp.' + $es4.$$get(methodConstruct, $$this, $$thisp, 'identifier', 'namespaceObj', 'name'), '=');
					}
					$es4.$$call($$thisp, $$this, $$thisp, '_returnTypeStack', 'push', [type]);
					$es4.$$call($$thisp, $$this, $$thisp, 'analyzeStatements', [$es4.$$get(methodConstruct, $$this, $$thisp, 'bodyStatements'), $es4.$$get($$thisp, $$this, $$thisp, '_indent') + 1, construct]);
					$es4.$$call($$thisp, $$this, $$thisp, '_returnTypeStack', 'pop', $es4.$$EMPTY_ARRAY);
					$es4.$$set($$thisp, $$this, $$thisp, '_inNamespacedFunction', false, '=');
				}
				$es4.$$call($$thisp, $$this, $$thisp, 'downLevel', $es4.$$EMPTY_ARRAY);
			}
;

			for (var i = 0; i < $es4.$$get(construct, $$this, $$thisp, 'methodConstructs', 'length'); i++)
			{
				var methodConstruct = $es4.$$get(construct, $$this, $$thisp, 'methodConstructs', i);
				if ($es4.$$get(foundIndexes, $$this, $$thisp, i))
				{
					continue;
				}
				if (!$es4.$$get(methodConstruct, $$this, $$thisp, 'setToken') && !$es4.$$get(methodConstruct, $$this, $$thisp, 'getToken'))
				{
					continue;
				}
				if (isClassLevel && !$es4.$$get(methodConstruct, $$this, $$thisp, 'staticToken') || !isClassLevel && $es4.$$get(methodConstruct, $$this, $$thisp, 'staticToken'))
				{
					continue;
				}
				var setterMethodConstruct = null;
				var getterMethodConstruct = null;
				if ($es4.$$get(methodConstruct, $$this, $$thisp, 'setToken'))
				{
					setterMethodConstruct = methodConstruct;
					for (var j = 0; j < $es4.$$get(construct, $$this, $$thisp, 'methodConstructs', 'length'); j++)
					{
						var innerMethodConstruct = $es4.$$get(construct, $$this, $$thisp, 'methodConstructs', j);
						if (!$es4.$$get(innerMethodConstruct, $$this, $$thisp, 'getToken'))
						{
							continue;
						}
						if ($es4.$$get(innerMethodConstruct, $$this, $$thisp, 'identifierToken', 'data') != $es4.$$get(setterMethodConstruct, $$this, $$thisp, 'identifierToken', 'data'))
						{
							continue;
						}
						if (isClassLevel && !$es4.$$get(innerMethodConstruct, $$this, $$thisp, 'staticToken') || !isClassLevel && $es4.$$get(innerMethodConstruct, $$this, $$thisp, 'staticToken'))
						{
							continue;
						}
						if ($es4.$$call($$thisp, $$this, $$thisp, 'lookupNamespace', [$es4.$$get(innerMethodConstruct, $$this, $$thisp, 'namespaceToken')]) != $es4.$$call($$thisp, $$this, $$thisp, 'lookupNamespace', [$es4.$$get(setterMethodConstruct, $$this, $$thisp, 'namespaceToken')]))
						{
							continue;
						}
						var namespace1 = $es4.$$call($$thisp, $$this, $$thisp, 'lookupNamespace', [$es4.$$get(setterMethodConstruct, $$this, $$thisp, 'namespaceToken')]);
						var namespace2 = $es4.$$call($$thisp, $$this, $$thisp, 'lookupNamespace', [$es4.$$get(innerMethodConstruct, $$this, $$thisp, 'namespaceToken')]);
						if (namespace1 != namespace2)
						{
							continue;
						}
						getterMethodConstruct = innerMethodConstruct;
						$es4.$$set(foundIndexes, $$this, $$thisp, j, true, '=');
					}
				}
				else
				{
					getterMethodConstruct = methodConstruct;
					for (var j = 0; j < $es4.$$get(construct, $$this, $$thisp, 'methodConstructs', 'length'); j++)
					{
						var innerMethodConstruct = $es4.$$get(construct, $$this, $$thisp, 'methodConstructs', j);
						if (!$es4.$$get(innerMethodConstruct, $$this, $$thisp, 'setToken'))
						{
							continue;
						}
						if ($es4.$$get(innerMethodConstruct, $$this, $$thisp, 'identifierToken', 'data') != $es4.$$get(getterMethodConstruct, $$this, $$thisp, 'identifierToken', 'data'))
						{
							continue;
						}
						if (isClassLevel && !$es4.$$get(innerMethodConstruct, $$this, $$thisp, 'staticToken') || !isClassLevel && $es4.$$get(innerMethodConstruct, $$this, $$thisp, 'staticToken'))
						{
							continue;
						}
						if ($es4.$$call($$thisp, $$this, $$thisp, 'lookupNamespace', [$es4.$$get(innerMethodConstruct, $$this, $$thisp, 'namespaceToken')]) != $es4.$$call($$thisp, $$this, $$thisp, 'lookupNamespace', [$es4.$$get(getterMethodConstruct, $$this, $$thisp, 'namespaceToken')]))
						{
							continue;
						}
						var namespace1 = $es4.$$call($$thisp, $$this, $$thisp, 'lookupNamespace', [$es4.$$get(getterMethodConstruct, $$this, $$thisp, 'namespaceToken')]);
						var namespace2 = $es4.$$call($$thisp, $$this, $$thisp, 'lookupNamespace', [$es4.$$get(innerMethodConstruct, $$this, $$thisp, 'namespaceToken')]);
						if (namespace1 != namespace2)
						{
							continue;
						}
						setterMethodConstruct = innerMethodConstruct;
						$es4.$$set(foundIndexes, $$this, $$thisp, j, true, '=');
					}
				}
				if (setterMethodConstruct)
				{
					var identifier = $es4.$$call($$thisp, $$this, $$thisp, 'lookupIdentifier', [setterMethodConstruct]);
					$es4.$$set(identifier, $$this, $$thisp, 'type', 'accessed', true, '=');
					$es4.$$set(setterMethodConstruct, $$this, $$thisp, 'identifier', identifier, '=');
				}
				if (getterMethodConstruct)
				{
					var identifier = $es4.$$call($$thisp, $$this, $$thisp, 'lookupIdentifier', [getterMethodConstruct]);
					$es4.$$set(identifier, $$this, $$thisp, 'type', 'accessed', true, '=');
					$es4.$$set(getterMethodConstruct, $$this, $$thisp, 'identifier', identifier, '=');
				}
				var isCNamespace = $es4.$$get(methodConstruct, $$this, $$thisp, 'identifier', 'namespaceObj', 'isCustom');
				if (isClassLevel)
				{
					$es4.$$call(construct, $$this, $$thisp, 'staticAccessorConstructs', 'push', [{getter:getterMethodConstruct, setter:setterMethodConstruct}]);
				}
				else
				{
					$es4.$$call(construct, $$this, $$thisp, 'instanceAccessorConstructs', 'push', [{getter:getterMethodConstruct, setter:setterMethodConstruct}]);
				}
				if (getterMethodConstruct)
				{
					getMethodConstructJS(getterMethodConstruct, $es4.$$get(getterMethodConstruct, $$this, $$thisp, 'identifier', 'type'));
				}
				if (setterMethodConstruct)
				{
					getMethodConstructJS(setterMethodConstruct, $es4.$$get(setterMethodConstruct, $$this, $$thisp, 'identifier', 'type'));
				}
			}
			if (isClassLevel)
			{
				$es4.$$set($$thisp, $$this, $$thisp, '_inStaticFunction', false, '=');
			}
		}));

		//method
		$es4.$$private_function('registerConstruct', $$thisp, (function ($$$$construct, $$$$isClassLevel)
		{
			//set default parameter values
			var construct = $$$$construct;
			var isClassLevel = $$$$isClassLevel;

			if (isClassLevel)
			{
				if (!$es4.$$get(construct, $$this, $$thisp, 'isInternal'))
				{
					for (var $$i7 = ($es4.$$get($$thisp, $$this, $$thisp, '_rootConstructs') || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i7 != 0; $$i7 = $es4.$$get($$thisp, $$this, $$thisp, '_rootConstructs').$$nextNameIndex($$i7))
					{
						var id = $es4.$$get($$thisp, $$this, $$thisp, '_rootConstructs').$$nextName($$i7);

						var rootConstruct = $es4.$$get($$thisp, $$this, $$thisp, '_rootConstructs', id);
						if (!rootConstruct)
						{
							throw $es4.$$primitive(new (Error)('Root construct null for id: ' + id));
						}
						if (!$es4.$$get(rootConstruct, $$this, $$thisp, 'packageConstruct'))
						{
							throw $es4.$$primitive(new (Error)('Package construct missing in: ' + id));
						}
						if ($es4.$$get(rootConstruct, $$this, $$thisp, 'packageConstruct', 'nameConstruct') && !$es4.$$get(construct, $$this, $$thisp, 'packageConstruct', 'nameConstruct'))
						{
							continue;
						}
						if (!$es4.$$get(rootConstruct, $$this, $$thisp, 'packageConstruct', 'nameConstruct') && $es4.$$get(construct, $$this, $$thisp, 'packageConstruct', 'nameConstruct'))
						{
							continue;
						}
						if ($es4.$$get(rootConstruct, $$this, $$thisp, 'packageConstruct', 'nameConstruct') && $es4.$$get(construct, $$this, $$thisp, 'packageConstruct', 'nameConstruct') && $es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [$es4.$$get(rootConstruct, $$this, $$thisp, 'packageConstruct', 'nameConstruct')]) != $es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [$es4.$$get(construct, $$this, $$thisp, 'packageConstruct', 'nameConstruct')]))
						{
							continue;
						}
						if ($es4.$$call($$thisp, $$this, $$thisp, 'hasIdentifier', [id]) && $es4.$$get($es4.$$call($$thisp, $$this, $$thisp, 'lookupIdentifier', [id]), $$this, $$thisp, 'isGlobal'))
						{
							continue;
						}
						$es4.$$call($$thisp, $$this, $$thisp, 'registerIdentifier', [$es4.$$get(rootConstruct, $$this, $$thisp, 'packageConstruct'), construct]);
					}
				}
				var importConstructs = ($es4.$$get(construct, $$this, $$thisp, 'isInternal')) ? $es4.$$get($$thisp, $$this, $$thisp, '_rootConstruct', 'importConstructs') : $es4.$$get($$thisp, $$this, $$thisp, '_rootConstruct', 'packageConstruct', 'importConstructs');
				for (var i = 0; i < $es4.$$get(importConstructs, $$this, $$thisp, 'length'); i++)
				{
					$es4.$$call($$thisp, $$this, $$thisp, 'registerIdentifier', [$es4.$$get(importConstructs, $$this, $$thisp, i), construct]);
				}
			}
			else
			{
				$es4.$$call($$thisp, $$this, $$thisp, 'registerIdentifier', ['this', construct]);
				$es4.$$call($$thisp, $$this, $$thisp, 'registerIdentifier', ['$thisp', construct]);
				if ($es4.$$get(construct, $$this, $$thisp, 'extendsNameConstruct'))
				{
					$es4.$$call($$thisp, $$this, $$thisp, 'registerIdentifier', ['super', construct]);
				}
			}
			var name = $es4.$$get(construct, $$this, $$thisp, 'identifierToken', 'data');
			var nextConstruct = construct;
			while (true)
			{
				for (var i = 0; i < $es4.$$get(nextConstruct, $$this, $$thisp, 'propertyConstructs', 'length'); i++)
				{
					var propertyConstruct = $es4.$$get(nextConstruct, $$this, $$thisp, 'propertyConstructs', i);
					if (!isClassLevel)
					{
						continue;
					}
					if (!$es4.$$get(propertyConstruct, $$this, $$thisp, 'namespaceKeywordToken'))
					{
						continue;
					}
					$es4.$$call($$thisp, $$this, $$thisp, 'registerIdentifier', [propertyConstruct, nextConstruct]);
				}
				if (!$es4.$$get(nextConstruct, $$this, $$thisp, 'extendsNameConstruct'))
				{
					break;
				}
				var fullyQualifiedName = $es4.$$call($$thisp, $$this, $$thisp, 'lookupFullyQualifiedName', [nextConstruct, $es4.$$get(nextConstruct, $$this, $$thisp, 'extendsNameConstruct')]);
				if ($es4.$$call($es4.$$call(fullyQualifiedName, $$this, $$thisp, 'split', ['.']), $$this, $$thisp, 'pop', $es4.$$EMPTY_ARRAY) == name)
				{
					$es4.$$set(construct, $$this, $$thisp, 'extendsNameConflict', true, '=');
				}
				nextConstruct = $es4.$$call($$thisp, $$this, $$thisp, 'lookupConstructInRootConstruct', [$es4.$$call($$thisp, $$this, $$thisp, 'lookupRootConstruct', [$es4.$$get(nextConstruct, $$this, $$thisp, 'rootConstruct'), fullyQualifiedName]), fullyQualifiedName]);
			}
			var firstIteration = true;
			while (true)
			{
				for (var i = 0; i < $es4.$$get(construct, $$this, $$thisp, 'methodConstructs', 'length'); i++)
				{
					var methodConstruct = $es4.$$get(construct, $$this, $$thisp, 'methodConstructs', i);
					if (Boolean($es4.$$get(methodConstruct, $$this, $$thisp, 'staticToken')) != isClassLevel)
					{
						continue;
					}
					if (!firstIteration && !$es4.$$call($$thisp, $$this, $$thisp, 'hasNamespace', [$es4.$$get(methodConstruct, $$this, $$thisp, 'namespaceToken')]))
					{
						continue;
					}
					var namespace = $es4.$$call($$thisp, $$this, $$thisp, 'lookupNamespace', [$es4.$$get(methodConstruct, $$this, $$thisp, 'namespaceToken')]);
					if ($es4.$$call($$thisp, $$this, $$thisp, 'hasIdentifier', [methodConstruct, namespace]))
					{
						var identifier = $es4.$$call($$thisp, $$this, $$thisp, 'lookupIdentifier', [methodConstruct, namespace]);
						if (!$es4.$$get(identifier, $$this, $$thisp, 'isGlobal') && !$es4.$$get(identifier, $$this, $$thisp, 'isStatic'))
						{
							continue;
						}
					}
					if (!firstIteration && $es4.$$get(methodConstruct, $$this, $$thisp, 'namespaceToken') && $es4.$$get(methodConstruct, $$this, $$thisp, 'namespaceToken', 'data') == 'private')
					{
						continue;
					}
					if (firstIteration || !$es4.$$call($$thisp, $$this, $$thisp, 'hasIdentifier', [methodConstruct, namespace, true]))
					{
						$es4.$$call($$thisp, $$this, $$thisp, 'registerIdentifier', [methodConstruct, construct]);
					}
				}
				for (var i = 0; i < $es4.$$get(construct, $$this, $$thisp, 'propertyConstructs', 'length'); i++)
				{
					var propertyConstruct = $es4.$$get(construct, $$this, $$thisp, 'propertyConstructs', i);
					if (Boolean($es4.$$get(propertyConstruct, $$this, $$thisp, 'staticToken')) != isClassLevel && !$es4.$$get(propertyConstruct, $$this, $$thisp, 'namespaceKeywordToken'))
					{
						continue;
					}
					if (!firstIteration && !$es4.$$call($$thisp, $$this, $$thisp, 'hasNamespace', [$es4.$$get(propertyConstruct, $$this, $$thisp, 'namespaceToken')]))
					{
						continue;
					}
					var namespace = $es4.$$call($$thisp, $$this, $$thisp, 'lookupNamespace', [$es4.$$get(propertyConstruct, $$this, $$thisp, 'namespaceToken')]);
					if ($es4.$$call($$thisp, $$this, $$thisp, 'hasIdentifier', [propertyConstruct, namespace]))
					{
						var identifier = $es4.$$call($$thisp, $$this, $$thisp, 'lookupIdentifier', [propertyConstruct, namespace]);
						if (!$es4.$$get(identifier, $$this, $$thisp, 'isGlobal') && !$es4.$$get(identifier, $$this, $$thisp, 'isStatic'))
						{
							continue;
						}
					}
					if (!firstIteration && $es4.$$get(propertyConstruct, $$this, $$thisp, 'namespaceToken') && $es4.$$get(propertyConstruct, $$this, $$thisp, 'namespaceToken', 'data') == 'private')
					{
						continue;
					}
					if (firstIteration || !$es4.$$call($$thisp, $$this, $$thisp, 'hasIdentifier', [propertyConstruct, namespace, true]))
					{
						$es4.$$call($$thisp, $$this, $$thisp, 'registerIdentifier', [propertyConstruct, construct]);
					}
				}
				if (!$es4.$$get(construct, $$this, $$thisp, 'extendsNameConstruct'))
				{
					break;
				}
				firstIteration = false;
				var fullyQualifiedName = $es4.$$call($$thisp, $$this, $$thisp, 'lookupFullyQualifiedName', [construct, $es4.$$get(construct, $$this, $$thisp, 'extendsNameConstruct')]);
				construct = $es4.$$call($$thisp, $$this, $$thisp, 'lookupConstructInRootConstruct', [$es4.$$call($$thisp, $$this, $$thisp, 'lookupRootConstruct', [$es4.$$get(construct, $$this, $$thisp, 'rootConstruct'), fullyQualifiedName]), fullyQualifiedName]);
			}
		}));

		//method
		$es4.$$private_function('analyzeParameters', $$thisp, (function ($$$$methodConstruct, $$$$construct)
		{
			//set default parameter values
			var methodConstruct = $$$$methodConstruct;
			var construct = $$$$construct;

			for (var i = 0; i < $es4.$$get(methodConstruct, $$this, $$thisp, 'parameterConstructs', 'length'); i++)
			{
				var parameterConstruct = $es4.$$get(methodConstruct, $$this, $$thisp, 'parameterConstructs', i);
				$es4.$$call($$thisp, $$this, $$thisp, 'registerIdentifier', [parameterConstruct, construct]);
				var identifier = $es4.$$call($$thisp, $$this, $$thisp, 'lookupIdentifier', [$es4.$$get(parameterConstruct, $$this, $$thisp, 'identifierToken', 'data')]);
				$es4.$$set(identifier, $$this, $$thisp, 'type', 'accessed', true, '=');
				$es4.$$set(identifier, $$this, $$thisp, 'isVarInitialized', true, '=');
				$es4.$$set(parameterConstruct, $$this, $$thisp, 'identifier', identifier, '=');
				if ($es4.$$get(parameterConstruct, $$this, $$thisp, 'valueExpression'))
				{
					$es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(parameterConstruct, $$this, $$thisp, 'valueExpression'), 0, false, construct]);
				}
			}
		}));

		//method
		$es4.$$private_function('analyzeStatements', $$thisp, (function ($$$$statements, $$$$indent, $$$$construct)
		{
			//set default parameter values
			var statements = $$$$statements;
			var indent = $$$$indent;
			var construct = $$$$construct;

			for (var i = 0; i < $es4.$$get(statements, $$this, $$thisp, 'length'); i++)
			{
				$es4.$$call($$thisp, $$this, $$thisp, 'analyzeStatement', [$es4.$$get(statements, $$this, $$thisp, i), indent + 1, false, construct]);
			}
		}));

		//method
		$es4.$$private_function('analyzeStatement', $$thisp, (function ($$$$statement, $$$$_indent, $$$$inline, $$$$construct)
		{
			//set default parameter values
			var statement = $$$$statement;
			var _indent = $$$$_indent;
			var inline = $$$$inline;
			var construct = $$$$construct;

			if (!construct)
			{
				throw $es4.$$primitive(new (Error)('construct null in analyze statement'));
			}
			switch ($es4.$$get(statement, $$this, $$thisp, 'constructor'))
			{
				case $es4.$$get(Construct, $$this, $$thisp, 'EmptyStatement'):
					break;
				case $es4.$$get(Construct, $$this, $$thisp, 'IfStatement'):
					$es4.$$set($$thisp, $$this, $$thisp, '_inIfStatement', 'postfix', '++');
					$es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(statement, $$this, $$thisp, 'conditionExpression'), _indent, false, construct]);
					$es4.$$call($$thisp, $$this, $$thisp, 'analyzeStatements', [$es4.$$get(statement, $$this, $$thisp, 'bodyStatements'), _indent + 1, construct]);
					for (var i = 0; i < $es4.$$get(statement, $$this, $$thisp, 'elseIfStatements', 'length'); i++)
					{
						$es4.$$call($$thisp, $$this, $$thisp, 'analyzeStatement', [$es4.$$get(statement, $$this, $$thisp, 'elseIfStatements', i), _indent, false, construct]);
					}
					if ($es4.$$get(statement, $$this, $$thisp, 'elseStatement'))
					{
						$es4.$$call($$thisp, $$this, $$thisp, 'analyzeStatement', [$es4.$$get(statement, $$this, $$thisp, 'elseStatement'), _indent, false, construct]);
					}
					$es4.$$set($$thisp, $$this, $$thisp, '_inIfStatement', 'postfix', '--');
					break;
				case $es4.$$get(Construct, $$this, $$thisp, 'ElseIfStatement'):
					$es4.$$set($$thisp, $$this, $$thisp, '_inIfStatement', 'postfix', '++');
					$es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(statement, $$this, $$thisp, 'conditionExpression'), _indent, false, construct]);
					$es4.$$call($$thisp, $$this, $$thisp, 'analyzeStatements', [$es4.$$get(statement, $$this, $$thisp, 'bodyStatements'), _indent + 1, construct]);
					$es4.$$set($$thisp, $$this, $$thisp, '_inIfStatement', 'postfix', '--');
					break;
				case $es4.$$get(Construct, $$this, $$thisp, 'ElseStatement'):
					$es4.$$set($$thisp, $$this, $$thisp, '_inIfStatement', 'postfix', '++');
					$es4.$$call($$thisp, $$this, $$thisp, 'analyzeStatements', [$es4.$$get(statement, $$this, $$thisp, 'bodyStatements'), _indent + 1, construct]);
					$es4.$$set($$thisp, $$this, $$thisp, '_inIfStatement', 'postfix', '--');
					break;
				case $es4.$$get(Construct, $$this, $$thisp, 'WhileStatement'):
					$es4.$$set($$thisp, $$this, $$thisp, '_inIfStatement', 'postfix', '++');
					$es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(statement, $$this, $$thisp, 'conditionExpression'), _indent, false, construct]);
					$es4.$$call($$thisp, $$this, $$thisp, 'analyzeStatements', [$es4.$$get(statement, $$this, $$thisp, 'bodyStatements'), _indent + 1, construct]);
					$es4.$$set($$thisp, $$this, $$thisp, '_inIfStatement', 'postfix', '--');
					break;
				case $es4.$$get(Construct, $$this, $$thisp, 'DoWhileStatement'):
					$es4.$$set($$thisp, $$this, $$thisp, '_inIfStatement', 'postfix', '++');
					$es4.$$call($$thisp, $$this, $$thisp, 'analyzeStatements', [$es4.$$get(statement, $$this, $$thisp, 'bodyStatements'), _indent + 1, construct]);
					$es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(statement, $$this, $$thisp, 'conditionExpression'), _indent, false, construct]);
					$es4.$$set($$thisp, $$this, $$thisp, '_inIfStatement', 'postfix', '--');
					break;
				case $es4.$$get(Construct, $$this, $$thisp, 'ForStatement'):
					$es4.$$set($$thisp, $$this, $$thisp, '_inIfStatement', 'postfix', '++');
					if ($es4.$$get(statement, $$this, $$thisp, 'variableStatement'))
					{
						$es4.$$call($$thisp, $$this, $$thisp, 'analyzeStatement', [$es4.$$get(statement, $$this, $$thisp, 'variableStatement'), 0, true, construct]);
					}
					if ($es4.$$get(statement, $$this, $$thisp, 'conditionExpression'))
					{
						$es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(statement, $$this, $$thisp, 'conditionExpression'), _indent, false, construct]);
					}
					if ($es4.$$get(statement, $$this, $$thisp, 'afterthoughtExpression'))
					{
						$es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(statement, $$this, $$thisp, 'afterthoughtExpression'), _indent, false, construct]);
					}
					$es4.$$call($$thisp, $$this, $$thisp, 'analyzeStatements', [$es4.$$get(statement, $$this, $$thisp, 'bodyStatements'), _indent + 1, construct]);
					$es4.$$set($$thisp, $$this, $$thisp, '_inIfStatement', 'postfix', '--');
					break;
				case $es4.$$get(Construct, $$this, $$thisp, 'ForEachStatement'):
					$es4.$$set($$thisp, $$this, $$thisp, '_count', 'postfix', '++');
					$es4.$$set($$thisp, $$this, $$thisp, '_inIfStatement', 'postfix', '++');
					$es4.$$set(statement, $$this, $$thisp, 'index', $es4.$$get($$thisp, $$this, $$thisp, '_count'), '=');
					$es4.$$set(statement, $$this, $$thisp, 'variableStatement', 'doNotSetDefaultValue', true, '=');
					$es4.$$call($$thisp, $$this, $$thisp, 'analyzeStatement', [$es4.$$get(statement, $$this, $$thisp, 'variableStatement'), 0, true, construct]);
					$es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(statement, $$this, $$thisp, 'arrayExpression'), _indent, false, construct]);
					$es4.$$call($$thisp, $$this, $$thisp, 'analyzeStatements', [$es4.$$get(statement, $$this, $$thisp, 'bodyStatements'), _indent + 1, construct]);
					$es4.$$set($$thisp, $$this, $$thisp, '_inIfStatement', 'postfix', '--');
					break;
				case $es4.$$get(Construct, $$this, $$thisp, 'ForInStatement'):
					$es4.$$set($$thisp, $$this, $$thisp, '_count', 'postfix', '++');
					$es4.$$set($$thisp, $$this, $$thisp, '_inIfStatement', 'postfix', '++');
					$es4.$$set(statement, $$this, $$thisp, 'index', $es4.$$get($$thisp, $$this, $$thisp, '_count'), '=');
					$es4.$$set(statement, $$this, $$thisp, 'variableStatement', 'doNotSetDefaultValue', true, '=');
					$es4.$$call($$thisp, $$this, $$thisp, 'analyzeStatement', [$es4.$$get(statement, $$this, $$thisp, 'variableStatement'), 0, true, construct]);
					$es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(statement, $$this, $$thisp, 'objectExpression'), _indent, false, construct]);
					$es4.$$call($$thisp, $$this, $$thisp, 'analyzeStatements', [$es4.$$get(statement, $$this, $$thisp, 'bodyStatements'), _indent + 1, construct]);
					$es4.$$set($$thisp, $$this, $$thisp, '_inIfStatement', 'postfix', '--');
					break;
				case $es4.$$get(Construct, $$this, $$thisp, 'BreakStatement'):
					if ($es4.$$get(statement, $$this, $$thisp, 'identifierToken'))
					{
						$es4.$$set(statement, $$this, $$thisp, 'identifier', $es4.$$call($$thisp, $$this, $$thisp, 'lookupIdentifier', [$es4.$$get(statement, $$this, $$thisp, 'identifierToken', 'data')]), '=');
					}
					break;
				case $es4.$$get(Construct, $$this, $$thisp, 'ContinueStatement'):
					if ($es4.$$get(statement, $$this, $$thisp, 'identifierToken'))
					{
						$es4.$$set(statement, $$this, $$thisp, 'identifier', $es4.$$call($$thisp, $$this, $$thisp, 'lookupIdentifier', [$es4.$$get(statement, $$this, $$thisp, 'identifierToken', 'data')]), '=');
					}
					break;
				case $es4.$$get(Construct, $$this, $$thisp, 'ThrowStatement'):
					if ($es4.$$get(statement, $$this, $$thisp, 'expression'))
					{
						$es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(statement, $$this, $$thisp, 'expression'), _indent, false, construct]);
					}
					break;
				case $es4.$$get(Construct, $$this, $$thisp, 'TryStatement'):
					$es4.$$call($$thisp, $$this, $$thisp, 'analyzeStatements', [$es4.$$get(statement, $$this, $$thisp, 'bodyStatements'), _indent + 1, construct]);
					for (var i = 0; i < $es4.$$get(statement, $$this, $$thisp, 'catchStatements', 'length'); i++)
					{
						$es4.$$call($$thisp, $$this, $$thisp, 'upLevel', $es4.$$EMPTY_ARRAY);
						var catchStatement = $es4.$$get(statement, $$this, $$thisp, 'catchStatements', i);
						$es4.$$set($$thisp, $$this, $$thisp, '_count', 'postfix', '++');
						$es4.$$set(catchStatement, $$this, $$thisp, 'index', $es4.$$get($$thisp, $$this, $$thisp, '_count'), '=');
						var identifier = $es4.$$call($$thisp, $$this, $$thisp, 'registerIdentifier', [catchStatement, construct]);
						$es4.$$set(identifier, $$this, $$thisp, 'isVarInitialized', true, '=');
						$es4.$$set(catchStatement, $$this, $$thisp, 'identifier', identifier, '=');
						$es4.$$call($$thisp, $$this, $$thisp, 'analyzeStatements', [$es4.$$get(catchStatement, $$this, $$thisp, 'bodyStatements'), _indent + 2, construct]);
						$es4.$$call($$thisp, $$this, $$thisp, 'downLevel', $es4.$$EMPTY_ARRAY);
					}
					if ($es4.$$get(statement, $$this, $$thisp, 'finallyStatement'))
					{
						$es4.$$call($$thisp, $$this, $$thisp, 'analyzeStatements', [$es4.$$get(statement, $$this, $$thisp, 'finallyStatement', 'bodyStatements'), _indent + 1, construct]);
					}
					break;
				case $es4.$$get(Construct, $$this, $$thisp, 'UseStatement'):
					$es4.$$call($$thisp, $$this, $$thisp, 'registerUseNamespace', [statement]);
					break;
				case $es4.$$get(Construct, $$this, $$thisp, 'VarStatement'):
					for (var i = 0; i < $es4.$$get(statement, $$this, $$thisp, 'innerVarStatements', 'length'); i++)
					{
						var identifier = $es4.$$call($$thisp, $$this, $$thisp, 'registerIdentifier', [$es4.$$get(statement, $$this, $$thisp, 'innerVarStatements', i), construct]);
						$es4.$$set(statement, $$this, $$thisp, 'innerVarStatements', i, 'identifier', identifier, '=');
					}
					var identifier = $es4.$$call($$thisp, $$this, $$thisp, 'registerIdentifier', [statement, construct]);
					$es4.$$set(statement, $$this, $$thisp, 'identifier', identifier, '=');
					if (!$es4.$$get(statement, $$this, $$thisp, 'valueExpression') && $es4.$$get(statement, $$this, $$thisp, 'identifier', 'type', 'fullyQualifiedName') != '*' && $es4.$$get(statement, $$this, $$thisp, 'identifier', 'type', 'fullyQualifiedName') != 'void' && !$es4.$$get(statement, $$this, $$thisp, 'doNotSetDefaultValue'))
					{
						switch ($es4.$$get(statement, $$this, $$thisp, 'identifier', 'type', 'fullyQualifiedName'))
						{
							case 'Number':
								$es4.$$set(statement, $$this, $$thisp, 'valueExpression', $es4.$$call(Construct, $$this, $$thisp, 'getNewExpression', [$es4.$$call(Token, $$this, $$thisp, 'getNewToken', [$es4.$$get(Token, $$this, $$thisp, 'NaNTokenType'), 'NaN'])]), '=');
								break;
							case 'uint':
							case 'int':
								$es4.$$set(statement, $$this, $$thisp, 'valueExpression', $es4.$$call(Construct, $$this, $$thisp, 'getNewNumberExpression', $es4.$$EMPTY_ARRAY), '=');
								$es4.$$set(statement, $$this, $$thisp, 'valueExpression', 'numberToken', $es4.$$call(Token, $$this, $$thisp, 'getNewToken', [$es4.$$get(Token, $$this, $$thisp, 'NumberTokenType'), '0']), '=');
								break;
							case 'Boolean':
								$es4.$$set(statement, $$this, $$thisp, 'valueExpression', $es4.$$call(Construct, $$this, $$thisp, 'getNewBooleanExpression', $es4.$$EMPTY_ARRAY), '=');
								$es4.$$set(statement, $$this, $$thisp, 'valueExpression', 'booleanToken', $es4.$$call(Token, $$this, $$thisp, 'getNewToken', [$es4.$$get(Token, $$this, $$thisp, 'BooleanTokenType'), 'false']), '=');
								break;
							default:
								$es4.$$set(statement, $$this, $$thisp, 'valueExpression', $es4.$$call(Construct, $$this, $$thisp, 'getNewExpression', [$es4.$$call(Token, $$this, $$thisp, 'getNewToken', [$es4.$$get(Token, $$this, $$thisp, 'NullTokenType'), 'null'])]), '=');
						}
					}
					if ($es4.$$get(statement, $$this, $$thisp, 'valueExpression'))
					{
						var expressionResult = $es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(statement, $$this, $$thisp, 'valueExpression'), _indent, false, construct]);
						if ($es4.$$call($$thisp, $$this, $$thisp, 'isCoerceRequired', [expressionResult, $es4.$$get(statement, $$this, $$thisp, 'identifier', 'type'), $es4.$$get(statement, $$this, $$thisp, 'identifier')]))
						{
							$es4.$$set(statement, $$this, $$thisp, 'coerce', true, '=');
						}
					}
					$es4.$$set(statement, $$this, $$thisp, 'identifier', 'isVarInitialized', true, '=');
					for (var i = 0; i < $es4.$$get(statement, $$this, $$thisp, 'innerVarStatements', 'length'); i++)
					{
						var innerVarStatement = $es4.$$get(statement, $$this, $$thisp, 'innerVarStatements', i);
						if (!$es4.$$get(innerVarStatement, $$this, $$thisp, 'valueExpression') && $es4.$$get(innerVarStatement, $$this, $$thisp, 'identifier', 'type', 'fullyQualifiedName') != '*' && $es4.$$get(innerVarStatement, $$this, $$thisp, 'identifier', 'type', 'fullyQualifiedName') != 'void')
						{
							switch ($es4.$$get(innerVarStatement, $$this, $$thisp, 'identifier', 'type', 'fullyQualifiedName'))
							{
								case 'Number':
									$es4.$$set(innerVarStatement, $$this, $$thisp, 'valueExpression', $es4.$$call(Construct, $$this, $$thisp, 'getNewExpression', [$es4.$$call(Token, $$this, $$thisp, 'getNewToken', [$es4.$$get(Token, $$this, $$thisp, 'NaNTokenType'), 'NaN'])]), '=');
									break;
								case 'uint':
								case 'int':
									$es4.$$set(innerVarStatement, $$this, $$thisp, 'valueExpression', $es4.$$call(Construct, $$this, $$thisp, 'getNewNumberExpression', $es4.$$EMPTY_ARRAY), '=');
									$es4.$$set(innerVarStatement, $$this, $$thisp, 'valueExpression', 'numberToken', $es4.$$call(Token, $$this, $$thisp, 'getNewToken', [$es4.$$get(Token, $$this, $$thisp, 'NumberTokenType'), '0']), '=');
									break;
								case 'Boolean':
									$es4.$$set(innerVarStatement, $$this, $$thisp, 'valueExpression', $es4.$$call(Construct, $$this, $$thisp, 'getNewBooleanExpression', $es4.$$EMPTY_ARRAY), '=');
									$es4.$$set(innerVarStatement, $$this, $$thisp, 'valueExpression', 'booleanToken', $es4.$$call(Token, $$this, $$thisp, 'getNewToken', [$es4.$$get(Token, $$this, $$thisp, 'BooleanTokenType'), 'false']), '=');
									break;
								default:
									$es4.$$set(innerVarStatement, $$this, $$thisp, 'valueExpression', $es4.$$call(Construct, $$this, $$thisp, 'getNewExpression', [$es4.$$call(Token, $$this, $$thisp, 'getNewToken', [$es4.$$get(Token, $$this, $$thisp, 'NullTokenType'), 'null'])]), '=');
							}
						}
						if ($es4.$$get(innerVarStatement, $$this, $$thisp, 'valueExpression'))
						{
							expressionResult = $es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(innerVarStatement, $$this, $$thisp, 'valueExpression'), _indent, false, construct]);
							if ($es4.$$call($$thisp, $$this, $$thisp, 'isCoerceRequired', [expressionResult, $es4.$$get(innerVarStatement, $$this, $$thisp, 'identifier', 'type'), $es4.$$get(innerVarStatement, $$this, $$thisp, 'identifier')]))
							{
								$es4.$$set(innerVarStatement, $$this, $$thisp, 'coerce', true, '=');
							}
						}
						$es4.$$set(innerVarStatement, $$this, $$thisp, 'identifier', 'isVarInitialized', true, '=');
					}
					break;
				case $es4.$$get(Construct, $$this, $$thisp, 'SwitchStatement'):
					$es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(statement, $$this, $$thisp, 'valueExpression'), _indent, false, construct]);
					for (var i = 0; i < $es4.$$get(statement, $$this, $$thisp, 'caseStatements', 'length'); i++)
					{
						$es4.$$call($$thisp, $$this, $$thisp, 'analyzeStatement', [$es4.$$get(statement, $$this, $$thisp, 'caseStatements', i), _indent + 1, false, construct]);
					}
					break;
				case $es4.$$get(Construct, $$this, $$thisp, 'CaseStatement'):
					if (!$es4.$$get(statement, $$this, $$thisp, 'defaultToken'))
					{
						$es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(statement, $$this, $$thisp, 'valueExpression'), _indent, false, construct]);
					}
					$es4.$$call($$thisp, $$this, $$thisp, 'analyzeStatements', [$es4.$$get(statement, $$this, $$thisp, 'bodyStatements'), _indent + 1, construct]);
					break;
				case $es4.$$get(Construct, $$this, $$thisp, 'LabelStatement'):
					var identifier = $es4.$$call($$thisp, $$this, $$thisp, 'registerIdentifier', [statement, construct]);
					$es4.$$set(identifier, $$this, $$thisp, 'isVarInitialized', true, '=');
					$es4.$$set(statement, $$this, $$thisp, 'identifier', identifier, '=');
					break;
				default:
					$es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [statement, _indent, false, construct]);
			}
		}));

		//method
		$es4.$$private_function('analyzeExpression', $$thisp, (function ($$$$expression, $$$$_indent, $$$$toString, $$$$construct, $$$$operator, $$$$expressionString)
		{
			//set default parameter values
			var expression = $$$$expression;
			var _indent = $$$$_indent;
			var toString = $$$$toString;
			var construct = $$$$construct;
			var operator = (4 > arguments.length - 1) ? null : $$$$operator;
			var expressionString = (5 > arguments.length - 1) ? null : $$$$expressionString;

			if (!construct)
			{
				throw $es4.$$primitive(new (Error)('construct null in analyze expression'));
			}
			var expressionResult = $es4.$$primitive(new (ExpressionResult)(null, false, false, false, false));
			outerSwitch:			switch ($es4.$$get(expression, $$this, $$thisp, 'constructor'))
			{
				case $es4.$$get(Construct, $$this, $$thisp, 'ParenExpression'):
					expressionResult = $es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(expression, $$this, $$thisp, 'expression'), _indent, toString, construct, operator, expressionString]);
					break;
				case $es4.$$get(Construct, $$this, $$thisp, 'PropertyExpression'):
					expressionResult = $es4.$$call($$thisp, $$this, $$thisp, 'analyzePropertyExpression', [expression, toString, construct]);
					break;
				case $es4.$$get(Construct, $$this, $$thisp, 'NumberExpression'):
					if ($es4.$$get(expression, $$this, $$thisp, 'numberToken', 'data') == $es4.$$primitive(new (Number)(parseFloat($es4.$$get(expression, $$this, $$thisp, 'numberToken', 'data')) >> 0)))
					{
						$es4.$$set(expressionResult, $$this, $$thisp, 'type', $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['int']), '=');
					}
					else if ($es4.$$get(expression, $$this, $$thisp, 'numberToken', 'data') == $es4.$$primitive(new (Number)(parseFloat($es4.$$get(expression, $$this, $$thisp, 'numberToken', 'data')) >>> 0)))
					{
						$es4.$$set(expressionResult, $$this, $$thisp, 'type', $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['uint']), '=');
					}
					else
					{
						$es4.$$set(expressionResult, $$this, $$thisp, 'type', $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['Number']), '=');
					}
					break;
				case $es4.$$get(Construct, $$this, $$thisp, 'StringExpression'):
					$es4.$$set(expressionResult, $$this, $$thisp, 'type', $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['String']), '=');
					break;
				case $es4.$$get(Construct, $$this, $$thisp, 'ReturnExpression'):
					if ($es4.$$get(expression, $$this, $$thisp, 'expression'))
					{
						$es4.$$set(expression, $$this, $$thisp, 'expectedType', $es4.$$get($$thisp, $$this, $$thisp, '_returnTypeStack', $es4.$$get($$thisp, $$this, $$thisp, '_returnTypeStack', 'length') - 1), '=');
						expressionResult = $es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(expression, $$this, $$thisp, 'expression'), 0, toString, construct]);
						$es4.$$set(expression, $$this, $$thisp, 'coerce', $es4.$$call($$thisp, $$this, $$thisp, 'isCoerceRequired', [expressionResult, $es4.$$get(expression, $$this, $$thisp, 'expectedType')]), '=');
					}
					else
					{
						$es4.$$set(expressionResult, $$this, $$thisp, 'type', $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['void']), '=');
					}
					break;
				case $es4.$$get(Construct, $$this, $$thisp, 'DeleteExpression'):
					expressionResult = $es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(expression, $$this, $$thisp, 'expression'), 0, toString, construct]);
					break;
				case $es4.$$get(Construct, $$this, $$thisp, 'FunctionExpression'):
					var wasInClosure = $es4.$$get($$thisp, $$this, $$thisp, '_inClosure');
					$es4.$$set($$thisp, $$this, $$thisp, '_inClosure', true, '=');
					if ($es4.$$get(expression, $$this, $$thisp, 'identifierToken'))
					{
						if ($es4.$$get($$thisp, $$this, $$thisp, '_inIfStatement'))
						{
							throw $es4.$$primitive(new (Error)('support for named closures in if/elseif/else statements is not supported at this time. function name: ' + $es4.$$get(expression, $$this, $$thisp, 'identifierToken', 'data')));
						}
						var identifier = $es4.$$call($$thisp, $$this, $$thisp, 'registerIdentifier', [expression, construct]);
						$es4.$$set(identifier, $$this, $$thisp, 'isVarInitialized', true, '=');
						$es4.$$set(expression, $$this, $$thisp, 'identifier', identifier, '=');
						$es4.$$set(expressionResult, $$this, $$thisp, 'type', $es4.$$get(identifier, $$this, $$thisp, 'type'), '=');
					}
					else
					{
						$es4.$$set(expressionResult, $$this, $$thisp, 'type', $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', [$es4.$$get(expression, $$this, $$thisp, 'typeConstruct')]), '=');
					}
					for (var i = 0; i < $es4.$$get(expression, $$this, $$thisp, 'namedFunctionExpressions', 'length'); i++)
					{
						var identifier = $es4.$$call($$thisp, $$this, $$thisp, 'registerIdentifier', [$es4.$$get(expression, $$this, $$thisp, 'namedFunctionExpressions', i), construct]);
						$es4.$$set(identifier, $$this, $$thisp, 'isVarInitialized', true, '=');
						$es4.$$set(expression, $$this, $$thisp, 'namedFunctionExpressions', i, 'identifier', identifier, '=');
						$es4.$$set(expression, $$this, $$thisp, 'namedFunctionExpressions', i, 'type', $es4.$$get(identifier, $$this, $$thisp, 'type'), '=');
					}
					$es4.$$call($$thisp, $$this, $$thisp, 'upLevel', $es4.$$EMPTY_ARRAY);
					$es4.$$call($$thisp, $$this, $$thisp, 'analyzeParameters', [expression, construct]);
					$es4.$$call($$thisp, $$this, $$thisp, 'registerIdentifier', ['this', construct]);
					$es4.$$call($$thisp, $$this, $$thisp, '_returnTypeStack', 'push', [$es4.$$get(expressionResult, $$this, $$thisp, 'type')]);
					$es4.$$call($$thisp, $$this, $$thisp, 'analyzeStatements', [$es4.$$get(expression, $$this, $$thisp, 'bodyStatements'), _indent + 1, construct]);
					$es4.$$call($$thisp, $$this, $$thisp, '_returnTypeStack', 'pop', $es4.$$EMPTY_ARRAY);
					if (!wasInClosure)
					{
						$es4.$$set($$thisp, $$this, $$thisp, '_inClosure', false, '=');
					}
					$es4.$$call($$thisp, $$this, $$thisp, 'downLevel', $es4.$$EMPTY_ARRAY);
					break;
				case $es4.$$get(Construct, $$this, $$thisp, 'ObjectExpression'):
					for (var i = 0; i < $es4.$$get(expression, $$this, $$thisp, 'objectPropertyConstructs', 'length'); i++)
					{
						if ($es4.$$get(expression, $$this, $$thisp, 'objectPropertyConstructs', i, 'expression', 'constructor') != $es4.$$get(Construct, $$this, $$thisp, 'PropertyExpression'))
						{
							$es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(expression, $$this, $$thisp, 'objectPropertyConstructs', i, 'expression'), 0, toString, construct]);
						}
						$es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(expression, $$this, $$thisp, 'objectPropertyConstructs', i, 'valueExpression'), 0, toString, construct]);
					}
					$es4.$$set(expressionResult, $$this, $$thisp, 'type', $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['Object']), '=');
					break;
				case $es4.$$get(Construct, $$this, $$thisp, 'ArrayExpression'):
					for (var i = 0; i < $es4.$$get(expression, $$this, $$thisp, 'valueExpressions', 'length'); i++)
					{
						$es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(expression, $$this, $$thisp, 'valueExpressions', i), 0, toString, construct]);
					}
					$es4.$$set(expressionResult, $$this, $$thisp, 'type', $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['Array']), '=');
					break;
				case $es4.$$get(Construct, $$this, $$thisp, 'BooleanExpression'):
					$es4.$$set(expressionResult, $$this, $$thisp, 'type', $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['Boolean']), '=');
					break;
				case $es4.$$get(Construct, $$this, $$thisp, 'Expression'):
					if ($es4.$$get(expression, $$this, $$thisp, 'token', 'type') == $es4.$$get(Token, $$this, $$thisp, 'TypeofTokenType'))
					{
						$es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(expression, $$this, $$thisp, 'expression'), 0, toString, construct]);
						$es4.$$set(expressionResult, $$this, $$thisp, 'type', $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['String']), '=');
						break;
					}
					if ($es4.$$get(expression, $$this, $$thisp, 'token', 'type') == $es4.$$get(Token, $$this, $$thisp, 'VoidTokenType'))
					{
						if ($es4.$$get(expression, $$this, $$thisp, 'expression', 'constructor') != $es4.$$get(Construct, $$this, $$thisp, 'EmptyExpression'))
						{
							$es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(expression, $$this, $$thisp, 'expression'), 0, toString, construct]);
						}
						$es4.$$set(expressionResult, $$this, $$thisp, 'type', $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['void']), '=');
						break;
					}
					if ($es4.$$get(expression, $$this, $$thisp, 'token', 'type') == $es4.$$get(Token, $$this, $$thisp, 'NaNTokenType'))
					{
						$es4.$$set(expressionResult, $$this, $$thisp, 'isNaN', true, '=');
						break;
					}
					if ($es4.$$get(expression, $$this, $$thisp, 'token', 'type') == $es4.$$get(Token, $$this, $$thisp, 'UndefinedTokenType'))
					{
						$es4.$$set(expressionResult, $$this, $$thisp, 'isUndefined', true, '=');
						break;
					}
					if ($es4.$$get(expression, $$this, $$thisp, 'token', 'type') == $es4.$$get(Token, $$this, $$thisp, 'NullTokenType'))
					{
						$es4.$$set(expressionResult, $$this, $$thisp, 'isNull', true, '=');
						break;
					}
					if ($es4.$$get(expression, $$this, $$thisp, 'expression'))
					{
						expressionResult = $es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(expression, $$this, $$thisp, 'expression'), 0, toString, construct]);
						break;
					}
					throw $es4.$$primitive(new (Error)('unhandled expression type'));
					break;
				case $es4.$$get(Construct, $$this, $$thisp, 'XMLExpression'):
					$es4.$$set(expressionResult, $$this, $$thisp, 'type', $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['XML']), '=');
					break;
				case $es4.$$get(Construct, $$this, $$thisp, 'XMLListExpression'):
					$es4.$$set(expressionResult, $$this, $$thisp, 'type', $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['XMLList']), '=');
					break;
				case $es4.$$get(Construct, $$this, $$thisp, 'EmptyExpression'):
					$es4.$$set(expressionResult, $$this, $$thisp, 'type', $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['void']), '=');
					break;
				case $es4.$$get(Construct, $$this, $$thisp, 'RegExpression'):
					$es4.$$set(expressionResult, $$this, $$thisp, 'type', $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['RegExp']), '=');
					break;
				case $es4.$$get(Construct, $$this, $$thisp, 'PrefixExpression'):
				case $es4.$$get(Construct, $$this, $$thisp, 'PostfixExpression'):
					expressionResult = $es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(expression, $$this, $$thisp, 'expression'), 0, toString, construct]);
					break;
				case $es4.$$get(Construct, $$this, $$thisp, 'NewExpression'):
					expressionResult = $es4.$$call($$thisp, $$this, $$thisp, 'analyzePropertyExpression', [$es4.$$get(expression, $$this, $$thisp, 'expression'), toString, construct, true]);
					break;
				case $es4.$$get(Construct, $$this, $$thisp, 'BinaryExpression'):
					if ($es4.$$get(expression, $$this, $$thisp, 'token', 'type') == $es4.$$get(Token, $$this, $$thisp, 'IsTokenType'))
					{
						$es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(expression, $$this, $$thisp, 'leftExpression'), 0, toString, construct]);
						$es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(expression, $$this, $$thisp, 'rightExpression'), 0, toString, construct]);
						$es4.$$set(expressionResult, $$this, $$thisp, 'type', $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['Boolean']), '=');
						break;
					}
					if ($es4.$$get(expression, $$this, $$thisp, 'token', 'type') == $es4.$$get(Token, $$this, $$thisp, 'InstanceofTokenType'))
					{
						$es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(expression, $$this, $$thisp, 'leftExpression'), 0, toString, construct]);
						$es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(expression, $$this, $$thisp, 'rightExpression'), 0, toString, construct]);
						$es4.$$set(expressionResult, $$this, $$thisp, 'type', $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['Boolean']), '=');
						break;
					}
					if ($es4.$$get(expression, $$this, $$thisp, 'token', 'type') == $es4.$$get(Token, $$this, $$thisp, 'AsTokenType'))
					{
						$es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(expression, $$this, $$thisp, 'leftExpression'), 0, toString, construct]);
						expressionResult = $es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(expression, $$this, $$thisp, 'rightExpression'), 0, toString, construct]);
						break;
					}
					innerSwitch:					switch ($es4.$$get(expression, $$this, $$thisp, 'token', 'type'))
					{
						case $es4.$$get(Token, $$this, $$thisp, 'BitwiseLeftShiftAssignmentTokenType'):
						case $es4.$$get(Token, $$this, $$thisp, 'BitwiseUnsignedRightShiftAssignmentTokenType'):
						case $es4.$$get(Token, $$this, $$thisp, 'BitwiseRightShiftAssignmentTokenType'):
						case $es4.$$get(Token, $$this, $$thisp, 'AddWithAssignmentTokenType'):
						case $es4.$$get(Token, $$this, $$thisp, 'DivWithAssignmentTokenType'):
						case $es4.$$get(Token, $$this, $$thisp, 'ModWithAssignmentTokenType'):
						case $es4.$$get(Token, $$this, $$thisp, 'MulWithAssignmentTokenType'):
						case $es4.$$get(Token, $$this, $$thisp, 'SubWithAssignmentTokenType'):
						case $es4.$$get(Token, $$this, $$thisp, 'AssignmentTokenType'):
						case $es4.$$get(Token, $$this, $$thisp, 'AndWithAssignmentTokenType'):
						case $es4.$$get(Token, $$this, $$thisp, 'OrWithAssignmentTokenType'):
						case $es4.$$get(Token, $$this, $$thisp, 'BitwiseAndAssignmentTokenType'):
						case $es4.$$get(Token, $$this, $$thisp, 'BitwiseOrAssignmentTokenType'):
						case $es4.$$get(Token, $$this, $$thisp, 'BitwiseXorAssignmentTokenType'):
							var leftExpression = $es4.$$get(expression, $$this, $$thisp, 'leftExpression');
							while ($es4.$$get(leftExpression, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'ParenExpression'))
							{
								leftExpression = $es4.$$get(leftExpression, $$this, $$thisp, 'expression');
							}
							var innerOperator = $es4.$$get(expression, $$this, $$thisp, 'token', 'data');
							var innerExpressionFound = false;
							var expressionResult;
							while ($es4.$$get(leftExpression, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'BinaryExpression'))
							{
								var binaryExpression = $es4.$$call(Construct, $$this, $$thisp, 'getNewBinaryExpression', $es4.$$EMPTY_ARRAY);
								$es4.$$set(binaryExpression, $$this, $$thisp, 'token', $es4.$$get(expression, $$this, $$thisp, 'token'), '=');
								$es4.$$set(binaryExpression, $$this, $$thisp, 'rightExpression', $es4.$$get(expression, $$this, $$thisp, 'rightExpression'), '=');
								$es4.$$set(binaryExpression, $$this, $$thisp, 'leftExpression', $es4.$$get(leftExpression, $$this, $$thisp, 'rightExpression'), '=');
								if (!innerExpressionFound)
								{
									expressionResult = $es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [binaryExpression, _indent, toString, construct]);
								}
								else
								{
									expressionResult = $es4.$$call($$thisp, $$this, $$thisp, 'getGreatestCommonExpressionResult', [expressionResult, $es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(binaryExpression, $$this, $$thisp, 'leftExpression'), _indent, toString, construct])]);
								}
								innerExpressionFound = true;
								expression = leftExpression;
								leftExpression = $es4.$$get(expression, $$this, $$thisp, 'leftExpression');
							}
							var leftExpressionResult = $es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [leftExpression, 0, toString, construct]);
							var rightExpressionResult;
							if (innerExpressionFound)
							{
								rightExpressionResult = expressionResult;
							}
							else
							{
								rightExpressionResult = $es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(expression, $$this, $$thisp, 'rightExpression'), 0, toString, construct]);
							}
							expressionResult = $es4.$$call($$thisp, $$this, $$thisp, 'getGreatestCommonExpressionResult', [leftExpressionResult, rightExpressionResult]);
							if ($es4.$$call($$thisp, $$this, $$thisp, 'isCoerceRequired', [expressionResult, $es4.$$get(leftExpressionResult, $$this, $$thisp, 'type'), $es4.$$get(leftExpressionResult, $$this, $$thisp, 'varIdentifier')]))
							{
								$es4.$$set(leftExpression, $$this, $$thisp, 'coerce', true, '=');
							}
							if ($es4.$$get(leftExpressionResult, $$this, $$thisp, 'varIdentifier'))
							{
								$es4.$$set(leftExpressionResult, $$this, $$thisp, 'varIdentifier', 'isVarInitialized', true, '=');
							}
							break outerSwitch;
						case $es4.$$get(Token, $$this, $$thisp, 'AddTokenType'):
							var leftExpressionResult = $es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(expression, $$this, $$thisp, 'leftExpression'), 0, toString, construct]);
							var rightExpressionResult = $es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(expression, $$this, $$thisp, 'rightExpression'), 0, toString, construct]);
							if ($es4.$$get(leftExpressionResult, $$this, $$thisp, 'type') && $es4.$$get(leftExpressionResult, $$this, $$thisp, 'type', 'fullyQualifiedName') == 'String')
							{
								expressionResult = leftExpressionResult;
							}
							else if ($es4.$$get(rightExpressionResult, $$this, $$thisp, 'type') && $es4.$$get(rightExpressionResult, $$this, $$thisp, 'type', 'fullyQualifiedName') == 'String')
							{
								expressionResult = rightExpressionResult;
							}
							else
							{
								expressionResult = $es4.$$call($$thisp, $$this, $$thisp, 'getGreatestCommonExpressionResult', [leftExpressionResult, rightExpressionResult]);
							}
							break outerSwitch;
					}
					expressionResult = $es4.$$call($$thisp, $$this, $$thisp, 'getGreatestCommonExpressionResult', [$es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(expression, $$this, $$thisp, 'leftExpression'), 0, toString, construct]), $es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(expression, $$this, $$thisp, 'rightExpression'), 0, toString, construct])]);
					break;
				case $es4.$$get(Construct, $$this, $$thisp, 'TernaryExpression'):
					$es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(expression, $$this, $$thisp, 'conditionExpression'), 0, toString, construct]);
					expressionResult = $es4.$$call($$thisp, $$this, $$thisp, 'getGreatestCommonExpressionResult', [$es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(expression, $$this, $$thisp, 'trueExpression'), 0, toString, construct]), $es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(expression, $$this, $$thisp, 'falseExpression'), 0, toString, construct])]);
					break;
				default:
					throw $es4.$$primitive(new (Error)('Unexpected expression found: ' + $es4.$$get(expression, $$this, $$thisp, 'constructor')));
			}
			return expressionResult;
		}));

		//method
		$es4.$$private_function('isCoerceRequired', $$thisp, (function ($$$$expressionResultFrom, $$$$typeTo, $$$$varIdentifierTo)
		{
			//set default parameter values
			var expressionResultFrom = $$$$expressionResultFrom;
			var typeTo = $$$$typeTo;
			var varIdentifierTo = (2 > arguments.length - 1) ? null : $$$$varIdentifierTo;

			if ($es4.$$get(expressionResultFrom, $$this, $$thisp, 'varIdentifier') && !$es4.$$get(expressionResultFrom, $$this, $$thisp, 'varIdentifier', 'isVarInitialized'))
			{
				throw $es4.$$primitive(new (Error)('cannot declare and set var: [ ' + $es4.$$get(expressionResultFrom, $$this, $$thisp, 'varIdentifier') + ' ] in same line, example: var i:uint = i;'));
			}
			if ($es4.$$get(typeTo, $$this, $$thisp, 'fullyQualifiedName') == '*' || $es4.$$get(typeTo, $$this, $$thisp, 'fullyQualifiedName') == 'void')
			{
				return false;
			}
			if ($es4.$$get(expressionResultFrom, $$this, $$thisp, 'isNull'))
			{
				return ($es4.$$get(typeTo, $$this, $$thisp, 'fullyQualifiedName') == 'Boolean' || $es4.$$get(typeTo, $$this, $$thisp, 'fullyQualifiedName') == 'int' || $es4.$$get(typeTo, $$this, $$thisp, 'fullyQualifiedName') == 'uint' || $es4.$$get(typeTo, $$this, $$thisp, 'fullyQualifiedName') == 'Number');
			}
			if ($es4.$$get(expressionResultFrom, $$this, $$thisp, 'isUndefined') || $es4.$$get(expressionResultFrom, $$this, $$thisp, 'isVoid'))
			{
				return true;
			}
			if ($es4.$$get(expressionResultFrom, $$this, $$thisp, 'isNaN'))
			{
				return ($es4.$$get(typeTo, $$this, $$thisp, 'fullyQualifiedName') != 'Number');
			}
			if ($es4.$$get(expressionResultFrom, $$this, $$thisp, 'type') == typeTo || $es4.$$get(typeTo, $$this, $$thisp, 'fullyQualifiedName') == $es4.$$get(expressionResultFrom, $$this, $$thisp, 'type', 'fullyQualifiedName'))
			{
				return false;
			}
			if ($es4.$$get(typeTo, $$this, $$thisp, 'fullyQualifiedName') == 'Object')
			{
				return false;
			}
			var greatestCommonType = $es4.$$call($$thisp, $$this, $$thisp, 'getGreatestCommonType', [$es4.$$get(expressionResultFrom, $$this, $$thisp, 'type'), typeTo]);
			if (greatestCommonType == typeTo || $es4.$$get(greatestCommonType, $$this, $$thisp, 'fullyQualifiedName') == $es4.$$get(typeTo, $$this, $$thisp, 'fullyQualifiedName'))
			{
				return false;
			}
			return true;
		}));

		//method
		$es4.$$private_function('getGreatestCommonExpressionResult', $$thisp, (function ($$$$expressionResult1, $$$$expressionResult2)
		{
			//set default parameter values
			var expressionResult1 = $$$$expressionResult1;
			var expressionResult2 = $$$$expressionResult2;

			var defaultExpressionResult = $es4.$$primitive(new (ExpressionResult)($es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['*']), false, false, false, false));
			if (expressionResult1 == expressionResult2)
			{
				return expressionResult2;
			}
			if ($es4.$$get(expressionResult1, $$this, $$thisp, 'isNull') || $es4.$$get(expressionResult2, $$this, $$thisp, 'isNull'))
			{
				return ($es4.$$get(expressionResult1, $$this, $$thisp, 'isNull') && $es4.$$get(expressionResult2, $$this, $$thisp, 'isNull')) ? expressionResult2 : defaultExpressionResult;
			}
			if ($es4.$$get(expressionResult1, $$this, $$thisp, 'isUndefined') || $es4.$$get(expressionResult2, $$this, $$thisp, 'isUndefined'))
			{
				return ($es4.$$get(expressionResult1, $$this, $$thisp, 'isUndefined') && $es4.$$get(expressionResult2, $$this, $$thisp, 'isUndefined')) ? expressionResult2 : defaultExpressionResult;
			}
			if ($es4.$$get(expressionResult1, $$this, $$thisp, 'isNaN') || $es4.$$get(expressionResult2, $$this, $$thisp, 'isNaN'))
			{
				return ($es4.$$get(expressionResult1, $$this, $$thisp, 'isNaN') && $es4.$$get(expressionResult2, $$this, $$thisp, 'isNaN')) ? expressionResult2 : defaultExpressionResult;
			}
			var type = $es4.$$call($$thisp, $$this, $$thisp, 'getGreatestCommonType', [$es4.$$get(expressionResult1, $$this, $$thisp, 'type'), $es4.$$get(expressionResult2, $$this, $$thisp, 'type')]);
			return $es4.$$primitive(new (ExpressionResult)(type, false, false, false, false));
		}));

		//method
		$es4.$$private_function('getGreatestCommonType', $$thisp, (function ($$$$type1, $$$$type2)
		{
			//set default parameter values
			var type1 = $$$$type1;
			var type2 = $$$$type2;

			if (type1 == type2 || $es4.$$get(type1, $$this, $$thisp, 'fullyQualifiedName') == $es4.$$get(type2, $$this, $$thisp, 'fullyQualifiedName'))
			{
				return type2;
			}
			if ($es4.$$get(type1, $$this, $$thisp, 'fullyQualifiedName') == '*' || $es4.$$get(type2, $$this, $$thisp, 'fullyQualifiedName') == '*')
			{
				return ($es4.$$get(type1, $$this, $$thisp, 'fullyQualifiedName') == $es4.$$get(type2, $$this, $$thisp, 'fullyQualifiedName')) ? type2 : $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['*']);
			}
			if ($es4.$$get(type1, $$this, $$thisp, 'fullyQualifiedName') == 'void' || $es4.$$get(type2, $$this, $$thisp, 'fullyQualifiedName') == 'void')
			{
				return ($es4.$$get(type1, $$this, $$thisp, 'fullyQualifiedName') == $es4.$$get(type2, $$this, $$thisp, 'fullyQualifiedName')) ? type2 : $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['*']);
			}
			if ($es4.$$get(type1, $$this, $$thisp, 'fullyQualifiedName') == 'String' || $es4.$$get(type2, $$this, $$thisp, 'fullyQualifiedName') == 'String')
			{
				return ($es4.$$get(type1, $$this, $$thisp, 'fullyQualifiedName') == $es4.$$get(type2, $$this, $$thisp, 'fullyQualifiedName')) ? type2 : $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['*']);
			}
			if ($es4.$$get(type1, $$this, $$thisp, 'fullyQualifiedName') == 'Function' || $es4.$$get(type2, $$this, $$thisp, 'fullyQualifiedName') == 'Function')
			{
				return ($es4.$$get(type1, $$this, $$thisp, 'fullyQualifiedName') == $es4.$$get(type2, $$this, $$thisp, 'fullyQualifiedName')) ? type2 : $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['*']);
			}
			if ($es4.$$get(type1, $$this, $$thisp, 'fullyQualifiedName') == 'Class' || $es4.$$get(type2, $$this, $$thisp, 'fullyQualifiedName') == 'Class')
			{
				return ($es4.$$get(type1, $$this, $$thisp, 'fullyQualifiedName') == $es4.$$get(type2, $$this, $$thisp, 'fullyQualifiedName')) ? type2 : $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['*']);
			}
			if ($es4.$$get(type1, $$this, $$thisp, 'fullyQualifiedName') == 'Boolean' || $es4.$$get(type2, $$this, $$thisp, 'fullyQualifiedName') == 'Boolean')
			{
				return ($es4.$$get(type1, $$this, $$thisp, 'fullyQualifiedName') == $es4.$$get(type2, $$this, $$thisp, 'fullyQualifiedName')) ? type2 : $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['*']);
			}
			if ($es4.$$get(type1, $$this, $$thisp, 'fullyQualifiedName') == 'Array' || $es4.$$get(type2, $$this, $$thisp, 'fullyQualifiedName') == 'Array')
			{
				return ($es4.$$get(type1, $$this, $$thisp, 'fullyQualifiedName') == $es4.$$get(type2, $$this, $$thisp, 'fullyQualifiedName')) ? type2 : $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['*']);
			}
			if ($es4.$$get(type1, $$this, $$thisp, 'fullyQualifiedName') == 'uint' || $es4.$$get(type2, $$this, $$thisp, 'fullyQualifiedName') == 'uint')
			{
				if ($es4.$$get(type1, $$this, $$thisp, 'fullyQualifiedName') == $es4.$$get(type2, $$this, $$thisp, 'fullyQualifiedName'))
				{
					return type2;
				}
				if ($es4.$$get(type1, $$this, $$thisp, 'fullyQualifiedName') == 'Number')
				{
					return type1;
				}
				if ($es4.$$get(type2, $$this, $$thisp, 'fullyQualifiedName') == 'Number')
				{
					return type2;
				}
				return $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['*']);
			}
			if ($es4.$$get(type1, $$this, $$thisp, 'fullyQualifiedName') == 'int' || $es4.$$get(type2, $$this, $$thisp, 'fullyQualifiedName') == 'int')
			{
				if ($es4.$$get(type1, $$this, $$thisp, 'fullyQualifiedName') == $es4.$$get(type2, $$this, $$thisp, 'fullyQualifiedName'))
				{
					return type2;
				}
				if ($es4.$$get(type1, $$this, $$thisp, 'fullyQualifiedName') == 'Number')
				{
					return type1;
				}
				if ($es4.$$get(type2, $$this, $$thisp, 'fullyQualifiedName') == 'Number')
				{
					return type2;
				}
				return $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['*']);
			}
			if ($es4.$$get(type1, $$this, $$thisp, 'fullyQualifiedName') == 'Number' || $es4.$$get(type2, $$this, $$thisp, 'fullyQualifiedName') == 'Number')
			{
				return ($es4.$$get(type1, $$this, $$thisp, 'fullyQualifiedName') == $es4.$$get(type2, $$this, $$thisp, 'fullyQualifiedName')) ? type2 : $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['*']);
			}
			var typea = checkForType(type1, type2);
			var typeb = checkForType(type2, type1);
			return ($es4.$$get(typea, $$this, $$thisp, 'fullyQualifiedName') == $es4.$$get($es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['*']), $$this, $$thisp, 'fullyQualifiedName')) ? typeb : typea;

			function checkForType($$$$type, $$$$typeToCheckFor) 
			{
				//set default parameter values
				var type = $$$$type;
				var typeToCheckFor = $$$$typeToCheckFor;

				var visitedInterfaces = {};
				var typeConstruct = $es4.$$get(type, $$this, $$thisp, 'construct');
				var typeToCheckForConstruct = $es4.$$get(typeToCheckFor, $$this, $$thisp, 'construct');
				if ($es4.$$get(typeConstruct, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'InterfaceConstruct'))
				{
					var result = hasConstructInInterface(typeConstruct, typeToCheckForConstruct);
					if (result)
					{
						return typeToCheckFor;
					}
				}
				else
				{
					var result = hasConstructInClass(typeConstruct, typeToCheckForConstruct);
					if (result)
					{
						return typeToCheckFor;
					}
				}
				return $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['*']);

				function hasConstructInInterface($$$$interfaceConstruct, $$$$constructToCheckFor) 
				{
					//set default parameter values
					var interfaceConstruct = $$$$interfaceConstruct;
					var constructToCheckFor = $$$$constructToCheckFor;

					if (interfaceConstruct == constructToCheckFor)
					{
						return true;
					}
					if ($es4.$$get(constructToCheckFor, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'InterfaceConstruct'))
					{
						var extendsNameConstructs = $es4.$$get(interfaceConstruct, $$this, $$thisp, 'extendsNameConstructs');
						for (var i = $es4.$$get(extendsNameConstructs, $$this, $$thisp, 'length'); i--;)
						{
							if ($es4.$$get(visitedInterfaces, $$this, $$thisp, $es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [$es4.$$get(extendsNameConstructs, $$this, $$thisp, i)])))
							{
								continue;
							}
							$es4.$$set(visitedInterfaces, $$this, $$thisp, $es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [$es4.$$get(extendsNameConstructs, $$this, $$thisp, i)]), true, '=');
							var fullyQualifiedName = $es4.$$call($$thisp, $$this, $$thisp, 'lookupFullyQualifiedName', [interfaceConstruct, $es4.$$get(extendsNameConstructs, $$this, $$thisp, i)]);
							var innerConstruct = $es4.$$call($$thisp, $$this, $$thisp, 'lookupConstructInRootConstruct', [$es4.$$call($$thisp, $$this, $$thisp, 'lookupRootConstruct', [$es4.$$get(interfaceConstruct, $$this, $$thisp, 'rootConstruct'), fullyQualifiedName]), fullyQualifiedName]);
							var result = hasConstructInInterface(interfaceConstruct, innerConstruct);
							if (result)
							{
								return true;
							}
						}
					}
					return false;
				}
;

				function hasConstructInClass($$$$classConstruct, $$$$constructToCheckFor) 
				{
					//set default parameter values
					var classConstruct = $$$$classConstruct;
					var constructToCheckFor = $$$$constructToCheckFor;

					if (classConstruct == constructToCheckFor)
					{
						return true;
					}
					if ($es4.$$get(constructToCheckFor, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'InterfaceConstruct'))
					{
						var implementsNameConstructs = $es4.$$get(classConstruct, $$this, $$thisp, 'implementsNameConstructs');
						for (var i = $es4.$$get(implementsNameConstructs, $$this, $$thisp, 'length'); i--;)
						{
							if ($es4.$$get(visitedInterfaces, $$this, $$thisp, $es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [$es4.$$get(implementsNameConstructs, $$this, $$thisp, i)])))
							{
								continue;
							}
							$es4.$$set(visitedInterfaces, $$this, $$thisp, $es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [$es4.$$get(implementsNameConstructs, $$this, $$thisp, i)]), true, '=');
							var fullyQualifiedName = $es4.$$call($$thisp, $$this, $$thisp, 'lookupFullyQualifiedName', [classConstruct, $es4.$$get(implementsNameConstructs, $$this, $$thisp, i)]);
							var innerConstruct = $es4.$$call($$thisp, $$this, $$thisp, 'lookupConstructInRootConstruct', [$es4.$$call($$thisp, $$this, $$thisp, 'lookupRootConstruct', [$es4.$$get(classConstruct, $$this, $$thisp, 'rootConstruct'), fullyQualifiedName]), fullyQualifiedName]);
							var result = hasConstructInInterface(constructToCheckFor, innerConstruct);
							if (result)
							{
								return true;
							}
						}
					}
					var extendsNameConstruct;
					while (extendsNameConstruct = $es4.$$get(classConstruct, $$this, $$thisp, 'extendsNameConstruct'))
					{
						var fullyQualifiedName = $es4.$$call($$thisp, $$this, $$thisp, 'lookupFullyQualifiedName', [classConstruct, extendsNameConstruct]);
						var extendsConstruct = $es4.$$call($$thisp, $$this, $$thisp, 'lookupConstructInRootConstruct', [$es4.$$call($$thisp, $$this, $$thisp, 'lookupRootConstruct', [$es4.$$get(classConstruct, $$this, $$thisp, 'rootConstruct'), fullyQualifiedName]), fullyQualifiedName]);
						if (extendsConstruct == constructToCheckFor)
						{
							return true;
						}
						if ($es4.$$get(constructToCheckFor, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'InterfaceConstruct'))
						{
							var implementsNameConstructs = $es4.$$get(extendsConstruct, $$this, $$thisp, 'implementsNameConstructs');
							for (var i = $es4.$$get(implementsNameConstructs, $$this, $$thisp, 'length'); i--;)
							{
								if ($es4.$$get(visitedInterfaces, $$this, $$thisp, $es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [$es4.$$get(implementsNameConstructs, $$this, $$thisp, i)])))
								{
									continue;
								}
								$es4.$$set(visitedInterfaces, $$this, $$thisp, $es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [$es4.$$get(implementsNameConstructs, $$this, $$thisp, i)]), true, '=');
								var fullyQualifiedName = $es4.$$call($$thisp, $$this, $$thisp, 'lookupFullyQualifiedName', [extendsConstruct, $es4.$$get(implementsNameConstructs, $$this, $$thisp, i)]);
								var innerConstruct = $es4.$$call($$thisp, $$this, $$thisp, 'lookupConstructInRootConstruct', [$es4.$$call($$thisp, $$this, $$thisp, 'lookupRootConstruct', [$es4.$$get(extendsConstruct, $$this, $$thisp, 'rootConstruct'), fullyQualifiedName]), fullyQualifiedName]);
								var result = hasConstructInInterface(constructToCheckFor, innerConstruct);
								if (result)
								{
									return true;
								}
							}
						}
						classConstruct = extendsConstruct;
					}
					return false;
				}
;
			}
;
		}));

		//method
		$es4.$$private_function('analyzePropertyExpression', $$thisp, (function ($$$$expression, $$$$toString, $$$$construct, $$$$isNew)
		{
			//set default parameter values
			var expression = $$$$expression;
			var toString = $$$$toString;
			var construct = $$$$construct;
			var isNew = (3 > arguments.length - 1) ? false : $$$$isNew;

			var innerExpression = expression;
			while ($es4.$$get(innerExpression, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'ParenExpression'))
			{
				innerExpression = $es4.$$get(innerExpression, $$this, $$thisp, 'expression');
			}
			if (!$es4.$$get(innerExpression, $$this, $$thisp, 'construct'))
			{
				throw $es4.$$primitive(new (Error)('invalid expression passed to analyzePropertyExpression: ' + $es4.$$get(innerExpression, $$this, $$thisp, 'constructor')));
			}
			var identifier;
			var namespaceIdentifier;
			var thisConstruct = false;
			switch ($es4.$$get(innerExpression, $$this, $$thisp, 'construct', 'constructor'))
			{
				case $es4.$$get(Construct, $$this, $$thisp, 'ThisConstruct'):
					thisConstruct = true;
				case $es4.$$get(Construct, $$this, $$thisp, 'SuperConstruct'):
				case $es4.$$get(Construct, $$this, $$thisp, 'IdentifierConstruct'):
					identifier = $es4.$$set(innerExpression, $$this, $$thisp, 'construct', 'identifier', $es4.$$call($$thisp, $$this, $$thisp, 'lookupIdentifier', [$es4.$$get(innerExpression, $$this, $$thisp, 'construct')]), '=');
					$es4.$$set(identifier, $$this, $$thisp, 'accessed', true, '=');
					break;
				case $es4.$$get(Construct, $$this, $$thisp, 'ParenConstruct'):
				case $es4.$$get(Construct, $$this, $$thisp, 'ArrayConstruct'):
				case $es4.$$get(Construct, $$this, $$thisp, 'ObjectConstruct'):
					break;
				case $es4.$$get(Construct, $$this, $$thisp, 'NamespaceQualifierConstruct'):
					namespaceIdentifier = $es4.$$set(innerExpression, $$this, $$thisp, 'construct', 'namespaceIdentifier', $es4.$$call($$thisp, $$this, $$thisp, 'lookupIdentifier', [$es4.$$get(innerExpression, $$this, $$thisp, 'construct', 'identifierToken', 'data')]), '=');
					$es4.$$set(namespaceIdentifier, $$this, $$thisp, 'accessed', true, '=');
					identifier = $es4.$$set(innerExpression, $$this, $$thisp, 'construct', 'identifier', $es4.$$call($$thisp, $$this, $$thisp, 'lookupIdentifier', [$es4.$$get(innerExpression, $$this, $$thisp, 'construct', 'namespaceIdentifierToken', 'data'), $es4.$$call($$thisp, $$this, $$thisp, 'lookupNamespace', [$es4.$$get(namespaceIdentifier, $$this, $$thisp, 'name')])]), '=');
					$es4.$$set(identifier, $$this, $$thisp, 'accessed', true, '=');
					break;
				default:
					throw $es4.$$primitive(new (Error)('unknown inner property expression: ' + $es4.$$get(innerExpression, $$this, $$thisp, 'construct', 'constructor')));
			}
			if (identifier && !namespaceIdentifier && ($es4.$$get(identifier, $$this, $$thisp, 'isProperty') || $es4.$$get(identifier, $$this, $$thisp, 'isMethod')) && !$es4.$$get(identifier, $$this, $$thisp, 'isImport') && $es4.$$get(identifier, $$this, $$thisp, 'namespaceObj', 'isCustom'))
			{
				namespaceIdentifier = $es4.$$get(identifier, $$this, $$thisp, 'namespaceObj', 'identifier');
			}
			else if (identifier && $es4.$$get(identifier, $$this, $$thisp, 'isPackage'))
			{
				var tempInnerExpression;
				while ((tempInnerExpression = $es4.$$get(innerExpression, $$this, $$thisp, 'nextPropertyExpression')) && $es4.$$get(tempInnerExpression, $$this, $$thisp, 'construct', 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'DotConstruct'))
				{
					if (!$es4.$$get(tempInnerExpression, $$this, $$thisp, 'nextPropertyExpression') || $es4.$$get(tempInnerExpression, $$this, $$thisp, 'nextPropertyExpression', 'construct', 'construct') != $es4.$$get(Construct, $$this, $$thisp, 'IdentifierConstruct'))
					{
						break;
					}
					var innerIdentifier = $es4.$$set(tempInnerExpression, $$this, $$thisp, 'nextPropertyExpression', 'construct', 'construct', 'identifier', $es4.$$call($$thisp, $$this, $$thisp, 'lookupIdentifier', [$es4.$$get(tempInnerExpression, $$this, $$thisp, 'nextPropertyExpression', 'construct', 'construct', 'identifierToken', 'data')]), '=');
					if (!$es4.$$get(innerIdentifier, $$this, $$thisp, 'isPackage'))
					{
						break;
					}
					innerExpression = $es4.$$get(innerExpression, $$this, $$thisp, 'nextPropertyExpression');
				}
			}
			var expressionResult;
			var lastPropertyName;
			var lastExpressionResult;
			var lastIdentifier;
			var packageName = '';
			if (identifier)
			{
				if (!$es4.$$get(identifier, $$this, $$thisp, 'isVar'))
				{
					expressionResult = $es4.$$primitive(new (ExpressionResult)($es4.$$get(identifier, $$this, $$thisp, 'type'), false, false, false, false));
				}
				else
				{
					expressionResult = $es4.$$primitive(new (ExpressionResult)($es4.$$get(identifier, $$this, $$thisp, 'type'), false, false, false, false, identifier));
				}
				lastPropertyName = $es4.$$get(identifier, $$this, $$thisp, 'name');
				$es4.$$set(innerExpression, $$this, $$thisp, 'identifier', identifier, '=');
				lastExpressionResult = expressionResult;
				lastIdentifier = identifier;
				if ($es4.$$get(identifier, $$this, $$thisp, 'isPackage'))
				{
					packageName += $es4.$$get(identifier, $$this, $$thisp, 'name');
				}
				if (!$es4.$$get(identifier, $$this, $$thisp, 'isType'))
				{
					identifier = null;
				}
				else
				{
					thisConstruct = true;
				}
			}
			else
			{
				expressionResult = $es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(innerExpression, $$this, $$thisp, 'construct', 'expression'), 0, toString, construct]);
			}
			while (innerExpression = $es4.$$get(innerExpression, $$this, $$thisp, 'nextPropertyExpression'))
			{
				if ($es4.$$get(innerExpression, $$this, $$thisp, 'construct', 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'DotConstruct') || $es4.$$get(innerExpression, $$this, $$thisp, 'construct', 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'IdentifierConstruct'))
				{
					if (lastIdentifier && $es4.$$get(lastIdentifier, $$this, $$thisp, 'name') == 'this')
					{
						if ($es4.$$get($$thisp, $$this, $$thisp, '_treatThisAsDynamic'))
						{
							$es4.$$set(innerExpression, $$this, $$thisp, 'construct', 'identifier', $es4.$$call($$thisp, $$this, $$thisp, 'lookupIdentifier', ['global']), '=');
						}
						else
						{
							$es4.$$set(innerExpression, $$this, $$thisp, 'construct', 'identifier', $es4.$$call($$thisp, $$this, $$thisp, 'lookupIdentifier', [$es4.$$get(innerExpression, $$this, $$thisp, 'construct', 'identifierToken', 'data')]), '=');
						}
					}
					lastExpressionResult = expressionResult;
					lastIdentifier = identifier;
					if (thisConstruct && $es4.$$call($$thisp, $$this, $$thisp, 'hasIdentifier', [$es4.$$get(innerExpression, $$this, $$thisp, 'construct', 'identifierToken', 'data')]) && $es4.$$get($es4.$$call($$thisp, $$this, $$thisp, 'lookupIdentifier', [$es4.$$get(innerExpression, $$this, $$thisp, 'construct', 'identifierToken', 'data')]), $$this, $$thisp, 'isNative'))
					{
						throw $es4.$$primitive(new (Error)('cannot use "this" or classname scope before private native property: ' + $es4.$$get(innerExpression, $$this, $$thisp, 'construct', 'identifierToken', 'data')));
					}
					thisConstruct = false;
					var invalidated = false;
					if (packageName)
					{
						packageName += '.' + $es4.$$get(innerExpression, $$this, $$thisp, 'construct', 'identifierToken', 'data');
						if ($es4.$$get($$thisp, $$this, $$thisp, '_rootConstructs', packageName))
						{
							lastExpressionResult = expressionResult = $es4.$$primitive(new (ExpressionResult)($es4.$$call($$thisp, $$this, $$thisp, 'lookupType', [packageName]), false, false, false, false));
							lastIdentifier = $es4.$$call($$thisp, $$this, $$thisp, 'lookupIdentifier', [packageName]);
							identifier = null;
							packageName = '';
							if ($es4.$$get(innerExpression, $$this, $$thisp, 'nextPropertyExpression') && $es4.$$get(innerExpression, $$this, $$thisp, 'nextPropertyExpression', 'construct', 'constructor') != $es4.$$get(Construct, $$this, $$thisp, 'FunctionCallConstruct'))
							{
								identifier = lastIdentifier;
								innerExpression = $es4.$$get(innerExpression, $$this, $$thisp, 'nextPropertyExpression');
							}
						}
						else
						{
							invalidated = true;
						}
					}
					if (!invalidated)
					{
						var next = ($es4.$$get(innerExpression, $$this, $$thisp, 'nextPropertyExpression') && $es4.$$get(innerExpression, $$this, $$thisp, 'nextPropertyExpression', 'construct', 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'FunctionCallConstruct') && !isNew);
						expressionResult = $es4.$$primitive(new (ExpressionResult)($es4.$$call($$thisp, $$this, $$thisp, 'lookupPropertyType', [$es4.$$get(expressionResult, $$this, $$thisp, 'type'), namespaceIdentifier, identifier, $es4.$$get(innerExpression, $$this, $$thisp, 'construct', 'identifierToken', 'data'), next]), false, false, false, false));
						identifier = null;
						namespaceIdentifier = null;
						lastPropertyName = $es4.$$get(innerExpression, $$this, $$thisp, 'construct', 'identifierToken', 'data');
						if (next)
						{
							var functionCallExpression = $es4.$$get(innerExpression, $$this, $$thisp, 'nextPropertyExpression');
							for (var i = 0; i < $es4.$$get(functionCallExpression, $$this, $$thisp, 'construct', 'argumentExpressions', 'length'); i++)
							{
								$es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(functionCallExpression, $$this, $$thisp, 'construct', 'argumentExpressions', i), 0, toString, construct]);
							}
							innerExpression = $es4.$$get(innerExpression, $$this, $$thisp, 'nextPropertyExpression');
							continue;
						}
					}
				}
				else if ($es4.$$get(innerExpression, $$this, $$thisp, 'construct', 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'ArrayAccessorConstruct'))
				{
					$es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(innerExpression, $$this, $$thisp, 'construct', 'expression'), 0, toString, construct]);
					expressionResult = $es4.$$primitive(new (ExpressionResult)($es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['*']), false, false, false, false));
					identifier = null;
					namespaceIdentifier = null;
					lastPropertyName = null;
				}
				else if ($es4.$$get(innerExpression, $$this, $$thisp, 'construct', 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'NamespaceQualifierConstruct'))
				{
					namespaceIdentifier = $es4.$$set(innerExpression, $$this, $$thisp, 'construct', 'namespaceIdentifier', $es4.$$call($$thisp, $$this, $$thisp, 'lookupIdentifier', [$es4.$$get(innerExpression, $$this, $$thisp, 'construct', 'identifierToken', 'data')]), '=');
					$es4.$$set(innerExpression, $$this, $$thisp, 'construct', 'identifier', $es4.$$call($$thisp, $$this, $$thisp, 'lookupIdentifier', [$es4.$$get(innerExpression, $$this, $$thisp, 'construct', 'namespaceIdentifierToken', 'data'), $es4.$$call($$thisp, $$this, $$thisp, 'lookupNamespace', [$es4.$$get(namespaceIdentifier, $$this, $$thisp, 'name')])]), '=');
				}
				else if ($es4.$$get(innerExpression, $$this, $$thisp, 'construct', 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'ParenConstruct'))
				{
					expressionResult = $es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(innerExpression, $$this, $$thisp, 'construct', 'expression'), 0, toString, construct]);
					namespaceIdentifier = null;
					identifier = null;
					lastPropertyName = null;
				}
				else if ($es4.$$get(innerExpression, $$this, $$thisp, 'construct', 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'AtIdentifierConstruct'))
				{
					expressionResult = $es4.$$primitive(new (ExpressionResult)($es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['Object']), false, false, false, false));
				}
				if ($es4.$$get(innerExpression, $$this, $$thisp, 'construct', 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'FunctionCallConstruct') || ($es4.$$get(innerExpression, $$this, $$thisp, 'nextPropertyExpression') && $es4.$$get(innerExpression, $$this, $$thisp, 'nextPropertyExpression', 'construct', 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'FunctionCallConstruct')))
				{
					var functionCallExpression = ($es4.$$get(innerExpression, $$this, $$thisp, 'construct', 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'FunctionCallConstruct')) ? innerExpression : $es4.$$get(innerExpression, $$this, $$thisp, 'nextPropertyExpression');
					for (var i = 0; i < $es4.$$get(functionCallExpression, $$this, $$thisp, 'construct', 'argumentExpressions', 'length'); i++)
					{
						$es4.$$call($$thisp, $$this, $$thisp, 'analyzeExpression', [$es4.$$get(functionCallExpression, $$this, $$thisp, 'construct', 'argumentExpressions', i), 0, toString, construct]);
					}
					if (isNew)
					{
						if (lastPropertyName)
						{
							if (lastIdentifier && $es4.$$get(lastIdentifier, $$this, $$thisp, 'isType'))
							{
								expressionResult = $es4.$$primitive(new (ExpressionResult)($es4.$$call($$thisp, $$this, $$thisp, 'lookupType', [$es4.$$get(lastIdentifier, $$this, $$thisp, 'fullPackageName')]), false, false, false, false));
							}
							else
							{
								expressionResult = lastExpressionResult;
							}
						}
						else
						{
							expressionResult = $es4.$$primitive(new (ExpressionResult)($es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['Object']), false, false, false, false));
						}
						isNew = false;
					}
					else
					{
						if (lastPropertyName)
						{
							if (lastIdentifier && $es4.$$get(lastIdentifier, $$this, $$thisp, 'isType'))
							{
								expressionResult = lastExpressionResult;
							}
							else
							{
								expressionResult = $es4.$$primitive(new (ExpressionResult)($es4.$$call($$thisp, $$this, $$thisp, 'lookupPropertyType', [$es4.$$get(lastExpressionResult, $$this, $$thisp, 'type'), namespaceIdentifier, lastIdentifier, lastPropertyName, true]), false, false, false, false));
							}
						}
						else
						{
							expressionResult = $es4.$$primitive(new (ExpressionResult)($es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['*']), false, false, false, false));
						}
					}
					namespaceIdentifier = null;
					identifier = null;
					lastPropertyName = null;
					lastIdentifier = null;
					lastExpressionResult = null;
					thisConstruct = false;
					if ($es4.$$get(innerExpression, $$this, $$thisp, 'nextPropertyExpression'))
					{
						innerExpression = functionCallExpression;
					}
					continue;
				}
				thisConstruct = false;
			}
			if (isNew)
			{
				if (lastPropertyName)
				{
					if (lastExpressionResult)
					{
						expressionResult = lastExpressionResult;
					}
					else
					{
						expressionResult = $es4.$$primitive(new (ExpressionResult)($es4.$$call($$thisp, $$this, $$thisp, 'lookupPropertyType', [lastExpressionResult, namespaceIdentifier, lastIdentifier, lastPropertyName]), false, false, false, false));
						if ($es4.$$get(expressionResult, $$this, $$thisp, 'type', 'name') == '*')
						{
							expressionResult = $es4.$$primitive(new (ExpressionResult)($es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['Object']), false, false, false, false));
						}
					}
				}
				else
				{
					expressionResult = $es4.$$primitive(new (ExpressionResult)($es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['Object']), false, false, false, false));
				}
			}
			return expressionResult;
		}));

		//method
		$es4.$$private_function('lookupPropertyType', $$thisp, (function ($$$$type, $$$$namespaceIdentifier, $$$$identifier, $$$$name, $$$$functionReturnType)
		{
			//set default parameter values
			var type = $$$$type;
			var namespaceIdentifier = $$$$namespaceIdentifier;
			var identifier = $$$$identifier;
			var name = $$$$name;
			var functionReturnType = (4 > arguments.length - 1) ? null : $$$$functionReturnType;

			if (identifier && !$es4.$$get(identifier, $$this, $$thisp, 'isType'))
			{
				return $es4.$$get(identifier, $$this, $$thisp, 'type');
			}
			else if (identifier)
			{
				if (name == 'prototype')
				{
					return $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['Object']);
				}
				var propertyConstructs = $es4.$$call(identifier, $$this, $$thisp, 'construct', 'methodConstructs', 'concat', [$es4.$$get(identifier, $$this, $$thisp, 'construct', 'propertyConstructs')]);
				for (var i = 0; i < $es4.$$get(propertyConstructs, $$this, $$thisp, 'length'); i++)
				{
					var propertyConstruct = $es4.$$get(propertyConstructs, $$this, $$thisp, i);
					if (!$es4.$$get(propertyConstruct, $$this, $$thisp, 'staticToken'))
					{
						continue;
					}
					if (!$es4.$$get(propertyConstruct, $$this, $$thisp, 'namespaceToken') && namespaceIdentifier)
					{
						continue;
					}
					if (namespaceIdentifier && $es4.$$get(namespaceIdentifier, $$this, $$thisp, 'name') != $es4.$$get(propertyConstruct, $$this, $$thisp, 'namespaceToken', 'data'))
					{
						continue;
					}
					if ($es4.$$get(propertyConstruct, $$this, $$thisp, 'identifierToken', 'data') != name)
					{
						continue;
					}
					if ($es4.$$get(propertyConstruct, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'MethodConstruct'))
					{
						if ($es4.$$get(propertyConstruct, $$this, $$thisp, 'setToken'))
						{
							if (!$es4.$$get(propertyConstruct, $$this, $$thisp, 'parameterConstructs', 0) || !$es4.$$get(propertyConstruct, $$this, $$thisp, 'parameterConstructs', 0, 'typeConstruct'))
							{
								throw $es4.$$primitive(new (Error)('::10'));
							}
							return getType($es4.$$get(identifier, $$this, $$thisp, 'construct'), $es4.$$get(propertyConstruct, $$this, $$thisp, 'parameterConstructs', 0, 'typeConstruct'));
						}
						if ($es4.$$get(propertyConstruct, $$this, $$thisp, 'getToken'))
						{
							if (!$es4.$$get(propertyConstruct, $$this, $$thisp, 'typeConstruct'))
							{
								throw $es4.$$primitive(new (Error)('::9'));
							}
							return getType($es4.$$get(identifier, $$this, $$thisp, 'construct'), $es4.$$get(propertyConstruct, $$this, $$thisp, 'typeConstruct'));
						}
						if (functionReturnType)
						{
							if (!$es4.$$get(propertyConstruct, $$this, $$thisp, 'typeConstruct'))
							{
								throw $es4.$$primitive(new (Error)('::8'));
							}
							return getType($es4.$$get(identifier, $$this, $$thisp, 'construct'), $es4.$$get(propertyConstruct, $$this, $$thisp, 'typeConstruct'));
						}
						return $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['Function']);
					}
					if (!propertyConstruct || !$es4.$$get(propertyConstruct, $$this, $$thisp, 'typeConstruct'))
					{
						throw $es4.$$primitive(new (Error)('::7'));
					}
					return getType($es4.$$get(identifier, $$this, $$thisp, 'construct'), $es4.$$get(propertyConstruct, $$this, $$thisp, 'typeConstruct'));
				}
				throw $es4.$$primitive(new (Error)('cound not lookup static property ' + name + ' in: ' + type + ', ' + identifier + ', possible cause: compiling against out of date swc'));
			}
			if ($es4.$$get(type, $$this, $$thisp, 'isGlobal') && ($es4.$$get(type, $$this, $$thisp, 'name') == '*' || $es4.$$get(type, $$this, $$thisp, 'name') == 'void'))
			{
				return type;
			}
			var construct = $es4.$$get(type, $$this, $$thisp, 'construct');
			if (!construct)
			{
				$es4.$$call($$thisp, $$this, $$thisp, 'output', $es4.$$EMPTY_ARRAY);
				throw $es4.$$primitive(new (Error)('could not find construct in type: ' + type + ', property name: ' + name));
			}
			if ($es4.$$get(construct, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'ClassConstruct') && $es4.$$get(construct, $$this, $$thisp, 'identifierToken', 'data') == name)
			{
				return type;
			}
			if ($es4.$$get(construct, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'MethodConstruct'))
			{
				if ($es4.$$get(construct, $$this, $$thisp, 'setToken'))
				{
					return getType(construct, $es4.$$get(construct, $$this, $$thisp, 'parameterConstructs', 0, 'typeConstruct'));
				}
				if ($es4.$$get(construct, $$this, $$thisp, 'getToken'))
				{
					return getType(construct, $es4.$$get(construct, $$this, $$thisp, 'typeConstruct'));
				}
				if (functionReturnType)
				{
					if (!$es4.$$get(construct, $$this, $$thisp, 'typeConstruct'))
					{
						throw $es4.$$primitive(new (Error)('::6'));
					}
					return getType(construct, $es4.$$get(construct, $$this, $$thisp, 'typeConstruct'));
				}
				return $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['Function']);
			}

			function findTypeInInterfaceConstruct($$$$construct) 
			{
				//set default parameter values
				var construct = $$$$construct;

				var type = getTypeInConstruct(construct);
				if (type)
				{
					return type;
				}
				for (var i = 0; i < $es4.$$get(construct, $$this, $$thisp, 'extendsNameConstructs', 'length'); i++)
				{
					var fullyQualifiedName = $es4.$$call($$thisp, $$this, $$thisp, 'lookupFullyQualifiedName', [construct, $es4.$$get(construct, $$this, $$thisp, 'extendsNameConstructs', i)]);
					var innerConstruct = $es4.$$call($$thisp, $$this, $$thisp, 'lookupConstructInRootConstruct', [$es4.$$call($$thisp, $$this, $$thisp, 'lookupRootConstruct', [$es4.$$get(construct, $$this, $$thisp, 'rootConstruct'), fullyQualifiedName]), fullyQualifiedName]);
					type = findTypeInInterfaceConstruct(innerConstruct);
					if (type)
					{
						return type;
					}
				}
				return null;
			}
;

			var innerConstruct = construct;
			var object = false;
			while (true)
			{
				if ($es4.$$get(innerConstruct, $$this, $$thisp, 'extendsNameConstructs'))
				{
					var innerType = findTypeInInterfaceConstruct(innerConstruct);
					if (innerType)
					{
						return innerType;
					}
				}
				else
				{
					var innerType = getTypeInConstruct(innerConstruct);
					if (innerType)
					{
						return innerType;
					}
				}
				if ($es4.$$get(innerConstruct, $$this, $$thisp, 'extendsNameConstruct') && $es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [$es4.$$get(innerConstruct, $$this, $$thisp, 'extendsNameConstruct')]) == 'Object')
				{
					object = true;
				}
				if (!$es4.$$get(innerConstruct, $$this, $$thisp, 'extendsNameConstruct') && object)
				{
					break;
				}
				else if (!$es4.$$get(innerConstruct, $$this, $$thisp, 'extendsNameConstruct'))
				{
					innerConstruct = $es4.$$get($es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['Object']), $$this, $$thisp, 'construct');
					object = true;
				}
				else
				{
					innerConstruct = $es4.$$get(getType(innerConstruct, $es4.$$get(innerConstruct, $$this, $$thisp, 'extendsNameConstruct')), $$this, $$thisp, 'construct');
				}
			}
			if ($es4.$$get(construct, $$this, $$thisp, 'dynamicToken'))
			{
				return $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['*']);
			}
			throw $es4.$$primitive(new (Error)('could not find property ' + name + ' in type ' + type + ' construct: ' + $es4.$$get(construct, $$this, $$thisp, 'identifierToken', 'data')));

			function getTypeInConstruct($$$$construct) 
			{
				//set default parameter values
				var construct = $$$$construct;

				var propertyConstructs = ($es4.$$get(construct, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'InterfaceConstruct')) ? $es4.$$get(construct, $$this, $$thisp, 'methodConstructs') : $es4.$$call(construct, $$this, $$thisp, 'methodConstructs', 'concat', [$es4.$$get(construct, $$this, $$thisp, 'propertyConstructs')]);
				for (var i = 0; i < $es4.$$get(propertyConstructs, $$this, $$thisp, 'length'); i++)
				{
					var propertyConstruct = $es4.$$get(propertyConstructs, $$this, $$thisp, i);
					if ($es4.$$get(propertyConstruct, $$this, $$thisp, 'staticToken'))
					{
						continue;
					}
					if (!$es4.$$get(propertyConstruct, $$this, $$thisp, 'namespaceToken') && namespaceIdentifier)
					{
						continue;
					}
					if (namespaceIdentifier && $es4.$$get(namespaceIdentifier, $$this, $$thisp, 'name') != $es4.$$get(propertyConstruct, $$this, $$thisp, 'namespaceToken', 'data'))
					{
						continue;
					}
					if ($es4.$$get(propertyConstruct, $$this, $$thisp, 'identifierToken', 'data') != name)
					{
						continue;
					}
					if ($es4.$$get(propertyConstruct, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'MethodConstruct'))
					{
						if ($es4.$$get(propertyConstruct, $$this, $$thisp, 'setToken'))
						{
							if (!$es4.$$get(propertyConstruct, $$this, $$thisp, 'parameterConstructs', 0) || !$es4.$$get(propertyConstruct, $$this, $$thisp, 'parameterConstructs', 0, 'typeConstruct'))
							{
								throw $es4.$$primitive(new (Error)('::4'));
							}
							return getType(construct, $es4.$$get(propertyConstruct, $$this, $$thisp, 'parameterConstructs', 0, 'typeConstruct'));
						}
						if ($es4.$$get(propertyConstruct, $$this, $$thisp, 'getToken'))
						{
							if (!$es4.$$get(propertyConstruct, $$this, $$thisp, 'typeConstruct'))
							{
								throw $es4.$$primitive(new (Error)('::3'));
							}
							return getType(construct, $es4.$$get(propertyConstruct, $$this, $$thisp, 'typeConstruct'));
						}
						if (functionReturnType)
						{
							if (!$es4.$$get(propertyConstruct, $$this, $$thisp, 'typeConstruct'))
							{
								throw $es4.$$primitive(new (Error)('::1'));
							}
							return getType(construct, $es4.$$get(propertyConstruct, $$this, $$thisp, 'typeConstruct'));
						}
						return $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['Function']);
					}
					if (!propertyConstruct || !$es4.$$get(propertyConstruct, $$this, $$thisp, 'typeConstruct'))
					{
						throw $es4.$$primitive(new (Error)('::2'));
					}
					return getType(construct, $es4.$$get(propertyConstruct, $$this, $$thisp, 'typeConstruct'));
				}
				return null;
			}
;

			function getType($$$$construct, $$$$typeOrNameConstruct) 
			{
				//set default parameter values
				var construct = $$$$construct;
				var typeOrNameConstruct = $$$$typeOrNameConstruct;

				var importConstructs;
				var packageName;
				var typeName;
				if ($es4.$$get(construct, $$this, $$thisp, 'isInternal'))
				{
					importConstructs = $es4.$$get(construct, $$this, $$thisp, 'rootConstruct', 'importConstructs');
					packageName = '';
				}
				else
				{
					importConstructs = $es4.$$get(construct, $$this, $$thisp, 'packageConstruct', 'importConstructs');
					if ($es4.$$get(construct, $$this, $$thisp, 'packageConstruct', 'nameConstruct') == null)
					{
						throw $es4.$$primitive(new (Error)('invalid: ' + $es4.$$get(construct, $$this, $$thisp, 'identifierToken', 'data') + ', ' + $es4.$$get(construct, $$this, $$thisp, 'packageConstruct', 'constructor')));
					}
					packageName = $es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [$es4.$$get(construct, $$this, $$thisp, 'packageConstruct', 'nameConstruct')]);
				}
				if (!typeOrNameConstruct)
				{
					trace($es4.$$get(construct, $$this, $$thisp, 'identifierToken', 'data'));
					$es4.$$call($$thisp, $$this, $$thisp, 'output', $es4.$$EMPTY_ARRAY);
				}
				if ($es4.$$get(typeOrNameConstruct, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'TypeConstruct'))
				{
					if (!$es4.$$get(typeOrNameConstruct, $$this, $$thisp, 'nameConstruct') && $es4.$$get(typeOrNameConstruct, $$this, $$thisp, 'mulToken'))
					{
						return $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['*']);
					}
					if (!$es4.$$get(typeOrNameConstruct, $$this, $$thisp, 'nameConstruct') && $es4.$$get(typeOrNameConstruct, $$this, $$thisp, 'voidToken'))
					{
						return $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', ['void']);
					}
					if (!$es4.$$get(typeOrNameConstruct, $$this, $$thisp, 'nameConstruct'))
					{
						throw $es4.$$primitive(new (Error)('invalid: ' + $es4.$$get(construct, $$this, $$thisp, 'identifierToken', 'data') + ', name: ' + name));
					}
					typeName = $es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [$es4.$$get(typeOrNameConstruct, $$this, $$thisp, 'nameConstruct')]);
				}
				else if ($es4.$$get(typeOrNameConstruct, $$this, $$thisp, 'constructor') == $es4.$$get(Construct, $$this, $$thisp, 'NameConstruct'))
				{
					typeName = $es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [typeOrNameConstruct]);
				}
				else
				{
					throw $es4.$$primitive(new (Error)('invalid type or name construct'));
				}
				if ($es4.$$get($es4.$$call(typeName, $$this, $$thisp, 'split', ['.']), $$this, $$thisp, 'length') > 1)
				{
					return $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', [typeOrNameConstruct]);
				}
				if (!typeName)
				{
					throw $es4.$$primitive(new (Error)("invalid type name"));
				}
				if ($es4.$$call($$thisp, $$this, $$thisp, 'hasIdentifier', [typeName]) && $es4.$$get($es4.$$call($$thisp, $$this, $$thisp, 'lookupIdentifier', [typeName]), $$this, $$thisp, 'isGlobal'))
				{
					return $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', [typeName]);
				}
				for (var i = 0; i < $es4.$$get(importConstructs, $$this, $$thisp, 'length'); i++)
				{
					var importConstruct = $es4.$$get(importConstructs, $$this, $$thisp, i);
					var innerName = $es4.$$get(importConstruct, $$this, $$thisp, 'nameConstruct', 'identifierTokens', $es4.$$get(importConstruct, $$this, $$thisp, 'nameConstruct', 'identifierTokens', 'length') - 1, 'data');
					if (innerName == typeName)
					{
						return $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', [$es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [$es4.$$get(importConstruct, $$this, $$thisp, 'nameConstruct')])]);
					}
				}
				for (var $$i8 = ($es4.$$get($$thisp, $$this, $$thisp, '_rootConstructs') || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i8 != 0; $$i8 = $es4.$$get($$thisp, $$this, $$thisp, '_rootConstructs').$$nextNameIndex($$i8))
				{
					var id = $es4.$$get($$thisp, $$this, $$thisp, '_rootConstructs').$$nextName($$i8);

					var rootConstruct = $es4.$$get($$thisp, $$this, $$thisp, '_rootConstructs', id);
					if (!rootConstruct)
					{
						throw $es4.$$primitive(new (Error)('Root construct null for id: ' + id));
					}
					if (!$es4.$$get(rootConstruct, $$this, $$thisp, 'packageConstruct'))
					{
						throw $es4.$$primitive(new (Error)('Package construct missing in: ' + id));
					}
					if ($es4.$$get(rootConstruct, $$this, $$thisp, 'packageConstruct', 'nameConstruct') && !$es4.$$get(construct, $$this, $$thisp, 'packageConstruct'))
					{
						continue;
					}
					if (!$es4.$$get(rootConstruct, $$this, $$thisp, 'packageConstruct', 'nameConstruct') && $es4.$$get(construct, $$this, $$thisp, 'packageConstruct', 'nameConstruct'))
					{
						continue;
					}
					if ($es4.$$get(rootConstruct, $$this, $$thisp, 'packageConstruct', 'nameConstruct') && $es4.$$get(construct, $$this, $$thisp, 'packageConstruct', 'nameConstruct'))
					{
						var a = $es4.$$coerce($es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [$es4.$$get(rootConstruct, $$this, $$thisp, 'packageConstruct', 'nameConstruct')]), String);
						var b = $es4.$$coerce($es4.$$call(Construct, $$this, $$thisp, 'nameConstructToString', [$es4.$$get(construct, $$this, $$thisp, 'packageConstruct', 'nameConstruct')]), String);
						if (a && (a != b))
						{
							continue;
						}
					}
					if ($es4.$$call($$thisp, $$this, $$thisp, 'hasIdentifier', [id]) && $es4.$$get($es4.$$call($$thisp, $$this, $$thisp, 'lookupIdentifier', [id]), $$this, $$thisp, 'isGlobal'))
					{
						continue;
					}
					if (!$es4.$$get(rootConstruct, $$this, $$thisp, 'packageConstruct', 'classConstruct') && !$es4.$$get(rootConstruct, $$this, $$thisp, 'packageConstruct', 'interfaceConstruct'))
					{
						continue;
					}
					if ($es4.$$call($es4.$$call(id, $$this, $$thisp, 'split', ['.']), $$this, $$thisp, 'pop', $es4.$$EMPTY_ARRAY) != typeName)
					{
						continue;
					}
					return $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', [id]);
				}
				if (typeName == $es4.$$get(construct, $$this, $$thisp, 'identifierToken', 'data'))
				{
					return $es4.$$call($$thisp, $$this, $$thisp, 'lookupType', [typeName]);
				}
				throw $es4.$$primitive(new (Error)('could not find type: ' + typeName + ' in ' + $es4.$$get(construct, $$this, $$thisp, 'identifierToken', 'data')));
			}
;
		}));

		//method
		$es4.$$private_function('print', $$thisp, (function ($$$$string, $$$$tabs, $$$$newlines, $$$$preNewLines)
		{
			//set default parameter values
			var string = $$$$string;
			var tabs = $$$$tabs;
			var newlines = $$$$newlines;
			var preNewLines = $$$$preNewLines;

			if (tabs)
			{
				for (var i = 0; i < tabs; i++)
				{
					string = '\t' + string;
				}
			}
			if (newlines)
			{
				for (var i = 0; i < newlines; i++)
				{
					string += '\n';
				}
			}
			if (preNewLines)
			{
				for (var i = 0; i < preNewLines; i++)
				{
					string = '\n' + string;
				}
			}
			return string;
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	////////////////INTERNAL CLASS////////////////
	var NamespaceObj = (function ()
	{
		//class initializer
		NamespaceObj.$$cinit = (function ()
		{
			NamespaceObj.$$cinit = undefined;

		});

		function NamespaceObj()
		{
			//initialize class if not initialized
			if (NamespaceObj.$$cinit !== undefined) NamespaceObj.$$cinit();

			//save scope
			var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
			var $$thisp = this;

			//handle possible cast
			if ($$this === $$thisp && (!($$this instanceof NamespaceObj) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], NamespaceObj) : $es4.$$throwArgumentError();
			Object.defineProperty($$this, '$$t', {value:1});

			//properties
			$es4.$$public_property('name', $$thisp);
			$es4.$$public_property('normalizedName', $$thisp, String);
			$es4.$$public_property('isCustom', $$thisp, Boolean);
			$es4.$$public_property('isPrivate', $$thisp, Boolean);
			$es4.$$public_property('namespaceIsPrivate', $$thisp, Boolean);
			$es4.$$public_property('normalizedImportID', $$thisp, String);
			$es4.$$public_property('importID', $$thisp, String);
			$es4.$$public_property('identifier', $$thisp, Identifier);
			$es4.$$public_property('isStatic', $$thisp, Boolean);

			//constructor
			$es4.$$constructor($$thisp, (function ($$$$name, $$$$importID, $$$$identifier)
			{
				//set default parameter values
				var name = $es4.$$coerce($$$$name, String);
				var importID = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$importID, String);
				var identifier = (2 > arguments.length - 1) ? null : $es4.$$coerce($$$$identifier, Identifier);

				$es4.$$set($$this, $$this, $$thisp, 'name', name, '=');
				var parts = $es4.$$call(name, $$this, $$thisp, 'split', ['.']);
				var part = $es4.$$call(parts, $$this, $$thisp, 'pop', $es4.$$EMPTY_ARRAY);
				$es4.$$set($$this, $$this, $$thisp, 'normalizedName', ($es4.$$get(parts, $$this, $$thisp, 'length')) ? '$[\'' + $es4.$$call(parts, $$this, $$thisp, 'join', ['.']) + '\'].' + part : part, '=');
				$es4.$$set($$this, $$this, $$thisp, 'isCustom', true, '=');
				$es4.$$set($$this, $$this, $$thisp, 'isPrivate', name == 'private', '=');
				$es4.$$set($$this, $$this, $$thisp, 'namespaceIsPrivate', false, '=');
				if (importID)
				{
					parts = $es4.$$call(importID, $$this, $$thisp, 'split', ['.']);
					part = $es4.$$call(parts, $$this, $$thisp, 'pop', $es4.$$EMPTY_ARRAY);
					$es4.$$set($$this, $$this, $$thisp, 'normalizedImportID', ($es4.$$get(parts, $$this, $$thisp, 'length')) ? '$[\'' + $es4.$$call(parts, $$this, $$thisp, 'join', ['.']) + '\'].' + part : part, '=');
				}
				$es4.$$set($$this, $$this, $$thisp, 'importID', importID, '=');
				$es4.$$set($$this, $$this, $$thisp, 'identifier', identifier, '=');
			}));

			//method
			$es4.$$public_function('toString', $$thisp, (function ()
			{
				return 'Namespace::: ' + $es4.$$get($$this, $$this, $$thisp, 'name');
			}));

			//call construct if no arguments, or argument zero does not equal manual construct
			if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
			{
				for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

				$es4.$$construct($$this, $$args);
			}
		}

		return $es4.$$class(NamespaceObj, null, 'NamespaceObj');
	})();

	////////////////INTERNAL CLASS////////////////
	var Type = (function ()
	{
		//class initializer
		Type.$$cinit = (function ()
		{
			Type.$$cinit = undefined;

		});

		function Type()
		{
			//initialize class if not initialized
			if (Type.$$cinit !== undefined) Type.$$cinit();

			//save scope
			var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
			var $$thisp = this;

			//handle possible cast
			if ($$this === $$thisp && (!($$this instanceof Type) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Type) : $es4.$$throwArgumentError();
			Object.defineProperty($$this, '$$t', {value:1});

			//properties
			$es4.$$public_property('name', $$thisp);
			$es4.$$public_property('fullyQualifiedName', $$thisp, String);
			$es4.$$public_property('packageName', $$thisp, String);
			$es4.$$public_property('rootConstruct', $$thisp, Object);
			$es4.$$public_property('construct', $$thisp);
			$es4.$$public_property('isGlobal', $$thisp, Boolean);
			$es4.$$public_property('isInterface', $$thisp, Boolean);
			$es4.$$public_property('accessed', $$thisp, Boolean);

			//constructor
			$es4.$$constructor($$thisp, (function ($$$$name, $$$$fullyQualifiedName, $$$$rootConstruct, $$$$construct)
			{
				//set default parameter values
				var name = $es4.$$coerce($$$$name, String);
				var fullyQualifiedName = $es4.$$coerce($$$$fullyQualifiedName, String);
				var rootConstruct = $es4.$$coerce($$$$rootConstruct, Object);
				var construct = $$$$construct;

				$es4.$$set($$this, $$this, $$thisp, 'name', name, '=');
				$es4.$$set($$this, $$this, $$thisp, 'fullyQualifiedName', (fullyQualifiedName) ? fullyQualifiedName : name, '=');
				var parts = $es4.$$call(fullyQualifiedName, $$this, $$thisp, 'split', ['.']);
				if ($es4.$$get(parts, $$this, $$thisp, 'length') > 1)
				{
					$es4.$$call(parts, $$this, $$thisp, 'pop', $es4.$$EMPTY_ARRAY);
					$es4.$$set($$this, $$this, $$thisp, 'packageName', $es4.$$call(parts, $$this, $$thisp, 'join', ['.']), '=');
				}
				else
				{
					$es4.$$set($$this, $$this, $$thisp, 'packageName', '', '=');
				}
				$es4.$$set($$this, $$this, $$thisp, 'rootConstruct', rootConstruct, '=');
				$es4.$$set($$this, $$this, $$thisp, 'construct', construct, '=');
				$es4.$$set($$this, $$this, $$thisp, 'isGlobal', false, '=');
				$es4.$$set($$this, $$this, $$thisp, 'isInterface', false, '=');
				$es4.$$set($$this, $$this, $$thisp, 'accessed', false, '=');
			}));

			//method
			$es4.$$public_function('toString', $$thisp, (function ()
			{
				if ($es4.$$get($$this, $$this, $$thisp, 'construct'))
				{
					return 'Type::: ' + $es4.$$get($$this, $$this, $$thisp, 'name') + ' Construct: ' + (($es4.$$get($$this, $$this, $$thisp, 'construct', 'identifierToken')) ? $es4.$$get($$this, $$this, $$thisp, 'construct', 'identifierToken', 'data') : '');
				}
				else
				{
					return 'Type::: ' + $es4.$$get($$this, $$this, $$thisp, 'name');
				}
			}));

			//call construct if no arguments, or argument zero does not equal manual construct
			if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
			{
				for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

				$es4.$$construct($$this, $$args);
			}
		}

		return $es4.$$class(Type, null, 'Type');
	})();

	////////////////INTERNAL CLASS////////////////
	var ExpressionResult = (function ()
	{
		//class initializer
		ExpressionResult.$$cinit = (function ()
		{
			ExpressionResult.$$cinit = undefined;

		});

		function ExpressionResult()
		{
			//initialize class if not initialized
			if (ExpressionResult.$$cinit !== undefined) ExpressionResult.$$cinit();

			//save scope
			var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
			var $$thisp = this;

			//handle possible cast
			if ($$this === $$thisp && (!($$this instanceof ExpressionResult) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], ExpressionResult) : $es4.$$throwArgumentError();
			Object.defineProperty($$this, '$$t', {value:1});

			//properties
			$es4.$$public_property('type', $$thisp);
			$es4.$$public_property('isNaN', $$thisp, Boolean);
			$es4.$$public_property('isNull', $$thisp, Boolean);
			$es4.$$public_property('isUndefined', $$thisp, Boolean);
			$es4.$$public_property('isVoid', $$thisp, Boolean);
			$es4.$$public_property('varIdentifier', $$thisp, Identifier);

			//constructor
			$es4.$$constructor($$thisp, (function ($$$$type, $$$$isNaN, $$$$isNull, $$$$isUndefined, $$$$isVoid, $$$$varIdentifier)
			{
				//set default parameter values
				var type = $$$$type;
				var isNaN = $es4.$$coerce($$$$isNaN, Boolean);
				var isNull = $es4.$$coerce($$$$isNull, Boolean);
				var isUndefined = $es4.$$coerce($$$$isUndefined, Boolean);
				var isVoid = $es4.$$coerce($$$$isVoid, Boolean);
				var varIdentifier = (5 > arguments.length - 1) ? null : $es4.$$coerce($$$$varIdentifier, Identifier);

				$es4.$$set($$this, $$this, $$thisp, 'type', type, '=');
				$es4.$$set($$this, $$this, $$thisp, 'isNaN', isNaN, '=');
				$es4.$$set($$this, $$this, $$thisp, 'isNull', isNull, '=');
				$es4.$$set($$this, $$this, $$thisp, 'isUndefined', isUndefined, '=');
				$es4.$$set($$this, $$this, $$thisp, 'isVoid', isVoid, '=');
				$es4.$$set($$this, $$this, $$thisp, 'varIdentifier', varIdentifier, '=');
			}));

			//call construct if no arguments, or argument zero does not equal manual construct
			if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
			{
				for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

				$es4.$$construct($$this, $$args);
			}
		}

		return $es4.$$class(ExpressionResult, null, 'ExpressionResult');
	})();

	////////////////INTERNAL CLASS////////////////
	var Identifier = (function ()
	{
		//class initializer
		Identifier.$$cinit = (function ()
		{
			Identifier.$$cinit = undefined;

		});

		function Identifier()
		{
			//initialize class if not initialized
			if (Identifier.$$cinit !== undefined) Identifier.$$cinit();

			//save scope
			var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
			var $$thisp = this;

			//handle possible cast
			if ($$this === $$thisp && (!($$this instanceof Identifier) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Identifier) : $es4.$$throwArgumentError();
			Object.defineProperty($$this, '$$t', {value:1});

			//properties
			$es4.$$public_property('name', $$thisp);
			$es4.$$public_property('type', $$thisp);
			$es4.$$public_property('vectorType', $$thisp);
			$es4.$$public_property('namespaceObj', $$thisp);
			$es4.$$public_property('construct', $$thisp);
			$es4.$$public_property('isStatic', $$thisp, Boolean);
			$es4.$$public_property('isNative', $$thisp, Boolean);
			$es4.$$public_property('isPrivate', $$thisp, Boolean);
			$es4.$$public_property('isPackage', $$thisp, Boolean);
			$es4.$$public_property('isProperty', $$thisp, Boolean);
			$es4.$$public_property('isMethod', $$thisp, Boolean);
			$es4.$$public_property('isGlobal', $$thisp, Boolean);
			$es4.$$public_property('isType', $$thisp, Boolean);
			$es4.$$public_property('isImport', $$thisp, Boolean);
			$es4.$$public_property('isNamespace', $$thisp, Boolean);
			$es4.$$public_property('isInternal', $$thisp, Boolean);
			$es4.$$public_property('scope', $$thisp);
			$es4.$$public_property('accessed', $$thisp, Boolean);
			$es4.$$public_property('fullPackageName', $$thisp, String);
			$es4.$$public_property('isVar', $$thisp, Boolean);
			$es4.$$public_property('isVarInitialized', $$thisp, Boolean);

			//constructor
			$es4.$$constructor($$thisp, (function ($$$$name, $$$$type, $$$$vectorType)
			{
				//set default parameter values
				var name = $$$$name;
				var type = $$$$type;
				var vectorType = (2 > arguments.length - 1) ? null : $$$$vectorType;

				$es4.$$set($$this, $$this, $$thisp, 'name', name, '=');
				$es4.$$set($$this, $$this, $$thisp, 'type', type, '=');
				$es4.$$set($$this, $$this, $$thisp, 'vectorType', vectorType, '=');
				$es4.$$get($$this, $$this, $$thisp, 'namespaceObj');
				$es4.$$get($$this, $$this, $$thisp, 'construct');
				$es4.$$set($$this, $$this, $$thisp, 'isStatic', false, '=');
				$es4.$$set($$this, $$this, $$thisp, 'isNative', false, '=');
				$es4.$$set($$this, $$this, $$thisp, 'isPrivate', false, '=');
				$es4.$$set($$this, $$this, $$thisp, 'isPackage', false, '=');
				$es4.$$set($$this, $$this, $$thisp, 'isProperty', false, '=');
				$es4.$$set($$this, $$this, $$thisp, 'isMethod', false, '=');
				$es4.$$set($$this, $$this, $$thisp, 'isGlobal', false, '=');
				$es4.$$set($$this, $$this, $$thisp, 'isType', false, '=');
				$es4.$$set($$this, $$this, $$thisp, 'isImport', false, '=');
				$es4.$$set($$this, $$this, $$thisp, 'isNamespace', false, '=');
				$es4.$$get($$this, $$this, $$thisp, 'scope');
				$es4.$$set($$this, $$this, $$thisp, 'accessed', false, '=');
				$es4.$$get($$this, $$this, $$thisp, 'fullPackageName');
				$es4.$$set($$this, $$this, $$thisp, 'isVar', false, '=');
				$es4.$$set($$this, $$this, $$thisp, 'isVarInitialized', false, '=');
			}));

			//method
			$es4.$$public_function('toString', $$thisp, (function ()
			{
				return 'Identifier::: ' + $es4.$$get($$this, $$this, $$thisp, 'name') + ', scope: ' + $es4.$$get($$this, $$this, $$thisp, 'scope');
			}));

			//call construct if no arguments, or argument zero does not equal manual construct
			if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
			{
				for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

				$es4.$$construct($$this, $$args);
			}
		}

		return $es4.$$class(Identifier, null, 'Identifier');
	})();

	return $es4.$$class(Analyzer, {CLASSES:[NamespaceObj, Type, ExpressionResult, Identifier]}, 'sweetrush.core::Analyzer');
})();
//sweetrush.core.Analyzer


//sweetrush.core.Lexer
$es4.$$package('sweetrush.core').Lexer = (function ()
{
	//imports
	var Transcompiler;
	var Token;
	var Base64Util;
	var Analyzer;
	var TranslatorPrototype;
	var FileUtil;
	var SwcUtil;
	var Construct;
	var TranslatorProto;
	var Lexer;
	var JsonUtil;
	var Token;
	var Parser;
	var Transcompiler;

	//properties
	$es4.$$private_property('grammar', Lexer, Array);

	//class initializer
	Lexer.$$cinit = (function ()
	{
		Lexer.$$cinit = undefined;

		//initialize imports
		Transcompiler = $es4.$$['sweetrush'].Transcompiler;
		Token = $es4.$$['sweetrush.obj'].Token;
		Base64Util = $es4.$$['sweetrush.utils'].Base64Util;
		Analyzer = $es4.$$['sweetrush.core'].Analyzer;
		TranslatorPrototype = $es4.$$['sweetrush.core'].TranslatorPrototype;
		FileUtil = $es4.$$['sweetrush.utils'].FileUtil;
		SwcUtil = $es4.$$['sweetrush.utils'].SwcUtil;
		Construct = $es4.$$['sweetrush.obj'].Construct;
		TranslatorProto = $es4.$$['sweetrush.core'].TranslatorProto;
		JsonUtil = $es4.$$['sweetrush.utils'].JsonUtil;
		Parser = $es4.$$['sweetrush.core'].Parser;

		//initialize properties
		Lexer.grammar = [$es4.$$get(Token, null, null, 'SpaceTokenType'), $es4.$$get(Token, null, null, 'TabTokenType'), $es4.$$get(Token, null, null, 'EOSTokenType'), $es4.$$get(Token, null, null, 'NewLineTokenType'), $es4.$$get(Token, null, null, 'OpenBracketTokenType'), $es4.$$get(Token, null, null, 'ClosedBracketTokenType'), $es4.$$get(Token, null, null, 'OpenParenTokenType'), $es4.$$get(Token, null, null, 'ClosedParenTokenType'), $es4.$$get(Token, null, null, 'VectorDotOpenArrowTokenType'), $es4.$$get(Token, null, null, 'XMLTokenType'), $es4.$$get(Token, null, null, 'XMLCDATATokenType'), $es4.$$get(Token, null, null, 'EqualityTokenType'), $es4.$$get(Token, null, null, 'BitwiseLeftShiftAssignmentTokenType'), $es4.$$get(Token, null, null, 'BitwiseUnsignedRightShiftAssignmentTokenType'), $es4.$$get(Token, null, null, 'BitwiseRightShiftAssignmentTokenType'), $es4.$$get(Token, null, null, 'BitwiseLeftShiftTokenType'), $es4.$$get(Token, null, null, 'BitwiseUnsignedRightShiftTokenType'), $es4.$$get(Token, null, null, 'BitwiseRightShiftTokenType'), $es4.$$get(Token, null, null, 'RelationalTokenType'), $es4.$$get(Token, null, null, 'AddWithAssignmentTokenType'), $es4.$$get(Token, null, null, 'DivWithAssignmentTokenType'), $es4.$$get(Token, null, null, 'ModWithAssignmentTokenType'), $es4.$$get(Token, null, null, 'MulWithAssignmentTokenType'), $es4.$$get(Token, null, null, 'SubWithAssignmentTokenType'), $es4.$$get(Token, null, null, 'AssignmentTokenType'), $es4.$$get(Token, null, null, 'NamespaceQualifierTokenType'), $es4.$$get(Token, null, null, 'ColonTokenType'), $es4.$$get(Token, null, null, 'CommaTokenType'), $es4.$$get(Token, null, null, 'BooleanTokenType'), $es4.$$get(Token, null, null, 'StringTokenType'), $es4.$$get(Token, null, null, 'AsTokenType'), $es4.$$get(Token, null, null, 'DeleteTokenType'), $es4.$$get(Token, null, null, 'IfTokenType'), $es4.$$get(Token, null, null, 'ElseTokenType'), $es4.$$get(Token, null, null, 'EachTokenType'), $es4.$$get(Token, null, null, 'ForTokenType'), $es4.$$get(Token, null, null, 'WhileTokenType'), $es4.$$get(Token, null, null, 'DoTokenType'), $es4.$$get(Token, null, null, 'TryTokenType'), $es4.$$get(Token, null, null, 'CatchTokenType'), $es4.$$get(Token, null, null, 'BreakTokenType'), $es4.$$get(Token, null, null, 'InTokenType'), $es4.$$get(Token, null, null, 'ContinueTokenType'), $es4.$$get(Token, null, null, 'DefaultTokenType'), $es4.$$get(Token, null, null, 'ConstTokenType'), $es4.$$get(Token, null, null, 'WithTokenType'), $es4.$$get(Token, null, null, 'FinallyTokenType'), $es4.$$get(Token, null, null, 'ThisTokenType'), $es4.$$get(Token, null, null, 'TypeofTokenType'), $es4.$$get(Token, null, null, 'NullTokenType'), $es4.$$get(Token, null, null, 'UndefinedTokenType'), $es4.$$get(Token, null, null, 'VoidTokenType'), $es4.$$get(Token, null, null, 'SuperTokenType'), $es4.$$get(Token, null, null, 'ReturnTokenType'), $es4.$$get(Token, null, null, 'ThrowTokenType'), $es4.$$get(Token, null, null, 'TernaryTokenType'), $es4.$$get(Token, null, null, 'ClassTokenType'), $es4.$$get(Token, null, null, 'ImportTokenType'), $es4.$$get(Token, null, null, 'ExtendsTokenType'), $es4.$$get(Token, null, null, 'ImplementsTokenType'), $es4.$$get(Token, null, null, 'OverrideTokenType'), $es4.$$get(Token, null, null, 'StaticTokenType'), $es4.$$get(Token, null, null, 'DynamicTokenType'), $es4.$$get(Token, null, null, 'InterfaceTokenType'), $es4.$$get(Token, null, null, 'FinalTokenType'), $es4.$$get(Token, null, null, 'NamespaceKeywordTokenType'), $es4.$$get(Token, null, null, 'NewTokenType'), $es4.$$get(Token, null, null, 'UseTokenType'), $es4.$$get(Token, null, null, 'CaseTokenType'), $es4.$$get(Token, null, null, 'FunctionTokenType'), $es4.$$get(Token, null, null, 'VarTokenType'), $es4.$$get(Token, null, null, 'NumberTokenType'), $es4.$$get(Token, null, null, 'AndWithAssignmentTokenType'), $es4.$$get(Token, null, null, 'OrWithAssignmentTokenType'), $es4.$$get(Token, null, null, 'AndTokenType'), $es4.$$get(Token, null, null, 'OrTokenType'), $es4.$$get(Token, null, null, 'BitwiseAndAssignmentTokenType'), $es4.$$get(Token, null, null, 'BitwiseOrAssignmentTokenType'), $es4.$$get(Token, null, null, 'BitwiseXorAssignmentTokenType'), $es4.$$get(Token, null, null, 'BitwiseAndTokenType'), $es4.$$get(Token, null, null, 'BitwiseNotTokenType'), $es4.$$get(Token, null, null, 'BitwiseOrTokenType'), $es4.$$get(Token, null, null, 'BitwiseXorTokenType'), $es4.$$get(Token, null, null, 'AtTokenType'), $es4.$$get(Token, null, null, 'SwitchTokenType'), $es4.$$get(Token, null, null, 'DotDotTokenType'), $es4.$$get(Token, null, null, 'DotTokenType'), $es4.$$get(Token, null, null, 'NotTokenType'), $es4.$$get(Token, null, null, 'IncrementTokenType'), $es4.$$get(Token, null, null, 'DecrementTokenType'), $es4.$$get(Token, null, null, 'OpenBraceTokenType'), $es4.$$get(Token, null, null, 'ClosedBraceTokenType'), $es4.$$get(Token, null, null, 'PackageTokenType'), $es4.$$get(Token, null, null, 'IsTokenType'), $es4.$$get(Token, null, null, 'NaNTokenType'), $es4.$$get(Token, null, null, 'InstanceofTokenType'), $es4.$$get(Token, null, null, 'IdentifierTokenType'), $es4.$$get(Token, null, null, 'CommentTokenType'), $es4.$$get(Token, null, null, 'MultiLineCommentTokenType'), $es4.$$get(Token, null, null, 'AddTokenType'), $es4.$$get(Token, null, null, 'SubTokenType'), $es4.$$get(Token, null, null, 'RegExpTokenType'), $es4.$$get(Token, null, null, 'DivTokenType'), $es4.$$get(Token, null, null, 'MulTokenType'), $es4.$$get(Token, null, null, 'ModTokenType'), $es4.$$get(Token, null, null, 'UFOTokenType')];
	});

	//method
	$es4.$$public_function('lex', Lexer, (function ($$$$input, $$$$grammar, $$$$internal_)
	{
		if (Lexer.$$cinit !== undefined) Lexer.$$cinit();

		//set default parameter values
		var input = $es4.$$coerce($$$$input, String);
		var grammar = (1 > arguments.length - 1) ? null : $es4.$$coerce($$$$grammar, Array);
		var internal_ = (2 > arguments.length - 1) ? null : $$$$internal_;

		var s = $es4.$$call(($es4.$$primitive(new (Date)())), null, null, 'getTime', $es4.$$EMPTY_ARRAY);
		if (!grammar)
		{
			grammar = $es4.$$get(Lexer, null, null, 'grammar');
		}
		if (!internal_)
		{
			input = $es4.$$call($es4.$$call(input, null, null, 'split', [/\r\n/]), null, null, 'join', ['\n']);
		}
		var token;
		var tokens = [];
		var matcherObj = $es4.$$call(Lexer, null, null, 'matcher', [input, grammar, internal_]);
		while ((token = $es4.$$call(matcherObj, null, null, 'find', $es4.$$EMPTY_ARRAY)) != null)
		{
			$es4.$$call(tokens, null, null, 'push', [token]);
		}
		if ($es4.$$get(Transcompiler, null, null, 'DEBUG') >= 5 && !internal_)
		{
			trace('Tokens length: ' + $es4.$$get(tokens, null, null, 'length') + ', Total time: ' + (($es4.$$call(($es4.$$primitive(new (Date)())), null, null, 'getTime', $es4.$$EMPTY_ARRAY) - s) / 1000) + ' seconds.\n');
		}
		return $es4.$$call(Token, null, null, 'getNewResult', [tokens, $es4.$$call(matcherObj, null, null, 'getIndex', $es4.$$EMPTY_ARRAY)]);
	}));

	//method
	$es4.$$private_function('matcher', Lexer, (function ($$$$input, $$$$grammar, $$$$internal_)
	{
		if (Lexer.$$cinit !== undefined) Lexer.$$cinit();

		//set default parameter values
		var input = $$$$input;
		var grammar = $$$$grammar;
		var internal_ = $$$$internal_;

		var tokensIndex = 0;
		var tokens = [];
		var currentLine = 1;
		var currentPosition = 0;
		var length = $es4.$$get(input, null, null, 'length');
		var foundTokens = [];
		var find = function () 
		{
			if ($es4.$$get(tokens, null, null, 'length'))
			{
				var token = $es4.$$get(tokens, null, null, tokensIndex);
				if ($es4.$$get(token, null, null, 'type') == $es4.$$get(Token, null, null, 'NewLineTokenType'))
				{
					$es4.$$set(token, null, null, 'position', currentPosition + 1, '=');
					$es4.$$set(token, null, null, 'line', currentLine, '=');
					currentLine++;
					currentPosition = 0;
				}
				else
				{
					$es4.$$set(token, null, null, 'position', currentPosition + 1, '=');
					$es4.$$set(token, null, null, 'line', currentLine, '=');
					currentPosition += $es4.$$get(token, null, null, 'data', 'length');
				}
				if ($es4.$$get(Transcompiler, null, null, 'DEBUG') >= 4 && !internal_)
				{
					trace($es4.$$get(token, null, null, 'line') + ' : ' + $es4.$$get(token, null, null, 'position') + ' : ' + $es4.$$get(token, null, null, 'type', 'name') + ' => ' + $es4.$$get(token, null, null, 'data'));
				}
				if (++tokensIndex == $es4.$$get(tokens, null, null, 'length'))
				{
					tokens = [];
					tokensIndex = 0;
				}
				return token;
			}
			if (!$es4.$$get(input, null, null, 'length'))
			{
				return null;
			}
			var grammarLength = $es4.$$get(grammar, null, null, 'length');
			for (var i = 0; i < grammarLength; i++)
			{
				var type = $es4.$$get(grammar, null, null, i);
				var result = $es4.$$call(Token, null, null, 'tokenFunctions', type, 'find', [input, foundTokens]);
				if (result)
				{
					input = $es4.$$call(input, null, null, 'slice', [$es4.$$get(result, null, null, 'index') + 1]);
					tokens = $es4.$$get(result, null, null, 'tokens');
					tokensIndex = 0;
					$es4.$$call(foundTokens, null, null, 'push', [tokens]);
					return find();
				}
			}
			if (!internal_ && $es4.$$get(input, null, null, 'length'))
			{
				throw $es4.$$primitive(new (Error)('Unknown token found on line ' + currentLine + ', at position ' + (currentPosition + 1)));
			}
			return null;
		}
;
		var getIndex = function () 
		{
			return length - $es4.$$get(input, null, null, 'length');
		}
;
		var api = {};
		$es4.$$set(api, null, null, 'find', find, '=');
		$es4.$$set(api, null, null, 'getIndex', getIndex, '=');
		return api;
	}));

	function Lexer()
	{
		//initialize class if not initialized
		if (Lexer.$$cinit !== undefined) Lexer.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof Lexer) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Lexer) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(Lexer, null, 'sweetrush.core::Lexer');
})();
//sweetrush.core.Lexer


//sweetrush.core.Parser
$es4.$$package('sweetrush.core').Parser = (function ()
{
	//imports
	var Construct;
	var Token;
	var Base64Util;
	var Analyzer;
	var TranslatorPrototype;
	var FileUtil;
	var SwcUtil;
	var Construct;
	var TranslatorProto;
	var Lexer;
	var JsonUtil;
	var Token;
	var Parser;
	var Transcompiler;

	//class initializer
	Parser.$$cinit = (function ()
	{
		Parser.$$cinit = undefined;

		//initialize imports
		Construct = $es4.$$['sweetrush.obj'].Construct;
		Token = $es4.$$['sweetrush.obj'].Token;
		Base64Util = $es4.$$['sweetrush.utils'].Base64Util;
		Analyzer = $es4.$$['sweetrush.core'].Analyzer;
		TranslatorPrototype = $es4.$$['sweetrush.core'].TranslatorPrototype;
		FileUtil = $es4.$$['sweetrush.utils'].FileUtil;
		SwcUtil = $es4.$$['sweetrush.utils'].SwcUtil;
		TranslatorProto = $es4.$$['sweetrush.core'].TranslatorProto;
		Lexer = $es4.$$['sweetrush.core'].Lexer;
		JsonUtil = $es4.$$['sweetrush.utils'].JsonUtil;
		Transcompiler = $es4.$$['sweetrush'].Transcompiler;
	});

	//method
	$es4.$$public_function('parse', Parser, (function ($$$$tokens, $$$$compileConstants, $$$$release)
	{
		if (Parser.$$cinit !== undefined) Parser.$$cinit();

		//set default parameter values
		var tokens = $es4.$$coerce($$$$tokens, Array);
		var compileConstants = $es4.$$coerce($$$$compileConstants, Object);
		var release = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$release, Boolean);

		if (!$es4.$$get(tokens, null, null, 'length'))
		{
			return null;
		}
		if (!compileConstants)
		{
			compileConstants = {};
		}
		var index = -1;
		var ahead = 1;
		var rootConstruct = $es4.$$call(Construct, null, null, 'getNewRootConstruct', $es4.$$EMPTY_ARRAY);
		var callsSuper = false;
		var inCompileConstant = false;
		var add = true;
		var previousAddValue = add;
		var token;
		var statementImportConstructs = [];
		loopa:		while (token = peek(ahead))
		{
			ahead++;
			switch ($es4.$$get(token, null, null, 'type'))
			{
				case $es4.$$get(Token, null, null, 'PackageTokenType'):
					var p = matchPackageConstruct(rootConstruct);
					if (add)
					{
						$es4.$$set(rootConstruct, null, null, 'packageConstruct', p, '=');
						$es4.$$set(rootConstruct, null, null, 'packageConstruct', 'rootConstruct', rootConstruct, '=');
					}
					break;
				case $es4.$$get(Token, null, null, 'ImportTokenType'):
					var p = matchImportConstruct();
					if (add)
					{
						$es4.$$call(rootConstruct, null, null, 'importConstructs', 'push', [p]);
					}
					break;
				case $es4.$$get(Token, null, null, 'ElseTokenType'):
					match($es4.$$get(Token, null, null, 'ElseTokenType'));
					if (inCompileConstant)
					{
						throw $es4.$$primitive(new (Error)('nested compile constants are not supported'));
					}
					inCompileConstant = true;
					add = !previousAddValue;
					match($es4.$$get(Token, null, null, 'OpenBraceTokenType'));
					break;
				case $es4.$$get(Token, null, null, 'IfTokenType'):
					match($es4.$$get(Token, null, null, 'IfTokenType'));
					match($es4.$$get(Token, null, null, 'OpenParenTokenType'));
					if (inCompileConstant)
					{
						throw $es4.$$primitive(new (Error)('nested compile constants are not supported'));
					}
				case $es4.$$get(Token, null, null, 'IdentifierTokenType'):
					if ($es4.$$get(peek(ahead, 0, true), null, null, 'type') == $es4.$$get(Token, null, null, 'NamespaceQualifierTokenType') && $es4.$$get(peek(ahead + 1, 0, true), null, null, 'type') == $es4.$$get(Token, null, null, 'IdentifierTokenType'))
					{
						if (inCompileConstant)
						{
							throw $es4.$$primitive(new (Error)('nested compile constants are not supported'));
						}
						var compileConstantIdentifier = '';
						compileConstantIdentifier += $es4.$$get(match($es4.$$get(Token, null, null, 'IdentifierTokenType')), null, null, 'data');
						compileConstantIdentifier += $es4.$$get(match($es4.$$get(Token, null, null, 'NamespaceQualifierTokenType')), null, null, 'data');
						compileConstantIdentifier += $es4.$$get(match($es4.$$get(Token, null, null, 'IdentifierTokenType')), null, null, 'data');
						match($es4.$$get(Token, null, null, 'ClosedParenTokenType'), true);
						inCompileConstant = true;
						add = $es4.$$get(compileConstants, null, null, compileConstantIdentifier) == 'true';
						match($es4.$$get(Token, null, null, 'OpenBraceTokenType'));
						break;
					}
					continue loopa;
				case $es4.$$get(Token, null, null, 'ClosedBraceTokenType'):
					if (inCompileConstant)
					{
						match($es4.$$get(Token, null, null, 'ClosedBraceTokenType'));
						inCompileConstant = false;
						previousAddValue = add;
						add = true;
						break;
					}
				case $es4.$$get(Token, null, null, 'FinalTokenType'):
				case $es4.$$get(Token, null, null, 'DynamicTokenType'):
					continue loopa;
				case $es4.$$get(Token, null, null, 'ClassTokenType'):
					var classConstruct = matchClassConstruct();
					if (add)
					{
						$es4.$$set(classConstruct, null, null, 'isInternal', true, '=');
						$es4.$$set(classConstruct, null, null, 'rootConstruct', rootConstruct, '=');
						$es4.$$set(rootConstruct, null, null, 'importConstructs', $es4.$$call(classConstruct, null, null, 'importConstructs', 'concat', [$es4.$$get(rootConstruct, null, null, 'importConstructs')]), '=');
						$es4.$$call(rootConstruct, null, null, 'classConstructs', 'push', [classConstruct]);
					}
					break;
				case $es4.$$get(Token, null, null, 'InterfaceTokenType'):
					var interfaceConstruct = matchInterfaceConstruct();
					if (add)
					{
						$es4.$$set(interfaceConstruct, null, null, 'isInternal', true, '=');
						$es4.$$set(interfaceConstruct, null, null, 'rootConstruct', rootConstruct, '=');
						$es4.$$call(rootConstruct, null, null, 'interfaceConstructs', 'push', [interfaceConstruct]);
					}
					break;
				case $es4.$$get(Token, null, null, 'FunctionTokenType'):
					var methodConstruct = matchMethodConstruct();
					if (add)
					{
						$es4.$$set(methodConstruct, null, null, 'isInternal', true, '=');
						$es4.$$set(methodConstruct, null, null, 'rootConstruct', rootConstruct, '=');
						if (!($es4.$$get(methodConstruct, null, null, 'UNIMPLEMENTEDToken') && release))
						{
							$es4.$$call(rootConstruct, null, null, 'methodConstructs', 'push', [methodConstruct]);
						}
					}
					break;
				case $es4.$$get(Token, null, null, 'NamespaceKeywordTokenType'):
				case $es4.$$get(Token, null, null, 'VarTokenType'):
					var propertyConstruct = matchPropertyConstruct();
					if (add)
					{
						$es4.$$set(propertyConstruct, null, null, 'isInternal', true, '=');
						$es4.$$set(propertyConstruct, null, null, 'rootConstruct', rootConstruct, '=');
						$es4.$$call(rootConstruct, null, null, 'propertyConstructs', 'push', [propertyConstruct]);
					}
					break;
				default:
					throw error('Unexpected token found11.', token);
			}
			ahead = 1;
		}

		function matchTypeConstruct() 
		{
			var typeConstruct = $es4.$$call(Construct, null, null, 'getNewTypeConstruct', $es4.$$EMPTY_ARRAY);
			var token = peek(1);
			if ($es4.$$get(token, null, null, 'type') == $es4.$$get(Token, null, null, 'MulTokenType'))
			{
				$es4.$$set(typeConstruct, null, null, 'mulToken', match($es4.$$get(Token, null, null, 'MulTokenType')), '=');
			}
			else if ($es4.$$get(token, null, null, 'type') == $es4.$$get(Token, null, null, 'VoidTokenType'))
			{
				$es4.$$set(typeConstruct, null, null, 'voidToken', match($es4.$$get(Token, null, null, 'VoidTokenType')), '=');
			}
			else
			{
				$es4.$$set(typeConstruct, null, null, 'nameConstruct', matchNameConstruct(), '=');
				if (match($es4.$$get(Token, null, null, 'VectorDotOpenArrowTokenType'), true))
				{
					$es4.$$set(typeConstruct, null, null, 'vectorNameConstruct', matchNameConstruct(), '=');
					match($es4.$$get(Token, null, null, 'VectorClosedArrowTokenType'));
				}
			}
			return typeConstruct;
		}
;

		function matchPackageConstruct($$$$rootConstruct) 
		{
			//set default parameter values
			var rootConstruct = $$$$rootConstruct;

			var packageConstruct = $es4.$$call(Construct, null, null, 'getNewPackageConstruct', $es4.$$EMPTY_ARRAY);
			match($es4.$$get(Token, null, null, 'PackageTokenType'));
			if ($es4.$$get(peek(1), null, null, 'type') == $es4.$$get(Token, null, null, 'IdentifierTokenType'))
			{
				$es4.$$set(packageConstruct, null, null, 'nameConstruct', matchNameConstruct(), '=');
			}
			else
			{
				$es4.$$set(packageConstruct, null, null, 'nameConstruct', $es4.$$call(Construct, null, null, 'getNewNameConstruct', $es4.$$EMPTY_ARRAY), '=');
			}
			match($es4.$$get(Token, null, null, 'OpenBraceTokenType'));
			var ahead = 1;
			var metaDataConstructs = [];
			var token;
			var inCompileConstant = false;
			var add = true;
			var previousAddValue = add;
			loopb:			while (token = peek(ahead, 0, true))
			{
				ahead++;
				switch ($es4.$$get(token, null, null, 'type'))
				{
					case $es4.$$get(Token, null, null, 'ImportTokenType'):
						var c = matchImportConstruct();
						if (add)
						{
							$es4.$$call(packageConstruct, null, null, 'importConstructs', 'push', [c]);
						}
						break;
					case $es4.$$get(Token, null, null, 'OpenBracketTokenType'):
						var c = matchMetaDataConstruct();
						if (add)
						{
							$es4.$$call(metaDataConstructs, null, null, 'push', [c]);
						}
						ahead = 1;
						continue loopb;
					case $es4.$$get(Token, null, null, 'StaticTokenType'):
					case $es4.$$get(Token, null, null, 'FinalTokenType'):
					case $es4.$$get(Token, null, null, 'OverrideTokenType'):
					case $es4.$$get(Token, null, null, 'DynamicTokenType'):
						continue loopb;
					case $es4.$$get(Token, null, null, 'UseTokenType'):
						var useConstruct = matchUseConstruct();
						if (add)
						{
							$es4.$$call(packageConstruct, null, null, 'useConstructs', 'push', [useConstruct]);
						}
						break;
					case $es4.$$get(Token, null, null, 'NamespaceKeywordTokenType'):
						var p = matchPropertyConstruct(metaDataConstructs);
						if (add)
						{
							$es4.$$set(packageConstruct, null, null, 'propertyConstruct', p, '=');
							$es4.$$set(packageConstruct, null, null, 'propertyConstruct', 'packageConstruct', packageConstruct, '=');
							$es4.$$set(packageConstruct, null, null, 'propertyConstruct', 'rootConstruct', rootConstruct, '=');
						}
						break;
					case $es4.$$get(Token, null, null, 'FunctionTokenType'):
						var m = matchMethodConstruct(metaDataConstructs);
						if (add)
						{
							$es4.$$set(packageConstruct, null, null, 'methodConstruct', m, '=');
							$es4.$$set(packageConstruct, null, null, 'methodConstruct', 'packageConstruct', packageConstruct, '=');
							$es4.$$set(packageConstruct, null, null, 'methodConstruct', 'rootConstruct', rootConstruct, '=');
						}
						break;
					case $es4.$$get(Token, null, null, 'ClassTokenType'):
						if (add && $es4.$$get(packageConstruct, null, null, 'classConstruct'))
						{
							throw error('Multiple definitions found in package.', token);
						}
						var c = matchClassConstruct();
						if (add)
						{
							$es4.$$set(packageConstruct, null, null, 'classConstruct', c, '=');
							$es4.$$set(packageConstruct, null, null, 'classConstruct', 'packageConstruct', packageConstruct, '=');
							$es4.$$set(packageConstruct, null, null, 'importConstructs', $es4.$$call(packageConstruct, null, null, 'classConstruct', 'importConstructs', 'concat', [$es4.$$get(packageConstruct, null, null, 'importConstructs')]), '=');
							$es4.$$set(packageConstruct, null, null, 'classConstruct', 'rootConstruct', rootConstruct, '=');
						}
						break;
					case $es4.$$get(Token, null, null, 'InterfaceTokenType'):
						if (add && $es4.$$get(packageConstruct, null, null, 'interfaceConstruct'))
						{
							throw error('Multiple definitions found in package.', token);
						}
						var c = matchInterfaceConstruct();
						if (add)
						{
							$es4.$$set(packageConstruct, null, null, 'interfaceConstruct', c, '=');
							$es4.$$set(packageConstruct, null, null, 'interfaceConstruct', 'packageConstruct', packageConstruct, '=');
							$es4.$$set(packageConstruct, null, null, 'interfaceConstruct', 'rootConstruct', rootConstruct, '=');
						}
						break;
					case $es4.$$get(Token, null, null, 'ElseTokenType'):
						match($es4.$$get(Token, null, null, 'ElseTokenType'));
						if (inCompileConstant)
						{
							throw $es4.$$primitive(new (Error)('nested compile constants are not supported'));
						}
						inCompileConstant = true;
						add = !previousAddValue;
						match($es4.$$get(Token, null, null, 'OpenBraceTokenType'));
						break;
					case $es4.$$get(Token, null, null, 'IfTokenType'):
						match($es4.$$get(Token, null, null, 'IfTokenType'));
						match($es4.$$get(Token, null, null, 'OpenParenTokenType'));
						if (inCompileConstant)
						{
							throw $es4.$$primitive(new (Error)('nested compile constants are not supported'));
						}
					case $es4.$$get(Token, null, null, 'IdentifierTokenType'):
						if ($es4.$$get(peek(ahead, 0, true), null, null, 'type') == $es4.$$get(Token, null, null, 'NamespaceQualifierTokenType') && $es4.$$get(peek(ahead + 1, 0, true), null, null, 'type') == $es4.$$get(Token, null, null, 'IdentifierTokenType'))
						{
							if (inCompileConstant)
							{
								throw $es4.$$primitive(new (Error)('nested compile constants are not supported'));
							}
							var compileConstantIdentifier = '';
							compileConstantIdentifier += $es4.$$get(match($es4.$$get(Token, null, null, 'IdentifierTokenType')), null, null, 'data');
							compileConstantIdentifier += $es4.$$get(match($es4.$$get(Token, null, null, 'NamespaceQualifierTokenType')), null, null, 'data');
							compileConstantIdentifier += $es4.$$get(match($es4.$$get(Token, null, null, 'IdentifierTokenType')), null, null, 'data');
							match($es4.$$get(Token, null, null, 'ClosedParenTokenType'), true);
							inCompileConstant = true;
							add = $es4.$$get(compileConstants, null, null, compileConstantIdentifier) == 'true';
							match($es4.$$get(Token, null, null, 'OpenBraceTokenType'));
							break;
						}
						continue loopb;
					case $es4.$$get(Token, null, null, 'ClosedBraceTokenType'):
						if (inCompileConstant)
						{
							match($es4.$$get(Token, null, null, 'ClosedBraceTokenType'));
							inCompileConstant = false;
							previousAddValue = add;
							add = true;
							break;
						}
						break loopb;
					default:
						throw error('Unexpected token found1.', token);
				}
				metaDataConstructs = [];
				ahead = 1;
			}
			match($es4.$$get(Token, null, null, 'ClosedBraceTokenType'));
			return packageConstruct;
		}
;

		function matchMetaDataConstruct() 
		{
			var metaDataConstruct = $es4.$$call(Construct, null, null, 'getNewMetaDataConstruct', $es4.$$EMPTY_ARRAY);
			match($es4.$$get(Token, null, null, 'OpenBracketTokenType'));
			while (!match($es4.$$get(Token, null, null, 'ClosedBracketTokenType'), true))
			{
				$es4.$$call(metaDataConstruct, null, null, 'tokens', 'push', [next()]);
			}
			match($es4.$$get(Token, null, null, 'EOSTokenType'), true, true);
			return metaDataConstruct;
		}
;

		function matchClassConstruct() 
		{
			var classConstruct = $es4.$$call(Construct, null, null, 'getNewClassConstruct', $es4.$$EMPTY_ARRAY);
			var token;
			loop1a:			while (token = next(0, true))
			{
				switch ($es4.$$get(token, null, null, 'type'))
				{
					case $es4.$$get(Token, null, null, 'IdentifierTokenType'):
						if ($es4.$$get(token, null, null, 'data') == 'UNIMPLEMENTED')
						{
							$es4.$$set(classConstruct, null, null, 'UNIMPLEMENTEDToken', token, '=');
						}
						else
						{
							$es4.$$set(classConstruct, null, null, 'namespaceToken', token, '=');
						}
						break;
					case $es4.$$get(Token, null, null, 'StaticTokenType'):
						$es4.$$set(classConstruct, null, null, 'staticToken', token, '=');
						break;
					case $es4.$$get(Token, null, null, 'FinalTokenType'):
						$es4.$$set(classConstruct, null, null, 'finalToken', token, '=');
						break;
					case $es4.$$get(Token, null, null, 'DynamicTokenType'):
						$es4.$$set(classConstruct, null, null, 'dynamicToken', token, '=');
						break;
					case $es4.$$get(Token, null, null, 'ClassTokenType'):
						break loop1a;
					default:
						throw error('Unexpected token found2.', token);
				}
			}
			$es4.$$set(classConstruct, null, null, 'identifierToken', match($es4.$$get(Token, null, null, 'IdentifierTokenType')), '=');
			loop2a:			while (token = next())
			{
				switch ($es4.$$get(token, null, null, 'type'))
				{
					case $es4.$$get(Token, null, null, 'ExtendsTokenType'):
						$es4.$$set(classConstruct, null, null, 'extendsNameConstruct', matchNameConstruct(), '=');
						break;
					case $es4.$$get(Token, null, null, 'ImplementsTokenType'):
						$es4.$$call(classConstruct, null, null, 'implementsNameConstructs', 'push', [matchNameConstruct()]);
						while (token = peek(1))
						{
							if ($es4.$$get(token, null, null, 'type') != $es4.$$get(Token, null, null, 'CommaTokenType'))
							{
								continue loop2a;
							}
							match($es4.$$get(Token, null, null, 'CommaTokenType'));
							$es4.$$call(classConstruct, null, null, 'implementsNameConstructs', 'push', [matchNameConstruct()]);
						}
						break;
					case $es4.$$get(Token, null, null, 'OpenBraceTokenType'):
						break loop2a;
					default:
						throw error('Unexpected token found3.', token);
				}
			}
			var add = true;
			var inCompileConstant = false;
			var previousAddValue = add;
			var metaDataConstructs = [];
			var ahead = 1;
			loop3a:			while (token = peek(ahead, 0, true))
			{
				ahead++;
				switch ($es4.$$get(token, null, null, 'type'))
				{
					case $es4.$$get(Token, null, null, 'ImportTokenType'):
						var c = matchImportConstruct();
						if (add)
						{
							$es4.$$call(classConstruct, null, null, 'importConstructs', 'push', [c]);
						}
						break;
					case $es4.$$get(Token, null, null, 'OpenBracketTokenType'):
						var c = matchMetaDataConstruct();
						if (add)
						{
							$es4.$$call(metaDataConstructs, null, null, 'push', [c]);
						}
						ahead = 1;
						continue loop3a;
					case $es4.$$get(Token, null, null, 'OpenBraceTokenType'):
						match($es4.$$get(Token, null, null, 'OpenBraceTokenType'));
						var innerInnerToken;
						while ((innerInnerToken = peek(1)) && ($es4.$$get(innerInnerToken, null, null, 'type') != $es4.$$get(Token, null, null, 'ClosedBraceTokenType')))
						{
							var s = matchStatement();
							if (add)
							{
								$es4.$$call(classConstruct, null, null, 'initializerStatements', 'push', [s]);
							}
						}
						match($es4.$$get(Token, null, null, 'ClosedBraceTokenType'));
						break;
					case $es4.$$get(Token, null, null, 'ElseTokenType'):
						match($es4.$$get(Token, null, null, 'ElseTokenType'));
						if (inCompileConstant)
						{
							throw $es4.$$primitive(new (Error)('nested compile constants are not supported'));
						}
						inCompileConstant = true;
						add = !previousAddValue;
						match($es4.$$get(Token, null, null, 'OpenBraceTokenType'));
						break;
					case $es4.$$get(Token, null, null, 'IfTokenType'):
						match($es4.$$get(Token, null, null, 'IfTokenType'));
						match($es4.$$get(Token, null, null, 'OpenParenTokenType'));
						if (inCompileConstant)
						{
							throw $es4.$$primitive(new (Error)('nested compile constants are not supported'));
						}
					case $es4.$$get(Token, null, null, 'IdentifierTokenType'):
						if ($es4.$$get(peek(ahead, 0, true), null, null, 'type') == $es4.$$get(Token, null, null, 'NamespaceQualifierTokenType') && $es4.$$get(peek(ahead + 1, 0, true), null, null, 'type') == $es4.$$get(Token, null, null, 'IdentifierTokenType'))
						{
							if (inCompileConstant)
							{
								throw $es4.$$primitive(new (Error)('nested compile constants are not supported'));
							}
							var compileConstantIdentifier = '';
							compileConstantIdentifier += $es4.$$get(match($es4.$$get(Token, null, null, 'IdentifierTokenType')), null, null, 'data');
							compileConstantIdentifier += $es4.$$get(match($es4.$$get(Token, null, null, 'NamespaceQualifierTokenType')), null, null, 'data');
							compileConstantIdentifier += $es4.$$get(match($es4.$$get(Token, null, null, 'IdentifierTokenType')), null, null, 'data');
							match($es4.$$get(Token, null, null, 'ClosedParenTokenType'), true);
							inCompileConstant = true;
							add = $es4.$$get(compileConstants, null, null, compileConstantIdentifier) == 'true';
							match($es4.$$get(Token, null, null, 'OpenBraceTokenType'));
							break;
						}
					case $es4.$$get(Token, null, null, 'OverrideTokenType'):
					case $es4.$$get(Token, null, null, 'StaticTokenType'):
					case $es4.$$get(Token, null, null, 'FinalTokenType'):
						continue loop3a;
					case $es4.$$get(Token, null, null, 'VarTokenType'):
					case $es4.$$get(Token, null, null, 'ConstTokenType'):
					case $es4.$$get(Token, null, null, 'NamespaceKeywordTokenType'):
						var propertyConstruct = matchPropertyConstruct(metaDataConstructs);
						if (add)
						{
							$es4.$$call(classConstruct, null, null, 'propertyConstructs', 'push', [propertyConstruct]);
						}
						break;
					case $es4.$$get(Token, null, null, 'FunctionTokenType'):
						var methodConstruct = matchMethodConstruct(metaDataConstructs);
						if ($es4.$$get(methodConstruct, null, null, 'UNIMPLEMENTEDToken') && release)
						{
							break;
						}
						if ($es4.$$get(methodConstruct, null, null, 'identifierToken', 'data') == $es4.$$get(classConstruct, null, null, 'identifierToken', 'data'))
						{
							if (add)
							{
								$es4.$$set(classConstruct, null, null, 'constructorMethodConstruct', methodConstruct, '=');
							}
							if ($es4.$$get(methodConstruct, null, null, 'isJavaScript'))
							{
								throw error('Constructor cannot be declared as native.', $es4.$$get(methodConstruct, null, null, 'identifierToken'));
							}
						}
						else if (add)
						{
							$es4.$$call(classConstruct, null, null, 'methodConstructs', 'push', [methodConstruct]);
						}
						break;
					case $es4.$$get(Token, null, null, 'UseTokenType'):
						var useConstruct = matchUseConstruct();
						if (add)
						{
							$es4.$$call(classConstruct, null, null, 'useConstructs', 'push', [useConstruct]);
						}
						break;
					case $es4.$$get(Token, null, null, 'ClosedBraceTokenType'):
						if (inCompileConstant)
						{
							match($es4.$$get(Token, null, null, 'ClosedBraceTokenType'));
							inCompileConstant = false;
							previousAddValue = add;
							add = true;
							break;
						}
						break loop3a;
					default:
						throw error('Unexpected token found4.', token);
				}
				metaDataConstructs = [];
				ahead = 1;
			}
			match($es4.$$get(Token, null, null, 'ClosedBraceTokenType'));
			return classConstruct;
		}
;

		function matchUseConstruct() 
		{
			var useConstruct = $es4.$$call(Construct, null, null, 'getNewUseConstruct', $es4.$$EMPTY_ARRAY);
			$es4.$$set(useConstruct, null, null, 'useToken', match($es4.$$get(Token, null, null, 'UseTokenType')), '=');
			match($es4.$$get(Token, null, null, 'NamespaceKeywordTokenType'));
			$es4.$$set(useConstruct, null, null, 'namespaceIdentifierToken', match($es4.$$get(Token, null, null, 'IdentifierTokenType')), '=');
			match($es4.$$get(Token, null, null, 'EOSTokenType'), true, true);
			return useConstruct;
		}
;

		function matchInterfaceConstruct() 
		{
			var interfaceConstruct = $es4.$$call(Construct, null, null, 'getNewInterfaceConstruct', $es4.$$EMPTY_ARRAY);
			var token;
			loop1b:			while (token = next())
			{
				switch ($es4.$$get(token, null, null, 'type'))
				{
					case $es4.$$get(Token, null, null, 'IdentifierTokenType'):
						$es4.$$set(interfaceConstruct, null, null, 'namespaceToken', token, '=');
						break;
					case $es4.$$get(Token, null, null, 'InterfaceTokenType'):
						break loop1b;
					default:
						throw error('Unexpected token found5.', token);
				}
			}
			$es4.$$set(interfaceConstruct, null, null, 'identifierToken', match($es4.$$get(Token, null, null, 'IdentifierTokenType')), '=');
			loop2b:			while (token = next())
			{
				switch ($es4.$$get(token, null, null, 'type'))
				{
					case $es4.$$get(Token, null, null, 'ExtendsTokenType'):
						$es4.$$call(interfaceConstruct, null, null, 'extendsNameConstructs', 'push', [matchNameConstruct()]);
						while (token = peek(1))
						{
							if ($es4.$$get(token, null, null, 'type') != $es4.$$get(Token, null, null, 'CommaTokenType'))
							{
								continue loop2b;
							}
							match($es4.$$get(Token, null, null, 'CommaTokenType'));
							$es4.$$call(interfaceConstruct, null, null, 'extendsNameConstructs', 'push', [matchNameConstruct()]);
						}
						break;
					case $es4.$$get(Token, null, null, 'OpenBraceTokenType'):
						break loop2b;
					default:
						throw error('Unexpected token found6.', token);
				}
			}
			var ahead = 1;
			loop3b:			while (token = peek(ahead))
			{
				ahead++;
				switch ($es4.$$get(token, null, null, 'type'))
				{
					case $es4.$$get(Token, null, null, 'FunctionTokenType'):
						var methodConstruct = $es4.$$call(Construct, null, null, 'getNewMethodConstruct', $es4.$$EMPTY_ARRAY);
						match($es4.$$get(Token, null, null, 'FunctionTokenType'));
						$es4.$$set(methodConstruct, null, null, 'setToken', match($es4.$$get(Token, null, null, 'SetTokenType'), true), '=');
						if (!$es4.$$get(methodConstruct, null, null, 'setToken'))
						{
							$es4.$$set(methodConstruct, null, null, 'getToken', match($es4.$$get(Token, null, null, 'GetTokenType'), true), '=');
						}
						$es4.$$set(methodConstruct, null, null, 'identifierToken', match($es4.$$get(Token, null, null, 'IdentifierTokenType')), '=');
						match($es4.$$get(Token, null, null, 'OpenParenTokenType'));
						while (!match($es4.$$get(Token, null, null, 'ClosedParenTokenType'), true))
						{
							$es4.$$call(methodConstruct, null, null, 'parameterConstructs', 'push', [matchParameterConstruct()]);
							match($es4.$$get(Token, null, null, 'CommaTokenType'), true);
						}
						if (match($es4.$$get(Token, null, null, 'ColonTokenType'), true))
						{
							$es4.$$set(methodConstruct, null, null, 'typeConstruct', matchTypeConstruct(), '=');
						}
						else
						{
							$es4.$$set(methodConstruct, null, null, 'typeConstruct', $es4.$$call(Construct, null, null, 'getNewTypeConstruct', $es4.$$EMPTY_ARRAY), '=');
							$es4.$$set(methodConstruct, null, null, 'typeConstruct', 'mulToken', $es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'MulTokenType'), '*']), '=');
						}
						match($es4.$$get(Token, null, null, 'EOSTokenType'), true, true);
						$es4.$$call(interfaceConstruct, null, null, 'methodConstructs', 'push', [methodConstruct]);
						break;
					case $es4.$$get(Token, null, null, 'ClosedBraceTokenType'):
						break loop3b;
					default:
						throw error('Unexpected token found7.', token);
				}
				ahead = 1;
			}
			match($es4.$$get(Token, null, null, 'ClosedBraceTokenType'));
			return interfaceConstruct;
		}
;

		function matchNameConstruct() 
		{
			var nameConstruct = $es4.$$call(Construct, null, null, 'getNewNameConstruct', $es4.$$EMPTY_ARRAY);
			$es4.$$call(nameConstruct, null, null, 'identifierTokens', 'push', [match($es4.$$get(Token, null, null, 'IdentifierTokenType'))]);
			var token1;
			var token2;
			while ((token1 = peek(1)) && (token2 = peek(2)))
			{
				if ($es4.$$get(token1, null, null, 'type') != $es4.$$get(Token, null, null, 'DotTokenType'))
				{
					break;
				}
				if ($es4.$$get(token2, null, null, 'type') != $es4.$$get(Token, null, null, 'IdentifierTokenType'))
				{
					break;
				}
				match($es4.$$get(Token, null, null, 'DotTokenType'));
				$es4.$$call(nameConstruct, null, null, 'identifierTokens', 'push', [match($es4.$$get(Token, null, null, 'IdentifierTokenType'))]);
			}
			return nameConstruct;
		}
;

		function matchImportConstruct() 
		{
			var importConstruct = $es4.$$call(Construct, null, null, 'getNewImportConstruct', $es4.$$EMPTY_ARRAY);
			match($es4.$$get(Token, null, null, 'ImportTokenType'));
			$es4.$$set(importConstruct, null, null, 'nameConstruct', matchNameConstruct(), '=');
			if (match($es4.$$get(Token, null, null, 'DotTokenType'), true))
			{
				$es4.$$set(importConstruct, null, null, 'mulToken', match($es4.$$get(Token, null, null, 'MulTokenType')), '=');
			}
			match($es4.$$get(Token, null, null, 'EOSTokenType'), true, true);
			return importConstruct;
		}
;

		function matchPropertyConstruct($$$$metaDataConstructs) 
		{
			//set default parameter values
			var metaDataConstructs = (0 > arguments.length - 1) ? null : $$$$metaDataConstructs;

			var propertyConstruct = $es4.$$call(Construct, null, null, 'getNewPropertyConstruct', $es4.$$EMPTY_ARRAY);
			var token;
			loop1c:			while (token = next(0, true))
			{
				switch ($es4.$$get(token, null, null, 'type'))
				{
					case $es4.$$get(Token, null, null, 'IdentifierTokenType'):
						$es4.$$set(propertyConstruct, null, null, 'namespaceToken', token, '=');
						break;
					case $es4.$$get(Token, null, null, 'StaticTokenType'):
						$es4.$$set(propertyConstruct, null, null, 'staticToken', token, '=');
						break;
					case $es4.$$get(Token, null, null, 'NamespaceKeywordTokenType'):
						$es4.$$set(propertyConstruct, null, null, 'namespaceKeywordToken', token, '=');
						break loop1c;
					case $es4.$$get(Token, null, null, 'ConstTokenType'):
						$es4.$$set(propertyConstruct, null, null, 'constToken', token, '=');
						break loop1c;
					case $es4.$$get(Token, null, null, 'VarTokenType'):
						break loop1c;
					default:
						throw error('Unexpected token found8.', token);
				}
			}
			$es4.$$set(propertyConstruct, null, null, 'identifierToken', match($es4.$$get(Token, null, null, 'IdentifierTokenType')), '=');
			if (match($es4.$$get(Token, null, null, 'ColonTokenType'), true))
			{
				$es4.$$set(propertyConstruct, null, null, 'typeConstruct', matchTypeConstruct(), '=');
			}
			else
			{
				$es4.$$set(propertyConstruct, null, null, 'typeConstruct', $es4.$$call(Construct, null, null, 'getNewTypeConstruct', $es4.$$EMPTY_ARRAY), '=');
				$es4.$$set(propertyConstruct, null, null, 'typeConstruct', 'mulToken', $es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'MulTokenType'), '*']), '=');
			}
			match($es4.$$get(Token, null, null, 'EOSTokenType'), true, true);
			if (metaDataConstructs)
			{
				for (var i = 0; i < $es4.$$get(metaDataConstructs, null, null, 'length'); i++)
				{
					var metaDataConstruct = $es4.$$get(metaDataConstructs, null, null, i);
					if ($es4.$$get(metaDataConstruct, null, null, 'tokens', 0, 'data') == 'Native')
					{
						$es4.$$set(propertyConstruct, null, null, 'isNative', true, '=');
						if (!$es4.$$get(propertyConstruct, null, null, 'namespaceToken') || $es4.$$get(propertyConstruct, null, null, 'namespaceToken', 'data') != 'private')
						{
							throw $es4.$$primitive(new (Error)('native properties must be defined as private'));
						}
						if ($es4.$$get(propertyConstruct, null, null, 'typeConstruct') && !$es4.$$get(propertyConstruct, null, null, 'typeConstruct', 'mulToken'))
						{
							throw $es4.$$primitive(new (Error)('native properties must be defined as type *'));
						}
						$es4.$$set(propertyConstruct, null, null, 'namespaceToken', null, '=');
					}
				}
			}
			if (!match($es4.$$get(Token, null, null, 'AssignmentTokenType'), true))
			{
				return propertyConstruct;
			}
			$es4.$$set(propertyConstruct, null, null, 'valueExpression', matchExpression(), '=');
			match($es4.$$get(Token, null, null, 'EOSTokenType'), true, true);
			return propertyConstruct;
		}
;

		function matchMethodConstruct($$$$metaDataConstructs) 
		{
			//set default parameter values
			var metaDataConstructs = (0 > arguments.length - 1) ? null : $$$$metaDataConstructs;

			var methodConstruct = $es4.$$call(Construct, null, null, 'getNewMethodConstruct', $es4.$$EMPTY_ARRAY);
			var token;
			loop1d:			while (token = next(0, true))
			{
				switch ($es4.$$get(token, null, null, 'type'))
				{
					case $es4.$$get(Token, null, null, 'IdentifierTokenType'):
						if ($es4.$$get(token, null, null, 'data') == 'UNIMPLEMENTED')
						{
							$es4.$$set(methodConstruct, null, null, 'UNIMPLEMENTEDToken', token, '=');
						}
						else
						{
							$es4.$$set(methodConstruct, null, null, 'namespaceToken', token, '=');
						}
						break;
					case $es4.$$get(Token, null, null, 'StaticTokenType'):
						$es4.$$set(methodConstruct, null, null, 'staticToken', token, '=');
						break;
					case $es4.$$get(Token, null, null, 'OverrideTokenType'):
						$es4.$$set(methodConstruct, null, null, 'overrideToken', token, '=');
						break;
					case $es4.$$get(Token, null, null, 'FinalTokenType'):
						break;
					case $es4.$$get(Token, null, null, 'FunctionTokenType'):
						break loop1d;
					default:
						throw error('Unexpected token found9.', token);
				}
			}
			$es4.$$set(methodConstruct, null, null, 'setToken', match($es4.$$get(Token, null, null, 'SetTokenType'), true), '=');
			if (!$es4.$$get(methodConstruct, null, null, 'setToken'))
			{
				$es4.$$set(methodConstruct, null, null, 'getToken', match($es4.$$get(Token, null, null, 'GetTokenType'), true), '=');
			}
			$es4.$$set(methodConstruct, null, null, 'identifierToken', match($es4.$$get(Token, null, null, 'IdentifierTokenType')), '=');
			match($es4.$$get(Token, null, null, 'OpenParenTokenType'));
			while (!match($es4.$$get(Token, null, null, 'ClosedParenTokenType'), true))
			{
				$es4.$$call(methodConstruct, null, null, 'parameterConstructs', 'push', [matchParameterConstruct()]);
				match($es4.$$get(Token, null, null, 'CommaTokenType'), true);
			}
			if (match($es4.$$get(Token, null, null, 'ColonTokenType'), true))
			{
				$es4.$$set(methodConstruct, null, null, 'typeConstruct', matchTypeConstruct(), '=');
			}
			else
			{
				$es4.$$set(methodConstruct, null, null, 'typeConstruct', $es4.$$call(Construct, null, null, 'getNewTypeConstruct', $es4.$$EMPTY_ARRAY), '=');
				$es4.$$set(methodConstruct, null, null, 'typeConstruct', 'mulToken', $es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'MulTokenType'), '*']), '=');
			}
			if (metaDataConstructs)
			{
				for (var i = 0; i < $es4.$$get(metaDataConstructs, null, null, 'length'); i++)
				{
					var metaDataConstruct = $es4.$$get(metaDataConstructs, null, null, i);
					if ($es4.$$get(metaDataConstruct, null, null, 'tokens', 0, 'data') == 'JavaScript')
					{
						$es4.$$set(methodConstruct, null, null, 'isJavaScript', true, '=');
					}
					if ($es4.$$get(metaDataConstruct, null, null, 'tokens', 0, 'data') == 'Native')
					{
						$es4.$$set(methodConstruct, null, null, 'isNative', true, '=');
						if (!$es4.$$get(methodConstruct, null, null, 'namespaceToken') || $es4.$$get(methodConstruct, null, null, 'namespaceToken', 'data') != 'private')
						{
							throw $es4.$$primitive(new (Error)('native methods must be defined as private'));
						}
						$es4.$$set(methodConstruct, null, null, 'namespaceToken', null, '=');
					}
				}
			}
			match($es4.$$get(Token, null, null, 'OpenBraceTokenType'), undefined, undefined);
			callsSuper = false;
			var open = 1;
			var closed = 0;
			if ($es4.$$get(methodConstruct, null, null, 'isJavaScript'))
			{
				while (token = next(2, undefined))
				{
					if ($es4.$$get(token, null, null, 'type') == $es4.$$get(Token, null, null, 'ClosedBraceTokenType'))
					{
						closed++;
						if (closed == open)
						{
							break;
						}
					}
					if ($es4.$$get(token, null, null, 'type') == $es4.$$get(Token, null, null, 'OpenBraceTokenType'))
					{
						open++;
					}
					$es4.$$set(methodConstruct, null, null, 'javaScriptString', $es4.$$get(token, null, null, 'data'), '+=');
				}
			}
			else
			{
				while (!match($es4.$$get(Token, null, null, 'ClosedBraceTokenType'), true, undefined))
				{
					$es4.$$call(methodConstruct, null, null, 'bodyStatements', 'push', [matchStatement(false, $es4.$$get(methodConstruct, null, null, 'namedFunctionExpressions'))]);
				}
			}
			$es4.$$set(methodConstruct, null, null, 'callsSuper', callsSuper, '=');
			match($es4.$$get(Token, null, null, 'EOSTokenType'), true, true);
			return methodConstruct;
		}
;

		function matchParameterConstruct() 
		{
			var argumentConstruct = $es4.$$call(Construct, null, null, 'getNewParameterConstruct', $es4.$$EMPTY_ARRAY);
			$es4.$$set(argumentConstruct, null, null, 'restToken', match($es4.$$get(Token, null, null, 'RestTokenType'), true), '=');
			$es4.$$set(argumentConstruct, null, null, 'identifierToken', match($es4.$$get(Token, null, null, 'IdentifierTokenType')), '=');
			if ($es4.$$get(argumentConstruct, null, null, 'restToken'))
			{
				return argumentConstruct;
			}
			if (match($es4.$$get(Token, null, null, 'ColonTokenType'), true))
			{
				$es4.$$set(argumentConstruct, null, null, 'typeConstruct', matchTypeConstruct(), '=');
			}
			else
			{
				$es4.$$set(argumentConstruct, null, null, 'typeConstruct', $es4.$$call(Construct, null, null, 'getNewTypeConstruct', $es4.$$EMPTY_ARRAY), '=');
				$es4.$$set(argumentConstruct, null, null, 'typeConstruct', 'mulToken', $es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'MulTokenType'), '*']), '=');
			}
			if (match($es4.$$get(Token, null, null, 'AssignmentTokenType'), true) && !match($es4.$$get(Token, null, null, 'MulTokenType'), true))
			{
				$es4.$$set(argumentConstruct, null, null, 'valueExpression', matchExpression(true), '=');
			}
			return argumentConstruct;
		}
;

		function matchPropertyExpression($$$$construct) 
		{
			//set default parameter values
			var construct = (0 > arguments.length - 1) ? null : $$$$construct;

			var token = peek(1);
			if ($es4.$$get(token, null, null, 'type') == $es4.$$get(Token, null, null, 'ThisTokenType'))
			{
				construct = $es4.$$call(Construct, null, null, 'getNewThisConstruct', $es4.$$EMPTY_ARRAY);
				$es4.$$set(construct, null, null, 'thisToken', match($es4.$$get(Token, null, null, 'ThisTokenType')), '=');
			}
			else if ($es4.$$get(token, null, null, 'type') == $es4.$$get(Token, null, null, 'SuperTokenType'))
			{
				construct = $es4.$$call(Construct, null, null, 'getNewSuperConstruct', $es4.$$EMPTY_ARRAY);
				$es4.$$set(construct, null, null, 'superToken', match($es4.$$get(Token, null, null, 'SuperTokenType')), '=');
				callsSuper = true;
			}
			else if ($es4.$$get(token, null, null, 'type') == $es4.$$get(Token, null, null, 'AtTokenType'))
			{
				match($es4.$$get(Token, null, null, 'AtTokenType'));
				construct = $es4.$$call(Construct, null, null, 'getNewAtIdentifierConstruct', $es4.$$EMPTY_ARRAY);
			}
			else if (!construct)
			{
				construct = $es4.$$call(Construct, null, null, 'getNewIdentifierConstruct', $es4.$$EMPTY_ARRAY);
				$es4.$$set(construct, null, null, 'identifierToken', match($es4.$$get(Token, null, null, 'IdentifierTokenType')), '=');
			}
			var propertyExpression = $es4.$$call(Construct, null, null, 'getNewPropertyExpression', $es4.$$EMPTY_ARRAY);
			$es4.$$set(propertyExpression, null, null, 'construct', construct, '=');
			var innerPropertyExpression;
			var nextPropertyExpression = propertyExpression;
			loopc:			while (token = peek(1))
			{
				innerPropertyExpression = null;
				switch ($es4.$$get(token, null, null, 'type'))
				{
					case $es4.$$get(Token, null, null, 'VectorDotOpenArrowTokenType'):
						match($es4.$$get(Token, null, null, 'VectorDotOpenArrowTokenType'));
						construct = $es4.$$call(Construct, null, null, 'getNewVectorConstruct', $es4.$$EMPTY_ARRAY);
						$es4.$$set(construct, null, null, 'nameConstruct', matchNameConstruct(), '=');
						match($es4.$$get(Token, null, null, 'VectorClosedArrowTokenType'));
						break;
					case $es4.$$get(Token, null, null, 'NamespaceQualifierTokenType'):
						construct = $es4.$$call(Construct, null, null, 'getNewNamespaceQualifierConstruct', $es4.$$EMPTY_ARRAY);
						$es4.$$set(construct, null, null, 'namespaceQualifierToken', match($es4.$$get(Token, null, null, 'NamespaceQualifierTokenType')), '=');
						$es4.$$set(construct, null, null, 'identifierToken', $es4.$$get(nextPropertyExpression, null, null, 'construct', 'identifierToken'), '=');
						$es4.$$set(construct, null, null, 'namespaceIdentifierToken', match($es4.$$get(Token, null, null, 'IdentifierTokenType')), '=');
						$es4.$$set(nextPropertyExpression, null, null, 'construct', construct, '=');
						continue loopc;
					case $es4.$$get(Token, null, null, 'IdentifierTokenType'):
						construct = $es4.$$call(Construct, null, null, 'getNewIdentifierConstruct', $es4.$$EMPTY_ARRAY);
						$es4.$$set(construct, null, null, 'identifierToken', match($es4.$$get(Token, null, null, 'IdentifierTokenType')), '=');
						break;
					case $es4.$$get(Token, null, null, 'DotTokenType'):
						match($es4.$$get(Token, null, null, 'DotTokenType'));
						if (match($es4.$$get(Token, null, null, 'AtTokenType'), true))
						{
							construct = $es4.$$call(Construct, null, null, 'getNewAtIdentifierConstruct', $es4.$$EMPTY_ARRAY);
						}
						else if (match($es4.$$get(Token, null, null, 'OpenParenTokenType'), true))
						{
							throw $es4.$$primitive(new (Error)('E4X is not supported'));
							construct = $es4.$$call(Construct, null, null, 'getNewE4XSearchConstruct', $es4.$$EMPTY_ARRAY);
							$es4.$$set(construct, null, null, 'expression', matchExpression(), '=');
							if ($es4.$$get(construct, null, null, 'expression', 'constructor') == 'PropertyExpression')
							{
								$es4.$$set(construct, null, null, 'expression', 'root', false, '=');
							}
							match($es4.$$get(Token, null, null, 'ClosedParenTokenType'));
						}
						else
						{
							construct = $es4.$$call(Construct, null, null, 'getNewDotConstruct', $es4.$$EMPTY_ARRAY);
							$es4.$$set(construct, null, null, 'identifierToken', match($es4.$$get(Token, null, null, 'IdentifierTokenType')), '=');
						}
						break;
					case $es4.$$get(Token, null, null, 'OpenBracketTokenType'):
						match($es4.$$get(Token, null, null, 'OpenBracketTokenType'));
						construct = $es4.$$call(Construct, null, null, 'getNewArrayAccessorConstruct', $es4.$$EMPTY_ARRAY);
						$es4.$$set(construct, null, null, 'expression', matchExpression(), '=');
						if ($es4.$$get(construct, null, null, 'expression', 'constructor') == 'PropertyExpression')
						{
							$es4.$$set(construct, null, null, 'expression', 'root', false, '=');
						}
						match($es4.$$get(Token, null, null, 'ClosedBracketTokenType'));
						break;
					case $es4.$$get(Token, null, null, 'OpenParenTokenType'):
						match($es4.$$get(Token, null, null, 'OpenParenTokenType'));
						construct = $es4.$$call(Construct, null, null, 'getNewFunctionCallConstruct', $es4.$$EMPTY_ARRAY);
						while (!match($es4.$$get(Token, null, null, 'ClosedParenTokenType'), true))
						{
							$es4.$$call(construct, null, null, 'argumentExpressions', 'push', [matchExpression(true)]);
							match($es4.$$get(Token, null, null, 'CommaTokenType'), true);
						}
						break;
					default:
						break loopc;
				}
				if (!innerPropertyExpression)
				{
					innerPropertyExpression = $es4.$$call(Construct, null, null, 'getNewPropertyExpression', $es4.$$EMPTY_ARRAY);
					$es4.$$set(innerPropertyExpression, null, null, 'construct', construct, '=');
				}
				$es4.$$set(nextPropertyExpression, null, null, 'nextPropertyExpression', innerPropertyExpression, '=');
				nextPropertyExpression = innerPropertyExpression;
			}
			return propertyExpression;
		}
;

		function matchStatement($$$$dontmatchEOS, $$$$namedFunctionExpressions, $$$$dontReadIn) 
		{
			//set default parameter values
			var dontmatchEOS = (0 > arguments.length - 1) ? false : $es4.$$coerce($$$$dontmatchEOS, Boolean);
			var namedFunctionExpressions = (1 > arguments.length - 1) ? null : $$$$namedFunctionExpressions;
			var dontReadIn = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$dontReadIn, Boolean);

			var statement;
			var token = peek(1, undefined, undefined);
			var innerToken;
			var openBraceTokenType;
			var innerToken1;
			var innerToken2;
			var innerInnerToken;
			var tokenType = $es4.$$get(token, null, null, 'type');
			var foundCompileConstantIdentifier = false;
			if ($es4.$$get(peek(2, 0, true), null, null, 'type') == $es4.$$get(Token, null, null, 'NamespaceQualifierTokenType') && $es4.$$get(compileConstants, null, null, $es4.$$get(token, null, null, 'data') + $es4.$$get(peek(2, 0, true), null, null, 'data') + $es4.$$get(peek(3, 0, true), null, null, 'data')) !== undefined)
			{
				foundCompileConstantIdentifier = true;
				tokenType = $es4.$$get(Token, null, null, 'IfTokenType');
			}
			switch (tokenType)
			{
				case $es4.$$get(Token, null, null, 'ImportTokenType'):
					var p = matchImportConstruct();
					$es4.$$call(statementImportConstructs, null, null, 'push', [p]);
					statement = $es4.$$call(Construct, null, null, 'getNewEmptyStatement', $es4.$$EMPTY_ARRAY);
					break;
				case $es4.$$get(Token, null, null, 'IfTokenType'):
					if (!foundCompileConstantIdentifier)
					{
						match($es4.$$get(Token, null, null, 'IfTokenType'));
					}
					statement = $es4.$$call(Construct, null, null, 'getNewIfStatement', $es4.$$EMPTY_ARRAY);
					if (!foundCompileConstantIdentifier)
					{
						match($es4.$$get(Token, null, null, 'OpenParenTokenType'));
					}
					var inCompileConstant = false;
					var inCompileConstantLocal = false;
					var innerStatement;
					var add = true;
					if ($es4.$$get(peek(1, 0, true), null, null, 'type') == $es4.$$get(Token, null, null, 'IdentifierTokenType') && $es4.$$get(peek(2, 0, true), null, null, 'type') == $es4.$$get(Token, null, null, 'NamespaceQualifierTokenType') && $es4.$$get(compileConstants, null, null, $es4.$$get(peek(1, 0, true), null, null, 'data') + $es4.$$get(peek(2, 0, true), null, null, 'data') + $es4.$$get(peek(3, 0, true), null, null, 'data')) !== undefined)
					{
						if (inCompileConstant)
						{
							throw $es4.$$primitive(new (Error)('nested compile constants are not supported'));
						}
						inCompileConstantLocal = true;
						inCompileConstant = true;
						var compileConstantIdentifier = '';
						compileConstantIdentifier += $es4.$$get(match($es4.$$get(Token, null, null, 'IdentifierTokenType')), null, null, 'data');
						compileConstantIdentifier += $es4.$$get(match($es4.$$get(Token, null, null, 'NamespaceQualifierTokenType')), null, null, 'data');
						compileConstantIdentifier += $es4.$$get(match($es4.$$get(Token, null, null, 'IdentifierTokenType')), null, null, 'data');
						add = $es4.$$get(compileConstants, null, null, compileConstantIdentifier) == 'true';
						var booleanExpression = $es4.$$call(Construct, null, null, 'getNewBooleanExpression', $es4.$$EMPTY_ARRAY);
						$es4.$$set(booleanExpression, null, null, 'booleanToken', $es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'BooleanTokenType'), $es4.$$call(add, null, null, 'toString', $es4.$$EMPTY_ARRAY)]), '=');
						$es4.$$set(statement, null, null, 'conditionExpression', booleanExpression, '=');
					}
					else
					{
						$es4.$$set(statement, null, null, 'conditionExpression', matchExpression(false, namedFunctionExpressions), '=');
					}
					if (!foundCompileConstantIdentifier)
					{
						match($es4.$$get(Token, null, null, 'ClosedParenTokenType'));
					}
					foundCompileConstantIdentifier = false;
					openBraceTokenType = match($es4.$$get(Token, null, null, 'OpenBraceTokenType'), true);
					loopd:					while ((innerToken = peek(1)) && ($es4.$$get(innerToken, null, null, 'type') != $es4.$$get(Token, null, null, 'ClosedBraceTokenType')))
					{
						innerStatement = matchStatement(false, namedFunctionExpressions);
						if (add)
						{
							$es4.$$call(statement, null, null, 'bodyStatements', 'push', [innerStatement]);
						}
						if (!openBraceTokenType)
						{
							break loopd;
						}
					}
					if (openBraceTokenType)
					{
						match($es4.$$get(Token, null, null, 'ClosedBraceTokenType'));
					}
					while (((innerToken1 = peek(1)) && (innerToken2 = peek(2))) && ($es4.$$get(innerToken1, null, null, 'type') == $es4.$$get(Token, null, null, 'ElseTokenType') && $es4.$$get(innerToken2, null, null, 'type') == $es4.$$get(Token, null, null, 'IfTokenType')))
					{
						match($es4.$$get(Token, null, null, 'ElseTokenType'));
						match($es4.$$get(Token, null, null, 'IfTokenType'));
						var elseIfStatement = $es4.$$call(Construct, null, null, 'getNewElseIfStatement', $es4.$$EMPTY_ARRAY);
						match($es4.$$get(Token, null, null, 'OpenParenTokenType'));
						$es4.$$set(elseIfStatement, null, null, 'conditionExpression', matchExpression(false, namedFunctionExpressions), '=');
						match($es4.$$get(Token, null, null, 'ClosedParenTokenType'));
						openBraceTokenType = match($es4.$$get(Token, null, null, 'OpenBraceTokenType'), true);
						loope:						while ((innerToken = peek(1)) && ($es4.$$get(innerToken, null, null, 'type') != $es4.$$get(Token, null, null, 'ClosedBraceTokenType')))
						{
							$es4.$$call(elseIfStatement, null, null, 'bodyStatements', 'push', [matchStatement(false, namedFunctionExpressions)]);
							if (!openBraceTokenType)
							{
								break loope;
							}
						}
						if (openBraceTokenType)
						{
							match($es4.$$get(Token, null, null, 'ClosedBraceTokenType'));
						}
						$es4.$$call(statement, null, null, 'elseIfStatements', 'push', [elseIfStatement]);
					}
					while ((innerToken1 = peek(1)) && ($es4.$$get(innerToken1, null, null, 'type') == $es4.$$get(Token, null, null, 'ElseTokenType')))
					{
						var elseStatement = $es4.$$call(Construct, null, null, 'getNewElseStatement', $es4.$$EMPTY_ARRAY);
						match($es4.$$get(Token, null, null, 'ElseTokenType'));
						openBraceTokenType = match($es4.$$get(Token, null, null, 'OpenBraceTokenType'), true);
						loopf:						while ((innerInnerToken = peek(1)) && ($es4.$$get(innerInnerToken, null, null, 'type') != $es4.$$get(Token, null, null, 'ClosedBraceTokenType')))
						{
							innerStatement = matchStatement(false, namedFunctionExpressions);
							if (inCompileConstantLocal)
							{
								if (!add)
								{
									$es4.$$call(elseStatement, null, null, 'bodyStatements', 'push', [innerStatement]);
								}
							}
							else
							{
								$es4.$$call(elseStatement, null, null, 'bodyStatements', 'push', [innerStatement]);
							}
							if (!openBraceTokenType)
							{
								break loopf;
							}
						}
						if (openBraceTokenType)
						{
							match($es4.$$get(Token, null, null, 'ClosedBraceTokenType'));
						}
						$es4.$$set(statement, null, null, 'elseStatement', elseStatement, '=');
					}
					if (inCompileConstantLocal)
					{
						inCompileConstant = false;
					}
					break;
				case $es4.$$get(Token, null, null, 'WhileTokenType'):
					statement = $es4.$$call(Construct, null, null, 'getNewWhileStatement', $es4.$$EMPTY_ARRAY);
					match($es4.$$get(Token, null, null, 'WhileTokenType'));
					match($es4.$$get(Token, null, null, 'OpenParenTokenType'));
					$es4.$$set(statement, null, null, 'conditionExpression', matchExpression(false, namedFunctionExpressions), '=');
					match($es4.$$get(Token, null, null, 'ClosedParenTokenType'));
					openBraceTokenType = match($es4.$$get(Token, null, null, 'OpenBraceTokenType'), true);
					loopg:					while ((innerToken = peek(1)) && ($es4.$$get(innerToken, null, null, 'type') != $es4.$$get(Token, null, null, 'ClosedBraceTokenType')))
					{
						$es4.$$call(statement, null, null, 'bodyStatements', 'push', [matchStatement(false, namedFunctionExpressions)]);
						if (!openBraceTokenType)
						{
							break loopg;
						}
					}
					if (openBraceTokenType)
					{
						match($es4.$$get(Token, null, null, 'ClosedBraceTokenType'));
					}
					break;
				case $es4.$$get(Token, null, null, 'DoTokenType'):
					statement = $es4.$$call(Construct, null, null, 'getNewDoWhileStatement', $es4.$$EMPTY_ARRAY);
					match($es4.$$get(Token, null, null, 'DoTokenType'));
					openBraceTokenType = match($es4.$$get(Token, null, null, 'OpenBraceTokenType'), true);
					looph:					while ((innerToken = peek(1)) && ($es4.$$get(innerToken, null, null, 'type') != $es4.$$get(Token, null, null, 'ClosedBraceTokenType')))
					{
						$es4.$$call(statement, null, null, 'bodyStatements', 'push', [matchStatement(false, namedFunctionExpressions)]);
						if (!openBraceTokenType)
						{
							break looph;
						}
					}
					if (openBraceTokenType)
					{
						match($es4.$$get(Token, null, null, 'ClosedBraceTokenType'));
					}
					match($es4.$$get(Token, null, null, 'WhileTokenType'));
					match($es4.$$get(Token, null, null, 'OpenParenTokenType'));
					$es4.$$set(statement, null, null, 'conditionExpression', matchExpression(false, namedFunctionExpressions), '=');
					match($es4.$$get(Token, null, null, 'ClosedParenTokenType'));
					break;
				case $es4.$$get(Token, null, null, 'ForTokenType'):
					match($es4.$$get(Token, null, null, 'ForTokenType'));
					if ($es4.$$get(peek(1), null, null, 'type') == $es4.$$get(Token, null, null, 'EachTokenType'))
					{
						match($es4.$$get(Token, null, null, 'EachTokenType'));
						statement = $es4.$$call(Construct, null, null, 'getNewForEachStatement', $es4.$$EMPTY_ARRAY);
						match($es4.$$get(Token, null, null, 'OpenParenTokenType'));
						$es4.$$set(statement, null, null, 'variableStatement', matchStatement(false, namedFunctionExpressions, true), '=');
						match($es4.$$get(Token, null, null, 'InTokenType'));
						$es4.$$set(statement, null, null, 'arrayExpression', matchExpression(false, namedFunctionExpressions), '=');
						match($es4.$$get(Token, null, null, 'ClosedParenTokenType'));
						openBraceTokenType = match($es4.$$get(Token, null, null, 'OpenBraceTokenType'), true);
						loopi:						while ((innerToken = peek(1)) && ($es4.$$get(innerToken, null, null, 'type') != $es4.$$get(Token, null, null, 'ClosedBraceTokenType')))
						{
							$es4.$$call(statement, null, null, 'bodyStatements', 'push', [matchStatement(false, namedFunctionExpressions)]);
							if (!openBraceTokenType)
							{
								break loopi;
							}
						}
						if (openBraceTokenType)
						{
							match($es4.$$get(Token, null, null, 'ClosedBraceTokenType'));
						}
						break;
					}
					match($es4.$$get(Token, null, null, 'OpenParenTokenType'));
					var ahead = 1;
					var openParens = 1;
					var closedParens = 0;
					var inTokenFound = false;
					while (innerToken = peek(ahead))
					{
						if ($es4.$$get(innerToken, null, null, 'type') == $es4.$$get(Token, null, null, 'OpenParenTokenType'))
						{
							openParens++;
						}
						if ($es4.$$get(innerToken, null, null, 'type') == $es4.$$get(Token, null, null, 'ClosedParenTokenType'))
						{
							closedParens++;
						}
						if ($es4.$$get(innerToken, null, null, 'type') == $es4.$$get(Token, null, null, 'InTokenType'))
						{
							inTokenFound = true;
						}
						if (openParens == closedParens || inTokenFound)
						{
							break;
						}
						ahead++;
					}
					if (inTokenFound)
					{
						statement = $es4.$$call(Construct, null, null, 'getNewForInStatement', $es4.$$EMPTY_ARRAY);
						$es4.$$set(statement, null, null, 'variableStatement', matchStatement(false, namedFunctionExpressions, true), '=');
						match($es4.$$get(Token, null, null, 'InTokenType'));
						$es4.$$set(statement, null, null, 'objectExpression', matchExpression(false, namedFunctionExpressions), '=');
						match($es4.$$get(Token, null, null, 'ClosedParenTokenType'));
					}
					else
					{
						statement = $es4.$$call(Construct, null, null, 'getNewForStatement', $es4.$$EMPTY_ARRAY);
						var eosTokenType = match($es4.$$get(Token, null, null, 'EOSTokenType'), 1);
						if (!eosTokenType)
						{
							$es4.$$set(statement, null, null, 'variableStatement', matchStatement(true, namedFunctionExpressions), '=');
							match($es4.$$get(Token, null, null, 'EOSTokenType'));
						}
						eosTokenType = match($es4.$$get(Token, null, null, 'EOSTokenType'), 1);
						if (!eosTokenType)
						{
							$es4.$$set(statement, null, null, 'conditionExpression', matchExpression(false, namedFunctionExpressions), '=');
							match($es4.$$get(Token, null, null, 'EOSTokenType'));
						}
						var closedParenTokenType = match($es4.$$get(Token, null, null, 'ClosedParenTokenType'), 1);
						if (!closedParenTokenType)
						{
							$es4.$$set(statement, null, null, 'afterthoughtExpression', matchExpression(false, namedFunctionExpressions), '=');
							match($es4.$$get(Token, null, null, 'ClosedParenTokenType'));
						}
					}
					openBraceTokenType = match($es4.$$get(Token, null, null, 'OpenBraceTokenType'), true);
					loop2f:					while ((innerToken = peek(1)) && ($es4.$$get(innerToken, null, null, 'type') != $es4.$$get(Token, null, null, 'ClosedBraceTokenType')))
					{
						$es4.$$call(statement, null, null, 'bodyStatements', 'push', [matchStatement(false, namedFunctionExpressions)]);
						if (!openBraceTokenType)
						{
							break loop2f;
						}
					}
					if (openBraceTokenType)
					{
						match($es4.$$get(Token, null, null, 'ClosedBraceTokenType'));
					}
					break;
				case $es4.$$get(Token, null, null, 'BreakTokenType'):
					statement = $es4.$$call(Construct, null, null, 'getNewBreakStatement', $es4.$$EMPTY_ARRAY);
					$es4.$$set(statement, null, null, 'token', match($es4.$$get(Token, null, null, 'BreakTokenType')), '=');
					$es4.$$set(statement, null, null, 'identifierToken', match($es4.$$get(Token, null, null, 'IdentifierTokenType'), true), '=');
					break;
				case $es4.$$get(Token, null, null, 'ContinueTokenType'):
					statement = $es4.$$call(Construct, null, null, 'getNewContinueStatement', $es4.$$EMPTY_ARRAY);
					$es4.$$set(statement, null, null, 'token', match($es4.$$get(Token, null, null, 'ContinueTokenType')), '=');
					$es4.$$set(statement, null, null, 'identifierToken', match($es4.$$get(Token, null, null, 'IdentifierTokenType'), true), '=');
					break;
				case $es4.$$get(Token, null, null, 'ThrowTokenType'):
					statement = $es4.$$call(Construct, null, null, 'getNewThrowStatement', $es4.$$EMPTY_ARRAY);
					$es4.$$set(statement, null, null, 'token', match($es4.$$get(Token, null, null, 'ThrowTokenType')), '=');
					$es4.$$set(statement, null, null, 'expression', matchExpression(false, namedFunctionExpressions), '=');
					break;
				case $es4.$$get(Token, null, null, 'UseTokenType'):
					statement = $es4.$$call(Construct, null, null, 'getNewUseStatement', $es4.$$EMPTY_ARRAY);
					$es4.$$set(statement, null, null, 'useToken', match($es4.$$get(Token, null, null, 'UseTokenType')), '=');
					match($es4.$$get(Token, null, null, 'NamespaceKeywordTokenType'));
					$es4.$$set(statement, null, null, 'namespaceIdentifierToken', match($es4.$$get(Token, null, null, 'IdentifierTokenType')), '=');
					break;
				case $es4.$$get(Token, null, null, 'TryTokenType'):
					match($es4.$$get(Token, null, null, 'TryTokenType'));
					statement = $es4.$$call(Construct, null, null, 'getNewTryStatement', $es4.$$EMPTY_ARRAY);
					openBraceTokenType = match($es4.$$get(Token, null, null, 'OpenBraceTokenType'), true);
					loop2g:					while ((innerToken = peek(1)) && ($es4.$$get(innerToken, null, null, 'type') != $es4.$$get(Token, null, null, 'ClosedBraceTokenType')))
					{
						$es4.$$call(statement, null, null, 'bodyStatements', 'push', [matchStatement(false, namedFunctionExpressions)]);
						if (!openBraceTokenType)
						{
							break loop2g;
						}
					}
					if (openBraceTokenType)
					{
						match($es4.$$get(Token, null, null, 'ClosedBraceTokenType'));
					}
					while (match($es4.$$get(Token, null, null, 'CatchTokenType'), true))
					{
						var catchStatement = $es4.$$call(Construct, null, null, 'getNewCatchStatement', $es4.$$EMPTY_ARRAY);
						match($es4.$$get(Token, null, null, 'OpenParenTokenType'));
						$es4.$$set(catchStatement, null, null, 'identifierToken', match($es4.$$get(Token, null, null, 'IdentifierTokenType')), '=');
						if (match($es4.$$get(Token, null, null, 'ColonTokenType'), true))
						{
							$es4.$$set(catchStatement, null, null, 'typeConstruct', matchTypeConstruct(), '=');
						}
						else
						{
							$es4.$$set(catchStatement, null, null, 'typeConstruct', $es4.$$call(Construct, null, null, 'getNewTypeConstruct', $es4.$$EMPTY_ARRAY), '=');
							$es4.$$set(catchStatement, null, null, 'typeConstruct', 'mulToken', $es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'MulTokenType'), '*']), '=');
						}
						match($es4.$$get(Token, null, null, 'ClosedParenTokenType'));
						openBraceTokenType = match($es4.$$get(Token, null, null, 'OpenBraceTokenType'), true);
						loopt:						while ((innerInnerToken = peek(1)) && ($es4.$$get(innerInnerToken, null, null, 'type') != $es4.$$get(Token, null, null, 'ClosedBraceTokenType')))
						{
							$es4.$$call(catchStatement, null, null, 'bodyStatements', 'push', [matchStatement(false, namedFunctionExpressions)]);
							if (!openBraceTokenType)
							{
								break loopt;
							}
						}
						if (openBraceTokenType)
						{
							match($es4.$$get(Token, null, null, 'ClosedBraceTokenType'));
						}
						$es4.$$call(statement, null, null, 'catchStatements', 'push', [catchStatement]);
					}
					while (match($es4.$$get(Token, null, null, 'FinallyTokenType'), true))
					{
						var finallyStatement = $es4.$$call(Construct, null, null, 'getNewFinallyStatement', $es4.$$EMPTY_ARRAY);
						openBraceTokenType = match($es4.$$get(Token, null, null, 'OpenBraceTokenType'), true);
						loopx:						while ((innerInnerToken = peek(1)) && ($es4.$$get(innerInnerToken, null, null, 'type') != $es4.$$get(Token, null, null, 'ClosedBraceTokenType')))
						{
							$es4.$$call(finallyStatement, null, null, 'bodyStatements', 'push', [matchStatement(false, namedFunctionExpressions)]);
							if (!openBraceTokenType)
							{
								break loopx;
							}
						}
						if (openBraceTokenType)
						{
							match($es4.$$get(Token, null, null, 'ClosedBraceTokenType'));
						}
						$es4.$$set(statement, null, null, 'finallyStatement', finallyStatement, '=');
					}
					break;
				case $es4.$$get(Token, null, null, 'VarTokenType'):
				case $es4.$$get(Token, null, null, 'ConstTokenType'):
					statement = $es4.$$call(Construct, null, null, 'getNewVarStatement', $es4.$$EMPTY_ARRAY);
					if (match($es4.$$get(Token, null, null, 'VarTokenType'), true))
					{
					}
					else
					{
						match($es4.$$get(Token, null, null, 'ConstTokenType'), true);
					}
					$es4.$$set(statement, null, null, 'identifierToken', match($es4.$$get(Token, null, null, 'IdentifierTokenType')), '=');
					if (match($es4.$$get(Token, null, null, 'ColonTokenType'), true))
					{
						$es4.$$set(statement, null, null, 'typeConstruct', matchTypeConstruct(), '=');
					}
					else
					{
						$es4.$$set(statement, null, null, 'typeConstruct', $es4.$$call(Construct, null, null, 'getNewTypeConstruct', $es4.$$EMPTY_ARRAY), '=');
						$es4.$$set(statement, null, null, 'typeConstruct', 'mulToken', $es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'MulTokenType'), '*']), '=');
					}
					if (match($es4.$$get(Token, null, null, 'AssignmentTokenType'), true))
					{
						$es4.$$set(statement, null, null, 'valueExpression', matchExpression(true, namedFunctionExpressions), '=');
					}
					while (match($es4.$$get(Token, null, null, 'CommaTokenType'), true))
					{
						var innerVarStatement = $es4.$$call(Construct, null, null, 'getNewVarStatement', $es4.$$EMPTY_ARRAY);
						$es4.$$set(innerVarStatement, null, null, 'identifierToken', match($es4.$$get(Token, null, null, 'IdentifierTokenType')), '=');
						if (match($es4.$$get(Token, null, null, 'ColonTokenType'), true))
						{
							$es4.$$set(innerVarStatement, null, null, 'typeConstruct', matchTypeConstruct(), '=');
						}
						else
						{
							$es4.$$set(innerVarStatement, null, null, 'typeConstruct', $es4.$$call(Construct, null, null, 'getNewTypeConstruct', $es4.$$EMPTY_ARRAY), '=');
							$es4.$$set(innerVarStatement, null, null, 'typeConstruct', 'mulToken', $es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'MulTokenType'), '*']), '=');
						}
						if (match($es4.$$get(Token, null, null, 'AssignmentTokenType'), true))
						{
							$es4.$$set(innerVarStatement, null, null, 'valueExpression', matchExpression(true, namedFunctionExpressions), '=');
						}
						$es4.$$call(statement, null, null, 'innerVarStatements', 'push', [innerVarStatement]);
					}
					break;
				case $es4.$$get(Token, null, null, 'SwitchTokenType'):
					statement = $es4.$$call(Construct, null, null, 'getNewSwitchStatement', $es4.$$EMPTY_ARRAY);
					match($es4.$$get(Token, null, null, 'SwitchTokenType'));
					match($es4.$$get(Token, null, null, 'OpenParenTokenType'));
					$es4.$$set(statement, null, null, 'valueExpression', matchExpression(false, namedFunctionExpressions), '=');
					match($es4.$$get(Token, null, null, 'ClosedParenTokenType'));
					match($es4.$$get(Token, null, null, 'OpenBraceTokenType'), true);
					while ((innerToken = peek(1)) && ($es4.$$get(innerToken, null, null, 'type') == $es4.$$get(Token, null, null, 'CaseTokenType') || $es4.$$get(innerToken, null, null, 'type') == $es4.$$get(Token, null, null, 'DefaultTokenType')))
					{
						var caseStatement = $es4.$$call(Construct, null, null, 'getNewCaseStatement', $es4.$$EMPTY_ARRAY);
						if ($es4.$$get(innerToken, null, null, 'type') == $es4.$$get(Token, null, null, 'CaseTokenType'))
						{
							match($es4.$$get(Token, null, null, 'CaseTokenType'));
							$es4.$$set(caseStatement, null, null, 'valueExpression', matchExpression(false, namedFunctionExpressions), '=');
						}
						if ($es4.$$get(innerToken, null, null, 'type') == $es4.$$get(Token, null, null, 'DefaultTokenType'))
						{
							$es4.$$set(caseStatement, null, null, 'defaultToken', match($es4.$$get(Token, null, null, 'DefaultTokenType')), '=');
						}
						match($es4.$$get(Token, null, null, 'ColonTokenType'));
						var openFound = match($es4.$$get(Token, null, null, 'OpenBraceTokenType'), true);
						while ((innerToken = peek(1)) && ($es4.$$get(innerToken, null, null, 'type') != $es4.$$get(Token, null, null, 'CaseTokenType') && $es4.$$get(innerToken, null, null, 'type') != $es4.$$get(Token, null, null, 'DefaultTokenType') && $es4.$$get(innerToken, null, null, 'type') != $es4.$$get(Token, null, null, 'ClosedBraceTokenType')))
						{
							$es4.$$call(caseStatement, null, null, 'bodyStatements', 'push', [matchStatement(false, namedFunctionExpressions)]);
						}
						if (openFound)
						{
							match($es4.$$get(Token, null, null, 'ClosedBraceTokenType'));
						}
						$es4.$$call(statement, null, null, 'caseStatements', 'push', [caseStatement]);
					}
					match($es4.$$get(Token, null, null, 'ClosedBraceTokenType'));
					break;
				default:
					if ($es4.$$get(peek(1), null, null, 'type') == $es4.$$get(Token, null, null, 'IdentifierTokenType') && (peek(2) && $es4.$$get(peek(2), null, null, 'type') == $es4.$$get(Token, null, null, 'ColonTokenType')))
					{
						statement = $es4.$$call(Construct, null, null, 'getNewLabelStatement', $es4.$$EMPTY_ARRAY);
						$es4.$$set(statement, null, null, 'identifierToken', match($es4.$$get(Token, null, null, 'IdentifierTokenType')), '=');
						match($es4.$$get(Token, null, null, 'ColonTokenType'));
						break;
					}
					statement = matchExpression(false, namedFunctionExpressions, false, false, dontReadIn);
			}
			if (!dontmatchEOS)
			{
				match($es4.$$get(Token, null, null, 'EOSTokenType'), true, true);
			}
			return statement;
		}
;

		function matchExpression($$$$ignoreCommas, $$$$namedFunctionExpressions, $$$$operand, $$$$optional, $$$$dontReadIn) 
		{
			//set default parameter values
			var ignoreCommas = (0 > arguments.length - 1) ? false : $es4.$$coerce($$$$ignoreCommas, Boolean);
			var namedFunctionExpressions = (1 > arguments.length - 1) ? null : $$$$namedFunctionExpressions;
			var operand = (2 > arguments.length - 1) ? null : $$$$operand;
			var optional = (3 > arguments.length - 1) ? false : $es4.$$coerce($$$$optional, Boolean);
			var dontReadIn = (4 > arguments.length - 1) ? false : $es4.$$coerce($$$$dontReadIn, Boolean);

			var expression = null;
			var expressions = [];
			var ternaryTokens = 0;
			var token;
			var construct;
			var regExpString;
			var prefixExpression;
			var binaryExpression;
			var binaryExpressionParent;
			loopy:			while (token = peek(1))
			{
				switch ($es4.$$get(token, null, null, 'type'))
				{
					case $es4.$$get(Token, null, null, 'OpenParenTokenType'):
						match($es4.$$get(Token, null, null, 'OpenParenTokenType'));
						expression = $es4.$$call(Construct, null, null, 'getNewParenExpression', $es4.$$EMPTY_ARRAY);
						$es4.$$set(expression, null, null, 'expression', matchExpression(false, namedFunctionExpressions), '=');
						match($es4.$$get(Token, null, null, 'ClosedParenTokenType'));
						if (peek(1) && ($es4.$$get(peek(1), null, null, 'type') == $es4.$$get(Token, null, null, 'DotTokenType') || $es4.$$get(peek(1), null, null, 'type') == $es4.$$get(Token, null, null, 'OpenBracketTokenType') || $es4.$$get(peek(1), null, null, 'type') == $es4.$$get(Token, null, null, 'OpenParenTokenType')))
						{
							construct = $es4.$$call(Construct, null, null, 'getNewParenConstruct', $es4.$$EMPTY_ARRAY);
							$es4.$$set(construct, null, null, 'expression', expression, '=');
							expression = matchPropertyExpression(construct);
						}
						break;
					case $es4.$$get(Token, null, null, 'NumberTokenType'):
						expression = $es4.$$call(Construct, null, null, 'getNewNumberExpression', $es4.$$EMPTY_ARRAY);
						$es4.$$set(expression, null, null, 'numberToken', match($es4.$$get(Token, null, null, 'NumberTokenType')), '=');
						break;
					case $es4.$$get(Token, null, null, 'StringTokenType'):
						expression = $es4.$$call(Construct, null, null, 'getNewStringExpression', $es4.$$EMPTY_ARRAY);
						$es4.$$set(expression, null, null, 'stringToken', match($es4.$$get(Token, null, null, 'StringTokenType')), '=');
						while (token = match($es4.$$get(Token, null, null, 'StringChunkTokenType'), true))
						{
							$es4.$$call(expression, null, null, 'stringChunkTokens', 'push', [token]);
						}
						$es4.$$set(expression, null, null, 'stringEndToken', match($es4.$$get(Token, null, null, 'StringEndTokenType')), '=');
						if (peek(1) && ($es4.$$get(peek(1), null, null, 'type') == $es4.$$get(Token, null, null, 'DotTokenType') || $es4.$$get(peek(1), null, null, 'type') == $es4.$$get(Token, null, null, 'OpenBracketTokenType') || $es4.$$get(peek(1), null, null, 'type') == $es4.$$get(Token, null, null, 'OpenParenTokenType')))
						{
							construct = $es4.$$call(Construct, null, null, 'getNewParenConstruct', $es4.$$EMPTY_ARRAY);
							$es4.$$set(construct, null, null, 'expression', expression, '=');
							expression = matchPropertyExpression(construct);
						}
						break;
					case $es4.$$get(Token, null, null, 'ReturnTokenType'):
						expression = $es4.$$call(Construct, null, null, 'getNewReturnExpression', $es4.$$EMPTY_ARRAY);
						match($es4.$$get(Token, null, null, 'ReturnTokenType'));
						if ($es4.$$get(peek(1), null, null, 'type') != $es4.$$get(Token, null, null, 'ClosedBraceTokenType') && $es4.$$get(peek(1), null, null, 'type') != $es4.$$get(Token, null, null, 'EOSTokenType'))
						{
							$es4.$$set(expression, null, null, 'expression', matchExpression(false, namedFunctionExpressions), '=');
						}
						break;
					case $es4.$$get(Token, null, null, 'DeleteTokenType'):
						expression = $es4.$$call(Construct, null, null, 'getNewDeleteExpression', $es4.$$EMPTY_ARRAY);
						match($es4.$$get(Token, null, null, 'DeleteTokenType'));
						$es4.$$set(expression, null, null, 'expression', matchExpression(ignoreCommas, namedFunctionExpressions, true), '=');
						break;
					case $es4.$$get(Token, null, null, 'FunctionTokenType'):
						expression = $es4.$$call(Construct, null, null, 'getNewFunctionExpression', $es4.$$EMPTY_ARRAY);
						match($es4.$$get(Token, null, null, 'FunctionTokenType'));
						$es4.$$set(expression, null, null, 'identifierToken', match($es4.$$get(Token, null, null, 'IdentifierTokenType'), true), '=');
						if ($es4.$$get(expression, null, null, 'identifierToken') && namedFunctionExpressions)
						{
							$es4.$$call(namedFunctionExpressions, null, null, 'push', [expression]);
						}
						match($es4.$$get(Token, null, null, 'OpenParenTokenType'));
						while (!match($es4.$$get(Token, null, null, 'ClosedParenTokenType'), true))
						{
							$es4.$$call(expression, null, null, 'parameterConstructs', 'push', [matchParameterConstruct()]);
							match($es4.$$get(Token, null, null, 'CommaTokenType'), true);
						}
						if (match($es4.$$get(Token, null, null, 'ColonTokenType'), true))
						{
							$es4.$$set(expression, null, null, 'typeConstruct', matchTypeConstruct(), '=');
						}
						else
						{
							$es4.$$set(expression, null, null, 'typeConstruct', $es4.$$call(Construct, null, null, 'getNewTypeConstruct', $es4.$$EMPTY_ARRAY), '=');
							$es4.$$set(expression, null, null, 'typeConstruct', 'mulToken', $es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'MulTokenType'), '*']), '=');
						}
						match($es4.$$get(Token, null, null, 'OpenBraceTokenType'));
						while (!match($es4.$$get(Token, null, null, 'ClosedBraceTokenType'), true))
						{
							$es4.$$call(expression, null, null, 'bodyStatements', 'push', [matchStatement(false, $es4.$$get(expression, null, null, 'namedFunctionExpressions'))]);
						}
						break;
					case $es4.$$get(Token, null, null, 'OpenBraceTokenType'):
						expression = $es4.$$call(Construct, null, null, 'getNewObjectExpression', $es4.$$EMPTY_ARRAY);
						match($es4.$$get(Token, null, null, 'OpenBraceTokenType'));
						while (!match($es4.$$get(Token, null, null, 'ClosedBraceTokenType'), true))
						{
							var objectPropertyConstruct = $es4.$$call(Construct, null, null, 'getNewObjectPropertyConstruct', $es4.$$EMPTY_ARRAY);
							$es4.$$set(objectPropertyConstruct, null, null, 'expression', matchExpression(false, namedFunctionExpressions), '=');
							match($es4.$$get(Token, null, null, 'ColonTokenType'));
							$es4.$$set(objectPropertyConstruct, null, null, 'valueExpression', matchExpression(true, namedFunctionExpressions), '=');
							$es4.$$call(expression, null, null, 'objectPropertyConstructs', 'push', [objectPropertyConstruct]);
							match($es4.$$get(Token, null, null, 'CommaTokenType'), true);
						}
						if (peek(1) && ($es4.$$get(peek(1), null, null, 'type') == $es4.$$get(Token, null, null, 'DotTokenType') || $es4.$$get(peek(1), null, null, 'type') == $es4.$$get(Token, null, null, 'OpenBracketTokenType')))
						{
							expression = matchPropertyExpression($es4.$$call(Construct, null, null, 'getNewObjectConstruct', [expression]));
						}
						break;
					case $es4.$$get(Token, null, null, 'OpenBracketTokenType'):
						expression = $es4.$$call(Construct, null, null, 'getNewArrayExpression', $es4.$$EMPTY_ARRAY);
						match($es4.$$get(Token, null, null, 'OpenBracketTokenType'));
						while (!match($es4.$$get(Token, null, null, 'ClosedBracketTokenType'), true))
						{
							$es4.$$call(expression, null, null, 'valueExpressions', 'push', [matchExpression(true, namedFunctionExpressions)]);
							match($es4.$$get(Token, null, null, 'CommaTokenType'), true);
						}
						if (peek(1) && ($es4.$$get(peek(1), null, null, 'type') == $es4.$$get(Token, null, null, 'DotTokenType') || $es4.$$get(peek(1), null, null, 'type') == $es4.$$get(Token, null, null, 'OpenBracketTokenType')))
						{
							expression = matchPropertyExpression($es4.$$call(Construct, null, null, 'getNewArrayConstruct', [expression]));
						}
						break;
					case $es4.$$get(Token, null, null, 'BooleanTokenType'):
						expression = $es4.$$call(Construct, null, null, 'getNewBooleanExpression', $es4.$$EMPTY_ARRAY);
						$es4.$$set(expression, null, null, 'booleanToken', match($es4.$$get(Token, null, null, 'BooleanTokenType')), '=');
						break;
					case $es4.$$get(Token, null, null, 'NaNTokenType'):
						expression = $es4.$$call(Construct, null, null, 'getNewExpression', [match($es4.$$get(Token, null, null, 'NaNTokenType'))]);
						break;
					case $es4.$$get(Token, null, null, 'UndefinedTokenType'):
						expression = $es4.$$call(Construct, null, null, 'getNewExpression', [match($es4.$$get(Token, null, null, 'UndefinedTokenType'))]);
						break;
					case $es4.$$get(Token, null, null, 'ThisTokenType'):
						expression = matchPropertyExpression();
						break;
					case $es4.$$get(Token, null, null, 'NullTokenType'):
						expression = $es4.$$call(Construct, null, null, 'getNewExpression', [match($es4.$$get(Token, null, null, 'NullTokenType'))]);
						break;
					case $es4.$$get(Token, null, null, 'AddTokenType'):
						expression = $es4.$$call(Construct, null, null, 'getNewExpression', [match($es4.$$get(Token, null, null, 'AddTokenType')), matchExpression(true, namedFunctionExpressions, true)]);
						break;
					case $es4.$$get(Token, null, null, 'SubTokenType'):
						expression = $es4.$$call(Construct, null, null, 'getNewExpression', [match($es4.$$get(Token, null, null, 'SubTokenType')), matchExpression(true, namedFunctionExpressions, true)]);
						break;
					case $es4.$$get(Token, null, null, 'XMLOpenArrowTokenType'):
						match($es4.$$get(Token, null, null, 'XMLOpenArrowTokenType'));
						var isXMLList = $es4.$$get(peek(1), null, null, 'type') == $es4.$$get(Token, null, null, 'XMLClosedArrowTokenType');
						var openTags = 1;
						var xmlString = '<';
						if (isXMLList)
						{
							expression = $es4.$$call(Construct, null, null, 'getNewXMLListExpression', $es4.$$EMPTY_ARRAY);
							match($es4.$$get(Token, null, null, 'XMLClosedArrowTokenType'));
							match($es4.$$get(Token, null, null, 'XMLOpenArrowTokenType'));
						}
						else
						{
							expression = $es4.$$call(Construct, null, null, 'getNewXMLExpression', $es4.$$EMPTY_ARRAY);
						}
						var inNode = true;
						while ((openTags || inNode || isXMLList) && (token = next(1)))
						{
							if (isXMLList)
							{
								if ($es4.$$get(token, null, null, 'type') == $es4.$$get(Token, null, null, 'XMLOpenArrowTokenType') && peek(1) && $es4.$$get(peek(1), null, null, 'type') == $es4.$$get(Token, null, null, 'XMLForwardSlashTokenType') && peek(2) && $es4.$$get(peek(2), null, null, 'type') == $es4.$$get(Token, null, null, 'XMLClosedArrowTokenType'))
								{
									match($es4.$$get(Token, null, null, 'XMLForwardSlashTokenType'));
									match($es4.$$get(Token, null, null, 'XMLClosedArrowTokenType'));
									break;
								}
							}
							else
							{
								if ($es4.$$get(token, null, null, 'type') == $es4.$$get(Token, null, null, 'XMLOpenArrowTokenType'))
								{
									inNode = true;
								}
								if ($es4.$$get(token, null, null, 'type') == $es4.$$get(Token, null, null, 'XMLOpenArrowTokenType') && peek(1) && $es4.$$get(peek(1), null, null, 'type') == $es4.$$get(Token, null, null, 'XMLForwardSlashTokenType'))
								{
									openTags--;
								}
								else if ($es4.$$get(token, null, null, 'type') == $es4.$$get(Token, null, null, 'XMLOpenArrowTokenType'))
								{
									openTags++;
								}
								if ($es4.$$get(token, null, null, 'type') == $es4.$$get(Token, null, null, 'XMLForwardSlashTokenType') && peek(1) && $es4.$$get(peek(1), null, null, 'type') == $es4.$$get(Token, null, null, 'XMLClosedArrowTokenType'))
								{
									openTags--;
								}
								if ($es4.$$get(token, null, null, 'type') == $es4.$$get(Token, null, null, 'XMLClosedArrowTokenType'))
								{
									inNode = false;
								}
							}
							if ($es4.$$get(token, null, null, 'data') == "'")
							{
								$es4.$$set(token, null, null, 'data', "\\'", '=');
							}
							if ($es4.$$get(token, null, null, 'type') == $es4.$$get(Token, null, null, 'NewLineTokenType'))
							{
								xmlString += '\\' + $es4.$$get(token, null, null, 'data');
							}
							else
							{
								xmlString += $es4.$$get(token, null, null, 'data');
							}
						}
						$es4.$$set(expression, null, null, 'string', xmlString, '=');
						break;
					case $es4.$$get(Token, null, null, 'RegExpTokenType'):
						expression = $es4.$$call(Construct, null, null, 'getNewRegExpression', $es4.$$EMPTY_ARRAY);
						regExpString = $es4.$$get(match($es4.$$get(Token, null, null, 'RegExpTokenType')), null, null, 'data');
						while ((token = peek(1, 1)) && $es4.$$get(token, null, null, 'type') == $es4.$$get(Token, null, null, 'SpecialUFOTokenType'))
						{
							token = next();
							regExpString += $es4.$$get(token, null, null, 'data');
						}
						$es4.$$set(expression, null, null, 'string', regExpString, '=');
						break;
					case $es4.$$get(Token, null, null, 'DivTokenType'):
						expression = $es4.$$call(Construct, null, null, 'getNewRegExpression', $es4.$$EMPTY_ARRAY);
						regExpString = $es4.$$get(match($es4.$$get(Token, null, null, 'DivTokenType')), null, null, 'data');
						while (token = next(2))
						{
							regExpString += $es4.$$get(token, null, null, 'data');
							if ($es4.$$call(regExpString, null, null, 'charAt', [$es4.$$get(regExpString, null, null, 'length') - 1]) == '/' && $es4.$$call(regExpString, null, null, 'charAt', [$es4.$$get(regExpString, null, null, 'length') - 2]) != '\\')
							{
								break;
							}
						}
						while (token = peek(1, 1))
						{
							if ($es4.$$get(token, null, null, 'type') == $es4.$$get(Token, null, null, 'NewLineTokenType') || $es4.$$get(token, null, null, 'type') == $es4.$$get(Token, null, null, 'TabTokenType') || $es4.$$get(token, null, null, 'type') == $es4.$$get(Token, null, null, 'SpaceTokenType') || $es4.$$get(token, null, null, 'type') == $es4.$$get(Token, null, null, 'EOSTokenType') || $es4.$$get(token, null, null, 'type') == $es4.$$get(Token, null, null, 'CommaTokenType'))
							{
								break;
							}
							token = next();
							regExpString += $es4.$$get(token, null, null, 'data');
						}
						$es4.$$set(expression, null, null, 'string', regExpString, '=');
						break;
					case $es4.$$get(Token, null, null, 'IncrementTokenType'):
						expression = $es4.$$call(Construct, null, null, 'getNewPrefixExpression', $es4.$$EMPTY_ARRAY);
						$es4.$$set(expression, null, null, 'incrementToken', match($es4.$$get(Token, null, null, 'IncrementTokenType')), '=');
						$es4.$$set(expression, null, null, 'expression', matchExpression(false, namedFunctionExpressions), '=');
						if ($es4.$$get(expression, null, null, 'expression', 'constructor') != $es4.$$get(Construct, null, null, 'BinaryExpression'))
						{
							break;
						}
						prefixExpression = expression;
						binaryExpression = expression = $es4.$$get(expression, null, null, 'expression');
						binaryExpressionParent = binaryExpression;
						while ($es4.$$get(binaryExpression, null, null, 'constructor') == $es4.$$get(Construct, null, null, 'BinaryExpression'))
						{
							binaryExpressionParent = binaryExpression;
							binaryExpression = $es4.$$get(binaryExpression, null, null, 'leftExpression');
						}
						while ($es4.$$get(binaryExpression, null, null, 'constructor') == $es4.$$get(Construct, null, null, 'ParenExpression'))
						{
							binaryExpressionParent = binaryExpression;
							binaryExpression = $es4.$$get(binaryExpression, null, null, 'expression');
						}
						$es4.$$set(prefixExpression, null, null, 'expression', binaryExpression, '=');
						if ($es4.$$get(binaryExpressionParent, null, null, 'constructor') == $es4.$$get(Construct, null, null, 'ParenExpression'))
						{
							$es4.$$set(binaryExpressionParent, null, null, 'expression', prefixExpression, '=');
						}
						else
						{
							$es4.$$set(binaryExpressionParent, null, null, 'leftExpression', prefixExpression, '=');
						}
						break;
					case $es4.$$get(Token, null, null, 'DecrementTokenType'):
						expression = $es4.$$call(Construct, null, null, 'getNewPrefixExpression', $es4.$$EMPTY_ARRAY);
						$es4.$$set(expression, null, null, 'decrementToken', match($es4.$$get(Token, null, null, 'DecrementTokenType')), '=');
						$es4.$$set(expression, null, null, 'expression', matchExpression(false, namedFunctionExpressions), '=');
						if ($es4.$$get(expression, null, null, 'expression', 'constructor') != $es4.$$get(Construct, null, null, 'BinaryExpression'))
						{
							break;
						}
						prefixExpression = expression;
						binaryExpression = expression = $es4.$$get(expression, null, null, 'expression');
						binaryExpressionParent = binaryExpression;
						while ($es4.$$get(binaryExpression, null, null, 'constructor') == $es4.$$get(Construct, null, null, 'BinaryExpression'))
						{
							binaryExpressionParent = binaryExpression;
							binaryExpression = $es4.$$get(binaryExpression, null, null, 'leftExpression');
						}
						while ($es4.$$get(binaryExpression, null, null, 'constructor') == $es4.$$get(Construct, null, null, 'ParenExpression'))
						{
							binaryExpressionParent = binaryExpression;
							binaryExpression = $es4.$$get(binaryExpression, null, null, 'expression');
						}
						$es4.$$set(prefixExpression, null, null, 'expression', binaryExpression, '=');
						if ($es4.$$get(binaryExpressionParent, null, null, 'constructor') == $es4.$$get(Construct, null, null, 'ParenExpression'))
						{
							$es4.$$set(binaryExpressionParent, null, null, 'expression', prefixExpression, '=');
						}
						else
						{
							$es4.$$set(binaryExpressionParent, null, null, 'leftExpression', prefixExpression, '=');
						}
						break;
					case $es4.$$get(Token, null, null, 'BitwiseNotTokenType'):
						expression = $es4.$$call(Construct, null, null, 'getNewExpression', [match($es4.$$get(Token, null, null, 'BitwiseNotTokenType')), matchExpression(false, namedFunctionExpressions, true)]);
						break;
					case $es4.$$get(Token, null, null, 'NotTokenType'):
						expression = $es4.$$call(Construct, null, null, 'getNewExpression', [match($es4.$$get(Token, null, null, 'NotTokenType')), matchExpression(false, namedFunctionExpressions, true)]);
						break;
					case $es4.$$get(Token, null, null, 'TypeofTokenType'):
						expression = $es4.$$call(Construct, null, null, 'getNewExpression', [match($es4.$$get(Token, null, null, 'TypeofTokenType')), matchExpression(false, namedFunctionExpressions, true)]);
						break;
					case $es4.$$get(Token, null, null, 'SuperTokenType'):
						expression = matchPropertyExpression();
						break;
					case $es4.$$get(Token, null, null, 'NewTokenType'):
						expression = $es4.$$call(Construct, null, null, 'getNewNewExpression', $es4.$$EMPTY_ARRAY);
						match($es4.$$get(Token, null, null, 'NewTokenType'));
						if ($es4.$$get(peek(1), null, null, 'type') == $es4.$$get(Token, null, null, 'RelationalTokenType'))
						{
							next();
							next();
							next();
							expression = matchExpression(ignoreCommas, namedFunctionExpressions, true);
							break;
						}
						$es4.$$set(expression, null, null, 'expression', matchExpression(ignoreCommas, namedFunctionExpressions, true), '=');
						break;
					case $es4.$$get(Token, null, null, 'IdentifierTokenType'):
						expression = matchPropertyExpression();
						$es4.$$set(expression, null, null, 'root', true, '=');
						break;
					case $es4.$$get(Token, null, null, 'AtTokenType'):
						expression = matchPropertyExpression();
						break;
					case $es4.$$get(Token, null, null, 'VoidTokenType'):
						expression = $es4.$$call(Construct, null, null, 'getNewExpression', [match($es4.$$get(Token, null, null, 'VoidTokenType')), matchExpression(false, namedFunctionExpressions, null, true)]);
						break;
					default:
						if (optional)
						{
							expression = $es4.$$call(Construct, null, null, 'getNewEmptyExpression', $es4.$$EMPTY_ARRAY);
							break;
						}
						throw error('Unexpected token found10.', token);
				}
				token = match($es4.$$get(Token, null, null, 'IncrementTokenType'), true) || match($es4.$$get(Token, null, null, 'DecrementTokenType'), true);
				if (token)
				{
					var originalExpression = expression;
					expression = $es4.$$call(Construct, null, null, 'getNewPostfixExpression', $es4.$$EMPTY_ARRAY);
					if ($es4.$$get(token, null, null, 'type') == $es4.$$get(Token, null, null, 'IncrementTokenType'))
					{
						$es4.$$set(expression, null, null, 'incrementToken', token, '=');
					}
					else
					{
						$es4.$$set(expression, null, null, 'decrementToken', token, '=');
					}
					$es4.$$set(expression, null, null, 'expression', originalExpression, '=');
				}
				if (operand)
				{
					return expression;
				}
				$es4.$$call(expressions, null, null, 'push', [expression]);
				token = match($es4.$$get(Token, null, null, 'AssignmentTokenType'), true) || match($es4.$$get(Token, null, null, 'AddTokenType'), true) || match($es4.$$get(Token, null, null, 'AsTokenType'), true) || match((dontReadIn) ? $es4.$$get(Token, null, null, 'SubTokenType') : $es4.$$get(Token, null, null, 'InTokenType'), true) || match($es4.$$get(Token, null, null, 'SubTokenType'), true) || match($es4.$$get(Token, null, null, 'MulTokenType'), true) || match($es4.$$get(Token, null, null, 'DivTokenType'), true) || match($es4.$$get(Token, null, null, 'ModTokenType'), true) || match($es4.$$get(Token, null, null, 'TernaryTokenType'), true) || match($es4.$$get(Token, null, null, 'IsTokenType'), true) || match($es4.$$get(Token, null, null, 'InstanceofTokenType'), true) || match($es4.$$get(Token, null, null, 'AndWithAssignmentTokenType'), true) || match($es4.$$get(Token, null, null, 'OrWithAssignmentTokenType'), true) || match($es4.$$get(Token, null, null, 'AndTokenType'), true) || match($es4.$$get(Token, null, null, 'OrTokenType'), true) || match($es4.$$get(Token, null, null, 'EqualityTokenType'), true) || match($es4.$$get(Token, null, null, 'RelationalTokenType'), true) || match($es4.$$get(Token, null, null, 'AddWithAssignmentTokenType'), true) || match($es4.$$get(Token, null, null, 'DivWithAssignmentTokenType'), true) || match($es4.$$get(Token, null, null, 'ModWithAssignmentTokenType'), true) || match($es4.$$get(Token, null, null, 'MulWithAssignmentTokenType'), true) || match($es4.$$get(Token, null, null, 'SubWithAssignmentTokenType'), true) || match($es4.$$get(Token, null, null, 'BitwiseLeftShiftAssignmentTokenType'), true) || match($es4.$$get(Token, null, null, 'BitwiseRightShiftAssignmentTokenType'), true) || match($es4.$$get(Token, null, null, 'BitwiseUnsignedRightShiftAssignmentTokenType'), true) || match($es4.$$get(Token, null, null, 'BitwiseLeftShiftTokenType'), true) || match($es4.$$get(Token, null, null, 'BitwiseRightShiftTokenType'), true) || match($es4.$$get(Token, null, null, 'BitwiseUnsignedRightShiftTokenType'), true) || match($es4.$$get(Token, null, null, 'BitwiseAndAssignmentTokenType'), true) || match($es4.$$get(Token, null, null, 'BitwiseOrAssignmentTokenType'), true) || match($es4.$$get(Token, null, null, 'BitwiseXorAssignmentTokenType'), true) || match($es4.$$get(Token, null, null, 'BitwiseAndTokenType'), true) || match($es4.$$get(Token, null, null, 'BitwiseOrTokenType'), true) || match($es4.$$get(Token, null, null, 'BitwiseXorTokenType'), true);
				if (!ignoreCommas && !token)
				{
					token = match($es4.$$get(Token, null, null, 'CommaTokenType'), true);
				}
				if (token && $es4.$$get(token, null, null, 'type') == $es4.$$get(Token, null, null, 'TernaryTokenType'))
				{
					ternaryTokens++;
				}
				else if (!token && ternaryTokens)
				{
					token = match($es4.$$get(Token, null, null, 'ColonTokenType'));
					ternaryTokens--;
				}
				if (!token)
				{
					break loopy;
				}
				$es4.$$call(expressions, null, null, 'push', [token]);
			}
			return combineExpressions(expressions);

			function getBinaryTernaryOperatorPrecedence($$$$token) 
			{
				//set default parameter values
				var token = $$$$token;

				switch ($es4.$$get(token, null, null, 'type'))
				{
					case $es4.$$get(Token, null, null, 'ColonTokenType'):
						return -1;
					case $es4.$$get(Token, null, null, 'CommaTokenType'):
						return 1;
					case $es4.$$get(Token, null, null, 'AssignmentTokenType'):
					case $es4.$$get(Token, null, null, 'MulWithAssignmentTokenType'):
					case $es4.$$get(Token, null, null, 'DivWithAssignmentTokenType'):
					case $es4.$$get(Token, null, null, 'ModWithAssignmentTokenType'):
					case $es4.$$get(Token, null, null, 'AddWithAssignmentTokenType'):
					case $es4.$$get(Token, null, null, 'SubWithAssignmentTokenType'):
					case $es4.$$get(Token, null, null, 'BitwiseLeftShiftAssignmentTokenType'):
					case $es4.$$get(Token, null, null, 'BitwiseRightShiftAssignmentTokenType'):
					case $es4.$$get(Token, null, null, 'BitwiseUnsignedRightShiftAssignmentTokenType'):
					case $es4.$$get(Token, null, null, 'BitwiseAndAssignmentTokenType'):
					case $es4.$$get(Token, null, null, 'BitwiseXorAssignmentTokenType'):
					case $es4.$$get(Token, null, null, 'BitwiseOrAssignmentTokenType'):
					case $es4.$$get(Token, null, null, 'AndWithAssignmentTokenType'):
					case $es4.$$get(Token, null, null, 'OrWithAssignmentTokenType'):
						return 2;
					case $es4.$$get(Token, null, null, 'TernaryTokenType'):
						return 3;
					case $es4.$$get(Token, null, null, 'OrTokenType'):
						return 4;
					case $es4.$$get(Token, null, null, 'AndTokenType'):
						return 5;
					case $es4.$$get(Token, null, null, 'BitwiseOrTokenType'):
						return 6;
					case $es4.$$get(Token, null, null, 'BitwiseXorTokenType'):
						return 7;
					case $es4.$$get(Token, null, null, 'BitwiseAndTokenType'):
						return 8;
					case $es4.$$get(Token, null, null, 'EqualityTokenType'):
						return 9;
					case $es4.$$get(Token, null, null, 'RelationalTokenType'):
					case $es4.$$get(Token, null, null, 'AsTokenType'):
					case $es4.$$get(Token, null, null, 'InTokenType'):
					case $es4.$$get(Token, null, null, 'InstanceofTokenType'):
					case $es4.$$get(Token, null, null, 'IsTokenType'):
						return 10;
					case $es4.$$get(Token, null, null, 'BitwiseLeftShiftTokenType'):
					case $es4.$$get(Token, null, null, 'BitwiseRightShiftTokenType'):
					case $es4.$$get(Token, null, null, 'BitwiseUnsignedRightShiftTokenType'):
						return 11;
					case $es4.$$get(Token, null, null, 'AddTokenType'):
					case $es4.$$get(Token, null, null, 'SubTokenType'):
						return 12;
					case $es4.$$get(Token, null, null, 'MulTokenType'):
					case $es4.$$get(Token, null, null, 'DivTokenType'):
					case $es4.$$get(Token, null, null, 'ModTokenType'):
						return 13;
					default:
						throw $es4.$$primitive(new (Error)('unknown binary/ternary operator: ' + $es4.$$get(token, null, null, 'type', 'name')));
				}
			}
;

			function combineExpressions($$$$expressions) 
			{
				//set default parameter values
				var expressions = $$$$expressions;

				var currentOperatorPrecedence = 13;
				var i = -1;
				var expression;
				var begin;
				while ($es4.$$get(expressions, null, null, 'length') > 1 && currentOperatorPrecedence)
				{
					if (i >= $es4.$$get(expressions, null, null, 'length') - 1)
					{
						i = -1;
						currentOperatorPrecedence--;
					}
					i++;
					if (i % 2 == 0)
					{
						continue;
					}
					var token = $es4.$$get(expressions, null, null, i);
					if (getBinaryTernaryOperatorPrecedence(token) != currentOperatorPrecedence)
					{
						continue;
					}
					if ($es4.$$get(token, null, null, 'type') == $es4.$$get(Token, null, null, 'TernaryTokenType'))
					{
						expression = $es4.$$call(Construct, null, null, 'getNewTernaryExpression', $es4.$$EMPTY_ARRAY);
						$es4.$$set(expression, null, null, 'conditionExpression', $es4.$$get(expressions, null, null, i - 1), '=');
						var index = i + 1;
						var ternaryTokens = 1;
						var colonTokens = 0;
						var innerExpressions = [];
						while (ternaryTokens != colonTokens && index < $es4.$$get(expressions, null, null, 'length') - 1)
						{
							$es4.$$call(innerExpressions, null, null, 'push', [$es4.$$get(expressions, null, null, index)]);
							if (index % 2 == 0)
							{
								index++;
								continue;
							}
							if ($es4.$$get(expressions, null, null, index, 'type') == $es4.$$get(Token, null, null, 'TernaryTokenType'))
							{
								ternaryTokens++;
							}
							else if ($es4.$$get(expressions, null, null, index, 'type') == $es4.$$get(Token, null, null, 'ColonTokenType'))
							{
								colonTokens++;
							}
							index++;
						}
						$es4.$$set(expression, null, null, 'trueExpression', combineExpressions($es4.$$call(innerExpressions, null, null, 'slice', [0, $es4.$$get(innerExpressions, null, null, 'length') - 1])), '=');
						$es4.$$set(expression, null, null, 'falseExpression', combineExpressions($es4.$$call(expressions, null, null, 'slice', [index])), '=');
						begin = $es4.$$call(expressions, null, null, 'slice', [0, i - 1]);
						expressions = $es4.$$call(begin, null, null, 'concat', [[expression]]);
					}
					else
					{
						expression = $es4.$$call(Construct, null, null, 'getNewBinaryExpression', $es4.$$EMPTY_ARRAY);
						$es4.$$set(expression, null, null, 'token', token, '=');
						$es4.$$set(expression, null, null, 'leftExpression', $es4.$$get(expressions, null, null, i - 1), '=');
						$es4.$$set(expression, null, null, 'rightExpression', $es4.$$get(expressions, null, null, i + 1), '=');
						begin = $es4.$$call(expressions, null, null, 'slice', [0, i - 1]);
						var end = $es4.$$call(expressions, null, null, 'slice', [i + 2]);
						expressions = $es4.$$call(begin, null, null, 'concat', [[expression], end]);
					}
					i = -1;
				}
				return $es4.$$get(expressions, null, null, 0);
			}
;
		}
;

		function match($$$$type, $$$$optional, $$$$greedy) 
		{
			//set default parameter values
			var type = $$$$type;
			var optional = (1 > arguments.length - 1) ? false : $es4.$$coerce($$$$optional, Boolean);
			var greedy = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$greedy, Boolean);

			var token = (optional) ? peek(1) : next();
			if (!token && !optional)
			{
				throw error('Expected token type: ' + $es4.$$get(type, null, null, 'name') + '. No token found.', null);
			}
			if (!token)
			{
				return false;
			}
			if ($es4.$$get(token, null, null, 'type') != type && !optional)
			{
				throw error('Expected token type: ' + type + '. Got', token);
			}
			if ($es4.$$get(token, null, null, 'type') != type)
			{
				return false;
			}
			if (optional)
			{
				token = next();
			}
			var gtoken = (greedy) ? match(type, true, greedy) : false;
			return (gtoken) ? gtoken : token;
		}
;

		function next($$$$includeLevel, $$$$keywordStrictMode) 
		{
			//set default parameter values
			var includeLevel = (0 > arguments.length - 1) ? false : $es4.$$coerce($$$$includeLevel, Boolean);
			var keywordStrictMode = (1 > arguments.length - 1) ? false : $es4.$$coerce($$$$keywordStrictMode, Boolean);

			if (!includeLevel)
			{
				includeLevel = $es4.$$coerce(0, Boolean);
			}
			while (index < $es4.$$get(tokens, null, null, 'length') - 1)
			{
				var token = $es4.$$get(tokens, null, null, ++index);
				switch ($es4.$$get(token, null, null, 'type'))
				{
					case $es4.$$get(Token, null, null, 'CommentTokenType'):
					case $es4.$$get(Token, null, null, 'CommentChunkTokenType'):
					case $es4.$$get(Token, null, null, 'MultiLineCommentTokenType'):
					case $es4.$$get(Token, null, null, 'MultiLineCommentChunkTokenType'):
					case $es4.$$get(Token, null, null, 'MultiLineCommentEndTokenType'):
						if (includeLevel == 1 || includeLevel == 0)
						{
							break;
						}
					case $es4.$$get(Token, null, null, 'NewLineTokenType'):
					case $es4.$$get(Token, null, null, 'TabTokenType'):
					case $es4.$$get(Token, null, null, 'SpaceTokenType'):
						if (includeLevel == 0)
						{
							break;
						}
					default:
						if (keywordStrictMode)
						{
							return token;
						}
						if ($es4.$$get(token, null, null, 'type') == $es4.$$get(Token, null, null, 'StaticTokenType'))
						{
							token = $es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'IdentifierTokenType'), 'static']);
						}
						return token;
				}
			}
			return null;
		}
;

		function peek($$$$ahead, $$$$includeLevel, $$$$keywordStrictMode) 
		{
			//set default parameter values
			var ahead = $$$$ahead;
			var includeLevel = (1 > arguments.length - 1) ? false : $es4.$$coerce($$$$includeLevel, Boolean);
			var keywordStrictMode = (2 > arguments.length - 1) ? false : $es4.$$coerce($$$$keywordStrictMode, Boolean);

			if (!includeLevel)
			{
				includeLevel = $es4.$$coerce(0, Boolean);
			}
			var i = index;
			while (true)
			{
				if (ahead > 0 && i >= $es4.$$get(tokens, null, null, 'length') - 1)
				{
					break;
				}
				if (ahead < 0 && i < 1)
				{
					break;
				}
				var token = (ahead > 0) ? $es4.$$get(tokens, null, null, ++i) : $es4.$$get(tokens, null, null, --i);
				switch ($es4.$$get(token, null, null, 'type'))
				{
					case $es4.$$get(Token, null, null, 'CommentTokenType'):
					case $es4.$$get(Token, null, null, 'CommentChunkTokenType'):
					case $es4.$$get(Token, null, null, 'MultiLineCommentTokenType'):
					case $es4.$$get(Token, null, null, 'MultiLineCommentChunkTokenType'):
					case $es4.$$get(Token, null, null, 'MultiLineCommentEndTokenType'):
						break;
					case $es4.$$get(Token, null, null, 'TabTokenType'):
					case $es4.$$get(Token, null, null, 'SpaceTokenType'):
					case $es4.$$get(Token, null, null, 'NewLineTokenType'):
						if (includeLevel != 1)
						{
							break;
						}
					default:
						(ahead > 0) ? ahead-- : ahead++;
						if (!ahead)
						{
							if (keywordStrictMode)
							{
								return token;
							}
							if ($es4.$$get(token, null, null, 'type') == $es4.$$get(Token, null, null, 'StaticTokenType'))
							{
								token = $es4.$$call(Token, null, null, 'getNewToken', [$es4.$$get(Token, null, null, 'IdentifierTokenType'), 'static']);
							}
							return token;
						}
				}
			}
			return null;
		}
;

		function error($$$$string, $$$$token) 
		{
			//set default parameter values
			var string = $$$$string;
			var token = $$$$token;

			var i = (index - 25) < 25 ? 0 : index - 25;
			for (i; i <= index; i++)
			{
				trace($es4.$$get(tokens, null, null, i, 'line') + ' : ' + $es4.$$get(tokens, null, null, i, 'position') + ' : ' + $es4.$$get(tokens, null, null, i, 'type') + ' => ' + $es4.$$get(tokens, null, null, i, 'data'));
			}
			if (token)
			{
				return $es4.$$primitive(new (Error)(string + ' token type ' + $es4.$$get(token, null, null, 'type') + ' found on line ' + $es4.$$get(token, null, null, 'line') + ', at position ' + $es4.$$get(token, null, null, 'position')));
			}
			else
			{
				return $es4.$$primitive(new (Error)(string));
			}
		}
;

		if ($es4.$$get(statementImportConstructs, null, null, 'length'))
		{
			$es4.$$set(rootConstruct, null, null, 'packageConstruct', 'importConstructs', $es4.$$call(rootConstruct, null, null, 'packageConstruct', 'importConstructs', 'concat', [statementImportConstructs]), '=');
		}
		return rootConstruct;
	}));

	function Parser()
	{
		//initialize class if not initialized
		if (Parser.$$cinit !== undefined) Parser.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof Parser) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Parser) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(Parser, null, 'sweetrush.core::Parser');
})();
//sweetrush.core.Parser


//sweetrush.utils.SwcUtil
$es4.$$package('sweetrush.utils').SwcUtil = (function ()
{
	//imports
	var JsonUtil;

	//class initializer
	SwcUtil.$$cinit = (function ()
	{
		SwcUtil.$$cinit = undefined;

		//initialize imports
		JsonUtil = $es4.$$['sweetrush.utils'].JsonUtil;
	});

	//method
	$es4.$$public_function('stringifySWC', SwcUtil, (function ($$$$obj)
	{
		if (SwcUtil.$$cinit !== undefined) SwcUtil.$$cinit();

		//set default parameter values
		var obj = $$$$obj;

		return '_SWC_' + ($es4.$$call($es4.$$primitive(new (JsonUtil)()), null, null, 'stringify', [obj]));
	}));

	//method
	$es4.$$public_function('parseSWCString', SwcUtil, (function ($$$$contents)
	{
		if (SwcUtil.$$cinit !== undefined) SwcUtil.$$cinit();

		//set default parameter values
		var contents = $$$$contents;

		return $es4.$$call($es4.$$primitive(new (JsonUtil)()), null, null, 'parse', [$es4.$$call(contents, null, null, 'substring', [5])]);
	}));

	//method
	$es4.$$public_function('isValidSWCString', SwcUtil, (function ($$$$contents)
	{
		if (SwcUtil.$$cinit !== undefined) SwcUtil.$$cinit();

		//set default parameter values
		var contents = $$$$contents;

		return $es4.$$call(contents, null, null, 'indexOf', ['_SWC_']) == 0;
	}));

	function SwcUtil()
	{
		//initialize class if not initialized
		if (SwcUtil.$$cinit !== undefined) SwcUtil.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof SwcUtil) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], SwcUtil) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	return $es4.$$class(SwcUtil, null, 'sweetrush.utils::SwcUtil');
})();
//sweetrush.utils.SwcUtil


//sweetrush.utils.FileUtil
$es4.$$package('sweetrush.utils').FileUtil = (function ()
{
	//imports
	var ByteArray;
	var Base64Util;
	var Analyzer;
	var TranslatorPrototype;
	var FileUtil;
	var SwcUtil;
	var Construct;
	var TranslatorProto;
	var Lexer;
	var JsonUtil;
	var Token;
	var Parser;
	var Transcompiler;

	//properties
	$es4.$$private_property('fs', FileUtil);
	$es4.$$private_property('path', FileUtil);

	//class initializer
	FileUtil.$$cinit = (function ()
	{
		FileUtil.$$cinit = undefined;

		//initialize imports
		ByteArray = $es4.$$['flash.utils'].ByteArray;
		Base64Util = $es4.$$['sweetrush.utils'].Base64Util;
		Analyzer = $es4.$$['sweetrush.core'].Analyzer;
		TranslatorPrototype = $es4.$$['sweetrush.core'].TranslatorPrototype;
		SwcUtil = $es4.$$['sweetrush.utils'].SwcUtil;
		Construct = $es4.$$['sweetrush.obj'].Construct;
		TranslatorProto = $es4.$$['sweetrush.core'].TranslatorProto;
		Lexer = $es4.$$['sweetrush.core'].Lexer;
		JsonUtil = $es4.$$['sweetrush.utils'].JsonUtil;
		Token = $es4.$$['sweetrush.obj'].Token;
		Parser = $es4.$$['sweetrush.core'].Parser;
		Transcompiler = $es4.$$['sweetrush'].Transcompiler;

		//initialize properties
		FileUtil.fs = require('fs');
		FileUtil.path = require('path');
	});

	//method
	$es4.$$public_function('getBasePath', FileUtil, (function ()
	{
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		if (true)
		{
			return $es4.$$call(FileUtil, null, null, 'path', 'join', [__dirname, '../../../', 'as3-js']);
		}
		if (false)
		{
		}
	}));

	//method
	$es4.$$public_function('getExcludedPath', FileUtil, (function ()
	{
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		if (true)
		{
			return $es4.$$call(FileUtil, null, null, 'path', 'join', [__dirname, '../../../', 'as3-js', '_excluded']);
		}
		if (false)
		{
		}
	}));

	//method
	$es4.$$public_function('resolvePath', FileUtil, (function ($$$$src, $$$$append)
	{
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		//set default parameter values
		var src = $$$$src;
		var append = $$$$append;

		if (true)
		{
			return $es4.$$call(FileUtil, null, null, 'fixPath', [$es4.$$call(FileUtil, null, null, 'path', 'join', [src, append])]);
		}
		if (false)
		{
		}
	}));

	//method
	$es4.$$public_function('read', FileUtil, (function ($$$$file)
	{
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		//set default parameter values
		var file = $$$$file;

		if (false)
		{
		}
		if (true)
		{
			return $es4.$$call($es4.$$call(FileUtil, null, null, 'fs', 'readFileSync', [file, 'utf8']), null, null, 'replace', [/^\uFEFF/, '']);
		}
	}));

	//method
	$es4.$$public_function('write', FileUtil, (function ($$$$file, $$$$contents)
	{
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		//set default parameter values
		var file = $$$$file;
		var contents = $$$$contents;

		if (false)
		{
		}
		if (true)
		{
			$es4.$$call(FileUtil, null, null, 'fs', 'writeFileSync', [file, contents, 'utf8']);
		}
	}));

	//method
	$es4.$$public_function('readDirectory', FileUtil, (function ($$$$directory)
	{
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		//set default parameter values
		var directory = $$$$directory;

		if (false)
		{
		}
		if (true)
		{
			var files = $es4.$$coerce($es4.$$call(FileUtil, null, null, 'fs', 'readdirSync', [directory]), Array);
			for (var i = 0; i < $es4.$$get(files, null, null, 'length'); i++)
			{
				$es4.$$set(files, null, null, i, directory + '/' + $es4.$$get(files, null, null, i), '=');
			}
			return files;
		}
	}));

	//method
	$es4.$$public_function('fixPath', FileUtil, (function ($$$$path)
	{
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		//set default parameter values
		var path = $$$$path;

		return $es4.$$call($es4.$$call($es4.$$call($es4.$$call(path, null, null, 'split', ['\\\\']), null, null, 'join', ['/']), null, null, 'split', ['\\']), null, null, 'join', ['/']);
	}));

	//method
	$es4.$$public_function('exists', FileUtil, (function ($$$$file)
	{
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		//set default parameter values
		var file = $$$$file;

		if (false)
		{
		}
		if (true)
		{
			return $es4.$$call(FileUtil, null, null, 'fs', 'existsSync', [file]);
		}
	}));

	//method
	$es4.$$public_function('getList', FileUtil, (function ($$$$path, $$$$recursive, $$$$filter)
	{
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		//set default parameter values
		var path = $$$$path;
		var recursive = $$$$recursive;
		var filter = $$$$filter;

		var returnList = innerGetList(path, recursive, filter, path);
		$es4.$$set(returnList, null, null, 'basepath', $es4.$$call(FileUtil, null, null, 'fixPath', [path]), '=');
		return returnList;

		function innerGetList($$$$path, $$$$recursive, $$$$filter, $$$$basePath) 
		{
			//set default parameter values
			var path = $$$$path;
			var recursive = $$$$recursive;
			var filter = $$$$filter;
			var basePath = $$$$basePath;

			path = $es4.$$call(FileUtil, null, null, 'fixPath', [path]);
			basePath = $es4.$$call(FileUtil, null, null, 'fixPath', [basePath]);
			var file = $es4.$$primitive(new (VFile)(path));
			var list = $es4.$$call(file, null, null, 'listFiles', $es4.$$EMPTY_ARRAY);
			var returnList = $es4.$$primitive(new (Array)());
			for (var i = 0; i < $es4.$$get(list, null, null, 'length'); i++)
			{
				file = $es4.$$get(list, null, null, i);
				var result = filter(file, basePath);
				if (result)
				{
					$es4.$$call(returnList, null, null, 'push', [result]);
				}
				if ($es4.$$call(file, null, null, 'isDirectory', $es4.$$EMPTY_ARRAY) && recursive)
				{
					var innerList = innerGetList($es4.$$get(file, null, null, 'src'), recursive, filter, basePath);
					returnList = $es4.$$call(returnList, null, null, 'concat', [innerList]);
				}
			}
			return returnList;
		}
;
	}));

	//method
	$es4.$$public_function('filterList', FileUtil, (function ($$$$list, $$$$filter)
	{
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		//set default parameter values
		var list = $$$$list;
		var filter = $$$$filter;

		var returnList = [];
		$es4.$$set(returnList, null, null, 'basepath', $es4.$$get(list, null, null, 'basepath'), '=');
		for (var i = 0; i < $es4.$$get(list, null, null, 'length'); i++)
		{
			var file = filter($es4.$$get(list, null, null, i), $es4.$$get(list, null, null, 'basepath'));
			if (!file)
			{
				continue;
			}
			$es4.$$call(returnList, null, null, 'push', [file]);
		}
		return returnList;
	}));

	//method
	$es4.$$public_function('getListFilter_none', FileUtil, (function ()
	{
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		function filter($$$$file, $$$$basePath) 
		{
			//set default parameter values
			var file = $$$$file;
			var basePath = $$$$basePath;

			return file;
		}
;

		return filter;
	}));

	//method
	$es4.$$public_function('getListFilter_hidden', FileUtil, (function ()
	{
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		function filter($$$$file, $$$$basePath) 
		{
			//set default parameter values
			var file = $$$$file;
			var basePath = $$$$basePath;

			return file;
		}
;

		return filter;
	}));

	//method
	$es4.$$public_function('getListFilter_extension', FileUtil, (function ($$$$extension, $$$$include_)
	{
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		//set default parameter values
		var extension = $$$$extension;
		var include_ = $$$$include_;

		extension = '.' + extension;

		function filter($$$$file, $$$$basePath) 
		{
			//set default parameter values
			var file = $$$$file;
			var basePath = $$$$basePath;

			var result = $es4.$$call(file, null, null, 'src', 'slice', [-$es4.$$get(extension, null, null, 'length')]);
			if (result == extension)
			{
				return (include_) ? file : null;
			}
			return (include_) ? null : file;
		}
;

		return filter;
	}));

	//method
	$es4.$$public_function('getListFilter_name', FileUtil, (function ($$$$name, $$$$include_)
	{
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		//set default parameter values
		var name = $$$$name;
		var include_ = $$$$include_;

		function filter($$$$file, $$$$basePath) 
		{
			//set default parameter values
			var file = $$$$file;
			var basePath = $$$$basePath;

			var result = $es4.$$call($es4.$$call($es4.$$call(FileUtil, null, null, 'fixPath', [$es4.$$get(file, null, null, 'src')]), null, null, 'split', ['/']), null, null, 'pop', $es4.$$EMPTY_ARRAY);
			if (result == name)
			{
				return (include_) ? file : null;
			}
			return (include_) ? null : file;
		}
;

		return filter;
	}));

	//method
	$es4.$$public_function('getListFilter_directories', FileUtil, (function ()
	{
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		function filter($$$$file, $$$$basePath) 
		{
			//set default parameter values
			var file = $$$$file;
			var basePath = $$$$basePath;

			if ($es4.$$call(file, null, null, 'isDirectory', $es4.$$EMPTY_ARRAY))
			{
				return null;
			}
			return file;
		}
;

		return filter;
	}));

	//method
	$es4.$$public_function('getListFilter_directory', FileUtil, (function ($$$$path)
	{
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		//set default parameter values
		var path = $$$$path;

		path = $es4.$$call(FileUtil, null, null, 'fixPath', [path]);

		function filter($$$$file, $$$$basePath) 
		{
			//set default parameter values
			var file = $$$$file;
			var basePath = $$$$basePath;

			basePath = $es4.$$call(FileUtil, null, null, 'fixPath', [basePath]);
			if ($es4.$$call($es4.$$call(FileUtil, null, null, 'fixPath', [$es4.$$get(file, null, null, 'src')]), null, null, 'indexOf', [path]) == 0)
			{
				return null;
			}
			return file;
		}
;

		return filter;
	}));

	//method
	$es4.$$public_function('getListFilter_list', FileUtil, (function ($$$$list)
	{
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		//set default parameter values
		var list = $$$$list;

		function filter($$$$file, $$$$basePath) 
		{
			//set default parameter values
			var file = $$$$file;
			var basePath = $$$$basePath;

			basePath = $es4.$$call(FileUtil, null, null, 'fixPath', [basePath]);
			var compare1 = $es4.$$get($es4.$$call($es4.$$call(FileUtil, null, null, 'fixPath', [$es4.$$get(file, null, null, 'src')]), null, null, 'split', [basePath]), null, null, 1);
			for (var i = 0; i < $es4.$$get(list, null, null, 'length'); i++)
			{
				var compare2 = $es4.$$get($es4.$$call($es4.$$call(FileUtil, null, null, 'fixPath', [$es4.$$get(list, null, null, i, 'src')]), null, null, 'split', [$es4.$$call(FileUtil, null, null, 'fixPath', [$es4.$$get(list, null, null, 'basepath')])]), null, null, 1);
				if (compare1 == compare2)
				{
					return null;
				}
			}
			return file;
		}
;

		return filter;
	}));

	//method
	$es4.$$public_function('getListFilter_filters', FileUtil, (function ($$$$filters)
	{
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		//set default parameter values
		var filters = $$$$filters;

		function filter($$$$file, $$$$basePath) 
		{
			//set default parameter values
			var file = $$$$file;
			var basePath = $$$$basePath;

			for (var i = 0; i < $es4.$$get(filters, null, null, 'length'); i++)
			{
				var result = $es4.$$get(filters, null, null, i)(file, basePath);
				if (!result)
				{
					return null;
				}
			}
			return file;
		}
;

		return filter;
	}));

	function FileUtil()
	{
		//initialize class if not initialized
		if (FileUtil.$$cinit !== undefined) FileUtil.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof FileUtil) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], FileUtil) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	////////////////INTERNAL CLASS////////////////
	var VFile = (function ()
	{
		//imports
		var FileUtil;

		//properties
		$es4.$$private_property('fs', VFile);
		$es4.$$private_property('path', VFile);

		//class initializer
		VFile.$$cinit = (function ()
		{
			VFile.$$cinit = undefined;

			//initialize imports
			FileUtil = $es4.$$['sweetrush.utils'].FileUtil;

			//initialize properties
			VFile.fs = require('fs');
			VFile.path = require('path');
		});

		function VFile()
		{
			//initialize class if not initialized
			if (VFile.$$cinit !== undefined) VFile.$$cinit();

			//save scope
			var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
			var $$thisp = this;

			//handle possible cast
			if ($$this === $$thisp && (!($$this instanceof VFile) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], VFile) : $es4.$$throwArgumentError();
			Object.defineProperty($$this, '$$t', {value:1});

			//properties
			$es4.$$public_property('src', $$thisp, String);

			//constructor
			$es4.$$constructor($$thisp, (function ($$$$src)
			{
				//set default parameter values
				var src = $$$$src;

				if (true)
				{
					$es4.$$set($$this, $$this, $$thisp, 'src', $es4.$$call(FileUtil, $$this, $$thisp, 'fixPath', [$es4.$$call(VFile, $$this, $$thisp, 'path', 'normalize', [src])]), '=');
				}
				if (false)
				{
				}
			}));

			//method
			$es4.$$public_function('listFiles', $$thisp, (function ()
			{
				function getFiles($$$$dir, $$$$files_) 
				{
					//set default parameter values
					var dir = $$$$dir;
					var files_ = $$$$files_;

					files_ = files_ || [];
					var files = $es4.$$call(FileUtil, $$this, $$thisp, 'readDirectory', [dir]);
					for (var $$i0 = (files || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i0 != 0; $$i0 = files.$$nextNameIndex($$i0))
					{
						var i = files.$$nextName($$i0);

						var name = $es4.$$get(files, $$this, $$thisp, i);
						if ($es4.$$call($es4.$$primitive(new (VFile)(name)), $$this, $$thisp, 'isDirectory', $es4.$$EMPTY_ARRAY))
						{
							getFiles(name, files_);
						}
						else
						{
							$es4.$$call(files_, $$this, $$thisp, 'push', [$es4.$$primitive(new (VFile)(name))]);
						}
					}
					return files_;
				}
;

				return getFiles($es4.$$get($$this, $$this, $$thisp, 'src'), []);
			}));

			//method
			$es4.$$public_function('getPath', $$thisp, (function ()
			{
				if (false)
				{
				}
				if (true)
				{
					return $es4.$$call($es4.$$call($es4.$$call(VFile, $$this, $$thisp, 'path', 'dirname', [$es4.$$get($$this, $$this, $$thisp, 'src')]), $$this, $$thisp, 'split', ['/']), $$this, $$thisp, 'pop', $es4.$$EMPTY_ARRAY);
				}
			}));

			//method
			$es4.$$public_function('getParent', $$thisp, (function ()
			{
				if (false)
				{
				}
				if (true)
				{
					return $es4.$$call($es4.$$call($es4.$$call(VFile, $$this, $$thisp, 'path', 'dirname', [$es4.$$get($$this, $$this, $$thisp, 'src')]), $$this, $$thisp, 'split', ['/']), $$this, $$thisp, 'pop', $es4.$$EMPTY_ARRAY);
				}
			}));

			//method
			$es4.$$public_function('isHidden', $$thisp, (function ()
			{
				return false;
			}));

			//method
			$es4.$$public_function('equals', $$thisp, (function ($$$$file)
			{
				//set default parameter values
				var file = $$$$file;

				return $es4.$$get($$this, $$this, $$thisp, 'src') == $es4.$$get(file, $$this, $$thisp, 'src');
			}));

			//method
			$es4.$$public_function('isDirectory', $$thisp, (function ()
			{
				if (false)
				{
				}
				if (true)
				{
					return $es4.$$call($es4.$$call(VFile, $$this, $$thisp, 'fs', 'statSync', [$es4.$$get($$this, $$this, $$thisp, 'src')]), $$this, $$thisp, 'isDirectory', $es4.$$EMPTY_ARRAY);
				}
			}));

			//method
			$es4.$$public_function('toString', $$thisp, (function ()
			{
				return $es4.$$get($$this, $$this, $$thisp, 'src');
			}));

			//call construct if no arguments, or argument zero does not equal manual construct
			if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
			{
				for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

				$es4.$$construct($$this, $$args);
			}
		}

		return $es4.$$class(VFile, null, 'VFile');
	})();

	return $es4.$$class(FileUtil, {CLASSES:[VFile]}, 'sweetrush.utils::FileUtil');
})();
//sweetrush.utils.FileUtil


//sweetrush.utils.JsonUtil
$es4.$$package('sweetrush.utils').JsonUtil = (function ()
{
	//class initializer
	JsonUtil.$$cinit = (function ()
	{
		JsonUtil.$$cinit = undefined;

	});

	function JsonUtil()
	{
		//initialize class if not initialized
		if (JsonUtil.$$cinit !== undefined) JsonUtil.$$cinit();

		//save scope
		var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
		var $$thisp = this;

		//handle possible cast
		if ($$this === $$thisp && (!($$this instanceof JsonUtil) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], JsonUtil) : $es4.$$throwArgumentError();
		Object.defineProperty($$this, '$$t', {value:1});

		//constructor
		$es4.$$constructor($$thisp, (function ()
		{
		}));

		//method
		$es4.$$public_function('parse', $$thisp, (function ($$$$string)
		{
			//set default parameter values
			var string = $es4.$$coerce($$$$string, String);

			return $es4.$$get($es4.$$primitive(new (Hydrate)(string)), $$this, $$thisp, 'result');
		}));

		//method
		$es4.$$public_function('stringify', $$thisp, (function ($$$$obj)
		{
			//set default parameter values
			var obj = $$$$obj;

			return $es4.$$coerce($es4.$$get($es4.$$primitive(new (Dehydrate)(obj)), $$this, $$thisp, 'result'), String);
		}));

		//call construct if no arguments, or argument zero does not equal manual construct
		if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
		{
			for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

			$es4.$$construct($$this, $$args);
		}
	}

	////////////////INTERNAL CLASS////////////////
	var Hydrate = (function ()
	{
		//imports
		var getDefinitionByName;
		var getQualifiedClassName;
		var Dictionary;
		var Base64Util;

		//class initializer
		Hydrate.$$cinit = (function ()
		{
			Hydrate.$$cinit = undefined;

			//initialize imports
			getDefinitionByName = $es4.$$['flash.utils'].getDefinitionByName;
			getQualifiedClassName = $es4.$$['flash.utils'].getQualifiedClassName;
			Dictionary = $es4.$$['flash.utils'].Dictionary;
			Base64Util = $es4.$$['sweetrush.utils'].Base64Util;
		});

		function Hydrate()
		{
			//initialize class if not initialized
			if (Hydrate.$$cinit !== undefined) Hydrate.$$cinit();

			//save scope
			var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
			var $$thisp = this;

			//handle possible cast
			if ($$this === $$thisp && (!($$this instanceof Hydrate) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Hydrate) : $es4.$$throwArgumentError();
			Object.defineProperty($$this, '$$t', {value:1});

			//properties
			$es4.$$private_property('_dehydratedObj', $$thisp, Object);
			$es4.$$private_property('_hydratedIDs', $$thisp, Object);
			$es4.$$private_property('_result', $$thisp, Object);

			//constructor
			$es4.$$constructor($$thisp, (function ($$$$string)
			{
				//set default parameter values
				var string = $es4.$$coerce($$$$string, String);

				if (!string)
				{
					return;
				}
				$es4.$$set($$thisp, $$this, $$thisp, '_dehydratedObj', $es4.$$call(JSON, $$this, $$thisp, 'parse', [string]) || {}, '=');
				$es4.$$get($$thisp, $$this, $$thisp, '_dehydratedObj', 'dehydrated') || {};
				$es4.$$set($$thisp, $$this, $$thisp, '_hydratedIDs', {}, '=');
				$es4.$$set($$thisp, $$this, $$thisp, '_result', $es4.$$call($$thisp, $$this, $$thisp, 'hydrateObject', [$es4.$$get($$thisp, $$this, $$thisp, '_dehydratedObj', 'dehydrated'), $es4.$$get($$thisp, $$this, $$thisp, '_dehydratedObj', 'type')]), '=');
			}));

			//method
			$es4.$$private_function('hydrateObject', $$thisp, (function ($$$$object, $$$$type)
			{
				//set default parameter values
				var object = $es4.$$coerce($$$$object, Object);
				var type = $es4.$$coerce($$$$type, String);

				if ($es4.$$get($$thisp, $$this, $$thisp, '_hydratedIDs', $es4.$$get(object, $$this, $$thisp, 'id')) !== undefined)
				{
					return $es4.$$get($$thisp, $$this, $$thisp, '_hydratedIDs', $es4.$$get(object, $$this, $$thisp, 'id'));
				}
				var properties = null;
				var propertyName = null;
				var robject = type === 'array' ? [] : {};
				$es4.$$set($$thisp, $$this, $$thisp, '_hydratedIDs', $es4.$$get(object, $$this, $$thisp, 'id'), robject, '=');
				properties = $es4.$$get(object, $$this, $$thisp, 'p') || {};
				for (var $$i0 = (properties || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i0 != 0; $$i0 = properties.$$nextNameIndex($$i0))
				{
					propertyName = $es4.$$coerce(properties.$$nextName($$i0), String);

					$es4.$$set(robject, $$this, $$thisp, propertyName, $es4.$$call($$thisp, $$this, $$thisp, 'getValueObject', [$es4.$$get(properties, $$this, $$thisp, propertyName)]), '=');
				}
				return robject;
			}));

			//method
			$es4.$$private_function('getValueObject', $$thisp, (function ($$$$object)
			{
				//set default parameter values
				var object = $$$$object;

				if ($es4.$$is(object, String) && object == '__NaN__')
				{
					return $es4.$$coerce(NaN, Object);
				}
				if ($es4.$$is(object, String))
				{
					return $es4.$$call(Base64Util, $$this, $$thisp, 'decodeString', [object]);
				}
				if ($es4.$$is(object, Number) || $es4.$$is(object, Boolean) || object == null)
				{
					return object;
				}
				if ($es4.$$get(object, $$this, $$thisp, 'constructor') == Object)
				{
					if ($es4.$$get(object, $$this, $$thisp, 'r') !== undefined)
					{
						var id = $es4.$$coerce($es4.$$get(object, $$this, $$thisp, 'r'), String);
						var obj = $es4.$$get($$thisp, $$this, $$thisp, '_dehydratedObj', 'o');
						return $es4.$$call($$thisp, $$this, $$thisp, 'hydrateObject', [$es4.$$get(obj, $$this, $$thisp, id), $es4.$$get(obj, $$this, $$thisp, id, 'type')]);
					}
				}
				throw $es4.$$primitive(new (Error)('unknown value type'));
			}));

			//accessor
			$es4.$$public_accessor('result', $$thisp, (function ()
			{
				return $es4.$$get($$thisp, $$this, $$thisp, '_result');
			}), null);

			//call construct if no arguments, or argument zero does not equal manual construct
			if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
			{
				for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

				$es4.$$construct($$this, $$args);
			}
		}

		return $es4.$$class(Hydrate, null, 'Hydrate');
	})();

	////////////////INTERNAL CLASS////////////////
	var Dehydrate = (function ()
	{
		//imports
		var getDefinitionByName;
		var getQualifiedClassName;
		var Dictionary;
		var Base64Util;

		//class initializer
		Dehydrate.$$cinit = (function ()
		{
			Dehydrate.$$cinit = undefined;

			//initialize imports
			getDefinitionByName = $es4.$$['flash.utils'].getDefinitionByName;
			getQualifiedClassName = $es4.$$['flash.utils'].getQualifiedClassName;
			Dictionary = $es4.$$['flash.utils'].Dictionary;
			Base64Util = $es4.$$['sweetrush.utils'].Base64Util;
		});

		function Dehydrate()
		{
			//initialize class if not initialized
			if (Dehydrate.$$cinit !== undefined) Dehydrate.$$cinit();

			//save scope
			var $$this = (arguments.length !== 0 && arguments[0] === $es4.$$MANUAL_CONSTRUCT && arguments[1] !== undefined) ? arguments[1] : this;
			var $$thisp = this;

			//handle possible cast
			if ($$this === $$thisp && (!($$this instanceof Dehydrate) || $$this.$$t !== undefined)) return (arguments.length !== 0) ? $es4.$$as(arguments[0], Dehydrate) : $es4.$$throwArgumentError();
			Object.defineProperty($$this, '$$t', {value:1});

			//properties
			$es4.$$private_property('_dehydratedObjects', $$thisp, Object);
			$es4.$$private_property('_dehydratedNodes', $$thisp, Dictionary);
			$es4.$$private_property('_idCounter', $$thisp, int);
			$es4.$$private_property('_result', $$thisp, String);

			//initializer
			$es4.$$iinit($$thisp, (function ()
			{
				//initialize properties
				$es4.$$set($$this, $$this, $$thisp, '_dehydratedObjects', {}, '=');
				$es4.$$set($$this, $$this, $$thisp, '_dehydratedNodes', $es4.$$primitive(new (Dictionary)()), '=');
				$es4.$$set($$this, $$this, $$thisp, '_idCounter', 1, '=');
			}));

			//constructor
			$es4.$$constructor($$thisp, (function ($$$$persistable)
			{
				//set default parameter values
				var persistable = $$$$persistable;

				var dehydrated = $es4.$$call($$thisp, $$this, $$thisp, 'dehydrateObject', [persistable]);
				var obj = {};
				$es4.$$set(obj, $$this, $$thisp, 'dehydrated', dehydrated, '=');
				$es4.$$set(obj, $$this, $$thisp, 'type', $es4.$$is(persistable, Array) ? 'array' : 'object', '=');
				$es4.$$set(obj, $$this, $$thisp, 'o', $es4.$$get($$thisp, $$this, $$thisp, '_dehydratedObjects'), '=');
				$es4.$$set($$thisp, $$this, $$thisp, '_result', $es4.$$call(JSON, $$this, $$thisp, 'stringify', [obj]), '=');
			}));

			//method
			$es4.$$private_function('dehydrateObject', $$thisp, (function ($$$$object)
			{
				//set default parameter values
				var object = $es4.$$coerce($$$$object, Object);

				var dehydrated = $es4.$$call($$thisp, $$this, $$thisp, 'getDehydrated', [object]);
				if (dehydrated)
				{
					return dehydrated;
				}
				dehydrated = {};
				$es4.$$set(dehydrated, $$this, $$thisp, 'id', $es4.$$call($$thisp, $$this, $$thisp, 'generateID', $es4.$$EMPTY_ARRAY), '=');
				$es4.$$set(dehydrated, $$this, $$thisp, 'type', $es4.$$is(object, Array) ? 'array' : 'object', '=');
				$es4.$$set($$thisp, $$this, $$thisp, '_dehydratedNodes', object, dehydrated, '=');
				if ($es4.$$is(object, Array) || $es4.$$is($es4.$$typeof($es4.$$call(object, $$this, $$thisp, 'valueOf', $es4.$$EMPTY_ARRAY)), Object))
				{
					$es4.$$set($$thisp, $$this, $$thisp, '_dehydratedObjects', $es4.$$get(dehydrated, $$this, $$thisp, 'id'), dehydrated, '=');
					for (var $$i1 = (object || $es4.$$EMPTY_OBJECT).$$nextNameIndex(0); $$i1 != 0; $$i1 = object.$$nextNameIndex($$i1))
					{
						var property = $es4.$$coerce(object.$$nextName($$i1), String);

						if ($es4.$$get(dehydrated, $$this, $$thisp, 'p') === undefined)
						{
							$es4.$$set(dehydrated, $$this, $$thisp, 'p', {}, '=');
						}
						$es4.$$set(dehydrated, $$this, $$thisp, 'p', property, $es4.$$call($$thisp, $$this, $$thisp, 'getValue', [$es4.$$get(object, $$this, $$thisp, property)]), '=');
					}
					return dehydrated;
				}
				throw $es4.$$primitive(new (Error)('Type is not supported for dehydration'));
			}));

			//method
			$es4.$$private_function('getDehydrated', $$thisp, (function ($$$$object)
			{
				//set default parameter values
				var object = $es4.$$coerce($$$$object, Object);

				return $es4.$$get($$thisp, $$this, $$thisp, '_dehydratedNodes', object);
			}));

			//method
			$es4.$$private_function('getValue', $$thisp, (function ($$$$object)
			{
				//set default parameter values
				var object = $es4.$$coerce($$$$object, Object);

				if ($es4.$$is(object, String))
				{
					return $es4.$$call(Base64Util, $$this, $$thisp, 'encodeString', [$es4.$$as(object, String)]);
				}
				if ($es4.$$is(object, Number) && isNaN($es4.$$as(object, Number)))
				{
					return '__NaN__';
				}
				if ($es4.$$is(object, Number) || $es4.$$is(object, Boolean) || object == null)
				{
					return object;
				}
				object = $es4.$$call($$thisp, $$this, $$thisp, 'dehydrateObject', [object]);
				return {r:$es4.$$get(object, $$this, $$thisp, 'id')};
			}));

			//method
			$es4.$$private_function('generateID', $$thisp, (function ()
			{
				return $es4.$$call(($es4.$$set($$thisp, $$this, $$thisp, '_idCounter', 'postfix', '++')), $$this, $$thisp, 'toString', $es4.$$EMPTY_ARRAY);
			}));

			//accessor
			$es4.$$public_accessor('result', $$thisp, (function ()
			{
				return $es4.$$get($$thisp, $$this, $$thisp, '_result');
			}), null);

			//call construct if no arguments, or argument zero does not equal manual construct
			if (arguments.length === 0 || arguments[0] !== $es4.$$MANUAL_CONSTRUCT)
			{
				for (var $$i = 0, $$length = arguments.length, $$args = new Array($$length); $$i < $$length; $$i += 1) $$args[$$i] = arguments[$$i];

				$es4.$$construct($$this, $$args);
			}
		}

		return $es4.$$class(Dehydrate, null, 'Dehydrate');
	})();

	return $es4.$$class(JsonUtil, {CLASSES:[Hydrate, Dehydrate]}, 'sweetrush.utils::JsonUtil');
})();
//sweetrush.utils.JsonUtil


$es4.$$['sweetrush.obj'].Token.$$pcinit();

$es4.$$['sweetrush'].Transcompiler.$$pcinit();

$es4.$$['sweetrush.core'].TranslatorPrototype.$$pcinit();

$es4.$$['sweetrush.utils'].Base64Util.$$pcinit();

$es4.$$['sweetrush.obj'].Construct.$$pcinit();

$es4.$$['sweetrush.core'].TranslatorProto.$$pcinit();

$es4.$$['sweetrush.core'].Analyzer.$$pcinit();

$es4.$$['sweetrush.core'].Lexer.$$pcinit();

$es4.$$['sweetrush.core'].Parser.$$pcinit();

$es4.$$['sweetrush.utils'].SwcUtil.$$pcinit();

$es4.$$['sweetrush.utils'].FileUtil.$$pcinit();

$es4.$$['sweetrush.utils'].JsonUtil.$$pcinit();

window.as3_js = new $es4.$$['sweetrush'].Transcompiler($es4.$$MANUAL_CONSTRUCT)
$es4.$$construct(window.as3_js, $es4.$$EMPTY_ARRAY);
window.as3_js;})();